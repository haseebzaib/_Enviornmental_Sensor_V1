
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ffa0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002350  08020140  08020140  00030140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022490  08022490  00040318  2**0
                  CONTENTS
  4 .ARM          00000008  08022490  08022490  00032490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022498  08022498  00040318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022498  08022498  00032498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802249c  0802249c  0003249c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  080224a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003308  20000318  080227b8  00040318  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003620  080227b8  00043620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037723  00000000  00000000  00040348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008143  00000000  00000000  00077a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002df0  00000000  00000000  0007fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ab0  00000000  00000000  000829a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f79  00000000  00000000  00085450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fb45  00000000  00000000  000ab3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b362a  00000000  00000000  000eaf0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e538  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d68c  00000000  00000000  0019e588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000318 	.word	0x20000318
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08020128 	.word	0x08020128

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000031c 	.word	0x2000031c
 80001dc:	08020128 	.word	0x08020128

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e03d      	b.n	80010b8 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	429a      	cmp	r2, r3
 8001042:	d21b      	bcs.n	800107c <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	43db      	mvns	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	440b      	add	r3, r1
 800105e:	4002      	ands	r2, r0
 8001060:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4403      	add	r3, r0
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e01a      	b.n	80010b2 <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	43db      	mvns	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	440b      	add	r3, r1
 8001094:	4002      	ands	r2, r0
 8001096:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4403      	add	r3, r0
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010be:	d3bd      	bcc.n	800103c <setSoftPWM+0x14>
		}
	}

}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <toggle_blue_led>:
uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
		if(blue_led_pwm_val != 0)
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <toggle_blue_led+0x34>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <toggle_blue_led+0x16>
    		{
			blue_led_pwm_val = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <toggle_blue_led+0x34>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]
 80010e4:	e003      	b.n	80010ee <toggle_blue_led+0x1e>
    		}
    		else
    		{
    			blue_led_pwm_val = 1000;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <toggle_blue_led+0x34>)
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	801a      	strh	r2, [r3, #0]
    		}
    		BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <toggle_blue_led+0x34>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <toggle_blue_led+0x38>)
 80010f6:	4619      	mov	r1, r3
 80010f8:	2008      	movs	r0, #8
 80010fa:	f7ff ff95 	bl	8001028 <setSoftPWM>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200012da 	.word	0x200012da
 8001108:	20000334 	.word	0x20000334

0800110c <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <pir_interrupt+0x2c>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001116:	2101      	movs	r1, #1
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <pir_interrupt+0x30>)
 800111a:	f004 fce9 	bl	8005af0 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <pir_interrupt+0x34>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 800112a:	e002      	b.n	8001132 <pir_interrupt+0x26>
		pir_motion_flag = 0;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <pir_interrupt+0x34>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200014c1 	.word	0x200014c1
 800113c:	40020000 	.word	0x40020000
 8001140:	200014c0 	.word	0x200014c0

08001144 <timer_interrupt>:

void timer_interrupt() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <timer_interrupt+0x2c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <timer_interrupt+0x2c>)
 8001150:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <timer_interrupt+0x2c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115a:	d302      	bcc.n	8001162 <timer_interrupt+0x1e>
		time_keep = 0;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <timer_interrupt+0x2c>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 8001162:	f002 fcf9 	bl	8003b58 <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	4a02      	ldr	r2, [pc, #8]	; (8001174 <timer_interrupt+0x30>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200014b4 	.word	0x200014b4
 8001174:	200016f8 	.word	0x200016f8

08001178 <power_off_detect>:

void power_off_detect() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 800117c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <power_off_detect+0x20>)
 8001182:	f004 fcb5 	bl	8005af0 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <power_off_detect+0x1c>
		_RunTime_Packet.pwr_off_det = 1;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <power_off_detect+0x24>)
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020000 	.word	0x40020000
 800119c:	20001474 	.word	0x20001474

080011a0 <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_DMA_Init+0x3c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <MX_DMA_Init+0x3c>)
 80011b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2044      	movs	r0, #68	; 0x44
 80011c8:	f003 faa9 	bl	800471e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011cc:	2044      	movs	r0, #68	; 0x44
 80011ce:	f003 fac2 	bl	8004756 <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <pwr_off_detected>:

static void pwr_off_detected() {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <pwr_off_detected+0x3c>)
 80011e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d014      	beq.n	8001218 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <pwr_off_detected+0x3c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		GREEN_LED_PWM(disable_led);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <pwr_off_detected+0x40>)
 80011f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
		RED_LED_PWM(disable_led);
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <pwr_off_detected+0x40>)
 8001200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
		BLUE_LED_PWM(0);
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <pwr_off_detected+0x44>)
 8001208:	2100      	movs	r1, #0
 800120a:	2008      	movs	r0, #8
 800120c:	f7ff ff0c 	bl	8001028 <setSoftPWM>
		HAL_Delay(5000);
 8001210:	f241 3088 	movw	r0, #5000	; 0x1388
 8001214:	f002 fcac 	bl	8003b70 <HAL_Delay>

	}
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20001474 	.word	0x20001474
 8001220:	40000400 	.word	0x40000400
 8001224:	20000334 	.word	0x20000334

08001228 <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f01a f9d8 	bl	801b5ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <clock_speed_slow+0xbc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <clock_speed_slow+0xbc>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <clock_speed_slow+0xbc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <clock_speed_slow+0xc0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001274:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <clock_speed_slow+0xc0>)
 8001276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <clock_speed_slow+0xc0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001288:	2306      	movs	r3, #6
 800128a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 f895 	bl	80083d0 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <clock_speed_slow+0x88>
		Error_Handler();
 80012ac:	f001 ff16 	bl	80030dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80012b8:	23c0      	movs	r3, #192	; 0xc0
 80012ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 faf8 	bl	80088c0 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <clock_speed_slow+0xb2>
		Error_Handler();
 80012d6:	f001 ff01 	bl	80030dc <Error_Handler>
	}

}
 80012da:	bf00      	nop
 80012dc:	3750      	adds	r7, #80	; 0x50
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b094      	sub	sp, #80	; 0x50
 80012f0:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 80012f2:	4b45      	ldr	r3, [pc, #276]	; (8001408 <clock_speed_high+0x11c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a44      	ldr	r2, [pc, #272]	; (8001408 <clock_speed_high+0x11c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 80012fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001302:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 8001306:	bf00      	nop
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <clock_speed_high+0x11c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d106      	bne.n	8001322 <clock_speed_high+0x36>
 8001314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f2      	bne.n	8001308 <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <clock_speed_high+0x11c>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4a38      	ldr	r2, [pc, #224]	; (8001408 <clock_speed_high+0x11c>)
 8001328:	f023 0303 	bic.w	r3, r3, #3
 800132c:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <clock_speed_high+0x11c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a35      	ldr	r2, [pc, #212]	; (8001408 <clock_speed_high+0x11c>)
 8001334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001338:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2230      	movs	r2, #48	; 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f01a f952 	bl	801b5ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <clock_speed_high+0x11c>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a29      	ldr	r2, [pc, #164]	; (8001408 <clock_speed_high+0x11c>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <clock_speed_high+0x11c>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <clock_speed_high+0x120>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001380:	4a22      	ldr	r2, [pc, #136]	; (800140c <clock_speed_high+0x120>)
 8001382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <clock_speed_high+0x120>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001394:	2305      	movs	r3, #5
 8001396:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80013ac:	2319      	movs	r3, #25
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80013b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013b4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013b6:	2304      	movs	r3, #4
 80013b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ba:	2307      	movs	r3, #7
 80013bc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 f804 	bl	80083d0 <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <clock_speed_high+0xe6>
		Error_Handler();
 80013ce:	f001 fe85 	bl	80030dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2302      	movs	r3, #2
 80013d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fa66 	bl	80088c0 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <clock_speed_high+0x112>
		Error_Handler();
 80013fa:	f001 fe6f 	bl	80030dc <Error_Handler>
	}

}
 80013fe:	bf00      	nop
 8001400:	3750      	adds	r7, #80	; 0x50
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <load_param+0xa4>)
 8001418:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f8b3 3195 	ldrh.w	r3, [r3, #405]	; 0x195
 8001420:	b29b      	uxth	r3, r3
 8001422:	f44f 52c2 	mov.w	r2, #6208	; 0x1840
 8001426:	4293      	cmp	r3, r2
 8001428:	d118      	bne.n	800145c <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <load_param+0xa8>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f240 1397 	movw	r3, #407	; 0x197
 8001436:	461a      	mov	r2, r3
 8001438:	f01a f8b0 	bl	801b59c <memcpy>

		if(strstr(_Flash_Packet.File_Name, "devEUI"))
 800143c:	491f      	ldr	r1, [pc, #124]	; (80014bc <load_param+0xac>)
 800143e:	481e      	ldr	r0, [pc, #120]	; (80014b8 <load_param+0xa8>)
 8001440:	f01b f90f 	bl	801c662 <strstr>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d019      	beq.n	800147e <load_param+0x6e>
		{
			sprintf(_Flash_Packet.File_Name,"%s",ver_GetUid());
 800144a:	f000 ff63 	bl	8002314 <ver_GetUid>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	491b      	ldr	r1, [pc, #108]	; (80014c0 <load_param+0xb0>)
 8001454:	4818      	ldr	r0, [pc, #96]	; (80014b8 <load_param+0xa8>)
 8001456:	f01b f8cf 	bl	801c5f8 <siprintf>
 800145a:	e010      	b.n	800147e <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <load_param+0xa8>)
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <load_param+0xb4>)
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f240 1397 	movw	r3, #407	; 0x197
 8001468:	461a      	mov	r2, r3
 800146a:	f01a f897 	bl	801b59c <memcpy>
		sprintf(_Flash_Packet.File_Name,"%s",ver_GetUid());
 800146e:	f000 ff51 	bl	8002314 <ver_GetUid>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4912      	ldr	r1, [pc, #72]	; (80014c0 <load_param+0xb0>)
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <load_param+0xa8>)
 800147a:	f01b f8bd 	bl	801c5f8 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800147e:	4912      	ldr	r1, [pc, #72]	; (80014c8 <load_param+0xb8>)
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <load_param+0xbc>)
 8001482:	f01b f8ee 	bl	801c662 <strstr>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <load_param+0xc0>)
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001494:	e00a      	b.n	80014ac <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001496:	490f      	ldr	r1, [pc, #60]	; (80014d4 <load_param+0xc4>)
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <load_param+0xbc>)
 800149a:	f01b f8e2 	bl	801c662 <strstr>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <load_param+0xc0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	08060000 	.word	0x08060000
 80014b8:	200012dc 	.word	0x200012dc
 80014bc:	08020140 	.word	0x08020140
 80014c0:	08020148 	.word	0x08020148
 80014c4:	08021944 	.word	0x08021944
 80014c8:	0802014c 	.word	0x0802014c
 80014cc:	20001340 	.word	0x20001340
 80014d0:	20001474 	.word	0x20001474
 80014d4:	08020154 	.word	0x08020154

080014d8 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014de:	b672      	cpsid	i
}
 80014e0:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <store_param+0xc0>)
 80014e4:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80014e6:	f003 fdfb 	bl	80050e0 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014ea:	4b2c      	ldr	r3, [pc, #176]	; (800159c <store_param+0xc4>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <store_param+0xc4>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <store_param+0xc4>)
 80014f8:	2210      	movs	r2, #16
 80014fa:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <store_param+0xc4>)
 80014fe:	2220      	movs	r2, #32
 8001500:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <store_param+0xc4>)
 8001504:	2240      	movs	r2, #64	; 0x40
 8001506:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <store_param+0xc4>)
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <store_param+0xc4>)
 8001510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001514:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <store_param+0xc8>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <store_param+0xc8>)
 800151e:	2202      	movs	r2, #2
 8001520:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <store_param+0xc8>)
 8001524:	2207      	movs	r2, #7
 8001526:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <store_param+0xc8>)
 800152a:	2201      	movs	r2, #1
 800152c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800152e:	463b      	mov	r3, r7
 8001530:	4619      	mov	r1, r3
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <store_param+0xc8>)
 8001534:	f003 ff52 	bl	80053dc <HAL_FLASHEx_Erase>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800153e:	f003 fe01 	bl	8005144 <HAL_FLASH_GetError>
 8001542:	4603      	mov	r3, r0
 8001544:	e024      	b.n	8001590 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <store_param+0xcc>)
 8001548:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <store_param+0xd0>)
 800154c:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800154e:	e016      	b.n	800157e <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001550:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	68f9      	ldr	r1, [r7, #12]
 8001558:	2002      	movs	r0, #2
 800155a:	f003 fd6d 	bl	8005038 <HAL_FLASH_Program>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d106      	bne.n	8001572 <store_param+0x9a>

		{
			WrAdr += 4;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3304      	adds	r3, #4
 8001568:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3304      	adds	r3, #4
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	e005      	b.n	800157e <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 8001572:	f003 fdd7 	bl	8005124 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001576:	f003 fde5 	bl	8005144 <HAL_FLASH_GetError>
 800157a:	4603      	mov	r3, r0
 800157c:	e008      	b.n	8001590 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3e4      	bcc.n	8001550 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001586:	f003 fdcd 	bl	8005124 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800158a:	b662      	cpsie	i
}
 800158c:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800158e:	2300      	movs	r3, #0

}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200012dc 	.word	0x200012dc
 800159c:	40023c00 	.word	0x40023c00
 80015a0:	20001714 	.word	0x20001714
 80015a4:	08060197 	.word	0x08060197
 80015a8:	08060000 	.word	0x08060000

080015ac <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	if (save_param) {
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <save_data+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d022      	beq.n	80015fe <save_data+0x52>
		if (start_timer) {
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <save_data+0x5c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00b      	beq.n	80015d8 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80015c0:	4812      	ldr	r0, [pc, #72]	; (800160c <save_data+0x60>)
 80015c2:	f009 f9c5 	bl	800a950 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <save_data+0x60>)
 80015c8:	f009 f960 	bl	800a88c <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <save_data+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <save_data+0x5c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <save_data+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015e0:	d30d      	bcc.n	80015fe <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80015e2:	480a      	ldr	r0, [pc, #40]	; (800160c <save_data+0x60>)
 80015e4:	f009 f9b4 	bl	800a950 <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80015e8:	f7ff ff76 	bl	80014d8 <store_param>
			time_keep = 0;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <save_data+0x64>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <save_data+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <save_data+0x5c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200014b1 	.word	0x200014b1
 8001608:	200014b2 	.word	0x200014b2
 800160c:	200018b0 	.word	0x200018b0
 8001610:	200014b4 	.word	0x200014b4

08001614 <init_scd4x_i2c>:
static void init_scd4x_i2c() {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

	sensirion_i2c_hal_init();
 800161a:	f011 fbe9 	bl	8012df0 <sensirion_i2c_hal_init>
	scd4x_wake_up();
 800161e:	f011 fa99 	bl	8012b54 <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001622:	f011 f931 	bl	8012888 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 8001626:	f011 fa49 	bl	8012abc <scd4x_reinit>
	uint16_t serial_0;
	uint16_t serial_1;
	uint16_t serial_2;
	scd4x_get_serial_number(&serial_0, &serial_1, &serial_2);
 800162a:	1cba      	adds	r2, r7, #2
 800162c:	1d39      	adds	r1, r7, #4
 800162e:	1dbb      	adds	r3, r7, #6
 8001630:	4618      	mov	r0, r3
 8001632:	f011 f9eb 	bl	8012a0c <scd4x_get_serial_number>

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <get_scd4x_measurement>:
void get_scd4x_measurement() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b090      	sub	sp, #64	; 0x40
 8001644:	af02      	add	r7, sp, #8
	int16_t error = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	86fb      	strh	r3, [r7, #54]	; 0x36

	error = scd4x_start_periodic_measurement();
 800164a:	f011 f86d 	bl	8012728 <scd4x_start_periodic_measurement>
 800164e:	4603      	mov	r3, r0
 8001650:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensirion_i2c_hal_sleep_usec(100000);
 8001652:	483e      	ldr	r0, [pc, #248]	; (800174c <get_scd4x_measurement+0x10c>)
 8001654:	f011 fc42 	bl	8012edc <sensirion_i2c_hal_sleep_usec>
	bool data_ready_flag = false;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	error = scd4x_get_data_ready_flag(&data_ready_flag);
 800165e:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8001662:	4618      	mov	r0, r3
 8001664:	f011 f986 	bl	8012974 <scd4x_get_data_ready_flag>
 8001668:	4603      	mov	r3, r0
 800166a:	86fb      	strh	r3, [r7, #54]	; 0x36

	if (data_ready_flag) {
 800166c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001670:	2b00      	cmp	r3, #0
 8001672:	d066      	beq.n	8001742 <get_scd4x_measurement+0x102>
		error = scd4x_read_measurement(&_RunTime_Packet.co2,
 8001674:	4a36      	ldr	r2, [pc, #216]	; (8001750 <get_scd4x_measurement+0x110>)
 8001676:	4937      	ldr	r1, [pc, #220]	; (8001754 <get_scd4x_measurement+0x114>)
 8001678:	4837      	ldr	r0, [pc, #220]	; (8001758 <get_scd4x_measurement+0x118>)
 800167a:	f011 f8d3 	bl	8012824 <scd4x_read_measurement>
 800167e:	4603      	mov	r3, r0
 8001680:	86fb      	strh	r3, [r7, #54]	; 0x36
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);
		_RunTime_Packet.temperature = _RunTime_Packet.temperature / 1000;
 8001682:	4b35      	ldr	r3, [pc, #212]	; (8001758 <get_scd4x_measurement+0x118>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a35      	ldr	r2, [pc, #212]	; (800175c <get_scd4x_measurement+0x11c>)
 8001688:	fb82 1203 	smull	r1, r2, r2, r3
 800168c:	1192      	asrs	r2, r2, #6
 800168e:	17db      	asrs	r3, r3, #31
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <get_scd4x_measurement+0x118>)
 8001694:	6053      	str	r3, [r2, #4]
		_RunTime_Packet.humidity = _RunTime_Packet.humidity / 1000;
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <get_scd4x_measurement+0x118>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4a30      	ldr	r2, [pc, #192]	; (800175c <get_scd4x_measurement+0x11c>)
 800169c:	fb82 1203 	smull	r1, r2, r2, r3
 80016a0:	1192      	asrs	r2, r2, #6
 80016a2:	17db      	asrs	r3, r3, #31
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <get_scd4x_measurement+0x118>)
 80016a8:	6093      	str	r3, [r2, #8]

		if (debug_scd_pm) {
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <get_scd4x_measurement+0x120>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d047      	beq.n	8001742 <get_scd4x_measurement+0x102>
			char buf[50];
			if (error) {
 80016b2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d013      	beq.n	80016e2 <get_scd4x_measurement+0xa2>
				sprintf(buf, "Error executing scd4x_read_measurement(): %i\n",
 80016ba:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80016be:	463b      	mov	r3, r7
 80016c0:	4928      	ldr	r1, [pc, #160]	; (8001764 <get_scd4x_measurement+0x124>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f01a ff98 	bl	801c5f8 <siprintf>
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016c8:	463b      	mov	r3, r7
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fd92 	bl	80001f4 <strlen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4639      	mov	r1, r7
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	4823      	ldr	r0, [pc, #140]	; (8001768 <get_scd4x_measurement+0x128>)
 80016dc:	f00a f8f4 	bl	800b8c8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
			}
		}
	}
	//error = scd4x_stop_periodic_measurement();
}
 80016e0:	e02f      	b.n	8001742 <get_scd4x_measurement+0x102>
			} else if (_RunTime_Packet.co2 == 0) {
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <get_scd4x_measurement+0x118>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d111      	bne.n	800170e <get_scd4x_measurement+0xce>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80016ea:	463b      	mov	r3, r7
 80016ec:	491f      	ldr	r1, [pc, #124]	; (800176c <get_scd4x_measurement+0x12c>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f01a ff82 	bl	801c5f8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016f4:	463b      	mov	r3, r7
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fd7c 	bl	80001f4 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4639      	mov	r1, r7
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	4818      	ldr	r0, [pc, #96]	; (8001768 <get_scd4x_measurement+0x128>)
 8001708:	f00a f8de 	bl	800b8c8 <HAL_UART_Transmit>
}
 800170c:	e019      	b.n	8001742 <get_scd4x_measurement+0x102>
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <get_scd4x_measurement+0x118>)
 8001710:	881b      	ldrh	r3, [r3, #0]
				sprintf(buf, "Co2: %d, Temperature: %ld C, Humidity: %ld \r\n",
 8001712:	4619      	mov	r1, r3
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <get_scd4x_measurement+0x118>)
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <get_scd4x_measurement+0x118>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4638      	mov	r0, r7
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	460a      	mov	r2, r1
 8001724:	4912      	ldr	r1, [pc, #72]	; (8001770 <get_scd4x_measurement+0x130>)
 8001726:	f01a ff67 	bl	801c5f8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800172a:	463b      	mov	r3, r7
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd61 	bl	80001f4 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	4639      	mov	r1, r7
 8001738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173c:	480a      	ldr	r0, [pc, #40]	; (8001768 <get_scd4x_measurement+0x128>)
 800173e:	f00a f8c3 	bl	800b8c8 <HAL_UART_Transmit>
}
 8001742:	bf00      	nop
 8001744:	3738      	adds	r7, #56	; 0x38
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	000186a0 	.word	0x000186a0
 8001750:	2000147c 	.word	0x2000147c
 8001754:	20001478 	.word	0x20001478
 8001758:	20001474 	.word	0x20001474
 800175c:	10624dd3 	.word	0x10624dd3
 8001760:	200014b0 	.word	0x200014b0
 8001764:	0802015c 	.word	0x0802015c
 8001768:	200019a0 	.word	0x200019a0
 800176c:	0802018c 	.word	0x0802018c
 8001770:	080201b0 	.word	0x080201b0

08001774 <init_sps30>:
static void init_sps30() {
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <init_sps30+0x34>)
 800177c:	f011 ffa2 	bl	80136c4 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001780:	f011 feea 	bl	8013558 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f012 f8bb 	bl	8013902 <sps30_read_version>
 800178c:	4603      	mov	r3, r0
 800178e:	85fb      	strh	r3, [r7, #46]	; 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4618      	mov	r0, r3
 8001796:	f011 ffa9 	bl	80136ec <sps30_get_serial>
 800179a:	4603      	mov	r3, r0
 800179c:	85fb      	strh	r3, [r7, #46]	; 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 800179e:	bf00      	nop
 80017a0:	3730      	adds	r7, #48	; 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	000f4240 	.word	0x000f4240

080017ac <get_sps30_measurement>:
 void get_sps30_measurement() {
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b0a0      	sub	sp, #128	; 0x80
 80017b2:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 80017b4:	f011 ffc6 	bl	8013744 <sps30_start_measurement>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 80017be:	483a      	ldr	r0, [pc, #232]	; (80018a8 <get_sps30_measurement+0xfc>)
 80017c0:	f011 ffec 	bl	801379c <sps30_read_measurement>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <get_sps30_measurement+0xfc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a37      	ldr	r2, [pc, #220]	; (80018ac <get_sps30_measurement+0x100>)
 80017d0:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <get_sps30_measurement+0xfc>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a35      	ldr	r2, [pc, #212]	; (80018ac <get_sps30_measurement+0x100>)
 80017d8:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <get_sps30_measurement+0xfc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	4a33      	ldr	r2, [pc, #204]	; (80018ac <get_sps30_measurement+0x100>)
 80017e0:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <get_sps30_measurement+0xfc>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4a31      	ldr	r2, [pc, #196]	; (80018ac <get_sps30_measurement+0x100>)
 80017e8:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 80017ea:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db54      	blt.n	800189c <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <get_sps30_measurement+0x104>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d050      	beq.n	800189c <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 80017fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80017fe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001802:	b21b      	sxth	r3, r3
 8001804:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001808:	4293      	cmp	r3, r2
 800180a:	d113      	bne.n	8001834 <get_sps30_measurement+0x88>
				sprintf(buffer,
 800180c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001810:	b2da      	uxtb	r2, r3
 8001812:	463b      	mov	r3, r7
 8001814:	4927      	ldr	r1, [pc, #156]	; (80018b4 <get_sps30_measurement+0x108>)
 8001816:	4618      	mov	r0, r3
 8001818:	f01a feee 	bl	801c5f8 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 800181c:	463b      	mov	r3, r7
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fce8 	bl	80001f4 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	b29a      	uxth	r2, r3
 8001828:	4639      	mov	r1, r7
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	4822      	ldr	r0, [pc, #136]	; (80018b8 <get_sps30_measurement+0x10c>)
 8001830:	f00a f84a 	bl	800b8c8 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <get_sps30_measurement+0xfc>)
 8001836:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe9d 	bl	8000578 <__aeabi_f2d>
 800183e:	4682      	mov	sl, r0
 8001840:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <get_sps30_measurement+0xfc>)
 8001844:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe96 	bl	8000578 <__aeabi_f2d>
 800184c:	4604      	mov	r4, r0
 800184e:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <get_sps30_measurement+0xfc>)
 8001852:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe8f 	bl	8000578 <__aeabi_f2d>
 800185a:	4680      	mov	r8, r0
 800185c:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <get_sps30_measurement+0xfc>)
 8001860:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe88 	bl	8000578 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4638      	mov	r0, r7
 800186e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001872:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001876:	e9cd 4500 	strd	r4, r5, [sp]
 800187a:	4652      	mov	r2, sl
 800187c:	465b      	mov	r3, fp
 800187e:	490f      	ldr	r1, [pc, #60]	; (80018bc <get_sps30_measurement+0x110>)
 8001880:	f01a feba 	bl	801c5f8 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001884:	463b      	mov	r3, r7
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fcb4 	bl	80001f4 <strlen>
 800188c:	4603      	mov	r3, r0
 800188e:	b29a      	uxth	r2, r3
 8001890:	4639      	mov	r1, r7
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	4808      	ldr	r0, [pc, #32]	; (80018b8 <get_sps30_measurement+0x10c>)
 8001898:	f00a f816 	bl	800b8c8 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 800189c:	bf00      	nop
 800189e:	3768      	adds	r7, #104	; 0x68
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a6:	bf00      	nop
 80018a8:	200016d0 	.word	0x200016d0
 80018ac:	20001474 	.word	0x20001474
 80018b0:	200014b0 	.word	0x200014b0
 80018b4:	080201e0 	.word	0x080201e0
 80018b8:	200019a0 	.word	0x200019a0
 80018bc:	08020214 	.word	0x08020214

080018c0 <check_peripheral_error>:
static void check_peripheral_error() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <check_peripheral_error+0x70>)
 80018c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <check_peripheral_error+0x1a>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <check_peripheral_error+0x70>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		console_uart_init();
 80018d6:	f00f f83d 	bl	8010954 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <check_peripheral_error+0x70>)
 80018dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <check_peripheral_error+0x50>
		_RunTime_Packet.sps30_uart_error = 0;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <check_peripheral_error+0x70>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		disable_5v();
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f2:	4810      	ldr	r0, [pc, #64]	; (8001934 <check_peripheral_error+0x74>)
 80018f4:	f004 f914 	bl	8005b20 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80018f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018fc:	f002 f938 	bl	8003b70 <HAL_Delay>
		enable_5v();
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001906:	480b      	ldr	r0, [pc, #44]	; (8001934 <check_peripheral_error+0x74>)
 8001908:	f004 f90a 	bl	8005b20 <HAL_GPIO_WritePin>
		init_sps30();
 800190c:	f7ff ff32 	bl	8001774 <init_sps30>
	}

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x62 << 1), 5, 100)
 8001910:	2364      	movs	r3, #100	; 0x64
 8001912:	2205      	movs	r2, #5
 8001914:	21c4      	movs	r1, #196	; 0xc4
 8001916:	4808      	ldr	r0, [pc, #32]	; (8001938 <check_peripheral_error+0x78>)
 8001918:	f004 fdcc 	bl	80064b4 <HAL_I2C_IsDeviceReady>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <check_peripheral_error+0x6a>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
 8001922:	4b03      	ldr	r3, [pc, #12]	; (8001930 <check_peripheral_error+0x70>)
 8001924:	2201      	movs	r2, #1
 8001926:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20001474 	.word	0x20001474
 8001934:	40020400 	.word	0x40020400
 8001938:	20001770 	.word	0x20001770

0800193c <sensor_calibration>:
static void sensor_calibration() {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <sensor_calibration+0x28>)
 8001942:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00a      	beq.n	8001960 <sensor_calibration+0x24>
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <sensor_calibration+0x28>)
 800194c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <sensor_calibration+0x28>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		sps30_start_manual_fan_cleaning();
 800195c:	f011 ffbd 	bl	80138da <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20001474 	.word	0x20001474

08001968 <sleep>:
static void sleep() {
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <sleep+0x90>)
 800196e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
	RED_LED_PWM(disable_led);
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <sleep+0x90>)
 8001976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
	BLUE_LED_PWM(disable_led);
 800197c:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <sleep+0x94>)
 800197e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001982:	2008      	movs	r0, #8
 8001984:	f7ff fb50 	bl	8001028 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001988:	481d      	ldr	r0, [pc, #116]	; (8001a00 <sleep+0x98>)
 800198a:	f002 f99c 	bl	8003cc6 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	220b      	movs	r2, #11
 8001994:	491b      	ldr	r1, [pc, #108]	; (8001a04 <sleep+0x9c>)
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <sleep+0xa0>)
 8001998:	f009 ff96 	bl	800b8c8 <HAL_UART_Transmit>
	disable_5v();
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a2:	481a      	ldr	r0, [pc, #104]	; (8001a0c <sleep+0xa4>)
 80019a4:	f004 f8bc 	bl	8005b20 <HAL_GPIO_WritePin>
	disable_motion();
 80019a8:	2201      	movs	r2, #1
 80019aa:	2102      	movs	r1, #2
 80019ac:	4818      	ldr	r0, [pc, #96]	; (8001a10 <sleep+0xa8>)
 80019ae:	f004 f8b7 	bl	8005b20 <HAL_GPIO_WritePin>
	scd4x_stop_periodic_measurement();
 80019b2:	f010 ff69 	bl	8012888 <scd4x_stop_periodic_measurement>
	scd4x_power_down();
 80019b6:	f011 f8a7 	bl	8012b08 <scd4x_power_down>
	console_uart_deinit();
 80019ba:	f00e ffbf 	bl	801093c <console_uart_deinit>
	sensirion_i2c_hal_free();
 80019be:	f011 fa49 	bl	8012e54 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 80019c2:	f011 fe09 	bl	80135d8 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 80019c6:	f018 ffc1 	bl	801a94c <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 80019ca:	4812      	ldr	r0, [pc, #72]	; (8001a14 <sleep+0xac>)
 80019cc:	f008 feaf 	bl	800a72e <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 80019d0:	4811      	ldr	r0, [pc, #68]	; (8001a18 <sleep+0xb0>)
 80019d2:	f008 feac 	bl	800a72e <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 80019d6:	4811      	ldr	r0, [pc, #68]	; (8001a1c <sleep+0xb4>)
 80019d8:	f008 fea9 	bl	800a72e <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <sleep+0xb8>)
 80019de:	f002 ff95 	bl	800490c <HAL_DMA_DeInit>

	clock_speed_slow();
 80019e2:	f7ff fc21 	bl	8001228 <clock_speed_slow>

	HAL_SuspendTick();
 80019e6:	f002 f8e7 	bl	8003bb8 <HAL_SuspendTick>




	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80019ea:	2101      	movs	r1, #1
 80019ec:	2001      	movs	r0, #1
 80019ee:	f006 fcc3 	bl	8008378 <HAL_PWR_EnterSTOPMode>


}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40000400 	.word	0x40000400
 80019fc:	20000334 	.word	0x20000334
 8001a00:	20001728 	.word	0x20001728
 8001a04:	0802024c 	.word	0x0802024c
 8001a08:	200019a0 	.word	0x200019a0
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020000 	.word	0x40020000
 8001a14:	20001868 	.word	0x20001868
 8001a18:	200018b0 	.word	0x200018b0
 8001a1c:	200018f8 	.word	0x200018f8
 8001a20:	20001940 	.word	0x20001940

08001a24 <wakeup>:
static void wakeup() {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0

	//also add usb stuff


	HAL_ResumeTick();
 8001a28:	f002 f8d6 	bl	8003bd8 <HAL_ResumeTick>
	clock_speed_high();
 8001a2c:	f7ff fc5e 	bl	80012ec <clock_speed_high>
	enable_5v();
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a36:	4832      	ldr	r0, [pc, #200]	; (8001b00 <wakeup+0xdc>)
 8001a38:	f004 f872 	bl	8005b20 <HAL_GPIO_WritePin>
	enable_motion();
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2102      	movs	r1, #2
 8001a40:	4830      	ldr	r0, [pc, #192]	; (8001b04 <wakeup+0xe0>)
 8001a42:	f004 f86d 	bl	8005b20 <HAL_GPIO_WritePin>
	console_uart_init();
 8001a46:	f00e ff85 	bl	8010954 <console_uart_init>

	MX_DMA_Init();
 8001a4a:	f7ff fba9 	bl	80011a0 <MX_DMA_Init>
	MX_TIM1_Init();
 8001a4e:	f001 f845 	bl	8002adc <MX_TIM1_Init>
	MX_TIM2_Init();
 8001a52:	f001 f893 	bl	8002b7c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001a56:	f001 f8df 	bl	8002c18 <MX_TIM3_Init>

	init_scd4x_i2c();
 8001a5a:	f7ff fddb 	bl	8001614 <init_scd4x_i2c>
	MX_USB_DEVICE_Init(); //initialize usb anyways
 8001a5e:	f018 ff87 	bl	801a970 <MX_USB_DEVICE_Init>
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a66:	4827      	ldr	r0, [pc, #156]	; (8001b04 <wakeup+0xe0>)
 8001a68:	f004 f842 	bl	8005af0 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <wakeup+0x54>
		init_sps30();
 8001a72:	f7ff fe7f 	bl	8001774 <init_sps30>
 8001a76:	e00f      	b.n	8001a98 <wakeup+0x74>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <wakeup+0xe4>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_start_timer = 1;
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <wakeup+0xe4>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <wakeup+0xe8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001a8e:	f002 f863 	bl	8003b58 <HAL_GetTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <wakeup+0xec>)
 8001a96:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001a98:	481e      	ldr	r0, [pc, #120]	; (8001b14 <wakeup+0xf0>)
 8001a9a:	f008 fe9d 	bl	800a7d8 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001a9e:	491e      	ldr	r1, [pc, #120]	; (8001b18 <wakeup+0xf4>)
 8001aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <wakeup+0xf8>)
 8001aa6:	481e      	ldr	r0, [pc, #120]	; (8001b20 <wakeup+0xfc>)
 8001aa8:	f002 ff8e 	bl	80049c8 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <wakeup+0xf0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <wakeup+0xf0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aba:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001abc:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <wakeup+0xf4>)
 8001abe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ac2:	2008      	movs	r0, #8
 8001ac4:	f7ff fab0 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4816      	ldr	r0, [pc, #88]	; (8001b24 <wakeup+0x100>)
 8001acc:	f008 ffc8 	bl	800aa60 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <wakeup+0x104>)
 8001ad2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001ad8:	2104      	movs	r1, #4
 8001ada:	4812      	ldr	r0, [pc, #72]	; (8001b24 <wakeup+0x100>)
 8001adc:	f008 ffc0 	bl	800aa60 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <wakeup+0x104>)
 8001ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38

	pwr_off_detected();
 8001ae8:	f7ff fb7a 	bl	80011e0 <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af0:	220a      	movs	r2, #10
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <wakeup+0x108>)
 8001af4:	480e      	ldr	r0, [pc, #56]	; (8001b30 <wakeup+0x10c>)
 8001af6:	f009 fee7 	bl	800b8c8 <HAL_UART_Transmit>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40020000 	.word	0x40020000
 8001b08:	20001474 	.word	0x20001474
 8001b0c:	200014bc 	.word	0x200014bc
 8001b10:	20001700 	.word	0x20001700
 8001b14:	20001868 	.word	0x20001868
 8001b18:	20000334 	.word	0x20000334
 8001b1c:	40020418 	.word	0x40020418
 8001b20:	20001940 	.word	0x20001940
 8001b24:	200018f8 	.word	0x200018f8
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	08020258 	.word	0x08020258
 8001b30:	200019a0 	.word	0x200019a0

08001b34 <green_led_blink>:

static void green_led_blink() {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <green_led_blink+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b3e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b42:	f002 f815 	bl	8003b70 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <green_led_blink+0x4c>)
 8001b48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b4e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b52:	f002 f80d 	bl	8003b70 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <green_led_blink+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b5c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b60:	f002 f806 	bl	8003b70 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <green_led_blink+0x4c>)
 8001b66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b6c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b70:	f001 fffe 	bl	8003b70 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <green_led_blink+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40000400 	.word	0x40000400

08001b84 <led_awake_routine>:

static void led_awake_routine() {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001b88:	4ba6      	ldr	r3, [pc, #664]	; (8001e24 <led_awake_routine+0x2a0>)
 8001b8a:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 8195 	bne.w	8001ebe <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b98:	48a3      	ldr	r0, [pc, #652]	; (8001e28 <led_awake_routine+0x2a4>)
 8001b9a:	f003 ffa9 	bl	8005af0 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d025      	beq.n	8001bf0 <led_awake_routine+0x6c>
				{




			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001ba4:	4b9f      	ldr	r3, [pc, #636]	; (8001e24 <led_awake_routine+0x2a0>)
 8001ba6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001baa:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001e2c <led_awake_routine+0x2a8>
 8001bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	db0d      	blt.n	8001bd4 <led_awake_routine+0x50>
							GREEN_LED_PWM(0);
 8001bb8:	4b9d      	ldr	r3, [pc, #628]	; (8001e30 <led_awake_routine+0x2ac>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
							RED_LED_PWM(disable_led);
 8001bbe:	4b9c      	ldr	r3, [pc, #624]	; (8001e30 <led_awake_routine+0x2ac>)
 8001bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001bc6:	4a9b      	ldr	r2, [pc, #620]	; (8001e34 <led_awake_routine+0x2b0>)
 8001bc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bcc:	2008      	movs	r0, #8
 8001bce:	f7ff fa2b 	bl	8001028 <setSoftPWM>
			red_led_pwm_val =0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001bd2:	e196      	b.n	8001f02 <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001bd4:	4b96      	ldr	r3, [pc, #600]	; (8001e30 <led_awake_routine+0x2ac>)
 8001bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34
						RED_LED_PWM(disable_led);
 8001bdc:	4b94      	ldr	r3, [pc, #592]	; (8001e30 <led_awake_routine+0x2ac>)
 8001bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38
						BLUE_LED_PWM(0);
 8001be4:	4a93      	ldr	r2, [pc, #588]	; (8001e34 <led_awake_routine+0x2b0>)
 8001be6:	2100      	movs	r1, #0
 8001be8:	2008      	movs	r0, #8
 8001bea:	f7ff fa1d 	bl	8001028 <setSoftPWM>
}
 8001bee:	e188      	b.n	8001f02 <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001bf0:	4a90      	ldr	r2, [pc, #576]	; (8001e34 <led_awake_routine+0x2b0>)
 8001bf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bf6:	2008      	movs	r0, #8
 8001bf8:	f7ff fa16 	bl	8001028 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001bfc:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <led_awake_routine+0x2a0>)
 8001bfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c02:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001e2c <led_awake_routine+0x2a8>
 8001c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	db38      	blt.n	8001c82 <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001c10:	4b87      	ldr	r3, [pc, #540]	; (8001e30 <led_awake_routine+0x2ac>)
 8001c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c16:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001c18:	4a86      	ldr	r2, [pc, #536]	; (8001e34 <led_awake_routine+0x2b0>)
 8001c1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c1e:	2008      	movs	r0, #8
 8001c20:	f7ff fa02 	bl	8001028 <setSoftPWM>
							if (!green_led_pwm_flag) {
 8001c24:	4b84      	ldr	r3, [pc, #528]	; (8001e38 <led_awake_routine+0x2b4>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <led_awake_routine+0xbc>
								green_led_pwm_val += 5;
 8001c2c:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <led_awake_routine+0x2b8>)
 8001c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3305      	adds	r3, #5
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <led_awake_routine+0x2b8>)
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	e008      	b.n	8001c52 <led_awake_routine+0xce>
								green_led_pwm_val -= 5;
 8001c40:	4b7e      	ldr	r3, [pc, #504]	; (8001e3c <led_awake_routine+0x2b8>)
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b05      	subs	r3, #5
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <led_awake_routine+0x2b8>)
 8001c50:	801a      	strh	r2, [r3, #0]
							if (green_led_pwm_val > 1000) {
 8001c52:	4b7a      	ldr	r3, [pc, #488]	; (8001e3c <led_awake_routine+0x2b8>)
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c5c:	dd03      	ble.n	8001c66 <led_awake_routine+0xe2>
								green_led_pwm_flag = 1;
 8001c5e:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <led_awake_routine+0x2b4>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e007      	b.n	8001c76 <led_awake_routine+0xf2>
							} else if (green_led_pwm_val <= 0) {
 8001c66:	4b75      	ldr	r3, [pc, #468]	; (8001e3c <led_awake_routine+0x2b8>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dc02      	bgt.n	8001c76 <led_awake_routine+0xf2>
								green_led_pwm_flag = 0;
 8001c70:	4b71      	ldr	r3, [pc, #452]	; (8001e38 <led_awake_routine+0x2b4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
							GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001c76:	4b71      	ldr	r3, [pc, #452]	; (8001e3c <led_awake_routine+0x2b8>)
 8001c78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <led_awake_routine+0x2ac>)
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c80:	e13f      	b.n	8001f02 <led_awake_routine+0x37e>
			else if (_RunTime_Packet.battery_voltage > battery_Low
 8001c82:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <led_awake_routine+0x2a0>)
 8001c84:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c88:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c94:	dd42      	ble.n	8001d1c <led_awake_routine+0x198>
						&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001c96:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <led_awake_routine+0x2a0>)
 8001c98:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c9c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001e2c <led_awake_routine+0x2a8>
 8001ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	d838      	bhi.n	8001d1c <led_awake_routine+0x198>
					RED_LED_PWM(disable_led);
 8001caa:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <led_awake_routine+0x2ac>)
 8001cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38
					BLUE_LED_PWM(disable_led);
 8001cb2:	4a60      	ldr	r2, [pc, #384]	; (8001e34 <led_awake_routine+0x2b0>)
 8001cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb8:	2008      	movs	r0, #8
 8001cba:	f7ff f9b5 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 8001cbe:	4b5e      	ldr	r3, [pc, #376]	; (8001e38 <led_awake_routine+0x2b4>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <led_awake_routine+0x156>
						green_led_pwm_val += 5;
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <led_awake_routine+0x2b8>)
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3305      	adds	r3, #5
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <led_awake_routine+0x2b8>)
 8001cd6:	801a      	strh	r2, [r3, #0]
 8001cd8:	e008      	b.n	8001cec <led_awake_routine+0x168>
						green_led_pwm_val -= 5;
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <led_awake_routine+0x2b8>)
 8001cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b05      	subs	r3, #5
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <led_awake_routine+0x2b8>)
 8001cea:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <led_awake_routine+0x2b8>)
 8001cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cf6:	dd03      	ble.n	8001d00 <led_awake_routine+0x17c>
						green_led_pwm_flag = 1;
 8001cf8:	4b4f      	ldr	r3, [pc, #316]	; (8001e38 <led_awake_routine+0x2b4>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e007      	b.n	8001d10 <led_awake_routine+0x18c>
					} else if (green_led_pwm_val <= 0) {
 8001d00:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <led_awake_routine+0x2b8>)
 8001d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	dc02      	bgt.n	8001d10 <led_awake_routine+0x18c>
						green_led_pwm_flag = 0;
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	; (8001e38 <led_awake_routine+0x2b4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001d10:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <led_awake_routine+0x2b8>)
 8001d12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <led_awake_routine+0x2ac>)
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34
 8001d1a:	e0f2      	b.n	8001f02 <led_awake_routine+0x37e>
				} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001d1c:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <led_awake_routine+0x2a0>)
 8001d1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d22:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e40 <led_awake_routine+0x2bc>
 8001d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	f340 808d 	ble.w	8001e4c <led_awake_routine+0x2c8>
						&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001d32:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <led_awake_routine+0x2a0>)
 8001d34:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d38:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	f200 8082 	bhi.w	8001e4c <led_awake_routine+0x2c8>
					if(green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <led_awake_routine+0x2b4>)
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <led_awake_routine+0x2c0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d003      	beq.n	8001d5c <led_awake_routine+0x1d8>
						green_led_pwm_flag = red_led_pwm_flag;
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <led_awake_routine+0x2c0>)
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <led_awake_routine+0x2b4>)
 8001d5a:	701a      	strb	r2, [r3, #0]
					BLUE_LED_PWM(disable_led);
 8001d5c:	4a35      	ldr	r2, [pc, #212]	; (8001e34 <led_awake_routine+0x2b0>)
 8001d5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d62:	2008      	movs	r0, #8
 8001d64:	f7ff f960 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <led_awake_routine+0x2b4>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <led_awake_routine+0x200>
						green_led_pwm_val += 5;
 8001d70:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <led_awake_routine+0x2b8>)
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3305      	adds	r3, #5
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <led_awake_routine+0x2b8>)
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e008      	b.n	8001d96 <led_awake_routine+0x212>
						green_led_pwm_val -= 5;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <led_awake_routine+0x2b8>)
 8001d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b05      	subs	r3, #5
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <led_awake_routine+0x2b8>)
 8001d94:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <led_awake_routine+0x2b8>)
 8001d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da0:	dd03      	ble.n	8001daa <led_awake_routine+0x226>
						green_led_pwm_flag = 1;
 8001da2:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <led_awake_routine+0x2b4>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
 8001da8:	e007      	b.n	8001dba <led_awake_routine+0x236>
					} else if (green_led_pwm_val <= 0) {
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <led_awake_routine+0x2b8>)
 8001dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dc02      	bgt.n	8001dba <led_awake_routine+0x236>
						green_led_pwm_flag = 0;
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <led_awake_routine+0x2b4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
					if (!red_led_pwm_flag) {
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <led_awake_routine+0x2c0>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <led_awake_routine+0x252>
						red_led_pwm_val += 5;
 8001dc2:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <led_awake_routine+0x2c4>)
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3305      	adds	r3, #5
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	b21a      	sxth	r2, r3
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <led_awake_routine+0x2c4>)
 8001dd2:	801a      	strh	r2, [r3, #0]
 8001dd4:	e008      	b.n	8001de8 <led_awake_routine+0x264>
						red_led_pwm_val -= 5;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <led_awake_routine+0x2c4>)
 8001dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b05      	subs	r3, #5
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <led_awake_routine+0x2c4>)
 8001de6:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <led_awake_routine+0x2c4>)
 8001dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df2:	dd03      	ble.n	8001dfc <led_awake_routine+0x278>
						red_led_pwm_flag = 1;
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <led_awake_routine+0x2c0>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e007      	b.n	8001e0c <led_awake_routine+0x288>
					} else if (red_led_pwm_val <= 0) {
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <led_awake_routine+0x2c4>)
 8001dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dc02      	bgt.n	8001e0c <led_awake_routine+0x288>
						red_led_pwm_flag = 0;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <led_awake_routine+0x2c0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <led_awake_routine+0x2b8>)
 8001e0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <led_awake_routine+0x2ac>)
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <led_awake_routine+0x2c4>)
 8001e18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <led_awake_routine+0x2ac>)
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e20:	e06f      	b.n	8001f02 <led_awake_routine+0x37e>
 8001e22:	bf00      	nop
 8001e24:	20001474 	.word	0x20001474
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40833333 	.word	0x40833333
 8001e30:	40000400 	.word	0x40000400
 8001e34:	20000334 	.word	0x20000334
 8001e38:	200012d4 	.word	0x200012d4
 8001e3c:	200012d6 	.word	0x200012d6
 8001e40:	40533333 	.word	0x40533333
 8001e44:	200012d5 	.word	0x200012d5
 8001e48:	200012d8 	.word	0x200012d8
					GREEN_LED_PWM(disable_led);
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <led_awake_routine+0x384>)
 8001e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34
					BLUE_LED_PWM(disable_led);
 8001e54:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <led_awake_routine+0x388>)
 8001e56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e5a:	2008      	movs	r0, #8
 8001e5c:	f7ff f8e4 	bl	8001028 <setSoftPWM>
					if (!red_led_pwm_flag) {
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <led_awake_routine+0x38c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <led_awake_routine+0x2f8>
						red_led_pwm_val += 5;
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <led_awake_routine+0x390>)
 8001e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3305      	adds	r3, #5
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <led_awake_routine+0x390>)
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e008      	b.n	8001e8e <led_awake_routine+0x30a>
						red_led_pwm_val -= 5;
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <led_awake_routine+0x390>)
 8001e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b05      	subs	r3, #5
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <led_awake_routine+0x390>)
 8001e8c:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <led_awake_routine+0x390>)
 8001e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e98:	dd03      	ble.n	8001ea2 <led_awake_routine+0x31e>
						red_led_pwm_flag = 1;
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <led_awake_routine+0x38c>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e007      	b.n	8001eb2 <led_awake_routine+0x32e>
					} else if (red_led_pwm_val <= 0) {
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <led_awake_routine+0x390>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	dc02      	bgt.n	8001eb2 <led_awake_routine+0x32e>
						red_led_pwm_flag = 0;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <led_awake_routine+0x38c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <led_awake_routine+0x390>)
 8001eb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <led_awake_routine+0x384>)
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ebc:	e021      	b.n	8001f02 <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <led_awake_routine+0x384>)
 8001ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34
		BLUE_LED_PWM(disable_led);
 8001ec6:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <led_awake_routine+0x388>)
 8001ec8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ecc:	2008      	movs	r0, #8
 8001ece:	f7ff f8ab 	bl	8001028 <setSoftPWM>
		if(red_led_pwm_val != disable_led)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <led_awake_routine+0x390>)
 8001ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001edc:	d004      	beq.n	8001ee8 <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <led_awake_routine+0x390>)
 8001ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	e002      	b.n	8001eee <led_awake_routine+0x36a>
			red_led_pwm_val =0;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <led_awake_routine+0x390>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <led_awake_routine+0x390>)
 8001ef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <led_awake_routine+0x384>)
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(300);
 8001ef8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001efc:	f001 fe38 	bl	8003b70 <HAL_Delay>
}
 8001f00:	e7ff      	b.n	8001f02 <led_awake_routine+0x37e>
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	20000334 	.word	0x20000334
 8001f10:	200012d5 	.word	0x200012d5
 8001f14:	200012d8 	.word	0x200012d8

08001f18 <blink_red>:


void blink_red()
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <blink_red+0x60>)
 8001f1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
	BLUE_LED_PWM(disable_led);
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <blink_red+0x64>)
 8001f26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f2a:	2008      	movs	r0, #8
 8001f2c:	f7ff f87c 	bl	8001028 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <blink_red+0x60>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001f36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3a:	f001 fe19 	bl	8003b70 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <blink_red+0x60>)
 8001f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f4a:	f001 fe11 	bl	8003b70 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <blink_red+0x60>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f58:	f001 fe0a 	bl	8003b70 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <blink_red+0x60>)
 8001f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f68:	f001 fe02 	bl	8003b70 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <blink_red+0x60>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	20000334 	.word	0x20000334

08001f80 <led_awake_routine1>:


static void led_awake_routine1() {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001f84:	4ba6      	ldr	r3, [pc, #664]	; (8002220 <led_awake_routine1+0x2a0>)
 8001f86:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 8195 	bne.w	80022ba <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f94:	48a3      	ldr	r0, [pc, #652]	; (8002224 <led_awake_routine1+0x2a4>)
 8001f96:	f003 fdab 	bl	8005af0 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d025      	beq.n	8001fec <led_awake_routine1+0x6c>
				{




			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001fa0:	4b9f      	ldr	r3, [pc, #636]	; (8002220 <led_awake_routine1+0x2a0>)
 8001fa2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fa6:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8002228 <led_awake_routine1+0x2a8>
 8001faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	db0d      	blt.n	8001fd0 <led_awake_routine1+0x50>
							GREEN_LED_PWM(0);
 8001fb4:	4b9d      	ldr	r3, [pc, #628]	; (800222c <led_awake_routine1+0x2ac>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34
							RED_LED_PWM(disable_led);
 8001fba:	4b9c      	ldr	r3, [pc, #624]	; (800222c <led_awake_routine1+0x2ac>)
 8001fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc0:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8001fc2:	4a9b      	ldr	r2, [pc, #620]	; (8002230 <led_awake_routine1+0x2b0>)
 8001fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fc8:	2008      	movs	r0, #8
 8001fca:	f7ff f82d 	bl	8001028 <setSoftPWM>
			red_led_pwm_val =0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001fce:	e196      	b.n	80022fe <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8001fd0:	4b96      	ldr	r3, [pc, #600]	; (800222c <led_awake_routine1+0x2ac>)
 8001fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34
						RED_LED_PWM(disable_led);
 8001fd8:	4b94      	ldr	r3, [pc, #592]	; (800222c <led_awake_routine1+0x2ac>)
 8001fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
						BLUE_LED_PWM(0);
 8001fe0:	4a93      	ldr	r2, [pc, #588]	; (8002230 <led_awake_routine1+0x2b0>)
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2008      	movs	r0, #8
 8001fe6:	f7ff f81f 	bl	8001028 <setSoftPWM>
}
 8001fea:	e188      	b.n	80022fe <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001fec:	4a90      	ldr	r2, [pc, #576]	; (8002230 <led_awake_routine1+0x2b0>)
 8001fee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ff2:	2008      	movs	r0, #8
 8001ff4:	f7ff f818 	bl	8001028 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001ff8:	4b89      	ldr	r3, [pc, #548]	; (8002220 <led_awake_routine1+0x2a0>)
 8001ffa:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ffe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002228 <led_awake_routine1+0x2a8>
 8002002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	db38      	blt.n	800207e <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 800200c:	4b87      	ldr	r3, [pc, #540]	; (800222c <led_awake_routine1+0x2ac>)
 800200e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
							BLUE_LED_PWM(disable_led);
 8002014:	4a86      	ldr	r2, [pc, #536]	; (8002230 <led_awake_routine1+0x2b0>)
 8002016:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800201a:	2008      	movs	r0, #8
 800201c:	f7ff f804 	bl	8001028 <setSoftPWM>
							if (!green_led_pwm_flag) {
 8002020:	4b84      	ldr	r3, [pc, #528]	; (8002234 <led_awake_routine1+0x2b4>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <led_awake_routine1+0xbc>
								green_led_pwm_val += 40;
 8002028:	4b83      	ldr	r3, [pc, #524]	; (8002238 <led_awake_routine1+0x2b8>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	b29b      	uxth	r3, r3
 8002030:	3328      	adds	r3, #40	; 0x28
 8002032:	b29b      	uxth	r3, r3
 8002034:	b21a      	sxth	r2, r3
 8002036:	4b80      	ldr	r3, [pc, #512]	; (8002238 <led_awake_routine1+0x2b8>)
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	e008      	b.n	800204e <led_awake_routine1+0xce>
								green_led_pwm_val -= 40;
 800203c:	4b7e      	ldr	r3, [pc, #504]	; (8002238 <led_awake_routine1+0x2b8>)
 800203e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b28      	subs	r3, #40	; 0x28
 8002046:	b29b      	uxth	r3, r3
 8002048:	b21a      	sxth	r2, r3
 800204a:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <led_awake_routine1+0x2b8>)
 800204c:	801a      	strh	r2, [r3, #0]
							if (green_led_pwm_val > 1000) {
 800204e:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <led_awake_routine1+0x2b8>)
 8002050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002058:	dd03      	ble.n	8002062 <led_awake_routine1+0xe2>
								green_led_pwm_flag = 1;
 800205a:	4b76      	ldr	r3, [pc, #472]	; (8002234 <led_awake_routine1+0x2b4>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e007      	b.n	8002072 <led_awake_routine1+0xf2>
							} else if (green_led_pwm_val <= 0) {
 8002062:	4b75      	ldr	r3, [pc, #468]	; (8002238 <led_awake_routine1+0x2b8>)
 8002064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002068:	2b00      	cmp	r3, #0
 800206a:	dc02      	bgt.n	8002072 <led_awake_routine1+0xf2>
								green_led_pwm_flag = 0;
 800206c:	4b71      	ldr	r3, [pc, #452]	; (8002234 <led_awake_routine1+0x2b4>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
							GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002072:	4b71      	ldr	r3, [pc, #452]	; (8002238 <led_awake_routine1+0x2b8>)
 8002074:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002078:	4b6c      	ldr	r3, [pc, #432]	; (800222c <led_awake_routine1+0x2ac>)
 800207a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800207c:	e13f      	b.n	80022fe <led_awake_routine1+0x37e>
			else if (_RunTime_Packet.battery_voltage > battery_Low
 800207e:	4b68      	ldr	r3, [pc, #416]	; (8002220 <led_awake_routine1+0x2a0>)
 8002080:	edd3 7a08 	vldr	s15, [r3, #32]
 8002084:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8002088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002090:	dd42      	ble.n	8002118 <led_awake_routine1+0x198>
						&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <led_awake_routine1+0x2a0>)
 8002094:	edd3 7a08 	vldr	s15, [r3, #32]
 8002098:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002228 <led_awake_routine1+0x2a8>
 800209c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	d838      	bhi.n	8002118 <led_awake_routine1+0x198>
					RED_LED_PWM(disable_led);
 80020a6:	4b61      	ldr	r3, [pc, #388]	; (800222c <led_awake_routine1+0x2ac>)
 80020a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
					BLUE_LED_PWM(disable_led);
 80020ae:	4a60      	ldr	r2, [pc, #384]	; (8002230 <led_awake_routine1+0x2b0>)
 80020b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b4:	2008      	movs	r0, #8
 80020b6:	f7fe ffb7 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 80020ba:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <led_awake_routine1+0x2b4>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <led_awake_routine1+0x156>
						green_led_pwm_val += 40;
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <led_awake_routine1+0x2b8>)
 80020c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3328      	adds	r3, #40	; 0x28
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <led_awake_routine1+0x2b8>)
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	e008      	b.n	80020e8 <led_awake_routine1+0x168>
						green_led_pwm_val -= 40;
 80020d6:	4b58      	ldr	r3, [pc, #352]	; (8002238 <led_awake_routine1+0x2b8>)
 80020d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b28      	subs	r3, #40	; 0x28
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	4b54      	ldr	r3, [pc, #336]	; (8002238 <led_awake_routine1+0x2b8>)
 80020e6:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <led_awake_routine1+0x2b8>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020f2:	dd03      	ble.n	80020fc <led_awake_routine1+0x17c>
						green_led_pwm_flag = 1;
 80020f4:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <led_awake_routine1+0x2b4>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e007      	b.n	800210c <led_awake_routine1+0x18c>
					} else if (green_led_pwm_val <= 0) {
 80020fc:	4b4e      	ldr	r3, [pc, #312]	; (8002238 <led_awake_routine1+0x2b8>)
 80020fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002102:	2b00      	cmp	r3, #0
 8002104:	dc02      	bgt.n	800210c <led_awake_routine1+0x18c>
						green_led_pwm_flag = 0;
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <led_awake_routine1+0x2b4>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800210c:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <led_awake_routine1+0x2b8>)
 800210e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002112:	4b46      	ldr	r3, [pc, #280]	; (800222c <led_awake_routine1+0x2ac>)
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
 8002116:	e0f2      	b.n	80022fe <led_awake_routine1+0x37e>
				} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <led_awake_routine1+0x2a0>)
 800211a:	edd3 7a08 	vldr	s15, [r3, #32]
 800211e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800223c <led_awake_routine1+0x2bc>
 8002122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212a:	f340 808d 	ble.w	8002248 <led_awake_routine1+0x2c8>
						&& _RunTime_Packet.battery_voltage <= battery_Low) {
 800212e:	4b3c      	ldr	r3, [pc, #240]	; (8002220 <led_awake_routine1+0x2a0>)
 8002130:	edd3 7a08 	vldr	s15, [r3, #32]
 8002134:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	f200 8082 	bhi.w	8002248 <led_awake_routine1+0x2c8>
					if(green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <led_awake_routine1+0x2b4>)
 8002146:	781a      	ldrb	r2, [r3, #0]
 8002148:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <led_awake_routine1+0x2c0>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d003      	beq.n	8002158 <led_awake_routine1+0x1d8>
						green_led_pwm_flag = red_led_pwm_flag;
 8002150:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <led_awake_routine1+0x2c0>)
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	4b37      	ldr	r3, [pc, #220]	; (8002234 <led_awake_routine1+0x2b4>)
 8002156:	701a      	strb	r2, [r3, #0]
					BLUE_LED_PWM(disable_led);
 8002158:	4a35      	ldr	r2, [pc, #212]	; (8002230 <led_awake_routine1+0x2b0>)
 800215a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800215e:	2008      	movs	r0, #8
 8002160:	f7fe ff62 	bl	8001028 <setSoftPWM>
					if (!green_led_pwm_flag) {
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <led_awake_routine1+0x2b4>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <led_awake_routine1+0x200>
						green_led_pwm_val += 40;
 800216c:	4b32      	ldr	r3, [pc, #200]	; (8002238 <led_awake_routine1+0x2b8>)
 800216e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002172:	b29b      	uxth	r3, r3
 8002174:	3328      	adds	r3, #40	; 0x28
 8002176:	b29b      	uxth	r3, r3
 8002178:	b21a      	sxth	r2, r3
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <led_awake_routine1+0x2b8>)
 800217c:	801a      	strh	r2, [r3, #0]
 800217e:	e008      	b.n	8002192 <led_awake_routine1+0x212>
						green_led_pwm_val -= 40;
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <led_awake_routine1+0x2b8>)
 8002182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b28      	subs	r3, #40	; 0x28
 800218a:	b29b      	uxth	r3, r3
 800218c:	b21a      	sxth	r2, r3
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <led_awake_routine1+0x2b8>)
 8002190:	801a      	strh	r2, [r3, #0]
					if (green_led_pwm_val > 1000) {
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <led_awake_routine1+0x2b8>)
 8002194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800219c:	dd03      	ble.n	80021a6 <led_awake_routine1+0x226>
						green_led_pwm_flag = 1;
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <led_awake_routine1+0x2b4>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e007      	b.n	80021b6 <led_awake_routine1+0x236>
					} else if (green_led_pwm_val <= 0) {
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <led_awake_routine1+0x2b8>)
 80021a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	dc02      	bgt.n	80021b6 <led_awake_routine1+0x236>
						green_led_pwm_flag = 0;
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <led_awake_routine1+0x2b4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
					if (!red_led_pwm_flag) {
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <led_awake_routine1+0x2c0>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <led_awake_routine1+0x252>
						red_led_pwm_val += 40;
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <led_awake_routine1+0x2c4>)
 80021c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3328      	adds	r3, #40	; 0x28
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <led_awake_routine1+0x2c4>)
 80021ce:	801a      	strh	r2, [r3, #0]
 80021d0:	e008      	b.n	80021e4 <led_awake_routine1+0x264>
						red_led_pwm_val -= 40;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <led_awake_routine1+0x2c4>)
 80021d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b28      	subs	r3, #40	; 0x28
 80021dc:	b29b      	uxth	r3, r3
 80021de:	b21a      	sxth	r2, r3
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <led_awake_routine1+0x2c4>)
 80021e2:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 80021e4:	4b17      	ldr	r3, [pc, #92]	; (8002244 <led_awake_routine1+0x2c4>)
 80021e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ee:	dd03      	ble.n	80021f8 <led_awake_routine1+0x278>
						red_led_pwm_flag = 1;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <led_awake_routine1+0x2c0>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e007      	b.n	8002208 <led_awake_routine1+0x288>
					} else if (red_led_pwm_val <= 0) {
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <led_awake_routine1+0x2c4>)
 80021fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	dc02      	bgt.n	8002208 <led_awake_routine1+0x288>
						red_led_pwm_flag = 0;
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <led_awake_routine1+0x2c0>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
					GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <led_awake_routine1+0x2b8>)
 800220a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <led_awake_routine1+0x2ac>)
 8002210:	635a      	str	r2, [r3, #52]	; 0x34
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <led_awake_routine1+0x2c4>)
 8002214:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <led_awake_routine1+0x2ac>)
 800221a:	639a      	str	r2, [r3, #56]	; 0x38
 800221c:	e06f      	b.n	80022fe <led_awake_routine1+0x37e>
 800221e:	bf00      	nop
 8002220:	20001474 	.word	0x20001474
 8002224:	40020000 	.word	0x40020000
 8002228:	40833333 	.word	0x40833333
 800222c:	40000400 	.word	0x40000400
 8002230:	20000334 	.word	0x20000334
 8002234:	200012d4 	.word	0x200012d4
 8002238:	200012d6 	.word	0x200012d6
 800223c:	40533333 	.word	0x40533333
 8002240:	200012d5 	.word	0x200012d5
 8002244:	200012d8 	.word	0x200012d8
					GREEN_LED_PWM(disable_led);
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <led_awake_routine1+0x384>)
 800224a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800224e:	635a      	str	r2, [r3, #52]	; 0x34
					BLUE_LED_PWM(disable_led);
 8002250:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <led_awake_routine1+0x388>)
 8002252:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002256:	2008      	movs	r0, #8
 8002258:	f7fe fee6 	bl	8001028 <setSoftPWM>
					if (!red_led_pwm_flag) {
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <led_awake_routine1+0x38c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <led_awake_routine1+0x2f8>
						red_led_pwm_val += 40;
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <led_awake_routine1+0x390>)
 8002266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226a:	b29b      	uxth	r3, r3
 800226c:	3328      	adds	r3, #40	; 0x28
 800226e:	b29b      	uxth	r3, r3
 8002270:	b21a      	sxth	r2, r3
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <led_awake_routine1+0x390>)
 8002274:	801a      	strh	r2, [r3, #0]
 8002276:	e008      	b.n	800228a <led_awake_routine1+0x30a>
						red_led_pwm_val -= 40;
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <led_awake_routine1+0x390>)
 800227a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b28      	subs	r3, #40	; 0x28
 8002282:	b29b      	uxth	r3, r3
 8002284:	b21a      	sxth	r2, r3
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <led_awake_routine1+0x390>)
 8002288:	801a      	strh	r2, [r3, #0]
					if (red_led_pwm_val > 1000) {
 800228a:	4b21      	ldr	r3, [pc, #132]	; (8002310 <led_awake_routine1+0x390>)
 800228c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002294:	dd03      	ble.n	800229e <led_awake_routine1+0x31e>
						red_led_pwm_flag = 1;
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <led_awake_routine1+0x38c>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	e007      	b.n	80022ae <led_awake_routine1+0x32e>
					} else if (red_led_pwm_val <= 0) {
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <led_awake_routine1+0x390>)
 80022a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	dc02      	bgt.n	80022ae <led_awake_routine1+0x32e>
						red_led_pwm_flag = 0;
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <led_awake_routine1+0x38c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
					RED_LED_PWM(red_led_pwm_val); //we breathe red led
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <led_awake_routine1+0x390>)
 80022b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <led_awake_routine1+0x384>)
 80022b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022b8:	e021      	b.n	80022fe <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <led_awake_routine1+0x384>)
 80022bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34
		BLUE_LED_PWM(disable_led);
 80022c2:	4a11      	ldr	r2, [pc, #68]	; (8002308 <led_awake_routine1+0x388>)
 80022c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022c8:	2008      	movs	r0, #8
 80022ca:	f7fe fead 	bl	8001028 <setSoftPWM>
		if(red_led_pwm_val != disable_led)
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <led_awake_routine1+0x390>)
 80022d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d8:	d004      	beq.n	80022e4 <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <led_awake_routine1+0x390>)
 80022dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	e002      	b.n	80022ea <led_awake_routine1+0x36a>
			red_led_pwm_val =0;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <led_awake_routine1+0x390>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <led_awake_routine1+0x390>)
 80022ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <led_awake_routine1+0x384>)
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(300);
 80022f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022f8:	f001 fc3a 	bl	8003b70 <HAL_Delay>
}
 80022fc:	e7ff      	b.n	80022fe <led_awake_routine1+0x37e>
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40000400 	.word	0x40000400
 8002308:	20000334 	.word	0x20000334
 800230c:	200012d5 	.word	0x200012d5
 8002310:	200012d8 	.word	0x200012d8

08002314 <ver_GetUid>:


static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 800231a:	f001 fc79 	bl	8003c10 <HAL_GetUIDw1>
 800231e:	4603      	mov	r3, r0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8002324:	f001 fc74 	bl	8003c10 <HAL_GetUIDw1>
 8002328:	4603      	mov	r3, r0
 800232a:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <ver_GetUid+0x8c>)
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002330:	4c1c      	ldr	r4, [pc, #112]	; (80023a4 <ver_GetUid+0x90>)
 8002332:	f001 fc79 	bl	8003c28 <HAL_GetUIDw2>
 8002336:	4603      	mov	r3, r0
 8002338:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b23      	cmp	r3, #35	; 0x23
 800233e:	d909      	bls.n	8002354 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b3d      	cmp	r3, #61	; 0x3d
 8002344:	bf28      	it	cs
 8002346:	233d      	movcs	r3, #61	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	333d      	adds	r3, #61	; 0x3d
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <ver_GetUid+0x8c>)
 8002350:	71da      	strb	r2, [r3, #7]
 8002352:	e00b      	b.n	800236c <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b09      	cmp	r3, #9
 8002358:	d901      	bls.n	800235e <ver_GetUid+0x4a>
 800235a:	2241      	movs	r2, #65	; 0x41
 800235c:	e000      	b.n	8002360 <ver_GetUid+0x4c>
 800235e:	2230      	movs	r2, #48	; 0x30
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4413      	add	r3, r2
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <ver_GetUid+0x8c>)
 800236a:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 800236c:	f001 fc44 	bl	8003bf8 <HAL_GetUIDw0>
 8002370:	4603      	mov	r3, r0
 8002372:	0c1b      	lsrs	r3, r3, #16
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4619      	mov	r1, r3
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <ver_GetUid+0x94>)
 800237a:	f010 f8a3 	bl	80124c4 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 800237e:	f001 fc3b 	bl	8003bf8 <HAL_GetUIDw0>
 8002382:	4603      	mov	r3, r0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4619      	mov	r1, r3
 8002388:	4808      	ldr	r0, [pc, #32]	; (80023ac <ver_GetUid+0x98>)
 800238a:	f010 f89b 	bl	80124c4 <CharToHexasc>
	sUid[12] = 0;
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <ver_GetUid+0x8c>)
 8002390:	2200      	movs	r2, #0
 8002392:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <ver_GetUid+0x8c>)
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	bd90      	pop	{r4, r7, pc}
 800239e:	bf00      	nop
 80023a0:	20001704 	.word	0x20001704
 80023a4:	20001707 	.word	0x20001707
 80023a8:	2000170c 	.word	0x2000170c
 80023ac:	2000170e 	.word	0x2000170e

080023b0 <app_main>:

void app_main() {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0


	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 80023b6:	223c      	movs	r2, #60	; 0x3c
 80023b8:	2100      	movs	r1, #0
 80023ba:	4885      	ldr	r0, [pc, #532]	; (80025d0 <app_main+0x220>)
 80023bc:	f019 f916 	bl	801b5ec <memset>

	load_param();
 80023c0:	f7ff f826 	bl	8001410 <load_param>

	HAL_TIM_Base_Start(&htim1);
 80023c4:	4883      	ldr	r0, [pc, #524]	; (80025d4 <app_main+0x224>)
 80023c6:	f008 fa07 	bl	800a7d8 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 80023ca:	4983      	ldr	r1, [pc, #524]	; (80025d8 <app_main+0x228>)
 80023cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d0:	4a82      	ldr	r2, [pc, #520]	; (80025dc <app_main+0x22c>)
 80023d2:	4883      	ldr	r0, [pc, #524]	; (80025e0 <app_main+0x230>)
 80023d4:	f002 faf8 	bl	80049c8 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80023d8:	4b7e      	ldr	r3, [pc, #504]	; (80025d4 <app_main+0x224>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	4b7d      	ldr	r3, [pc, #500]	; (80025d4 <app_main+0x224>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e6:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 80023e8:	4a7b      	ldr	r2, [pc, #492]	; (80025d8 <app_main+0x228>)
 80023ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023ee:	2008      	movs	r0, #8
 80023f0:	f7fe fe1a 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 80023f4:	2100      	movs	r1, #0
 80023f6:	487b      	ldr	r0, [pc, #492]	; (80025e4 <app_main+0x234>)
 80023f8:	f008 fb32 	bl	800aa60 <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 80023fc:	4b7a      	ldr	r3, [pc, #488]	; (80025e8 <app_main+0x238>)
 80023fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8002404:	2104      	movs	r1, #4
 8002406:	4877      	ldr	r0, [pc, #476]	; (80025e4 <app_main+0x234>)
 8002408:	f008 fb2a 	bl	800aa60 <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 800240c:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <app_main+0x238>)
 800240e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002412:	639a      	str	r2, [r3, #56]	; 0x38

	MX_USB_DEVICE_Init(); //initialize usb anyways
 8002414:	f018 faac 	bl	801a970 <MX_USB_DEVICE_Init>
	prev_usb_time_ = HAL_GetTick();
 8002418:	f001 fb9e 	bl	8003b58 <HAL_GetTick>
 800241c:	4603      	mov	r3, r0
 800241e:	4a73      	ldr	r2, [pc, #460]	; (80025ec <app_main+0x23c>)
 8002420:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8002422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002426:	4872      	ldr	r0, [pc, #456]	; (80025f0 <app_main+0x240>)
 8002428:	f003 fb62 	bl	8005af0 <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <app_main+0x88>
		init_sps30();
 8002432:	f7ff f99f 	bl	8001774 <init_sps30>
 8002436:	e012      	b.n	800245e <app_main+0xae>
	} else {
		_RunTime_Packet.usb_detection = 0;
 8002438:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <app_main+0x220>)
 800243a:	2200      	movs	r2, #0
 800243c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_first_start = 1;
 8002440:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <app_main+0x220>)
 8002442:	2201      	movs	r2, #1
 8002444:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		_RunTime_Packet.usb_active_disable_pm = 1;
 8002448:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <app_main+0x220>)
 800244a:	2201      	movs	r2, #1
 800244c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		_RunTime_Packet.usb_start_timer = 1;
 8002450:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <app_main+0x220>)
 8002452:	2201      	movs	r2, #1
 8002454:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <app_main+0x244>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
	}

	//init_sps30();
	init_scd4x_i2c();
 800245e:	f7ff f8d9 	bl	8001614 <init_scd4x_i2c>
	console_init();
 8002462:	f00e faab 	bl	80109bc <console_init>
	Rtc_set_alarm();
 8002466:	f00f feb7 	bl	80121d8 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800246a:	f107 031c 	add.w	r3, r7, #28
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	4861      	ldr	r0, [pc, #388]	; (80025f8 <app_main+0x248>)
 8002474:	f006 fee4 	bl	8009240 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_day = sDate.Date;
 8002478:	7fba      	ldrb	r2, [r7, #30]
 800247a:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <app_main+0x220>)
 800247c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

    //if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	  _RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,_Flash_Packet.File_Format);
 8002480:	495e      	ldr	r1, [pc, #376]	; (80025fc <app_main+0x24c>)
 8002482:	485f      	ldr	r0, [pc, #380]	; (8002600 <app_main+0x250>)
 8002484:	f018 f9f8 	bl	801a878 <createfile>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <app_main+0x220>)
 800248e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   // 	 _RunTime_Packet.sd_file_creation = -1;
   // }



    green_led_blink();
 8002492:	f7ff fb4f 	bl	8001b34 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 8002496:	23c8      	movs	r3, #200	; 0xc8
 8002498:	2215      	movs	r2, #21
 800249a:	495a      	ldr	r1, [pc, #360]	; (8002604 <app_main+0x254>)
 800249c:	485a      	ldr	r0, [pc, #360]	; (8002608 <app_main+0x258>)
 800249e:	f009 fa13 	bl	800b8c8 <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 80024a2:	f001 fb59 	bl	8003b58 <HAL_GetTick>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a58      	ldr	r2, [pc, #352]	; (800260c <app_main+0x25c>)
 80024aa:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 80024ac:	f001 fb54 	bl	8003b58 <HAL_GetTick>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a57      	ldr	r2, [pc, #348]	; (8002610 <app_main+0x260>)
 80024b4:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 80024b6:	4b57      	ldr	r3, [pc, #348]	; (8002614 <app_main+0x264>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 80024bc:	e156      	b.n	800276c <app_main+0x3bc>
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 80024be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c2:	484b      	ldr	r0, [pc, #300]	; (80025f0 <app_main+0x240>)
 80024c4:	f003 fb14 	bl	8005af0 <HAL_GPIO_ReadPin>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d004      	beq.n	80024d8 <app_main+0x128>
					{
				prev_sleep_time = HAL_GetTick();
 80024ce:	f001 fb43 	bl	8003b58 <HAL_GetTick>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a4d      	ldr	r2, [pc, #308]	; (800260c <app_main+0x25c>)
 80024d6:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80024d8:	f107 0308 	add.w	r3, r7, #8
 80024dc:	2200      	movs	r2, #0
 80024de:	4619      	mov	r1, r3
 80024e0:	4845      	ldr	r0, [pc, #276]	; (80025f8 <app_main+0x248>)
 80024e2:	f006 fdcb 	bl	800907c <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	2200      	movs	r2, #0
 80024ea:	4619      	mov	r1, r3
 80024ec:	4842      	ldr	r0, [pc, #264]	; (80025f8 <app_main+0x248>)
 80024ee:	f006 fea7 	bl	8009240 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 80024f2:	79ba      	ldrb	r2, [r7, #6]
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <app_main+0x220>)
 80024f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			_RunTime_Packet.month = sDate.Month;
 80024fa:	797a      	ldrb	r2, [r7, #5]
 80024fc:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <app_main+0x220>)
 80024fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			_RunTime_Packet.year = sDate.Year;
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	4b32      	ldr	r3, [pc, #200]	; (80025d0 <app_main+0x220>)
 8002506:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

			if (_RunTime_Packet.prev_day != sDate.Date) {
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <app_main+0x220>)
 800250c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002510:	79bb      	ldrb	r3, [r7, #6]
 8002512:	429a      	cmp	r2, r3
 8002514:	d007      	beq.n	8002526 <app_main+0x176>
				_RunTime_Packet.day_changed = 1;
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <app_main+0x220>)
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				_RunTime_Packet.prev_day = sDate.Date;
 800251e:	79ba      	ldrb	r2, [r7, #6]
 8002520:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <app_main+0x220>)
 8002522:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

			check_peripheral_error();
 8002526:	f7ff f9cb 	bl	80018c0 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <app_main+0x220>)
 800252c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d104      	bne.n	800253e <app_main+0x18e>
					|| _RunTime_Packet.usb_first_start) {
 8002534:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <app_main+0x220>)
 8002536:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800253a:	2b00      	cmp	r3, #0
 800253c:	d045      	beq.n	80025ca <app_main+0x21a>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <app_main+0x220>)
 8002540:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <app_main+0x1a0>
				{

					start_usb_timer = 1;
 8002548:	4b33      	ldr	r3, [pc, #204]	; (8002618 <app_main+0x268>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e003      	b.n	8002558 <app_main+0x1a8>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 8002550:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <app_main+0x220>)
 8002552:	2201      	movs	r2, #1
 8002554:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 8002558:	f001 fafe 	bl	8003b58 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <app_main+0x23c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1ad2      	subs	r2, r2, r3
 8002564:	4b2d      	ldr	r3, [pc, #180]	; (800261c <app_main+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d329      	bcc.n	80025c0 <app_main+0x210>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <app_main+0x220>)
 800256e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d10d      	bne.n	8002594 <app_main+0x1e4>
							&& _RunTime_Packet.usb_first_start) {
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <app_main+0x220>)
 800257a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <app_main+0x1e4>
						_RunTime_Packet.sd_file_creation = createfile(
 8002582:	491e      	ldr	r1, [pc, #120]	; (80025fc <app_main+0x24c>)
 8002584:	481e      	ldr	r0, [pc, #120]	; (8002600 <app_main+0x250>)
 8002586:	f018 f977 	bl	801a878 <createfile>
 800258a:	4603      	mov	r3, r0
 800258c:	461a      	mov	r2, r3
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <app_main+0x220>)
 8002590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <app_main+0x220>)
 8002596:	2200      	movs	r2, #0
 8002598:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					_RunTime_Packet.usb_detection = 0;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <app_main+0x220>)
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					_RunTime_Packet.usb_active_disable_pm = 0;
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <app_main+0x220>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					start_usb_timer = 0;
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <app_main+0x268>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]

					init_sps30();
 80025b2:	f7ff f8df 	bl	8001774 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 80025b6:	f001 facf 	bl	8003b58 <HAL_GetTick>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <app_main+0x260>)
 80025be:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 80025c0:	f001 faca 	bl	8003b58 <HAL_GetTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a11      	ldr	r2, [pc, #68]	; (800260c <app_main+0x25c>)
 80025c8:	6013      	str	r3, [r2, #0]
			}

			console_process();
 80025ca:	f00e f9ab 	bl	8010924 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80025ce:	e039      	b.n	8002644 <app_main+0x294>
 80025d0:	20001474 	.word	0x20001474
 80025d4:	20001868 	.word	0x20001868
 80025d8:	20000334 	.word	0x20000334
 80025dc:	40020418 	.word	0x40020418
 80025e0:	20001940 	.word	0x20001940
 80025e4:	200018f8 	.word	0x200018f8
 80025e8:	40000400 	.word	0x40000400
 80025ec:	20001700 	.word	0x20001700
 80025f0:	40020000 	.word	0x40020000
 80025f4:	200014bc 	.word	0x200014bc
 80025f8:	200017c4 	.word	0x200017c4
 80025fc:	20001340 	.word	0x20001340
 8002600:	200012dc 	.word	0x200012dc
 8002604:	08020264 	.word	0x08020264
 8002608:	200019a0 	.word	0x200019a0
 800260c:	200016f8 	.word	0x200016f8
 8002610:	200016fc 	.word	0x200016fc
 8002614:	2000000c 	.word	0x2000000c
 8002618:	200014b8 	.word	0x200014b8
 800261c:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002620:	f00e f980 	bl	8010924 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002624:	4b76      	ldr	r3, [pc, #472]	; (8002800 <app_main+0x450>)
 8002626:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <app_main+0x282>
					get_scd4x_measurement();
 800262e:	f7ff f807 	bl	8001640 <get_scd4x_measurement>
				}

				get_sps30_measurement();
 8002632:	f7ff f8bb 	bl	80017ac <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 8002636:	4873      	ldr	r0, [pc, #460]	; (8002804 <app_main+0x454>)
 8002638:	f00f ffda 	bl	80125f0 <adc_Measure>
				led_awake_routine1();
 800263c:	f7ff fca0 	bl	8001f80 <led_awake_routine1>
				pwr_off_detected();
 8002640:	f7fe fdce 	bl	80011e0 <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002644:	f001 fa88 	bl	8003b58 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <app_main+0x458>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1ad2      	subs	r2, r2, r3
 8002650:	4b6e      	ldr	r3, [pc, #440]	; (800280c <app_main+0x45c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d809      	bhi.n	800266c <app_main+0x2bc>
					&& !_RunTime_Packet.usb_detection
 8002658:	4b69      	ldr	r3, [pc, #420]	; (8002800 <app_main+0x450>)
 800265a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d104      	bne.n	800266c <app_main+0x2bc>
					&& !_RunTime_Packet.usb_first_start)
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <app_main+0x450>)
 8002664:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0d9      	beq.n	8002620 <app_main+0x270>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 800266c:	f7ff f966 	bl	800193c <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 8002670:	4b67      	ldr	r3, [pc, #412]	; (8002810 <app_main+0x460>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <app_main+0x2fa>
 8002678:	4b61      	ldr	r3, [pc, #388]	; (8002800 <app_main+0x450>)
 800267a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d113      	bne.n	80026aa <app_main+0x2fa>
					&& !_RunTime_Packet.usb_first_start
 8002682:	4b5f      	ldr	r3, [pc, #380]	; (8002800 <app_main+0x450>)
 8002684:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10e      	bne.n	80026aa <app_main+0x2fa>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 800268c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002690:	4860      	ldr	r0, [pc, #384]	; (8002814 <app_main+0x464>)
 8002692:	f003 fa2d 	bl	8005af0 <HAL_GPIO_ReadPin>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <app_main+0x2fa>
					USB_DETECT_Pin)) {
				scd4x_stop_periodic_measurement();
 800269c:	f010 f8f4 	bl	8012888 <scd4x_stop_periodic_measurement>
				sps30_stop_measurement();
 80026a0:	f011 f868 	bl	8013774 <sps30_stop_measurement>
				stop_measurement = 0;
 80026a4:	4b5a      	ldr	r3, [pc, #360]	; (8002810 <app_main+0x460>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 80026aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ae:	4859      	ldr	r0, [pc, #356]	; (8002814 <app_main+0x464>)
 80026b0:	f003 fa1e 	bl	8005af0 <HAL_GPIO_ReadPin>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d039      	beq.n	800272e <app_main+0x37e>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 80026ba:	4b57      	ldr	r3, [pc, #348]	; (8002818 <app_main+0x468>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d035      	beq.n	800272e <app_main+0x37e>
 80026c2:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <app_main+0x450>)
 80026c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d130      	bne.n	800272e <app_main+0x37e>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.day_changed
 80026cc:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <app_main+0x450>)
 80026ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10f      	bne.n	80026f6 <app_main+0x346>
						|| _RunTime_Packet.filename_changed
 80026d6:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <app_main+0x450>)
 80026d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <app_main+0x346>
						|| _RunTime_Packet.fileformat_changed
 80026e0:	4b47      	ldr	r3, [pc, #284]	; (8002800 <app_main+0x450>)
 80026e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <app_main+0x346>
						|| _RunTime_Packet.sd_file_creation == -1) {
 80026ea:	4b45      	ldr	r3, [pc, #276]	; (8002800 <app_main+0x450>)
 80026ec:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d114      	bne.n	8002720 <app_main+0x370>
					_RunTime_Packet.day_changed = 0;
 80026f6:	4b42      	ldr	r3, [pc, #264]	; (8002800 <app_main+0x450>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					_RunTime_Packet.filename_changed = 0;
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <app_main+0x450>)
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					_RunTime_Packet.fileformat_changed = 0;
 8002706:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <app_main+0x450>)
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					_RunTime_Packet.sd_file_creation = createfile(
 800270e:	4943      	ldr	r1, [pc, #268]	; (800281c <app_main+0x46c>)
 8002710:	4843      	ldr	r0, [pc, #268]	; (8002820 <app_main+0x470>)
 8002712:	f018 f8b1 	bl	801a878 <createfile>
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	4b39      	ldr	r3, [pc, #228]	; (8002800 <app_main+0x450>)
 800271c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				filesaving_process();
 8002720:	f018 f88c 	bl	801a83c <filesaving_process>

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 8002724:	f001 fa18 	bl	8003b58 <HAL_GetTick>
 8002728:	4603      	mov	r3, r0
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <app_main+0x458>)
 800272c:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 800272e:	f00f fd53 	bl	80121d8 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 8002732:	4834      	ldr	r0, [pc, #208]	; (8002804 <app_main+0x454>)
 8002734:	f00f ff5c 	bl	80125f0 <adc_Measure>
			led_awake_routine();
 8002738:	f7ff fa24 	bl	8001b84 <led_awake_routine>
			save_data();
 800273c:	f7fe ff36 	bl	80015ac <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8002740:	2101      	movs	r1, #1
 8002742:	4834      	ldr	r0, [pc, #208]	; (8002814 <app_main+0x464>)
 8002744:	f003 f9d4 	bl	8005af0 <HAL_GPIO_ReadPin>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <app_main+0x3ac>
				_RunTime_Packet.motion_detection = 1;
 800274e:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <app_main+0x450>)
 8002750:	2201      	movs	r2, #1
 8002752:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002754:	4b33      	ldr	r3, [pc, #204]	; (8002824 <app_main+0x474>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e005      	b.n	8002768 <app_main+0x3b8>
			} else {
				_RunTime_Packet.motion_detection = 0;
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <app_main+0x450>)
 800275e:	2200      	movs	r2, #0
 8002760:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <app_main+0x474>)
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002768:	f7fe fd3a 	bl	80011e0 <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 800276c:	f001 f9f4 	bl	8003b58 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <app_main+0x478>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	1ad2      	subs	r2, r2, r3
 8002778:	4b2c      	ldr	r3, [pc, #176]	; (800282c <app_main+0x47c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	f67f ae9e 	bls.w	80024be <app_main+0x10e>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		if (_RunTime_Packet.day_changed || _RunTime_Packet.filename_changed
 8002782:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <app_main+0x450>)
 8002784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10f      	bne.n	80027ac <app_main+0x3fc>
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <app_main+0x450>)
 800278e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <app_main+0x3fc>
				|| _RunTime_Packet.fileformat_changed
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <app_main+0x450>)
 8002798:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <app_main+0x3fc>
				|| _RunTime_Packet.sd_file_creation == -1) {
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <app_main+0x450>)
 80027a2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027aa:	d114      	bne.n	80027d6 <app_main+0x426>
			_RunTime_Packet.day_changed = 0;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <app_main+0x450>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			_RunTime_Packet.filename_changed = 0;
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <app_main+0x450>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			_RunTime_Packet.fileformat_changed = 0;
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <app_main+0x450>)
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.sd_file_creation = createfile(
 80027c4:	4915      	ldr	r1, [pc, #84]	; (800281c <app_main+0x46c>)
 80027c6:	4816      	ldr	r0, [pc, #88]	; (8002820 <app_main+0x470>)
 80027c8:	f018 f856 	bl	801a878 <createfile>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <app_main+0x450>)
 80027d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);
		}
		filesaving_process();
 80027d6:	f018 f831 	bl	801a83c <filesaving_process>
		prev_sleep_time = HAL_GetTick();
 80027da:	f001 f9bd 	bl	8003b58 <HAL_GetTick>
 80027de:	4603      	mov	r3, r0
 80027e0:	4a11      	ldr	r2, [pc, #68]	; (8002828 <app_main+0x478>)
 80027e2:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80027e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027e8:	480a      	ldr	r0, [pc, #40]	; (8002814 <app_main+0x464>)
 80027ea:	f003 f981 	bl	8005af0 <HAL_GPIO_ReadPin>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f47f ae56 	bne.w	80024a2 <app_main+0xf2>

			sleep();
 80027f6:	f7ff f8b7 	bl	8001968 <sleep>
			wakeup();
 80027fa:	f7ff f913 	bl	8001a24 <wakeup>
		prev_sleep_time = HAL_GetTick();
 80027fe:	e650      	b.n	80024a2 <app_main+0xf2>
 8002800:	20001474 	.word	0x20001474
 8002804:	20001494 	.word	0x20001494
 8002808:	200016fc 	.word	0x200016fc
 800280c:	20000004 	.word	0x20000004
 8002810:	2000000c 	.word	0x2000000c
 8002814:	40020000 	.word	0x40020000
 8002818:	20000029 	.word	0x20000029
 800281c:	20001340 	.word	0x20001340
 8002820:	200012dc 	.word	0x200012dc
 8002824:	200014c1 	.word	0x200014c1
 8002828:	200016f8 	.word	0x200016f8
 800282c:	20000000 	.word	0x20000000

08002830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002834:	f001 f92a 	bl	8003a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002838:	f000 f81c 	bl	8002874 <SystemClock_Config>
  MX_FATFS_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
#endif
  MX_GPIO_Init();
 800283c:	f000 fae2 	bl	8002e04 <MX_GPIO_Init>
  MX_DMA_Init();
 8002840:	f000 fac0 	bl	8002dc4 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002844:	f000 f92a 	bl	8002a9c <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002848:	f000 fa68 	bl	8002d1c <MX_USART1_UART_Init>
  MX_RTC_Init();
 800284c:	f000 f900 	bl	8002a50 <MX_RTC_Init>
  MX_I2C1_Init();
 8002850:	f000 f8d0 	bl	80029f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002854:	f000 f992 	bl	8002b7c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002858:	f000 fa8a 	bl	8002d70 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800285c:	f000 f878 	bl	8002950 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002860:	f00f fb0a 	bl	8011e78 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002864:	f000 f93a 	bl	8002adc <MX_TIM1_Init>
  MX_TIM3_Init();
 8002868:	f000 f9d6 	bl	8002c18 <MX_TIM3_Init>


  app_main(); //keep mx_usb_device_init off here
 800286c:	f7ff fda0 	bl	80023b0 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002870:	e7fe      	b.n	8002870 <main+0x40>
	...

08002874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b094      	sub	sp, #80	; 0x50
 8002878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800287a:	f107 0320 	add.w	r3, r7, #32
 800287e:	2230      	movs	r2, #48	; 0x30
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f018 feb2 	bl	801b5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <SystemClock_Config+0xd4>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a29      	ldr	r2, [pc, #164]	; (8002948 <SystemClock_Config+0xd4>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <SystemClock_Config+0xd4>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <SystemClock_Config+0xd8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <SystemClock_Config+0xd8>)
 80028c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <SystemClock_Config+0xd8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80028d4:	2305      	movs	r3, #5
 80028d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028de:	2301      	movs	r3, #1
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e2:	2302      	movs	r3, #2
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80028ec:	2319      	movs	r3, #25
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80028f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80028f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028f6:	2304      	movs	r3, #4
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028fa:	2307      	movs	r3, #7
 80028fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028fe:	f107 0320 	add.w	r3, r7, #32
 8002902:	4618      	mov	r0, r3
 8002904:	f005 fd64 	bl	80083d0 <HAL_RCC_OscConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800290e:	f000 fbe5 	bl	80030dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002912:	230f      	movs	r3, #15
 8002914:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002916:	2302      	movs	r3, #2
 8002918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800291e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	2102      	movs	r1, #2
 800292e:	4618      	mov	r0, r3
 8002930:	f005 ffc6 	bl	80088c0 <HAL_RCC_ClockConfig>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800293a:	f000 fbcf 	bl	80030dc <Error_Handler>
  }
}
 800293e:	bf00      	nop
 8002940:	3750      	adds	r7, #80	; 0x50
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000

08002950 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002956:	463b      	mov	r3, r7
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <MX_ADC1_Init+0x98>)
 8002964:	4a21      	ldr	r2, [pc, #132]	; (80029ec <MX_ADC1_Init+0x9c>)
 8002966:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <MX_ADC1_Init+0x98>)
 800296a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800296e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <MX_ADC1_Init+0x98>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <MX_ADC1_Init+0x98>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <MX_ADC1_Init+0x98>)
 800297e:	2200      	movs	r2, #0
 8002980:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <MX_ADC1_Init+0x98>)
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <MX_ADC1_Init+0x98>)
 800298c:	2200      	movs	r2, #0
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <MX_ADC1_Init+0x98>)
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <MX_ADC1_Init+0xa0>)
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <MX_ADC1_Init+0x98>)
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <MX_ADC1_Init+0x98>)
 800299e:	2201      	movs	r2, #1
 80029a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <MX_ADC1_Init+0x98>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <MX_ADC1_Init+0x98>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <MX_ADC1_Init+0x98>)
 80029b2:	f001 f945 	bl	8003c40 <HAL_ADC_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029bc:	f000 fb8e 	bl	80030dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80029c0:	230a      	movs	r3, #10
 80029c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029cc:	463b      	mov	r3, r7
 80029ce:	4619      	mov	r1, r3
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_ADC1_Init+0x98>)
 80029d2:	f001 fb2b 	bl	800402c <HAL_ADC_ConfigChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029dc:	f000 fb7e 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20001728 	.word	0x20001728
 80029ec:	40012000 	.word	0x40012000
 80029f0:	0f000001 	.word	0x0f000001

080029f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <MX_I2C1_Init+0x50>)
 80029fa:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <MX_I2C1_Init+0x54>)
 80029fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a00:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <MX_I2C1_Init+0x58>)
 8002a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a30:	4804      	ldr	r0, [pc, #16]	; (8002a44 <MX_I2C1_Init+0x50>)
 8002a32:	f003 f8a7 	bl	8005b84 <HAL_I2C_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a3c:	f000 fb4e 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20001770 	.word	0x20001770
 8002a48:	40005400 	.word	0x40005400
 8002a4c:	00061a80 	.word	0x00061a80

08002a50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <MX_RTC_Init+0x44>)
 8002a56:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <MX_RTC_Init+0x48>)
 8002a58:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <MX_RTC_Init+0x44>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <MX_RTC_Init+0x44>)
 8002a62:	227f      	movs	r2, #127	; 0x7f
 8002a64:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <MX_RTC_Init+0x44>)
 8002a68:	22ff      	movs	r2, #255	; 0xff
 8002a6a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <MX_RTC_Init+0x44>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <MX_RTC_Init+0x44>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <MX_RTC_Init+0x44>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <MX_RTC_Init+0x44>)
 8002a80:	f006 f9ec 	bl	8008e5c <HAL_RTC_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002a8a:	f000 fb27 	bl	80030dc <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200017c4 	.word	0x200017c4
 8002a98:	40002800 	.word	0x40002800

08002a9c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <MX_SDIO_SD_Init+0x38>)
 8002aa2:	4a0d      	ldr	r2, [pc, #52]	; (8002ad8 <MX_SDIO_SD_Init+0x3c>)
 8002aa4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <MX_SDIO_SD_Init+0x38>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <MX_SDIO_SD_Init+0x38>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <MX_SDIO_SD_Init+0x38>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <MX_SDIO_SD_Init+0x38>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <MX_SDIO_SD_Init+0x38>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <MX_SDIO_SD_Init+0x38>)
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	200017e4 	.word	0x200017e4
 8002ad8:	40012c00 	.word	0x40012c00

08002adc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af0:	463b      	mov	r3, r7
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <MX_TIM1_Init+0x9c>)
 8002afc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b24:	4813      	ldr	r0, [pc, #76]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b26:	f007 fdb3 	bl	800a690 <HAL_TIM_Base_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002b30:	f000 fad4 	bl	80030dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	4619      	mov	r1, r3
 8002b40:	480c      	ldr	r0, [pc, #48]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b42:	f008 fa07 	bl	800af54 <HAL_TIM_ConfigClockSource>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002b4c:	f000 fac6 	bl	80030dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b50:	2320      	movs	r3, #32
 8002b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b58:	463b      	mov	r3, r7
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4805      	ldr	r0, [pc, #20]	; (8002b74 <MX_TIM1_Init+0x98>)
 8002b5e:	f008 fdb5 	bl	800b6cc <HAL_TIMEx_MasterConfigSynchronization>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002b68:	f000 fab8 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20001868 	.word	0x20001868
 8002b78:	40010000 	.word	0x40010000

08002b7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b82:	f107 0308 	add.w	r3, r7, #8
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b90:	463b      	mov	r3, r7
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b98:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ba6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002bae:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002bb0:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002bb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bc2:	4814      	ldr	r0, [pc, #80]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002bc4:	f007 fd64 	bl	800a690 <HAL_TIM_Base_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002bce:	f000 fa85 	bl	80030dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bd8:	f107 0308 	add.w	r3, r7, #8
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480d      	ldr	r0, [pc, #52]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002be0:	f008 f9b8 	bl	800af54 <HAL_TIM_ConfigClockSource>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002bea:	f000 fa77 	bl	80030dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4806      	ldr	r0, [pc, #24]	; (8002c14 <MX_TIM2_Init+0x98>)
 8002bfc:	f008 fd66 	bl	800b6cc <HAL_TIMEx_MasterConfigSynchronization>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c06:	f000 fa69 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200018b0 	.word	0x200018b0

08002c18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c2c:	f107 0320 	add.w	r3, r7, #32
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
 8002c44:	615a      	str	r2, [r3, #20]
 8002c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c4a:	4a33      	ldr	r2, [pc, #204]	; (8002d18 <MX_TIM3_Init+0x100>)
 8002c4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c4e:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c54:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002c5a:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c6e:	4829      	ldr	r0, [pc, #164]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c70:	f007 fd0e 	bl	800a690 <HAL_TIM_Base_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002c7a:	f000 fa2f 	bl	80030dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4822      	ldr	r0, [pc, #136]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c8c:	f008 f962 	bl	800af54 <HAL_TIM_ConfigClockSource>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002c96:	f000 fa21 	bl	80030dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c9a:	481e      	ldr	r0, [pc, #120]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002c9c:	f007 fe87 	bl	800a9ae <HAL_TIM_PWM_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002ca6:	f000 fa19 	bl	80030dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cb2:	f107 0320 	add.w	r3, r7, #32
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4816      	ldr	r0, [pc, #88]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002cba:	f008 fd07 	bl	800b6cc <HAL_TIMEx_MasterConfigSynchronization>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002cc4:	f000 fa0a 	bl	80030dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc8:	2360      	movs	r3, #96	; 0x60
 8002cca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480d      	ldr	r0, [pc, #52]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002ce0:	f008 f876 	bl	800add0 <HAL_TIM_PWM_ConfigChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002cea:	f000 f9f7 	bl	80030dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002cf6:	f008 f86b 	bl	800add0 <HAL_TIM_PWM_ConfigChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002d00:	f000 f9ec 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d04:	4803      	ldr	r0, [pc, #12]	; (8002d14 <MX_TIM3_Init+0xfc>)
 8002d06:	f000 fc07 	bl	8003518 <HAL_TIM_MspPostInit>

}
 8002d0a:	bf00      	nop
 8002d0c:	3738      	adds	r7, #56	; 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200018f8 	.word	0x200018f8
 8002d18:	40000400 	.word	0x40000400

08002d1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <MX_USART1_UART_Init+0x50>)
 8002d24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d42:	220c      	movs	r2, #12
 8002d44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d52:	4805      	ldr	r0, [pc, #20]	; (8002d68 <MX_USART1_UART_Init+0x4c>)
 8002d54:	f008 fd3c 	bl	800b7d0 <HAL_UART_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d5e:	f000 f9bd 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	200019a0 	.word	0x200019a0
 8002d6c:	40011000 	.word	0x40011000

08002d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <MX_USART2_UART_Init+0x50>)
 8002d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d96:	220c      	movs	r2, #12
 8002d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002da6:	4805      	ldr	r0, [pc, #20]	; (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002da8:	f008 fd12 	bl	800b7d0 <HAL_UART_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002db2:	f000 f993 	bl	80030dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200019e4 	.word	0x200019e4
 8002dc0:	40004400 	.word	0x40004400

08002dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <MX_DMA_Init+0x3c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <MX_DMA_Init+0x3c>)
 8002dd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <MX_DMA_Init+0x3c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	2044      	movs	r0, #68	; 0x44
 8002dec:	f001 fc97 	bl	800471e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002df0:	2044      	movs	r0, #68	; 0x44
 8002df2:	f001 fcb0 	bl	8004756 <HAL_NVIC_EnableIRQ>

}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800

08002e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	4b71      	ldr	r3, [pc, #452]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a70      	ldr	r2, [pc, #448]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b6e      	ldr	r3, [pc, #440]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a69      	ldr	r2, [pc, #420]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a62      	ldr	r2, [pc, #392]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a54      	ldr	r2, [pc, #336]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <MX_GPIO_Init+0x1e0>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	484f      	ldr	r0, [pc, #316]	; (8002fe8 <MX_GPIO_Init+0x1e4>)
 8002eac:	f002 fe38 	bl	8005b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb6:	484d      	ldr	r0, [pc, #308]	; (8002fec <MX_GPIO_Init+0x1e8>)
 8002eb8:	f002 fe32 	bl	8005b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2108      	movs	r1, #8
 8002ec0:	484a      	ldr	r0, [pc, #296]	; (8002fec <MX_GPIO_Init+0x1e8>)
 8002ec2:	f002 fe2d 	bl	8005b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002ec6:	f642 63fe 	movw	r3, #12030	; 0x2efe
 8002eca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4845      	ldr	r0, [pc, #276]	; (8002ff0 <MX_GPIO_Init+0x1ec>)
 8002edc:	f002 fba0 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	483d      	ldr	r0, [pc, #244]	; (8002fe8 <MX_GPIO_Init+0x1e4>)
 8002ef4:	f002 fb94 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f04:	2302      	movs	r3, #2
 8002f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4836      	ldr	r0, [pc, #216]	; (8002fe8 <MX_GPIO_Init+0x1e4>)
 8002f10:	f002 fb86 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002f14:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8002f18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	482f      	ldr	r0, [pc, #188]	; (8002fe8 <MX_GPIO_Init+0x1e4>)
 8002f2a:	f002 fb79 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002f2e:	f247 4307 	movw	r3, #29703	; 0x7407
 8002f32:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f34:	2303      	movs	r3, #3
 8002f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	4619      	mov	r1, r3
 8002f42:	482a      	ldr	r0, [pc, #168]	; (8002fec <MX_GPIO_Init+0x1e8>)
 8002f44:	f002 fb6c 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 8002f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f56:	2302      	movs	r3, #2
 8002f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8002f5a:	f107 0314 	add.w	r3, r7, #20
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4822      	ldr	r0, [pc, #136]	; (8002fec <MX_GPIO_Init+0x1e8>)
 8002f62:	f002 fb5d 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 8002f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f72:	2302      	movs	r3, #2
 8002f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	481a      	ldr	r0, [pc, #104]	; (8002fe8 <MX_GPIO_Init+0x1e4>)
 8002f7e:	f002 fb4f 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8002f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	4813      	ldr	r0, [pc, #76]	; (8002fe8 <MX_GPIO_Init+0x1e4>)
 8002f9a:	f002 fb41 	bl	8005620 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	480d      	ldr	r0, [pc, #52]	; (8002fec <MX_GPIO_Init+0x1e8>)
 8002fb6:	f002 fb33 	bl	8005620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	2017      	movs	r0, #23
 8002fc0:	f001 fbad 	bl	800471e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002fc4:	2017      	movs	r0, #23
 8002fc6:	f001 fbc6 	bl	8004756 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2028      	movs	r0, #40	; 0x28
 8002fd0:	f001 fba5 	bl	800471e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fd4:	2028      	movs	r0, #40	; 0x28
 8002fd6:	f001 fbbe 	bl	8004756 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800

08002ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003004:	d101      	bne.n	800300a <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 8003006:	f7fe f89d 	bl	8001144 <timer_interrupt>
}

}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 8003024:	f7fe f872 	bl	800110c <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302e:	d114      	bne.n	800305a <HAL_GPIO_EXTI_Callback+0x46>
    {
        _RunTime_Packet.usb_detection = 1;
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003032:	2201      	movs	r2, #1
 8003034:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        _RunTime_Packet.usb_start_timer = 1;
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_GPIO_EXTI_Callback+0x5c>)
 800303a:	2201      	movs	r2, #1
 800303c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        usb_time_keep = 0;
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_GPIO_EXTI_Callback+0x60>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 8003046:	f000 fd87 	bl	8003b58 <HAL_GetTick>
 800304a:	4603      	mov	r3, r0
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_GPIO_EXTI_Callback+0x64>)
 800304e:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 8003050:	f000 fd82 	bl	8003b58 <HAL_GetTick>
 8003054:	4603      	mov	r3, r0
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_GPIO_EXTI_Callback+0x68>)
 8003058:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_EXTI_Callback+0x52>
    {
    	power_off_detect();
 8003062:	f7fe f889 	bl	8001178 <power_off_detect>
    }
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20001474 	.word	0x20001474
 8003074:	200014bc 	.word	0x200014bc
 8003078:	20001700 	.word	0x20001700
 800307c:	200016f8 	.word	0x200016f8

08003080 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003088:	f00f f874 	bl	8012174 <RtcInt>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <HAL_UART_ErrorCallback+0x40>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d106      	bne.n	80030b2 <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	43d2      	mvns	r2, r2
 80030ae:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 80030b0:	e009      	b.n	80030c6 <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a08      	ldr	r2, [pc, #32]	; (80030d8 <HAL_UART_ErrorCallback+0x44>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d105      	bne.n	80030c6 <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	43d2      	mvns	r2, r2
 80030c4:	601a      	str	r2, [r3, #0]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	200019a0 	.word	0x200019a0
 80030d8:	200019e4 	.word	0x200019e4

080030dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030e0:	b672      	cpsid	i
}
 80030e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <Error_Handler+0x8>
	...

080030e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_MspInit+0x4c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <HAL_MspInit+0x4c>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_MspInit+0x4c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_MspInit+0x4c>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <HAL_MspInit+0x4c>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_MspInit+0x4c>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_ADC_MspInit+0x7c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d127      	bne.n	80031aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_ADC_MspInit+0x80>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_ADC_MspInit+0x80>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6453      	str	r3, [r2, #68]	; 0x44
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <HAL_ADC_MspInit+0x80>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <HAL_ADC_MspInit+0x80>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <HAL_ADC_MspInit+0x80>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_ADC_MspInit+0x80>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 8003192:	2301      	movs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003196:	2303      	movs	r3, #3
 8003198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	4619      	mov	r1, r3
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <HAL_ADC_MspInit+0x84>)
 80031a6:	f002 fa3b 	bl	8005620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	; 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40012000 	.word	0x40012000
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020800 	.word	0x40020800

080031c0 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <HAL_ADC_MspDeInit+0x30>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d109      	bne.n	80031e6 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_ADC_MspDeInit+0x34>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <HAL_ADC_MspDeInit+0x34>)
 80031d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031dc:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 80031de:	2101      	movs	r1, #1
 80031e0:	4805      	ldr	r0, [pc, #20]	; (80031f8 <HAL_ADC_MspDeInit+0x38>)
 80031e2:	f002 fba1 	bl	8005928 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40012000 	.word	0x40012000
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020800 	.word	0x40020800

080031fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_I2C_MspInit+0x84>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d12c      	bne.n	8003278 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_I2C_MspInit+0x88>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <HAL_I2C_MspInit+0x88>)
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_I2C_MspInit+0x88>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 800323a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800323e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003240:	2312      	movs	r3, #18
 8003242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003248:	2303      	movs	r3, #3
 800324a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800324c:	2304      	movs	r3, #4
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	4619      	mov	r1, r3
 8003256:	480c      	ldr	r0, [pc, #48]	; (8003288 <HAL_I2C_MspInit+0x8c>)
 8003258:	f002 f9e2 	bl	8005620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_I2C_MspInit+0x88>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	4a07      	ldr	r2, [pc, #28]	; (8003284 <HAL_I2C_MspInit+0x88>)
 8003266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800326a:	6413      	str	r3, [r2, #64]	; 0x40
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_I2C_MspInit+0x88>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003278:	bf00      	nop
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40005400 	.word	0x40005400
 8003284:	40023800 	.word	0x40023800
 8003288:	40020400 	.word	0x40020400

0800328c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <HAL_I2C_MspDeInit+0x3c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d10f      	bne.n	80032be <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_I2C_MspDeInit+0x40>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <HAL_I2C_MspDeInit+0x40>)
 80032a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 80032aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ae:	4808      	ldr	r0, [pc, #32]	; (80032d0 <HAL_I2C_MspDeInit+0x44>)
 80032b0:	f002 fb3a 	bl	8005928 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 80032b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032b8:	4805      	ldr	r0, [pc, #20]	; (80032d0 <HAL_I2C_MspDeInit+0x44>)
 80032ba:	f002 fb35 	bl	8005928 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40005400 	.word	0x40005400
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020400 	.word	0x40020400

080032d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a10      	ldr	r2, [pc, #64]	; (8003334 <HAL_RTC_MspInit+0x60>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d119      	bne.n	800332a <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032f6:	2302      	movs	r3, #2
 80032f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80032fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	4618      	mov	r0, r3
 8003306:	f005 fcbb 	bl	8008c80 <HAL_RCCEx_PeriphCLKConfig>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003310:	f7ff fee4 	bl	80030dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RTC_MspInit+0x64>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	2029      	movs	r0, #41	; 0x29
 8003320:	f001 f9fd 	bl	800471e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003324:	2029      	movs	r0, #41	; 0x29
 8003326:	f001 fa16 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800332a:	bf00      	nop
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40002800 	.word	0x40002800
 8003338:	42470e3c 	.word	0x42470e3c

0800333c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	; 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a28      	ldr	r2, [pc, #160]	; (80033fc <HAL_SD_MspInit+0xc0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d14a      	bne.n	80033f4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	4b27      	ldr	r3, [pc, #156]	; (8003400 <HAL_SD_MspInit+0xc4>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	4a26      	ldr	r2, [pc, #152]	; (8003400 <HAL_SD_MspInit+0xc4>)
 8003368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800336c:	6453      	str	r3, [r2, #68]	; 0x44
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_SD_MspInit+0xc4>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_SD_MspInit+0xc4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_SD_MspInit+0xc4>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_SD_MspInit+0xc4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_SD_MspInit+0xc4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a18      	ldr	r2, [pc, #96]	; (8003400 <HAL_SD_MspInit+0xc4>)
 80033a0:	f043 0308 	orr.w	r3, r3, #8
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_SD_MspInit+0xc4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80033b2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80033b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033c4:	230c      	movs	r3, #12
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4619      	mov	r1, r3
 80033ce:	480d      	ldr	r0, [pc, #52]	; (8003404 <HAL_SD_MspInit+0xc8>)
 80033d0:	f002 f926 	bl	8005620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033d4:	2304      	movs	r3, #4
 80033d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e0:	2303      	movs	r3, #3
 80033e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033e4:	230c      	movs	r3, #12
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4619      	mov	r1, r3
 80033ee:	4806      	ldr	r0, [pc, #24]	; (8003408 <HAL_SD_MspInit+0xcc>)
 80033f0:	f002 f916 	bl	8005620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40023800 	.word	0x40023800
 8003404:	40020800 	.word	0x40020800
 8003408:	40020c00 	.word	0x40020c00

0800340c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3a      	ldr	r2, [pc, #232]	; (8003504 <HAL_TIM_Base_MspInit+0xf8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d13f      	bne.n	800349e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	4b39      	ldr	r3, [pc, #228]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 800343c:	4a34      	ldr	r2, [pc, #208]	; (8003510 <HAL_TIM_Base_MspInit+0x104>)
 800343e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 8003442:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003446:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003448:	4b30      	ldr	r3, [pc, #192]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 8003450:	2200      	movs	r2, #0
 8003452:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003454:	4b2d      	ldr	r3, [pc, #180]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 8003456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800345a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800345c:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 800345e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003462:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003464:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 8003466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800346a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 800346e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003472:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 8003476:	2200      	movs	r2, #0
 8003478:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 800347c:	2200      	movs	r2, #0
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003480:	4822      	ldr	r0, [pc, #136]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 8003482:	f001 f995 	bl	80047b0 <HAL_DMA_Init>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800348c:	f7ff fe26 	bl	80030dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a1e      	ldr	r2, [pc, #120]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 8003494:	621a      	str	r2, [r3, #32]
 8003496:	4a1d      	ldr	r2, [pc, #116]	; (800350c <HAL_TIM_Base_MspInit+0x100>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800349c:	e02e      	b.n	80034fc <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a6:	d116      	bne.n	80034d6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a8:	2300      	movs	r3, #0
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6413      	str	r3, [r2, #64]	; 0x40
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2100      	movs	r1, #0
 80034c8:	201c      	movs	r0, #28
 80034ca:	f001 f928 	bl	800471e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034ce:	201c      	movs	r0, #28
 80034d0:	f001 f941 	bl	8004756 <HAL_NVIC_EnableIRQ>
}
 80034d4:	e012      	b.n	80034fc <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <HAL_TIM_Base_MspInit+0x108>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10d      	bne.n	80034fc <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	6413      	str	r3, [r2, #64]	; 0x40
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_TIM_Base_MspInit+0xfc>)
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40010000 	.word	0x40010000
 8003508:	40023800 	.word	0x40023800
 800350c:	20001940 	.word	0x20001940
 8003510:	40026488 	.word	0x40026488
 8003514:	40000400 	.word	0x40000400

08003518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_TIM_MspPostInit+0x68>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d11d      	bne.n	8003576 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_TIM_MspPostInit+0x6c>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <HAL_TIM_MspPostInit+0x6c>)
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_TIM_MspPostInit+0x6c>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003556:	2330      	movs	r3, #48	; 0x30
 8003558:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003566:	2302      	movs	r3, #2
 8003568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356a:	f107 030c 	add.w	r3, r7, #12
 800356e:	4619      	mov	r1, r3
 8003570:	4805      	ldr	r0, [pc, #20]	; (8003588 <HAL_TIM_MspPostInit+0x70>)
 8003572:	f002 f855 	bl	8005620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003576:	bf00      	nop
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40000400 	.word	0x40000400
 8003584:	40023800 	.word	0x40023800
 8003588:	40020400 	.word	0x40020400

0800358c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_TIM_Base_MspDeInit+0x68>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d10b      	bne.n	80035b6 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800359e:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 f9ac 	bl	800490c <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 80035b4:	e019      	b.n	80035ea <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d109      	bne.n	80035d4 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80035cc:	201c      	movs	r0, #28
 80035ce:	f001 f8d0 	bl	8004772 <HAL_NVIC_DisableIRQ>
}
 80035d2:	e00a      	b.n	80035ea <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a08      	ldr	r2, [pc, #32]	; (80035fc <HAL_TIM_Base_MspDeInit+0x70>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d105      	bne.n	80035ea <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <HAL_TIM_Base_MspDeInit+0x6c>)
 80035e4:	f023 0302 	bic.w	r3, r3, #2
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40000400 	.word	0x40000400

08003600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08c      	sub	sp, #48	; 0x30
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 031c 	add.w	r3, r7, #28
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a3a      	ldr	r2, [pc, #232]	; (8003708 <HAL_UART_MspInit+0x108>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d134      	bne.n	800368c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_UART_MspInit+0x10c>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	4a38      	ldr	r2, [pc, #224]	; (800370c <HAL_UART_MspInit+0x10c>)
 800362c:	f043 0310 	orr.w	r3, r3, #16
 8003630:	6453      	str	r3, [r2, #68]	; 0x44
 8003632:	4b36      	ldr	r3, [pc, #216]	; (800370c <HAL_UART_MspInit+0x10c>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_UART_MspInit+0x10c>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a31      	ldr	r2, [pc, #196]	; (800370c <HAL_UART_MspInit+0x10c>)
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b2f      	ldr	r3, [pc, #188]	; (800370c <HAL_UART_MspInit+0x10c>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 800365a:	23c0      	movs	r3, #192	; 0xc0
 800365c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003666:	2303      	movs	r3, #3
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800366a:	2307      	movs	r3, #7
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366e:	f107 031c 	add.w	r3, r7, #28
 8003672:	4619      	mov	r1, r3
 8003674:	4826      	ldr	r0, [pc, #152]	; (8003710 <HAL_UART_MspInit+0x110>)
 8003676:	f001 ffd3 	bl	8005620 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	2025      	movs	r0, #37	; 0x25
 8003680:	f001 f84d 	bl	800471e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003684:	2025      	movs	r0, #37	; 0x25
 8003686:	f001 f866 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800368a:	e038      	b.n	80036fe <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a20      	ldr	r2, [pc, #128]	; (8003714 <HAL_UART_MspInit+0x114>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d133      	bne.n	80036fe <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_UART_MspInit+0x10c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_UART_MspInit+0x10c>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_UART_MspInit+0x10c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <HAL_UART_MspInit+0x10c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a14      	ldr	r2, [pc, #80]	; (800370c <HAL_UART_MspInit+0x10c>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_UART_MspInit+0x10c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 80036ce:	230c      	movs	r3, #12
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036de:	2307      	movs	r3, #7
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4619      	mov	r1, r3
 80036e8:	480b      	ldr	r0, [pc, #44]	; (8003718 <HAL_UART_MspInit+0x118>)
 80036ea:	f001 ff99 	bl	8005620 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	2026      	movs	r0, #38	; 0x26
 80036f4:	f001 f813 	bl	800471e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036f8:	2026      	movs	r0, #38	; 0x26
 80036fa:	f001 f82c 	bl	8004756 <HAL_NVIC_EnableIRQ>
}
 80036fe:	bf00      	nop
 8003700:	3730      	adds	r7, #48	; 0x30
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40011000 	.word	0x40011000
 800370c:	40023800 	.word	0x40023800
 8003710:	40020400 	.word	0x40020400
 8003714:	40004400 	.word	0x40004400
 8003718:	40020000 	.word	0x40020000

0800371c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_UART_MspDeInit+0x5c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10d      	bne.n	800374a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <HAL_UART_MspDeInit+0x60>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_UART_MspDeInit+0x60>)
 8003734:	f023 0310 	bic.w	r3, r3, #16
 8003738:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 800373a:	21c0      	movs	r1, #192	; 0xc0
 800373c:	4810      	ldr	r0, [pc, #64]	; (8003780 <HAL_UART_MspDeInit+0x64>)
 800373e:	f002 f8f3 	bl	8005928 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003742:	2025      	movs	r0, #37	; 0x25
 8003744:	f001 f815 	bl	8004772 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003748:	e011      	b.n	800376e <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <HAL_UART_MspDeInit+0x68>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d10c      	bne.n	800376e <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_UART_MspDeInit+0x60>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_UART_MspDeInit+0x60>)
 800375a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800375e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003760:	210c      	movs	r1, #12
 8003762:	4809      	ldr	r0, [pc, #36]	; (8003788 <HAL_UART_MspDeInit+0x6c>)
 8003764:	f002 f8e0 	bl	8005928 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003768:	2026      	movs	r0, #38	; 0x26
 800376a:	f001 f802 	bl	8004772 <HAL_NVIC_DisableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40011000 	.word	0x40011000
 800377c:	40023800 	.word	0x40023800
 8003780:	40020400 	.word	0x40020400
 8003784:	40004400 	.word	0x40004400
 8003788:	40020000 	.word	0x40020000

0800378c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003790:	f000 fffd 	bl	800478e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003794:	e7fe      	b.n	8003794 <NMI_Handler+0x8>

08003796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800379a:	f000 fff8 	bl	800478e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <HardFault_Handler+0x8>

080037a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 80037a4:	f000 fff3 	bl	800478e <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a8:	e7fe      	b.n	80037a8 <MemManage_Handler+0x8>

080037aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80037ae:	f000 ffee 	bl	800478e <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037b2:	e7fe      	b.n	80037b2 <BusFault_Handler+0x8>

080037b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 80037b8:	f000 ffe9 	bl	800478e <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037bc:	e7fe      	b.n	80037bc <UsageFault_Handler+0x8>

080037be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 80037c2:	f000 ffe4 	bl	800478e <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}

080037ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 80037ce:	f000 ffde 	bl	800478e <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 80037da:	f000 ffd8 	bl	800478e <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e6:	f000 f9a3 	bl	8003b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}

080037ee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80037f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037f6:	f002 f9ad 	bl	8005b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003804:	4802      	ldr	r0, [pc, #8]	; (8003810 <TIM2_IRQHandler+0x10>)
 8003806:	f007 f9db 	bl	800abc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200018b0 	.word	0x200018b0

08003814 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003818:	4802      	ldr	r0, [pc, #8]	; (8003824 <USART1_IRQHandler+0x10>)
 800381a:	f008 f97d 	bl	800bb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200019a0 	.word	0x200019a0

08003828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800382c:	4802      	ldr	r0, [pc, #8]	; (8003838 <USART2_IRQHandler+0x10>)
 800382e:	f008 f973 	bl	800bb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200019e4 	.word	0x200019e4

0800383c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003840:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003844:	f002 f986 	bl	8005b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003848:	bf00      	nop
 800384a:	bd80      	pop	{r7, pc}

0800384c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <RTC_Alarm_IRQHandler+0x10>)
 8003852:	f005 fe87 	bl	8009564 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	200017c4 	.word	0x200017c4

08003860 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <OTG_FS_IRQHandler+0x10>)
 8003866:	f003 fc2c 	bl	80070c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2000288c 	.word	0x2000288c

08003874 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <DMA2_Stream5_IRQHandler+0x10>)
 800387a:	f001 f973 	bl	8004b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20001940 	.word	0x20001940

08003888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return 1;
 800388c:	2301      	movs	r3, #1
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <_kill>:

int _kill(int pid, int sig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038a2:	f017 fdd7 	bl	801b454 <__errno>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2216      	movs	r2, #22
 80038aa:	601a      	str	r2, [r3, #0]
  return -1;
 80038ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_exit>:

void _exit (int status)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ffe7 	bl	8003898 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038ca:	e7fe      	b.n	80038ca <_exit+0x12>

080038cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e00a      	b.n	80038f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038de:	f3af 8000 	nop.w
 80038e2:	4601      	mov	r1, r0
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	60ba      	str	r2, [r7, #8]
 80038ea:	b2ca      	uxtb	r2, r1
 80038ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	dbf0      	blt.n	80038de <_read+0x12>
  }

  return len;
 80038fc:	687b      	ldr	r3, [r7, #4]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e009      	b.n	800392c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	60ba      	str	r2, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	3301      	adds	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	dbf1      	blt.n	8003918 <_write+0x12>
  }
  return len;
 8003934:	687b      	ldr	r3, [r7, #4]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_close>:

int _close(int file)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003966:	605a      	str	r2, [r3, #4]
  return 0;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <_isatty>:

int _isatty(int file)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800397e:	2301      	movs	r3, #1
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <_sbrk+0x5c>)
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <_sbrk+0x60>)
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <_sbrk+0x64>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <_sbrk+0x64>)
 80039c6:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <_sbrk+0x68>)
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <_sbrk+0x64>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d207      	bcs.n	80039e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039d8:	f017 fd3c 	bl	801b454 <__errno>
 80039dc:	4603      	mov	r3, r0
 80039de:	220c      	movs	r2, #12
 80039e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	e009      	b.n	80039fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <_sbrk+0x64>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <_sbrk+0x64>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	4a05      	ldr	r2, [pc, #20]	; (8003a0c <_sbrk+0x64>)
 80039f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20018000 	.word	0x20018000
 8003a08:	00000400 	.word	0x00000400
 8003a0c:	20001a28 	.word	0x20001a28
 8003a10:	20003620 	.word	0x20003620

08003a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <SystemInit+0x20>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	4a05      	ldr	r2, [pc, #20]	; (8003a34 <SystemInit+0x20>)
 8003a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a3c:	480d      	ldr	r0, [pc, #52]	; (8003a74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a3e:	490e      	ldr	r1, [pc, #56]	; (8003a78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a40:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a44:	e002      	b.n	8003a4c <LoopCopyDataInit>

08003a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4a:	3304      	adds	r3, #4

08003a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a50:	d3f9      	bcc.n	8003a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a52:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a54:	4c0b      	ldr	r4, [pc, #44]	; (8003a84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a58:	e001      	b.n	8003a5e <LoopFillZerobss>

08003a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a5c:	3204      	adds	r2, #4

08003a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a60:	d3fb      	bcc.n	8003a5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a62:	f7ff ffd7 	bl	8003a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a66:	f017 fd69 	bl	801b53c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a6a:	f7fe fee1 	bl	8002830 <main>
  bx  lr    
 8003a6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a78:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 8003a7c:	080224a0 	.word	0x080224a0
  ldr r2, =_sbss
 8003a80:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8003a84:	20003620 	.word	0x20003620

08003a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a88:	e7fe      	b.n	8003a88 <ADC_IRQHandler>
	...

08003a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a90:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_Init+0x40>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <HAL_Init+0x40>)
 8003a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_Init+0x40>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <HAL_Init+0x40>)
 8003aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_Init+0x40>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a07      	ldr	r2, [pc, #28]	; (8003acc <HAL_Init+0x40>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f000 fe27 	bl	8004708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aba:	200f      	movs	r0, #15
 8003abc:	f000 f808 	bl	8003ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac0:	f7ff fb12 	bl	80030e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00

08003ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_InitTick+0x54>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_InitTick+0x58>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fe51 	bl	8004796 <HAL_SYSTICK_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00e      	b.n	8003b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b0f      	cmp	r3, #15
 8003b02:	d80a      	bhi.n	8003b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b04:	2200      	movs	r2, #0
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	f000 fe07 	bl	800471e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b10:	4a06      	ldr	r2, [pc, #24]	; (8003b2c <HAL_InitTick+0x5c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000010 	.word	0x20000010
 8003b28:	20000018 	.word	0x20000018
 8003b2c:	20000014 	.word	0x20000014

08003b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_IncTick+0x20>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_IncTick+0x24>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_IncTick+0x24>)
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000018 	.word	0x20000018
 8003b54:	20001a2c 	.word	0x20001a2c

08003b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_GetTick+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20001a2c 	.word	0x20001a2c

08003b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff ffee 	bl	8003b58 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d005      	beq.n	8003b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_Delay+0x44>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b96:	bf00      	nop
 8003b98:	f7ff ffde 	bl	8003b58 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d8f7      	bhi.n	8003b98 <HAL_Delay+0x28>
  {
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000018 	.word	0x20000018

08003bb8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_SuspendTick+0x1c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <HAL_SuspendTick+0x1c>)
 8003bc2:	f023 0302 	bic.w	r3, r3, #2
 8003bc6:	6013      	str	r3, [r2, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000e010 	.word	0xe000e010

08003bd8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_ResumeTick+0x1c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_ResumeTick+0x1c>)
 8003be2:	f043 0302 	orr.w	r3, r3, #2
 8003be6:	6013      	str	r3, [r2, #0]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e010 	.word	0xe000e010

08003bf8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_GetUIDw0+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	1fff7a10 	.word	0x1fff7a10

08003c10 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_GetUIDw1+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	1fff7a14 	.word	0x1fff7a14

08003c28 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_GetUIDw2+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	1fff7a18 	.word	0x1fff7a18

08003c40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e033      	b.n	8003cbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fa6a 	bl	8003138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c86:	f023 0302 	bic.w	r3, r3, #2
 8003c8a:	f043 0202 	orr.w	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 faec 	bl	8004270 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
 8003cae:	e001      	b.n	8003cb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e022      	b.n	8003d22 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0202 	orr.w	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d108      	bne.n	8003d18 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fa5a 	bl	80031c0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_Start+0x1a>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e097      	b.n	8003e76 <HAL_ADC_Start+0x14a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d018      	beq.n	8003d8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d6c:	4b45      	ldr	r3, [pc, #276]	; (8003e84 <HAL_ADC_Start+0x158>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a45      	ldr	r2, [pc, #276]	; (8003e88 <HAL_ADC_Start+0x15c>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	0c9a      	lsrs	r2, r3, #18
 8003d78:	4613      	mov	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4413      	add	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d80:	e002      	b.n	8003d88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f9      	bne.n	8003d82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d15f      	bne.n	8003e5c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d106      	bne.n	8003dea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	f023 0206 	bic.w	r2, r3, #6
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
 8003de8:	e002      	b.n	8003df0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_ADC_Start+0x160>)
 8003dfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d129      	bne.n	8003e74 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	e020      	b.n	8003e74 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_ADC_Start+0x164>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d11b      	bne.n	8003e74 <HAL_ADC_Start+0x148>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d114      	bne.n	8003e74 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	e00b      	b.n	8003e74 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f043 0210 	orr.w	r2, r3, #16
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f043 0201 	orr.w	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000010 	.word	0x20000010
 8003e88:	431bde83 	.word	0x431bde83
 8003e8c:	40012300 	.word	0x40012300
 8003e90:	40012000 	.word	0x40012000

08003e94 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_ADC_Stop+0x16>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e021      	b.n	8003eee <HAL_ADC_Stop+0x5a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	f043 0201 	orr.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	d113      	bne.n	8003f40 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d10b      	bne.n	8003f40 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e063      	b.n	8004008 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f40:	f7ff fe0a 	bl	8003b58 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f46:	e021      	b.n	8003f8c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d01d      	beq.n	8003f8c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_ADC_PollForConversion+0x6c>
 8003f56:	f7ff fdff 	bl	8003b58 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d212      	bcs.n	8003f8c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d00b      	beq.n	8003f8c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f043 0204 	orr.w	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e03d      	b.n	8004008 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d1d6      	bne.n	8003f48 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f06f 0212 	mvn.w	r2, #18
 8003fa2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d123      	bne.n	8004006 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11f      	bne.n	8004006 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d006      	beq.n	8003fe2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d111      	bne.n	8004006 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x1c>
 8004044:	2302      	movs	r3, #2
 8004046:	e105      	b.n	8004254 <HAL_ADC_ConfigChannel+0x228>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b09      	cmp	r3, #9
 8004056:	d925      	bls.n	80040a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68d9      	ldr	r1, [r3, #12]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	4613      	mov	r3, r2
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	4413      	add	r3, r2
 800406c:	3b1e      	subs	r3, #30
 800406e:	2207      	movs	r2, #7
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43da      	mvns	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	400a      	ands	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68d9      	ldr	r1, [r3, #12]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	4618      	mov	r0, r3
 8004090:	4603      	mov	r3, r0
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4403      	add	r3, r0
 8004096:	3b1e      	subs	r3, #30
 8004098:	409a      	lsls	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e022      	b.n	80040ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	2207      	movs	r2, #7
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	400a      	ands	r2, r1
 80040c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6919      	ldr	r1, [r3, #16]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	4618      	mov	r0, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	4403      	add	r3, r0
 80040e0:	409a      	lsls	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d824      	bhi.n	800413c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	3b05      	subs	r3, #5
 8004104:	221f      	movs	r2, #31
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43da      	mvns	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	400a      	ands	r2, r1
 8004112:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	4618      	mov	r0, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	3b05      	subs	r3, #5
 800412e:	fa00 f203 	lsl.w	r2, r0, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	635a      	str	r2, [r3, #52]	; 0x34
 800413a:	e04c      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	d824      	bhi.n	800418e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	3b23      	subs	r3, #35	; 0x23
 8004156:	221f      	movs	r2, #31
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43da      	mvns	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	400a      	ands	r2, r1
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	4618      	mov	r0, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	3b23      	subs	r3, #35	; 0x23
 8004180:	fa00 f203 	lsl.w	r2, r0, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
 800418c:	e023      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3b41      	subs	r3, #65	; 0x41
 80041a0:	221f      	movs	r2, #31
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43da      	mvns	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	400a      	ands	r2, r1
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	3b41      	subs	r3, #65	; 0x41
 80041ca:	fa00 f203 	lsl.w	r2, r0, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_ADC_ConfigChannel+0x234>)
 80041d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a21      	ldr	r2, [pc, #132]	; (8004264 <HAL_ADC_ConfigChannel+0x238>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d109      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x1cc>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b12      	cmp	r3, #18
 80041ea:	d105      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <HAL_ADC_ConfigChannel+0x238>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d123      	bne.n	800424a <HAL_ADC_ConfigChannel+0x21e>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b10      	cmp	r3, #16
 8004208:	d003      	beq.n	8004212 <HAL_ADC_ConfigChannel+0x1e6>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b11      	cmp	r3, #17
 8004210:	d11b      	bne.n	800424a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b10      	cmp	r3, #16
 8004224:	d111      	bne.n	800424a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <HAL_ADC_ConfigChannel+0x23c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a10      	ldr	r2, [pc, #64]	; (800426c <HAL_ADC_ConfigChannel+0x240>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	0c9a      	lsrs	r2, r3, #18
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800423c:	e002      	b.n	8004244 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3b01      	subs	r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f9      	bne.n	800423e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012300 	.word	0x40012300
 8004264:	40012000 	.word	0x40012000
 8004268:	20000010 	.word	0x20000010
 800426c:	431bde83 	.word	0x431bde83

08004270 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004278:	4b79      	ldr	r3, [pc, #484]	; (8004460 <ADC_Init+0x1f0>)
 800427a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	021a      	lsls	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6899      	ldr	r1, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	4a58      	ldr	r2, [pc, #352]	; (8004464 <ADC_Init+0x1f4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d022      	beq.n	800434e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004316:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6899      	ldr	r1, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	e00f      	b.n	800436e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800435c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800436c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0202 	bic.w	r2, r2, #2
 800437c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6899      	ldr	r1, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	7e1b      	ldrb	r3, [r3, #24]
 8004388:	005a      	lsls	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	3b01      	subs	r3, #1
 80043c8:	035a      	lsls	r2, r3, #13
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	e007      	b.n	80043e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	3b01      	subs	r3, #1
 8004400:	051a      	lsls	r2, r3, #20
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004426:	025a      	lsls	r2, r3, #9
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6899      	ldr	r1, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	029a      	lsls	r2, r3, #10
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40012300 	.word	0x40012300
 8004464:	0f000001 	.word	0x0f000001

08004468 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 800447c:	2302      	movs	r3, #2
 800447e:	e031      	b.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 021f 	bic.w	r2, r3, #31
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40012300 	.word	0x40012300

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4907      	ldr	r1, [pc, #28]	; (8004590 <__NVIC_EnableIRQ+0x38>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e100 	.word	0xe000e100

08004594 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	db12      	blt.n	80045cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	f003 021f 	and.w	r2, r3, #31
 80045ac:	490a      	ldr	r1, [pc, #40]	; (80045d8 <__NVIC_DisableIRQ+0x44>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2001      	movs	r0, #1
 80045b6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ba:	3320      	adds	r3, #32
 80045bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045c0:	f3bf 8f4f 	dsb	sy
}
 80045c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045c6:	f3bf 8f6f 	isb	sy
}
 80045ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000e100 	.word	0xe000e100

080045dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	db0a      	blt.n	8004606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	490c      	ldr	r1, [pc, #48]	; (8004628 <__NVIC_SetPriority+0x4c>)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	0112      	lsls	r2, r2, #4
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	440b      	add	r3, r1
 8004600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004604:	e00a      	b.n	800461c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4908      	ldr	r1, [pc, #32]	; (800462c <__NVIC_SetPriority+0x50>)
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	3b04      	subs	r3, #4
 8004614:	0112      	lsls	r2, r2, #4
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	440b      	add	r3, r1
 800461a:	761a      	strb	r2, [r3, #24]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000e100 	.word	0xe000e100
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	; 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f1c3 0307 	rsb	r3, r3, #7
 800464a:	2b04      	cmp	r3, #4
 800464c:	bf28      	it	cs
 800464e:	2304      	movcs	r3, #4
 8004650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3304      	adds	r3, #4
 8004656:	2b06      	cmp	r3, #6
 8004658:	d902      	bls.n	8004660 <NVIC_EncodePriority+0x30>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3b03      	subs	r3, #3
 800465e:	e000      	b.n	8004662 <NVIC_EncodePriority+0x32>
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	f04f 32ff 	mov.w	r2, #4294967295
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43da      	mvns	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	401a      	ands	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004678:	f04f 31ff 	mov.w	r1, #4294967295
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	43d9      	mvns	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004688:	4313      	orrs	r3, r2
         );
}
 800468a:	4618      	mov	r0, r3
 800468c:	3724      	adds	r7, #36	; 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800469c:	f3bf 8f4f 	dsb	sy
}
 80046a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <__NVIC_SystemReset+0x24>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80046aa:	4904      	ldr	r1, [pc, #16]	; (80046bc <__NVIC_SystemReset+0x24>)
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <__NVIC_SystemReset+0x28>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80046b2:	f3bf 8f4f 	dsb	sy
}
 80046b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <__NVIC_SystemReset+0x20>
 80046bc:	e000ed00 	.word	0xe000ed00
 80046c0:	05fa0004 	.word	0x05fa0004

080046c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d4:	d301      	bcc.n	80046da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046d6:	2301      	movs	r3, #1
 80046d8:	e00f      	b.n	80046fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <SysTick_Config+0x40>)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3b01      	subs	r3, #1
 80046e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046e2:	210f      	movs	r1, #15
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	f7ff ff78 	bl	80045dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <SysTick_Config+0x40>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046f2:	4b04      	ldr	r3, [pc, #16]	; (8004704 <SysTick_Config+0x40>)
 80046f4:	2207      	movs	r2, #7
 80046f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	e000e010 	.word	0xe000e010

08004708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff feef 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800471e:	b580      	push	{r7, lr}
 8004720:	b086      	sub	sp, #24
 8004722:	af00      	add	r7, sp, #0
 8004724:	4603      	mov	r3, r0
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004730:	f7ff ff04 	bl	800453c <__NVIC_GetPriorityGrouping>
 8004734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	f7ff ff78 	bl	8004630 <NVIC_EncodePriority>
 8004740:	4602      	mov	r2, r0
 8004742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff47 	bl	80045dc <__NVIC_SetPriority>
}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	4603      	mov	r3, r0
 800475e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fef7 	bl	8004558 <__NVIC_EnableIRQ>
}
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	4603      	mov	r3, r0
 800477a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800477c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff07 	bl	8004594 <__NVIC_DisableIRQ>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004792:	f7ff ff81 	bl	8004698 <__NVIC_SystemReset>

08004796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff ff90 	bl	80046c4 <SysTick_Config>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7ff f9cc 	bl	8003b58 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e099      	b.n	8004900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ec:	e00f      	b.n	800480e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ee:	f7ff f9b3 	bl	8003b58 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d908      	bls.n	800480e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2203      	movs	r2, #3
 8004806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e078      	b.n	8004900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e8      	bne.n	80047ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4b38      	ldr	r3, [pc, #224]	; (8004908 <HAL_DMA_Init+0x158>)
 8004828:	4013      	ands	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800483a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2b04      	cmp	r3, #4
 8004866:	d107      	bne.n	8004878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	4313      	orrs	r3, r2
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d117      	bne.n	80048d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00e      	beq.n	80048d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb43 	bl	8004f40 <DMA_CheckFifoParam>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2240      	movs	r2, #64	; 0x40
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ce:	2301      	movs	r3, #1
 80048d0:	e016      	b.n	8004900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fafa 	bl	8004ed4 <DMA_CalcBaseAndBitshift>
 80048e0:	4603      	mov	r3, r0
 80048e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	223f      	movs	r2, #63	; 0x3f
 80048ea:	409a      	lsls	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	f010803f 	.word	0xf010803f

0800490c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e050      	b.n	80049c0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d101      	bne.n	800492e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800492a:	2302      	movs	r3, #2
 800492c:	e048      	b.n	80049c0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2221      	movs	r2, #33	; 0x21
 800496c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fab0 	bl	8004ed4 <DMA_CalcBaseAndBitshift>
 8004974:	4603      	mov	r3, r0
 8004976:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	223f      	movs	r2, #63	; 0x3f
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_DMA_Start+0x20>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e026      	b.n	8004a36 <HAL_DMA_Start+0x6e>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d115      	bne.n	8004a28 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fa31 	bl	8004e78 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e005      	b.n	8004a34 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a30:	2302      	movs	r3, #2
 8004a32:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a4c:	f7ff f884 	bl	8003b58 <HAL_GetTick>
 8004a50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d008      	beq.n	8004a70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2280      	movs	r2, #128	; 0x80
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e052      	b.n	8004b16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0216 	bic.w	r2, r2, #22
 8004a7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d103      	bne.n	8004aa0 <HAL_DMA_Abort+0x62>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0208 	bic.w	r2, r2, #8
 8004aae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ac0:	e013      	b.n	8004aea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ac2:	f7ff f849 	bl	8003b58 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b05      	cmp	r3, #5
 8004ace:	d90c      	bls.n	8004aea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e015      	b.n	8004b16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e4      	bne.n	8004ac2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	223f      	movs	r2, #63	; 0x3f
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d004      	beq.n	8004b3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e00c      	b.n	8004b56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2205      	movs	r2, #5
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b70:	4b8e      	ldr	r3, [pc, #568]	; (8004dac <HAL_DMA_IRQHandler+0x248>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a8e      	ldr	r2, [pc, #568]	; (8004db0 <HAL_DMA_IRQHandler+0x24c>)
 8004b76:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7a:	0a9b      	lsrs	r3, r3, #10
 8004b7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8e:	2208      	movs	r2, #8
 8004b90:	409a      	lsls	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01a      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0204 	bic.w	r2, r2, #4
 8004bb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	2208      	movs	r2, #8
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc8:	f043 0201 	orr.w	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d012      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	f043 0202 	orr.w	r2, r3, #2
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d012      	beq.n	8004c3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	2204      	movs	r2, #4
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	f043 0204 	orr.w	r2, r3, #4
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c40:	2210      	movs	r2, #16
 8004c42:	409a      	lsls	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d043      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d03c      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	2210      	movs	r2, #16
 8004c60:	409a      	lsls	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d018      	beq.n	8004ca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d108      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d024      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
 8004c92:	e01f      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
 8004ca4:	e016      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0208 	bic.w	r2, r2, #8
 8004cc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	2220      	movs	r2, #32
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 808f 	beq.w	8004e04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8087 	beq.w	8004e04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b05      	cmp	r3, #5
 8004d0c:	d136      	bne.n	8004d7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0216 	bic.w	r2, r2, #22
 8004d1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <HAL_DMA_IRQHandler+0x1da>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0208 	bic.w	r2, r2, #8
 8004d4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	223f      	movs	r2, #63	; 0x3f
 8004d54:	409a      	lsls	r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d07e      	beq.n	8004e70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
        }
        return;
 8004d7a:	e079      	b.n	8004e70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01d      	beq.n	8004dc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d031      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
 8004da8:	e02c      	b.n	8004e04 <HAL_DMA_IRQHandler+0x2a0>
 8004daa:	bf00      	nop
 8004dac:	20000010 	.word	0x20000010
 8004db0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d023      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
 8004dc4:	e01e      	b.n	8004e04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0210 	bic.w	r2, r2, #16
 8004de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d032      	beq.n	8004e72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d022      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2205      	movs	r2, #5
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	3301      	adds	r3, #1
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d307      	bcc.n	8004e4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f2      	bne.n	8004e30 <HAL_DMA_IRQHandler+0x2cc>
 8004e4a:	e000      	b.n	8004e4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
 8004e6e:	e000      	b.n	8004e72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e70:	bf00      	nop
    }
  }
}
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d108      	bne.n	8004eb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004eb6:	e007      	b.n	8004ec8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	3b10      	subs	r3, #16
 8004ee4:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <DMA_CalcBaseAndBitshift+0x64>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004eee:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <DMA_CalcBaseAndBitshift+0x68>)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d909      	bls.n	8004f16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	1d1a      	adds	r2, r3, #4
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	659a      	str	r2, [r3, #88]	; 0x58
 8004f14:	e007      	b.n	8004f26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	aaaaaaab 	.word	0xaaaaaaab
 8004f3c:	08021af4 	.word	0x08021af4

08004f40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d11f      	bne.n	8004f9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d856      	bhi.n	800500e <DMA_CheckFifoParam+0xce>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <DMA_CheckFifoParam+0x28>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f8b 	.word	0x08004f8b
 8004f70:	08004f79 	.word	0x08004f79
 8004f74:	0800500f 	.word	0x0800500f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d046      	beq.n	8005012 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f88:	e043      	b.n	8005012 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f92:	d140      	bne.n	8005016 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f98:	e03d      	b.n	8005016 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa2:	d121      	bne.n	8004fe8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d837      	bhi.n	800501a <DMA_CheckFifoParam+0xda>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <DMA_CheckFifoParam+0x70>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fc1 	.word	0x08004fc1
 8004fb4:	08004fc7 	.word	0x08004fc7
 8004fb8:	08004fc1 	.word	0x08004fc1
 8004fbc:	08004fd9 	.word	0x08004fd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc4:	e030      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d025      	beq.n	800501e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd6:	e022      	b.n	800501e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fe0:	d11f      	bne.n	8005022 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fe6:	e01c      	b.n	8005022 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d903      	bls.n	8004ff6 <DMA_CheckFifoParam+0xb6>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d003      	beq.n	8004ffc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ff4:	e018      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffa:	e015      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00e      	beq.n	8005026 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      break;
 800500c:	e00b      	b.n	8005026 <DMA_CheckFifoParam+0xe6>
      break;
 800500e:	bf00      	nop
 8005010:	e00a      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
      break;
 8005012:	bf00      	nop
 8005014:	e008      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
      break;
 8005016:	bf00      	nop
 8005018:	e006      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
      break;
 800501a:	bf00      	nop
 800501c:	e004      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
      break;
 800501e:	bf00      	nop
 8005020:	e002      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
      break;   
 8005022:	bf00      	nop
 8005024:	e000      	b.n	8005028 <DMA_CheckFifoParam+0xe8>
      break;
 8005026:	bf00      	nop
    }
  } 
  
  return status; 
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop

08005038 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800504a:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <HAL_FLASH_Program+0xa0>)
 800504c:	7e1b      	ldrb	r3, [r3, #24]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_FLASH_Program+0x1e>
 8005052:	2302      	movs	r3, #2
 8005054:	e03b      	b.n	80050ce <HAL_FLASH_Program+0x96>
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_FLASH_Program+0xa0>)
 8005058:	2201      	movs	r2, #1
 800505a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800505c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005060:	f000 f87c 	bl	800515c <FLASH_WaitForLastOperation>
 8005064:	4603      	mov	r3, r0
 8005066:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d12b      	bne.n	80050c6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005074:	783b      	ldrb	r3, [r7, #0]
 8005076:	4619      	mov	r1, r3
 8005078:	68b8      	ldr	r0, [r7, #8]
 800507a:	f000 f927 	bl	80052cc <FLASH_Program_Byte>
 800507e:	e016      	b.n	80050ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d105      	bne.n	8005092 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005086:	883b      	ldrh	r3, [r7, #0]
 8005088:	4619      	mov	r1, r3
 800508a:	68b8      	ldr	r0, [r7, #8]
 800508c:	f000 f8fa 	bl	8005284 <FLASH_Program_HalfWord>
 8005090:	e00d      	b.n	80050ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d105      	bne.n	80050a4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	4619      	mov	r1, r3
 800509c:	68b8      	ldr	r0, [r7, #8]
 800509e:	f000 f8cf 	bl	8005240 <FLASH_Program_Word>
 80050a2:	e004      	b.n	80050ae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80050a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a8:	68b8      	ldr	r0, [r7, #8]
 80050aa:	f000 f897 	bl	80051dc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050b2:	f000 f853 	bl	800515c <FLASH_WaitForLastOperation>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80050ba:	4b08      	ldr	r3, [pc, #32]	; (80050dc <HAL_FLASH_Program+0xa4>)
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	4a07      	ldr	r2, [pc, #28]	; (80050dc <HAL_FLASH_Program+0xa4>)
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80050c6:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <HAL_FLASH_Program+0xa0>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	761a      	strb	r2, [r3, #24]
  
  return status;
 80050cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20001a30 	.word	0x20001a30
 80050dc:	40023c00 	.word	0x40023c00

080050e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_FLASH_Unlock+0x38>)
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	da0b      	bge.n	800510a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <HAL_FLASH_Unlock+0x38>)
 80050f4:	4a09      	ldr	r2, [pc, #36]	; (800511c <HAL_FLASH_Unlock+0x3c>)
 80050f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80050f8:	4b07      	ldr	r3, [pc, #28]	; (8005118 <HAL_FLASH_Unlock+0x38>)
 80050fa:	4a09      	ldr	r2, [pc, #36]	; (8005120 <HAL_FLASH_Unlock+0x40>)
 80050fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050fe:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_FLASH_Unlock+0x38>)
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	da01      	bge.n	800510a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800510a:	79fb      	ldrb	r3, [r7, #7]
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40023c00 	.word	0x40023c00
 800511c:	45670123 	.word	0x45670123
 8005120:	cdef89ab 	.word	0xcdef89ab

08005124 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_FLASH_Lock+0x1c>)
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	4a04      	ldr	r2, [pc, #16]	; (8005140 <HAL_FLASH_Lock+0x1c>)
 800512e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005132:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	40023c00 	.word	0x40023c00

08005144 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <HAL_FLASH_GetError+0x14>)
 800514a:	69db      	ldr	r3, [r3, #28]
}  
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20001a30 	.word	0x20001a30

0800515c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005168:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <FLASH_WaitForLastOperation+0x78>)
 800516a:	2200      	movs	r2, #0
 800516c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800516e:	f7fe fcf3 	bl	8003b58 <HAL_GetTick>
 8005172:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005174:	e010      	b.n	8005198 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d00c      	beq.n	8005198 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <FLASH_WaitForLastOperation+0x38>
 8005184:	f7fe fce8 	bl	8003b58 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d201      	bcs.n	8005198 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e019      	b.n	80051cc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <FLASH_WaitForLastOperation+0x7c>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e8      	bne.n	8005176 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <FLASH_WaitForLastOperation+0x7c>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80051b0:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <FLASH_WaitForLastOperation+0x7c>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80051b6:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <FLASH_WaitForLastOperation+0x7c>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80051c2:	f000 f8a5 	bl	8005310 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
  
}  
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20001a30 	.word	0x20001a30
 80051d8:	40023c00 	.word	0x40023c00

080051dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <FLASH_Program_DoubleWord+0x60>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4a13      	ldr	r2, [pc, #76]	; (800523c <FLASH_Program_DoubleWord+0x60>)
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <FLASH_Program_DoubleWord+0x60>)
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	4a10      	ldr	r2, [pc, #64]	; (800523c <FLASH_Program_DoubleWord+0x60>)
 80051fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80051fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005200:	4b0e      	ldr	r3, [pc, #56]	; (800523c <FLASH_Program_DoubleWord+0x60>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	4a0d      	ldr	r2, [pc, #52]	; (800523c <FLASH_Program_DoubleWord+0x60>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005212:	f3bf 8f6f 	isb	sy
}
 8005216:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	000a      	movs	r2, r1
 8005226:	2300      	movs	r3, #0
 8005228:	68f9      	ldr	r1, [r7, #12]
 800522a:	3104      	adds	r1, #4
 800522c:	4613      	mov	r3, r2
 800522e:	600b      	str	r3, [r1, #0]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40023c00 	.word	0x40023c00

08005240 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <FLASH_Program_Word+0x40>)
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <FLASH_Program_Word+0x40>)
 8005250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005254:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <FLASH_Program_Word+0x40>)
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	4a09      	ldr	r2, [pc, #36]	; (8005280 <FLASH_Program_Word+0x40>)
 800525c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005260:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005262:	4b07      	ldr	r3, [pc, #28]	; (8005280 <FLASH_Program_Word+0x40>)
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	4a06      	ldr	r2, [pc, #24]	; (8005280 <FLASH_Program_Word+0x40>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40023c00 	.word	0x40023c00

08005284 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005290:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <FLASH_Program_HalfWord+0x44>)
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <FLASH_Program_HalfWord+0x44>)
 8005296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <FLASH_Program_HalfWord+0x44>)
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <FLASH_Program_HalfWord+0x44>)
 80052a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052a8:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <FLASH_Program_HalfWord+0x44>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	4a06      	ldr	r2, [pc, #24]	; (80052c8 <FLASH_Program_HalfWord+0x44>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	887a      	ldrh	r2, [r7, #2]
 80052b8:	801a      	strh	r2, [r3, #0]
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40023c00 	.word	0x40023c00

080052cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <FLASH_Program_Byte+0x40>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	4a0b      	ldr	r2, [pc, #44]	; (800530c <FLASH_Program_Byte+0x40>)
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <FLASH_Program_Byte+0x40>)
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <FLASH_Program_Byte+0x40>)
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <FLASH_Program_Byte+0x40>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	4a06      	ldr	r2, [pc, #24]	; (800530c <FLASH_Program_Byte+0x40>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	701a      	strb	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40023c00 	.word	0x40023c00

08005310 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005314:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005320:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	f043 0310 	orr.w	r3, r3, #16
 8005328:	4a2b      	ldr	r2, [pc, #172]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 800532a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800532c:	4b29      	ldr	r3, [pc, #164]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 800532e:	2210      	movs	r2, #16
 8005330:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005332:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800533e:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f043 0308 	orr.w	r3, r3, #8
 8005346:	4a24      	ldr	r2, [pc, #144]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 8005348:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800534a:	4b22      	ldr	r3, [pc, #136]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 800534c:	2220      	movs	r2, #32
 800534e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005350:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800535c:	4b1e      	ldr	r3, [pc, #120]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f043 0304 	orr.w	r3, r3, #4
 8005364:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 8005366:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 800536a:	2240      	movs	r2, #64	; 0x40
 800536c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800536e:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f043 0302 	orr.w	r3, r3, #2
 8005382:	4a15      	ldr	r2, [pc, #84]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 8005384:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005386:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005394:	2b00      	cmp	r3, #0
 8005396:	d009      	beq.n	80053ac <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005398:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	4a0d      	ldr	r2, [pc, #52]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 80053a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 80053a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053aa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f043 0320 	orr.w	r3, r3, #32
 80053c0:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <FLASH_SetErrorCode+0xc8>)
 80053c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <FLASH_SetErrorCode+0xc4>)
 80053c6:	2202      	movs	r2, #2
 80053c8:	60da      	str	r2, [r3, #12]
  }
}
 80053ca:	bf00      	nop
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40023c00 	.word	0x40023c00
 80053d8:	20001a30 	.word	0x20001a30

080053dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053ee:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <HAL_FLASHEx_Erase+0xd8>)
 80053f0:	7e1b      	ldrb	r3, [r3, #24]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_FLASHEx_Erase+0x1e>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e058      	b.n	80054ac <HAL_FLASHEx_Erase+0xd0>
 80053fa:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <HAL_FLASHEx_Erase+0xd8>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005404:	f7ff feaa 	bl	800515c <FLASH_WaitForLastOperation>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d148      	bne.n	80054a4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f04f 32ff 	mov.w	r2, #4294967295
 8005418:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d115      	bne.n	800544e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f000 f844 	bl	80054bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005434:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005438:	f7ff fe90 	bl	800515c <FLASH_WaitForLastOperation>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HAL_FLASHEx_Erase+0xdc>)
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <HAL_FLASHEx_Erase+0xdc>)
 8005446:	f023 0304 	bic.w	r3, r3, #4
 800544a:	6113      	str	r3, [r2, #16]
 800544c:	e028      	b.n	80054a0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	e01c      	b.n	8005490 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	4619      	mov	r1, r3
 800545e:	68b8      	ldr	r0, [r7, #8]
 8005460:	f000 f850 	bl	8005504 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005464:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005468:	f7ff fe78 	bl	800515c <FLASH_WaitForLastOperation>
 800546c:	4603      	mov	r3, r0
 800546e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005470:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <HAL_FLASHEx_Erase+0xdc>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <HAL_FLASHEx_Erase+0xdc>)
 8005476:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800547a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800547c:	7bfb      	ldrb	r3, [r7, #15]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	601a      	str	r2, [r3, #0]
          break;
 8005488:	e00a      	b.n	80054a0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	3301      	adds	r3, #1
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4413      	add	r3, r2
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	429a      	cmp	r2, r3
 800549e:	d3da      	bcc.n	8005456 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80054a0:	f000 f878 	bl	8005594 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054a4:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <HAL_FLASHEx_Erase+0xd8>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	761a      	strb	r2, [r3, #24]

  return status;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20001a30 	.word	0x20001a30
 80054b8:	40023c00 	.word	0x40023c00

080054bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	6039      	str	r1, [r7, #0]
 80054c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054c8:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <FLASH_MassErase+0x44>)
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <FLASH_MassErase+0x44>)
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <FLASH_MassErase+0x44>)
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	4a09      	ldr	r2, [pc, #36]	; (8005500 <FLASH_MassErase+0x44>)
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <FLASH_MassErase+0x44>)
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	4313      	orrs	r3, r2
 80054ea:	4a05      	ldr	r2, [pc, #20]	; (8005500 <FLASH_MassErase+0x44>)
 80054ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f0:	6113      	str	r3, [r2, #16]
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40023c00 	.word	0x40023c00

08005504 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e010      	b.n	8005542 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d103      	bne.n	800552e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e009      	b.n	8005542 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d103      	bne.n	800553c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	e002      	b.n	8005542 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800553c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005540:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005542:	4b13      	ldr	r3, [pc, #76]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	4a12      	ldr	r2, [pc, #72]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 8005548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800554e:	4b10      	ldr	r3, [pc, #64]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	490f      	ldr	r1, [pc, #60]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800555a:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 8005560:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005564:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4313      	orrs	r3, r2
 8005570:	4a07      	ldr	r2, [pc, #28]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 8005572:	f043 0302 	orr.w	r3, r3, #2
 8005576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <FLASH_Erase_Sector+0x8c>)
 800557e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005582:	6113      	str	r3, [r2, #16]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40023c00 	.word	0x40023c00

08005594 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005598:	4b20      	ldr	r3, [pc, #128]	; (800561c <FLASH_FlushCaches+0x88>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <FLASH_FlushCaches+0x88>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <FLASH_FlushCaches+0x88>)
 80055aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <FLASH_FlushCaches+0x88>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <FLASH_FlushCaches+0x88>)
 80055b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	4b17      	ldr	r3, [pc, #92]	; (800561c <FLASH_FlushCaches+0x88>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a16      	ldr	r2, [pc, #88]	; (800561c <FLASH_FlushCaches+0x88>)
 80055c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055c8:	4b14      	ldr	r3, [pc, #80]	; (800561c <FLASH_FlushCaches+0x88>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <FLASH_FlushCaches+0x88>)
 80055ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <FLASH_FlushCaches+0x88>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d017      	beq.n	8005610 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <FLASH_FlushCaches+0x88>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a0d      	ldr	r2, [pc, #52]	; (800561c <FLASH_FlushCaches+0x88>)
 80055e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80055ec:	4b0b      	ldr	r3, [pc, #44]	; (800561c <FLASH_FlushCaches+0x88>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0a      	ldr	r2, [pc, #40]	; (800561c <FLASH_FlushCaches+0x88>)
 80055f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <FLASH_FlushCaches+0x88>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a07      	ldr	r2, [pc, #28]	; (800561c <FLASH_FlushCaches+0x88>)
 80055fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005602:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005604:	4b05      	ldr	r3, [pc, #20]	; (800561c <FLASH_FlushCaches+0x88>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a04      	ldr	r2, [pc, #16]	; (800561c <FLASH_FlushCaches+0x88>)
 800560a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800560e:	6013      	str	r3, [r2, #0]
  }
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40023c00 	.word	0x40023c00

08005620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005620:	b480      	push	{r7}
 8005622:	b089      	sub	sp, #36	; 0x24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005632:	2300      	movs	r3, #0
 8005634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	e159      	b.n	80058f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800563c:	2201      	movs	r2, #1
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4013      	ands	r3, r2
 800564e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	429a      	cmp	r2, r3
 8005656:	f040 8148 	bne.w	80058ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d005      	beq.n	8005672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800566e:	2b02      	cmp	r3, #2
 8005670:	d130      	bne.n	80056d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	2203      	movs	r2, #3
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	4013      	ands	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4313      	orrs	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056a8:	2201      	movs	r2, #1
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4013      	ands	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	f003 0201 	and.w	r2, r3, #1
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d017      	beq.n	8005710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2203      	movs	r2, #3
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d123      	bne.n	8005764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	08da      	lsrs	r2, r3, #3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3208      	adds	r2, #8
 8005724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	220f      	movs	r2, #15
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4013      	ands	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4313      	orrs	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	08da      	lsrs	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3208      	adds	r2, #8
 800575e:	69b9      	ldr	r1, [r7, #24]
 8005760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	2203      	movs	r2, #3
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f003 0203 	and.w	r2, r3, #3
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4313      	orrs	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a2 	beq.w	80058ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	4b57      	ldr	r3, [pc, #348]	; (8005908 <HAL_GPIO_Init+0x2e8>)
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	4a56      	ldr	r2, [pc, #344]	; (8005908 <HAL_GPIO_Init+0x2e8>)
 80057b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057b4:	6453      	str	r3, [r2, #68]	; 0x44
 80057b6:	4b54      	ldr	r3, [pc, #336]	; (8005908 <HAL_GPIO_Init+0x2e8>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057c2:	4a52      	ldr	r2, [pc, #328]	; (800590c <HAL_GPIO_Init+0x2ec>)
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	3302      	adds	r3, #2
 80057ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	220f      	movs	r2, #15
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	43db      	mvns	r3, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4013      	ands	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a49      	ldr	r2, [pc, #292]	; (8005910 <HAL_GPIO_Init+0x2f0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d019      	beq.n	8005822 <HAL_GPIO_Init+0x202>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a48      	ldr	r2, [pc, #288]	; (8005914 <HAL_GPIO_Init+0x2f4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_GPIO_Init+0x1fe>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a47      	ldr	r2, [pc, #284]	; (8005918 <HAL_GPIO_Init+0x2f8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00d      	beq.n	800581a <HAL_GPIO_Init+0x1fa>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a46      	ldr	r2, [pc, #280]	; (800591c <HAL_GPIO_Init+0x2fc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <HAL_GPIO_Init+0x1f6>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a45      	ldr	r2, [pc, #276]	; (8005920 <HAL_GPIO_Init+0x300>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d101      	bne.n	8005812 <HAL_GPIO_Init+0x1f2>
 800580e:	2304      	movs	r3, #4
 8005810:	e008      	b.n	8005824 <HAL_GPIO_Init+0x204>
 8005812:	2307      	movs	r3, #7
 8005814:	e006      	b.n	8005824 <HAL_GPIO_Init+0x204>
 8005816:	2303      	movs	r3, #3
 8005818:	e004      	b.n	8005824 <HAL_GPIO_Init+0x204>
 800581a:	2302      	movs	r3, #2
 800581c:	e002      	b.n	8005824 <HAL_GPIO_Init+0x204>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_GPIO_Init+0x204>
 8005822:	2300      	movs	r3, #0
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	f002 0203 	and.w	r2, r2, #3
 800582a:	0092      	lsls	r2, r2, #2
 800582c:	4093      	lsls	r3, r2
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005834:	4935      	ldr	r1, [pc, #212]	; (800590c <HAL_GPIO_Init+0x2ec>)
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	089b      	lsrs	r3, r3, #2
 800583a:	3302      	adds	r3, #2
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005842:	4b38      	ldr	r3, [pc, #224]	; (8005924 <HAL_GPIO_Init+0x304>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	43db      	mvns	r3, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4013      	ands	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005866:	4a2f      	ldr	r2, [pc, #188]	; (8005924 <HAL_GPIO_Init+0x304>)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_GPIO_Init+0x304>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	43db      	mvns	r3, r3
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005890:	4a24      	ldr	r2, [pc, #144]	; (8005924 <HAL_GPIO_Init+0x304>)
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005896:	4b23      	ldr	r3, [pc, #140]	; (8005924 <HAL_GPIO_Init+0x304>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ba:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <HAL_GPIO_Init+0x304>)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058c0:	4b18      	ldr	r3, [pc, #96]	; (8005924 <HAL_GPIO_Init+0x304>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058e4:	4a0f      	ldr	r2, [pc, #60]	; (8005924 <HAL_GPIO_Init+0x304>)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	2b0f      	cmp	r3, #15
 80058f4:	f67f aea2 	bls.w	800563c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	3724      	adds	r7, #36	; 0x24
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
 800590c:	40013800 	.word	0x40013800
 8005910:	40020000 	.word	0x40020000
 8005914:	40020400 	.word	0x40020400
 8005918:	40020800 	.word	0x40020800
 800591c:	40020c00 	.word	0x40020c00
 8005920:	40021000 	.word	0x40021000
 8005924:	40013c00 	.word	0x40013c00

08005928 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800593a:	2300      	movs	r3, #0
 800593c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e0bb      	b.n	8005abc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005944:	2201      	movs	r2, #1
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	4013      	ands	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	f040 80ab 	bne.w	8005ab6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005960:	4a5c      	ldr	r2, [pc, #368]	; (8005ad4 <HAL_GPIO_DeInit+0x1ac>)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	089b      	lsrs	r3, r3, #2
 8005966:	3302      	adds	r3, #2
 8005968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	220f      	movs	r2, #15
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a54      	ldr	r2, [pc, #336]	; (8005ad8 <HAL_GPIO_DeInit+0x1b0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d019      	beq.n	80059be <HAL_GPIO_DeInit+0x96>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a53      	ldr	r2, [pc, #332]	; (8005adc <HAL_GPIO_DeInit+0x1b4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_GPIO_DeInit+0x92>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a52      	ldr	r2, [pc, #328]	; (8005ae0 <HAL_GPIO_DeInit+0x1b8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00d      	beq.n	80059b6 <HAL_GPIO_DeInit+0x8e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a51      	ldr	r2, [pc, #324]	; (8005ae4 <HAL_GPIO_DeInit+0x1bc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d007      	beq.n	80059b2 <HAL_GPIO_DeInit+0x8a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a50      	ldr	r2, [pc, #320]	; (8005ae8 <HAL_GPIO_DeInit+0x1c0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d101      	bne.n	80059ae <HAL_GPIO_DeInit+0x86>
 80059aa:	2304      	movs	r3, #4
 80059ac:	e008      	b.n	80059c0 <HAL_GPIO_DeInit+0x98>
 80059ae:	2307      	movs	r3, #7
 80059b0:	e006      	b.n	80059c0 <HAL_GPIO_DeInit+0x98>
 80059b2:	2303      	movs	r3, #3
 80059b4:	e004      	b.n	80059c0 <HAL_GPIO_DeInit+0x98>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e002      	b.n	80059c0 <HAL_GPIO_DeInit+0x98>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <HAL_GPIO_DeInit+0x98>
 80059be:	2300      	movs	r3, #0
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	f002 0203 	and.w	r2, r2, #3
 80059c6:	0092      	lsls	r2, r2, #2
 80059c8:	4093      	lsls	r3, r2
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d132      	bne.n	8005a36 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80059d0:	4b46      	ldr	r3, [pc, #280]	; (8005aec <HAL_GPIO_DeInit+0x1c4>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	43db      	mvns	r3, r3
 80059d8:	4944      	ldr	r1, [pc, #272]	; (8005aec <HAL_GPIO_DeInit+0x1c4>)
 80059da:	4013      	ands	r3, r2
 80059dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80059de:	4b43      	ldr	r3, [pc, #268]	; (8005aec <HAL_GPIO_DeInit+0x1c4>)
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	4941      	ldr	r1, [pc, #260]	; (8005aec <HAL_GPIO_DeInit+0x1c4>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80059ec:	4b3f      	ldr	r3, [pc, #252]	; (8005aec <HAL_GPIO_DeInit+0x1c4>)
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	43db      	mvns	r3, r3
 80059f4:	493d      	ldr	r1, [pc, #244]	; (8005aec <HAL_GPIO_DeInit+0x1c4>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80059fa:	4b3c      	ldr	r3, [pc, #240]	; (8005aec <HAL_GPIO_DeInit+0x1c4>)
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	493a      	ldr	r1, [pc, #232]	; (8005aec <HAL_GPIO_DeInit+0x1c4>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	220f      	movs	r2, #15
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005a18:	4a2e      	ldr	r2, [pc, #184]	; (8005ad4 <HAL_GPIO_DeInit+0x1ac>)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	089b      	lsrs	r3, r3, #2
 8005a1e:	3302      	adds	r3, #2
 8005a20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	43da      	mvns	r2, r3
 8005a28:	482a      	ldr	r0, [pc, #168]	; (8005ad4 <HAL_GPIO_DeInit+0x1ac>)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	089b      	lsrs	r3, r3, #2
 8005a2e:	400a      	ands	r2, r1
 8005a30:	3302      	adds	r3, #2
 8005a32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	2103      	movs	r1, #3
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	43db      	mvns	r3, r3
 8005a46:	401a      	ands	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	08da      	lsrs	r2, r3, #3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3208      	adds	r2, #8
 8005a54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	220f      	movs	r2, #15
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	08d2      	lsrs	r2, r2, #3
 8005a6c:	4019      	ands	r1, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3208      	adds	r2, #8
 8005a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	2103      	movs	r1, #3
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	43db      	mvns	r3, r3
 8005a86:	401a      	ands	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	2101      	movs	r1, #1
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	fa01 f303 	lsl.w	r3, r1, r3
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	2103      	movs	r1, #3
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b0f      	cmp	r3, #15
 8005ac0:	f67f af40 	bls.w	8005944 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40013800 	.word	0x40013800
 8005ad8:	40020000 	.word	0x40020000
 8005adc:	40020400 	.word	0x40020400
 8005ae0:	40020800 	.word	0x40020800
 8005ae4:	40020c00 	.word	0x40020c00
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40013c00 	.word	0x40013c00

08005af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	887b      	ldrh	r3, [r7, #2]
 8005b02:	4013      	ands	r3, r2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	e001      	b.n	8005b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	807b      	strh	r3, [r7, #2]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b30:	787b      	ldrb	r3, [r7, #1]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b36:	887a      	ldrh	r2, [r7, #2]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b3c:	e003      	b.n	8005b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b3e:	887b      	ldrh	r3, [r7, #2]
 8005b40:	041a      	lsls	r2, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	619a      	str	r2, [r3, #24]
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b5e:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d006      	beq.n	8005b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b6a:	4a05      	ldr	r2, [pc, #20]	; (8005b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fd fa4e 	bl	8003014 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40013c00 	.word	0x40013c00

08005b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e12b      	b.n	8005dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fd fb26 	bl	80031fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2224      	movs	r2, #36	; 0x24
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005be8:	f003 f822 	bl	8008c30 <HAL_RCC_GetPCLK1Freq>
 8005bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	4a81      	ldr	r2, [pc, #516]	; (8005df8 <HAL_I2C_Init+0x274>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d807      	bhi.n	8005c08 <HAL_I2C_Init+0x84>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a80      	ldr	r2, [pc, #512]	; (8005dfc <HAL_I2C_Init+0x278>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	bf94      	ite	ls
 8005c00:	2301      	movls	r3, #1
 8005c02:	2300      	movhi	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e006      	b.n	8005c16 <HAL_I2C_Init+0x92>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a7d      	ldr	r2, [pc, #500]	; (8005e00 <HAL_I2C_Init+0x27c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bf94      	ite	ls
 8005c10:	2301      	movls	r3, #1
 8005c12:	2300      	movhi	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e0e7      	b.n	8005dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4a78      	ldr	r2, [pc, #480]	; (8005e04 <HAL_I2C_Init+0x280>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	0c9b      	lsrs	r3, r3, #18
 8005c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4a6a      	ldr	r2, [pc, #424]	; (8005df8 <HAL_I2C_Init+0x274>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d802      	bhi.n	8005c58 <HAL_I2C_Init+0xd4>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	3301      	adds	r3, #1
 8005c56:	e009      	b.n	8005c6c <HAL_I2C_Init+0xe8>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c5e:	fb02 f303 	mul.w	r3, r2, r3
 8005c62:	4a69      	ldr	r2, [pc, #420]	; (8005e08 <HAL_I2C_Init+0x284>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	099b      	lsrs	r3, r3, #6
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	495c      	ldr	r1, [pc, #368]	; (8005df8 <HAL_I2C_Init+0x274>)
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	d819      	bhi.n	8005cc0 <HAL_I2C_Init+0x13c>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1e59      	subs	r1, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ca0:	400b      	ands	r3, r1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <HAL_I2C_Init+0x138>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1e59      	subs	r1, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cba:	e051      	b.n	8005d60 <HAL_I2C_Init+0x1dc>
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	e04f      	b.n	8005d60 <HAL_I2C_Init+0x1dc>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d111      	bne.n	8005cec <HAL_I2C_Init+0x168>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1e58      	subs	r0, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6859      	ldr	r1, [r3, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	440b      	add	r3, r1
 8005cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	e012      	b.n	8005d12 <HAL_I2C_Init+0x18e>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1e58      	subs	r0, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	0099      	lsls	r1, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d02:	3301      	adds	r3, #1
 8005d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_I2C_Init+0x196>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e022      	b.n	8005d60 <HAL_I2C_Init+0x1dc>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10e      	bne.n	8005d40 <HAL_I2C_Init+0x1bc>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1e58      	subs	r0, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	440b      	add	r3, r1
 8005d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d34:	3301      	adds	r3, #1
 8005d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3e:	e00f      	b.n	8005d60 <HAL_I2C_Init+0x1dc>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1e58      	subs	r0, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6859      	ldr	r1, [r3, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	0099      	lsls	r1, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d56:	3301      	adds	r3, #1
 8005d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	6809      	ldr	r1, [r1, #0]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6911      	ldr	r1, [r2, #16]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68d2      	ldr	r2, [r2, #12]
 8005d9a:	4311      	orrs	r1, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	000186a0 	.word	0x000186a0
 8005dfc:	001e847f 	.word	0x001e847f
 8005e00:	003d08ff 	.word	0x003d08ff
 8005e04:	431bde83 	.word	0x431bde83
 8005e08:	10624dd3 	.word	0x10624dd3

08005e0c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e021      	b.n	8005e62 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2224      	movs	r2, #36	; 0x24
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0201 	bic.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fd fa28 	bl	800328c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	461a      	mov	r2, r3
 8005e78:	460b      	mov	r3, r1
 8005e7a:	817b      	strh	r3, [r7, #10]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e80:	f7fd fe6a 	bl	8003b58 <HAL_GetTick>
 8005e84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	f040 80e0 	bne.w	8006054 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2319      	movs	r3, #25
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4970      	ldr	r1, [pc, #448]	; (8006060 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fd86 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e0d3      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_I2C_Master_Transmit+0x50>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0cc      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d007      	beq.n	8005ee2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2221      	movs	r2, #33	; 0x21
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2210      	movs	r2, #16
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	893a      	ldrh	r2, [r7, #8]
 8005f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4a50      	ldr	r2, [pc, #320]	; (8006064 <HAL_I2C_Master_Transmit+0x1f8>)
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f24:	8979      	ldrh	r1, [r7, #10]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	6a3a      	ldr	r2, [r7, #32]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fbf0 	bl	8006710 <I2C_MasterRequestWrite>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e08d      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f50:	e066      	b.n	8006020 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	6a39      	ldr	r1, [r7, #32]
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 fe00 	bl	8006b5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00d      	beq.n	8005f7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d107      	bne.n	8005f7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e06b      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d11b      	bne.n	8005ff4 <HAL_I2C_Master_Transmit+0x188>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d017      	beq.n	8005ff4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	6a39      	ldr	r1, [r7, #32]
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fdf0 	bl	8006bde <I2C_WaitOnBTFFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00d      	beq.n	8006020 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006008:	2b04      	cmp	r3, #4
 800600a:	d107      	bne.n	800601c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e01a      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d194      	bne.n	8005f52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	00100002 	.word	0x00100002
 8006064:	ffff0000 	.word	0xffff0000

08006068 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08c      	sub	sp, #48	; 0x30
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	607a      	str	r2, [r7, #4]
 8006072:	461a      	mov	r2, r3
 8006074:	460b      	mov	r3, r1
 8006076:	817b      	strh	r3, [r7, #10]
 8006078:	4613      	mov	r3, r2
 800607a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800607c:	f7fd fd6c 	bl	8003b58 <HAL_GetTick>
 8006080:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b20      	cmp	r3, #32
 800608c:	f040 820b 	bne.w	80064a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	2319      	movs	r3, #25
 8006096:	2201      	movs	r2, #1
 8006098:	497c      	ldr	r1, [pc, #496]	; (800628c <HAL_I2C_Master_Receive+0x224>)
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fc88 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
 80060a8:	e1fe      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_I2C_Master_Receive+0x50>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e1f7      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d007      	beq.n	80060de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0201 	orr.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2222      	movs	r2, #34	; 0x22
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2210      	movs	r2, #16
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	893a      	ldrh	r2, [r7, #8]
 800610e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4a5c      	ldr	r2, [pc, #368]	; (8006290 <HAL_I2C_Master_Receive+0x228>)
 800611e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006120:	8979      	ldrh	r1, [r7, #10]
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fb74 	bl	8006814 <I2C_MasterRequestRead>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e1b8      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	d113      	bne.n	8006166 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613e:	2300      	movs	r3, #0
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	623b      	str	r3, [r7, #32]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	623b      	str	r3, [r7, #32]
 8006152:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e18c      	b.n	8006480 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616a:	2b01      	cmp	r3, #1
 800616c:	d11b      	bne.n	80061a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	61fb      	str	r3, [r7, #28]
 8006192:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	e16c      	b.n	8006480 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d11b      	bne.n	80061e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ce:	2300      	movs	r3, #0
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	e14c      	b.n	8006480 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800620c:	e138      	b.n	8006480 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006212:	2b03      	cmp	r3, #3
 8006214:	f200 80f1 	bhi.w	80063fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621c:	2b01      	cmp	r3, #1
 800621e:	d123      	bne.n	8006268 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fd1b 	bl	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e139      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006266:	e10b      	b.n	8006480 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626c:	2b02      	cmp	r3, #2
 800626e:	d14e      	bne.n	800630e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	2200      	movs	r2, #0
 8006278:	4906      	ldr	r1, [pc, #24]	; (8006294 <HAL_I2C_Master_Receive+0x22c>)
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fb98 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d008      	beq.n	8006298 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e10e      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
 800628a:	bf00      	nop
 800628c:	00100002 	.word	0x00100002
 8006290:	ffff0000 	.word	0xffff0000
 8006294:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800630c:	e0b8      	b.n	8006480 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	2200      	movs	r2, #0
 8006316:	4966      	ldr	r1, [pc, #408]	; (80064b0 <HAL_I2C_Master_Receive+0x448>)
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fb49 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0bf      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	2200      	movs	r2, #0
 8006372:	494f      	ldr	r1, [pc, #316]	; (80064b0 <HAL_I2C_Master_Receive+0x448>)
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fb1b 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e091      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063f8:	e042      	b.n	8006480 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fc2e 	bl	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e04c      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b01      	subs	r3, #1
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b04      	cmp	r3, #4
 800644c:	d118      	bne.n	8006480 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29b      	uxth	r3, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006484:	2b00      	cmp	r3, #0
 8006486:	f47f aec2 	bne.w	800620e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e000      	b.n	80064a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
  }
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3728      	adds	r7, #40	; 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	00010004 	.word	0x00010004

080064b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	; 0x28
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	460b      	mov	r3, r1
 80064c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80064c4:	f7fd fb48 	bl	8003b58 <HAL_GetTick>
 80064c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	f040 8111 	bne.w	80066fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	2319      	movs	r3, #25
 80064e2:	2201      	movs	r2, #1
 80064e4:	4988      	ldr	r1, [pc, #544]	; (8006708 <HAL_I2C_IsDeviceReady+0x254>)
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fa62 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80064f2:	2302      	movs	r3, #2
 80064f4:	e104      	b.n	8006700 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_I2C_IsDeviceReady+0x50>
 8006500:	2302      	movs	r3, #2
 8006502:	e0fd      	b.n	8006700 <HAL_I2C_IsDeviceReady+0x24c>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b01      	cmp	r3, #1
 8006518:	d007      	beq.n	800652a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006538:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2224      	movs	r2, #36	; 0x24
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a70      	ldr	r2, [pc, #448]	; (800670c <HAL_I2C_IsDeviceReady+0x258>)
 800654c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2200      	movs	r2, #0
 8006566:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 fa20 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00d      	beq.n	8006592 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006584:	d103      	bne.n	800658e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e0b6      	b.n	8006700 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006592:	897b      	ldrh	r3, [r7, #10]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80065a2:	f7fd fad9 	bl	8003b58 <HAL_GetTick>
 80065a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80065d6:	e025      	b.n	8006624 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065d8:	f7fd fabe 	bl	8003b58 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d302      	bcc.n	80065ee <HAL_I2C_IsDeviceReady+0x13a>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d103      	bne.n	80065f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	22a0      	movs	r2, #160	; 0xa0
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b02      	cmp	r3, #2
 8006602:	bf0c      	ite	eq
 8006604:	2301      	moveq	r3, #1
 8006606:	2300      	movne	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661a:	bf0c      	ite	eq
 800661c:	2301      	moveq	r3, #1
 800661e:	2300      	movne	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2ba0      	cmp	r3, #160	; 0xa0
 800662e:	d005      	beq.n	800663c <HAL_I2C_IsDeviceReady+0x188>
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d102      	bne.n	800663c <HAL_I2C_IsDeviceReady+0x188>
 8006636:	7dbb      	ldrb	r3, [r7, #22]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0cd      	beq.n	80065d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b02      	cmp	r3, #2
 8006650:	d129      	bne.n	80066a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006660:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	2319      	movs	r3, #25
 800667e:	2201      	movs	r2, #1
 8006680:	4921      	ldr	r1, [pc, #132]	; (8006708 <HAL_I2C_IsDeviceReady+0x254>)
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 f994 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e036      	b.n	8006700 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e02c      	b.n	8006700 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	2319      	movs	r3, #25
 80066c6:	2201      	movs	r2, #1
 80066c8:	490f      	ldr	r1, [pc, #60]	; (8006708 <HAL_I2C_IsDeviceReady+0x254>)
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f970 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e012      	b.n	8006700 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	3301      	adds	r3, #1
 80066de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	f4ff af32 	bcc.w	800654e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80066fe:	2302      	movs	r3, #2
  }
}
 8006700:	4618      	mov	r0, r3
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	00100002 	.word	0x00100002
 800670c:	ffff0000 	.word	0xffff0000

08006710 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	460b      	mov	r3, r1
 800671e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d006      	beq.n	800673a <I2C_MasterRequestWrite+0x2a>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d003      	beq.n	800673a <I2C_MasterRequestWrite+0x2a>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006738:	d108      	bne.n	800674c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e00b      	b.n	8006764 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	2b12      	cmp	r3, #18
 8006752:	d107      	bne.n	8006764 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f91d 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00d      	beq.n	8006798 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678a:	d103      	bne.n	8006794 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e035      	b.n	8006804 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067a0:	d108      	bne.n	80067b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067a2:	897b      	ldrh	r3, [r7, #10]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067b0:	611a      	str	r2, [r3, #16]
 80067b2:	e01b      	b.n	80067ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067b4:	897b      	ldrh	r3, [r7, #10]
 80067b6:	11db      	asrs	r3, r3, #7
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 0306 	and.w	r3, r3, #6
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f063 030f 	orn	r3, r3, #15
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	490e      	ldr	r1, [pc, #56]	; (800680c <I2C_MasterRequestWrite+0xfc>)
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f943 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e010      	b.n	8006804 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80067e2:	897b      	ldrh	r3, [r7, #10]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	4907      	ldr	r1, [pc, #28]	; (8006810 <I2C_MasterRequestWrite+0x100>)
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f933 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	00010008 	.word	0x00010008
 8006810:	00010002 	.word	0x00010002

08006814 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	460b      	mov	r3, r1
 8006822:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006838:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d006      	beq.n	800684e <I2C_MasterRequestRead+0x3a>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d003      	beq.n	800684e <I2C_MasterRequestRead+0x3a>
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800684c:	d108      	bne.n	8006860 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e00b      	b.n	8006878 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006864:	2b11      	cmp	r3, #17
 8006866:	d107      	bne.n	8006878 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006876:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f893 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00d      	beq.n	80068ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800689e:	d103      	bne.n	80068a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e079      	b.n	80069a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b4:	d108      	bne.n	80068c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	611a      	str	r2, [r3, #16]
 80068c6:	e05f      	b.n	8006988 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068c8:	897b      	ldrh	r3, [r7, #10]
 80068ca:	11db      	asrs	r3, r3, #7
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	f003 0306 	and.w	r3, r3, #6
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f063 030f 	orn	r3, r3, #15
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4930      	ldr	r1, [pc, #192]	; (80069a8 <I2C_MasterRequestRead+0x194>)
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f8b9 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e054      	b.n	80069a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068f6:	897b      	ldrh	r3, [r7, #10]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	4929      	ldr	r1, [pc, #164]	; (80069ac <I2C_MasterRequestRead+0x198>)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f8a9 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e044      	b.n	80069a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800693a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f831 	bl	80069b0 <I2C_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00d      	beq.n	8006970 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006962:	d103      	bne.n	800696c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e017      	b.n	80069a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006970:	897b      	ldrh	r3, [r7, #10]
 8006972:	11db      	asrs	r3, r3, #7
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 0306 	and.w	r3, r3, #6
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f063 030e 	orn	r3, r3, #14
 8006980:	b2da      	uxtb	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	4907      	ldr	r1, [pc, #28]	; (80069ac <I2C_MasterRequestRead+0x198>)
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f865 	bl	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	00010008 	.word	0x00010008
 80069ac:	00010002 	.word	0x00010002

080069b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069c0:	e025      	b.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d021      	beq.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ca:	f7fd f8c5 	bl	8003b58 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d116      	bne.n	8006a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f043 0220 	orr.w	r2, r3, #32
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e023      	b.n	8006a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10d      	bne.n	8006a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4013      	ands	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	e00c      	b.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	43da      	mvns	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	bf0c      	ite	eq
 8006a46:	2301      	moveq	r3, #1
 8006a48:	2300      	movne	r3, #0
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d0b6      	beq.n	80069c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a6c:	e051      	b.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7c:	d123      	bne.n	8006ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	f043 0204 	orr.w	r2, r3, #4
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e046      	b.n	8006b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006acc:	d021      	beq.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ace:	f7fd f843 	bl	8003b58 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d302      	bcc.n	8006ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d116      	bne.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e020      	b.n	8006b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	0c1b      	lsrs	r3, r3, #16
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10c      	bne.n	8006b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	43da      	mvns	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4013      	ands	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	e00b      	b.n	8006b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	43da      	mvns	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4013      	ands	r3, r2
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d18d      	bne.n	8006a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b68:	e02d      	b.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f8ce 	bl	8006d0c <I2C_IsAcknowledgeFailed>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e02d      	b.n	8006bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d021      	beq.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b82:	f7fc ffe9 	bl	8003b58 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d116      	bne.n	8006bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb2:	f043 0220 	orr.w	r2, r3, #32
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e007      	b.n	8006bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d1ca      	bne.n	8006b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bea:	e02d      	b.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f88d 	bl	8006d0c <I2C_IsAcknowledgeFailed>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e02d      	b.n	8006c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d021      	beq.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c04:	f7fc ffa8 	bl	8003b58 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d302      	bcc.n	8006c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d116      	bne.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e007      	b.n	8006c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d1ca      	bne.n	8006bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c6c:	e042      	b.n	8006cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d119      	bne.n	8006cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0210 	mvn.w	r2, #16
 8006c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e029      	b.n	8006d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb0:	f7fc ff52 	bl	8003b58 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d302      	bcc.n	8006cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d116      	bne.n	8006cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e007      	b.n	8006d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d1b5      	bne.n	8006c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d22:	d11b      	bne.n	8006d5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	f043 0204 	orr.w	r2, r3, #4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6c:	b08f      	sub	sp, #60	; 0x3c
 8006d6e:	af0a      	add	r7, sp, #40	; 0x28
 8006d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e10f      	b.n	8006f9c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f013 ffce 	bl	801ad38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2203      	movs	r2, #3
 8006da0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f006 fc45 	bl	800d64a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	603b      	str	r3, [r7, #0]
 8006dc6:	687e      	ldr	r6, [r7, #4]
 8006dc8:	466d      	mov	r5, sp
 8006dca:	f106 0410 	add.w	r4, r6, #16
 8006dce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006dd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006dda:	e885 0003 	stmia.w	r5, {r0, r1}
 8006dde:	1d33      	adds	r3, r6, #4
 8006de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006de2:	6838      	ldr	r0, [r7, #0]
 8006de4:	f006 fb1c 	bl	800d420 <USB_CoreInit>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e0d0      	b.n	8006f9c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f006 fc33 	bl	800d66c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
 8006e0a:	e04a      	b.n	8006ea2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e0c:	7bfa      	ldrb	r2, [r7, #15]
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	333d      	adds	r3, #61	; 0x3d
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e20:	7bfa      	ldrb	r2, [r7, #15]
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	333c      	adds	r3, #60	; 0x3c
 8006e30:	7bfa      	ldrb	r2, [r7, #15]
 8006e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e34:	7bfa      	ldrb	r2, [r7, #15]
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	b298      	uxth	r0, r3
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	3344      	adds	r3, #68	; 0x44
 8006e48:	4602      	mov	r2, r0
 8006e4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e4c:	7bfa      	ldrb	r2, [r7, #15]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	3340      	adds	r3, #64	; 0x40
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e60:	7bfa      	ldrb	r2, [r7, #15]
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	3348      	adds	r3, #72	; 0x48
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e74:	7bfa      	ldrb	r2, [r7, #15]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	334c      	adds	r3, #76	; 0x4c
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e88:	7bfa      	ldrb	r2, [r7, #15]
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	3354      	adds	r3, #84	; 0x54
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	73fb      	strb	r3, [r7, #15]
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d3af      	bcc.n	8006e0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	e044      	b.n	8006f3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006eb2:	7bfa      	ldrb	r2, [r7, #15]
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ec8:	7bfa      	ldrb	r2, [r7, #15]
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006eda:	7bfa      	ldrb	r2, [r7, #15]
 8006edc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ede:	7bfa      	ldrb	r2, [r7, #15]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ef4:	7bfa      	ldrb	r2, [r7, #15]
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f0a:	7bfa      	ldrb	r2, [r7, #15]
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f20:	7bfa      	ldrb	r2, [r7, #15]
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
 8006f3c:	7bfa      	ldrb	r2, [r7, #15]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d3b5      	bcc.n	8006eb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	687e      	ldr	r6, [r7, #4]
 8006f4e:	466d      	mov	r5, sp
 8006f50:	f106 0410 	add.w	r4, r6, #16
 8006f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f60:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f64:	1d33      	adds	r3, r6, #4
 8006f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f68:	6838      	ldr	r0, [r7, #0]
 8006f6a:	f006 fbcb 	bl	800d704 <USB_DevInit>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e00d      	b.n	8006f9c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f007 fd69 	bl	800ea6c <USB_DevDisconnect>

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fa4 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e015      	b.n	8006fe2 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2203      	movs	r2, #3
 8006fba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f007 fcbc 	bl	800e940 <USB_StopDevice>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e007      	b.n	8006fe2 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f013 ff04 	bl	801ade0 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_PCD_Start+0x1c>
 8007002:	2302      	movs	r3, #2
 8007004:	e020      	b.n	8007048 <HAL_PCD_Start+0x5e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	2b01      	cmp	r3, #1
 8007014:	d109      	bne.n	800702a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800701a:	2b01      	cmp	r3, #1
 800701c:	d005      	beq.n	800702a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f006 fafa 	bl	800d628 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f007 fcf6 	bl	800ea2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_PCD_Stop+0x1c>
 8007068:	2302      	movs	r3, #2
 800706a:	e026      	b.n	80070ba <HAL_PCD_Stop+0x6a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4618      	mov	r0, r3
 800707a:	f006 fae6 	bl	800d64a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f007 fcf2 	bl	800ea6c <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2110      	movs	r1, #16
 800708e:	4618      	mov	r0, r3
 8007090:	f006 fc9c 	bl	800d9cc <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	2b01      	cmp	r3, #1
 800709a:	d109      	bne.n	80070b0 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d005      	beq.n	80070b0 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80070c2:	b590      	push	{r4, r7, lr}
 80070c4:	b08d      	sub	sp, #52	; 0x34
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f007 fd7b 	bl	800ebd4 <USB_GetMode>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f040 848a 	bne.w	80079fa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f007 fcdf 	bl	800eaae <USB_ReadInterrupts>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 8480 	beq.w	80079f8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	0a1b      	lsrs	r3, r3, #8
 8007102:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4618      	mov	r0, r3
 8007112:	f007 fccc 	bl	800eaae <USB_ReadInterrupts>
 8007116:	4603      	mov	r3, r0
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d107      	bne.n	8007130 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695a      	ldr	r2, [r3, #20]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f002 0202 	and.w	r2, r2, #2
 800712e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f007 fcba 	bl	800eaae <USB_ReadInterrupts>
 800713a:	4603      	mov	r3, r0
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b10      	cmp	r3, #16
 8007142:	d161      	bne.n	8007208 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 0210 	bic.w	r2, r2, #16
 8007152:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f003 020f 	and.w	r2, r3, #15
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4413      	add	r3, r2
 8007170:	3304      	adds	r3, #4
 8007172:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	0c5b      	lsrs	r3, r3, #17
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	2b02      	cmp	r3, #2
 800717e:	d124      	bne.n	80071ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d035      	beq.n	80071f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	091b      	lsrs	r3, r3, #4
 8007194:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800719a:	b29b      	uxth	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	6a38      	ldr	r0, [r7, #32]
 80071a0:	f007 faa2 	bl	800e6e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	091b      	lsrs	r3, r3, #4
 80071ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b0:	441a      	add	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6a1a      	ldr	r2, [r3, #32]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071c2:	441a      	add	r2, r3
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	621a      	str	r2, [r3, #32]
 80071c8:	e016      	b.n	80071f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	0c5b      	lsrs	r3, r3, #17
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	2b06      	cmp	r3, #6
 80071d4:	d110      	bne.n	80071f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071dc:	2208      	movs	r2, #8
 80071de:	4619      	mov	r1, r3
 80071e0:	6a38      	ldr	r0, [r7, #32]
 80071e2:	f007 fa81 	bl	800e6e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6a1a      	ldr	r2, [r3, #32]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	091b      	lsrs	r3, r3, #4
 80071ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071f2:	441a      	add	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0210 	orr.w	r2, r2, #16
 8007206:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f007 fc4e 	bl	800eaae <USB_ReadInterrupts>
 8007212:	4603      	mov	r3, r0
 8007214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007218:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800721c:	f040 80a7 	bne.w	800736e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4618      	mov	r0, r3
 800722a:	f007 fc53 	bl	800ead4 <USB_ReadDevAllOutEpInterrupt>
 800722e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007230:	e099      	b.n	8007366 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 808e 	beq.w	800735a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f007 fc77 	bl	800eb3c <USB_ReadDevOutEPInterrupt>
 800724e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	461a      	mov	r2, r3
 8007268:	2301      	movs	r3, #1
 800726a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800726c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fef0 	bl	8008054 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	461a      	mov	r2, r3
 800728c:	2308      	movs	r3, #8
 800728e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 ffc6 	bl	8008224 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d008      	beq.n	80072b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	461a      	mov	r2, r3
 80072b0:	2310      	movs	r3, #16
 80072b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d030      	beq.n	8007320 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c6:	2b80      	cmp	r3, #128	; 0x80
 80072c8:	d109      	bne.n	80072de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80072de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e0:	4613      	mov	r3, r2
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	4413      	add	r3, r2
 80072f0:	3304      	adds	r3, #4
 80072f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	78db      	ldrb	r3, [r3, #3]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d108      	bne.n	800730e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2200      	movs	r2, #0
 8007300:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	b2db      	uxtb	r3, r3
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f013 fe3b 	bl	801af84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731a:	461a      	mov	r2, r3
 800731c:	2302      	movs	r3, #2
 800731e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	461a      	mov	r2, r3
 8007338:	2320      	movs	r3, #32
 800733a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	461a      	mov	r2, r3
 8007354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007358:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	3301      	adds	r3, #1
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	085b      	lsrs	r3, r3, #1
 8007364:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	2b00      	cmp	r3, #0
 800736a:	f47f af62 	bne.w	8007232 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f007 fb9b 	bl	800eaae <USB_ReadInterrupts>
 8007378:	4603      	mov	r3, r0
 800737a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800737e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007382:	f040 80db 	bne.w	800753c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f007 fbbc 	bl	800eb08 <USB_ReadDevAllInEpInterrupt>
 8007390:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007396:	e0cd      	b.n	8007534 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80c2 	beq.w	8007528 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f007 fbe2 	bl	800eb78 <USB_ReadDevInEPInterrupt>
 80073b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d057      	beq.n	8007470 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	2201      	movs	r2, #1
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	43db      	mvns	r3, r3
 80073da:	69f9      	ldr	r1, [r7, #28]
 80073dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073e0:	4013      	ands	r3, r2
 80073e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f0:	461a      	mov	r2, r3
 80073f2:	2301      	movs	r3, #1
 80073f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d132      	bne.n	8007464 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	4613      	mov	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	334c      	adds	r3, #76	; 0x4c
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007414:	4613      	mov	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4403      	add	r3, r0
 800741e:	3348      	adds	r3, #72	; 0x48
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4419      	add	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007428:	4613      	mov	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4403      	add	r3, r0
 8007432:	334c      	adds	r3, #76	; 0x4c
 8007434:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	d113      	bne.n	8007464 <HAL_PCD_IRQHandler+0x3a2>
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007440:	4613      	mov	r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	440b      	add	r3, r1
 800744a:	3354      	adds	r3, #84	; 0x54
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d108      	bne.n	8007464 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800745c:	461a      	mov	r2, r3
 800745e:	2101      	movs	r1, #1
 8007460:	f007 fbea 	bl	800ec38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f013 fd05 	bl	801ae7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007486:	461a      	mov	r2, r3
 8007488:	2308      	movs	r3, #8
 800748a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	2b00      	cmp	r3, #0
 8007494:	d008      	beq.n	80074a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a2:	461a      	mov	r2, r3
 80074a4:	2310      	movs	r3, #16
 80074a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074be:	461a      	mov	r2, r3
 80074c0:	2340      	movs	r3, #64	; 0x40
 80074c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d023      	beq.n	8007516 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80074ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074d0:	6a38      	ldr	r0, [r7, #32]
 80074d2:	f006 fa7b 	bl	800d9cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80074d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d8:	4613      	mov	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	3338      	adds	r3, #56	; 0x38
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	78db      	ldrb	r3, [r3, #3]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d108      	bne.n	8007504 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2200      	movs	r2, #0
 80074f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f013 fd52 	bl	801afa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	461a      	mov	r2, r3
 8007512:	2302      	movs	r3, #2
 8007514:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fd08 	bl	8007f38 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	3301      	adds	r3, #1
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	f47f af2e 	bne.w	8007398 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f007 fab4 	bl	800eaae <USB_ReadInterrupts>
 8007546:	4603      	mov	r3, r0
 8007548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800754c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007550:	d122      	bne.n	8007598 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800756c:	2b01      	cmp	r3, #1
 800756e:	d108      	bne.n	8007582 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007578:	2100      	movs	r1, #0
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fef0 	bl	8008360 <HAL_PCDEx_LPM_Callback>
 8007580:	e002      	b.n	8007588 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f013 fcf0 	bl	801af68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695a      	ldr	r2, [r3, #20]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f007 fa86 	bl	800eaae <USB_ReadInterrupts>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ac:	d112      	bne.n	80075d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d102      	bne.n	80075c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f013 fcac 	bl	801af1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695a      	ldr	r2, [r3, #20]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80075d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f007 fa68 	bl	800eaae <USB_ReadInterrupts>
 80075de:	4603      	mov	r3, r0
 80075e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e8:	f040 80b7 	bne.w	800775a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2110      	movs	r1, #16
 8007606:	4618      	mov	r0, r3
 8007608:	f006 f9e0 	bl	800d9cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007610:	e046      	b.n	80076a0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761e:	461a      	mov	r2, r3
 8007620:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007624:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007636:	0151      	lsls	r1, r2, #5
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	440a      	add	r2, r1
 800763c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007640:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007644:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	461a      	mov	r2, r3
 8007654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007658:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007674:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007678:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007694:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007698:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	3301      	adds	r3, #1
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d3b3      	bcc.n	8007612 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80076bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d016      	beq.n	80076f4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d6:	f043 030b 	orr.w	r3, r3, #11
 80076da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ec:	f043 030b 	orr.w	r3, r3, #11
 80076f0:	6453      	str	r3, [r2, #68]	; 0x44
 80076f2:	e015      	b.n	8007720 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	69fa      	ldr	r2, [r7, #28]
 80076fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007702:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007706:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800770a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800771a:	f043 030b 	orr.w	r3, r3, #11
 800771e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800772e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007732:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007744:	461a      	mov	r2, r3
 8007746:	f007 fa77 	bl	800ec38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f007 f9a5 	bl	800eaae <USB_ReadInterrupts>
 8007764:	4603      	mov	r3, r0
 8007766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800776a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776e:	d124      	bne.n	80077ba <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f007 fa3b 	bl	800ebf0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f006 f9a1 	bl	800dac6 <USB_GetDevSpeed>
 8007784:	4603      	mov	r3, r0
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681c      	ldr	r4, [r3, #0]
 8007790:	f001 fa42 	bl	8008c18 <HAL_RCC_GetHCLKFreq>
 8007794:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800779a:	b2db      	uxtb	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	4620      	mov	r0, r4
 80077a0:	f005 fea0 	bl	800d4e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f013 fb90 	bl	801aeca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695a      	ldr	r2, [r3, #20]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80077b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f007 f975 	bl	800eaae <USB_ReadInterrupts>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	d10a      	bne.n	80077e4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f013 fb6d 	bl	801aeae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	695a      	ldr	r2, [r3, #20]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f002 0208 	and.w	r2, r2, #8
 80077e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f007 f960 	bl	800eaae <USB_ReadInterrupts>
 80077ee:	4603      	mov	r3, r0
 80077f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f4:	2b80      	cmp	r3, #128	; 0x80
 80077f6:	d122      	bne.n	800783e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007804:	2301      	movs	r3, #1
 8007806:	627b      	str	r3, [r7, #36]	; 0x24
 8007808:	e014      	b.n	8007834 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780e:	4613      	mov	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d105      	bne.n	800782e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	b2db      	uxtb	r3, r3
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb27 	bl	8007e7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	3301      	adds	r3, #1
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783a:	429a      	cmp	r2, r3
 800783c:	d3e5      	bcc.n	800780a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f007 f933 	bl	800eaae <USB_ReadInterrupts>
 8007848:	4603      	mov	r3, r0
 800784a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800784e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007852:	d13b      	bne.n	80078cc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007854:	2301      	movs	r3, #1
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
 8007858:	e02b      	b.n	80078b2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786e:	4613      	mov	r3, r2
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	3340      	adds	r3, #64	; 0x40
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d115      	bne.n	80078ac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007880:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007882:	2b00      	cmp	r3, #0
 8007884:	da12      	bge.n	80078ac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788a:	4613      	mov	r3, r2
 800788c:	00db      	lsls	r3, r3, #3
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	440b      	add	r3, r1
 8007894:	333f      	adds	r3, #63	; 0x3f
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fae8 	bl	8007e7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	3301      	adds	r3, #1
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d3ce      	bcc.n	800785a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80078ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f007 f8ec 	bl	800eaae <USB_ReadInterrupts>
 80078d6:	4603      	mov	r3, r0
 80078d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078e0:	d155      	bne.n	800798e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078e2:	2301      	movs	r3, #1
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
 80078e6:	e045      	b.n	8007974 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fc:	4613      	mov	r3, r2
 80078fe:	00db      	lsls	r3, r3, #3
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d12e      	bne.n	800796e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007910:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007912:	2b00      	cmp	r3, #0
 8007914:	da2b      	bge.n	800796e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007922:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007926:	429a      	cmp	r2, r3
 8007928:	d121      	bne.n	800796e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792e:	4613      	mov	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	440b      	add	r3, r1
 8007938:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800796a:	6053      	str	r3, [r2, #4]
            break;
 800796c:	e007      	b.n	800797e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	3301      	adds	r3, #1
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797a:	429a      	cmp	r2, r3
 800797c:	d3b4      	bcc.n	80078e8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695a      	ldr	r2, [r3, #20]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800798c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f007 f88b 	bl	800eaae <USB_ReadInterrupts>
 8007998:	4603      	mov	r3, r0
 800799a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a2:	d10a      	bne.n	80079ba <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f013 fb11 	bl	801afcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	695a      	ldr	r2, [r3, #20]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80079b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f007 f875 	bl	800eaae <USB_ReadInterrupts>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f003 0304 	and.w	r3, r3, #4
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d115      	bne.n	80079fa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f013 fb01 	bl	801afe8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6859      	ldr	r1, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	e000      	b.n	80079fa <HAL_PCD_IRQHandler+0x938>
      return;
 80079f8:	bf00      	nop
    }
  }
}
 80079fa:	3734      	adds	r7, #52	; 0x34
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}

08007a00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_PCD_SetAddress+0x1a>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e013      	b.n	8007a42 <HAL_PCD_SetAddress+0x42>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f006 ffd3 	bl	800e9de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	4608      	mov	r0, r1
 8007a54:	4611      	mov	r1, r2
 8007a56:	461a      	mov	r2, r3
 8007a58:	4603      	mov	r3, r0
 8007a5a:	70fb      	strb	r3, [r7, #3]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	803b      	strh	r3, [r7, #0]
 8007a60:	4613      	mov	r3, r2
 8007a62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	da0f      	bge.n	8007a90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	f003 020f 	and.w	r2, r3, #15
 8007a76:	4613      	mov	r3, r2
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	3338      	adds	r3, #56	; 0x38
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4413      	add	r3, r2
 8007a84:	3304      	adds	r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	705a      	strb	r2, [r3, #1]
 8007a8e:	e00f      	b.n	8007ab0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	f003 020f 	and.w	r2, r3, #15
 8007a96:	4613      	mov	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	f003 030f 	and.w	r3, r3, #15
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007abc:	883a      	ldrh	r2, [r7, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	78ba      	ldrb	r2, [r7, #2]
 8007ac6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007ada:	78bb      	ldrb	r3, [r7, #2]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d102      	bne.n	8007ae6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_PCD_EP_Open+0xaa>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e00e      	b.n	8007b12 <HAL_PCD_EP_Open+0xc8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68f9      	ldr	r1, [r7, #12]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f006 f804 	bl	800db10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007b10:	7afb      	ldrb	r3, [r7, #11]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	da0f      	bge.n	8007b4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	f003 020f 	and.w	r2, r3, #15
 8007b34:	4613      	mov	r3, r2
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	3338      	adds	r3, #56	; 0x38
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	4413      	add	r3, r2
 8007b42:	3304      	adds	r3, #4
 8007b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	705a      	strb	r2, [r3, #1]
 8007b4c:	e00f      	b.n	8007b6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	f003 020f 	and.w	r2, r3, #15
 8007b54:	4613      	mov	r3, r2
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007b6e:	78fb      	ldrb	r3, [r7, #3]
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_PCD_EP_Close+0x6e>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e00e      	b.n	8007ba6 <HAL_PCD_EP_Close+0x8c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68f9      	ldr	r1, [r7, #12]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f006 f842 	bl	800dc20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b086      	sub	sp, #24
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
 8007bc0:	f003 020f 	and.w	r2, r3, #15
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2200      	movs	r2, #0
 8007bee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d102      	bne.n	8007c0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6979      	ldr	r1, [r7, #20]
 8007c22:	f006 fb21 	bl	800e268 <USB_EP0StartXfer>
 8007c26:	e008      	b.n	8007c3a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	f006 f8cf 	bl	800ddd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	f003 020f 	and.w	r2, r3, #15
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007c66:	681b      	ldr	r3, [r3, #0]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	607a      	str	r2, [r7, #4]
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	460b      	mov	r3, r1
 8007c82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	f003 020f 	and.w	r2, r3, #15
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	3338      	adds	r3, #56	; 0x38
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4413      	add	r3, r2
 8007c98:	3304      	adds	r3, #4
 8007c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2200      	movs	r2, #0
 8007cac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d102      	bne.n	8007cce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007cce:	7afb      	ldrb	r3, [r7, #11]
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6979      	ldr	r1, [r7, #20]
 8007ce6:	f006 fabf 	bl	800e268 <USB_EP0StartXfer>
 8007cea:	e008      	b.n	8007cfe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6818      	ldr	r0, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6979      	ldr	r1, [r7, #20]
 8007cfa:	f006 f86d 	bl	800ddd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	f003 020f 	and.w	r2, r3, #15
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d901      	bls.n	8007d26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e050      	b.n	8007dc8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	da0f      	bge.n	8007d4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	f003 020f 	and.w	r2, r3, #15
 8007d34:	4613      	mov	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	3338      	adds	r3, #56	; 0x38
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	3304      	adds	r3, #4
 8007d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	705a      	strb	r2, [r3, #1]
 8007d4c:	e00d      	b.n	8007d6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d4e:	78fa      	ldrb	r2, [r7, #3]
 8007d50:	4613      	mov	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	4413      	add	r3, r2
 8007d60:	3304      	adds	r3, #4
 8007d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_PCD_EP_SetStall+0x82>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e01e      	b.n	8007dc8 <HAL_PCD_EP_SetStall+0xc0>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f006 fcfd 	bl	800e798 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	b2d9      	uxtb	r1, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007db8:	461a      	mov	r2, r3
 8007dba:	f006 ff3d 	bl	800ec38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	f003 020f 	and.w	r2, r3, #15
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d901      	bls.n	8007dee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e042      	b.n	8007e74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	da0f      	bge.n	8007e16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	f003 020f 	and.w	r2, r3, #15
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	3338      	adds	r3, #56	; 0x38
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	4413      	add	r3, r2
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	705a      	strb	r2, [r3, #1]
 8007e14:	e00f      	b.n	8007e36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	f003 020f 	and.w	r2, r3, #15
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d101      	bne.n	8007e56 <HAL_PCD_EP_ClrStall+0x86>
 8007e52:	2302      	movs	r3, #2
 8007e54:	e00e      	b.n	8007e74 <HAL_PCD_EP_ClrStall+0xa4>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f006 fd05 	bl	800e874 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	da0c      	bge.n	8007eaa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	f003 020f 	and.w	r2, r3, #15
 8007e96:	4613      	mov	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	3338      	adds	r3, #56	; 0x38
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e00c      	b.n	8007ec4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	f003 020f 	and.w	r2, r3, #15
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68f9      	ldr	r1, [r7, #12]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f006 fb24 	bl	800e518 <USB_EPStopXfer>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_PCD_EP_Flush+0x1a>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e01b      	b.n	8007f30 <HAL_PCD_EP_Flush+0x52>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	da09      	bge.n	8007f1c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f005 fd59 	bl	800d9cc <USB_FlushTxFifo>
 8007f1a:	e004      	b.n	8007f26 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f005 fd87 	bl	800da34 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08a      	sub	sp, #40	; 0x28
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	3338      	adds	r3, #56	; 0x38
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1a      	ldr	r2, [r3, #32]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d901      	bls.n	8007f70 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e06c      	b.n	800804a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	699a      	ldr	r2, [r3, #24]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d902      	bls.n	8007f8c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	3303      	adds	r3, #3
 8007f90:	089b      	lsrs	r3, r3, #2
 8007f92:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f94:	e02b      	b.n	8007fee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	69fa      	ldr	r2, [r7, #28]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d902      	bls.n	8007fb2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	3303      	adds	r3, #3
 8007fb6:	089b      	lsrs	r3, r3, #2
 8007fb8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6919      	ldr	r1, [r3, #16]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6978      	ldr	r0, [r7, #20]
 8007fd2:	f006 fb4b 	bl	800e66c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	441a      	add	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1a      	ldr	r2, [r3, #32]
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	441a      	add	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	429a      	cmp	r2, r3
 8008002:	d809      	bhi.n	8008018 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1a      	ldr	r2, [r3, #32]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800800c:	429a      	cmp	r2, r3
 800800e:	d203      	bcs.n	8008018 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1be      	bne.n	8007f96 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	699a      	ldr	r2, [r3, #24]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	429a      	cmp	r2, r3
 8008022:	d811      	bhi.n	8008048 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	2201      	movs	r2, #1
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	43db      	mvns	r3, r3
 800803e:	6939      	ldr	r1, [r7, #16]
 8008040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008044:	4013      	ands	r3, r2
 8008046:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	333c      	adds	r3, #60	; 0x3c
 800806c:	3304      	adds	r3, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d17b      	bne.n	8008182 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b00      	cmp	r3, #0
 8008092:	d015      	beq.n	80080c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	4a61      	ldr	r2, [pc, #388]	; (800821c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008098:	4293      	cmp	r3, r2
 800809a:	f240 80b9 	bls.w	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80b3 	beq.w	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b6:	461a      	mov	r2, r3
 80080b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080bc:	6093      	str	r3, [r2, #8]
 80080be:	e0a7      	b.n	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d009      	beq.n	80080de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d6:	461a      	mov	r2, r3
 80080d8:	2320      	movs	r3, #32
 80080da:	6093      	str	r3, [r2, #8]
 80080dc:	e098      	b.n	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 8093 	bne.w	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	4a4b      	ldr	r2, [pc, #300]	; (800821c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d90f      	bls.n	8008112 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008108:	461a      	mov	r2, r3
 800810a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800810e:	6093      	str	r3, [r2, #8]
 8008110:	e07e      	b.n	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4613      	mov	r3, r2
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	4413      	add	r3, r2
 8008124:	3304      	adds	r3, #4
 8008126:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	69da      	ldr	r2, [r3, #28]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	0159      	lsls	r1, r3, #5
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	440b      	add	r3, r1
 8008134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d114      	bne.n	8008174 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800815c:	461a      	mov	r2, r3
 800815e:	2101      	movs	r1, #1
 8008160:	f006 fd6a 	bl	800ec38 <USB_EP0_OutStart>
 8008164:	e006      	b.n	8008174 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	441a      	add	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f012 fe62 	bl	801ae44 <HAL_PCD_DataOutStageCallback>
 8008180:	e046      	b.n	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	4a26      	ldr	r2, [pc, #152]	; (8008220 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d124      	bne.n	80081d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a0:	461a      	mov	r2, r3
 80081a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a6:	6093      	str	r3, [r2, #8]
 80081a8:	e032      	b.n	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f003 0320 	and.w	r3, r3, #32
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d008      	beq.n	80081c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c0:	461a      	mov	r2, r3
 80081c2:	2320      	movs	r3, #32
 80081c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f012 fe39 	bl	801ae44 <HAL_PCD_DataOutStageCallback>
 80081d2:	e01d      	b.n	8008210 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d114      	bne.n	8008204 <PCD_EP_OutXfrComplete_int+0x1b0>
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	4613      	mov	r3, r2
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d108      	bne.n	8008204 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80081fc:	461a      	mov	r2, r3
 80081fe:	2100      	movs	r1, #0
 8008200:	f006 fd1a 	bl	800ec38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f012 fe1a 	bl	801ae44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	4f54300a 	.word	0x4f54300a
 8008220:	4f54310a 	.word	0x4f54310a

08008224 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	333c      	adds	r3, #60	; 0x3c
 800823c:	3304      	adds	r3, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4a15      	ldr	r2, [pc, #84]	; (80082ac <PCD_EP_OutSetupPacket_int+0x88>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d90e      	bls.n	8008278 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008260:	2b00      	cmp	r3, #0
 8008262:	d009      	beq.n	8008278 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	461a      	mov	r2, r3
 8008272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008276:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f012 fdd1 	bl	801ae20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <PCD_EP_OutSetupPacket_int+0x88>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d90c      	bls.n	80082a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d108      	bne.n	80082a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008298:	461a      	mov	r2, r3
 800829a:	2101      	movs	r1, #1
 800829c:	f006 fccc 	bl	800ec38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	4f54300a 	.word	0x4f54300a

080082b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
 80082bc:	4613      	mov	r3, r2
 80082be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d107      	bne.n	80082de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80082ce:	883b      	ldrh	r3, [r7, #0]
 80082d0:	0419      	lsls	r1, r3, #16
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	430a      	orrs	r2, r1
 80082da:	629a      	str	r2, [r3, #40]	; 0x28
 80082dc:	e028      	b.n	8008330 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	0c1b      	lsrs	r3, r3, #16
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4413      	add	r3, r2
 80082ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80082ec:	2300      	movs	r3, #0
 80082ee:	73fb      	strb	r3, [r7, #15]
 80082f0:	e00d      	b.n	800830e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	3340      	adds	r3, #64	; 0x40
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	0c1b      	lsrs	r3, r3, #16
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	4413      	add	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	3301      	adds	r3, #1
 800830c:	73fb      	strb	r3, [r7, #15]
 800830e:	7bfa      	ldrb	r2, [r7, #15]
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	3b01      	subs	r3, #1
 8008314:	429a      	cmp	r2, r3
 8008316:	d3ec      	bcc.n	80082f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008318:	883b      	ldrh	r3, [r7, #0]
 800831a:	0418      	lsls	r0, r3, #16
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	3b01      	subs	r3, #1
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	4302      	orrs	r2, r0
 8008328:	3340      	adds	r3, #64	; 0x40
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	440b      	add	r3, r1
 800832e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	887a      	ldrh	r2, [r7, #2]
 8008350:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8008384:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <HAL_PWR_EnterSTOPMode+0x50>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f023 0203 	bic.w	r2, r3, #3
 800838c:	490e      	ldr	r1, [pc, #56]	; (80083c8 <HAL_PWR_EnterSTOPMode+0x50>)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4313      	orrs	r3, r2
 8008392:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008394:	4b0d      	ldr	r3, [pc, #52]	; (80083cc <HAL_PWR_EnterSTOPMode+0x54>)
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	4a0c      	ldr	r2, [pc, #48]	; (80083cc <HAL_PWR_EnterSTOPMode+0x54>)
 800839a:	f043 0304 	orr.w	r3, r3, #4
 800839e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80083a6:	bf30      	wfi
 80083a8:	e002      	b.n	80083b0 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80083aa:	bf40      	sev
    __WFE();
 80083ac:	bf20      	wfe
    __WFE();
 80083ae:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <HAL_PWR_EnterSTOPMode+0x54>)
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	4a05      	ldr	r2, [pc, #20]	; (80083cc <HAL_PWR_EnterSTOPMode+0x54>)
 80083b6:	f023 0304 	bic.w	r3, r3, #4
 80083ba:	6113      	str	r3, [r2, #16]
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	40007000 	.word	0x40007000
 80083cc:	e000ed00 	.word	0xe000ed00

080083d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e267      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d075      	beq.n	80084da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083ee:	4b88      	ldr	r3, [pc, #544]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 030c 	and.w	r3, r3, #12
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	d00c      	beq.n	8008414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083fa:	4b85      	ldr	r3, [pc, #532]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008402:	2b08      	cmp	r3, #8
 8008404:	d112      	bne.n	800842c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008406:	4b82      	ldr	r3, [pc, #520]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800840e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008412:	d10b      	bne.n	800842c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008414:	4b7e      	ldr	r3, [pc, #504]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d05b      	beq.n	80084d8 <HAL_RCC_OscConfig+0x108>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d157      	bne.n	80084d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e242      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008434:	d106      	bne.n	8008444 <HAL_RCC_OscConfig+0x74>
 8008436:	4b76      	ldr	r3, [pc, #472]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a75      	ldr	r2, [pc, #468]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 800843c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	e01d      	b.n	8008480 <HAL_RCC_OscConfig+0xb0>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800844c:	d10c      	bne.n	8008468 <HAL_RCC_OscConfig+0x98>
 800844e:	4b70      	ldr	r3, [pc, #448]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a6f      	ldr	r2, [pc, #444]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	4b6d      	ldr	r3, [pc, #436]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a6c      	ldr	r2, [pc, #432]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	e00b      	b.n	8008480 <HAL_RCC_OscConfig+0xb0>
 8008468:	4b69      	ldr	r3, [pc, #420]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a68      	ldr	r2, [pc, #416]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 800846e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	4b66      	ldr	r3, [pc, #408]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a65      	ldr	r2, [pc, #404]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 800847a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800847e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d013      	beq.n	80084b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008488:	f7fb fb66 	bl	8003b58 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008490:	f7fb fb62 	bl	8003b58 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b64      	cmp	r3, #100	; 0x64
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e207      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084a2:	4b5b      	ldr	r3, [pc, #364]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0f0      	beq.n	8008490 <HAL_RCC_OscConfig+0xc0>
 80084ae:	e014      	b.n	80084da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b0:	f7fb fb52 	bl	8003b58 <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084b8:	f7fb fb4e 	bl	8003b58 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b64      	cmp	r3, #100	; 0x64
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e1f3      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084ca:	4b51      	ldr	r3, [pc, #324]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1f0      	bne.n	80084b8 <HAL_RCC_OscConfig+0xe8>
 80084d6:	e000      	b.n	80084da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d063      	beq.n	80085ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084e6:	4b4a      	ldr	r3, [pc, #296]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 030c 	and.w	r3, r3, #12
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084f2:	4b47      	ldr	r3, [pc, #284]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084fa:	2b08      	cmp	r3, #8
 80084fc:	d11c      	bne.n	8008538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084fe:	4b44      	ldr	r3, [pc, #272]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d116      	bne.n	8008538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800850a:	4b41      	ldr	r3, [pc, #260]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <HAL_RCC_OscConfig+0x152>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d001      	beq.n	8008522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e1c7      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008522:	4b3b      	ldr	r3, [pc, #236]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	4937      	ldr	r1, [pc, #220]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008532:	4313      	orrs	r3, r2
 8008534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008536:	e03a      	b.n	80085ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d020      	beq.n	8008582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008540:	4b34      	ldr	r3, [pc, #208]	; (8008614 <HAL_RCC_OscConfig+0x244>)
 8008542:	2201      	movs	r2, #1
 8008544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008546:	f7fb fb07 	bl	8003b58 <HAL_GetTick>
 800854a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800854c:	e008      	b.n	8008560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800854e:	f7fb fb03 	bl	8003b58 <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	2b02      	cmp	r3, #2
 800855a:	d901      	bls.n	8008560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	e1a8      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008560:	4b2b      	ldr	r3, [pc, #172]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0f0      	beq.n	800854e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800856c:	4b28      	ldr	r3, [pc, #160]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	4925      	ldr	r1, [pc, #148]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 800857c:	4313      	orrs	r3, r2
 800857e:	600b      	str	r3, [r1, #0]
 8008580:	e015      	b.n	80085ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008582:	4b24      	ldr	r3, [pc, #144]	; (8008614 <HAL_RCC_OscConfig+0x244>)
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008588:	f7fb fae6 	bl	8003b58 <HAL_GetTick>
 800858c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800858e:	e008      	b.n	80085a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008590:	f7fb fae2 	bl	8003b58 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e187      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085a2:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1f0      	bne.n	8008590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d036      	beq.n	8008628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <HAL_RCC_OscConfig+0x248>)
 80085c4:	2201      	movs	r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c8:	f7fb fac6 	bl	8003b58 <HAL_GetTick>
 80085cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ce:	e008      	b.n	80085e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085d0:	f7fb fac2 	bl	8003b58 <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e167      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085e2:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <HAL_RCC_OscConfig+0x240>)
 80085e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0f0      	beq.n	80085d0 <HAL_RCC_OscConfig+0x200>
 80085ee:	e01b      	b.n	8008628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085f0:	4b09      	ldr	r3, [pc, #36]	; (8008618 <HAL_RCC_OscConfig+0x248>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085f6:	f7fb faaf 	bl	8003b58 <HAL_GetTick>
 80085fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085fc:	e00e      	b.n	800861c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085fe:	f7fb faab 	bl	8003b58 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d907      	bls.n	800861c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e150      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
 8008610:	40023800 	.word	0x40023800
 8008614:	42470000 	.word	0x42470000
 8008618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800861c:	4b88      	ldr	r3, [pc, #544]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 800861e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1ea      	bne.n	80085fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8097 	beq.w	8008764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008636:	2300      	movs	r3, #0
 8008638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800863a:	4b81      	ldr	r3, [pc, #516]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10f      	bne.n	8008666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008646:	2300      	movs	r3, #0
 8008648:	60bb      	str	r3, [r7, #8]
 800864a:	4b7d      	ldr	r3, [pc, #500]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 800864c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864e:	4a7c      	ldr	r2, [pc, #496]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 8008650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008654:	6413      	str	r3, [r2, #64]	; 0x40
 8008656:	4b7a      	ldr	r3, [pc, #488]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800865e:	60bb      	str	r3, [r7, #8]
 8008660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008662:	2301      	movs	r3, #1
 8008664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008666:	4b77      	ldr	r3, [pc, #476]	; (8008844 <HAL_RCC_OscConfig+0x474>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866e:	2b00      	cmp	r3, #0
 8008670:	d118      	bne.n	80086a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008672:	4b74      	ldr	r3, [pc, #464]	; (8008844 <HAL_RCC_OscConfig+0x474>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a73      	ldr	r2, [pc, #460]	; (8008844 <HAL_RCC_OscConfig+0x474>)
 8008678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800867c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800867e:	f7fb fa6b 	bl	8003b58 <HAL_GetTick>
 8008682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008684:	e008      	b.n	8008698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008686:	f7fb fa67 	bl	8003b58 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d901      	bls.n	8008698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e10c      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008698:	4b6a      	ldr	r3, [pc, #424]	; (8008844 <HAL_RCC_OscConfig+0x474>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0f0      	beq.n	8008686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d106      	bne.n	80086ba <HAL_RCC_OscConfig+0x2ea>
 80086ac:	4b64      	ldr	r3, [pc, #400]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b0:	4a63      	ldr	r2, [pc, #396]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086b2:	f043 0301 	orr.w	r3, r3, #1
 80086b6:	6713      	str	r3, [r2, #112]	; 0x70
 80086b8:	e01c      	b.n	80086f4 <HAL_RCC_OscConfig+0x324>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2b05      	cmp	r3, #5
 80086c0:	d10c      	bne.n	80086dc <HAL_RCC_OscConfig+0x30c>
 80086c2:	4b5f      	ldr	r3, [pc, #380]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c6:	4a5e      	ldr	r2, [pc, #376]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086c8:	f043 0304 	orr.w	r3, r3, #4
 80086cc:	6713      	str	r3, [r2, #112]	; 0x70
 80086ce:	4b5c      	ldr	r3, [pc, #368]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d2:	4a5b      	ldr	r2, [pc, #364]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086d4:	f043 0301 	orr.w	r3, r3, #1
 80086d8:	6713      	str	r3, [r2, #112]	; 0x70
 80086da:	e00b      	b.n	80086f4 <HAL_RCC_OscConfig+0x324>
 80086dc:	4b58      	ldr	r3, [pc, #352]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e0:	4a57      	ldr	r2, [pc, #348]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086e2:	f023 0301 	bic.w	r3, r3, #1
 80086e6:	6713      	str	r3, [r2, #112]	; 0x70
 80086e8:	4b55      	ldr	r3, [pc, #340]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ec:	4a54      	ldr	r2, [pc, #336]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80086ee:	f023 0304 	bic.w	r3, r3, #4
 80086f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d015      	beq.n	8008728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086fc:	f7fb fa2c 	bl	8003b58 <HAL_GetTick>
 8008700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008702:	e00a      	b.n	800871a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008704:	f7fb fa28 	bl	8003b58 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008712:	4293      	cmp	r3, r2
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e0cb      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800871a:	4b49      	ldr	r3, [pc, #292]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0ee      	beq.n	8008704 <HAL_RCC_OscConfig+0x334>
 8008726:	e014      	b.n	8008752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008728:	f7fb fa16 	bl	8003b58 <HAL_GetTick>
 800872c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800872e:	e00a      	b.n	8008746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008730:	f7fb fa12 	bl	8003b58 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	f241 3288 	movw	r2, #5000	; 0x1388
 800873e:	4293      	cmp	r3, r2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e0b5      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008746:	4b3e      	ldr	r3, [pc, #248]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1ee      	bne.n	8008730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d105      	bne.n	8008764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008758:	4b39      	ldr	r3, [pc, #228]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	4a38      	ldr	r2, [pc, #224]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 800875e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 80a1 	beq.w	80088b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800876e:	4b34      	ldr	r3, [pc, #208]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f003 030c 	and.w	r3, r3, #12
 8008776:	2b08      	cmp	r3, #8
 8008778:	d05c      	beq.n	8008834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d141      	bne.n	8008806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008782:	4b31      	ldr	r3, [pc, #196]	; (8008848 <HAL_RCC_OscConfig+0x478>)
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008788:	f7fb f9e6 	bl	8003b58 <HAL_GetTick>
 800878c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008790:	f7fb f9e2 	bl	8003b58 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e087      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a2:	4b27      	ldr	r3, [pc, #156]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1f0      	bne.n	8008790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69da      	ldr	r2, [r3, #28]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	019b      	lsls	r3, r3, #6
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	085b      	lsrs	r3, r3, #1
 80087c6:	3b01      	subs	r3, #1
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	431a      	orrs	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	491b      	ldr	r1, [pc, #108]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80087d4:	4313      	orrs	r3, r2
 80087d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087d8:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <HAL_RCC_OscConfig+0x478>)
 80087da:	2201      	movs	r2, #1
 80087dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087de:	f7fb f9bb 	bl	8003b58 <HAL_GetTick>
 80087e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087e4:	e008      	b.n	80087f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087e6:	f7fb f9b7 	bl	8003b58 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e05c      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087f8:	4b11      	ldr	r3, [pc, #68]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0f0      	beq.n	80087e6 <HAL_RCC_OscConfig+0x416>
 8008804:	e054      	b.n	80088b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008806:	4b10      	ldr	r3, [pc, #64]	; (8008848 <HAL_RCC_OscConfig+0x478>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800880c:	f7fb f9a4 	bl	8003b58 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008814:	f7fb f9a0 	bl	8003b58 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e045      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008826:	4b06      	ldr	r3, [pc, #24]	; (8008840 <HAL_RCC_OscConfig+0x470>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f0      	bne.n	8008814 <HAL_RCC_OscConfig+0x444>
 8008832:	e03d      	b.n	80088b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d107      	bne.n	800884c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e038      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
 8008840:	40023800 	.word	0x40023800
 8008844:	40007000 	.word	0x40007000
 8008848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800884c:	4b1b      	ldr	r3, [pc, #108]	; (80088bc <HAL_RCC_OscConfig+0x4ec>)
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d028      	beq.n	80088ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008864:	429a      	cmp	r2, r3
 8008866:	d121      	bne.n	80088ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008872:	429a      	cmp	r2, r3
 8008874:	d11a      	bne.n	80088ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800887c:	4013      	ands	r3, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008884:	4293      	cmp	r3, r2
 8008886:	d111      	bne.n	80088ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008892:	085b      	lsrs	r3, r3, #1
 8008894:	3b01      	subs	r3, #1
 8008896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008898:	429a      	cmp	r2, r3
 800889a:	d107      	bne.n	80088ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e000      	b.n	80088b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40023800 	.word	0x40023800

080088c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0cc      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088d4:	4b68      	ldr	r3, [pc, #416]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d90c      	bls.n	80088fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088e2:	4b65      	ldr	r3, [pc, #404]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	b2d2      	uxtb	r2, r2
 80088e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ea:	4b63      	ldr	r3, [pc, #396]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d001      	beq.n	80088fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e0b8      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d020      	beq.n	800894a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008914:	4b59      	ldr	r3, [pc, #356]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	4a58      	ldr	r2, [pc, #352]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 800891a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800891e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d005      	beq.n	8008938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800892c:	4b53      	ldr	r3, [pc, #332]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	4a52      	ldr	r2, [pc, #328]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008938:	4b50      	ldr	r3, [pc, #320]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	494d      	ldr	r1, [pc, #308]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008946:	4313      	orrs	r3, r2
 8008948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d044      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d107      	bne.n	800896e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800895e:	4b47      	ldr	r3, [pc, #284]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d119      	bne.n	800899e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e07f      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d003      	beq.n	800897e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800897a:	2b03      	cmp	r3, #3
 800897c:	d107      	bne.n	800898e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800897e:	4b3f      	ldr	r3, [pc, #252]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e06f      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898e:	4b3b      	ldr	r3, [pc, #236]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e067      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800899e:	4b37      	ldr	r3, [pc, #220]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f023 0203 	bic.w	r2, r3, #3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	4934      	ldr	r1, [pc, #208]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089b0:	f7fb f8d2 	bl	8003b58 <HAL_GetTick>
 80089b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089b6:	e00a      	b.n	80089ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b8:	f7fb f8ce 	bl	8003b58 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e04f      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ce:	4b2b      	ldr	r3, [pc, #172]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f003 020c 	and.w	r2, r3, #12
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	429a      	cmp	r2, r3
 80089de:	d1eb      	bne.n	80089b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089e0:	4b25      	ldr	r3, [pc, #148]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d20c      	bcs.n	8008a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ee:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	b2d2      	uxtb	r2, r2
 80089f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f6:	4b20      	ldr	r3, [pc, #128]	; (8008a78 <HAL_RCC_ClockConfig+0x1b8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0307 	and.w	r3, r3, #7
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d001      	beq.n	8008a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e032      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a14:	4b19      	ldr	r3, [pc, #100]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	4916      	ldr	r1, [pc, #88]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a32:	4b12      	ldr	r3, [pc, #72]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	490e      	ldr	r1, [pc, #56]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a46:	f000 f821 	bl	8008a8c <HAL_RCC_GetSysClockFreq>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <HAL_RCC_ClockConfig+0x1bc>)
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	091b      	lsrs	r3, r3, #4
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	490a      	ldr	r1, [pc, #40]	; (8008a80 <HAL_RCC_ClockConfig+0x1c0>)
 8008a58:	5ccb      	ldrb	r3, [r1, r3]
 8008a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5e:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <HAL_RCC_ClockConfig+0x1c4>)
 8008a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a62:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <HAL_RCC_ClockConfig+0x1c8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fb f832 	bl	8003ad0 <HAL_InitTick>

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40023c00 	.word	0x40023c00
 8008a7c:	40023800 	.word	0x40023800
 8008a80:	08021adc 	.word	0x08021adc
 8008a84:	20000010 	.word	0x20000010
 8008a88:	20000014 	.word	0x20000014

08008a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a90:	b090      	sub	sp, #64	; 0x40
 8008a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	637b      	str	r3, [r7, #52]	; 0x34
 8008a98:	2300      	movs	r3, #0
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008aa4:	4b59      	ldr	r3, [pc, #356]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 030c 	and.w	r3, r3, #12
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	d00d      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0x40>
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	f200 80a1 	bhi.w	8008bf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d003      	beq.n	8008ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008abe:	e09b      	b.n	8008bf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ac0:	4b53      	ldr	r3, [pc, #332]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ac2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008ac4:	e09b      	b.n	8008bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ac6:	4b53      	ldr	r3, [pc, #332]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008aca:	e098      	b.n	8008bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008acc:	4b4f      	ldr	r3, [pc, #316]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ad6:	4b4d      	ldr	r3, [pc, #308]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d028      	beq.n	8008b34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ae2:	4b4a      	ldr	r3, [pc, #296]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	099b      	lsrs	r3, r3, #6
 8008ae8:	2200      	movs	r2, #0
 8008aea:	623b      	str	r3, [r7, #32]
 8008aec:	627a      	str	r2, [r7, #36]	; 0x24
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008af4:	2100      	movs	r1, #0
 8008af6:	4b47      	ldr	r3, [pc, #284]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8008af8:	fb03 f201 	mul.w	r2, r3, r1
 8008afc:	2300      	movs	r3, #0
 8008afe:	fb00 f303 	mul.w	r3, r0, r3
 8008b02:	4413      	add	r3, r2
 8008b04:	4a43      	ldr	r2, [pc, #268]	; (8008c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8008b06:	fba0 1202 	umull	r1, r2, r0, r2
 8008b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b0c:	460a      	mov	r2, r1
 8008b0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b12:	4413      	add	r3, r2
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b18:	2200      	movs	r2, #0
 8008b1a:	61bb      	str	r3, [r7, #24]
 8008b1c:	61fa      	str	r2, [r7, #28]
 8008b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008b26:	f7f8 f8c7 	bl	8000cb8 <__aeabi_uldivmod>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4613      	mov	r3, r2
 8008b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b32:	e053      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b34:	4b35      	ldr	r3, [pc, #212]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	099b      	lsrs	r3, r3, #6
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	617a      	str	r2, [r7, #20]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008b46:	f04f 0b00 	mov.w	fp, #0
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	465b      	mov	r3, fp
 8008b4e:	f04f 0000 	mov.w	r0, #0
 8008b52:	f04f 0100 	mov.w	r1, #0
 8008b56:	0159      	lsls	r1, r3, #5
 8008b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b5c:	0150      	lsls	r0, r2, #5
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	ebb2 080a 	subs.w	r8, r2, sl
 8008b66:	eb63 090b 	sbc.w	r9, r3, fp
 8008b6a:	f04f 0200 	mov.w	r2, #0
 8008b6e:	f04f 0300 	mov.w	r3, #0
 8008b72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b7e:	ebb2 0408 	subs.w	r4, r2, r8
 8008b82:	eb63 0509 	sbc.w	r5, r3, r9
 8008b86:	f04f 0200 	mov.w	r2, #0
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	00eb      	lsls	r3, r5, #3
 8008b90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b94:	00e2      	lsls	r2, r4, #3
 8008b96:	4614      	mov	r4, r2
 8008b98:	461d      	mov	r5, r3
 8008b9a:	eb14 030a 	adds.w	r3, r4, sl
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	eb45 030b 	adc.w	r3, r5, fp
 8008ba4:	607b      	str	r3, [r7, #4]
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	f04f 0300 	mov.w	r3, #0
 8008bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	028b      	lsls	r3, r1, #10
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	028a      	lsls	r2, r1, #10
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	60bb      	str	r3, [r7, #8]
 8008bca:	60fa      	str	r2, [r7, #12]
 8008bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bd0:	f7f8 f872 	bl	8000cb8 <__aeabi_uldivmod>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4613      	mov	r3, r2
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	0c1b      	lsrs	r3, r3, #16
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	3301      	adds	r3, #1
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008bf6:	e002      	b.n	8008bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bf8:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8008bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3740      	adds	r7, #64	; 0x40
 8008c04:	46bd      	mov	sp, r7
 8008c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40023800 	.word	0x40023800
 8008c10:	00f42400 	.word	0x00f42400
 8008c14:	017d7840 	.word	0x017d7840

08008c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c1c:	4b03      	ldr	r3, [pc, #12]	; (8008c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	20000010 	.word	0x20000010

08008c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c34:	f7ff fff0 	bl	8008c18 <HAL_RCC_GetHCLKFreq>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	0a9b      	lsrs	r3, r3, #10
 8008c40:	f003 0307 	and.w	r3, r3, #7
 8008c44:	4903      	ldr	r1, [pc, #12]	; (8008c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c46:	5ccb      	ldrb	r3, [r1, r3]
 8008c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40023800 	.word	0x40023800
 8008c54:	08021aec 	.word	0x08021aec

08008c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c5c:	f7ff ffdc 	bl	8008c18 <HAL_RCC_GetHCLKFreq>
 8008c60:	4602      	mov	r2, r0
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	0b5b      	lsrs	r3, r3, #13
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	4903      	ldr	r1, [pc, #12]	; (8008c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c6e:	5ccb      	ldrb	r3, [r1, r3]
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	40023800 	.word	0x40023800
 8008c7c:	08021aec 	.word	0x08021aec

08008c80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d105      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d035      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ca8:	4b67      	ldr	r3, [pc, #412]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cae:	f7fa ff53 	bl	8003b58 <HAL_GetTick>
 8008cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cb6:	f7fa ff4f 	bl	8003b58 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e0ba      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cc8:	4b60      	ldr	r3, [pc, #384]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1f0      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	019a      	lsls	r2, r3, #6
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	071b      	lsls	r3, r3, #28
 8008ce0:	495a      	ldr	r1, [pc, #360]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ce8:	4b57      	ldr	r3, [pc, #348]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008cea:	2201      	movs	r2, #1
 8008cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cee:	f7fa ff33 	bl	8003b58 <HAL_GetTick>
 8008cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cf4:	e008      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cf6:	f7fa ff2f 	bl	8003b58 <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d901      	bls.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e09a      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d08:	4b50      	ldr	r3, [pc, #320]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0f0      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8083 	beq.w	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d22:	2300      	movs	r3, #0
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	4b49      	ldr	r3, [pc, #292]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2a:	4a48      	ldr	r2, [pc, #288]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d30:	6413      	str	r3, [r2, #64]	; 0x40
 8008d32:	4b46      	ldr	r3, [pc, #280]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008d3e:	4b44      	ldr	r3, [pc, #272]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a43      	ldr	r2, [pc, #268]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d4a:	f7fa ff05 	bl	8003b58 <HAL_GetTick>
 8008d4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008d50:	e008      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008d52:	f7fa ff01 	bl	8003b58 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d901      	bls.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e06c      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008d64:	4b3a      	ldr	r3, [pc, #232]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0f0      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d70:	4b36      	ldr	r3, [pc, #216]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d02f      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d028      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d8e:	4b2f      	ldr	r3, [pc, #188]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d98:	4b2e      	ldr	r3, [pc, #184]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d9e:	4b2d      	ldr	r3, [pc, #180]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008da4:	4a29      	ldr	r2, [pc, #164]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008daa:	4b28      	ldr	r3, [pc, #160]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d114      	bne.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008db6:	f7fa fecf 	bl	8003b58 <HAL_GetTick>
 8008dba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dbc:	e00a      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dbe:	f7fa fecb 	bl	8003b58 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e034      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dd4:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0ee      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dec:	d10d      	bne.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008dee:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e02:	4912      	ldr	r1, [pc, #72]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	608b      	str	r3, [r1, #8]
 8008e08:	e005      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008e0a:	4b10      	ldr	r3, [pc, #64]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	4a0f      	ldr	r2, [pc, #60]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e14:	6093      	str	r3, [r2, #8]
 8008e16:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e22:	490a      	ldr	r1, [pc, #40]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0308 	and.w	r3, r3, #8
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	7c1a      	ldrb	r2, [r3, #16]
 8008e38:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008e3a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	42470068 	.word	0x42470068
 8008e4c:	40023800 	.word	0x40023800
 8008e50:	40007000 	.word	0x40007000
 8008e54:	42470e40 	.word	0x42470e40
 8008e58:	424711e0 	.word	0x424711e0

08008e5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e066      	b.n	8008f40 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7f5b      	ldrb	r3, [r3, #29]
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d105      	bne.n	8008e88 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7fa fa26 	bl	80032d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	22ca      	movs	r2, #202	; 0xca
 8008e94:	625a      	str	r2, [r3, #36]	; 0x24
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2253      	movs	r2, #83	; 0x53
 8008e9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fbce 	bl	8009640 <RTC_EnterInitMode>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d12c      	bne.n	8008f08 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	6812      	ldr	r2, [r2, #0]
 8008eb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6899      	ldr	r1, [r3, #8]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	68d2      	ldr	r2, [r2, #12]
 8008ee8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6919      	ldr	r1, [r3, #16]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	041a      	lsls	r2, r3, #16
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fbd5 	bl	80096ae <RTC_ExitInitMode>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d113      	bne.n	8008f36 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f1c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699a      	ldr	r2, [r3, #24]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	22ff      	movs	r2, #255	; 0xff
 8008f3c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	7f1b      	ldrb	r3, [r3, #28]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <HAL_RTC_SetTime+0x1c>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e087      	b.n	8009074 <HAL_RTC_SetTime+0x12c>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d126      	bne.n	8008fc4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d102      	bne.n	8008f8a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2200      	movs	r2, #0
 8008f88:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fbb2 	bl	80096f8 <RTC_ByteToBcd2>
 8008f94:	4603      	mov	r3, r0
 8008f96:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fbab 	bl	80096f8 <RTC_ByteToBcd2>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008fa6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	789b      	ldrb	r3, [r3, #2]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fba3 	bl	80096f8 <RTC_ByteToBcd2>
 8008fb2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fb4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	78db      	ldrb	r3, [r3, #3]
 8008fbc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	e018      	b.n	8008ff6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d102      	bne.n	8008fd8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	785b      	ldrb	r3, [r3, #1]
 8008fe2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008fe4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008fea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	78db      	ldrb	r3, [r3, #3]
 8008ff0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	22ca      	movs	r2, #202	; 0xca
 8008ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2253      	movs	r2, #83	; 0x53
 8009004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fb1a 	bl	8009640 <RTC_EnterInitMode>
 800900c:	4603      	mov	r3, r0
 800900e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009010:	7cfb      	ldrb	r3, [r7, #19]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d120      	bne.n	8009058 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009020:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009024:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009034:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6899      	ldr	r1, [r3, #8]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	431a      	orrs	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fb2d 	bl	80096ae <RTC_ExitInitMode>
 8009054:	4603      	mov	r3, r0
 8009056:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009058:	7cfb      	ldrb	r3, [r7, #19]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d102      	bne.n	8009064 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2201      	movs	r2, #1
 8009062:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	22ff      	movs	r2, #255	; 0xff
 800906a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	771a      	strb	r2, [r3, #28]

  return status;
 8009072:	7cfb      	ldrb	r3, [r7, #19]
}
 8009074:	4618      	mov	r0, r3
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	bd90      	pop	{r4, r7, pc}

0800907c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80090ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80090b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	0c1b      	lsrs	r3, r3, #16
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	0a1b      	lsrs	r3, r3, #8
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	0d9b      	lsrs	r3, r3, #22
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d11a      	bne.n	800912e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fb18 	bl	8009732 <RTC_Bcd2ToByte>
 8009102:	4603      	mov	r3, r0
 8009104:	461a      	mov	r2, r3
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fb0f 	bl	8009732 <RTC_Bcd2ToByte>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	789b      	ldrb	r3, [r3, #2]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fb06 	bl	8009732 <RTC_Bcd2ToByte>
 8009126:	4603      	mov	r3, r0
 8009128:	461a      	mov	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009138:	b590      	push	{r4, r7, lr}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	7f1b      	ldrb	r3, [r3, #28]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <HAL_RTC_SetDate+0x1c>
 8009150:	2302      	movs	r3, #2
 8009152:	e071      	b.n	8009238 <HAL_RTC_SetDate+0x100>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2202      	movs	r2, #2
 800915e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10e      	bne.n	8009184 <HAL_RTC_SetDate+0x4c>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	f003 0310 	and.w	r3, r3, #16
 800916e:	2b00      	cmp	r3, #0
 8009170:	d008      	beq.n	8009184 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	785b      	ldrb	r3, [r3, #1]
 8009176:	f023 0310 	bic.w	r3, r3, #16
 800917a:	b2db      	uxtb	r3, r3
 800917c:	330a      	adds	r3, #10
 800917e:	b2da      	uxtb	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d11c      	bne.n	80091c4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	78db      	ldrb	r3, [r3, #3]
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fab2 	bl	80096f8 <RTC_ByteToBcd2>
 8009194:	4603      	mov	r3, r0
 8009196:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	785b      	ldrb	r3, [r3, #1]
 800919c:	4618      	mov	r0, r3
 800919e:	f000 faab 	bl	80096f8 <RTC_ByteToBcd2>
 80091a2:	4603      	mov	r3, r0
 80091a4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091a6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	789b      	ldrb	r3, [r3, #2]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 faa3 	bl	80096f8 <RTC_ByteToBcd2>
 80091b2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091b4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091be:	4313      	orrs	r3, r2
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	e00e      	b.n	80091e2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	78db      	ldrb	r3, [r3, #3]
 80091c8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80091d0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80091d6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	22ca      	movs	r2, #202	; 0xca
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2253      	movs	r2, #83	; 0x53
 80091f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 fa24 	bl	8009640 <RTC_EnterInitMode>
 80091f8:	4603      	mov	r3, r0
 80091fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80091fc:	7cfb      	ldrb	r3, [r7, #19]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10c      	bne.n	800921c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800920c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009210:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fa4b 	bl	80096ae <RTC_ExitInitMode>
 8009218:	4603      	mov	r3, r0
 800921a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800921c:	7cfb      	ldrb	r3, [r7, #19]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d102      	bne.n	8009228 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	22ff      	movs	r2, #255	; 0xff
 800922e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	771a      	strb	r2, [r3, #28]

  return status;
 8009236:	7cfb      	ldrb	r3, [r7, #19]
}
 8009238:	4618      	mov	r0, r3
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	bd90      	pop	{r4, r7, pc}

08009240 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800925a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800925e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	0c1b      	lsrs	r3, r3, #16
 8009264:	b2da      	uxtb	r2, r3
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 031f 	and.w	r3, r3, #31
 8009274:	b2da      	uxtb	r2, r3
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009282:	b2da      	uxtb	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	0b5b      	lsrs	r3, r3, #13
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f003 0307 	and.w	r3, r3, #7
 8009292:	b2da      	uxtb	r2, r3
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d11a      	bne.n	80092d4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	78db      	ldrb	r3, [r3, #3]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fa45 	bl	8009732 <RTC_Bcd2ToByte>
 80092a8:	4603      	mov	r3, r0
 80092aa:	461a      	mov	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	785b      	ldrb	r3, [r3, #1]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 fa3c 	bl	8009732 <RTC_Bcd2ToByte>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	789b      	ldrb	r3, [r3, #2]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 fa33 	bl	8009732 <RTC_Bcd2ToByte>
 80092cc:	4603      	mov	r3, r0
 80092ce:	461a      	mov	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
	...

080092e0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80092e0:	b590      	push	{r4, r7, lr}
 80092e2:	b089      	sub	sp, #36	; 0x24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80092ec:	4b9a      	ldr	r3, [pc, #616]	; (8009558 <HAL_RTC_SetAlarm_IT+0x278>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a9a      	ldr	r2, [pc, #616]	; (800955c <HAL_RTC_SetAlarm_IT+0x27c>)
 80092f2:	fba2 2303 	umull	r2, r3, r2, r3
 80092f6:	0adb      	lsrs	r3, r3, #11
 80092f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092fc:	fb02 f303 	mul.w	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	7f1b      	ldrb	r3, [r3, #28]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <HAL_RTC_SetAlarm_IT+0x36>
 8009312:	2302      	movs	r3, #2
 8009314:	e11c      	b.n	8009550 <HAL_RTC_SetAlarm_IT+0x270>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2202      	movs	r2, #2
 8009320:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d137      	bne.n	8009398 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009332:	2b00      	cmp	r3, #0
 8009334:	d102      	bne.n	800933c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	2200      	movs	r2, #0
 800933a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	4618      	mov	r0, r3
 8009342:	f000 f9d9 	bl	80096f8 <RTC_ByteToBcd2>
 8009346:	4603      	mov	r3, r0
 8009348:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	785b      	ldrb	r3, [r3, #1]
 800934e:	4618      	mov	r0, r3
 8009350:	f000 f9d2 	bl	80096f8 <RTC_ByteToBcd2>
 8009354:	4603      	mov	r3, r0
 8009356:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009358:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	789b      	ldrb	r3, [r3, #2]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f9ca 	bl	80096f8 <RTC_ByteToBcd2>
 8009364:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009366:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	78db      	ldrb	r3, [r3, #3]
 800936e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009370:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f9bc 	bl	80096f8 <RTC_ByteToBcd2>
 8009380:	4603      	mov	r3, r0
 8009382:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009384:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800938c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009392:	4313      	orrs	r3, r2
 8009394:	61fb      	str	r3, [r7, #28]
 8009396:	e023      	b.n	80093e0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d102      	bne.n	80093ac <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2200      	movs	r2, #0
 80093aa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	785b      	ldrb	r3, [r3, #1]
 80093b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093b8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093be:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	78db      	ldrb	r3, [r3, #3]
 80093c4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80093c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093ce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80093d0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80093d6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093dc:	4313      	orrs	r3, r2
 80093de:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80093e8:	4313      	orrs	r3, r2
 80093ea:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	22ca      	movs	r2, #202	; 0xca
 80093f2:	625a      	str	r2, [r3, #36]	; 0x24
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2253      	movs	r2, #83	; 0x53
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009404:	d141      	bne.n	800948a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009414:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	b2da      	uxtb	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009426:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	1e5a      	subs	r2, r3, #1
 800942c:	617a      	str	r2, [r7, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10b      	bne.n	800944a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	22ff      	movs	r2, #255	; 0xff
 8009438:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2203      	movs	r2, #3
 800943e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e082      	b.n	8009550 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0e7      	beq.n	8009428 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009476:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	689a      	ldr	r2, [r3, #8]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009486:	609a      	str	r2, [r3, #8]
 8009488:	e04b      	b.n	8009522 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009498:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80094aa:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80094ac:	4b2a      	ldr	r3, [pc, #168]	; (8009558 <HAL_RTC_SetAlarm_IT+0x278>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a2a      	ldr	r2, [pc, #168]	; (800955c <HAL_RTC_SetAlarm_IT+0x27c>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	0adb      	lsrs	r3, r3, #11
 80094b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094bc:	fb02 f303 	mul.w	r3, r2, r3
 80094c0:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	617a      	str	r2, [r7, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10b      	bne.n	80094e4 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	22ff      	movs	r2, #255	; 0xff
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2203      	movs	r2, #3
 80094d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e035      	b.n	8009550 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0e7      	beq.n	80094c2 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009510:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009520:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009522:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <HAL_RTC_SetAlarm_IT+0x280>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a0e      	ldr	r2, [pc, #56]	; (8009560 <HAL_RTC_SetAlarm_IT+0x280>)
 8009528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800952c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800952e:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <HAL_RTC_SetAlarm_IT+0x280>)
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	4a0b      	ldr	r2, [pc, #44]	; (8009560 <HAL_RTC_SetAlarm_IT+0x280>)
 8009534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009538:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	22ff      	movs	r2, #255	; 0xff
 8009540:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3724      	adds	r7, #36	; 0x24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd90      	pop	{r4, r7, pc}
 8009558:	20000010 	.word	0x20000010
 800955c:	10624dd3 	.word	0x10624dd3
 8009560:	40013c00 	.word	0x40013c00

08009564 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d012      	beq.n	80095a0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7f9 fd79 	bl	8003080 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	b2da      	uxtb	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800959e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d012      	beq.n	80095d4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f8d4 	bl	800976a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f462 7220 	orn	r2, r2, #640	; 0x280
 80095d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <HAL_RTC_AlarmIRQHandler+0x88>)
 80095d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80095da:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	775a      	strb	r2, [r3, #29]
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	40013c00 	.word	0x40013c00

080095f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800960a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800960c:	f7fa faa4 	bl	8003b58 <HAL_GetTick>
 8009610:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009612:	e009      	b.n	8009628 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009614:	f7fa faa0 	bl	8003b58 <HAL_GetTick>
 8009618:	4602      	mov	r2, r0
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009622:	d901      	bls.n	8009628 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e007      	b.n	8009638 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0ee      	beq.n	8009614 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965a:	2b00      	cmp	r3, #0
 800965c:	d122      	bne.n	80096a4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68da      	ldr	r2, [r3, #12]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800966c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800966e:	f7fa fa73 	bl	8003b58 <HAL_GetTick>
 8009672:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009674:	e00c      	b.n	8009690 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009676:	f7fa fa6f 	bl	8003b58 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009684:	d904      	bls.n	8009690 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2204      	movs	r2, #4
 800968a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969a:	2b00      	cmp	r3, #0
 800969c:	d102      	bne.n	80096a4 <RTC_EnterInitMode+0x64>
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d1e8      	bne.n	8009676 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 0320 	and.w	r3, r3, #32
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff ff89 	bl	80095f0 <HAL_RTC_WaitForSynchro>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d004      	beq.n	80096ee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2204      	movs	r2, #4
 80096e8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009706:	e005      	b.n	8009714 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	3301      	adds	r3, #1
 800970c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	3b0a      	subs	r3, #10
 8009712:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	2b09      	cmp	r3, #9
 8009718:	d8f6      	bhi.n	8009708 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800971a:	7bfb      	ldrb	r3, [r7, #15]
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	b2da      	uxtb	r2, r3
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	4313      	orrs	r3, r2
 8009724:	b2db      	uxtb	r3, r3
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	4603      	mov	r3, r0
 800973a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800973c:	2300      	movs	r3, #0
 800973e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	091b      	lsrs	r3, r3, #4
 8009744:	b2db      	uxtb	r3, r3
 8009746:	461a      	mov	r2, r3
 8009748:	0092      	lsls	r2, r2, #2
 800974a:	4413      	add	r3, r2
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	b2da      	uxtb	r2, r3
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	4413      	add	r3, r2
 800975c:	b2db      	uxtb	r3, r3
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009772:	bf00      	nop
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e022      	b.n	80097d6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d105      	bne.n	80097a8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7f9 fdca 	bl	800333c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2203      	movs	r2, #3
 80097ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f815 	bl	80097e0 <HAL_SD_InitCard>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e00a      	b.n	80097d6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80097e0:	b5b0      	push	{r4, r5, r7, lr}
 80097e2:	b08e      	sub	sp, #56	; 0x38
 80097e4:	af04      	add	r7, sp, #16
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80097f0:	2300      	movs	r3, #0
 80097f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80097f4:	2300      	movs	r3, #0
 80097f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80097fc:	2376      	movs	r3, #118	; 0x76
 80097fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681d      	ldr	r5, [r3, #0]
 8009804:	466c      	mov	r4, sp
 8009806:	f107 0314 	add.w	r3, r7, #20
 800980a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800980e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009812:	f107 0308 	add.w	r3, r7, #8
 8009816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009818:	4628      	mov	r0, r5
 800981a:	f003 f8cf 	bl	800c9bc <SDIO_Init>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e04f      	b.n	80098d0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009830:	4b29      	ldr	r3, [pc, #164]	; (80098d8 <HAL_SD_InitCard+0xf8>)
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4618      	mov	r0, r3
 800983c:	f003 f907 	bl	800ca4e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009840:	4b25      	ldr	r3, [pc, #148]	; (80098d8 <HAL_SD_InitCard+0xf8>)
 8009842:	2201      	movs	r2, #1
 8009844:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009846:	2002      	movs	r0, #2
 8009848:	f7fa f992 	bl	8003b70 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fe69 	bl	800a524 <SD_PowerON>
 8009852:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00b      	beq.n	8009872 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	431a      	orrs	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e02e      	b.n	80098d0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fd88 	bl	800a388 <SD_InitCard>
 8009878:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00b      	beq.n	8009898 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e01b      	b.n	80098d0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098a0:	4618      	mov	r0, r3
 80098a2:	f003 f966 	bl	800cb72 <SDMMC_CmdBlockLength>
 80098a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00f      	beq.n	80098ce <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <HAL_SD_InitCard+0xfc>)
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e000      	b.n	80098d0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3728      	adds	r7, #40	; 0x28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bdb0      	pop	{r4, r5, r7, pc}
 80098d8:	422580a0 	.word	0x422580a0
 80098dc:	004005ff 	.word	0x004005ff

080098e0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b092      	sub	sp, #72	; 0x48
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80098ee:	f7fa f933 	bl	8003b58 <HAL_GetTick>
 80098f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d107      	bne.n	8009912 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009906:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e1bd      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b01      	cmp	r3, #1
 800991c:	f040 81b0 	bne.w	8009c80 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	441a      	add	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009930:	429a      	cmp	r2, r3
 8009932:	d907      	bls.n	8009944 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e1a4      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2203      	movs	r2, #3
 8009948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2200      	movs	r2, #0
 8009952:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009958:	2b01      	cmp	r3, #1
 800995a:	d002      	beq.n	8009962 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	025b      	lsls	r3, r3, #9
 8009960:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009962:	f04f 33ff 	mov.w	r3, #4294967295
 8009966:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	025b      	lsls	r3, r3, #9
 800996c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800996e:	2390      	movs	r3, #144	; 0x90
 8009970:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009972:	2302      	movs	r3, #2
 8009974:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009976:	2300      	movs	r3, #0
 8009978:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800997a:	2301      	movs	r3, #1
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f107 0214 	add.w	r2, r7, #20
 8009986:	4611      	mov	r1, r2
 8009988:	4618      	mov	r0, r3
 800998a:	f003 f8c6 	bl	800cb1a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d90a      	bls.n	80099aa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2202      	movs	r2, #2
 8009998:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099a0:	4618      	mov	r0, r3
 80099a2:	f003 f92a 	bl	800cbfa <SDMMC_CmdReadMultiBlock>
 80099a6:	6478      	str	r0, [r7, #68]	; 0x44
 80099a8:	e009      	b.n	80099be <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099b6:	4618      	mov	r0, r3
 80099b8:	f003 f8fd 	bl	800cbb6 <SDMMC_CmdReadSingleBlock>
 80099bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80099be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d012      	beq.n	80099ea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a7a      	ldr	r2, [pc, #488]	; (8009bb4 <HAL_SD_ReadBlocks+0x2d4>)
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d2:	431a      	orrs	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e151      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80099ee:	e061      	b.n	8009ab4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d03c      	beq.n	8009a78 <HAL_SD_ReadBlocks+0x198>
 80099fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d039      	beq.n	8009a78 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009a04:	2300      	movs	r3, #0
 8009a06:	643b      	str	r3, [r7, #64]	; 0x40
 8009a08:	e033      	b.n	8009a72 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f002 ffff 	bl	800ca12 <SDIO_ReadFIFO>
 8009a14:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a20:	3301      	adds	r3, #1
 8009a22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a26:	3b01      	subs	r3, #1
 8009a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	0a1b      	lsrs	r3, r3, #8
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a32:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	3301      	adds	r3, #1
 8009a38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	0c1b      	lsrs	r3, r3, #16
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a52:	3b01      	subs	r3, #1
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a58:	0e1b      	lsrs	r3, r3, #24
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a62:	3301      	adds	r3, #1
 8009a64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a6e:	3301      	adds	r3, #1
 8009a70:	643b      	str	r3, [r7, #64]	; 0x40
 8009a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a74:	2b07      	cmp	r3, #7
 8009a76:	d9c8      	bls.n	8009a0a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009a78:	f7fa f86e 	bl	8003b58 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d902      	bls.n	8009a8e <HAL_SD_ReadBlocks+0x1ae>
 8009a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d112      	bne.n	8009ab4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a48      	ldr	r2, [pc, #288]	; (8009bb4 <HAL_SD_ReadBlocks+0x2d4>)
 8009a94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e0ec      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aba:	f240 332a 	movw	r3, #810	; 0x32a
 8009abe:	4013      	ands	r3, r2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d095      	beq.n	80099f0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d022      	beq.n	8009b18 <HAL_SD_ReadBlocks+0x238>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d91f      	bls.n	8009b18 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d01b      	beq.n	8009b18 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f003 f8ef 	bl	800ccc8 <SDMMC_CmdStopTransfer>
 8009aea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d012      	beq.n	8009b18 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a2f      	ldr	r2, [pc, #188]	; (8009bb4 <HAL_SD_ReadBlocks+0x2d4>)
 8009af8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b00:	431a      	orrs	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e0ba      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	f003 0308 	and.w	r3, r3, #8
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d012      	beq.n	8009b4c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a22      	ldr	r2, [pc, #136]	; (8009bb4 <HAL_SD_ReadBlocks+0x2d4>)
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	f043 0208 	orr.w	r2, r3, #8
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e0a0      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d012      	beq.n	8009b80 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a15      	ldr	r2, [pc, #84]	; (8009bb4 <HAL_SD_ReadBlocks+0x2d4>)
 8009b60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	f043 0202 	orr.w	r2, r3, #2
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e086      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b86:	f003 0320 	and.w	r3, r3, #32
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d063      	beq.n	8009c56 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a08      	ldr	r2, [pc, #32]	; (8009bb4 <HAL_SD_ReadBlocks+0x2d4>)
 8009b94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9a:	f043 0220 	orr.w	r2, r3, #32
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e06c      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
 8009bb4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f002 ff28 	bl	800ca12 <SDIO_ReadFIFO>
 8009bc2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bce:	3301      	adds	r3, #1
 8009bd0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	0a1b      	lsrs	r3, r3, #8
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be4:	3301      	adds	r3, #1
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bea:	3b01      	subs	r3, #1
 8009bec:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf0:	0c1b      	lsrs	r3, r3, #16
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c00:	3b01      	subs	r3, #1
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	0e1b      	lsrs	r3, r3, #24
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c10:	3301      	adds	r3, #1
 8009c12:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c16:	3b01      	subs	r3, #1
 8009c18:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009c1a:	f7f9 ff9d 	bl	8003b58 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d902      	bls.n	8009c30 <HAL_SD_ReadBlocks+0x350>
 8009c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d112      	bne.n	8009c56 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a18      	ldr	r2, [pc, #96]	; (8009c98 <HAL_SD_ReadBlocks+0x3b8>)
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e01b      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <HAL_SD_ReadBlocks+0x38a>
 8009c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1a6      	bne.n	8009bb8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c72:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e006      	b.n	8009c8e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
  }
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3748      	adds	r7, #72	; 0x48
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	004005ff 	.word	0x004005ff

08009c9c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b092      	sub	sp, #72	; 0x48
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009caa:	f7f9 ff55 	bl	8003b58 <HAL_GetTick>
 8009cae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d107      	bne.n	8009cce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e166      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	f040 8159 	bne.w	8009f8e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	441a      	add	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d907      	bls.n	8009d00 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e14d      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2203      	movs	r2, #3
 8009d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d002      	beq.n	8009d1e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1a:	025b      	lsls	r3, r3, #9
 8009d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d22:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	025b      	lsls	r3, r3, #9
 8009d28:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009d2a:	2390      	movs	r3, #144	; 0x90
 8009d2c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009d36:	2301      	movs	r3, #1
 8009d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f107 0218 	add.w	r2, r7, #24
 8009d42:	4611      	mov	r1, r2
 8009d44:	4618      	mov	r0, r3
 8009d46:	f002 fee8 	bl	800cb1a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d90a      	bls.n	8009d66 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2220      	movs	r2, #32
 8009d54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f002 ff90 	bl	800cc82 <SDMMC_CmdWriteMultiBlock>
 8009d62:	6478      	str	r0, [r7, #68]	; 0x44
 8009d64:	e009      	b.n	8009d7a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2210      	movs	r2, #16
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d72:	4618      	mov	r0, r3
 8009d74:	f002 ff63 	bl	800cc3e <SDMMC_CmdWriteSingleBlock>
 8009d78:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d012      	beq.n	8009da6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a87      	ldr	r2, [pc, #540]	; (8009fa4 <HAL_SD_WriteBlocks+0x308>)
 8009d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e0fa      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009daa:	e065      	b.n	8009e78 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d040      	beq.n	8009e3c <HAL_SD_WriteBlocks+0x1a0>
 8009dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d03d      	beq.n	8009e3c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8009dc4:	e037      	b.n	8009e36 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dce:	3301      	adds	r3, #1
 8009dd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	021a      	lsls	r2, r3, #8
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de6:	3301      	adds	r3, #1
 8009de8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dec:	3b01      	subs	r3, #1
 8009dee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	041a      	lsls	r2, r3, #16
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	3301      	adds	r3, #1
 8009e00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e04:	3b01      	subs	r3, #1
 8009e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	061a      	lsls	r2, r3, #24
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e16:	3301      	adds	r3, #1
 8009e18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f107 0214 	add.w	r2, r7, #20
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f002 fdfe 	bl	800ca2c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e32:	3301      	adds	r3, #1
 8009e34:	643b      	str	r3, [r7, #64]	; 0x40
 8009e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e38:	2b07      	cmp	r3, #7
 8009e3a:	d9c4      	bls.n	8009dc6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009e3c:	f7f9 fe8c 	bl	8003b58 <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d902      	bls.n	8009e52 <HAL_SD_WriteBlocks+0x1b6>
 8009e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d112      	bne.n	8009e78 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a53      	ldr	r2, [pc, #332]	; (8009fa4 <HAL_SD_WriteBlocks+0x308>)
 8009e58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e60:	431a      	orrs	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e091      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e7e:	f240 331a 	movw	r3, #794	; 0x31a
 8009e82:	4013      	ands	r3, r2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d091      	beq.n	8009dac <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d022      	beq.n	8009edc <HAL_SD_WriteBlocks+0x240>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d91f      	bls.n	8009edc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d01b      	beq.n	8009edc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f002 ff0d 	bl	800ccc8 <SDMMC_CmdStopTransfer>
 8009eae:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d012      	beq.n	8009edc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a3a      	ldr	r2, [pc, #232]	; (8009fa4 <HAL_SD_WriteBlocks+0x308>)
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e05f      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee2:	f003 0308 	and.w	r3, r3, #8
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d012      	beq.n	8009f10 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a2d      	ldr	r2, [pc, #180]	; (8009fa4 <HAL_SD_WriteBlocks+0x308>)
 8009ef0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef6:	f043 0208 	orr.w	r2, r3, #8
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e045      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d012      	beq.n	8009f44 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a20      	ldr	r2, [pc, #128]	; (8009fa4 <HAL_SD_WriteBlocks+0x308>)
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2a:	f043 0202 	orr.w	r2, r3, #2
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e02b      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d012      	beq.n	8009f78 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a13      	ldr	r2, [pc, #76]	; (8009fa4 <HAL_SD_WriteBlocks+0x308>)
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f5e:	f043 0210 	orr.w	r2, r3, #16
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e011      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e006      	b.n	8009f9c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
  }
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3748      	adds	r7, #72	; 0x48
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	004005ff 	.word	0x004005ff

08009fa8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fb6:	0f9b      	lsrs	r3, r3, #30
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fc2:	0e9b      	lsrs	r3, r3, #26
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	f003 030f 	and.w	r3, r3, #15
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fd4:	0e1b      	lsrs	r3, r3, #24
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fe6:	0c1b      	lsrs	r3, r3, #16
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ff2:	0a1b      	lsrs	r3, r3, #8
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a008:	0d1b      	lsrs	r3, r3, #20
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a014:	0c1b      	lsrs	r3, r3, #16
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a026:	0bdb      	lsrs	r3, r3, #15
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a038:	0b9b      	lsrs	r3, r3, #14
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	b2da      	uxtb	r2, r3
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a04a:	0b5b      	lsrs	r3, r3, #13
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	b2da      	uxtb	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a05c:	0b1b      	lsrs	r3, r3, #12
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	b2da      	uxtb	r2, r3
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2200      	movs	r2, #0
 800a06e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a074:	2b00      	cmp	r3, #0
 800a076:	d163      	bne.n	800a140 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a07c:	009a      	lsls	r2, r3, #2
 800a07e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a082:	4013      	ands	r3, r2
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a088:	0f92      	lsrs	r2, r2, #30
 800a08a:	431a      	orrs	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a094:	0edb      	lsrs	r3, r3, #27
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0a6:	0e1b      	lsrs	r3, r3, #24
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f003 0307 	and.w	r3, r3, #7
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b8:	0d5b      	lsrs	r3, r3, #21
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f003 0307 	and.w	r3, r3, #7
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ca:	0c9b      	lsrs	r3, r3, #18
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 0307 	and.w	r3, r3, #7
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0dc:	0bdb      	lsrs	r3, r3, #15
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 0307 	and.w	r3, r3, #7
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	7e1b      	ldrb	r3, [r3, #24]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	f003 0307 	and.w	r3, r3, #7
 800a0fe:	3302      	adds	r3, #2
 800a100:	2201      	movs	r2, #1
 800a102:	fa02 f303 	lsl.w	r3, r2, r3
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a10a:	fb03 f202 	mul.w	r2, r3, r2
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	7a1b      	ldrb	r3, [r3, #8]
 800a116:	b2db      	uxtb	r3, r3
 800a118:	f003 030f 	and.w	r3, r3, #15
 800a11c:	2201      	movs	r2, #1
 800a11e:	409a      	lsls	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a12c:	0a52      	lsrs	r2, r2, #9
 800a12e:	fb03 f202 	mul.w	r2, r3, r2
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a13c:	661a      	str	r2, [r3, #96]	; 0x60
 800a13e:	e031      	b.n	800a1a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a144:	2b01      	cmp	r3, #1
 800a146:	d11d      	bne.n	800a184 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a14c:	041b      	lsls	r3, r3, #16
 800a14e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a156:	0c1b      	lsrs	r3, r3, #16
 800a158:	431a      	orrs	r2, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	3301      	adds	r3, #1
 800a164:	029a      	lsls	r2, r3, #10
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a178:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	661a      	str	r2, [r3, #96]	; 0x60
 800a182:	e00f      	b.n	800a1a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a58      	ldr	r2, [pc, #352]	; (800a2ec <HAL_SD_GetCardCSD+0x344>)
 800a18a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a190:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e09d      	b.n	800a2e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a8:	0b9b      	lsrs	r3, r3, #14
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ba:	09db      	lsrs	r3, r3, #7
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1dc:	0fdb      	lsrs	r3, r3, #31
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e8:	0f5b      	lsrs	r3, r3, #29
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	f003 0303 	and.w	r3, r3, #3
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1fa:	0e9b      	lsrs	r3, r3, #26
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f003 0307 	and.w	r3, r3, #7
 800a202:	b2da      	uxtb	r2, r3
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20c:	0d9b      	lsrs	r3, r3, #22
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	f003 030f 	and.w	r3, r3, #15
 800a214:	b2da      	uxtb	r2, r3
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21e:	0d5b      	lsrs	r3, r3, #21
 800a220:	b2db      	uxtb	r3, r3
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	b2da      	uxtb	r2, r3
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23a:	0c1b      	lsrs	r3, r3, #16
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	b2da      	uxtb	r2, r3
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24e:	0bdb      	lsrs	r3, r3, #15
 800a250:	b2db      	uxtb	r3, r3
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	b2da      	uxtb	r2, r3
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a262:	0b9b      	lsrs	r3, r3, #14
 800a264:	b2db      	uxtb	r3, r3
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a276:	0b5b      	lsrs	r3, r3, #13
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28a:	0b1b      	lsrs	r3, r3, #12
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	b2da      	uxtb	r2, r3
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29e:	0a9b      	lsrs	r3, r3, #10
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f003 0303 	and.w	r3, r3, #3
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b2:	0a1b      	lsrs	r3, r3, #8
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	f003 0303 	and.w	r3, r3, #3
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c6:	085b      	lsrs	r3, r3, #1
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	004005ff 	.word	0x004005ff

0800a2f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a354:	f107 030c 	add.w	r3, r7, #12
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f970 	bl	800a640 <SD_SendStatus>
 800a360:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	0a5b      	lsrs	r3, r3, #9
 800a378:	f003 030f 	and.w	r3, r3, #15
 800a37c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a37e:	693b      	ldr	r3, [r7, #16]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a388:	b5b0      	push	{r4, r5, r7, lr}
 800a38a:	b094      	sub	sp, #80	; 0x50
 800a38c:	af04      	add	r7, sp, #16
 800a38e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a390:	2301      	movs	r3, #1
 800a392:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f002 fb66 	bl	800ca6a <SDIO_GetPowerState>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a3a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a3a8:	e0b8      	b.n	800a51c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d02f      	beq.n	800a412 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f002 fd4d 	bl	800ce56 <SDMMC_CmdSendCID>
 800a3bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <SD_InitCard+0x40>
    {
      return errorstate;
 800a3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c6:	e0a9      	b.n	800a51c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f002 fb90 	bl	800caf4 <SDIO_GetResponse>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2104      	movs	r1, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f002 fb87 	bl	800caf4 <SDIO_GetResponse>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2108      	movs	r1, #8
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f002 fb7e 	bl	800caf4 <SDIO_GetResponse>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	210c      	movs	r1, #12
 800a404:	4618      	mov	r0, r3
 800a406:	f002 fb75 	bl	800caf4 <SDIO_GetResponse>
 800a40a:	4602      	mov	r2, r0
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a416:	2b03      	cmp	r3, #3
 800a418:	d00d      	beq.n	800a436 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f107 020e 	add.w	r2, r7, #14
 800a422:	4611      	mov	r1, r2
 800a424:	4618      	mov	r0, r3
 800a426:	f002 fd53 	bl	800ced0 <SDMMC_CmdSetRelAdd>
 800a42a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <SD_InitCard+0xae>
    {
      return errorstate;
 800a432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a434:	e072      	b.n	800a51c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d036      	beq.n	800a4ac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a43e:	89fb      	ldrh	r3, [r7, #14]
 800a440:	461a      	mov	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a44e:	041b      	lsls	r3, r3, #16
 800a450:	4619      	mov	r1, r3
 800a452:	4610      	mov	r0, r2
 800a454:	f002 fd1d 	bl	800ce92 <SDMMC_CmdSendCSD>
 800a458:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a462:	e05b      	b.n	800a51c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2100      	movs	r1, #0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f002 fb42 	bl	800caf4 <SDIO_GetResponse>
 800a470:	4602      	mov	r2, r0
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2104      	movs	r1, #4
 800a47c:	4618      	mov	r0, r3
 800a47e:	f002 fb39 	bl	800caf4 <SDIO_GetResponse>
 800a482:	4602      	mov	r2, r0
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2108      	movs	r1, #8
 800a48e:	4618      	mov	r0, r3
 800a490:	f002 fb30 	bl	800caf4 <SDIO_GetResponse>
 800a494:	4602      	mov	r2, r0
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	210c      	movs	r1, #12
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f002 fb27 	bl	800caf4 <SDIO_GetResponse>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2104      	movs	r1, #4
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f002 fb1e 	bl	800caf4 <SDIO_GetResponse>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	0d1a      	lsrs	r2, r3, #20
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a4c0:	f107 0310 	add.w	r3, r7, #16
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff fd6e 	bl	8009fa8 <HAL_SD_GetCardCSD>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a4d6:	e021      	b.n	800a51c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6819      	ldr	r1, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e0:	041b      	lsls	r3, r3, #16
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	461c      	mov	r4, r3
 800a4e6:	4615      	mov	r5, r2
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	4608      	mov	r0, r1
 800a4ee:	f002 fc0d 	bl	800cd0c <SDMMC_CmdSelDesel>
 800a4f2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <SD_InitCard+0x176>
  {
    return errorstate;
 800a4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4fc:	e00e      	b.n	800a51c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681d      	ldr	r5, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	466c      	mov	r4, sp
 800a506:	f103 0210 	add.w	r2, r3, #16
 800a50a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a50c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a510:	3304      	adds	r3, #4
 800a512:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a514:	4628      	mov	r0, r5
 800a516:	f002 fa51 	bl	800c9bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3740      	adds	r7, #64	; 0x40
 800a520:	46bd      	mov	sp, r7
 800a522:	bdb0      	pop	{r4, r5, r7, pc}

0800a524 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a52c:	2300      	movs	r3, #0
 800a52e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	2300      	movs	r3, #0
 800a536:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f002 fc08 	bl	800cd52 <SDMMC_CmdGoIdleState>
 800a542:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	e072      	b.n	800a634 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4618      	mov	r0, r3
 800a554:	f002 fc1b 	bl	800cd8e <SDMMC_CmdOperCond>
 800a558:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00d      	beq.n	800a57c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f002 fbf1 	bl	800cd52 <SDMMC_CmdGoIdleState>
 800a570:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	e05b      	b.n	800a634 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a586:	2b01      	cmp	r3, #1
 800a588:	d137      	bne.n	800a5fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2100      	movs	r1, #0
 800a590:	4618      	mov	r0, r3
 800a592:	f002 fc1b 	bl	800cdcc <SDMMC_CmdAppCommand>
 800a596:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d02d      	beq.n	800a5fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a59e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a5a2:	e047      	b.n	800a634 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f002 fc0e 	bl	800cdcc <SDMMC_CmdAppCommand>
 800a5b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <SD_PowerON+0x98>
    {
      return errorstate;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	e03b      	b.n	800a634 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	491e      	ldr	r1, [pc, #120]	; (800a63c <SD_PowerON+0x118>)
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f002 fc24 	bl	800ce10 <SDMMC_CmdAppOperCommand>
 800a5c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a5d4:	e02e      	b.n	800a634 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2100      	movs	r1, #0
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f002 fa89 	bl	800caf4 <SDIO_GetResponse>
 800a5e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	0fdb      	lsrs	r3, r3, #31
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d101      	bne.n	800a5f0 <SD_PowerON+0xcc>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e000      	b.n	800a5f2 <SD_PowerON+0xce>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	613b      	str	r3, [r7, #16]

    count++;
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a600:	4293      	cmp	r3, r2
 800a602:	d802      	bhi.n	800a60a <SD_PowerON+0xe6>
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0cc      	beq.n	800a5a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a610:	4293      	cmp	r3, r2
 800a612:	d902      	bls.n	800a61a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a618:	e00c      	b.n	800a634 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	645a      	str	r2, [r3, #68]	; 0x44
 800a62a:	e002      	b.n	800a632 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	c1100000 	.word	0xc1100000

0800a640 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d102      	bne.n	800a656 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a650:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a654:	e018      	b.n	800a688 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a65e:	041b      	lsls	r3, r3, #16
 800a660:	4619      	mov	r1, r3
 800a662:	4610      	mov	r0, r2
 800a664:	f002 fc55 	bl	800cf12 <SDMMC_CmdSendStatus>
 800a668:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	e009      	b.n	800a688 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2100      	movs	r1, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	f002 fa3a 	bl	800caf4 <SDIO_GetResponse>
 800a680:	4602      	mov	r2, r0
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e041      	b.n	800a726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7f8 fea8 	bl	800340c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2202      	movs	r2, #2
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	f000 fd30 	bl	800b134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2202      	movs	r2, #2
 800a73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6a1a      	ldr	r2, [r3, #32]
 800a744:	f241 1311 	movw	r3, #4369	; 0x1111
 800a748:	4013      	ands	r3, r2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10f      	bne.n	800a76e <HAL_TIM_Base_DeInit+0x40>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6a1a      	ldr	r2, [r3, #32]
 800a754:	f240 4344 	movw	r3, #1092	; 0x444
 800a758:	4013      	ands	r3, r2
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d107      	bne.n	800a76e <HAL_TIM_Base_DeInit+0x40>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0201 	bic.w	r2, r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7f8 ff0c 	bl	800358c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
	...

0800a7d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d001      	beq.n	800a7f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e03c      	b.n	800a86a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a1e      	ldr	r2, [pc, #120]	; (800a878 <HAL_TIM_Base_Start+0xa0>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d018      	beq.n	800a834 <HAL_TIM_Base_Start+0x5c>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a80a:	d013      	beq.n	800a834 <HAL_TIM_Base_Start+0x5c>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a1a      	ldr	r2, [pc, #104]	; (800a87c <HAL_TIM_Base_Start+0xa4>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d00e      	beq.n	800a834 <HAL_TIM_Base_Start+0x5c>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a19      	ldr	r2, [pc, #100]	; (800a880 <HAL_TIM_Base_Start+0xa8>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d009      	beq.n	800a834 <HAL_TIM_Base_Start+0x5c>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a17      	ldr	r2, [pc, #92]	; (800a884 <HAL_TIM_Base_Start+0xac>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d004      	beq.n	800a834 <HAL_TIM_Base_Start+0x5c>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a16      	ldr	r2, [pc, #88]	; (800a888 <HAL_TIM_Base_Start+0xb0>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d111      	bne.n	800a858 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f003 0307 	and.w	r3, r3, #7
 800a83e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b06      	cmp	r3, #6
 800a844:	d010      	beq.n	800a868 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f042 0201 	orr.w	r2, r2, #1
 800a854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a856:	e007      	b.n	800a868 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0201 	orr.w	r2, r2, #1
 800a866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	40010000 	.word	0x40010000
 800a87c:	40000400 	.word	0x40000400
 800a880:	40000800 	.word	0x40000800
 800a884:	40000c00 	.word	0x40000c00
 800a888:	40014000 	.word	0x40014000

0800a88c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d001      	beq.n	800a8a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e044      	b.n	800a92e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68da      	ldr	r2, [r3, #12]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f042 0201 	orr.w	r2, r2, #1
 800a8ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1e      	ldr	r2, [pc, #120]	; (800a93c <HAL_TIM_Base_Start_IT+0xb0>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d018      	beq.n	800a8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ce:	d013      	beq.n	800a8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1a      	ldr	r2, [pc, #104]	; (800a940 <HAL_TIM_Base_Start_IT+0xb4>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a19      	ldr	r2, [pc, #100]	; (800a944 <HAL_TIM_Base_Start_IT+0xb8>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d009      	beq.n	800a8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a17      	ldr	r2, [pc, #92]	; (800a948 <HAL_TIM_Base_Start_IT+0xbc>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d004      	beq.n	800a8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a16      	ldr	r2, [pc, #88]	; (800a94c <HAL_TIM_Base_Start_IT+0xc0>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d111      	bne.n	800a91c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	f003 0307 	and.w	r3, r3, #7
 800a902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b06      	cmp	r3, #6
 800a908:	d010      	beq.n	800a92c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f042 0201 	orr.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a91a:	e007      	b.n	800a92c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f042 0201 	orr.w	r2, r2, #1
 800a92a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	40010000 	.word	0x40010000
 800a940:	40000400 	.word	0x40000400
 800a944:	40000800 	.word	0x40000800
 800a948:	40000c00 	.word	0x40000c00
 800a94c:	40014000 	.word	0x40014000

0800a950 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f022 0201 	bic.w	r2, r2, #1
 800a966:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6a1a      	ldr	r2, [r3, #32]
 800a96e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a972:	4013      	ands	r3, r2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10f      	bne.n	800a998 <HAL_TIM_Base_Stop_IT+0x48>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6a1a      	ldr	r2, [r3, #32]
 800a97e:	f240 4344 	movw	r3, #1092	; 0x444
 800a982:	4013      	ands	r3, r2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d107      	bne.n	800a998 <HAL_TIM_Base_Stop_IT+0x48>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 0201 	bic.w	r2, r2, #1
 800a996:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e041      	b.n	800aa44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d106      	bne.n	800a9da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f839 	bl	800aa4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2202      	movs	r2, #2
 800a9de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f000 fba1 	bl	800b134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d109      	bne.n	800aa84 <HAL_TIM_PWM_Start+0x24>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	bf14      	ite	ne
 800aa7c:	2301      	movne	r3, #1
 800aa7e:	2300      	moveq	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	e022      	b.n	800aaca <HAL_TIM_PWM_Start+0x6a>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d109      	bne.n	800aa9e <HAL_TIM_PWM_Start+0x3e>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	bf14      	ite	ne
 800aa96:	2301      	movne	r3, #1
 800aa98:	2300      	moveq	r3, #0
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	e015      	b.n	800aaca <HAL_TIM_PWM_Start+0x6a>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b08      	cmp	r3, #8
 800aaa2:	d109      	bne.n	800aab8 <HAL_TIM_PWM_Start+0x58>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	bf14      	ite	ne
 800aab0:	2301      	movne	r3, #1
 800aab2:	2300      	moveq	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	e008      	b.n	800aaca <HAL_TIM_PWM_Start+0x6a>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	bf14      	ite	ne
 800aac4:	2301      	movne	r3, #1
 800aac6:	2300      	moveq	r3, #0
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d001      	beq.n	800aad2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e068      	b.n	800aba4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d104      	bne.n	800aae2 <HAL_TIM_PWM_Start+0x82>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aae0:	e013      	b.n	800ab0a <HAL_TIM_PWM_Start+0xaa>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b04      	cmp	r3, #4
 800aae6:	d104      	bne.n	800aaf2 <HAL_TIM_PWM_Start+0x92>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2202      	movs	r2, #2
 800aaec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaf0:	e00b      	b.n	800ab0a <HAL_TIM_PWM_Start+0xaa>
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d104      	bne.n	800ab02 <HAL_TIM_PWM_Start+0xa2>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2202      	movs	r2, #2
 800aafc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab00:	e003      	b.n	800ab0a <HAL_TIM_PWM_Start+0xaa>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2202      	movs	r2, #2
 800ab06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 fdb4 	bl	800b680 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a23      	ldr	r2, [pc, #140]	; (800abac <HAL_TIM_PWM_Start+0x14c>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d107      	bne.n	800ab32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a1d      	ldr	r2, [pc, #116]	; (800abac <HAL_TIM_PWM_Start+0x14c>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d018      	beq.n	800ab6e <HAL_TIM_PWM_Start+0x10e>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab44:	d013      	beq.n	800ab6e <HAL_TIM_PWM_Start+0x10e>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a19      	ldr	r2, [pc, #100]	; (800abb0 <HAL_TIM_PWM_Start+0x150>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00e      	beq.n	800ab6e <HAL_TIM_PWM_Start+0x10e>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a17      	ldr	r2, [pc, #92]	; (800abb4 <HAL_TIM_PWM_Start+0x154>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d009      	beq.n	800ab6e <HAL_TIM_PWM_Start+0x10e>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a16      	ldr	r2, [pc, #88]	; (800abb8 <HAL_TIM_PWM_Start+0x158>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d004      	beq.n	800ab6e <HAL_TIM_PWM_Start+0x10e>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a14      	ldr	r2, [pc, #80]	; (800abbc <HAL_TIM_PWM_Start+0x15c>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d111      	bne.n	800ab92 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f003 0307 	and.w	r3, r3, #7
 800ab78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b06      	cmp	r3, #6
 800ab7e:	d010      	beq.n	800aba2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f042 0201 	orr.w	r2, r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab90:	e007      	b.n	800aba2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f042 0201 	orr.w	r2, r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	40010000 	.word	0x40010000
 800abb0:	40000400 	.word	0x40000400
 800abb4:	40000800 	.word	0x40000800
 800abb8:	40000c00 	.word	0x40000c00
 800abbc:	40014000 	.word	0x40014000

0800abc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d122      	bne.n	800ac1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	f003 0302 	and.w	r3, r3, #2
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d11b      	bne.n	800ac1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f06f 0202 	mvn.w	r2, #2
 800abec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	f003 0303 	and.w	r3, r3, #3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fa77 	bl	800b0f6 <HAL_TIM_IC_CaptureCallback>
 800ac08:	e005      	b.n	800ac16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fa69 	bl	800b0e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fa7a 	bl	800b10a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d122      	bne.n	800ac70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d11b      	bne.n	800ac70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f06f 0204 	mvn.w	r2, #4
 800ac40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2202      	movs	r2, #2
 800ac46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d003      	beq.n	800ac5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fa4d 	bl	800b0f6 <HAL_TIM_IC_CaptureCallback>
 800ac5c:	e005      	b.n	800ac6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa3f 	bl	800b0e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fa50 	bl	800b10a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	d122      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f003 0308 	and.w	r3, r3, #8
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d11b      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f06f 0208 	mvn.w	r2, #8
 800ac94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2204      	movs	r2, #4
 800ac9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	f003 0303 	and.w	r3, r3, #3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fa23 	bl	800b0f6 <HAL_TIM_IC_CaptureCallback>
 800acb0:	e005      	b.n	800acbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fa15 	bl	800b0e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fa26 	bl	800b10a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0310 	and.w	r3, r3, #16
 800acce:	2b10      	cmp	r3, #16
 800acd0:	d122      	bne.n	800ad18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f003 0310 	and.w	r3, r3, #16
 800acdc:	2b10      	cmp	r3, #16
 800acde:	d11b      	bne.n	800ad18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f06f 0210 	mvn.w	r2, #16
 800ace8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2208      	movs	r2, #8
 800acee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d003      	beq.n	800ad06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f9f9 	bl	800b0f6 <HAL_TIM_IC_CaptureCallback>
 800ad04:	e005      	b.n	800ad12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f9eb 	bl	800b0e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f9fc 	bl	800b10a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d10e      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d107      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f06f 0201 	mvn.w	r2, #1
 800ad3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7f8 f958 	bl	8002ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad4e:	2b80      	cmp	r3, #128	; 0x80
 800ad50:	d10e      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad5c:	2b80      	cmp	r3, #128	; 0x80
 800ad5e:	d107      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fd26 	bl	800b7bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad7a:	2b40      	cmp	r3, #64	; 0x40
 800ad7c:	d10e      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad88:	2b40      	cmp	r3, #64	; 0x40
 800ad8a:	d107      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f9c1 	bl	800b11e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0320 	and.w	r3, r3, #32
 800ada6:	2b20      	cmp	r3, #32
 800ada8:	d10e      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b20      	cmp	r3, #32
 800adb6:	d107      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f06f 0220 	mvn.w	r2, #32
 800adc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fcf0 	bl	800b7a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b086      	sub	sp, #24
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d101      	bne.n	800adee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800adea:	2302      	movs	r3, #2
 800adec:	e0ae      	b.n	800af4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b0c      	cmp	r3, #12
 800adfa:	f200 809f 	bhi.w	800af3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800adfe:	a201      	add	r2, pc, #4	; (adr r2, 800ae04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae04:	0800ae39 	.word	0x0800ae39
 800ae08:	0800af3d 	.word	0x0800af3d
 800ae0c:	0800af3d 	.word	0x0800af3d
 800ae10:	0800af3d 	.word	0x0800af3d
 800ae14:	0800ae79 	.word	0x0800ae79
 800ae18:	0800af3d 	.word	0x0800af3d
 800ae1c:	0800af3d 	.word	0x0800af3d
 800ae20:	0800af3d 	.word	0x0800af3d
 800ae24:	0800aebb 	.word	0x0800aebb
 800ae28:	0800af3d 	.word	0x0800af3d
 800ae2c:	0800af3d 	.word	0x0800af3d
 800ae30:	0800af3d 	.word	0x0800af3d
 800ae34:	0800aefb 	.word	0x0800aefb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f9f8 	bl	800b234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	699a      	ldr	r2, [r3, #24]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f042 0208 	orr.w	r2, r2, #8
 800ae52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	699a      	ldr	r2, [r3, #24]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0204 	bic.w	r2, r2, #4
 800ae62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6999      	ldr	r1, [r3, #24]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	691a      	ldr	r2, [r3, #16]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	619a      	str	r2, [r3, #24]
      break;
 800ae76:	e064      	b.n	800af42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68b9      	ldr	r1, [r7, #8]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 fa3e 	bl	800b300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	699a      	ldr	r2, [r3, #24]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	699a      	ldr	r2, [r3, #24]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6999      	ldr	r1, [r3, #24]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	021a      	lsls	r2, r3, #8
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	619a      	str	r2, [r3, #24]
      break;
 800aeb8:	e043      	b.n	800af42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 fa89 	bl	800b3d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	69da      	ldr	r2, [r3, #28]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f042 0208 	orr.w	r2, r2, #8
 800aed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69da      	ldr	r2, [r3, #28]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f022 0204 	bic.w	r2, r2, #4
 800aee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	69d9      	ldr	r1, [r3, #28]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	691a      	ldr	r2, [r3, #16]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	430a      	orrs	r2, r1
 800aef6:	61da      	str	r2, [r3, #28]
      break;
 800aef8:	e023      	b.n	800af42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68b9      	ldr	r1, [r7, #8]
 800af00:	4618      	mov	r0, r3
 800af02:	f000 fad3 	bl	800b4ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69da      	ldr	r2, [r3, #28]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	69da      	ldr	r2, [r3, #28]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	69d9      	ldr	r1, [r3, #28]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	021a      	lsls	r2, r3, #8
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	430a      	orrs	r2, r1
 800af38:	61da      	str	r2, [r3, #28]
      break;
 800af3a:	e002      	b.n	800af42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	75fb      	strb	r3, [r7, #23]
      break;
 800af40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3718      	adds	r7, #24
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af5e:	2300      	movs	r3, #0
 800af60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_TIM_ConfigClockSource+0x1c>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e0b4      	b.n	800b0da <HAL_TIM_ConfigClockSource+0x186>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800af8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afa8:	d03e      	beq.n	800b028 <HAL_TIM_ConfigClockSource+0xd4>
 800afaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afae:	f200 8087 	bhi.w	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
 800afb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afb6:	f000 8086 	beq.w	800b0c6 <HAL_TIM_ConfigClockSource+0x172>
 800afba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afbe:	d87f      	bhi.n	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
 800afc0:	2b70      	cmp	r3, #112	; 0x70
 800afc2:	d01a      	beq.n	800affa <HAL_TIM_ConfigClockSource+0xa6>
 800afc4:	2b70      	cmp	r3, #112	; 0x70
 800afc6:	d87b      	bhi.n	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
 800afc8:	2b60      	cmp	r3, #96	; 0x60
 800afca:	d050      	beq.n	800b06e <HAL_TIM_ConfigClockSource+0x11a>
 800afcc:	2b60      	cmp	r3, #96	; 0x60
 800afce:	d877      	bhi.n	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
 800afd0:	2b50      	cmp	r3, #80	; 0x50
 800afd2:	d03c      	beq.n	800b04e <HAL_TIM_ConfigClockSource+0xfa>
 800afd4:	2b50      	cmp	r3, #80	; 0x50
 800afd6:	d873      	bhi.n	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
 800afd8:	2b40      	cmp	r3, #64	; 0x40
 800afda:	d058      	beq.n	800b08e <HAL_TIM_ConfigClockSource+0x13a>
 800afdc:	2b40      	cmp	r3, #64	; 0x40
 800afde:	d86f      	bhi.n	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
 800afe0:	2b30      	cmp	r3, #48	; 0x30
 800afe2:	d064      	beq.n	800b0ae <HAL_TIM_ConfigClockSource+0x15a>
 800afe4:	2b30      	cmp	r3, #48	; 0x30
 800afe6:	d86b      	bhi.n	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
 800afe8:	2b20      	cmp	r3, #32
 800afea:	d060      	beq.n	800b0ae <HAL_TIM_ConfigClockSource+0x15a>
 800afec:	2b20      	cmp	r3, #32
 800afee:	d867      	bhi.n	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d05c      	beq.n	800b0ae <HAL_TIM_ConfigClockSource+0x15a>
 800aff4:	2b10      	cmp	r3, #16
 800aff6:	d05a      	beq.n	800b0ae <HAL_TIM_ConfigClockSource+0x15a>
 800aff8:	e062      	b.n	800b0c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	6899      	ldr	r1, [r3, #8]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f000 fb19 	bl	800b640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b01c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	609a      	str	r2, [r3, #8]
      break;
 800b026:	e04f      	b.n	800b0c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6818      	ldr	r0, [r3, #0]
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	6899      	ldr	r1, [r3, #8]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	f000 fb02 	bl	800b640 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689a      	ldr	r2, [r3, #8]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b04a:	609a      	str	r2, [r3, #8]
      break;
 800b04c:	e03c      	b.n	800b0c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6818      	ldr	r0, [r3, #0]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	6859      	ldr	r1, [r3, #4]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f000 fa76 	bl	800b54c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2150      	movs	r1, #80	; 0x50
 800b066:	4618      	mov	r0, r3
 800b068:	f000 facf 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b06c:	e02c      	b.n	800b0c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	6859      	ldr	r1, [r3, #4]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f000 fa95 	bl	800b5aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2160      	movs	r1, #96	; 0x60
 800b086:	4618      	mov	r0, r3
 800b088:	f000 fabf 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b08c:	e01c      	b.n	800b0c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6818      	ldr	r0, [r3, #0]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	6859      	ldr	r1, [r3, #4]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	461a      	mov	r2, r3
 800b09c:	f000 fa56 	bl	800b54c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2140      	movs	r1, #64	; 0x40
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 faaf 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b0ac:	e00c      	b.n	800b0c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f000 faa6 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b0be:	e003      	b.n	800b0c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c4:	e000      	b.n	800b0c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b0c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0ea:	bf00      	nop
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b083      	sub	sp, #12
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0fe:	bf00      	nop
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b10a:	b480      	push	{r7}
 800b10c:	b083      	sub	sp, #12
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b112:	bf00      	nop
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b126:	bf00      	nop
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
	...

0800b134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a34      	ldr	r2, [pc, #208]	; (800b218 <TIM_Base_SetConfig+0xe4>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d00f      	beq.n	800b16c <TIM_Base_SetConfig+0x38>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b152:	d00b      	beq.n	800b16c <TIM_Base_SetConfig+0x38>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a31      	ldr	r2, [pc, #196]	; (800b21c <TIM_Base_SetConfig+0xe8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d007      	beq.n	800b16c <TIM_Base_SetConfig+0x38>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a30      	ldr	r2, [pc, #192]	; (800b220 <TIM_Base_SetConfig+0xec>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d003      	beq.n	800b16c <TIM_Base_SetConfig+0x38>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a2f      	ldr	r2, [pc, #188]	; (800b224 <TIM_Base_SetConfig+0xf0>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d108      	bne.n	800b17e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a25      	ldr	r2, [pc, #148]	; (800b218 <TIM_Base_SetConfig+0xe4>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d01b      	beq.n	800b1be <TIM_Base_SetConfig+0x8a>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b18c:	d017      	beq.n	800b1be <TIM_Base_SetConfig+0x8a>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a22      	ldr	r2, [pc, #136]	; (800b21c <TIM_Base_SetConfig+0xe8>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d013      	beq.n	800b1be <TIM_Base_SetConfig+0x8a>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a21      	ldr	r2, [pc, #132]	; (800b220 <TIM_Base_SetConfig+0xec>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d00f      	beq.n	800b1be <TIM_Base_SetConfig+0x8a>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a20      	ldr	r2, [pc, #128]	; (800b224 <TIM_Base_SetConfig+0xf0>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00b      	beq.n	800b1be <TIM_Base_SetConfig+0x8a>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a1f      	ldr	r2, [pc, #124]	; (800b228 <TIM_Base_SetConfig+0xf4>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d007      	beq.n	800b1be <TIM_Base_SetConfig+0x8a>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a1e      	ldr	r2, [pc, #120]	; (800b22c <TIM_Base_SetConfig+0xf8>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d003      	beq.n	800b1be <TIM_Base_SetConfig+0x8a>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a1d      	ldr	r2, [pc, #116]	; (800b230 <TIM_Base_SetConfig+0xfc>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d108      	bne.n	800b1d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a08      	ldr	r2, [pc, #32]	; (800b218 <TIM_Base_SetConfig+0xe4>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d103      	bne.n	800b204 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	691a      	ldr	r2, [r3, #16]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	615a      	str	r2, [r3, #20]
}
 800b20a:	bf00      	nop
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	40010000 	.word	0x40010000
 800b21c:	40000400 	.word	0x40000400
 800b220:	40000800 	.word	0x40000800
 800b224:	40000c00 	.word	0x40000c00
 800b228:	40014000 	.word	0x40014000
 800b22c:	40014400 	.word	0x40014400
 800b230:	40014800 	.word	0x40014800

0800b234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	f023 0201 	bic.w	r2, r3, #1
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f023 0303 	bic.w	r3, r3, #3
 800b26a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	4313      	orrs	r3, r2
 800b274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f023 0302 	bic.w	r3, r3, #2
 800b27c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	4313      	orrs	r3, r2
 800b286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a1c      	ldr	r2, [pc, #112]	; (800b2fc <TIM_OC1_SetConfig+0xc8>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d10c      	bne.n	800b2aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	f023 0308 	bic.w	r3, r3, #8
 800b296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f023 0304 	bic.w	r3, r3, #4
 800b2a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a13      	ldr	r2, [pc, #76]	; (800b2fc <TIM_OC1_SetConfig+0xc8>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d111      	bne.n	800b2d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	621a      	str	r2, [r3, #32]
}
 800b2f0:	bf00      	nop
 800b2f2:	371c      	adds	r7, #28
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	40010000 	.word	0x40010000

0800b300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f023 0210 	bic.w	r2, r3, #16
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	021b      	lsls	r3, r3, #8
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f023 0320 	bic.w	r3, r3, #32
 800b34a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	011b      	lsls	r3, r3, #4
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	4313      	orrs	r3, r2
 800b356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a1e      	ldr	r2, [pc, #120]	; (800b3d4 <TIM_OC2_SetConfig+0xd4>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d10d      	bne.n	800b37c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	011b      	lsls	r3, r3, #4
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	4313      	orrs	r3, r2
 800b372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b37a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a15      	ldr	r2, [pc, #84]	; (800b3d4 <TIM_OC2_SetConfig+0xd4>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d113      	bne.n	800b3ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b38a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	693a      	ldr	r2, [r7, #16]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	621a      	str	r2, [r3, #32]
}
 800b3c6:	bf00      	nop
 800b3c8:	371c      	adds	r7, #28
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	40010000 	.word	0x40010000

0800b3d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0303 	bic.w	r3, r3, #3
 800b40e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a1d      	ldr	r2, [pc, #116]	; (800b4a8 <TIM_OC3_SetConfig+0xd0>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d10d      	bne.n	800b452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b43c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	697a      	ldr	r2, [r7, #20]
 800b446:	4313      	orrs	r3, r2
 800b448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a14      	ldr	r2, [pc, #80]	; (800b4a8 <TIM_OC3_SetConfig+0xd0>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d113      	bne.n	800b482 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	011b      	lsls	r3, r3, #4
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	4313      	orrs	r3, r2
 800b474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	4313      	orrs	r3, r2
 800b480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	621a      	str	r2, [r3, #32]
}
 800b49c:	bf00      	nop
 800b49e:	371c      	adds	r7, #28
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	40010000 	.word	0x40010000

0800b4ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	69db      	ldr	r3, [r3, #28]
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	021b      	lsls	r3, r3, #8
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b4f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	031b      	lsls	r3, r3, #12
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	4313      	orrs	r3, r2
 800b502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a10      	ldr	r2, [pc, #64]	; (800b548 <TIM_OC4_SetConfig+0x9c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d109      	bne.n	800b520 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	019b      	lsls	r3, r3, #6
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	621a      	str	r2, [r3, #32]
}
 800b53a:	bf00      	nop
 800b53c:	371c      	adds	r7, #28
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	40010000 	.word	0x40010000

0800b54c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6a1b      	ldr	r3, [r3, #32]
 800b55c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	f023 0201 	bic.w	r2, r3, #1
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	4313      	orrs	r3, r2
 800b580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f023 030a 	bic.w	r3, r3, #10
 800b588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	4313      	orrs	r3, r2
 800b590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	621a      	str	r2, [r3, #32]
}
 800b59e:	bf00      	nop
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b087      	sub	sp, #28
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	f023 0210 	bic.w	r2, r3, #16
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	031b      	lsls	r3, r3, #12
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	011b      	lsls	r3, r3, #4
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	621a      	str	r2, [r3, #32]
}
 800b5fe:	bf00      	nop
 800b600:	371c      	adds	r7, #28
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4313      	orrs	r3, r2
 800b628:	f043 0307 	orr.w	r3, r3, #7
 800b62c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	609a      	str	r2, [r3, #8]
}
 800b634:	bf00      	nop
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b65a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	021a      	lsls	r2, r3, #8
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	431a      	orrs	r2, r3
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	4313      	orrs	r3, r2
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	609a      	str	r2, [r3, #8]
}
 800b674:	bf00      	nop
 800b676:	371c      	adds	r7, #28
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b680:	b480      	push	{r7}
 800b682:	b087      	sub	sp, #28
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	f003 031f 	and.w	r3, r3, #31
 800b692:	2201      	movs	r2, #1
 800b694:	fa02 f303 	lsl.w	r3, r2, r3
 800b698:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6a1a      	ldr	r2, [r3, #32]
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	43db      	mvns	r3, r3
 800b6a2:	401a      	ands	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6a1a      	ldr	r2, [r3, #32]
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	f003 031f 	and.w	r3, r3, #31
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b6b8:	431a      	orrs	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	621a      	str	r2, [r3, #32]
}
 800b6be:	bf00      	nop
 800b6c0:	371c      	adds	r7, #28
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
	...

0800b6cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d101      	bne.n	800b6e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	e050      	b.n	800b786 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b70a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	4313      	orrs	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a1c      	ldr	r2, [pc, #112]	; (800b794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d018      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b730:	d013      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a18      	ldr	r2, [pc, #96]	; (800b798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d00e      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a16      	ldr	r2, [pc, #88]	; (800b79c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d009      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a15      	ldr	r2, [pc, #84]	; (800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d004      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a13      	ldr	r2, [pc, #76]	; (800b7a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d10c      	bne.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	4313      	orrs	r3, r2
 800b76a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	40010000 	.word	0x40010000
 800b798:	40000400 	.word	0x40000400
 800b79c:	40000800 	.word	0x40000800
 800b7a0:	40000c00 	.word	0x40000c00
 800b7a4:	40014000 	.word	0x40014000

0800b7a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e03f      	b.n	800b862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d106      	bne.n	800b7fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7f7 ff02 	bl	8003600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2224      	movs	r2, #36	; 0x24
 800b800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	68da      	ldr	r2, [r3, #12]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fe5d 	bl	800c4d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	691a      	ldr	r2, [r3, #16]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	695a      	ldr	r2, [r3, #20]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68da      	ldr	r2, [r3, #12]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2220      	movs	r2, #32
 800b854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2220      	movs	r2, #32
 800b85c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d101      	bne.n	800b87c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e021      	b.n	800b8c0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2224      	movs	r2, #36	; 0x24
 800b880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68da      	ldr	r2, [r3, #12]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b892:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7f7 ff41 	bl	800371c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08a      	sub	sp, #40	; 0x28
 800b8cc:	af02      	add	r7, sp, #8
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	603b      	str	r3, [r7, #0]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b20      	cmp	r3, #32
 800b8e6:	d17c      	bne.n	800b9e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <HAL_UART_Transmit+0x2c>
 800b8ee:	88fb      	ldrh	r3, [r7, #6]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e075      	b.n	800b9e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d101      	bne.n	800b906 <HAL_UART_Transmit+0x3e>
 800b902:	2302      	movs	r3, #2
 800b904:	e06e      	b.n	800b9e4 <HAL_UART_Transmit+0x11c>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2221      	movs	r2, #33	; 0x21
 800b918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b91c:	f7f8 f91c 	bl	8003b58 <HAL_GetTick>
 800b920:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	88fa      	ldrh	r2, [r7, #6]
 800b926:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	88fa      	ldrh	r2, [r7, #6]
 800b92c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b936:	d108      	bne.n	800b94a <HAL_UART_Transmit+0x82>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d104      	bne.n	800b94a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b940:	2300      	movs	r3, #0
 800b942:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	61bb      	str	r3, [r7, #24]
 800b948:	e003      	b.n	800b952 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b95a:	e02a      	b.n	800b9b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2200      	movs	r2, #0
 800b964:	2180      	movs	r1, #128	; 0x80
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 fb6e 	bl	800c048 <UART_WaitOnFlagUntilTimeout>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b972:	2303      	movs	r3, #3
 800b974:	e036      	b.n	800b9e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10b      	bne.n	800b994 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	881b      	ldrh	r3, [r3, #0]
 800b980:	461a      	mov	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b98a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	3302      	adds	r3, #2
 800b990:	61bb      	str	r3, [r7, #24]
 800b992:	e007      	b.n	800b9a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	781a      	ldrb	r2, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1cf      	bne.n	800b95c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2140      	movs	r1, #64	; 0x40
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f000 fb3e 	bl	800c048 <UART_WaitOnFlagUntilTimeout>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b9d2:	2303      	movs	r3, #3
 800b9d4:	e006      	b.n	800b9e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2220      	movs	r2, #32
 800b9da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e000      	b.n	800b9e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b9e2:	2302      	movs	r3, #2
  }
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3720      	adds	r7, #32
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b20      	cmp	r3, #32
 800ba04:	d11d      	bne.n	800ba42 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <HAL_UART_Receive_IT+0x26>
 800ba0c:	88fb      	ldrh	r3, [r7, #6]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e016      	b.n	800ba44 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d101      	bne.n	800ba24 <HAL_UART_Receive_IT+0x38>
 800ba20:	2302      	movs	r3, #2
 800ba22:	e00f      	b.n	800ba44 <HAL_UART_Receive_IT+0x58>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ba32:	88fb      	ldrh	r3, [r7, #6]
 800ba34:	461a      	mov	r2, r3
 800ba36:	68b9      	ldr	r1, [r7, #8]
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f000 fb73 	bl	800c124 <UART_Start_Receive_IT>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	e000      	b.n	800ba44 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ba42:	2302      	movs	r3, #2
  }
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08c      	sub	sp, #48	; 0x30
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b20      	cmp	r3, #32
 800ba64:	d152      	bne.n	800bb0c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800ba6c:	88fb      	ldrh	r3, [r7, #6]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e04b      	b.n	800bb0e <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d101      	bne.n	800ba84 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800ba80:	2302      	movs	r3, #2
 800ba82:	e044      	b.n	800bb0e <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800ba92:	88fb      	ldrh	r3, [r7, #6]
 800ba94:	461a      	mov	r2, r3
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 fb43 	bl	800c124 <UART_Start_Receive_IT>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800baa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d12c      	bne.n	800bb06 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d125      	bne.n	800bb00 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bab4:	2300      	movs	r3, #0
 800bab6:	613b      	str	r3, [r7, #16]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	613b      	str	r3, [r7, #16]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	613b      	str	r3, [r7, #16]
 800bac8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	330c      	adds	r3, #12
 800bad0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	617b      	str	r3, [r7, #20]
   return(result);
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f043 0310 	orr.w	r3, r3, #16
 800bae0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	330c      	adds	r3, #12
 800bae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baea:	627a      	str	r2, [r7, #36]	; 0x24
 800baec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baee:	6a39      	ldr	r1, [r7, #32]
 800baf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	61fb      	str	r3, [r7, #28]
   return(result);
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e5      	bne.n	800baca <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800bafe:	e002      	b.n	800bb06 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800bb06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb0a:	e000      	b.n	800bb0e <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800bb0c:	2302      	movs	r3, #2
  }
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3730      	adds	r7, #48	; 0x30
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b0ba      	sub	sp, #232	; 0xe8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bb44:	2300      	movs	r3, #0
 800bb46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb4e:	f003 030f 	and.w	r3, r3, #15
 800bb52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bb56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10f      	bne.n	800bb7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb62:	f003 0320 	and.w	r3, r3, #32
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d009      	beq.n	800bb7e <HAL_UART_IRQHandler+0x66>
 800bb6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 fbf1 	bl	800c35e <UART_Receive_IT>
      return;
 800bb7c:	e256      	b.n	800c02c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bb7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 80de 	beq.w	800bd44 <HAL_UART_IRQHandler+0x22c>
 800bb88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d106      	bne.n	800bba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 80d1 	beq.w	800bd44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00b      	beq.n	800bbc6 <HAL_UART_IRQHandler+0xae>
 800bbae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d005      	beq.n	800bbc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbe:	f043 0201 	orr.w	r2, r3, #1
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbca:	f003 0304 	and.w	r3, r3, #4
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00b      	beq.n	800bbea <HAL_UART_IRQHandler+0xd2>
 800bbd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d005      	beq.n	800bbea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	f043 0202 	orr.w	r2, r3, #2
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bbea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbee:	f003 0302 	and.w	r3, r3, #2
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00b      	beq.n	800bc0e <HAL_UART_IRQHandler+0xf6>
 800bbf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d005      	beq.n	800bc0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	f043 0204 	orr.w	r2, r3, #4
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bc0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc12:	f003 0308 	and.w	r3, r3, #8
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d011      	beq.n	800bc3e <HAL_UART_IRQHandler+0x126>
 800bc1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc1e:	f003 0320 	and.w	r3, r3, #32
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d105      	bne.n	800bc32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bc26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc2a:	f003 0301 	and.w	r3, r3, #1
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d005      	beq.n	800bc3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc36:	f043 0208 	orr.w	r2, r3, #8
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 81ed 	beq.w	800c022 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc4c:	f003 0320 	and.w	r3, r3, #32
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d008      	beq.n	800bc66 <HAL_UART_IRQHandler+0x14e>
 800bc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc58:	f003 0320 	and.w	r3, r3, #32
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 fb7c 	bl	800c35e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc70:	2b40      	cmp	r3, #64	; 0x40
 800bc72:	bf0c      	ite	eq
 800bc74:	2301      	moveq	r3, #1
 800bc76:	2300      	movne	r3, #0
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc82:	f003 0308 	and.w	r3, r3, #8
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d103      	bne.n	800bc92 <HAL_UART_IRQHandler+0x17a>
 800bc8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d04f      	beq.n	800bd32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fa84 	bl	800c1a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca2:	2b40      	cmp	r3, #64	; 0x40
 800bca4:	d141      	bne.n	800bd2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3314      	adds	r3, #20
 800bcac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcb4:	e853 3f00 	ldrex	r3, [r3]
 800bcb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bcbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bcc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3314      	adds	r3, #20
 800bcce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bcd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bcde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bce2:	e841 2300 	strex	r3, r2, [r1]
 800bce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bcea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1d9      	bne.n	800bca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d013      	beq.n	800bd22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	4a7d      	ldr	r2, [pc, #500]	; (800bef4 <HAL_UART_IRQHandler+0x3dc>)
 800bd00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7f8 ff09 	bl	8004b1e <HAL_DMA_Abort_IT>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d016      	beq.n	800bd40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd1c:	4610      	mov	r0, r2
 800bd1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd20:	e00e      	b.n	800bd40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7f7 f9b6 	bl	8003094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd28:	e00a      	b.n	800bd40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7f7 f9b2 	bl	8003094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd30:	e006      	b.n	800bd40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7f7 f9ae 	bl	8003094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bd3e:	e170      	b.n	800c022 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd40:	bf00      	nop
    return;
 800bd42:	e16e      	b.n	800c022 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	f040 814a 	bne.w	800bfe2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bd4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd52:	f003 0310 	and.w	r3, r3, #16
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	f000 8143 	beq.w	800bfe2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bd5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd60:	f003 0310 	and.w	r3, r3, #16
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f000 813c 	beq.w	800bfe2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60bb      	str	r3, [r7, #8]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	60bb      	str	r3, [r7, #8]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	60bb      	str	r3, [r7, #8]
 800bd7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	f040 80b4 	bne.w	800bef8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 8140 	beq.w	800c026 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bdaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	f080 8139 	bcs.w	800c026 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc6:	f000 8088 	beq.w	800beda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	330c      	adds	r3, #12
 800bdd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdd8:	e853 3f00 	ldrex	r3, [r3]
 800bddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bde0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bde4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bde8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	330c      	adds	r3, #12
 800bdf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bdf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bdfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800be02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be06:	e841 2300 	strex	r3, r2, [r1]
 800be0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be12:	2b00      	cmp	r3, #0
 800be14:	d1d9      	bne.n	800bdca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	3314      	adds	r3, #20
 800be1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be28:	f023 0301 	bic.w	r3, r3, #1
 800be2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3314      	adds	r3, #20
 800be36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be46:	e841 2300 	strex	r3, r2, [r1]
 800be4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1e1      	bne.n	800be16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3314      	adds	r3, #20
 800be58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be5c:	e853 3f00 	ldrex	r3, [r3]
 800be60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3314      	adds	r3, #20
 800be72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be76:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be7e:	e841 2300 	strex	r3, r2, [r1]
 800be82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1e3      	bne.n	800be52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2220      	movs	r2, #32
 800be8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	330c      	adds	r3, #12
 800be9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bea2:	e853 3f00 	ldrex	r3, [r3]
 800bea6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beaa:	f023 0310 	bic.w	r3, r3, #16
 800beae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	330c      	adds	r3, #12
 800beb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bebc:	65ba      	str	r2, [r7, #88]	; 0x58
 800bebe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bec4:	e841 2300 	strex	r3, r2, [r1]
 800bec8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800beca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1e3      	bne.n	800be98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7f8 fdb2 	bl	8004a3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	4619      	mov	r1, r3
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f007 fb9e 	bl	801362c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bef0:	e099      	b.n	800c026 <HAL_UART_IRQHandler+0x50e>
 800bef2:	bf00      	nop
 800bef4:	0800c267 	.word	0x0800c267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f000 808b 	beq.w	800c02a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bf14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 8086 	beq.w	800c02a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	330c      	adds	r3, #12
 800bf24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf28:	e853 3f00 	ldrex	r3, [r3]
 800bf2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	330c      	adds	r3, #12
 800bf3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bf42:	647a      	str	r2, [r7, #68]	; 0x44
 800bf44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf4a:	e841 2300 	strex	r3, r2, [r1]
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1e3      	bne.n	800bf1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3314      	adds	r3, #20
 800bf5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf60:	e853 3f00 	ldrex	r3, [r3]
 800bf64:	623b      	str	r3, [r7, #32]
   return(result);
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	f023 0301 	bic.w	r3, r3, #1
 800bf6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3314      	adds	r3, #20
 800bf76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bf7a:	633a      	str	r2, [r7, #48]	; 0x30
 800bf7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf82:	e841 2300 	strex	r3, r2, [r1]
 800bf86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1e3      	bne.n	800bf56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2220      	movs	r2, #32
 800bf92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	e853 3f00 	ldrex	r3, [r3]
 800bfaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f023 0310 	bic.w	r3, r3, #16
 800bfb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	330c      	adds	r3, #12
 800bfbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bfc0:	61fa      	str	r2, [r7, #28]
 800bfc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc4:	69b9      	ldr	r1, [r7, #24]
 800bfc6:	69fa      	ldr	r2, [r7, #28]
 800bfc8:	e841 2300 	strex	r3, r2, [r1]
 800bfcc:	617b      	str	r3, [r7, #20]
   return(result);
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e3      	bne.n	800bf9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bfd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f007 fb26 	bl	801362c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfe0:	e023      	b.n	800c02a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bfe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d009      	beq.n	800c002 <HAL_UART_IRQHandler+0x4ea>
 800bfee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d003      	beq.n	800c002 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 f947 	bl	800c28e <UART_Transmit_IT>
    return;
 800c000:	e014      	b.n	800c02c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00e      	beq.n	800c02c <HAL_UART_IRQHandler+0x514>
 800c00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c016:	2b00      	cmp	r3, #0
 800c018:	d008      	beq.n	800c02c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f987 	bl	800c32e <UART_EndTransmit_IT>
    return;
 800c020:	e004      	b.n	800c02c <HAL_UART_IRQHandler+0x514>
    return;
 800c022:	bf00      	nop
 800c024:	e002      	b.n	800c02c <HAL_UART_IRQHandler+0x514>
      return;
 800c026:	bf00      	nop
 800c028:	e000      	b.n	800c02c <HAL_UART_IRQHandler+0x514>
      return;
 800c02a:	bf00      	nop
  }
}
 800c02c:	37e8      	adds	r7, #232	; 0xe8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop

0800c034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b090      	sub	sp, #64	; 0x40
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	603b      	str	r3, [r7, #0]
 800c054:	4613      	mov	r3, r2
 800c056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c058:	e050      	b.n	800c0fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c060:	d04c      	beq.n	800c0fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c064:	2b00      	cmp	r3, #0
 800c066:	d007      	beq.n	800c078 <UART_WaitOnFlagUntilTimeout+0x30>
 800c068:	f7f7 fd76 	bl	8003b58 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c074:	429a      	cmp	r2, r3
 800c076:	d241      	bcs.n	800c0fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	330c      	adds	r3, #12
 800c07e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	e853 3f00 	ldrex	r3, [r3]
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c08e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	330c      	adds	r3, #12
 800c096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c098:	637a      	str	r2, [r7, #52]	; 0x34
 800c09a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c09e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0a0:	e841 2300 	strex	r3, r2, [r1]
 800c0a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1e5      	bne.n	800c078 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3314      	adds	r3, #20
 800c0b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	e853 3f00 	ldrex	r3, [r3]
 800c0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	f023 0301 	bic.w	r3, r3, #1
 800c0c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3314      	adds	r3, #20
 800c0ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0cc:	623a      	str	r2, [r7, #32]
 800c0ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d0:	69f9      	ldr	r1, [r7, #28]
 800c0d2:	6a3a      	ldr	r2, [r7, #32]
 800c0d4:	e841 2300 	strex	r3, r2, [r1]
 800c0d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1e5      	bne.n	800c0ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2220      	movs	r2, #32
 800c0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2220      	movs	r2, #32
 800c0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e00f      	b.n	800c11c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	4013      	ands	r3, r2
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	429a      	cmp	r2, r3
 800c10a:	bf0c      	ite	eq
 800c10c:	2301      	moveq	r3, #1
 800c10e:	2300      	movne	r3, #0
 800c110:	b2db      	uxtb	r3, r3
 800c112:	461a      	mov	r2, r3
 800c114:	79fb      	ldrb	r3, [r7, #7]
 800c116:	429a      	cmp	r2, r3
 800c118:	d09f      	beq.n	800c05a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3740      	adds	r7, #64	; 0x40
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	4613      	mov	r3, r2
 800c130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	88fa      	ldrh	r2, [r7, #6]
 800c13c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	88fa      	ldrh	r2, [r7, #6]
 800c142:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2222      	movs	r2, #34	; 0x22
 800c14e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d007      	beq.n	800c172 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68da      	ldr	r2, [r3, #12]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c170:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	695a      	ldr	r2, [r3, #20]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f042 0201 	orr.w	r2, r2, #1
 800c180:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f042 0220 	orr.w	r2, r2, #32
 800c190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3714      	adds	r7, #20
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b095      	sub	sp, #84	; 0x54
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	330c      	adds	r3, #12
 800c1ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b2:	e853 3f00 	ldrex	r3, [r3]
 800c1b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	330c      	adds	r3, #12
 800c1c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1c8:	643a      	str	r2, [r7, #64]	; 0x40
 800c1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1d0:	e841 2300 	strex	r3, r2, [r1]
 800c1d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d1e5      	bne.n	800c1a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3314      	adds	r3, #20
 800c1e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e4:	6a3b      	ldr	r3, [r7, #32]
 800c1e6:	e853 3f00 	ldrex	r3, [r3]
 800c1ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3314      	adds	r3, #20
 800c1fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c204:	e841 2300 	strex	r3, r2, [r1]
 800c208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e5      	bne.n	800c1dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c214:	2b01      	cmp	r3, #1
 800c216:	d119      	bne.n	800c24c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	330c      	adds	r3, #12
 800c21e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	e853 3f00 	ldrex	r3, [r3]
 800c226:	60bb      	str	r3, [r7, #8]
   return(result);
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	f023 0310 	bic.w	r3, r3, #16
 800c22e:	647b      	str	r3, [r7, #68]	; 0x44
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	330c      	adds	r3, #12
 800c236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c238:	61ba      	str	r2, [r7, #24]
 800c23a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23c:	6979      	ldr	r1, [r7, #20]
 800c23e:	69ba      	ldr	r2, [r7, #24]
 800c240:	e841 2300 	strex	r3, r2, [r1]
 800c244:	613b      	str	r3, [r7, #16]
   return(result);
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1e5      	bne.n	800c218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2220      	movs	r2, #32
 800c250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c25a:	bf00      	nop
 800c25c:	3754      	adds	r7, #84	; 0x54
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b084      	sub	sp, #16
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f7f6 ff07 	bl	8003094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c286:	bf00      	nop
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c28e:	b480      	push	{r7}
 800c290:	b085      	sub	sp, #20
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b21      	cmp	r3, #33	; 0x21
 800c2a0:	d13e      	bne.n	800c320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2aa:	d114      	bne.n	800c2d6 <UART_Transmit_IT+0x48>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	691b      	ldr	r3, [r3, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d110      	bne.n	800c2d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a1b      	ldr	r3, [r3, #32]
 800c2b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a1b      	ldr	r3, [r3, #32]
 800c2ce:	1c9a      	adds	r2, r3, #2
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	621a      	str	r2, [r3, #32]
 800c2d4:	e008      	b.n	800c2e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	1c59      	adds	r1, r3, #1
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	6211      	str	r1, [r2, #32]
 800c2e0:	781a      	ldrb	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10f      	bne.n	800c31c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c30a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68da      	ldr	r2, [r3, #12]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c31a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e000      	b.n	800c322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c320:	2302      	movs	r3, #2
  }
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68da      	ldr	r2, [r3, #12]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2220      	movs	r2, #32
 800c34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff fe70 	bl	800c034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3708      	adds	r7, #8
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b08c      	sub	sp, #48	; 0x30
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b22      	cmp	r3, #34	; 0x22
 800c370:	f040 80ab 	bne.w	800c4ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c37c:	d117      	bne.n	800c3ae <UART_Receive_IT+0x50>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d113      	bne.n	800c3ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c386:	2300      	movs	r3, #0
 800c388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c38e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	b29b      	uxth	r3, r3
 800c398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a6:	1c9a      	adds	r2, r3, #2
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	629a      	str	r2, [r3, #40]	; 0x28
 800c3ac:	e026      	b.n	800c3fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3c0:	d007      	beq.n	800c3d2 <UART_Receive_IT+0x74>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <UART_Receive_IT+0x82>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	e008      	b.n	800c3f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c400:	b29b      	uxth	r3, r3
 800c402:	3b01      	subs	r3, #1
 800c404:	b29b      	uxth	r3, r3
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	4619      	mov	r1, r3
 800c40a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d15a      	bne.n	800c4c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f022 0220 	bic.w	r2, r2, #32
 800c41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	68da      	ldr	r2, [r3, #12]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c42e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	695a      	ldr	r2, [r3, #20]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f022 0201 	bic.w	r2, r2, #1
 800c43e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2220      	movs	r2, #32
 800c444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d135      	bne.n	800c4bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	330c      	adds	r3, #12
 800c45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	613b      	str	r3, [r7, #16]
   return(result);
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f023 0310 	bic.w	r3, r3, #16
 800c46c:	627b      	str	r3, [r7, #36]	; 0x24
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	330c      	adds	r3, #12
 800c474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c476:	623a      	str	r2, [r7, #32]
 800c478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	69f9      	ldr	r1, [r7, #28]
 800c47c:	6a3a      	ldr	r2, [r7, #32]
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	61bb      	str	r3, [r7, #24]
   return(result);
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e5      	bne.n	800c456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 0310 	and.w	r3, r3, #16
 800c494:	2b10      	cmp	r3, #16
 800c496:	d10a      	bne.n	800c4ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f007 f8b9 	bl	801362c <HAL_UARTEx_RxEventCallback>
 800c4ba:	e002      	b.n	800c4c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f002 fc4d 	bl	800ed5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e002      	b.n	800c4cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e000      	b.n	800c4cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c4ca:	2302      	movs	r3, #2
  }
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3730      	adds	r7, #48	; 0x30
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4d8:	b0c0      	sub	sp, #256	; 0x100
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c4ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4f0:	68d9      	ldr	r1, [r3, #12]
 800c4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	ea40 0301 	orr.w	r3, r0, r1
 800c4fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c4fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c502:	689a      	ldr	r2, [r3, #8]
 800c504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	431a      	orrs	r2, r3
 800c50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	431a      	orrs	r2, r3
 800c514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c518:	69db      	ldr	r3, [r3, #28]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c52c:	f021 010c 	bic.w	r1, r1, #12
 800c530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c53a:	430b      	orrs	r3, r1
 800c53c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	695b      	ldr	r3, [r3, #20]
 800c546:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c54e:	6999      	ldr	r1, [r3, #24]
 800c550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	ea40 0301 	orr.w	r3, r0, r1
 800c55a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	4b8f      	ldr	r3, [pc, #572]	; (800c7a0 <UART_SetConfig+0x2cc>)
 800c564:	429a      	cmp	r2, r3
 800c566:	d005      	beq.n	800c574 <UART_SetConfig+0xa0>
 800c568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	4b8d      	ldr	r3, [pc, #564]	; (800c7a4 <UART_SetConfig+0x2d0>)
 800c570:	429a      	cmp	r2, r3
 800c572:	d104      	bne.n	800c57e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c574:	f7fc fb70 	bl	8008c58 <HAL_RCC_GetPCLK2Freq>
 800c578:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c57c:	e003      	b.n	800c586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c57e:	f7fc fb57 	bl	8008c30 <HAL_RCC_GetPCLK1Freq>
 800c582:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c58a:	69db      	ldr	r3, [r3, #28]
 800c58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c590:	f040 810c 	bne.w	800c7ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c598:	2200      	movs	r2, #0
 800c59a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c59e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c5a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	462b      	mov	r3, r5
 800c5aa:	1891      	adds	r1, r2, r2
 800c5ac:	65b9      	str	r1, [r7, #88]	; 0x58
 800c5ae:	415b      	adcs	r3, r3
 800c5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	eb12 0801 	adds.w	r8, r2, r1
 800c5bc:	4629      	mov	r1, r5
 800c5be:	eb43 0901 	adc.w	r9, r3, r1
 800c5c2:	f04f 0200 	mov.w	r2, #0
 800c5c6:	f04f 0300 	mov.w	r3, #0
 800c5ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c5d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5d6:	4690      	mov	r8, r2
 800c5d8:	4699      	mov	r9, r3
 800c5da:	4623      	mov	r3, r4
 800c5dc:	eb18 0303 	adds.w	r3, r8, r3
 800c5e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5e4:	462b      	mov	r3, r5
 800c5e6:	eb49 0303 	adc.w	r3, r9, r3
 800c5ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c5fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c602:	460b      	mov	r3, r1
 800c604:	18db      	adds	r3, r3, r3
 800c606:	653b      	str	r3, [r7, #80]	; 0x50
 800c608:	4613      	mov	r3, r2
 800c60a:	eb42 0303 	adc.w	r3, r2, r3
 800c60e:	657b      	str	r3, [r7, #84]	; 0x54
 800c610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c618:	f7f4 fb4e 	bl	8000cb8 <__aeabi_uldivmod>
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4b61      	ldr	r3, [pc, #388]	; (800c7a8 <UART_SetConfig+0x2d4>)
 800c622:	fba3 2302 	umull	r2, r3, r3, r2
 800c626:	095b      	lsrs	r3, r3, #5
 800c628:	011c      	lsls	r4, r3, #4
 800c62a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c634:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c63c:	4642      	mov	r2, r8
 800c63e:	464b      	mov	r3, r9
 800c640:	1891      	adds	r1, r2, r2
 800c642:	64b9      	str	r1, [r7, #72]	; 0x48
 800c644:	415b      	adcs	r3, r3
 800c646:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c64c:	4641      	mov	r1, r8
 800c64e:	eb12 0a01 	adds.w	sl, r2, r1
 800c652:	4649      	mov	r1, r9
 800c654:	eb43 0b01 	adc.w	fp, r3, r1
 800c658:	f04f 0200 	mov.w	r2, #0
 800c65c:	f04f 0300 	mov.w	r3, #0
 800c660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c66c:	4692      	mov	sl, r2
 800c66e:	469b      	mov	fp, r3
 800c670:	4643      	mov	r3, r8
 800c672:	eb1a 0303 	adds.w	r3, sl, r3
 800c676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c67a:	464b      	mov	r3, r9
 800c67c:	eb4b 0303 	adc.w	r3, fp, r3
 800c680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c690:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c698:	460b      	mov	r3, r1
 800c69a:	18db      	adds	r3, r3, r3
 800c69c:	643b      	str	r3, [r7, #64]	; 0x40
 800c69e:	4613      	mov	r3, r2
 800c6a0:	eb42 0303 	adc.w	r3, r2, r3
 800c6a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c6aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c6ae:	f7f4 fb03 	bl	8000cb8 <__aeabi_uldivmod>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	4b3b      	ldr	r3, [pc, #236]	; (800c7a8 <UART_SetConfig+0x2d4>)
 800c6ba:	fba3 2301 	umull	r2, r3, r3, r1
 800c6be:	095b      	lsrs	r3, r3, #5
 800c6c0:	2264      	movs	r2, #100	; 0x64
 800c6c2:	fb02 f303 	mul.w	r3, r2, r3
 800c6c6:	1acb      	subs	r3, r1, r3
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c6ce:	4b36      	ldr	r3, [pc, #216]	; (800c7a8 <UART_SetConfig+0x2d4>)
 800c6d0:	fba3 2302 	umull	r2, r3, r3, r2
 800c6d4:	095b      	lsrs	r3, r3, #5
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c6dc:	441c      	add	r4, r3
 800c6de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c6ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	464b      	mov	r3, r9
 800c6f4:	1891      	adds	r1, r2, r2
 800c6f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c6f8:	415b      	adcs	r3, r3
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c700:	4641      	mov	r1, r8
 800c702:	1851      	adds	r1, r2, r1
 800c704:	6339      	str	r1, [r7, #48]	; 0x30
 800c706:	4649      	mov	r1, r9
 800c708:	414b      	adcs	r3, r1
 800c70a:	637b      	str	r3, [r7, #52]	; 0x34
 800c70c:	f04f 0200 	mov.w	r2, #0
 800c710:	f04f 0300 	mov.w	r3, #0
 800c714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c718:	4659      	mov	r1, fp
 800c71a:	00cb      	lsls	r3, r1, #3
 800c71c:	4651      	mov	r1, sl
 800c71e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c722:	4651      	mov	r1, sl
 800c724:	00ca      	lsls	r2, r1, #3
 800c726:	4610      	mov	r0, r2
 800c728:	4619      	mov	r1, r3
 800c72a:	4603      	mov	r3, r0
 800c72c:	4642      	mov	r2, r8
 800c72e:	189b      	adds	r3, r3, r2
 800c730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c734:	464b      	mov	r3, r9
 800c736:	460a      	mov	r2, r1
 800c738:	eb42 0303 	adc.w	r3, r2, r3
 800c73c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c74c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c754:	460b      	mov	r3, r1
 800c756:	18db      	adds	r3, r3, r3
 800c758:	62bb      	str	r3, [r7, #40]	; 0x28
 800c75a:	4613      	mov	r3, r2
 800c75c:	eb42 0303 	adc.w	r3, r2, r3
 800c760:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c76a:	f7f4 faa5 	bl	8000cb8 <__aeabi_uldivmod>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <UART_SetConfig+0x2d4>)
 800c774:	fba3 1302 	umull	r1, r3, r3, r2
 800c778:	095b      	lsrs	r3, r3, #5
 800c77a:	2164      	movs	r1, #100	; 0x64
 800c77c:	fb01 f303 	mul.w	r3, r1, r3
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	3332      	adds	r3, #50	; 0x32
 800c786:	4a08      	ldr	r2, [pc, #32]	; (800c7a8 <UART_SetConfig+0x2d4>)
 800c788:	fba2 2303 	umull	r2, r3, r2, r3
 800c78c:	095b      	lsrs	r3, r3, #5
 800c78e:	f003 0207 	and.w	r2, r3, #7
 800c792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4422      	add	r2, r4
 800c79a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c79c:	e105      	b.n	800c9aa <UART_SetConfig+0x4d6>
 800c79e:	bf00      	nop
 800c7a0:	40011000 	.word	0x40011000
 800c7a4:	40011400 	.word	0x40011400
 800c7a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c7ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c7b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c7ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c7be:	4642      	mov	r2, r8
 800c7c0:	464b      	mov	r3, r9
 800c7c2:	1891      	adds	r1, r2, r2
 800c7c4:	6239      	str	r1, [r7, #32]
 800c7c6:	415b      	adcs	r3, r3
 800c7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800c7ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c7ce:	4641      	mov	r1, r8
 800c7d0:	1854      	adds	r4, r2, r1
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	eb43 0501 	adc.w	r5, r3, r1
 800c7d8:	f04f 0200 	mov.w	r2, #0
 800c7dc:	f04f 0300 	mov.w	r3, #0
 800c7e0:	00eb      	lsls	r3, r5, #3
 800c7e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7e6:	00e2      	lsls	r2, r4, #3
 800c7e8:	4614      	mov	r4, r2
 800c7ea:	461d      	mov	r5, r3
 800c7ec:	4643      	mov	r3, r8
 800c7ee:	18e3      	adds	r3, r4, r3
 800c7f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7f4:	464b      	mov	r3, r9
 800c7f6:	eb45 0303 	adc.w	r3, r5, r3
 800c7fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c80a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c80e:	f04f 0200 	mov.w	r2, #0
 800c812:	f04f 0300 	mov.w	r3, #0
 800c816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c81a:	4629      	mov	r1, r5
 800c81c:	008b      	lsls	r3, r1, #2
 800c81e:	4621      	mov	r1, r4
 800c820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c824:	4621      	mov	r1, r4
 800c826:	008a      	lsls	r2, r1, #2
 800c828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c82c:	f7f4 fa44 	bl	8000cb8 <__aeabi_uldivmod>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4b60      	ldr	r3, [pc, #384]	; (800c9b8 <UART_SetConfig+0x4e4>)
 800c836:	fba3 2302 	umull	r2, r3, r3, r2
 800c83a:	095b      	lsrs	r3, r3, #5
 800c83c:	011c      	lsls	r4, r3, #4
 800c83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c842:	2200      	movs	r2, #0
 800c844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c84c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c850:	4642      	mov	r2, r8
 800c852:	464b      	mov	r3, r9
 800c854:	1891      	adds	r1, r2, r2
 800c856:	61b9      	str	r1, [r7, #24]
 800c858:	415b      	adcs	r3, r3
 800c85a:	61fb      	str	r3, [r7, #28]
 800c85c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c860:	4641      	mov	r1, r8
 800c862:	1851      	adds	r1, r2, r1
 800c864:	6139      	str	r1, [r7, #16]
 800c866:	4649      	mov	r1, r9
 800c868:	414b      	adcs	r3, r1
 800c86a:	617b      	str	r3, [r7, #20]
 800c86c:	f04f 0200 	mov.w	r2, #0
 800c870:	f04f 0300 	mov.w	r3, #0
 800c874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c878:	4659      	mov	r1, fp
 800c87a:	00cb      	lsls	r3, r1, #3
 800c87c:	4651      	mov	r1, sl
 800c87e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c882:	4651      	mov	r1, sl
 800c884:	00ca      	lsls	r2, r1, #3
 800c886:	4610      	mov	r0, r2
 800c888:	4619      	mov	r1, r3
 800c88a:	4603      	mov	r3, r0
 800c88c:	4642      	mov	r2, r8
 800c88e:	189b      	adds	r3, r3, r2
 800c890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c894:	464b      	mov	r3, r9
 800c896:	460a      	mov	r2, r1
 800c898:	eb42 0303 	adc.w	r3, r2, r3
 800c89c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c8ac:	f04f 0200 	mov.w	r2, #0
 800c8b0:	f04f 0300 	mov.w	r3, #0
 800c8b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c8b8:	4649      	mov	r1, r9
 800c8ba:	008b      	lsls	r3, r1, #2
 800c8bc:	4641      	mov	r1, r8
 800c8be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8c2:	4641      	mov	r1, r8
 800c8c4:	008a      	lsls	r2, r1, #2
 800c8c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c8ca:	f7f4 f9f5 	bl	8000cb8 <__aeabi_uldivmod>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	4b39      	ldr	r3, [pc, #228]	; (800c9b8 <UART_SetConfig+0x4e4>)
 800c8d4:	fba3 1302 	umull	r1, r3, r3, r2
 800c8d8:	095b      	lsrs	r3, r3, #5
 800c8da:	2164      	movs	r1, #100	; 0x64
 800c8dc:	fb01 f303 	mul.w	r3, r1, r3
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	011b      	lsls	r3, r3, #4
 800c8e4:	3332      	adds	r3, #50	; 0x32
 800c8e6:	4a34      	ldr	r2, [pc, #208]	; (800c9b8 <UART_SetConfig+0x4e4>)
 800c8e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ec:	095b      	lsrs	r3, r3, #5
 800c8ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8f2:	441c      	add	r4, r3
 800c8f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	673b      	str	r3, [r7, #112]	; 0x70
 800c8fc:	677a      	str	r2, [r7, #116]	; 0x74
 800c8fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c902:	4642      	mov	r2, r8
 800c904:	464b      	mov	r3, r9
 800c906:	1891      	adds	r1, r2, r2
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	415b      	adcs	r3, r3
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c912:	4641      	mov	r1, r8
 800c914:	1851      	adds	r1, r2, r1
 800c916:	6039      	str	r1, [r7, #0]
 800c918:	4649      	mov	r1, r9
 800c91a:	414b      	adcs	r3, r1
 800c91c:	607b      	str	r3, [r7, #4]
 800c91e:	f04f 0200 	mov.w	r2, #0
 800c922:	f04f 0300 	mov.w	r3, #0
 800c926:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c92a:	4659      	mov	r1, fp
 800c92c:	00cb      	lsls	r3, r1, #3
 800c92e:	4651      	mov	r1, sl
 800c930:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c934:	4651      	mov	r1, sl
 800c936:	00ca      	lsls	r2, r1, #3
 800c938:	4610      	mov	r0, r2
 800c93a:	4619      	mov	r1, r3
 800c93c:	4603      	mov	r3, r0
 800c93e:	4642      	mov	r2, r8
 800c940:	189b      	adds	r3, r3, r2
 800c942:	66bb      	str	r3, [r7, #104]	; 0x68
 800c944:	464b      	mov	r3, r9
 800c946:	460a      	mov	r2, r1
 800c948:	eb42 0303 	adc.w	r3, r2, r3
 800c94c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c94e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	663b      	str	r3, [r7, #96]	; 0x60
 800c958:	667a      	str	r2, [r7, #100]	; 0x64
 800c95a:	f04f 0200 	mov.w	r2, #0
 800c95e:	f04f 0300 	mov.w	r3, #0
 800c962:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c966:	4649      	mov	r1, r9
 800c968:	008b      	lsls	r3, r1, #2
 800c96a:	4641      	mov	r1, r8
 800c96c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c970:	4641      	mov	r1, r8
 800c972:	008a      	lsls	r2, r1, #2
 800c974:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c978:	f7f4 f99e 	bl	8000cb8 <__aeabi_uldivmod>
 800c97c:	4602      	mov	r2, r0
 800c97e:	460b      	mov	r3, r1
 800c980:	4b0d      	ldr	r3, [pc, #52]	; (800c9b8 <UART_SetConfig+0x4e4>)
 800c982:	fba3 1302 	umull	r1, r3, r3, r2
 800c986:	095b      	lsrs	r3, r3, #5
 800c988:	2164      	movs	r1, #100	; 0x64
 800c98a:	fb01 f303 	mul.w	r3, r1, r3
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	011b      	lsls	r3, r3, #4
 800c992:	3332      	adds	r3, #50	; 0x32
 800c994:	4a08      	ldr	r2, [pc, #32]	; (800c9b8 <UART_SetConfig+0x4e4>)
 800c996:	fba2 2303 	umull	r2, r3, r2, r3
 800c99a:	095b      	lsrs	r3, r3, #5
 800c99c:	f003 020f 	and.w	r2, r3, #15
 800c9a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4422      	add	r2, r4
 800c9a8:	609a      	str	r2, [r3, #8]
}
 800c9aa:	bf00      	nop
 800c9ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9b6:	bf00      	nop
 800c9b8:	51eb851f 	.word	0x51eb851f

0800c9bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c9bc:	b084      	sub	sp, #16
 800c9be:	b480      	push	{r7}
 800c9c0:	b085      	sub	sp, #20
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	f107 001c 	add.w	r0, r7, #28
 800c9ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c9d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c9d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c9d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c9da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c9de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c9e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c9e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c9f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3714      	adds	r7, #20
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	b004      	add	sp, #16
 800ca10:	4770      	bx	lr

0800ca12 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ca12:	b480      	push	{r7}
 800ca14:	b083      	sub	sp, #12
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ca4e:	b480      	push	{r7}
 800ca50:	b083      	sub	sp, #12
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2203      	movs	r2, #3
 800ca5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	370c      	adds	r7, #12
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr

0800ca6a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b083      	sub	sp, #12
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0303 	and.w	r3, r3, #3
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	370c      	adds	r7, #12
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr

0800ca86 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ca86:	b480      	push	{r7}
 800ca88:	b085      	sub	sp, #20
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800caa4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800caaa:	431a      	orrs	r2, r3
                       Command->CPSM);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cab0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cac0:	f023 030f 	bic.w	r3, r3, #15
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	431a      	orrs	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3714      	adds	r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cada:	b480      	push	{r7}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	b2db      	uxtb	r3, r3
}
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	3314      	adds	r3, #20
 800cb02:	461a      	mov	r2, r3
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	4413      	add	r3, r2
 800cb08:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
}  
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cb1a:	b480      	push	{r7}
 800cb1c:	b085      	sub	sp, #20
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	685a      	ldr	r2, [r3, #4]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb40:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cb46:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cb4c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb58:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	431a      	orrs	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cb64:	2300      	movs	r3, #0

}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b088      	sub	sp, #32
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cb80:	2310      	movs	r3, #16
 800cb82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb84:	2340      	movs	r3, #64	; 0x40
 800cb86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb92:	f107 0308 	add.w	r3, r7, #8
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff ff74 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cb9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cba2:	2110      	movs	r1, #16
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 f9d7 	bl	800cf58 <SDMMC_GetCmdResp1>
 800cbaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbac:	69fb      	ldr	r3, [r7, #28]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3720      	adds	r7, #32
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b088      	sub	sp, #32
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cbc4:	2311      	movs	r3, #17
 800cbc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbc8:	2340      	movs	r3, #64	; 0x40
 800cbca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbd6:	f107 0308 	add.w	r3, r7, #8
 800cbda:	4619      	mov	r1, r3
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7ff ff52 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cbe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbe6:	2111      	movs	r1, #17
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 f9b5 	bl	800cf58 <SDMMC_GetCmdResp1>
 800cbee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbf0:	69fb      	ldr	r3, [r7, #28]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3720      	adds	r7, #32
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b088      	sub	sp, #32
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cc08:	2312      	movs	r3, #18
 800cc0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc0c:	2340      	movs	r3, #64	; 0x40
 800cc0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc10:	2300      	movs	r3, #0
 800cc12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc1a:	f107 0308 	add.w	r3, r7, #8
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7ff ff30 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cc26:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc2a:	2112      	movs	r1, #18
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f000 f993 	bl	800cf58 <SDMMC_GetCmdResp1>
 800cc32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc34:	69fb      	ldr	r3, [r7, #28]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3720      	adds	r7, #32
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b088      	sub	sp, #32
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
 800cc46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cc4c:	2318      	movs	r3, #24
 800cc4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc50:	2340      	movs	r3, #64	; 0x40
 800cc52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc54:	2300      	movs	r3, #0
 800cc56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc5e:	f107 0308 	add.w	r3, r7, #8
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff ff0e 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cc6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc6e:	2118      	movs	r1, #24
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f971 	bl	800cf58 <SDMMC_GetCmdResp1>
 800cc76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc78:	69fb      	ldr	r3, [r7, #28]
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3720      	adds	r7, #32
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b088      	sub	sp, #32
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cc90:	2319      	movs	r3, #25
 800cc92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc94:	2340      	movs	r3, #64	; 0x40
 800cc96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cca0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cca2:	f107 0308 	add.w	r3, r7, #8
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff feec 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ccae:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb2:	2119      	movs	r1, #25
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 f94f 	bl	800cf58 <SDMMC_GetCmdResp1>
 800ccba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccbc:	69fb      	ldr	r3, [r7, #28]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3720      	adds	r7, #32
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ccd4:	230c      	movs	r3, #12
 800ccd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccd8:	2340      	movs	r3, #64	; 0x40
 800ccda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cce4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cce6:	f107 0308 	add.w	r3, r7, #8
 800ccea:	4619      	mov	r1, r3
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7ff feca 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ccf2:	4a05      	ldr	r2, [pc, #20]	; (800cd08 <SDMMC_CmdStopTransfer+0x40>)
 800ccf4:	210c      	movs	r1, #12
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f92e 	bl	800cf58 <SDMMC_GetCmdResp1>
 800ccfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccfe:	69fb      	ldr	r3, [r7, #28]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3720      	adds	r7, #32
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	05f5e100 	.word	0x05f5e100

0800cd0c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b08a      	sub	sp, #40	; 0x28
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cd1c:	2307      	movs	r3, #7
 800cd1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd20:	2340      	movs	r3, #64	; 0x40
 800cd22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd24:	2300      	movs	r3, #0
 800cd26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd2c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd2e:	f107 0310 	add.w	r3, r7, #16
 800cd32:	4619      	mov	r1, r3
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f7ff fea6 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cd3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd3e:	2107      	movs	r1, #7
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 f909 	bl	800cf58 <SDMMC_GetCmdResp1>
 800cd46:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3728      	adds	r7, #40	; 0x28
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b088      	sub	sp, #32
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800cd62:	2300      	movs	r3, #0
 800cd64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd66:	2300      	movs	r3, #0
 800cd68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd70:	f107 0308 	add.w	r3, r7, #8
 800cd74:	4619      	mov	r1, r3
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7ff fe85 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fb23 	bl	800d3c8 <SDMMC_GetCmdError>
 800cd82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd84:	69fb      	ldr	r3, [r7, #28]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3720      	adds	r7, #32
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b088      	sub	sp, #32
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cd96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cd9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cd9c:	2308      	movs	r3, #8
 800cd9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cda0:	2340      	movs	r3, #64	; 0x40
 800cda2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cda4:	2300      	movs	r3, #0
 800cda6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cda8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdae:	f107 0308 	add.w	r3, r7, #8
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f7ff fe66 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fab6 	bl	800d32c <SDMMC_GetCmdResp7>
 800cdc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdc2:	69fb      	ldr	r3, [r7, #28]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3720      	adds	r7, #32
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cdda:	2337      	movs	r3, #55	; 0x37
 800cddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdde:	2340      	movs	r3, #64	; 0x40
 800cde0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cde2:	2300      	movs	r3, #0
 800cde4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cde6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdec:	f107 0308 	add.w	r3, r7, #8
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7ff fe47 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cdf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdfc:	2137      	movs	r1, #55	; 0x37
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 f8aa 	bl	800cf58 <SDMMC_GetCmdResp1>
 800ce04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce06:	69fb      	ldr	r3, [r7, #28]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3720      	adds	r7, #32
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b088      	sub	sp, #32
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ce26:	2329      	movs	r3, #41	; 0x29
 800ce28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce2a:	2340      	movs	r3, #64	; 0x40
 800ce2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce38:	f107 0308 	add.w	r3, r7, #8
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff fe21 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 f9bd 	bl	800d1c4 <SDMMC_GetCmdResp3>
 800ce4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce4c:	69fb      	ldr	r3, [r7, #28]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3720      	adds	r7, #32
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b088      	sub	sp, #32
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ce62:	2302      	movs	r3, #2
 800ce64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ce66:	23c0      	movs	r3, #192	; 0xc0
 800ce68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce74:	f107 0308 	add.w	r3, r7, #8
 800ce78:	4619      	mov	r1, r3
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7ff fe03 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f957 	bl	800d134 <SDMMC_GetCmdResp2>
 800ce86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce88:	69fb      	ldr	r3, [r7, #28]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3720      	adds	r7, #32
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b088      	sub	sp, #32
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cea0:	2309      	movs	r3, #9
 800cea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cea4:	23c0      	movs	r3, #192	; 0xc0
 800cea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ceac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ceb2:	f107 0308 	add.w	r3, r7, #8
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f7ff fde4 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f938 	bl	800d134 <SDMMC_GetCmdResp2>
 800cec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cec6:	69fb      	ldr	r3, [r7, #28]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3720      	adds	r7, #32
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b088      	sub	sp, #32
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ceda:	2300      	movs	r3, #0
 800cedc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cede:	2303      	movs	r3, #3
 800cee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cee2:	2340      	movs	r3, #64	; 0x40
 800cee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cee6:	2300      	movs	r3, #0
 800cee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ceea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cef0:	f107 0308 	add.w	r3, r7, #8
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff fdc5 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	2103      	movs	r1, #3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f99d 	bl	800d240 <SDMMC_GetCmdResp6>
 800cf06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf08:	69fb      	ldr	r3, [r7, #28]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3720      	adds	r7, #32
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b088      	sub	sp, #32
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
 800cf1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cf20:	230d      	movs	r3, #13
 800cf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf24:	2340      	movs	r3, #64	; 0x40
 800cf26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf32:	f107 0308 	add.w	r3, r7, #8
 800cf36:	4619      	mov	r1, r3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7ff fda4 	bl	800ca86 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cf3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf42:	210d      	movs	r1, #13
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f807 	bl	800cf58 <SDMMC_GetCmdResp1>
 800cf4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf4c:	69fb      	ldr	r3, [r7, #28]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3720      	adds	r7, #32
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
	...

0800cf58 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b088      	sub	sp, #32
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	460b      	mov	r3, r1
 800cf62:	607a      	str	r2, [r7, #4]
 800cf64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cf66:	4b70      	ldr	r3, [pc, #448]	; (800d128 <SDMMC_GetCmdResp1+0x1d0>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a70      	ldr	r2, [pc, #448]	; (800d12c <SDMMC_GetCmdResp1+0x1d4>)
 800cf6c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf70:	0a5a      	lsrs	r2, r3, #9
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	fb02 f303 	mul.w	r3, r2, r3
 800cf78:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	1e5a      	subs	r2, r3, #1
 800cf7e:	61fa      	str	r2, [r7, #28]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d102      	bne.n	800cf8a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf88:	e0c9      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf8e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d0ef      	beq.n	800cf7a <SDMMC_GetCmdResp1+0x22>
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1ea      	bne.n	800cf7a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d004      	beq.n	800cfba <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2204      	movs	r2, #4
 800cfb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfb6:	2304      	movs	r3, #4
 800cfb8:	e0b1      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfbe:	f003 0301 	and.w	r3, r3, #1
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d004      	beq.n	800cfd0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e0a6      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	22c5      	movs	r2, #197	; 0xc5
 800cfd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cfd6:	68f8      	ldr	r0, [r7, #12]
 800cfd8:	f7ff fd7f 	bl	800cada <SDIO_GetCommandResponse>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	461a      	mov	r2, r3
 800cfe0:	7afb      	ldrb	r3, [r7, #11]
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d001      	beq.n	800cfea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e099      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cfea:	2100      	movs	r1, #0
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f7ff fd81 	bl	800caf4 <SDIO_GetResponse>
 800cff2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cff4:	697a      	ldr	r2, [r7, #20]
 800cff6:	4b4e      	ldr	r3, [pc, #312]	; (800d130 <SDMMC_GetCmdResp1+0x1d8>)
 800cff8:	4013      	ands	r3, r2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cffe:	2300      	movs	r3, #0
 800d000:	e08d      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	2b00      	cmp	r3, #0
 800d006:	da02      	bge.n	800d00e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d00c:	e087      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d018:	2340      	movs	r3, #64	; 0x40
 800d01a:	e080      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d026:	2380      	movs	r3, #128	; 0x80
 800d028:	e079      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d034:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d038:	e071      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d044:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d048:	e069      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d050:	2b00      	cmp	r3, #0
 800d052:	d002      	beq.n	800d05a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d058:	e061      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d068:	e059      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d002      	beq.n	800d07a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d078:	e051      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d080:	2b00      	cmp	r3, #0
 800d082:	d002      	beq.n	800d08a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d088:	e049      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d098:	e041      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d0a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0a8:	e039      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d0b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d0b8:	e031      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d002      	beq.n	800d0ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d0c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d0c8:	e029      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d0d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d0d8:	e021      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d0e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d0e8:	e019      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d0f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d0f8:	e011      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d104:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d108:	e009      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f003 0308 	and.w	r3, r3, #8
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d114:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d118:	e001      	b.n	800d11e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d11a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20000010 	.word	0x20000010
 800d12c:	10624dd3 	.word	0x10624dd3
 800d130:	fdffe008 	.word	0xfdffe008

0800d134 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d13c:	4b1f      	ldr	r3, [pc, #124]	; (800d1bc <SDMMC_GetCmdResp2+0x88>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a1f      	ldr	r2, [pc, #124]	; (800d1c0 <SDMMC_GetCmdResp2+0x8c>)
 800d142:	fba2 2303 	umull	r2, r3, r2, r3
 800d146:	0a5b      	lsrs	r3, r3, #9
 800d148:	f241 3288 	movw	r2, #5000	; 0x1388
 800d14c:	fb02 f303 	mul.w	r3, r2, r3
 800d150:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	1e5a      	subs	r2, r3, #1
 800d156:	60fa      	str	r2, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d102      	bne.n	800d162 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d15c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d160:	e026      	b.n	800d1b0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d166:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0ef      	beq.n	800d152 <SDMMC_GetCmdResp2+0x1e>
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1ea      	bne.n	800d152 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d180:	f003 0304 	and.w	r3, r3, #4
 800d184:	2b00      	cmp	r3, #0
 800d186:	d004      	beq.n	800d192 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2204      	movs	r2, #4
 800d18c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d18e:	2304      	movs	r3, #4
 800d190:	e00e      	b.n	800d1b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d004      	beq.n	800d1a8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e003      	b.n	800d1b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	22c5      	movs	r2, #197	; 0xc5
 800d1ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3714      	adds	r7, #20
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr
 800d1bc:	20000010 	.word	0x20000010
 800d1c0:	10624dd3 	.word	0x10624dd3

0800d1c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1cc:	4b1a      	ldr	r3, [pc, #104]	; (800d238 <SDMMC_GetCmdResp3+0x74>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a1a      	ldr	r2, [pc, #104]	; (800d23c <SDMMC_GetCmdResp3+0x78>)
 800d1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d6:	0a5b      	lsrs	r3, r3, #9
 800d1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1dc:	fb02 f303 	mul.w	r3, r2, r3
 800d1e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	1e5a      	subs	r2, r3, #1
 800d1e6:	60fa      	str	r2, [r7, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d102      	bne.n	800d1f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1f0:	e01b      	b.n	800d22a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d0ef      	beq.n	800d1e2 <SDMMC_GetCmdResp3+0x1e>
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1ea      	bne.n	800d1e2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d210:	f003 0304 	and.w	r3, r3, #4
 800d214:	2b00      	cmp	r3, #0
 800d216:	d004      	beq.n	800d222 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2204      	movs	r2, #4
 800d21c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d21e:	2304      	movs	r3, #4
 800d220:	e003      	b.n	800d22a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	22c5      	movs	r2, #197	; 0xc5
 800d226:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	20000010 	.word	0x20000010
 800d23c:	10624dd3 	.word	0x10624dd3

0800d240 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b088      	sub	sp, #32
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	460b      	mov	r3, r1
 800d24a:	607a      	str	r2, [r7, #4]
 800d24c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d24e:	4b35      	ldr	r3, [pc, #212]	; (800d324 <SDMMC_GetCmdResp6+0xe4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a35      	ldr	r2, [pc, #212]	; (800d328 <SDMMC_GetCmdResp6+0xe8>)
 800d254:	fba2 2303 	umull	r2, r3, r2, r3
 800d258:	0a5b      	lsrs	r3, r3, #9
 800d25a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d25e:	fb02 f303 	mul.w	r3, r2, r3
 800d262:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	1e5a      	subs	r2, r3, #1
 800d268:	61fa      	str	r2, [r7, #28]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d102      	bne.n	800d274 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d26e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d272:	e052      	b.n	800d31a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d278:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d280:	2b00      	cmp	r3, #0
 800d282:	d0ef      	beq.n	800d264 <SDMMC_GetCmdResp6+0x24>
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1ea      	bne.n	800d264 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d292:	f003 0304 	and.w	r3, r3, #4
 800d296:	2b00      	cmp	r3, #0
 800d298:	d004      	beq.n	800d2a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2204      	movs	r2, #4
 800d29e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2a0:	2304      	movs	r3, #4
 800d2a2:	e03a      	b.n	800d31a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a8:	f003 0301 	and.w	r3, r3, #1
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d004      	beq.n	800d2ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e02f      	b.n	800d31a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f7ff fc0d 	bl	800cada <SDIO_GetCommandResponse>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	7afb      	ldrb	r3, [r7, #11]
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d001      	beq.n	800d2ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e025      	b.n	800d31a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	22c5      	movs	r2, #197	; 0xc5
 800d2d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f7ff fc0c 	bl	800caf4 <SDIO_GetResponse>
 800d2dc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d106      	bne.n	800d2f6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	0c1b      	lsrs	r3, r3, #16
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	e011      	b.n	800d31a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d304:	e009      	b.n	800d31a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d002      	beq.n	800d316 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d314:	e001      	b.n	800d31a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3720      	adds	r7, #32
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20000010 	.word	0x20000010
 800d328:	10624dd3 	.word	0x10624dd3

0800d32c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d334:	4b22      	ldr	r3, [pc, #136]	; (800d3c0 <SDMMC_GetCmdResp7+0x94>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a22      	ldr	r2, [pc, #136]	; (800d3c4 <SDMMC_GetCmdResp7+0x98>)
 800d33a:	fba2 2303 	umull	r2, r3, r2, r3
 800d33e:	0a5b      	lsrs	r3, r3, #9
 800d340:	f241 3288 	movw	r2, #5000	; 0x1388
 800d344:	fb02 f303 	mul.w	r3, r2, r3
 800d348:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	1e5a      	subs	r2, r3, #1
 800d34e:	60fa      	str	r2, [r7, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d102      	bne.n	800d35a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d358:	e02c      	b.n	800d3b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0ef      	beq.n	800d34a <SDMMC_GetCmdResp7+0x1e>
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1ea      	bne.n	800d34a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d378:	f003 0304 	and.w	r3, r3, #4
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d004      	beq.n	800d38a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2204      	movs	r2, #4
 800d384:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d386:	2304      	movs	r3, #4
 800d388:	e014      	b.n	800d3b4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	2b00      	cmp	r3, #0
 800d394:	d004      	beq.n	800d3a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2201      	movs	r2, #1
 800d39a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e009      	b.n	800d3b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2240      	movs	r2, #64	; 0x40
 800d3b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d3b2:	2300      	movs	r3, #0
  
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	20000010 	.word	0x20000010
 800d3c4:	10624dd3 	.word	0x10624dd3

0800d3c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b085      	sub	sp, #20
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3d0:	4b11      	ldr	r3, [pc, #68]	; (800d418 <SDMMC_GetCmdError+0x50>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a11      	ldr	r2, [pc, #68]	; (800d41c <SDMMC_GetCmdError+0x54>)
 800d3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d3da:	0a5b      	lsrs	r3, r3, #9
 800d3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3e0:	fb02 f303 	mul.w	r3, r2, r3
 800d3e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	1e5a      	subs	r2, r3, #1
 800d3ea:	60fa      	str	r2, [r7, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d102      	bne.n	800d3f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3f4:	e009      	b.n	800d40a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d0f1      	beq.n	800d3e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	22c5      	movs	r2, #197	; 0xc5
 800d406:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3714      	adds	r7, #20
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	20000010 	.word	0x20000010
 800d41c:	10624dd3 	.word	0x10624dd3

0800d420 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d420:	b084      	sub	sp, #16
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	f107 001c 	add.w	r0, r7, #28
 800d42e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	2b01      	cmp	r3, #1
 800d436:	d122      	bne.n	800d47e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d44c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d462:	2b01      	cmp	r3, #1
 800d464:	d105      	bne.n	800d472 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f001 fc3e 	bl	800ecf4 <USB_CoreReset>
 800d478:	4603      	mov	r3, r0
 800d47a:	73fb      	strb	r3, [r7, #15]
 800d47c:	e01a      	b.n	800d4b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f001 fc32 	bl	800ecf4 <USB_CoreReset>
 800d490:	4603      	mov	r3, r0
 800d492:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d106      	bne.n	800d4a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	639a      	str	r2, [r3, #56]	; 0x38
 800d4a6:	e005      	b.n	800d4b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d10b      	bne.n	800d4d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	f043 0206 	orr.w	r2, r3, #6
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	f043 0220 	orr.w	r2, r3, #32
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4de:	b004      	add	sp, #16
 800d4e0:	4770      	bx	lr
	...

0800d4e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b087      	sub	sp, #28
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d4f2:	79fb      	ldrb	r3, [r7, #7]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d165      	bne.n	800d5c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	4a41      	ldr	r2, [pc, #260]	; (800d600 <USB_SetTurnaroundTime+0x11c>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d906      	bls.n	800d50e <USB_SetTurnaroundTime+0x2a>
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	4a40      	ldr	r2, [pc, #256]	; (800d604 <USB_SetTurnaroundTime+0x120>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d202      	bcs.n	800d50e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d508:	230f      	movs	r3, #15
 800d50a:	617b      	str	r3, [r7, #20]
 800d50c:	e062      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	4a3c      	ldr	r2, [pc, #240]	; (800d604 <USB_SetTurnaroundTime+0x120>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d306      	bcc.n	800d524 <USB_SetTurnaroundTime+0x40>
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	4a3b      	ldr	r2, [pc, #236]	; (800d608 <USB_SetTurnaroundTime+0x124>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d202      	bcs.n	800d524 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d51e:	230e      	movs	r3, #14
 800d520:	617b      	str	r3, [r7, #20]
 800d522:	e057      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	4a38      	ldr	r2, [pc, #224]	; (800d608 <USB_SetTurnaroundTime+0x124>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d306      	bcc.n	800d53a <USB_SetTurnaroundTime+0x56>
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	4a37      	ldr	r2, [pc, #220]	; (800d60c <USB_SetTurnaroundTime+0x128>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d202      	bcs.n	800d53a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d534:	230d      	movs	r3, #13
 800d536:	617b      	str	r3, [r7, #20]
 800d538:	e04c      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	4a33      	ldr	r2, [pc, #204]	; (800d60c <USB_SetTurnaroundTime+0x128>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d306      	bcc.n	800d550 <USB_SetTurnaroundTime+0x6c>
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	4a32      	ldr	r2, [pc, #200]	; (800d610 <USB_SetTurnaroundTime+0x12c>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d802      	bhi.n	800d550 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d54a:	230c      	movs	r3, #12
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	e041      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	4a2f      	ldr	r2, [pc, #188]	; (800d610 <USB_SetTurnaroundTime+0x12c>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d906      	bls.n	800d566 <USB_SetTurnaroundTime+0x82>
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	4a2e      	ldr	r2, [pc, #184]	; (800d614 <USB_SetTurnaroundTime+0x130>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d802      	bhi.n	800d566 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d560:	230b      	movs	r3, #11
 800d562:	617b      	str	r3, [r7, #20]
 800d564:	e036      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	4a2a      	ldr	r2, [pc, #168]	; (800d614 <USB_SetTurnaroundTime+0x130>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d906      	bls.n	800d57c <USB_SetTurnaroundTime+0x98>
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	4a29      	ldr	r2, [pc, #164]	; (800d618 <USB_SetTurnaroundTime+0x134>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d802      	bhi.n	800d57c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d576:	230a      	movs	r3, #10
 800d578:	617b      	str	r3, [r7, #20]
 800d57a:	e02b      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	4a26      	ldr	r2, [pc, #152]	; (800d618 <USB_SetTurnaroundTime+0x134>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d906      	bls.n	800d592 <USB_SetTurnaroundTime+0xae>
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	4a25      	ldr	r2, [pc, #148]	; (800d61c <USB_SetTurnaroundTime+0x138>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d202      	bcs.n	800d592 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d58c:	2309      	movs	r3, #9
 800d58e:	617b      	str	r3, [r7, #20]
 800d590:	e020      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	4a21      	ldr	r2, [pc, #132]	; (800d61c <USB_SetTurnaroundTime+0x138>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d306      	bcc.n	800d5a8 <USB_SetTurnaroundTime+0xc4>
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	4a20      	ldr	r2, [pc, #128]	; (800d620 <USB_SetTurnaroundTime+0x13c>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d802      	bhi.n	800d5a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d5a2:	2308      	movs	r3, #8
 800d5a4:	617b      	str	r3, [r7, #20]
 800d5a6:	e015      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	4a1d      	ldr	r2, [pc, #116]	; (800d620 <USB_SetTurnaroundTime+0x13c>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d906      	bls.n	800d5be <USB_SetTurnaroundTime+0xda>
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	4a1c      	ldr	r2, [pc, #112]	; (800d624 <USB_SetTurnaroundTime+0x140>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d202      	bcs.n	800d5be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d5b8:	2307      	movs	r3, #7
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e00a      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d5be:	2306      	movs	r3, #6
 800d5c0:	617b      	str	r3, [r7, #20]
 800d5c2:	e007      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d102      	bne.n	800d5d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d5ca:	2309      	movs	r3, #9
 800d5cc:	617b      	str	r3, [r7, #20]
 800d5ce:	e001      	b.n	800d5d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d5d0:	2309      	movs	r3, #9
 800d5d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	68da      	ldr	r2, [r3, #12]
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	029b      	lsls	r3, r3, #10
 800d5e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d5ec:	431a      	orrs	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	371c      	adds	r7, #28
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	00d8acbf 	.word	0x00d8acbf
 800d604:	00e4e1c0 	.word	0x00e4e1c0
 800d608:	00f42400 	.word	0x00f42400
 800d60c:	01067380 	.word	0x01067380
 800d610:	011a499f 	.word	0x011a499f
 800d614:	01312cff 	.word	0x01312cff
 800d618:	014ca43f 	.word	0x014ca43f
 800d61c:	016e3600 	.word	0x016e3600
 800d620:	01a6ab1f 	.word	0x01a6ab1f
 800d624:	01e84800 	.word	0x01e84800

0800d628 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	f043 0201 	orr.w	r2, r3, #1
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d63c:	2300      	movs	r3, #0
}
 800d63e:	4618      	mov	r0, r3
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr

0800d64a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d64a:	b480      	push	{r7}
 800d64c:	b083      	sub	sp, #12
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	f023 0201 	bic.w	r2, r3, #1
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	460b      	mov	r3, r1
 800d676:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d678:	2300      	movs	r3, #0
 800d67a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d115      	bne.n	800d6ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	68db      	ldr	r3, [r3, #12]
 800d692:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d69a:	2001      	movs	r0, #1
 800d69c:	f7f6 fa68 	bl	8003b70 <HAL_Delay>
      ms++;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f001 fa94 	bl	800ebd4 <USB_GetMode>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d01e      	beq.n	800d6f0 <USB_SetCurrentMode+0x84>
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b31      	cmp	r3, #49	; 0x31
 800d6b6:	d9f0      	bls.n	800d69a <USB_SetCurrentMode+0x2e>
 800d6b8:	e01a      	b.n	800d6f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d6ba:	78fb      	ldrb	r3, [r7, #3]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d115      	bne.n	800d6ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	f7f6 fa4f 	bl	8003b70 <HAL_Delay>
      ms++;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f001 fa7b 	bl	800ebd4 <USB_GetMode>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d005      	beq.n	800d6f0 <USB_SetCurrentMode+0x84>
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2b31      	cmp	r3, #49	; 0x31
 800d6e8:	d9f0      	bls.n	800d6cc <USB_SetCurrentMode+0x60>
 800d6ea:	e001      	b.n	800d6f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e005      	b.n	800d6fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b32      	cmp	r3, #50	; 0x32
 800d6f4:	d101      	bne.n	800d6fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d704:	b084      	sub	sp, #16
 800d706:	b580      	push	{r7, lr}
 800d708:	b086      	sub	sp, #24
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
 800d70e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d71e:	2300      	movs	r3, #0
 800d720:	613b      	str	r3, [r7, #16]
 800d722:	e009      	b.n	800d738 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	3340      	adds	r3, #64	; 0x40
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	2200      	movs	r2, #0
 800d730:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	3301      	adds	r3, #1
 800d736:	613b      	str	r3, [r7, #16]
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	2b0e      	cmp	r3, #14
 800d73c:	d9f2      	bls.n	800d724 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d740:	2b00      	cmp	r3, #0
 800d742:	d11c      	bne.n	800d77e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d752:	f043 0302 	orr.w	r3, r3, #2
 800d756:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d768:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d774:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	639a      	str	r2, [r3, #56]	; 0x38
 800d77c:	e00b      	b.n	800d796 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d78e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d79c:	461a      	mov	r2, r3
 800d79e:	2300      	movs	r3, #0
 800d7a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	680b      	ldr	r3, [r1, #0]
 800d7b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d10c      	bne.n	800d7d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d104      	bne.n	800d7cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f965 	bl	800da94 <USB_SetDevSpeed>
 800d7ca:	e008      	b.n	800d7de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d7cc:	2101      	movs	r1, #1
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f960 	bl	800da94 <USB_SetDevSpeed>
 800d7d4:	e003      	b.n	800d7de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d7d6:	2103      	movs	r1, #3
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f95b 	bl	800da94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d7de:	2110      	movs	r1, #16
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 f8f3 	bl	800d9cc <USB_FlushTxFifo>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d001      	beq.n	800d7f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f91f 	bl	800da34 <USB_FlushRxFifo>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d806:	461a      	mov	r2, r3
 800d808:	2300      	movs	r3, #0
 800d80a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d812:	461a      	mov	r2, r3
 800d814:	2300      	movs	r3, #0
 800d816:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d81e:	461a      	mov	r2, r3
 800d820:	2300      	movs	r3, #0
 800d822:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d824:	2300      	movs	r3, #0
 800d826:	613b      	str	r3, [r7, #16]
 800d828:	e043      	b.n	800d8b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4413      	add	r3, r2
 800d832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d83c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d840:	d118      	bne.n	800d874 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10a      	bne.n	800d85e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	015a      	lsls	r2, r3, #5
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	4413      	add	r3, r2
 800d850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d854:	461a      	mov	r2, r3
 800d856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d85a:	6013      	str	r3, [r2, #0]
 800d85c:	e013      	b.n	800d886 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	015a      	lsls	r2, r3, #5
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	4413      	add	r3, r2
 800d866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d86a:	461a      	mov	r2, r3
 800d86c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d870:	6013      	str	r3, [r2, #0]
 800d872:	e008      	b.n	800d886 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	015a      	lsls	r2, r3, #5
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	4413      	add	r3, r2
 800d87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d880:	461a      	mov	r2, r3
 800d882:	2300      	movs	r3, #0
 800d884:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	015a      	lsls	r2, r3, #5
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	4413      	add	r3, r2
 800d88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d892:	461a      	mov	r2, r3
 800d894:	2300      	movs	r3, #0
 800d896:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	015a      	lsls	r2, r3, #5
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	4413      	add	r3, r2
 800d8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d8aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	613b      	str	r3, [r7, #16]
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	693a      	ldr	r2, [r7, #16]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d3b7      	bcc.n	800d82a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	613b      	str	r3, [r7, #16]
 800d8be:	e043      	b.n	800d948 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	015a      	lsls	r2, r3, #5
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8d6:	d118      	bne.n	800d90a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10a      	bne.n	800d8f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	015a      	lsls	r2, r3, #5
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	e013      	b.n	800d91c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	015a      	lsls	r2, r3, #5
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d900:	461a      	mov	r2, r3
 800d902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	e008      	b.n	800d91c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	015a      	lsls	r2, r3, #5
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	4413      	add	r3, r2
 800d912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d916:	461a      	mov	r2, r3
 800d918:	2300      	movs	r3, #0
 800d91a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	015a      	lsls	r2, r3, #5
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	4413      	add	r3, r2
 800d924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d928:	461a      	mov	r2, r3
 800d92a:	2300      	movs	r3, #0
 800d92c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	015a      	lsls	r2, r3, #5
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	4413      	add	r3, r2
 800d936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d93a:	461a      	mov	r2, r3
 800d93c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d940:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	3301      	adds	r3, #1
 800d946:	613b      	str	r3, [r7, #16]
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d3b7      	bcc.n	800d8c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d95e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d962:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d970:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	2b00      	cmp	r3, #0
 800d976:	d105      	bne.n	800d984 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	f043 0210 	orr.w	r2, r3, #16
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	699a      	ldr	r2, [r3, #24]
 800d988:	4b0f      	ldr	r3, [pc, #60]	; (800d9c8 <USB_DevInit+0x2c4>)
 800d98a:	4313      	orrs	r3, r2
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d992:	2b00      	cmp	r3, #0
 800d994:	d005      	beq.n	800d9a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	f043 0208 	orr.w	r2, r3, #8
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d107      	bne.n	800d9b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d9b0:	f043 0304 	orr.w	r3, r3, #4
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3718      	adds	r7, #24
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9c4:	b004      	add	sp, #16
 800d9c6:	4770      	bx	lr
 800d9c8:	803c3800 	.word	0x803c3800

0800d9cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	4a13      	ldr	r2, [pc, #76]	; (800da30 <USB_FlushTxFifo+0x64>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d901      	bls.n	800d9ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	e01b      	b.n	800da24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	daf2      	bge.n	800d9da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	019b      	lsls	r3, r3, #6
 800d9fc:	f043 0220 	orr.w	r2, r3, #32
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3301      	adds	r3, #1
 800da08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	4a08      	ldr	r2, [pc, #32]	; (800da30 <USB_FlushTxFifo+0x64>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d901      	bls.n	800da16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800da12:	2303      	movs	r3, #3
 800da14:	e006      	b.n	800da24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	f003 0320 	and.w	r3, r3, #32
 800da1e:	2b20      	cmp	r3, #32
 800da20:	d0f0      	beq.n	800da04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3714      	adds	r7, #20
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr
 800da30:	00030d40 	.word	0x00030d40

0800da34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800da34:	b480      	push	{r7}
 800da36:	b085      	sub	sp, #20
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da3c:	2300      	movs	r3, #0
 800da3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	3301      	adds	r3, #1
 800da44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	4a11      	ldr	r2, [pc, #68]	; (800da90 <USB_FlushRxFifo+0x5c>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d901      	bls.n	800da52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800da4e:	2303      	movs	r3, #3
 800da50:	e018      	b.n	800da84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	2b00      	cmp	r3, #0
 800da58:	daf2      	bge.n	800da40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2210      	movs	r2, #16
 800da62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3301      	adds	r3, #1
 800da68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	4a08      	ldr	r2, [pc, #32]	; (800da90 <USB_FlushRxFifo+0x5c>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d901      	bls.n	800da76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800da72:	2303      	movs	r3, #3
 800da74:	e006      	b.n	800da84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	f003 0310 	and.w	r3, r3, #16
 800da7e:	2b10      	cmp	r3, #16
 800da80:	d0f0      	beq.n	800da64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	00030d40 	.word	0x00030d40

0800da94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	460b      	mov	r3, r1
 800da9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	78fb      	ldrb	r3, [r7, #3]
 800daae:	68f9      	ldr	r1, [r7, #12]
 800dab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dab4:	4313      	orrs	r3, r2
 800dab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dab8:	2300      	movs	r3, #0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3714      	adds	r7, #20
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dac6:	b480      	push	{r7}
 800dac8:	b087      	sub	sp, #28
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	f003 0306 	and.w	r3, r3, #6
 800dade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dae6:	2300      	movs	r3, #0
 800dae8:	75fb      	strb	r3, [r7, #23]
 800daea:	e00a      	b.n	800db02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d002      	beq.n	800daf8 <USB_GetDevSpeed+0x32>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b06      	cmp	r3, #6
 800daf6:	d102      	bne.n	800dafe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800daf8:	2302      	movs	r3, #2
 800dafa:	75fb      	strb	r3, [r7, #23]
 800dafc:	e001      	b.n	800db02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dafe:	230f      	movs	r3, #15
 800db00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800db02:	7dfb      	ldrb	r3, [r7, #23]
}
 800db04:	4618      	mov	r0, r3
 800db06:	371c      	adds	r7, #28
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	785b      	ldrb	r3, [r3, #1]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d13a      	bne.n	800dba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db32:	69da      	ldr	r2, [r3, #28]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	f003 030f 	and.w	r3, r3, #15
 800db3c:	2101      	movs	r1, #1
 800db3e:	fa01 f303 	lsl.w	r3, r1, r3
 800db42:	b29b      	uxth	r3, r3
 800db44:	68f9      	ldr	r1, [r7, #12]
 800db46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db4a:	4313      	orrs	r3, r2
 800db4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	015a      	lsls	r2, r3, #5
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	4413      	add	r3, r2
 800db56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db60:	2b00      	cmp	r3, #0
 800db62:	d155      	bne.n	800dc10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	015a      	lsls	r2, r3, #5
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	4413      	add	r3, r2
 800db6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	791b      	ldrb	r3, [r3, #4]
 800db7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800db80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	059b      	lsls	r3, r3, #22
 800db86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800db88:	4313      	orrs	r3, r2
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	0151      	lsls	r1, r2, #5
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	440a      	add	r2, r1
 800db92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db9e:	6013      	str	r3, [r2, #0]
 800dba0:	e036      	b.n	800dc10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dba8:	69da      	ldr	r2, [r3, #28]
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	f003 030f 	and.w	r3, r3, #15
 800dbb2:	2101      	movs	r1, #1
 800dbb4:	fa01 f303 	lsl.w	r3, r1, r3
 800dbb8:	041b      	lsls	r3, r3, #16
 800dbba:	68f9      	ldr	r1, [r7, #12]
 800dbbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	015a      	lsls	r2, r3, #5
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	4413      	add	r3, r2
 800dbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d11a      	bne.n	800dc10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	015a      	lsls	r2, r3, #5
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	791b      	ldrb	r3, [r3, #4]
 800dbf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dbf6:	430b      	orrs	r3, r1
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	0151      	lsls	r1, r2, #5
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	440a      	add	r2, r1
 800dc02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
	...

0800dc20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	785b      	ldrb	r3, [r3, #1]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d161      	bne.n	800dd00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	015a      	lsls	r2, r3, #5
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	4413      	add	r3, r2
 800dc44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc52:	d11f      	bne.n	800dc94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	015a      	lsls	r2, r3, #5
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68ba      	ldr	r2, [r7, #8]
 800dc64:	0151      	lsls	r1, r2, #5
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	440a      	add	r2, r1
 800dc6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dc72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	015a      	lsls	r2, r3, #5
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	0151      	lsls	r1, r2, #5
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	440a      	add	r2, r1
 800dc8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	f003 030f 	and.w	r3, r3, #15
 800dca4:	2101      	movs	r1, #1
 800dca6:	fa01 f303 	lsl.w	r3, r1, r3
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	43db      	mvns	r3, r3
 800dcae:	68f9      	ldr	r1, [r7, #12]
 800dcb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcb4:	4013      	ands	r3, r2
 800dcb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcbe:	69da      	ldr	r2, [r3, #28]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	f003 030f 	and.w	r3, r3, #15
 800dcc8:	2101      	movs	r1, #1
 800dcca:	fa01 f303 	lsl.w	r3, r1, r3
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	43db      	mvns	r3, r3
 800dcd2:	68f9      	ldr	r1, [r7, #12]
 800dcd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcd8:	4013      	ands	r3, r2
 800dcda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	015a      	lsls	r2, r3, #5
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	4413      	add	r3, r2
 800dce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	0159      	lsls	r1, r3, #5
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	440b      	add	r3, r1
 800dcf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	4b35      	ldr	r3, [pc, #212]	; (800ddd0 <USB_DeactivateEndpoint+0x1b0>)
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	600b      	str	r3, [r1, #0]
 800dcfe:	e060      	b.n	800ddc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	015a      	lsls	r2, r3, #5
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	4413      	add	r3, r2
 800dd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd16:	d11f      	bne.n	800dd58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	015a      	lsls	r2, r3, #5
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	4413      	add	r3, r2
 800dd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	0151      	lsls	r1, r2, #5
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	440a      	add	r2, r1
 800dd2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	015a      	lsls	r2, r3, #5
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	4413      	add	r3, r2
 800dd40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	0151      	lsls	r1, r2, #5
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	440a      	add	r2, r1
 800dd4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	f003 030f 	and.w	r3, r3, #15
 800dd68:	2101      	movs	r1, #1
 800dd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd6e:	041b      	lsls	r3, r3, #16
 800dd70:	43db      	mvns	r3, r3
 800dd72:	68f9      	ldr	r1, [r7, #12]
 800dd74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd78:	4013      	ands	r3, r2
 800dd7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd82:	69da      	ldr	r2, [r3, #28]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	f003 030f 	and.w	r3, r3, #15
 800dd8c:	2101      	movs	r1, #1
 800dd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd92:	041b      	lsls	r3, r3, #16
 800dd94:	43db      	mvns	r3, r3
 800dd96:	68f9      	ldr	r1, [r7, #12]
 800dd98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd9c:	4013      	ands	r3, r2
 800dd9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	015a      	lsls	r2, r3, #5
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	4413      	add	r3, r2
 800dda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	0159      	lsls	r1, r3, #5
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	440b      	add	r3, r1
 800ddb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4b05      	ldr	r3, [pc, #20]	; (800ddd4 <USB_DeactivateEndpoint+0x1b4>)
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	ec337800 	.word	0xec337800
 800ddd4:	eff37800 	.word	0xeff37800

0800ddd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	; 0x28
 800dddc:	af02      	add	r7, sp, #8
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	4613      	mov	r3, r2
 800dde4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	785b      	ldrb	r3, [r3, #1]
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	f040 815c 	bne.w	800e0b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d132      	bne.n	800de68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	015a      	lsls	r2, r3, #5
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	4413      	add	r3, r2
 800de0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	69ba      	ldr	r2, [r7, #24]
 800de12:	0151      	lsls	r1, r2, #5
 800de14:	69fa      	ldr	r2, [r7, #28]
 800de16:	440a      	add	r2, r1
 800de18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800de20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800de24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	015a      	lsls	r2, r3, #5
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	4413      	add	r3, r2
 800de2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	69ba      	ldr	r2, [r7, #24]
 800de36:	0151      	lsls	r1, r2, #5
 800de38:	69fa      	ldr	r2, [r7, #28]
 800de3a:	440a      	add	r2, r1
 800de3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	015a      	lsls	r2, r3, #5
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	4413      	add	r3, r2
 800de4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	69ba      	ldr	r2, [r7, #24]
 800de56:	0151      	lsls	r1, r2, #5
 800de58:	69fa      	ldr	r2, [r7, #28]
 800de5a:	440a      	add	r2, r1
 800de5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de60:	0cdb      	lsrs	r3, r3, #19
 800de62:	04db      	lsls	r3, r3, #19
 800de64:	6113      	str	r3, [r2, #16]
 800de66:	e074      	b.n	800df52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	015a      	lsls	r2, r3, #5
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	4413      	add	r3, r2
 800de70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	69ba      	ldr	r2, [r7, #24]
 800de78:	0151      	lsls	r1, r2, #5
 800de7a:	69fa      	ldr	r2, [r7, #28]
 800de7c:	440a      	add	r2, r1
 800de7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de82:	0cdb      	lsrs	r3, r3, #19
 800de84:	04db      	lsls	r3, r3, #19
 800de86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	69ba      	ldr	r2, [r7, #24]
 800de98:	0151      	lsls	r1, r2, #5
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	440a      	add	r2, r1
 800de9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dea2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dea6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800deaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	015a      	lsls	r2, r3, #5
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	4413      	add	r3, r2
 800deb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deb8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	6999      	ldr	r1, [r3, #24]
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	440b      	add	r3, r1
 800dec4:	1e59      	subs	r1, r3, #1
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	fbb1 f3f3 	udiv	r3, r1, r3
 800dece:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ded0:	4b9d      	ldr	r3, [pc, #628]	; (800e148 <USB_EPStartXfer+0x370>)
 800ded2:	400b      	ands	r3, r1
 800ded4:	69b9      	ldr	r1, [r7, #24]
 800ded6:	0148      	lsls	r0, r1, #5
 800ded8:	69f9      	ldr	r1, [r7, #28]
 800deda:	4401      	add	r1, r0
 800dedc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dee0:	4313      	orrs	r3, r2
 800dee2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	015a      	lsls	r2, r3, #5
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	4413      	add	r3, r2
 800deec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def0:	691a      	ldr	r2, [r3, #16]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	699b      	ldr	r3, [r3, #24]
 800def6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800defa:	69b9      	ldr	r1, [r7, #24]
 800defc:	0148      	lsls	r0, r1, #5
 800defe:	69f9      	ldr	r1, [r7, #28]
 800df00:	4401      	add	r1, r0
 800df02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800df06:	4313      	orrs	r3, r2
 800df08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	791b      	ldrb	r3, [r3, #4]
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d11f      	bne.n	800df52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	015a      	lsls	r2, r3, #5
 800df16:	69fb      	ldr	r3, [r7, #28]
 800df18:	4413      	add	r3, r2
 800df1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	69ba      	ldr	r2, [r7, #24]
 800df22:	0151      	lsls	r1, r2, #5
 800df24:	69fa      	ldr	r2, [r7, #28]
 800df26:	440a      	add	r2, r1
 800df28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800df30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	015a      	lsls	r2, r3, #5
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	4413      	add	r3, r2
 800df3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df3e:	691b      	ldr	r3, [r3, #16]
 800df40:	69ba      	ldr	r2, [r7, #24]
 800df42:	0151      	lsls	r1, r2, #5
 800df44:	69fa      	ldr	r2, [r7, #28]
 800df46:	440a      	add	r2, r1
 800df48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d14b      	bne.n	800dff0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	695b      	ldr	r3, [r3, #20]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d009      	beq.n	800df74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	015a      	lsls	r2, r3, #5
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	4413      	add	r3, r2
 800df68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df6c:	461a      	mov	r2, r3
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	791b      	ldrb	r3, [r3, #4]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d128      	bne.n	800dfce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d110      	bne.n	800dfae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	015a      	lsls	r2, r3, #5
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	4413      	add	r3, r2
 800df94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	69ba      	ldr	r2, [r7, #24]
 800df9c:	0151      	lsls	r1, r2, #5
 800df9e:	69fa      	ldr	r2, [r7, #28]
 800dfa0:	440a      	add	r2, r1
 800dfa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dfaa:	6013      	str	r3, [r2, #0]
 800dfac:	e00f      	b.n	800dfce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	015a      	lsls	r2, r3, #5
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	69ba      	ldr	r2, [r7, #24]
 800dfbe:	0151      	lsls	r1, r2, #5
 800dfc0:	69fa      	ldr	r2, [r7, #28]
 800dfc2:	440a      	add	r2, r1
 800dfc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfcc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	015a      	lsls	r2, r3, #5
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	69ba      	ldr	r2, [r7, #24]
 800dfde:	0151      	lsls	r1, r2, #5
 800dfe0:	69fa      	ldr	r2, [r7, #28]
 800dfe2:	440a      	add	r2, r1
 800dfe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfec:	6013      	str	r3, [r2, #0]
 800dfee:	e133      	b.n	800e258 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	015a      	lsls	r2, r3, #5
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	4413      	add	r3, r2
 800dff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	69ba      	ldr	r2, [r7, #24]
 800e000:	0151      	lsls	r1, r2, #5
 800e002:	69fa      	ldr	r2, [r7, #28]
 800e004:	440a      	add	r2, r1
 800e006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e00a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e00e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	791b      	ldrb	r3, [r3, #4]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d015      	beq.n	800e044 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f000 811b 	beq.w	800e258 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	f003 030f 	and.w	r3, r3, #15
 800e032:	2101      	movs	r1, #1
 800e034:	fa01 f303 	lsl.w	r3, r1, r3
 800e038:	69f9      	ldr	r1, [r7, #28]
 800e03a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e03e:	4313      	orrs	r3, r2
 800e040:	634b      	str	r3, [r1, #52]	; 0x34
 800e042:	e109      	b.n	800e258 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e050:	2b00      	cmp	r3, #0
 800e052:	d110      	bne.n	800e076 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	015a      	lsls	r2, r3, #5
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	4413      	add	r3, r2
 800e05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	69ba      	ldr	r2, [r7, #24]
 800e064:	0151      	lsls	r1, r2, #5
 800e066:	69fa      	ldr	r2, [r7, #28]
 800e068:	440a      	add	r2, r1
 800e06a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e06e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e072:	6013      	str	r3, [r2, #0]
 800e074:	e00f      	b.n	800e096 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	015a      	lsls	r2, r3, #5
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	4413      	add	r3, r2
 800e07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	69ba      	ldr	r2, [r7, #24]
 800e086:	0151      	lsls	r1, r2, #5
 800e088:	69fa      	ldr	r2, [r7, #28]
 800e08a:	440a      	add	r2, r1
 800e08c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e094:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	6919      	ldr	r1, [r3, #16]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	781a      	ldrb	r2, [r3, #0]
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	699b      	ldr	r3, [r3, #24]
 800e0a2:	b298      	uxth	r0, r3
 800e0a4:	79fb      	ldrb	r3, [r7, #7]
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f000 fade 	bl	800e66c <USB_WritePacket>
 800e0b0:	e0d2      	b.n	800e258 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	69ba      	ldr	r2, [r7, #24]
 800e0c2:	0151      	lsls	r1, r2, #5
 800e0c4:	69fa      	ldr	r2, [r7, #28]
 800e0c6:	440a      	add	r2, r1
 800e0c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0cc:	0cdb      	lsrs	r3, r3, #19
 800e0ce:	04db      	lsls	r3, r3, #19
 800e0d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	015a      	lsls	r2, r3, #5
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	4413      	add	r3, r2
 800e0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	69ba      	ldr	r2, [r7, #24]
 800e0e2:	0151      	lsls	r1, r2, #5
 800e0e4:	69fa      	ldr	r2, [r7, #28]
 800e0e6:	440a      	add	r2, r1
 800e0e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e0f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e0f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d126      	bne.n	800e14c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	015a      	lsls	r2, r3, #5
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	4413      	add	r3, r2
 800e106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e10a:	691a      	ldr	r2, [r3, #16]
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e114:	69b9      	ldr	r1, [r7, #24]
 800e116:	0148      	lsls	r0, r1, #5
 800e118:	69f9      	ldr	r1, [r7, #28]
 800e11a:	4401      	add	r1, r0
 800e11c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e120:	4313      	orrs	r3, r2
 800e122:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	015a      	lsls	r2, r3, #5
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e130:	691b      	ldr	r3, [r3, #16]
 800e132:	69ba      	ldr	r2, [r7, #24]
 800e134:	0151      	lsls	r1, r2, #5
 800e136:	69fa      	ldr	r2, [r7, #28]
 800e138:	440a      	add	r2, r1
 800e13a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e13e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e142:	6113      	str	r3, [r2, #16]
 800e144:	e03a      	b.n	800e1bc <USB_EPStartXfer+0x3e4>
 800e146:	bf00      	nop
 800e148:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	699a      	ldr	r2, [r3, #24]
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	4413      	add	r3, r2
 800e156:	1e5a      	subs	r2, r3, #1
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e160:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	8afa      	ldrh	r2, [r7, #22]
 800e168:	fb03 f202 	mul.w	r2, r3, r2
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	015a      	lsls	r2, r3, #5
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	4413      	add	r3, r2
 800e178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e17c:	691a      	ldr	r2, [r3, #16]
 800e17e:	8afb      	ldrh	r3, [r7, #22]
 800e180:	04d9      	lsls	r1, r3, #19
 800e182:	4b38      	ldr	r3, [pc, #224]	; (800e264 <USB_EPStartXfer+0x48c>)
 800e184:	400b      	ands	r3, r1
 800e186:	69b9      	ldr	r1, [r7, #24]
 800e188:	0148      	lsls	r0, r1, #5
 800e18a:	69f9      	ldr	r1, [r7, #28]
 800e18c:	4401      	add	r1, r0
 800e18e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e192:	4313      	orrs	r3, r2
 800e194:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	015a      	lsls	r2, r3, #5
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	4413      	add	r3, r2
 800e19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1a2:	691a      	ldr	r2, [r3, #16]
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	69db      	ldr	r3, [r3, #28]
 800e1a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1ac:	69b9      	ldr	r1, [r7, #24]
 800e1ae:	0148      	lsls	r0, r1, #5
 800e1b0:	69f9      	ldr	r1, [r7, #28]
 800e1b2:	4401      	add	r1, r0
 800e1b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d10d      	bne.n	800e1de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d009      	beq.n	800e1de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	6919      	ldr	r1, [r3, #16]
 800e1ce:	69bb      	ldr	r3, [r7, #24]
 800e1d0:	015a      	lsls	r2, r3, #5
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1da:	460a      	mov	r2, r1
 800e1dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	791b      	ldrb	r3, [r3, #4]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d128      	bne.n	800e238 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d110      	bne.n	800e218 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	015a      	lsls	r2, r3, #5
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	69ba      	ldr	r2, [r7, #24]
 800e206:	0151      	lsls	r1, r2, #5
 800e208:	69fa      	ldr	r2, [r7, #28]
 800e20a:	440a      	add	r2, r1
 800e20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e210:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	e00f      	b.n	800e238 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	015a      	lsls	r2, r3, #5
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	4413      	add	r3, r2
 800e220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	69ba      	ldr	r2, [r7, #24]
 800e228:	0151      	lsls	r1, r2, #5
 800e22a:	69fa      	ldr	r2, [r7, #28]
 800e22c:	440a      	add	r2, r1
 800e22e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e236:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	015a      	lsls	r2, r3, #5
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	4413      	add	r3, r2
 800e240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	69ba      	ldr	r2, [r7, #24]
 800e248:	0151      	lsls	r1, r2, #5
 800e24a:	69fa      	ldr	r2, [r7, #28]
 800e24c:	440a      	add	r2, r1
 800e24e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e252:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e256:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e258:	2300      	movs	r3, #0
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3720      	adds	r7, #32
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	1ff80000 	.word	0x1ff80000

0800e268 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e268:	b480      	push	{r7}
 800e26a:	b087      	sub	sp, #28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	4613      	mov	r3, r2
 800e274:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	785b      	ldrb	r3, [r3, #1]
 800e284:	2b01      	cmp	r3, #1
 800e286:	f040 80ce 	bne.w	800e426 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	699b      	ldr	r3, [r3, #24]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d132      	bne.n	800e2f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	015a      	lsls	r2, r3, #5
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	4413      	add	r3, r2
 800e29a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	693a      	ldr	r2, [r7, #16]
 800e2a2:	0151      	lsls	r1, r2, #5
 800e2a4:	697a      	ldr	r2, [r7, #20]
 800e2a6:	440a      	add	r2, r1
 800e2a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e2b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e2b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	015a      	lsls	r2, r3, #5
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2c2:	691b      	ldr	r3, [r3, #16]
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	0151      	lsls	r1, r2, #5
 800e2c8:	697a      	ldr	r2, [r7, #20]
 800e2ca:	440a      	add	r2, r1
 800e2cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e2d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	015a      	lsls	r2, r3, #5
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e2:	691b      	ldr	r3, [r3, #16]
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	0151      	lsls	r1, r2, #5
 800e2e8:	697a      	ldr	r2, [r7, #20]
 800e2ea:	440a      	add	r2, r1
 800e2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2f0:	0cdb      	lsrs	r3, r3, #19
 800e2f2:	04db      	lsls	r3, r3, #19
 800e2f4:	6113      	str	r3, [r2, #16]
 800e2f6:	e04e      	b.n	800e396 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	015a      	lsls	r2, r3, #5
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	4413      	add	r3, r2
 800e300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e304:	691b      	ldr	r3, [r3, #16]
 800e306:	693a      	ldr	r2, [r7, #16]
 800e308:	0151      	lsls	r1, r2, #5
 800e30a:	697a      	ldr	r2, [r7, #20]
 800e30c:	440a      	add	r2, r1
 800e30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e312:	0cdb      	lsrs	r3, r3, #19
 800e314:	04db      	lsls	r3, r3, #19
 800e316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	015a      	lsls	r2, r3, #5
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	4413      	add	r3, r2
 800e320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	693a      	ldr	r2, [r7, #16]
 800e328:	0151      	lsls	r1, r2, #5
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	440a      	add	r2, r1
 800e32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e332:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e336:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e33a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	699a      	ldr	r2, [r3, #24]
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	429a      	cmp	r2, r3
 800e346:	d903      	bls.n	800e350 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	68da      	ldr	r2, [r3, #12]
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	015a      	lsls	r2, r3, #5
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	4413      	add	r3, r2
 800e358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	693a      	ldr	r2, [r7, #16]
 800e360:	0151      	lsls	r1, r2, #5
 800e362:	697a      	ldr	r2, [r7, #20]
 800e364:	440a      	add	r2, r1
 800e366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e36a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e36e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	015a      	lsls	r2, r3, #5
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	4413      	add	r3, r2
 800e378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e37c:	691a      	ldr	r2, [r3, #16]
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	699b      	ldr	r3, [r3, #24]
 800e382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e386:	6939      	ldr	r1, [r7, #16]
 800e388:	0148      	lsls	r0, r1, #5
 800e38a:	6979      	ldr	r1, [r7, #20]
 800e38c:	4401      	add	r1, r0
 800e38e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e392:	4313      	orrs	r3, r2
 800e394:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d11e      	bne.n	800e3da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	695b      	ldr	r3, [r3, #20]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d009      	beq.n	800e3b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	015a      	lsls	r2, r3, #5
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	015a      	lsls	r2, r3, #5
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	4413      	add	r3, r2
 800e3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	693a      	ldr	r2, [r7, #16]
 800e3c8:	0151      	lsls	r1, r2, #5
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	440a      	add	r2, r1
 800e3ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3d6:	6013      	str	r3, [r2, #0]
 800e3d8:	e097      	b.n	800e50a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	015a      	lsls	r2, r3, #5
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	0151      	lsls	r1, r2, #5
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	440a      	add	r2, r1
 800e3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	699b      	ldr	r3, [r3, #24]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f000 8083 	beq.w	800e50a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e40a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	f003 030f 	and.w	r3, r3, #15
 800e414:	2101      	movs	r1, #1
 800e416:	fa01 f303 	lsl.w	r3, r1, r3
 800e41a:	6979      	ldr	r1, [r7, #20]
 800e41c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e420:	4313      	orrs	r3, r2
 800e422:	634b      	str	r3, [r1, #52]	; 0x34
 800e424:	e071      	b.n	800e50a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	015a      	lsls	r2, r3, #5
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	4413      	add	r3, r2
 800e42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e432:	691b      	ldr	r3, [r3, #16]
 800e434:	693a      	ldr	r2, [r7, #16]
 800e436:	0151      	lsls	r1, r2, #5
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	440a      	add	r2, r1
 800e43c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e440:	0cdb      	lsrs	r3, r3, #19
 800e442:	04db      	lsls	r3, r3, #19
 800e444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	015a      	lsls	r2, r3, #5
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	4413      	add	r3, r2
 800e44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e452:	691b      	ldr	r3, [r3, #16]
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	0151      	lsls	r1, r2, #5
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	440a      	add	r2, r1
 800e45c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e468:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	699b      	ldr	r3, [r3, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d003      	beq.n	800e47a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	68da      	ldr	r2, [r3, #12]
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	68da      	ldr	r2, [r3, #12]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	015a      	lsls	r2, r3, #5
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	4413      	add	r3, r2
 800e48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	693a      	ldr	r2, [r7, #16]
 800e492:	0151      	lsls	r1, r2, #5
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	440a      	add	r2, r1
 800e498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e49c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	015a      	lsls	r2, r3, #5
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ae:	691a      	ldr	r2, [r3, #16]
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	69db      	ldr	r3, [r3, #28]
 800e4b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4b8:	6939      	ldr	r1, [r7, #16]
 800e4ba:	0148      	lsls	r0, r1, #5
 800e4bc:	6979      	ldr	r1, [r7, #20]
 800e4be:	4401      	add	r1, r0
 800e4c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e4c8:	79fb      	ldrb	r3, [r7, #7]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d10d      	bne.n	800e4ea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	691b      	ldr	r3, [r3, #16]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d009      	beq.n	800e4ea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	6919      	ldr	r1, [r3, #16]
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	015a      	lsls	r2, r3, #5
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4e6:	460a      	mov	r2, r1
 800e4e8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	015a      	lsls	r2, r3, #5
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	693a      	ldr	r2, [r7, #16]
 800e4fa:	0151      	lsls	r1, r2, #5
 800e4fc:	697a      	ldr	r2, [r7, #20]
 800e4fe:	440a      	add	r2, r1
 800e500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e504:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e508:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	371c      	adds	r7, #28
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e518:	b480      	push	{r7}
 800e51a:	b087      	sub	sp, #28
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e522:	2300      	movs	r3, #0
 800e524:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e526:	2300      	movs	r3, #0
 800e528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	785b      	ldrb	r3, [r3, #1]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d14a      	bne.n	800e5cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	015a      	lsls	r2, r3, #5
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	4413      	add	r3, r2
 800e540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e54a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e54e:	f040 8086 	bne.w	800e65e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	4413      	add	r3, r2
 800e55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	7812      	ldrb	r2, [r2, #0]
 800e566:	0151      	lsls	r1, r2, #5
 800e568:	693a      	ldr	r2, [r7, #16]
 800e56a:	440a      	add	r2, r1
 800e56c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e570:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e574:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	015a      	lsls	r2, r3, #5
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	4413      	add	r3, r2
 800e580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	683a      	ldr	r2, [r7, #0]
 800e588:	7812      	ldrb	r2, [r2, #0]
 800e58a:	0151      	lsls	r1, r2, #5
 800e58c:	693a      	ldr	r2, [r7, #16]
 800e58e:	440a      	add	r2, r1
 800e590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e598:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	3301      	adds	r3, #1
 800e59e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f242 7210 	movw	r2, #10000	; 0x2710
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d902      	bls.n	800e5b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	75fb      	strb	r3, [r7, #23]
          break;
 800e5ae:	e056      	b.n	800e65e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	015a      	lsls	r2, r3, #5
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5c8:	d0e7      	beq.n	800e59a <USB_EPStopXfer+0x82>
 800e5ca:	e048      	b.n	800e65e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	015a      	lsls	r2, r3, #5
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5e4:	d13b      	bne.n	800e65e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	015a      	lsls	r2, r3, #5
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	7812      	ldrb	r2, [r2, #0]
 800e5fa:	0151      	lsls	r1, r2, #5
 800e5fc:	693a      	ldr	r2, [r7, #16]
 800e5fe:	440a      	add	r2, r1
 800e600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e604:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e608:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	015a      	lsls	r2, r3, #5
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	4413      	add	r3, r2
 800e614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	683a      	ldr	r2, [r7, #0]
 800e61c:	7812      	ldrb	r2, [r2, #0]
 800e61e:	0151      	lsls	r1, r2, #5
 800e620:	693a      	ldr	r2, [r7, #16]
 800e622:	440a      	add	r2, r1
 800e624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e62c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3301      	adds	r3, #1
 800e632:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f242 7210 	movw	r2, #10000	; 0x2710
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d902      	bls.n	800e644 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
 800e640:	75fb      	strb	r3, [r7, #23]
          break;
 800e642:	e00c      	b.n	800e65e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	015a      	lsls	r2, r3, #5
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	4413      	add	r3, r2
 800e64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e65c:	d0e7      	beq.n	800e62e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e660:	4618      	mov	r0, r3
 800e662:	371c      	adds	r7, #28
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b089      	sub	sp, #36	; 0x24
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	4611      	mov	r1, r2
 800e678:	461a      	mov	r2, r3
 800e67a:	460b      	mov	r3, r1
 800e67c:	71fb      	strb	r3, [r7, #7]
 800e67e:	4613      	mov	r3, r2
 800e680:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e68a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d123      	bne.n	800e6da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e692:	88bb      	ldrh	r3, [r7, #4]
 800e694:	3303      	adds	r3, #3
 800e696:	089b      	lsrs	r3, r3, #2
 800e698:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e69a:	2300      	movs	r3, #0
 800e69c:	61bb      	str	r3, [r7, #24]
 800e69e:	e018      	b.n	800e6d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e6a0:	79fb      	ldrb	r3, [r7, #7]
 800e6a2:	031a      	lsls	r2, r3, #12
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6ba:	69fb      	ldr	r3, [r7, #28]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	61bb      	str	r3, [r7, #24]
 800e6d2:	69ba      	ldr	r2, [r7, #24]
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d3e2      	bcc.n	800e6a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e6da:	2300      	movs	r3, #0
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3724      	adds	r7, #36	; 0x24
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b08b      	sub	sp, #44	; 0x2c
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e6fe:	88fb      	ldrh	r3, [r7, #6]
 800e700:	089b      	lsrs	r3, r3, #2
 800e702:	b29b      	uxth	r3, r3
 800e704:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e706:	88fb      	ldrh	r3, [r7, #6]
 800e708:	f003 0303 	and.w	r3, r3, #3
 800e70c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e70e:	2300      	movs	r3, #0
 800e710:	623b      	str	r3, [r7, #32]
 800e712:	e014      	b.n	800e73e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e722:	3301      	adds	r3, #1
 800e724:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	3301      	adds	r3, #1
 800e72a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72e:	3301      	adds	r3, #1
 800e730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	3301      	adds	r3, #1
 800e736:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e738:	6a3b      	ldr	r3, [r7, #32]
 800e73a:	3301      	adds	r3, #1
 800e73c:	623b      	str	r3, [r7, #32]
 800e73e:	6a3a      	ldr	r2, [r7, #32]
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	429a      	cmp	r2, r3
 800e744:	d3e6      	bcc.n	800e714 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e746:	8bfb      	ldrh	r3, [r7, #30]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d01e      	beq.n	800e78a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e74c:	2300      	movs	r3, #0
 800e74e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e756:	461a      	mov	r2, r3
 800e758:	f107 0310 	add.w	r3, r7, #16
 800e75c:	6812      	ldr	r2, [r2, #0]
 800e75e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	6a3b      	ldr	r3, [r7, #32]
 800e764:	b2db      	uxtb	r3, r3
 800e766:	00db      	lsls	r3, r3, #3
 800e768:	fa22 f303 	lsr.w	r3, r2, r3
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e770:	701a      	strb	r2, [r3, #0]
      i++;
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	3301      	adds	r3, #1
 800e776:	623b      	str	r3, [r7, #32]
      pDest++;
 800e778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77a:	3301      	adds	r3, #1
 800e77c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e77e:	8bfb      	ldrh	r3, [r7, #30]
 800e780:	3b01      	subs	r3, #1
 800e782:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e784:	8bfb      	ldrh	r3, [r7, #30]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1ea      	bne.n	800e760 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	372c      	adds	r7, #44	; 0x2c
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	785b      	ldrb	r3, [r3, #1]
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d12c      	bne.n	800e80e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	015a      	lsls	r2, r3, #5
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	db12      	blt.n	800e7ec <USB_EPSetStall+0x54>
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00f      	beq.n	800e7ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	015a      	lsls	r2, r3, #5
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	68ba      	ldr	r2, [r7, #8]
 800e7dc:	0151      	lsls	r1, r2, #5
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	440a      	add	r2, r1
 800e7e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e7ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	015a      	lsls	r2, r3, #5
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	0151      	lsls	r1, r2, #5
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	440a      	add	r2, r1
 800e802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e80a:	6013      	str	r3, [r2, #0]
 800e80c:	e02b      	b.n	800e866 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	015a      	lsls	r2, r3, #5
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	4413      	add	r3, r2
 800e816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	db12      	blt.n	800e846 <USB_EPSetStall+0xae>
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00f      	beq.n	800e846 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	015a      	lsls	r2, r3, #5
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	4413      	add	r3, r2
 800e82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	0151      	lsls	r1, r2, #5
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	440a      	add	r2, r1
 800e83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e844:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	015a      	lsls	r2, r3, #5
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	4413      	add	r3, r2
 800e84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	0151      	lsls	r1, r2, #5
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	440a      	add	r2, r1
 800e85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	785b      	ldrb	r3, [r3, #1]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d128      	bne.n	800e8e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	015a      	lsls	r2, r3, #5
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	4413      	add	r3, r2
 800e898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	0151      	lsls	r1, r2, #5
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	440a      	add	r2, r1
 800e8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	791b      	ldrb	r3, [r3, #4]
 800e8b4:	2b03      	cmp	r3, #3
 800e8b6:	d003      	beq.n	800e8c0 <USB_EPClearStall+0x4c>
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	791b      	ldrb	r3, [r3, #4]
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d138      	bne.n	800e932 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	015a      	lsls	r2, r3, #5
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	0151      	lsls	r1, r2, #5
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	440a      	add	r2, r1
 800e8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	e027      	b.n	800e932 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	015a      	lsls	r2, r3, #5
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	0151      	lsls	r1, r2, #5
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	440a      	add	r2, r1
 800e8f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e900:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	791b      	ldrb	r3, [r3, #4]
 800e906:	2b03      	cmp	r3, #3
 800e908:	d003      	beq.n	800e912 <USB_EPClearStall+0x9e>
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	791b      	ldrb	r3, [r3, #4]
 800e90e:	2b02      	cmp	r3, #2
 800e910:	d10f      	bne.n	800e932 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	015a      	lsls	r2, r3, #5
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	4413      	add	r3, r2
 800e91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	0151      	lsls	r1, r2, #5
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	440a      	add	r2, r1
 800e928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e92c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e930:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800e94c:	2300      	movs	r3, #0
 800e94e:	617b      	str	r3, [r7, #20]
 800e950:	e016      	b.n	800e980 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	015a      	lsls	r2, r3, #5
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	4413      	add	r3, r2
 800e95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e95e:	461a      	mov	r2, r3
 800e960:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e964:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	015a      	lsls	r2, r3, #5
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	4413      	add	r3, r2
 800e96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e972:	461a      	mov	r2, r3
 800e974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e978:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	3301      	adds	r3, #1
 800e97e:	617b      	str	r3, [r7, #20]
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	2b0e      	cmp	r3, #14
 800e984:	d9e5      	bls.n	800e952 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e98c:	461a      	mov	r2, r3
 800e98e:	2300      	movs	r3, #0
 800e990:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e998:	461a      	mov	r2, r3
 800e99a:	2300      	movs	r3, #0
 800e99c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff f842 	bl	800da34 <USB_FlushRxFifo>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e9b4:	7bfb      	ldrb	r3, [r7, #15]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d001      	beq.n	800e9be <USB_StopDevice+0x7e>
  {
    return ret;
 800e9ba:	7bfb      	ldrb	r3, [r7, #15]
 800e9bc:	e00b      	b.n	800e9d6 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800e9be:	2110      	movs	r1, #16
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7ff f803 	bl	800d9cc <USB_FlushTxFifo>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800e9ca:	7bfb      	ldrb	r3, [r7, #15]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <USB_StopDevice+0x94>
  {
    return ret;
 800e9d0:	7bfb      	ldrb	r3, [r7, #15]
 800e9d2:	e000      	b.n	800e9d6 <USB_StopDevice+0x96>
  }

  return ret;
 800e9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3718      	adds	r7, #24
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e9de:	b480      	push	{r7}
 800e9e0:	b085      	sub	sp, #20
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ea00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	78fb      	ldrb	r3, [r7, #3]
 800ea0c:	011b      	lsls	r3, r3, #4
 800ea0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ea12:	68f9      	ldr	r1, [r7, #12]
 800ea14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ea2a:	b480      	push	{r7}
 800ea2c:	b085      	sub	sp, #20
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea44:	f023 0303 	bic.w	r3, r3, #3
 800ea48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea58:	f023 0302 	bic.w	r3, r3, #2
 800ea5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea86:	f023 0303 	bic.w	r3, r3, #3
 800ea8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea9a:	f043 0302 	orr.w	r3, r3, #2
 800ea9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eaae:	b480      	push	{r7}
 800eab0:	b085      	sub	sp, #20
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	695b      	ldr	r3, [r3, #20]
 800eaba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	4013      	ands	r3, r2
 800eac4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eac6:	68fb      	ldr	r3, [r7, #12]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b085      	sub	sp, #20
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaf0:	69db      	ldr	r3, [r3, #28]
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	0c1b      	lsrs	r3, r3, #16
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3714      	adds	r7, #20
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1a:	699b      	ldr	r3, [r3, #24]
 800eb1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb24:	69db      	ldr	r3, [r3, #28]
 800eb26:	68ba      	ldr	r2, [r7, #8]
 800eb28:	4013      	ands	r3, r2
 800eb2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	b29b      	uxth	r3, r3
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eb4c:	78fb      	ldrb	r3, [r7, #3]
 800eb4e:	015a      	lsls	r2, r3, #5
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	4413      	add	r3, r2
 800eb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb62:	695b      	ldr	r3, [r3, #20]
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	4013      	ands	r3, r2
 800eb68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eb6a:	68bb      	ldr	r3, [r7, #8]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3714      	adds	r7, #20
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	460b      	mov	r3, r1
 800eb82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800eb9c:	78fb      	ldrb	r3, [r7, #3]
 800eb9e:	f003 030f 	and.w	r3, r3, #15
 800eba2:	68fa      	ldr	r2, [r7, #12]
 800eba4:	fa22 f303 	lsr.w	r3, r2, r3
 800eba8:	01db      	lsls	r3, r3, #7
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	693a      	ldr	r2, [r7, #16]
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ebb2:	78fb      	ldrb	r3, [r7, #3]
 800ebb4:	015a      	lsls	r2, r3, #5
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	4413      	add	r3, r2
 800ebba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	693a      	ldr	r2, [r7, #16]
 800ebc2:	4013      	ands	r3, r2
 800ebc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ebc6:	68bb      	ldr	r3, [r7, #8]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	371c      	adds	r7, #28
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	695b      	ldr	r3, [r3, #20]
 800ebe0:	f003 0301 	and.w	r3, r3, #1
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ec0e:	f023 0307 	bic.w	r3, r3, #7
 800ec12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
	...

0800ec38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b087      	sub	sp, #28
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	460b      	mov	r3, r1
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	333c      	adds	r3, #60	; 0x3c
 800ec4e:	3304      	adds	r3, #4
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	4a26      	ldr	r2, [pc, #152]	; (800ecf0 <USB_EP0_OutStart+0xb8>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d90a      	bls.n	800ec72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec6c:	d101      	bne.n	800ec72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e037      	b.n	800ece2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec78:	461a      	mov	r2, r3
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec98:	691b      	ldr	r3, [r3, #16]
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eca0:	f043 0318 	orr.w	r3, r3, #24
 800eca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecac:	691b      	ldr	r3, [r3, #16]
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ecb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ecba:	7afb      	ldrb	r3, [r7, #11]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d10f      	bne.n	800ece0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	697a      	ldr	r2, [r7, #20]
 800ecd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ecde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	371c      	adds	r7, #28
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop
 800ecf0:	4f54300a 	.word	0x4f54300a

0800ecf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3301      	adds	r3, #1
 800ed04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	4a13      	ldr	r2, [pc, #76]	; (800ed58 <USB_CoreReset+0x64>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d901      	bls.n	800ed12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	e01b      	b.n	800ed4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	daf2      	bge.n	800ed00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	691b      	ldr	r3, [r3, #16]
 800ed22:	f043 0201 	orr.w	r2, r3, #1
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	4a09      	ldr	r2, [pc, #36]	; (800ed58 <USB_CoreReset+0x64>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d901      	bls.n	800ed3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ed38:	2303      	movs	r3, #3
 800ed3a:	e006      	b.n	800ed4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	691b      	ldr	r3, [r3, #16]
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d0f0      	beq.n	800ed2a <USB_CoreReset+0x36>

  return HAL_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop
 800ed58:	00030d40 	.word	0x00030d40

0800ed5c <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time =0;
uint8_t invoke_date =0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a13      	ldr	r2, [pc, #76]	; (800edb4 <HAL_UART_RxCpltCallback+0x58>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d11f      	bne.n	800edac <HAL_UART_RxCpltCallback+0x50>
 800ed6c:	4b12      	ldr	r3, [pc, #72]	; (800edb8 <HAL_UART_RxCpltCallback+0x5c>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d01b      	beq.n	800edac <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800ed74:	2201      	movs	r2, #1
 800ed76:	4911      	ldr	r1, [pc, #68]	; (800edbc <HAL_UART_RxCpltCallback+0x60>)
 800ed78:	480e      	ldr	r0, [pc, #56]	; (800edb4 <HAL_UART_RxCpltCallback+0x58>)
 800ed7a:	f7fc fe37 	bl	800b9ec <HAL_UART_Receive_IT>
				UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800ed7e:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <HAL_UART_RxCpltCallback+0x64>)
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10a      	bne.n	800ed9c <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800ed86:	4b0d      	ldr	r3, [pc, #52]	; (800edbc <HAL_UART_RxCpltCallback+0x60>)
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800ed8c:	4b0d      	ldr	r3, [pc, #52]	; (800edc4 <HAL_UART_RxCpltCallback+0x68>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	7bfa      	ldrb	r2, [r7, #15]
 800ed92:	4611      	mov	r1, r2
 800ed94:	4618      	mov	r0, r3
 800ed96:	f001 ff39 	bl	8010c0c <embeddedCliReceiveChar>
 800ed9a:	e002      	b.n	800eda2 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800ed9c:	4b0a      	ldr	r3, [pc, #40]	; (800edc8 <HAL_UART_RxCpltCallback+0x6c>)
 800ed9e:	2201      	movs	r2, #1
 800eda0:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800eda2:	f7f4 fed9 	bl	8003b58 <HAL_GetTick>
 800eda6:	4603      	mov	r3, r0
 800eda8:	4a08      	ldr	r2, [pc, #32]	; (800edcc <HAL_UART_RxCpltCallback+0x70>)
 800edaa:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800edac:	bf00      	nop
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}
 800edb4:	200019a0 	.word	0x200019a0
 800edb8:	20001a5d 	.word	0x20001a5d
 800edbc:	20001a5c 	.word	0x20001a5c
 800edc0:	20001a5e 	.word	0x20001a5e
 800edc4:	20001a50 	.word	0x20001a50
 800edc8:	20001a5f 	.word	0x20001a5f
 800edcc:	200016f8 	.word	0x200016f8

0800edd0 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	460b      	mov	r3, r1
 800edda:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800eddc:	78fb      	ldrb	r3, [r7, #3]
 800edde:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800ede0:	f107 010f 	add.w	r1, r7, #15
 800ede4:	2364      	movs	r3, #100	; 0x64
 800ede6:	2201      	movs	r2, #1
 800ede8:	4803      	ldr	r0, [pc, #12]	; (800edf8 <writeCharToCli+0x28>)
 800edea:	f7fc fd6d 	bl	800b8c8 <HAL_UART_Transmit>
}
 800edee:	bf00      	nop
 800edf0:	3710      	adds	r7, #16
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	200019a0 	.word	0x200019a0

0800edfc <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800edfc:	b40e      	push	{r1, r2, r3}
 800edfe:	b580      	push	{r7, lr}
 800ee00:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ee0a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ee0e:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800ee10:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800ee14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ee18:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ee1c:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800ee1e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ee22:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ee26:	f107 000c 	add.w	r0, r7, #12
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800ee30:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ee34:	f00e fb6a 	bl	801d50c <vsniprintf>
 800ee38:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800ee3c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	da08      	bge.n	800ee56 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800ee44:	4b0c      	ldr	r3, [pc, #48]	; (800ee78 <cli_printf+0x7c>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	221d      	movs	r2, #29
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	480b      	ldr	r0, [pc, #44]	; (800ee7c <cli_printf+0x80>)
 800ee50:	f00c fb66 	bl	801b520 <fwrite>
 800ee54:	e009      	b.n	800ee6a <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800ee56:	f107 020c 	add.w	r2, r7, #12
 800ee5a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ee5e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ee62:	4611      	mov	r1, r2
 800ee64:	6818      	ldr	r0, [r3, #0]
 800ee66:	f001 ffb7 	bl	8010dd8 <embeddedCliPrint>
}
 800ee6a:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee74:	b003      	add	sp, #12
 800ee76:	4770      	bx	lr
 800ee78:	20000144 	.word	0x20000144
 800ee7c:	08020698 	.word	0x08020698

0800ee80 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b088      	sub	sp, #32
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61fb      	str	r3, [r7, #28]
	   int i, j;
	prev_max_wait_time = HAL_GetTick();
 800ee90:	f7f4 fe62 	bl	8003b58 <HAL_GetTick>
 800ee94:	4603      	mov	r3, r0
 800ee96:	4a5b      	ldr	r2, [pc, #364]	; (800f004 <receiveString+0x184>)
 800ee98:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800ee9a:	4b5b      	ldr	r3, [pc, #364]	; (800f008 <receiveString+0x188>)
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f000 80a0 	beq.w	800efe4 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800eea4:	4b59      	ldr	r3, [pc, #356]	; (800f00c <receiveString+0x18c>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	2b0d      	cmp	r3, #13
 800eeaa:	d004      	beq.n	800eeb6 <receiveString+0x36>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	69fa      	ldr	r2, [r7, #28]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d164      	bne.n	800ef80 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	4413      	add	r3, r2
 800eebc:	2200      	movs	r2, #0
 800eebe:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800eec0:	4b51      	ldr	r3, [pc, #324]	; (800f008 <receiveString+0x188>)
 800eec2:	2200      	movs	r2, #0
 800eec4:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				  //Iterating each character and removing non alphabetical characters.
				    for( i = 0; buffer[i] != '\0'; ++i)
 800eec6:	2300      	movs	r3, #0
 800eec8:	61bb      	str	r3, [r7, #24]
 800eeca:	e052      	b.n	800ef72 <receiveString+0xf2>
								|| buffer[i] == '_'
								|| buffer[i] == ':'
								|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
								|| buffer[i] == '\0') )
				        {
				            for( j = i; buffer[j] != '\0'; ++j)
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	617b      	str	r3, [r7, #20]
 800eed0:	e00b      	b.n	800eeea <receiveString+0x6a>
				            {
				            	buffer[j] = buffer[j+1];
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	3301      	adds	r3, #1
 800eed6:	68ba      	ldr	r2, [r7, #8]
 800eed8:	441a      	add	r2, r3
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	68b9      	ldr	r1, [r7, #8]
 800eede:	440b      	add	r3, r1
 800eee0:	7812      	ldrb	r2, [r2, #0]
 800eee2:	701a      	strb	r2, [r3, #0]
				            for( j = i; buffer[j] != '\0'; ++j)
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	3301      	adds	r3, #1
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	68ba      	ldr	r2, [r7, #8]
 800eeee:	4413      	add	r3, r2
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1ed      	bne.n	800eed2 <receiveString+0x52>
				            }
				            buffer[j] = '\0';
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	68ba      	ldr	r2, [r7, #8]
 800eefa:	4413      	add	r3, r2
 800eefc:	2200      	movs	r2, #0
 800eefe:	701a      	strb	r2, [r3, #0]
				        while (!( (buffer[i] >= 'a' && buffer[i] <= 'z')
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	4413      	add	r3, r2
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	2b60      	cmp	r3, #96	; 0x60
 800ef0a:	d905      	bls.n	800ef18 <receiveString+0x98>
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	4413      	add	r3, r2
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	2b7a      	cmp	r3, #122	; 0x7a
 800ef16:	d929      	bls.n	800ef6c <receiveString+0xec>
				        		|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2b40      	cmp	r3, #64	; 0x40
 800ef22:	d905      	bls.n	800ef30 <receiveString+0xb0>
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	4413      	add	r3, r2
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	2b5a      	cmp	r3, #90	; 0x5a
 800ef2e:	d91d      	bls.n	800ef6c <receiveString+0xec>
								|| buffer[i] == '_'
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	4413      	add	r3, r2
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	2b5f      	cmp	r3, #95	; 0x5f
 800ef3a:	d017      	beq.n	800ef6c <receiveString+0xec>
								|| buffer[i] == ':'
 800ef3c:	69bb      	ldr	r3, [r7, #24]
 800ef3e:	68ba      	ldr	r2, [r7, #8]
 800ef40:	4413      	add	r3, r2
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	2b3a      	cmp	r3, #58	; 0x3a
 800ef46:	d011      	beq.n	800ef6c <receiveString+0xec>
								|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	68ba      	ldr	r2, [r7, #8]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	2b2f      	cmp	r3, #47	; 0x2f
 800ef52:	d905      	bls.n	800ef60 <receiveString+0xe0>
 800ef54:	69bb      	ldr	r3, [r7, #24]
 800ef56:	68ba      	ldr	r2, [r7, #8]
 800ef58:	4413      	add	r3, r2
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	2b39      	cmp	r3, #57	; 0x39
 800ef5e:	d905      	bls.n	800ef6c <receiveString+0xec>
								|| buffer[i] == '\0') )
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	4413      	add	r3, r2
 800ef66:	781b      	ldrb	r3, [r3, #0]
				        while (!( (buffer[i] >= 'a' && buffer[i] <= 'z')
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1af      	bne.n	800eecc <receiveString+0x4c>
				    for( i = 0; buffer[i] != '\0'; ++i)
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	3301      	adds	r3, #1
 800ef70:	61bb      	str	r3, [r7, #24]
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	68ba      	ldr	r2, [r7, #8]
 800ef76:	4413      	add	r3, r2
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1c0      	bne.n	800ef00 <receiveString+0x80>
				        }
				    }
				break;
 800ef7e:	e03d      	b.n	800effc <receiveString+0x17c>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b' || UART_CLI_rxBuffer[0] == 0x7F))
 800ef80:	4b22      	ldr	r3, [pc, #136]	; (800f00c <receiveString+0x18c>)
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	2b08      	cmp	r3, #8
 800ef86:	d003      	beq.n	800ef90 <receiveString+0x110>
 800ef88:	4b20      	ldr	r3, [pc, #128]	; (800f00c <receiveString+0x18c>)
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ef8e:	d117      	bne.n	800efc0 <receiveString+0x140>
				{
			        cli->writeChar(cli, '\b');
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2108      	movs	r1, #8
 800ef96:	68f8      	ldr	r0, [r7, #12]
 800ef98:	4798      	blx	r3
			        cli->writeChar(cli, ' ');
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2120      	movs	r1, #32
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	4798      	blx	r3
			        cli->writeChar(cli, '\b');
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2108      	movs	r1, #8
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	4798      	blx	r3
					--index;
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	3b01      	subs	r3, #1
 800efb2:	61fb      	str	r3, [r7, #28]
				  	buffer[index] = '\0';
 800efb4:	68ba      	ldr	r2, [r7, #8]
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	4413      	add	r3, r2
 800efba:	2200      	movs	r2, #0
 800efbc:	701a      	strb	r2, [r3, #0]
 800efbe:	e00e      	b.n	800efde <receiveString+0x15e>
				}
				else
				{
				buffer[index++] = UART_CLI_rxBuffer[0];
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	1c5a      	adds	r2, r3, #1
 800efc4:	61fa      	str	r2, [r7, #28]
 800efc6:	68ba      	ldr	r2, [r7, #8]
 800efc8:	4413      	add	r3, r2
 800efca:	4a10      	ldr	r2, [pc, #64]	; (800f00c <receiveString+0x18c>)
 800efcc:	7812      	ldrb	r2, [r2, #0]
 800efce:	701a      	strb	r2, [r3, #0]
				cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4a0d      	ldr	r2, [pc, #52]	; (800f00c <receiveString+0x18c>)
 800efd6:	7812      	ldrb	r2, [r2, #0]
 800efd8:	4611      	mov	r1, r2
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800efde:	4b0a      	ldr	r3, [pc, #40]	; (800f008 <receiveString+0x188>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GetTick() - prev_max_wait_time > max_wait_time)
 800efe4:	f7f4 fdb8 	bl	8003b58 <HAL_GetTick>
 800efe8:	4602      	mov	r2, r0
 800efea:	4b06      	ldr	r3, [pc, #24]	; (800f004 <receiveString+0x184>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	1ad2      	subs	r2, r2, r3
 800eff0:	4b07      	ldr	r3, [pc, #28]	; (800f010 <receiveString+0x190>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d800      	bhi.n	800effa <receiveString+0x17a>
		if (flag_cli) {
 800eff8:	e74f      	b.n	800ee9a <receiveString+0x1a>
		{
          //we break the loop if time goes above 5min
			break;
 800effa:	bf00      	nop
		}

	}
}
 800effc:	bf00      	nop
 800effe:	3720      	adds	r7, #32
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	20001a54 	.word	0x20001a54
 800f008:	20001a5f 	.word	0x20001a5f
 800f00c:	20001a5c 	.word	0x20001a5c
 800f010:	2000001c 	.word	0x2000001c

0800f014 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f020:	4903      	ldr	r1, [pc, #12]	; (800f030 <onClearCLI+0x1c>)
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f7ff feea 	bl	800edfc <cli_printf>
}
 800f028:	bf00      	nop
 800f02a:	3710      	adds	r7, #16
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	080206b8 	.word	0x080206b8

0800f034 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f034:	b580      	push	{r7, lr}
 800f036:	b092      	sub	sp, #72	; 0x48
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f040:	4b24      	ldr	r3, [pc, #144]	; (800f0d4 <debug_scd4x_PM25+0xa0>)
 800f042:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to enable debug for scd4x and PM y/n?");
 800f044:	4924      	ldr	r1, [pc, #144]	; (800f0d8 <debug_scd4x_PM25+0xa4>)
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	f7ff fed8 	bl	800edfc <cli_printf>

	cli_other = 1;
 800f04c:	4b23      	ldr	r3, [pc, #140]	; (800f0dc <debug_scd4x_PM25+0xa8>)
 800f04e:	2201      	movs	r2, #1
 800f050:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800f052:	4b23      	ldr	r3, [pc, #140]	; (800f0e0 <debug_scd4x_PM25+0xac>)
 800f054:	2200      	movs	r2, #0
 800f056:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800f058:	f107 0310 	add.w	r3, r7, #16
 800f05c:	2232      	movs	r2, #50	; 0x32
 800f05e:	4619      	mov	r1, r3
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f7ff ff0d 	bl	800ee80 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f066:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f068:	f7f1 f8c4 	bl	80001f4 <strlen>
 800f06c:	4603      	mov	r3, r0
 800f06e:	b29a      	uxth	r2, r3
 800f070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f074:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f076:	481b      	ldr	r0, [pc, #108]	; (800f0e4 <debug_scd4x_PM25+0xb0>)
 800f078:	f7fc fc26 	bl	800b8c8 <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800f07c:	f107 0310 	add.w	r3, r7, #16
 800f080:	2179      	movs	r1, #121	; 0x79
 800f082:	4618      	mov	r0, r3
 800f084:	f00d fad8 	bl	801c638 <strchr>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d007      	beq.n	800f09e <debug_scd4x_PM25+0x6a>
		{
			debug_scd_pm=1;
 800f08e:	4b16      	ldr	r3, [pc, #88]	; (800f0e8 <debug_scd4x_PM25+0xb4>)
 800f090:	2201      	movs	r2, #1
 800f092:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug enabled");
 800f094:	4915      	ldr	r1, [pc, #84]	; (800f0ec <debug_scd4x_PM25+0xb8>)
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f7ff feb0 	bl	800edfc <cli_printf>
 800f09c:	e00f      	b.n	800f0be <debug_scd4x_PM25+0x8a>
		}
		else if(strstr(buffer, "n"))
 800f09e:	f107 0310 	add.w	r3, r7, #16
 800f0a2:	216e      	movs	r1, #110	; 0x6e
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f00d fac7 	bl	801c638 <strchr>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d006      	beq.n	800f0be <debug_scd4x_PM25+0x8a>
		{
			debug_scd_pm=0;
 800f0b0:	4b0d      	ldr	r3, [pc, #52]	; (800f0e8 <debug_scd4x_PM25+0xb4>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Debug disabled");
 800f0b6:	490e      	ldr	r1, [pc, #56]	; (800f0f0 <debug_scd4x_PM25+0xbc>)
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f7ff fe9f 	bl	800edfc <cli_printf>
		}


		flag_cli = 0;
 800f0be:	4b08      	ldr	r3, [pc, #32]	; (800f0e0 <debug_scd4x_PM25+0xac>)
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800f0c4:	4b05      	ldr	r3, [pc, #20]	; (800f0dc <debug_scd4x_PM25+0xa8>)
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	701a      	strb	r2, [r3, #0]
}
 800f0ca:	bf00      	nop
 800f0cc:	3748      	adds	r7, #72	; 0x48
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	080206c0 	.word	0x080206c0
 800f0d8:	080206c4 	.word	0x080206c4
 800f0dc:	20001a5e 	.word	0x20001a5e
 800f0e0:	20001a5f 	.word	0x20001a5f
 800f0e4:	200019a0 	.word	0x200019a0
 800f0e8:	200014b0 	.word	0x200014b0
 800f0ec:	080206f8 	.word	0x080206f8
 800f0f0:	08020708 	.word	0x08020708

0800f0f4 <DeviceSignature>:


void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli,"Device ID/Signature: %s.",	ver_GetUid());
 800f100:	f7f3 f908 	bl	8002314 <ver_GetUid>
 800f104:	4603      	mov	r3, r0
 800f106:	461a      	mov	r2, r3
 800f108:	4903      	ldr	r1, [pc, #12]	; (800f118 <DeviceSignature+0x24>)
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f7ff fe76 	bl	800edfc <cli_printf>
}
 800f110:	bf00      	nop
 800f112:	3710      	adds	r7, #16
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	08020718 	.word	0x08020718

0800f11c <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b092      	sub	sp, #72	; 0x48
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800f128:	4b2d      	ldr	r3, [pc, #180]	; (800f1e0 <SetID+0xc4>)
 800f12a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f12c:	492d      	ldr	r1, [pc, #180]	; (800f1e4 <SetID+0xc8>)
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f7ff fe64 	bl	800edfc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f134:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f136:	f7f1 f85d 	bl	80001f4 <strlen>
 800f13a:	4603      	mov	r3, r0
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f144:	4828      	ldr	r0, [pc, #160]	; (800f1e8 <SetID+0xcc>)
 800f146:	f7fc fbbf 	bl	800b8c8 <HAL_UART_Transmit>
	cli_printf(cli,"Set the ID. Keep ID below 30 characters");
 800f14a:	4928      	ldr	r1, [pc, #160]	; (800f1ec <SetID+0xd0>)
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7ff fe55 	bl	800edfc <cli_printf>
	cli_other = 1;
 800f152:	4b27      	ldr	r3, [pc, #156]	; (800f1f0 <SetID+0xd4>)
 800f154:	2201      	movs	r2, #1
 800f156:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f158:	4b26      	ldr	r3, [pc, #152]	; (800f1f4 <SetID+0xd8>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f15e:	f107 0310 	add.w	r3, r7, #16
 800f162:	2232      	movs	r2, #50	; 0x32
 800f164:	4619      	mov	r1, r3
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f7ff fe8a 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f16c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f16e:	f7f1 f841 	bl	80001f4 <strlen>
 800f172:	4603      	mov	r3, r0
 800f174:	b29a      	uxth	r2, r3
 800f176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f17a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f17c:	481a      	ldr	r0, [pc, #104]	; (800f1e8 <SetID+0xcc>)
 800f17e:	f7fc fba3 	bl	800b8c8 <HAL_UART_Transmit>

	len = strlen(buffer);
 800f182:	f107 0310 	add.w	r3, r7, #16
 800f186:	4618      	mov	r0, r3
 800f188:	f7f1 f834 	bl	80001f4 <strlen>
 800f18c:	4603      	mov	r3, r0
 800f18e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 30)
 800f192:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f196:	2b1d      	cmp	r3, #29
 800f198:	d814      	bhi.n	800f1c4 <SetID+0xa8>
	{
	   if(buffer[0] != '\0' )
 800f19a:	7c3b      	ldrb	r3, [r7, #16]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d015      	beq.n	800f1cc <SetID+0xb0>
		{if(buffer != NULL)
		{
			strcpy(_Flash_Packet.id,buffer);
 800f1a0:	f107 0310 	add.w	r3, r7, #16
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	4814      	ldr	r0, [pc, #80]	; (800f1f8 <SetID+0xdc>)
 800f1a8:	f00d fa53 	bl	801c652 <strcpy>
			set_param_flags();
 800f1ac:	4b13      	ldr	r3, [pc, #76]	; (800f1fc <SetID+0xe0>)
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	701a      	strb	r2, [r3, #0]
 800f1b2:	4b13      	ldr	r3, [pc, #76]	; (800f200 <SetID+0xe4>)
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"ID is set to: %s",_Flash_Packet.id);
 800f1b8:	4a0f      	ldr	r2, [pc, #60]	; (800f1f8 <SetID+0xdc>)
 800f1ba:	4912      	ldr	r1, [pc, #72]	; (800f204 <SetID+0xe8>)
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f7ff fe1d 	bl	800edfc <cli_printf>
 800f1c2:	e003      	b.n	800f1cc <SetID+0xb0>
		}
		}
	}
	else
	{
		cli_printf(cli,"ID is too long");
 800f1c4:	4910      	ldr	r1, [pc, #64]	; (800f208 <SetID+0xec>)
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f7ff fe18 	bl	800edfc <cli_printf>
	}

	flag_cli = 0;
 800f1cc:	4b09      	ldr	r3, [pc, #36]	; (800f1f4 <SetID+0xd8>)
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f1d2:	4b07      	ldr	r3, [pc, #28]	; (800f1f0 <SetID+0xd4>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	701a      	strb	r2, [r3, #0]

}
 800f1d8:	bf00      	nop
 800f1da:	3748      	adds	r7, #72	; 0x48
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	080206c0 	.word	0x080206c0
 800f1e4:	08020734 	.word	0x08020734
 800f1e8:	200019a0 	.word	0x200019a0
 800f1ec:	0802076c 	.word	0x0802076c
 800f1f0:	20001a5e 	.word	0x20001a5e
 800f1f4:	20001a5f 	.word	0x20001a5f
 800f1f8:	200013a9 	.word	0x200013a9
 800f1fc:	200014b1 	.word	0x200014b1
 800f200:	200014b2 	.word	0x200014b2
 800f204:	08020794 	.word	0x08020794
 800f208:	080207a8 	.word	0x080207a8

0800f20c <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b092      	sub	sp, #72	; 0x48
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800f218:	4b2d      	ldr	r3, [pc, #180]	; (800f2d0 <SetLocation+0xc4>)
 800f21a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f21c:	492d      	ldr	r1, [pc, #180]	; (800f2d4 <SetLocation+0xc8>)
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f7ff fdec 	bl	800edfc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f224:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f226:	f7f0 ffe5 	bl	80001f4 <strlen>
 800f22a:	4603      	mov	r3, r0
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f234:	4828      	ldr	r0, [pc, #160]	; (800f2d8 <SetLocation+0xcc>)
 800f236:	f7fc fb47 	bl	800b8c8 <HAL_UART_Transmit>
	cli_printf(cli,"Set the Location. Keep Location below 15 characters");
 800f23a:	4928      	ldr	r1, [pc, #160]	; (800f2dc <SetLocation+0xd0>)
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f7ff fddd 	bl	800edfc <cli_printf>
	cli_other = 1;
 800f242:	4b27      	ldr	r3, [pc, #156]	; (800f2e0 <SetLocation+0xd4>)
 800f244:	2201      	movs	r2, #1
 800f246:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f248:	4b26      	ldr	r3, [pc, #152]	; (800f2e4 <SetLocation+0xd8>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f24e:	f107 0310 	add.w	r3, r7, #16
 800f252:	2232      	movs	r2, #50	; 0x32
 800f254:	4619      	mov	r1, r3
 800f256:	68f8      	ldr	r0, [r7, #12]
 800f258:	f7ff fe12 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f25c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f25e:	f7f0 ffc9 	bl	80001f4 <strlen>
 800f262:	4603      	mov	r3, r0
 800f264:	b29a      	uxth	r2, r3
 800f266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f26a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f26c:	481a      	ldr	r0, [pc, #104]	; (800f2d8 <SetLocation+0xcc>)
 800f26e:	f7fc fb2b 	bl	800b8c8 <HAL_UART_Transmit>

	len = strlen(buffer);
 800f272:	f107 0310 	add.w	r3, r7, #16
 800f276:	4618      	mov	r0, r3
 800f278:	f7f0 ffbc 	bl	80001f4 <strlen>
 800f27c:	4603      	mov	r3, r0
 800f27e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800f282:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f286:	2b0e      	cmp	r3, #14
 800f288:	d814      	bhi.n	800f2b4 <SetLocation+0xa8>
	{
		if(buffer[0] != '\0' )
 800f28a:	7c3b      	ldrb	r3, [r7, #16]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d015      	beq.n	800f2bc <SetLocation+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.location,buffer);
 800f290:	f107 0310 	add.w	r3, r7, #16
 800f294:	4619      	mov	r1, r3
 800f296:	4814      	ldr	r0, [pc, #80]	; (800f2e8 <SetLocation+0xdc>)
 800f298:	f00d f9db 	bl	801c652 <strcpy>
			set_param_flags();
 800f29c:	4b13      	ldr	r3, [pc, #76]	; (800f2ec <SetLocation+0xe0>)
 800f29e:	2201      	movs	r2, #1
 800f2a0:	701a      	strb	r2, [r3, #0]
 800f2a2:	4b13      	ldr	r3, [pc, #76]	; (800f2f0 <SetLocation+0xe4>)
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"Location is set to: %s",_Flash_Packet.location);
 800f2a8:	4a0f      	ldr	r2, [pc, #60]	; (800f2e8 <SetLocation+0xdc>)
 800f2aa:	4912      	ldr	r1, [pc, #72]	; (800f2f4 <SetLocation+0xe8>)
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f7ff fda5 	bl	800edfc <cli_printf>
 800f2b2:	e003      	b.n	800f2bc <SetLocation+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"Location is too long");
 800f2b4:	4910      	ldr	r1, [pc, #64]	; (800f2f8 <SetLocation+0xec>)
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f7ff fda0 	bl	800edfc <cli_printf>
	}

	flag_cli = 0;
 800f2bc:	4b09      	ldr	r3, [pc, #36]	; (800f2e4 <SetLocation+0xd8>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f2c2:	4b07      	ldr	r3, [pc, #28]	; (800f2e0 <SetLocation+0xd4>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	701a      	strb	r2, [r3, #0]

}
 800f2c8:	bf00      	nop
 800f2ca:	3748      	adds	r7, #72	; 0x48
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	080206c0 	.word	0x080206c0
 800f2d4:	08020734 	.word	0x08020734
 800f2d8:	200019a0 	.word	0x200019a0
 800f2dc:	080207b8 	.word	0x080207b8
 800f2e0:	20001a5e 	.word	0x20001a5e
 800f2e4:	20001a5f 	.word	0x20001a5f
 800f2e8:	200013db 	.word	0x200013db
 800f2ec:	200014b1 	.word	0x200014b1
 800f2f0:	200014b2 	.word	0x200014b2
 800f2f4:	080207ec 	.word	0x080207ec
 800f2f8:	08020804 	.word	0x08020804

0800f2fc <Setname>:

void Setname(EmbeddedCli *cli, char *args, void *context) {
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b092      	sub	sp, #72	; 0x48
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800f308:	4b2d      	ldr	r3, [pc, #180]	; (800f3c0 <Setname+0xc4>)
 800f30a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f30c:	492d      	ldr	r1, [pc, #180]	; (800f3c4 <Setname+0xc8>)
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f7ff fd74 	bl	800edfc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f314:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f316:	f7f0 ff6d 	bl	80001f4 <strlen>
 800f31a:	4603      	mov	r3, r0
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f324:	4828      	ldr	r0, [pc, #160]	; (800f3c8 <Setname+0xcc>)
 800f326:	f7fc facf 	bl	800b8c8 <HAL_UART_Transmit>
	cli_printf(cli,"Set the name. Keep name below 15 characters");
 800f32a:	4928      	ldr	r1, [pc, #160]	; (800f3cc <Setname+0xd0>)
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7ff fd65 	bl	800edfc <cli_printf>
	cli_other = 1;
 800f332:	4b27      	ldr	r3, [pc, #156]	; (800f3d0 <Setname+0xd4>)
 800f334:	2201      	movs	r2, #1
 800f336:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f338:	4b26      	ldr	r3, [pc, #152]	; (800f3d4 <Setname+0xd8>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f33e:	f107 0310 	add.w	r3, r7, #16
 800f342:	2232      	movs	r2, #50	; 0x32
 800f344:	4619      	mov	r1, r3
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff fd9a 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f34c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f34e:	f7f0 ff51 	bl	80001f4 <strlen>
 800f352:	4603      	mov	r3, r0
 800f354:	b29a      	uxth	r2, r3
 800f356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f35a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f35c:	481a      	ldr	r0, [pc, #104]	; (800f3c8 <Setname+0xcc>)
 800f35e:	f7fc fab3 	bl	800b8c8 <HAL_UART_Transmit>

	len = strlen(buffer);
 800f362:	f107 0310 	add.w	r3, r7, #16
 800f366:	4618      	mov	r0, r3
 800f368:	f7f0 ff44 	bl	80001f4 <strlen>
 800f36c:	4603      	mov	r3, r0
 800f36e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800f372:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f376:	2b0e      	cmp	r3, #14
 800f378:	d814      	bhi.n	800f3a4 <Setname+0xa8>
	{
		   if(buffer[0] != '\0' )
 800f37a:	7c3b      	ldrb	r3, [r7, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d015      	beq.n	800f3ac <Setname+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.name,buffer);
 800f380:	f107 0310 	add.w	r3, r7, #16
 800f384:	4619      	mov	r1, r3
 800f386:	4814      	ldr	r0, [pc, #80]	; (800f3d8 <Setname+0xdc>)
 800f388:	f00d f963 	bl	801c652 <strcpy>
			set_param_flags();
 800f38c:	4b13      	ldr	r3, [pc, #76]	; (800f3dc <Setname+0xe0>)
 800f38e:	2201      	movs	r2, #1
 800f390:	701a      	strb	r2, [r3, #0]
 800f392:	4b13      	ldr	r3, [pc, #76]	; (800f3e0 <Setname+0xe4>)
 800f394:	2201      	movs	r2, #1
 800f396:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"name is set to: %s",_Flash_Packet.name);
 800f398:	4a0f      	ldr	r2, [pc, #60]	; (800f3d8 <Setname+0xdc>)
 800f39a:	4912      	ldr	r1, [pc, #72]	; (800f3e4 <Setname+0xe8>)
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f7ff fd2d 	bl	800edfc <cli_printf>
 800f3a2:	e003      	b.n	800f3ac <Setname+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"name is too long");
 800f3a4:	4910      	ldr	r1, [pc, #64]	; (800f3e8 <Setname+0xec>)
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f7ff fd28 	bl	800edfc <cli_printf>
	}

	flag_cli = 0;
 800f3ac:	4b09      	ldr	r3, [pc, #36]	; (800f3d4 <Setname+0xd8>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f3b2:	4b07      	ldr	r3, [pc, #28]	; (800f3d0 <Setname+0xd4>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	701a      	strb	r2, [r3, #0]

}
 800f3b8:	bf00      	nop
 800f3ba:	3748      	adds	r7, #72	; 0x48
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	080206c0 	.word	0x080206c0
 800f3c4:	08020734 	.word	0x08020734
 800f3c8:	200019a0 	.word	0x200019a0
 800f3cc:	0802081c 	.word	0x0802081c
 800f3d0:	20001a5e 	.word	0x20001a5e
 800f3d4:	20001a5f 	.word	0x20001a5f
 800f3d8:	2000140d 	.word	0x2000140d
 800f3dc:	200014b1 	.word	0x200014b1
 800f3e0:	200014b2 	.word	0x200014b2
 800f3e4:	08020848 	.word	0x08020848
 800f3e8:	0802085c 	.word	0x0802085c

0800f3ec <Setgroup>:

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b092      	sub	sp, #72	; 0x48
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	607a      	str	r2, [r7, #4]
	uint16_t len;
    const char *newLine = "\r\n";
 800f3f8:	4b2d      	ldr	r3, [pc, #180]	; (800f4b0 <Setgroup+0xc4>)
 800f3fa:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f3fc:	492d      	ldr	r1, [pc, #180]	; (800f4b4 <Setgroup+0xc8>)
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f7ff fcfc 	bl	800edfc <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f404:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f406:	f7f0 fef5 	bl	80001f4 <strlen>
 800f40a:	4603      	mov	r3, r0
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f414:	4828      	ldr	r0, [pc, #160]	; (800f4b8 <Setgroup+0xcc>)
 800f416:	f7fc fa57 	bl	800b8c8 <HAL_UART_Transmit>
	cli_printf(cli,"Set the group. Keep name below 15 characters");
 800f41a:	4928      	ldr	r1, [pc, #160]	; (800f4bc <Setgroup+0xd0>)
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f7ff fced 	bl	800edfc <cli_printf>
	cli_other = 1;
 800f422:	4b27      	ldr	r3, [pc, #156]	; (800f4c0 <Setgroup+0xd4>)
 800f424:	2201      	movs	r2, #1
 800f426:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f428:	4b26      	ldr	r3, [pc, #152]	; (800f4c4 <Setgroup+0xd8>)
 800f42a:	2200      	movs	r2, #0
 800f42c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f42e:	f107 0310 	add.w	r3, r7, #16
 800f432:	2232      	movs	r2, #50	; 0x32
 800f434:	4619      	mov	r1, r3
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f7ff fd22 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f43c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f43e:	f7f0 fed9 	bl	80001f4 <strlen>
 800f442:	4603      	mov	r3, r0
 800f444:	b29a      	uxth	r2, r3
 800f446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f44a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f44c:	481a      	ldr	r0, [pc, #104]	; (800f4b8 <Setgroup+0xcc>)
 800f44e:	f7fc fa3b 	bl	800b8c8 <HAL_UART_Transmit>

	len = strlen(buffer);
 800f452:	f107 0310 	add.w	r3, r7, #16
 800f456:	4618      	mov	r0, r3
 800f458:	f7f0 fecc 	bl	80001f4 <strlen>
 800f45c:	4603      	mov	r3, r0
 800f45e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if(len < 15)
 800f462:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f466:	2b0e      	cmp	r3, #14
 800f468:	d814      	bhi.n	800f494 <Setgroup+0xa8>
	{
		   if(buffer[0] != '\0' )
 800f46a:	7c3b      	ldrb	r3, [r7, #16]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d015      	beq.n	800f49c <Setgroup+0xb0>
		   {
		if(buffer != NULL)
		{
			strcpy(_Flash_Packet.group,buffer);
 800f470:	f107 0310 	add.w	r3, r7, #16
 800f474:	4619      	mov	r1, r3
 800f476:	4814      	ldr	r0, [pc, #80]	; (800f4c8 <Setgroup+0xdc>)
 800f478:	f00d f8eb 	bl	801c652 <strcpy>
			set_param_flags();
 800f47c:	4b13      	ldr	r3, [pc, #76]	; (800f4cc <Setgroup+0xe0>)
 800f47e:	2201      	movs	r2, #1
 800f480:	701a      	strb	r2, [r3, #0]
 800f482:	4b13      	ldr	r3, [pc, #76]	; (800f4d0 <Setgroup+0xe4>)
 800f484:	2201      	movs	r2, #1
 800f486:	701a      	strb	r2, [r3, #0]
			cli_printf(cli,"group is set to: %s",_Flash_Packet.group);
 800f488:	4a0f      	ldr	r2, [pc, #60]	; (800f4c8 <Setgroup+0xdc>)
 800f48a:	4912      	ldr	r1, [pc, #72]	; (800f4d4 <Setgroup+0xe8>)
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f7ff fcb5 	bl	800edfc <cli_printf>
 800f492:	e003      	b.n	800f49c <Setgroup+0xb0>
		}
		   }
	}
	else
	{
		cli_printf(cli,"group is too long");
 800f494:	4910      	ldr	r1, [pc, #64]	; (800f4d8 <Setgroup+0xec>)
 800f496:	68f8      	ldr	r0, [r7, #12]
 800f498:	f7ff fcb0 	bl	800edfc <cli_printf>
	}

	flag_cli = 0;
 800f49c:	4b09      	ldr	r3, [pc, #36]	; (800f4c4 <Setgroup+0xd8>)
 800f49e:	2200      	movs	r2, #0
 800f4a0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f4a2:	4b07      	ldr	r3, [pc, #28]	; (800f4c0 <Setgroup+0xd4>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	701a      	strb	r2, [r3, #0]

}
 800f4a8:	bf00      	nop
 800f4aa:	3748      	adds	r7, #72	; 0x48
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	080206c0 	.word	0x080206c0
 800f4b4:	08020734 	.word	0x08020734
 800f4b8:	200019a0 	.word	0x200019a0
 800f4bc:	08020870 	.word	0x08020870
 800f4c0:	20001a5e 	.word	0x20001a5e
 800f4c4:	20001a5f 	.word	0x20001a5f
 800f4c8:	2000143f 	.word	0x2000143f
 800f4cc:	200014b1 	.word	0x200014b1
 800f4d0:	200014b2 	.word	0x200014b2
 800f4d4:	080208a0 	.word	0x080208a0
 800f4d8:	080208b4 	.word	0x080208b4

0800f4dc <GetID>:




void GetID(EmbeddedCli *cli, char *args, void *context) {
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"ID: %s",	_Flash_Packet.id);
 800f4e8:	4a04      	ldr	r2, [pc, #16]	; (800f4fc <GetID+0x20>)
 800f4ea:	4905      	ldr	r1, [pc, #20]	; (800f500 <GetID+0x24>)
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f7ff fc85 	bl	800edfc <cli_printf>
}
 800f4f2:	bf00      	nop
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	200013a9 	.word	0x200013a9
 800f500:	080208c8 	.word	0x080208c8

0800f504 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Location: %s",	_Flash_Packet.location);
 800f510:	4a04      	ldr	r2, [pc, #16]	; (800f524 <GetLocation+0x20>)
 800f512:	4905      	ldr	r1, [pc, #20]	; (800f528 <GetLocation+0x24>)
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f7ff fc71 	bl	800edfc <cli_printf>

}
 800f51a:	bf00      	nop
 800f51c:	3710      	adds	r7, #16
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	200013db 	.word	0x200013db
 800f528:	080208d0 	.word	0x080208d0

0800f52c <Getname>:

void Getname(EmbeddedCli *cli, char *args, void *context) {
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Name: %s",	_Flash_Packet.name);
 800f538:	4a04      	ldr	r2, [pc, #16]	; (800f54c <Getname+0x20>)
 800f53a:	4905      	ldr	r1, [pc, #20]	; (800f550 <Getname+0x24>)
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f7ff fc5d 	bl	800edfc <cli_printf>

}
 800f542:	bf00      	nop
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	2000140d 	.word	0x2000140d
 800f550:	080208e0 	.word	0x080208e0

0800f554 <Getgroup>:

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
	cli_printf(cli,"Group: %s",	_Flash_Packet.group);
 800f560:	4a04      	ldr	r2, [pc, #16]	; (800f574 <Getgroup+0x20>)
 800f562:	4905      	ldr	r1, [pc, #20]	; (800f578 <Getgroup+0x24>)
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f7ff fc49 	bl	800edfc <cli_printf>

}
 800f56a:	bf00      	nop
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	2000143f 	.word	0x2000143f
 800f578:	080208ec 	.word	0x080208ec

0800f57c <SetDate>:





void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b09a      	sub	sp, #104	; 0x68
 800f580:	af02      	add	r7, sp, #8
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800f588:	4b26      	ldr	r3, [pc, #152]	; (800f624 <SetDate+0xa8>)
 800f58a:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set date in following format: day:month:year eg:(15:1:23).");
 800f58c:	4926      	ldr	r1, [pc, #152]	; (800f628 <SetDate+0xac>)
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f7ff fc34 	bl	800edfc <cli_printf>
	cli_other = 1;
 800f594:	4b25      	ldr	r3, [pc, #148]	; (800f62c <SetDate+0xb0>)
 800f596:	2201      	movs	r2, #1
 800f598:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f59a:	4b25      	ldr	r3, [pc, #148]	; (800f630 <SetDate+0xb4>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f5a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5a4:	2232      	movs	r2, #50	; 0x32
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f7ff fc69 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f5ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f5b0:	f7f0 fe20 	bl	80001f4 <strlen>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f5bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f5be:	481d      	ldr	r0, [pc, #116]	; (800f634 <SetDate+0xb8>)
 800f5c0:	f7fc f982 	bl	800b8c8 <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800f5c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d004      	beq.n	800f5d6 <SetDate+0x5a>
	{
	Set_Date(buffer);
 800f5cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f002 fddb 	bl	801218c <Set_Date>
	}
	flag_cli = 0;
 800f5d6:	4b16      	ldr	r3, [pc, #88]	; (800f630 <SetDate+0xb4>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f5dc:	4b13      	ldr	r3, [pc, #76]	; (800f62c <SetDate+0xb0>)
 800f5de:	2200      	movs	r2, #0
 800f5e0:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f5e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	4813      	ldr	r0, [pc, #76]	; (800f638 <SetDate+0xbc>)
 800f5ec:	f7f9 fe28 	bl	8009240 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f5f0:	f107 0310 	add.w	r3, r7, #16
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	480f      	ldr	r0, [pc, #60]	; (800f638 <SetDate+0xbc>)
 800f5fa:	f7f9 fd3f 	bl	800907c <HAL_RTC_GetTime>
	cli_printf(cli,"Set Date: %02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800f5fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f602:	461a      	mov	r2, r3
 800f604:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f608:	4619      	mov	r1, r3
 800f60a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	460b      	mov	r3, r1
 800f612:	490a      	ldr	r1, [pc, #40]	; (800f63c <SetDate+0xc0>)
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	f7ff fbf1 	bl	800edfc <cli_printf>

}
 800f61a:	bf00      	nop
 800f61c:	3760      	adds	r7, #96	; 0x60
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	080206c0 	.word	0x080206c0
 800f628:	080208f8 	.word	0x080208f8
 800f62c:	20001a5e 	.word	0x20001a5e
 800f630:	20001a5f 	.word	0x20001a5f
 800f634:	200019a0 	.word	0x200019a0
 800f638:	200017c4 	.word	0x200017c4
 800f63c:	08020934 	.word	0x08020934

0800f640 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800f640:	b580      	push	{r7, lr}
 800f642:	b09a      	sub	sp, #104	; 0x68
 800f644:	af02      	add	r7, sp, #8
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
    const char *newLine = "\r\n";
 800f64c:	4b26      	ldr	r3, [pc, #152]	; (800f6e8 <SetTime+0xa8>)
 800f64e:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
 800f650:	4926      	ldr	r1, [pc, #152]	; (800f6ec <SetTime+0xac>)
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f7ff fbd2 	bl	800edfc <cli_printf>
	cli_other = 1;
 800f658:	4b25      	ldr	r3, [pc, #148]	; (800f6f0 <SetTime+0xb0>)
 800f65a:	2201      	movs	r2, #1
 800f65c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f65e:	4b25      	ldr	r3, [pc, #148]	; (800f6f4 <SetTime+0xb4>)
 800f660:	2200      	movs	r2, #0
 800f662:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f668:	2232      	movs	r2, #50	; 0x32
 800f66a:	4619      	mov	r1, r3
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f7ff fc07 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f672:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f674:	f7f0 fdbe 	bl	80001f4 <strlen>
 800f678:	4603      	mov	r3, r0
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f680:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f682:	481d      	ldr	r0, [pc, #116]	; (800f6f8 <SetTime+0xb8>)
 800f684:	f7fc f920 	bl	800b8c8 <HAL_UART_Transmit>
	if(buffer[0] != '\0' )
 800f688:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d004      	beq.n	800f69a <SetTime+0x5a>
	{
	Set_Time(buffer);
 800f690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f694:	4618      	mov	r0, r3
 800f696:	f002 fe1b 	bl	80122d0 <Set_Time>
    }
	flag_cli = 0;
 800f69a:	4b16      	ldr	r3, [pc, #88]	; (800f6f4 <SetTime+0xb4>)
 800f69c:	2200      	movs	r2, #0
 800f69e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f6a0:	4b13      	ldr	r3, [pc, #76]	; (800f6f0 <SetTime+0xb0>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800f6a6:	4b15      	ldr	r3, [pc, #84]	; (800f6fc <SetTime+0xbc>)
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f6ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	4812      	ldr	r0, [pc, #72]	; (800f700 <SetTime+0xc0>)
 800f6b6:	f7f9 fdc3 	bl	8009240 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f6ba:	f107 0310 	add.w	r3, r7, #16
 800f6be:	2200      	movs	r2, #0
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	480f      	ldr	r0, [pc, #60]	; (800f700 <SetTime+0xc0>)
 800f6c4:	f7f9 fcda 	bl	800907c <HAL_RTC_GetTime>
	cli_printf(cli,"Set Time: %02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f6c8:	7c3b      	ldrb	r3, [r7, #16]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	7c7b      	ldrb	r3, [r7, #17]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	7cbb      	ldrb	r3, [r7, #18]
 800f6d2:	9300      	str	r3, [sp, #0]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	490b      	ldr	r1, [pc, #44]	; (800f704 <SetTime+0xc4>)
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7ff fb8f 	bl	800edfc <cli_printf>

}
 800f6de:	bf00      	nop
 800f6e0:	3760      	adds	r7, #96	; 0x60
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	080206c0 	.word	0x080206c0
 800f6ec:	08020950 	.word	0x08020950
 800f6f0:	20001a5e 	.word	0x20001a5e
 800f6f4:	20001a5f 	.word	0x20001a5f
 800f6f8:	200019a0 	.word	0x200019a0
 800f6fc:	20000029 	.word	0x20000029
 800f700:	200017c4 	.word	0x200017c4
 800f704:	08020994 	.word	0x08020994

0800f708 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800f708:	b580      	push	{r7, lr}
 800f70a:	b08c      	sub	sp, #48	; 0x30
 800f70c:	af02      	add	r7, sp, #8
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	607a      	str	r2, [r7, #4]



	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f718:	2200      	movs	r2, #0
 800f71a:	4619      	mov	r1, r3
 800f71c:	480f      	ldr	r0, [pc, #60]	; (800f75c <GetDate+0x54>)
 800f71e:	f7f9 fd8f 	bl	8009240 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f722:	f107 0310 	add.w	r3, r7, #16
 800f726:	2200      	movs	r2, #0
 800f728:	4619      	mov	r1, r3
 800f72a:	480c      	ldr	r0, [pc, #48]	; (800f75c <GetDate+0x54>)
 800f72c:	f7f9 fca6 	bl	800907c <HAL_RTC_GetTime>
	cli_printf(cli,"%02d.%02d.%02d",gDate.Date,gDate.Month,gDate.Year);
 800f730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f734:	461a      	mov	r2, r3
 800f736:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f73a:	4619      	mov	r1, r3
 800f73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f740:	9300      	str	r3, [sp, #0]
 800f742:	460b      	mov	r3, r1
 800f744:	4906      	ldr	r1, [pc, #24]	; (800f760 <GetDate+0x58>)
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f7ff fb58 	bl	800edfc <cli_printf>
	HAL_Delay(100);
 800f74c:	2064      	movs	r0, #100	; 0x64
 800f74e:	f7f4 fa0f 	bl	8003b70 <HAL_Delay>
}
 800f752:	bf00      	nop
 800f754:	3728      	adds	r7, #40	; 0x28
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	200017c4 	.word	0x200017c4
 800f760:	080209b0 	.word	0x080209b0

0800f764 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f764:	b580      	push	{r7, lr}
 800f766:	b08c      	sub	sp, #48	; 0x30
 800f768:	af02      	add	r7, sp, #8
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f774:	2200      	movs	r2, #0
 800f776:	4619      	mov	r1, r3
 800f778:	480d      	ldr	r0, [pc, #52]	; (800f7b0 <GetTime+0x4c>)
 800f77a:	f7f9 fd61 	bl	8009240 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f77e:	f107 0310 	add.w	r3, r7, #16
 800f782:	2200      	movs	r2, #0
 800f784:	4619      	mov	r1, r3
 800f786:	480a      	ldr	r0, [pc, #40]	; (800f7b0 <GetTime+0x4c>)
 800f788:	f7f9 fc78 	bl	800907c <HAL_RTC_GetTime>
	cli_printf(cli,"%02d:%02d:%02d",gTime.Hours,gTime.Minutes,gTime.Seconds);
 800f78c:	7c3b      	ldrb	r3, [r7, #16]
 800f78e:	461a      	mov	r2, r3
 800f790:	7c7b      	ldrb	r3, [r7, #17]
 800f792:	4619      	mov	r1, r3
 800f794:	7cbb      	ldrb	r3, [r7, #18]
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	460b      	mov	r3, r1
 800f79a:	4906      	ldr	r1, [pc, #24]	; (800f7b4 <GetTime+0x50>)
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f7ff fb2d 	bl	800edfc <cli_printf>
	HAL_Delay(100);
 800f7a2:	2064      	movs	r0, #100	; 0x64
 800f7a4:	f7f4 f9e4 	bl	8003b70 <HAL_Delay>
}
 800f7a8:	bf00      	nop
 800f7aa:	3728      	adds	r7, #40	; 0x28
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	200017c4 	.word	0x200017c4
 800f7b4:	080209c0 	.word	0x080209c0

0800f7b8 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b092      	sub	sp, #72	; 0x48
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800f7c4:	4b54      	ldr	r3, [pc, #336]	; (800f918 <SetInterval+0x160>)
 800f7c6:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f7c8:	4954      	ldr	r1, [pc, #336]	; (800f91c <SetInterval+0x164>)
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f7ff fb16 	bl	800edfc <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f7d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f7d2:	f7f0 fd0f 	bl	80001f4 <strlen>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f7de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7e0:	484f      	ldr	r0, [pc, #316]	; (800f920 <SetInterval+0x168>)
 800f7e2:	f7fc f871 	bl	800b8c8 <HAL_UART_Transmit>
	cli_printf(cli,"Enter 1 for 5min.");
 800f7e6:	494f      	ldr	r1, [pc, #316]	; (800f924 <SetInterval+0x16c>)
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f7ff fb07 	bl	800edfc <cli_printf>
	cli_printf(cli,"Enter 2 for 15min.");
 800f7ee:	494e      	ldr	r1, [pc, #312]	; (800f928 <SetInterval+0x170>)
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f7ff fb03 	bl	800edfc <cli_printf>
	cli_printf(cli,"Enter 3 for 60min.");
 800f7f6:	494d      	ldr	r1, [pc, #308]	; (800f92c <SetInterval+0x174>)
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f7ff faff 	bl	800edfc <cli_printf>
	cli_printf(cli,"Disclaimer: The battery life will be reduced if interval is reduced.");
 800f7fe:	494c      	ldr	r1, [pc, #304]	; (800f930 <SetInterval+0x178>)
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f7ff fafb 	bl	800edfc <cli_printf>
	cli_other = 1;
 800f806:	4b4b      	ldr	r3, [pc, #300]	; (800f934 <SetInterval+0x17c>)
 800f808:	2201      	movs	r2, #1
 800f80a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f80c:	4b4a      	ldr	r3, [pc, #296]	; (800f938 <SetInterval+0x180>)
 800f80e:	2200      	movs	r2, #0
 800f810:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f812:	f107 0310 	add.w	r3, r7, #16
 800f816:	2232      	movs	r2, #50	; 0x32
 800f818:	4619      	mov	r1, r3
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f7ff fb30 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f820:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f822:	f7f0 fce7 	bl	80001f4 <strlen>
 800f826:	4603      	mov	r3, r0
 800f828:	b29a      	uxth	r2, r3
 800f82a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f82e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f830:	483b      	ldr	r0, [pc, #236]	; (800f920 <SetInterval+0x168>)
 800f832:	f7fc f849 	bl	800b8c8 <HAL_UART_Transmit>


	if(strstr(buffer, "1"))
 800f836:	f107 0310 	add.w	r3, r7, #16
 800f83a:	2131      	movs	r1, #49	; 0x31
 800f83c:	4618      	mov	r0, r3
 800f83e:	f00c fefb 	bl	801c638 <strchr>
 800f842:	4603      	mov	r3, r0
 800f844:	2b00      	cmp	r3, #0
 800f846:	d015      	beq.n	800f874 <SetInterval+0xbc>
	{
        _Flash_Packet.Time_Interval = 5;
 800f848:	4b3c      	ldr	r3, [pc, #240]	; (800f93c <SetInterval+0x184>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	f042 0205 	orr.w	r2, r2, #5
 800f850:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f854:	2200      	movs	r2, #0
 800f856:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f85a:	2200      	movs	r2, #0
 800f85c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f860:	2200      	movs	r2, #0
 800f862:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
        set_param_flags();
 800f866:	4b36      	ldr	r3, [pc, #216]	; (800f940 <SetInterval+0x188>)
 800f868:	2201      	movs	r2, #1
 800f86a:	701a      	strb	r2, [r3, #0]
 800f86c:	4b35      	ldr	r3, [pc, #212]	; (800f944 <SetInterval+0x18c>)
 800f86e:	2201      	movs	r2, #1
 800f870:	701a      	strb	r2, [r3, #0]
 800f872:	e03c      	b.n	800f8ee <SetInterval+0x136>
	}
	else if(strstr(buffer, "2"))
 800f874:	f107 0310 	add.w	r3, r7, #16
 800f878:	2132      	movs	r1, #50	; 0x32
 800f87a:	4618      	mov	r0, r3
 800f87c:	f00c fedc 	bl	801c638 <strchr>
 800f880:	4603      	mov	r3, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d015      	beq.n	800f8b2 <SetInterval+0xfa>
	{
		_Flash_Packet.Time_Interval = 15;
 800f886:	4b2d      	ldr	r3, [pc, #180]	; (800f93c <SetInterval+0x184>)
 800f888:	2200      	movs	r2, #0
 800f88a:	f042 020f 	orr.w	r2, r2, #15
 800f88e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f892:	2200      	movs	r2, #0
 800f894:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f898:	2200      	movs	r2, #0
 800f89a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f8a4:	4b26      	ldr	r3, [pc, #152]	; (800f940 <SetInterval+0x188>)
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	701a      	strb	r2, [r3, #0]
 800f8aa:	4b26      	ldr	r3, [pc, #152]	; (800f944 <SetInterval+0x18c>)
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	701a      	strb	r2, [r3, #0]
 800f8b0:	e01d      	b.n	800f8ee <SetInterval+0x136>
	}
	else if(strstr(buffer, "3"))
 800f8b2:	f107 0310 	add.w	r3, r7, #16
 800f8b6:	2133      	movs	r1, #51	; 0x33
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f00c febd 	bl	801c638 <strchr>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d014      	beq.n	800f8ee <SetInterval+0x136>
	{
		_Flash_Packet.Time_Interval = 60;
 800f8c4:	4b1d      	ldr	r3, [pc, #116]	; (800f93c <SetInterval+0x184>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800f8cc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f8dc:	2200      	movs	r2, #0
 800f8de:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f8e2:	4b17      	ldr	r3, [pc, #92]	; (800f940 <SetInterval+0x188>)
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	701a      	strb	r2, [r3, #0]
 800f8e8:	4b16      	ldr	r3, [pc, #88]	; (800f944 <SetInterval+0x18c>)
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800f8ee:	4b12      	ldr	r3, [pc, #72]	; (800f938 <SetInterval+0x180>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f8f4:	4b0f      	ldr	r3, [pc, #60]	; (800f934 <SetInterval+0x17c>)
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"Interval is set to: %ldmin",_Flash_Packet.Time_Interval);
 800f8fa:	4b10      	ldr	r3, [pc, #64]	; (800f93c <SetInterval+0x184>)
 800f8fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f900:	461a      	mov	r2, r3
 800f902:	4911      	ldr	r1, [pc, #68]	; (800f948 <SetInterval+0x190>)
 800f904:	68f8      	ldr	r0, [r7, #12]
 800f906:	f7ff fa79 	bl	800edfc <cli_printf>
	set_alarm_Time = 1;
 800f90a:	4b10      	ldr	r3, [pc, #64]	; (800f94c <SetInterval+0x194>)
 800f90c:	2201      	movs	r2, #1
 800f90e:	701a      	strb	r2, [r3, #0]
}
 800f910:	bf00      	nop
 800f912:	3748      	adds	r7, #72	; 0x48
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	080206c0 	.word	0x080206c0
 800f91c:	08020734 	.word	0x08020734
 800f920:	200019a0 	.word	0x200019a0
 800f924:	080209d0 	.word	0x080209d0
 800f928:	080209e4 	.word	0x080209e4
 800f92c:	080209f8 	.word	0x080209f8
 800f930:	08020a0c 	.word	0x08020a0c
 800f934:	20001a5e 	.word	0x20001a5e
 800f938:	20001a5f 	.word	0x20001a5f
 800f93c:	200012dc 	.word	0x200012dc
 800f940:	200014b1 	.word	0x200014b1
 800f944:	200014b2 	.word	0x200014b2
 800f948:	08020a54 	.word	0x08020a54
 800f94c:	20000029 	.word	0x20000029

0800f950 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Interval is Set to: %ldmin",_Flash_Packet.Time_Interval);
 800f95c:	4b05      	ldr	r3, [pc, #20]	; (800f974 <GetInterval+0x24>)
 800f95e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f962:	461a      	mov	r2, r3
 800f964:	4904      	ldr	r1, [pc, #16]	; (800f978 <GetInterval+0x28>)
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f7ff fa48 	bl	800edfc <cli_printf>

}
 800f96c:	bf00      	nop
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	200012dc 	.word	0x200012dc
 800f978:	08020a70 	.word	0x08020a70

0800f97c <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b092      	sub	sp, #72	; 0x48
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
uint16_t len;
	  const char *newLine = "\r\n";
 800f988:	4b31      	ldr	r3, [pc, #196]	; (800fa50 <SetFilename+0xd4>)
 800f98a:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800f98c:	4931      	ldr	r1, [pc, #196]	; (800fa54 <SetFilename+0xd8>)
 800f98e:	68f8      	ldr	r0, [r7, #12]
 800f990:	f7ff fa34 	bl	800edfc <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f994:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f996:	f7f0 fc2d 	bl	80001f4 <strlen>
 800f99a:	4603      	mov	r3, r0
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9a4:	482c      	ldr	r0, [pc, #176]	; (800fa58 <SetFilename+0xdc>)
 800f9a6:	f7fb ff8f 	bl	800b8c8 <HAL_UART_Transmit>
	cli_printf(cli,"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
 800f9aa:	492c      	ldr	r1, [pc, #176]	; (800fa5c <SetFilename+0xe0>)
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f7ff fa25 	bl	800edfc <cli_printf>
	cli_printf(cli,"If any special characters they will be omitted automatically.");
 800f9b2:	492b      	ldr	r1, [pc, #172]	; (800fa60 <SetFilename+0xe4>)
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7ff fa21 	bl	800edfc <cli_printf>

	cli_other = 1;
 800f9ba:	4b2a      	ldr	r3, [pc, #168]	; (800fa64 <SetFilename+0xe8>)
 800f9bc:	2201      	movs	r2, #1
 800f9be:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f9c0:	4b29      	ldr	r3, [pc, #164]	; (800fa68 <SetFilename+0xec>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800f9c6:	f107 0310 	add.w	r3, r7, #16
 800f9ca:	2232      	movs	r2, #50	; 0x32
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7ff fa56 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800f9d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f9d6:	f7f0 fc0d 	bl	80001f4 <strlen>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	b29a      	uxth	r2, r3
 800f9de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9e4:	481c      	ldr	r0, [pc, #112]	; (800fa58 <SetFilename+0xdc>)
 800f9e6:	f7fb ff6f 	bl	800b8c8 <HAL_UART_Transmit>

len = strlen(buffer);
 800f9ea:	f107 0310 	add.w	r3, r7, #16
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7f0 fc00 	bl	80001f4 <strlen>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
if(len < 20)
 800f9fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9fe:	2b13      	cmp	r3, #19
 800fa00:	d818      	bhi.n	800fa34 <SetFilename+0xb8>
{
	   if(buffer[0] != '\0' )
 800fa02:	7c3b      	ldrb	r3, [r7, #16]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d019      	beq.n	800fa3c <SetFilename+0xc0>
	   {
	if(buffer != NULL)
	{
		strcpy(_Flash_Packet.File_Name,buffer);
 800fa08:	f107 0310 	add.w	r3, r7, #16
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	4817      	ldr	r0, [pc, #92]	; (800fa6c <SetFilename+0xf0>)
 800fa10:	f00c fe1f 	bl	801c652 <strcpy>
		set_param_flags();
 800fa14:	4b16      	ldr	r3, [pc, #88]	; (800fa70 <SetFilename+0xf4>)
 800fa16:	2201      	movs	r2, #1
 800fa18:	701a      	strb	r2, [r3, #0]
 800fa1a:	4b16      	ldr	r3, [pc, #88]	; (800fa74 <SetFilename+0xf8>)
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.filename_changed = 1;
 800fa20:	4b15      	ldr	r3, [pc, #84]	; (800fa78 <SetFilename+0xfc>)
 800fa22:	2201      	movs	r2, #1
 800fa24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800fa28:	4a10      	ldr	r2, [pc, #64]	; (800fa6c <SetFilename+0xf0>)
 800fa2a:	4914      	ldr	r1, [pc, #80]	; (800fa7c <SetFilename+0x100>)
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f7ff f9e5 	bl	800edfc <cli_printf>
 800fa32:	e003      	b.n	800fa3c <SetFilename+0xc0>
	}
	   }
}
else
{
	cli_printf(cli,"Filename is too long");
 800fa34:	4912      	ldr	r1, [pc, #72]	; (800fa80 <SetFilename+0x104>)
 800fa36:	68f8      	ldr	r0, [r7, #12]
 800fa38:	f7ff f9e0 	bl	800edfc <cli_printf>
}


	flag_cli = 0;
 800fa3c:	4b0a      	ldr	r3, [pc, #40]	; (800fa68 <SetFilename+0xec>)
 800fa3e:	2200      	movs	r2, #0
 800fa40:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fa42:	4b08      	ldr	r3, [pc, #32]	; (800fa64 <SetFilename+0xe8>)
 800fa44:	2200      	movs	r2, #0
 800fa46:	701a      	strb	r2, [r3, #0]


}
 800fa48:	bf00      	nop
 800fa4a:	3748      	adds	r7, #72	; 0x48
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	080206c0 	.word	0x080206c0
 800fa54:	08020734 	.word	0x08020734
 800fa58:	200019a0 	.word	0x200019a0
 800fa5c:	08020a8c 	.word	0x08020a8c
 800fa60:	08020b00 	.word	0x08020b00
 800fa64:	20001a5e 	.word	0x20001a5e
 800fa68:	20001a5f 	.word	0x20001a5f
 800fa6c:	200012dc 	.word	0x200012dc
 800fa70:	200014b1 	.word	0x200014b1
 800fa74:	200014b2 	.word	0x200014b2
 800fa78:	20001474 	.word	0x20001474
 800fa7c:	08020b40 	.word	0x08020b40
 800fa80:	08020b58 	.word	0x08020b58

0800fa84 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"Filename is set to: %s",_Flash_Packet.File_Name);
 800fa90:	4a04      	ldr	r2, [pc, #16]	; (800faa4 <GetFilename+0x20>)
 800fa92:	4905      	ldr	r1, [pc, #20]	; (800faa8 <GetFilename+0x24>)
 800fa94:	68f8      	ldr	r0, [r7, #12]
 800fa96:	f7ff f9b1 	bl	800edfc <cli_printf>

}
 800fa9a:	bf00      	nop
 800fa9c:	3710      	adds	r7, #16
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	200012dc 	.word	0x200012dc
 800faa8:	08020b40 	.word	0x08020b40

0800faac <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800faac:	b580      	push	{r7, lr}
 800faae:	b092      	sub	sp, #72	; 0x48
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800fab8:	4b41      	ldr	r3, [pc, #260]	; (800fbc0 <SetFileformat+0x114>)
 800faba:	647b      	str	r3, [r7, #68]	; 0x44
		cli_printf(cli,"Disclaimer: It takes 30second for any changes to save.");
 800fabc:	4941      	ldr	r1, [pc, #260]	; (800fbc4 <SetFileformat+0x118>)
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f7ff f99c 	bl	800edfc <cli_printf>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fac4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fac6:	f7f0 fb95 	bl	80001f4 <strlen>
 800faca:	4603      	mov	r3, r0
 800facc:	b29a      	uxth	r2, r3
 800face:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fad4:	483c      	ldr	r0, [pc, #240]	; (800fbc8 <SetFileformat+0x11c>)
 800fad6:	f7fb fef7 	bl	800b8c8 <HAL_UART_Transmit>
	cli_printf(cli,"Following file formats are allowed:");
 800fada:	493c      	ldr	r1, [pc, #240]	; (800fbcc <SetFileformat+0x120>)
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f7ff f98d 	bl	800edfc <cli_printf>
	cli_printf(cli,"1. (.csv)");
 800fae2:	493b      	ldr	r1, [pc, #236]	; (800fbd0 <SetFileformat+0x124>)
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	f7ff f989 	bl	800edfc <cli_printf>
	cli_printf(cli,"2. (.json)");
 800faea:	493a      	ldr	r1, [pc, #232]	; (800fbd4 <SetFileformat+0x128>)
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f7ff f985 	bl	800edfc <cli_printf>
	cli_printf(cli,"Enter the number to select your desired format");
 800faf2:	4939      	ldr	r1, [pc, #228]	; (800fbd8 <SetFileformat+0x12c>)
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f7ff f981 	bl	800edfc <cli_printf>

	cli_other = 1;
 800fafa:	4b38      	ldr	r3, [pc, #224]	; (800fbdc <SetFileformat+0x130>)
 800fafc:	2201      	movs	r2, #1
 800fafe:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fb00:	4b37      	ldr	r3, [pc, #220]	; (800fbe0 <SetFileformat+0x134>)
 800fb02:	2200      	movs	r2, #0
 800fb04:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli,buffer,sizeof(buffer));
 800fb06:	f107 0310 	add.w	r3, r7, #16
 800fb0a:	2232      	movs	r2, #50	; 0x32
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	f7ff f9b6 	bl	800ee80 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fb14:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb16:	f7f0 fb6d 	bl	80001f4 <strlen>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb24:	4828      	ldr	r0, [pc, #160]	; (800fbc8 <SetFileformat+0x11c>)
 800fb26:	f7fb fecf 	bl	800b8c8 <HAL_UART_Transmit>

	if(strstr(buffer, "1"))
 800fb2a:	f107 0310 	add.w	r3, r7, #16
 800fb2e:	2131      	movs	r1, #49	; 0x31
 800fb30:	4618      	mov	r0, r3
 800fb32:	f00c fd81 	bl	801c638 <strchr>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d014      	beq.n	800fb66 <SetFileformat+0xba>
	{
		strcpy(_Flash_Packet.File_Format,".CSV");
 800fb3c:	4b29      	ldr	r3, [pc, #164]	; (800fbe4 <SetFileformat+0x138>)
 800fb3e:	4a2a      	ldr	r2, [pc, #168]	; (800fbe8 <SetFileformat+0x13c>)
 800fb40:	6810      	ldr	r0, [r2, #0]
 800fb42:	6018      	str	r0, [r3, #0]
 800fb44:	7912      	ldrb	r2, [r2, #4]
 800fb46:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800fb48:	4b28      	ldr	r3, [pc, #160]	; (800fbec <SetFileformat+0x140>)
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	701a      	strb	r2, [r3, #0]
 800fb4e:	4b28      	ldr	r3, [pc, #160]	; (800fbf0 <SetFileformat+0x144>)
 800fb50:	2201      	movs	r2, #1
 800fb52:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800fb54:	4b27      	ldr	r3, [pc, #156]	; (800fbf4 <SetFileformat+0x148>)
 800fb56:	2201      	movs	r2, #1
 800fb58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 1;
 800fb5c:	4b25      	ldr	r3, [pc, #148]	; (800fbf4 <SetFileformat+0x148>)
 800fb5e:	2201      	movs	r2, #1
 800fb60:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fb64:	e01c      	b.n	800fba0 <SetFileformat+0xf4>
	}
	else if(strstr(buffer, "2"))
 800fb66:	f107 0310 	add.w	r3, r7, #16
 800fb6a:	2132      	movs	r1, #50	; 0x32
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f00c fd63 	bl	801c638 <strchr>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d013      	beq.n	800fba0 <SetFileformat+0xf4>
	{
		strcpy(_Flash_Packet.File_Format,".JSON");
 800fb78:	4b1a      	ldr	r3, [pc, #104]	; (800fbe4 <SetFileformat+0x138>)
 800fb7a:	4a1f      	ldr	r2, [pc, #124]	; (800fbf8 <SetFileformat+0x14c>)
 800fb7c:	6810      	ldr	r0, [r2, #0]
 800fb7e:	6018      	str	r0, [r3, #0]
 800fb80:	8892      	ldrh	r2, [r2, #4]
 800fb82:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800fb84:	4b19      	ldr	r3, [pc, #100]	; (800fbec <SetFileformat+0x140>)
 800fb86:	2201      	movs	r2, #1
 800fb88:	701a      	strb	r2, [r3, #0]
 800fb8a:	4b19      	ldr	r3, [pc, #100]	; (800fbf0 <SetFileformat+0x144>)
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	701a      	strb	r2, [r3, #0]
		 _RunTime_Packet.fileformat_changed = 1;
 800fb90:	4b18      	ldr	r3, [pc, #96]	; (800fbf4 <SetFileformat+0x148>)
 800fb92:	2201      	movs	r2, #1
 800fb94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.fileformat_selection = 0;
 800fb98:	4b16      	ldr	r3, [pc, #88]	; (800fbf4 <SetFileformat+0x148>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}


	flag_cli = 0;
 800fba0:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <SetFileformat+0x134>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fba6:	4b0d      	ldr	r3, [pc, #52]	; (800fbdc <SetFileformat+0x130>)
 800fba8:	2200      	movs	r2, #0
 800fbaa:	701a      	strb	r2, [r3, #0]
	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800fbac:	4a0d      	ldr	r2, [pc, #52]	; (800fbe4 <SetFileformat+0x138>)
 800fbae:	4913      	ldr	r1, [pc, #76]	; (800fbfc <SetFileformat+0x150>)
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	f7ff f923 	bl	800edfc <cli_printf>

}
 800fbb6:	bf00      	nop
 800fbb8:	3748      	adds	r7, #72	; 0x48
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	080206c0 	.word	0x080206c0
 800fbc4:	08020734 	.word	0x08020734
 800fbc8:	200019a0 	.word	0x200019a0
 800fbcc:	08020b70 	.word	0x08020b70
 800fbd0:	08020b94 	.word	0x08020b94
 800fbd4:	08020ba0 	.word	0x08020ba0
 800fbd8:	08020bac 	.word	0x08020bac
 800fbdc:	20001a5e 	.word	0x20001a5e
 800fbe0:	20001a5f 	.word	0x20001a5f
 800fbe4:	20001340 	.word	0x20001340
 800fbe8:	08020bdc 	.word	0x08020bdc
 800fbec:	200014b1 	.word	0x200014b1
 800fbf0:	200014b2 	.word	0x200014b2
 800fbf4:	20001474 	.word	0x20001474
 800fbf8:	08020be4 	.word	0x08020be4
 800fbfc:	08020bec 	.word	0x08020bec

0800fc00 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"File format is set to: %s",_Flash_Packet.File_Format);
 800fc0c:	4a04      	ldr	r2, [pc, #16]	; (800fc20 <GetFileformat+0x20>)
 800fc0e:	4905      	ldr	r1, [pc, #20]	; (800fc24 <GetFileformat+0x24>)
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f7ff f8f3 	bl	800edfc <cli_printf>

}
 800fc16:	bf00      	nop
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	20001340 	.word	0x20001340
 800fc24:	08020bec 	.word	0x08020bec

0800fc28 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b096      	sub	sp, #88	; 0x58
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	607a      	str	r2, [r7, #4]

	  const char *newLine = "\r\n";
 800fc34:	4b48      	ldr	r3, [pc, #288]	; (800fd58 <fanclean+0x130>)
 800fc36:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int counter = 0;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800fc3c:	4b47      	ldr	r3, [pc, #284]	; (800fd5c <fanclean+0x134>)
 800fc3e:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800fc40:	2300      	movs	r3, #0
 800fc42:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	cli_printf(cli,"Do you want to initiate particle sensor fan-cleaning? y/n?");
 800fc46:	4946      	ldr	r1, [pc, #280]	; (800fd60 <fanclean+0x138>)
 800fc48:	68f8      	ldr	r0, [r7, #12]
 800fc4a:	f7ff f8d7 	bl	800edfc <cli_printf>

	cli_other = 1;
 800fc4e:	4b45      	ldr	r3, [pc, #276]	; (800fd64 <fanclean+0x13c>)
 800fc50:	2201      	movs	r2, #1
 800fc52:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800fc54:	4b44      	ldr	r3, [pc, #272]	; (800fd68 <fanclean+0x140>)
 800fc56:	2200      	movs	r2, #0
 800fc58:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800fc5a:	f107 0314 	add.w	r3, r7, #20
 800fc5e:	2232      	movs	r2, #50	; 0x32
 800fc60:	4619      	mov	r1, r3
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f7ff f90c 	bl	800ee80 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fc68:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fc6a:	f7f0 fac3 	bl	80001f4 <strlen>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	b29a      	uxth	r2, r3
 800fc72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc78:	483c      	ldr	r0, [pc, #240]	; (800fd6c <fanclean+0x144>)
 800fc7a:	f7fb fe25 	bl	800b8c8 <HAL_UART_Transmit>


        if(strstr(buffer, "n"))
 800fc7e:	f107 0314 	add.w	r3, r7, #20
 800fc82:	216e      	movs	r1, #110	; 0x6e
 800fc84:	4618      	mov	r0, r3
 800fc86:	f00c fcd7 	bl	801c638 <strchr>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d00f      	beq.n	800fcb0 <fanclean+0x88>
		{
			_Flash_Packet.Calibration_Status=0;
 800fc90:	4b37      	ldr	r3, [pc, #220]	; (800fd70 <fanclean+0x148>)
 800fc92:	2200      	movs	r2, #0
 800fc94:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			_RunTime_Packet.PM_calibration=1;
 800fc98:	4b36      	ldr	r3, [pc, #216]	; (800fd74 <fanclean+0x14c>)
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			cli_printf(cli,"Particle sensor fan-cleaning aborted.");
 800fca0:	4935      	ldr	r1, [pc, #212]	; (800fd78 <fanclean+0x150>)
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	f7ff f8aa 	bl	800edfc <cli_printf>
			//set_param_flags();
			do_Calibration = 0;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800fcae:	e00f      	b.n	800fcd0 <fanclean+0xa8>
		}
        else if(strstr(buffer, "y"))
 800fcb0:	f107 0314 	add.w	r3, r7, #20
 800fcb4:	2179      	movs	r1, #121	; 0x79
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f00c fcbe 	bl	801c638 <strchr>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d006      	beq.n	800fcd0 <fanclean+0xa8>
        {
        	_RunTime_Packet.PM_calibration=0;
 800fcc2:	4b2c      	ldr	r3, [pc, #176]	; (800fd74 <fanclean+0x14c>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        	do_Calibration = 1;
 800fcca:	2301      	movs	r3, #1
 800fccc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        }



		   if(do_Calibration == 1)
 800fcd0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d135      	bne.n	800fd44 <fanclean+0x11c>
		   {

				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fcd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fcda:	f7f0 fa8b 	bl	80001f4 <strlen>
 800fcde:	4603      	mov	r3, r0
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fce6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fce8:	4820      	ldr	r0, [pc, #128]	; (800fd6c <fanclean+0x144>)
 800fcea:	f7fb fded 	bl	800b8c8 <HAL_UART_Transmit>
				cli_printf(cli,"Particle sensor fan-cleaning initiated, please wait.");
 800fcee:	4923      	ldr	r1, [pc, #140]	; (800fd7c <fanclean+0x154>)
 800fcf0:	68f8      	ldr	r0, [r7, #12]
 800fcf2:	f7ff f883 	bl	800edfc <cli_printf>
		   while(counter < 8 )
 800fcf6:	e013      	b.n	800fd20 <fanclean+0xf8>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800fcf8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fcfa:	f7f0 fa7b 	bl	80001f4 <strlen>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	b29a      	uxth	r2, r3
 800fd02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd06:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd08:	4818      	ldr	r0, [pc, #96]	; (800fd6c <fanclean+0x144>)
 800fd0a:	f7fb fddd 	bl	800b8c8 <HAL_UART_Transmit>
                HAL_Delay(800);
 800fd0e:	f44f 7048 	mov.w	r0, #800	; 0x320
 800fd12:	f7f3 ff2d 	bl	8003b70 <HAL_Delay>
                toggle_blue_led();
 800fd16:	f7f1 f9db 	bl	80010d0 <toggle_blue_led>
                counter++;
 800fd1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 8 )
 800fd20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd22:	2b07      	cmp	r3, #7
 800fd24:	dde8      	ble.n	800fcf8 <fanclean+0xd0>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fd26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fd28:	f7f0 fa64 	bl	80001f4 <strlen>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fd36:	480d      	ldr	r0, [pc, #52]	; (800fd6c <fanclean+0x144>)
 800fd38:	f7fb fdc6 	bl	800b8c8 <HAL_UART_Transmit>
			cli_printf(cli,"fan-cleaning done.");
 800fd3c:	4910      	ldr	r1, [pc, #64]	; (800fd80 <fanclean+0x158>)
 800fd3e:	68f8      	ldr	r0, [r7, #12]
 800fd40:	f7ff f85c 	bl	800edfc <cli_printf>


		   }

		flag_cli = 0;
 800fd44:	4b08      	ldr	r3, [pc, #32]	; (800fd68 <fanclean+0x140>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800fd4a:	4b06      	ldr	r3, [pc, #24]	; (800fd64 <fanclean+0x13c>)
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	701a      	strb	r2, [r3, #0]
}
 800fd50:	bf00      	nop
 800fd52:	3758      	adds	r7, #88	; 0x58
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	080206c0 	.word	0x080206c0
 800fd5c:	08020c08 	.word	0x08020c08
 800fd60:	08020c14 	.word	0x08020c14
 800fd64:	20001a5e 	.word	0x20001a5e
 800fd68:	20001a5f 	.word	0x20001a5f
 800fd6c:	200019a0 	.word	0x200019a0
 800fd70:	200012dc 	.word	0x200012dc
 800fd74:	20001474 	.word	0x20001474
 800fd78:	08020c50 	.word	0x08020c50
 800fd7c:	08020c78 	.word	0x08020c78
 800fd80:	08020cb0 	.word	0x08020cb0

0800fd84 <co2calibrate>:


void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b096      	sub	sp, #88	; 0x58
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800fd90:	4b55      	ldr	r3, [pc, #340]	; (800fee8 <co2calibrate+0x164>)
 800fd92:	64fb      	str	r3, [r7, #76]	; 0x4c
	  uint32_t val;
	  int counter = 0;
 800fd94:	2300      	movs	r3, #0
 800fd96:	657b      	str	r3, [r7, #84]	; 0x54
	  const char *dot = "........";
 800fd98:	4b54      	ldr	r3, [pc, #336]	; (800feec <co2calibrate+0x168>)
 800fd9a:	64bb      	str	r3, [r7, #72]	; 0x48
	  uint8_t do_Calibration = 0;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


	    cli_other = 1;
 800fda2:	4b53      	ldr	r3, [pc, #332]	; (800fef0 <co2calibrate+0x16c>)
 800fda4:	2201      	movs	r2, #1
 800fda6:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800fda8:	4b52      	ldr	r3, [pc, #328]	; (800fef4 <co2calibrate+0x170>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer,'\0',sizeof(buffer));
 800fdae:	f107 0310 	add.w	r3, r7, #16
 800fdb2:	2232      	movs	r2, #50	; 0x32
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f00b fc18 	bl	801b5ec <memset>
		cli_printf(cli,"To calibrate Co2 sensor, please provide Co2 concentration value.");
 800fdbc:	494e      	ldr	r1, [pc, #312]	; (800fef8 <co2calibrate+0x174>)
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f7ff f81c 	bl	800edfc <cli_printf>
		cli_printf(cli,"If Co2 concentration is unknown then just press enter to cancel the calibration.");
 800fdc4:	494d      	ldr	r1, [pc, #308]	; (800fefc <co2calibrate+0x178>)
 800fdc6:	68f8      	ldr	r0, [r7, #12]
 800fdc8:	f7ff f818 	bl	800edfc <cli_printf>

		receiveString(cli,buffer,sizeof(buffer));
 800fdcc:	f107 0310 	add.w	r3, r7, #16
 800fdd0:	2232      	movs	r2, #50	; 0x32
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	f7ff f853 	bl	800ee80 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fdda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fddc:	f7f0 fa0a 	bl	80001f4 <strlen>
 800fde0:	4603      	mov	r3, r0
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fde8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fdea:	4845      	ldr	r0, [pc, #276]	; (800ff00 <co2calibrate+0x17c>)
 800fdec:	f7fb fd6c 	bl	800b8c8 <HAL_UART_Transmit>

		   if(buffer[0] != '\0' )
 800fdf0:	7c3b      	ldrb	r3, [r7, #16]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d01e      	beq.n	800fe34 <co2calibrate+0xb0>
			{
			   _RunTime_Packet.CO2_calibration = 1;
 800fdf6:	4b43      	ldr	r3, [pc, #268]	; (800ff04 <co2calibrate+0x180>)
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

                val = atoi(buffer);
 800fdfe:	f107 0310 	add.w	r3, r7, #16
 800fe02:	4618      	mov	r0, r3
 800fe04:	f00b fb22 	bl	801b44c <atoi>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	647b      	str	r3, [r7, #68]	; 0x44

                if(val < 65535)
 800fe0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d803      	bhi.n	800fe1e <co2calibrate+0x9a>
                {
                   _RunTime_Packet._target_co2_concentration = val;
 800fe16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	4b3a      	ldr	r3, [pc, #232]	; (800ff04 <co2calibrate+0x180>)
 800fe1c:	869a      	strh	r2, [r3, #52]	; 0x34
                }

            	cli_printf(cli,"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",_RunTime_Packet._target_co2_concentration);
 800fe1e:	4b39      	ldr	r3, [pc, #228]	; (800ff04 <co2calibrate+0x180>)
 800fe20:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fe22:	461a      	mov	r2, r3
 800fe24:	4938      	ldr	r1, [pc, #224]	; (800ff08 <co2calibrate+0x184>)
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7fe ffe8 	bl	800edfc <cli_printf>
            	do_Calibration = 1;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800fe32:	e00a      	b.n	800fe4a <co2calibrate+0xc6>
			 }
		   else
		   {
				cli_printf(cli,"Co2 sensor Calibration aborted.");
 800fe34:	4935      	ldr	r1, [pc, #212]	; (800ff0c <co2calibrate+0x188>)
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f7fe ffe0 	bl	800edfc <cli_printf>
				_RunTime_Packet.CO2_calibration = 0;
 800fe3c:	4b31      	ldr	r3, [pc, #196]	; (800ff04 <co2calibrate+0x180>)
 800fe3e:	2200      	movs	r2, #0
 800fe40:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				do_Calibration = 0;
 800fe44:	2300      	movs	r3, #0
 800fe46:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		   }

		   if(do_Calibration == 1)
 800fe4a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d140      	bne.n	800fed4 <co2calibrate+0x150>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800fe52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fe54:	f7f0 f9ce 	bl	80001f4 <strlen>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fe62:	4827      	ldr	r0, [pc, #156]	; (800ff00 <co2calibrate+0x17c>)
 800fe64:	f7fb fd30 	bl	800b8c8 <HAL_UART_Transmit>
				cli_printf(cli,"Co2 is calibrating, please wait.");
 800fe68:	4929      	ldr	r1, [pc, #164]	; (800ff10 <co2calibrate+0x18c>)
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f7fe ffc6 	bl	800edfc <cli_printf>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 800fe70:	4b24      	ldr	r3, [pc, #144]	; (800ff04 <co2calibrate+0x180>)
 800fe72:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d11a      	bne.n	800feb0 <co2calibrate+0x12c>
				scd4x_perform_forced_recalibration(
 800fe7a:	4b22      	ldr	r3, [pc, #136]	; (800ff04 <co2calibrate+0x180>)
 800fe7c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fe7e:	4925      	ldr	r1, [pc, #148]	; (800ff14 <co2calibrate+0x190>)
 800fe80:	4618      	mov	r0, r3
 800fe82:	f002 fd29 	bl	80128d8 <scd4x_perform_forced_recalibration>
						_RunTime_Packet._target_co2_concentration,
						&_RunTime_Packet._frc_correction);
				}
		   while(counter < 8 )
 800fe86:	e013      	b.n	800feb0 <co2calibrate+0x12c>
		   {
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)dot,  strlen(dot), 1000);
 800fe88:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fe8a:	f7f0 f9b3 	bl	80001f4 <strlen>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	b29a      	uxth	r2, r3
 800fe92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fe98:	4819      	ldr	r0, [pc, #100]	; (800ff00 <co2calibrate+0x17c>)
 800fe9a:	f7fb fd15 	bl	800b8c8 <HAL_UART_Transmit>
			    HAL_Delay(800);
 800fe9e:	f44f 7048 	mov.w	r0, #800	; 0x320
 800fea2:	f7f3 fe65 	bl	8003b70 <HAL_Delay>
			    toggle_blue_led();
 800fea6:	f7f1 f913 	bl	80010d0 <toggle_blue_led>
                counter++;
 800feaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feac:	3301      	adds	r3, #1
 800feae:	657b      	str	r3, [r7, #84]	; 0x54
		   while(counter < 8 )
 800feb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb2:	2b07      	cmp	r3, #7
 800feb4:	dde8      	ble.n	800fe88 <co2calibrate+0x104>
		   }

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800feb6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800feb8:	f7f0 f99c 	bl	80001f4 <strlen>
 800febc:	4603      	mov	r3, r0
 800febe:	b29a      	uxth	r2, r3
 800fec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fec4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fec6:	480e      	ldr	r0, [pc, #56]	; (800ff00 <co2calibrate+0x17c>)
 800fec8:	f7fb fcfe 	bl	800b8c8 <HAL_UART_Transmit>
			cli_printf(cli,"Sensor calibration done.");
 800fecc:	4912      	ldr	r1, [pc, #72]	; (800ff18 <co2calibrate+0x194>)
 800fece:	68f8      	ldr	r0, [r7, #12]
 800fed0:	f7fe ff94 	bl	800edfc <cli_printf>
		   }

		flag_cli = 0;
 800fed4:	4b07      	ldr	r3, [pc, #28]	; (800fef4 <co2calibrate+0x170>)
 800fed6:	2200      	movs	r2, #0
 800fed8:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800feda:	4b05      	ldr	r3, [pc, #20]	; (800fef0 <co2calibrate+0x16c>)
 800fedc:	2200      	movs	r2, #0
 800fede:	701a      	strb	r2, [r3, #0]
}
 800fee0:	bf00      	nop
 800fee2:	3758      	adds	r7, #88	; 0x58
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	080206c0 	.word	0x080206c0
 800feec:	08020c08 	.word	0x08020c08
 800fef0:	20001a5e 	.word	0x20001a5e
 800fef4:	20001a5f 	.word	0x20001a5f
 800fef8:	08020cc4 	.word	0x08020cc4
 800fefc:	08020d08 	.word	0x08020d08
 800ff00:	200019a0 	.word	0x200019a0
 800ff04:	20001474 	.word	0x20001474
 800ff08:	08020d5c 	.word	0x08020d5c
 800ff0c:	08020dac 	.word	0x08020dac
 800ff10:	08020dcc 	.word	0x08020dcc
 800ff14:	200014aa 	.word	0x200014aa
 800ff18:	08020df0 	.word	0x08020df0

0800ff1c <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b092      	sub	sp, #72	; 0x48
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
	  const char *newLine = "\r\n";
 800ff28:	4b22      	ldr	r3, [pc, #136]	; (800ffb4 <SystemRestart+0x98>)
 800ff2a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli,"Do you want to restart the device y/n?");
 800ff2c:	4922      	ldr	r1, [pc, #136]	; (800ffb8 <SystemRestart+0x9c>)
 800ff2e:	68f8      	ldr	r0, [r7, #12]
 800ff30:	f7fe ff64 	bl	800edfc <cli_printf>

	cli_other = 1;
 800ff34:	4b21      	ldr	r3, [pc, #132]	; (800ffbc <SystemRestart+0xa0>)
 800ff36:	2201      	movs	r2, #1
 800ff38:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 800ff3a:	4b21      	ldr	r3, [pc, #132]	; (800ffc0 <SystemRestart+0xa4>)
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli,buffer,sizeof(buffer));
 800ff40:	f107 0310 	add.w	r3, r7, #16
 800ff44:	2232      	movs	r2, #50	; 0x32
 800ff46:	4619      	mov	r1, r3
 800ff48:	68f8      	ldr	r0, [r7, #12]
 800ff4a:	f7fe ff99 	bl	800ee80 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)newLine,  strlen(newLine), 1000);
 800ff4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff50:	f7f0 f950 	bl	80001f4 <strlen>
 800ff54:	4603      	mov	r3, r0
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ff5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff5e:	4819      	ldr	r0, [pc, #100]	; (800ffc4 <SystemRestart+0xa8>)
 800ff60:	f7fb fcb2 	bl	800b8c8 <HAL_UART_Transmit>


		if(strstr(buffer, "y"))
 800ff64:	f107 0310 	add.w	r3, r7, #16
 800ff68:	2179      	movs	r1, #121	; 0x79
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f00c fb64 	bl	801c638 <strchr>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d006      	beq.n	800ff84 <SystemRestart+0x68>
		{
			cli_printf(cli,"Device is going to restart.");
 800ff76:	4914      	ldr	r1, [pc, #80]	; (800ffc8 <SystemRestart+0xac>)
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f7fe ff3f 	bl	800edfc <cli_printf>
			HAL_NVIC_SystemReset();
 800ff7e:	f7f4 fc06 	bl	800478e <HAL_NVIC_SystemReset>
 800ff82:	e00c      	b.n	800ff9e <SystemRestart+0x82>
		}
		else if(strstr(buffer, "n"))
 800ff84:	f107 0310 	add.w	r3, r7, #16
 800ff88:	216e      	movs	r1, #110	; 0x6e
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f00c fb54 	bl	801c638 <strchr>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d003      	beq.n	800ff9e <SystemRestart+0x82>
		{
			cli_printf(cli,"Device restart aborted.");
 800ff96:	490d      	ldr	r1, [pc, #52]	; (800ffcc <SystemRestart+0xb0>)
 800ff98:	68f8      	ldr	r0, [r7, #12]
 800ff9a:	f7fe ff2f 	bl	800edfc <cli_printf>
		}


		flag_cli = 0;
 800ff9e:	4b08      	ldr	r3, [pc, #32]	; (800ffc0 <SystemRestart+0xa4>)
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 800ffa4:	4b05      	ldr	r3, [pc, #20]	; (800ffbc <SystemRestart+0xa0>)
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	701a      	strb	r2, [r3, #0]
}
 800ffaa:	bf00      	nop
 800ffac:	3748      	adds	r7, #72	; 0x48
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	080206c0 	.word	0x080206c0
 800ffb8:	08020e0c 	.word	0x08020e0c
 800ffbc:	20001a5e 	.word	0x20001a5e
 800ffc0:	20001a5f 	.word	0x20001a5f
 800ffc4:	200019a0 	.word	0x200019a0
 800ffc8:	08020e34 	.word	0x08020e34
 800ffcc:	08020e50 	.word	0x08020e50

0800ffd0 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 800ffdc:	4b08      	ldr	r3, [pc, #32]	; (8010000 <Co2Level+0x30>)
 800ffde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d101      	bne.n	800ffea <Co2Level+0x1a>
						get_scd4x_measurement();
 800ffe6:	f7f1 fb2b 	bl	8001640 <get_scd4x_measurement>
					}

	cli_printf(cli,"Co2 Value: %d",_RunTime_Packet.co2);
 800ffea:	4b05      	ldr	r3, [pc, #20]	; (8010000 <Co2Level+0x30>)
 800ffec:	881b      	ldrh	r3, [r3, #0]
 800ffee:	461a      	mov	r2, r3
 800fff0:	4904      	ldr	r1, [pc, #16]	; (8010004 <Co2Level+0x34>)
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f7fe ff02 	bl	800edfc <cli_printf>
}
 800fff8:	bf00      	nop
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	20001474 	.word	0x20001474
 8010004:	08020e68 	.word	0x08020e68

08010008 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]



	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010014:	4b08      	ldr	r3, [pc, #32]	; (8010038 <TempLevel+0x30>)
 8010016:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801001a:	2b00      	cmp	r3, #0
 801001c:	d101      	bne.n	8010022 <TempLevel+0x1a>
						get_scd4x_measurement();
 801001e:	f7f1 fb0f 	bl	8001640 <get_scd4x_measurement>
					}

	cli_printf(cli,"Temperature Value: %dC ",_RunTime_Packet.temperature);
 8010022:	4b05      	ldr	r3, [pc, #20]	; (8010038 <TempLevel+0x30>)
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	461a      	mov	r2, r3
 8010028:	4904      	ldr	r1, [pc, #16]	; (801003c <TempLevel+0x34>)
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f7fe fee6 	bl	800edfc <cli_printf>
}
 8010030:	bf00      	nop
 8010032:	3710      	adds	r7, #16
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	20001474 	.word	0x20001474
 801003c:	08020e78 	.word	0x08020e78

08010040 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 8010040:	b580      	push	{r7, lr}
 8010042:	b084      	sub	sp, #16
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801004c:	4b08      	ldr	r3, [pc, #32]	; (8010070 <HumidLevel+0x30>)
 801004e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010052:	2b00      	cmp	r3, #0
 8010054:	d101      	bne.n	801005a <HumidLevel+0x1a>
						get_scd4x_measurement();
 8010056:	f7f1 faf3 	bl	8001640 <get_scd4x_measurement>
					}

	cli_printf(cli,"Humidity Value: %d ",_RunTime_Packet.humidity);
 801005a:	4b05      	ldr	r3, [pc, #20]	; (8010070 <HumidLevel+0x30>)
 801005c:	689b      	ldr	r3, [r3, #8]
 801005e:	461a      	mov	r2, r3
 8010060:	4904      	ldr	r1, [pc, #16]	; (8010074 <HumidLevel+0x34>)
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7fe feca 	bl	800edfc <cli_printf>
}
 8010068:	bf00      	nop
 801006a:	3710      	adds	r7, #16
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	20001474 	.word	0x20001474
 8010074:	08020e90 	.word	0x08020e90

08010078 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"For 10seconds system will poll here to detect motion.");
 8010084:	492a      	ldr	r1, [pc, #168]	; (8010130 <MotionDetection+0xb8>)
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f7fe feb8 	bl	800edfc <cli_printf>
	HAL_Delay(2000);
 801008c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010090:	f7f3 fd6e 	bl	8003b70 <HAL_Delay>
         prev_max_wait_time_motion = HAL_GetTick();
 8010094:	f7f3 fd60 	bl	8003b58 <HAL_GetTick>
 8010098:	4603      	mov	r3, r0
 801009a:	4a26      	ldr	r2, [pc, #152]	; (8010134 <MotionDetection+0xbc>)
 801009c:	6013      	str	r3, [r2, #0]
         prev_motion = 0;
 801009e:	4b26      	ldr	r3, [pc, #152]	; (8010138 <MotionDetection+0xc0>)
 80100a0:	2200      	movs	r2, #0
 80100a2:	701a      	strb	r2, [r3, #0]
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 80100a4:	e032      	b.n	801010c <MotionDetection+0x94>
	{

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80100a6:	2101      	movs	r1, #1
 80100a8:	4824      	ldr	r0, [pc, #144]	; (801013c <MotionDetection+0xc4>)
 80100aa:	f7f5 fd21 	bl	8005af0 <HAL_GPIO_ReadPin>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d003      	beq.n	80100bc <MotionDetection+0x44>
				_RunTime_Packet.motion_detection = 1;
 80100b4:	4b22      	ldr	r3, [pc, #136]	; (8010140 <MotionDetection+0xc8>)
 80100b6:	2201      	movs	r2, #1
 80100b8:	731a      	strb	r2, [r3, #12]
 80100ba:	e002      	b.n	80100c2 <MotionDetection+0x4a>
				//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
			}
			else {
				_RunTime_Packet.motion_detection = 0;
 80100bc:	4b20      	ldr	r3, [pc, #128]	; (8010140 <MotionDetection+0xc8>)
 80100be:	2200      	movs	r2, #0
 80100c0:	731a      	strb	r2, [r3, #12]
			}

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
			cli_printf(cli,"PIR Motion: %s\r\n",_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80100c2:	4b1f      	ldr	r3, [pc, #124]	; (8010140 <MotionDetection+0xc8>)
 80100c4:	7b1b      	ldrb	r3, [r3, #12]
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	d101      	bne.n	80100ce <MotionDetection+0x56>
 80100ca:	4b1e      	ldr	r3, [pc, #120]	; (8010144 <MotionDetection+0xcc>)
 80100cc:	e000      	b.n	80100d0 <MotionDetection+0x58>
 80100ce:	4b1e      	ldr	r3, [pc, #120]	; (8010148 <MotionDetection+0xd0>)
 80100d0:	461a      	mov	r2, r3
 80100d2:	491e      	ldr	r1, [pc, #120]	; (801014c <MotionDetection+0xd4>)
 80100d4:	68f8      	ldr	r0, [r7, #12]
 80100d6:	f7fe fe91 	bl	800edfc <cli_printf>
//	         	}
HAL_Delay(100);
 80100da:	2064      	movs	r0, #100	; 0x64
 80100dc:	f7f3 fd48 	bl	8003b70 <HAL_Delay>


if(_RunTime_Packet.motion_detection == 1)
 80100e0:	4b17      	ldr	r3, [pc, #92]	; (8010140 <MotionDetection+0xc8>)
 80100e2:	7b1b      	ldrb	r3, [r3, #12]
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d111      	bne.n	801010c <MotionDetection+0x94>
{
disable_motion();
 80100e8:	2201      	movs	r2, #1
 80100ea:	2102      	movs	r1, #2
 80100ec:	4813      	ldr	r0, [pc, #76]	; (801013c <MotionDetection+0xc4>)
 80100ee:	f7f5 fd17 	bl	8005b20 <HAL_GPIO_WritePin>
HAL_Delay(500);
 80100f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80100f6:	f7f3 fd3b 	bl	8003b70 <HAL_Delay>
enable_motion();
 80100fa:	2200      	movs	r2, #0
 80100fc:	2102      	movs	r1, #2
 80100fe:	480f      	ldr	r0, [pc, #60]	; (801013c <MotionDetection+0xc4>)
 8010100:	f7f5 fd0e 	bl	8005b20 <HAL_GPIO_WritePin>
HAL_Delay(500);
 8010104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010108:	f7f3 fd32 	bl	8003b70 <HAL_Delay>
	while(HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion)
 801010c:	f7f3 fd24 	bl	8003b58 <HAL_GetTick>
 8010110:	4602      	mov	r2, r0
 8010112:	4b08      	ldr	r3, [pc, #32]	; (8010134 <MotionDetection+0xbc>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	1ad2      	subs	r2, r2, r3
 8010118:	4b0d      	ldr	r3, [pc, #52]	; (8010150 <MotionDetection+0xd8>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	429a      	cmp	r2, r3
 801011e:	d3c2      	bcc.n	80100a6 <MotionDetection+0x2e>



	}

	cli_printf(cli,"Session ended");
 8010120:	490c      	ldr	r1, [pc, #48]	; (8010154 <MotionDetection+0xdc>)
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f7fe fe6a 	bl	800edfc <cli_printf>

}
 8010128:	bf00      	nop
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	08020ea4 	.word	0x08020ea4
 8010134:	20001a58 	.word	0x20001a58
 8010138:	20001a60 	.word	0x20001a60
 801013c:	40020000 	.word	0x40020000
 8010140:	20001474 	.word	0x20001474
 8010144:	08020edc 	.word	0x08020edc
 8010148:	08020ee4 	.word	0x08020ee4
 801014c:	08020eec 	.word	0x08020eec
 8010150:	20000020 	.word	0x20000020
 8010154:	08020f00 	.word	0x08020f00

08010158 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	607a      	str	r2, [r7, #4]

	cli_printf(cli,"AirQuality Measured Values:");
 8010164:	4922      	ldr	r1, [pc, #136]	; (80101f0 <AirQuality+0x98>)
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f7fe fe48 	bl	800edfc <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

if(	_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start)
 801016c:	4b21      	ldr	r3, [pc, #132]	; (80101f4 <AirQuality+0x9c>)
 801016e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010172:	2b00      	cmp	r3, #0
 8010174:	d104      	bne.n	8010180 <AirQuality+0x28>
 8010176:	4b1f      	ldr	r3, [pc, #124]	; (80101f4 <AirQuality+0x9c>)
 8010178:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801017c:	2b00      	cmp	r3, #0
 801017e:	d004      	beq.n	801018a <AirQuality+0x32>
{
	cli_printf(cli,"Calculating, try again later");
 8010180:	491d      	ldr	r1, [pc, #116]	; (80101f8 <AirQuality+0xa0>)
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f7fe fe3a 	bl	800edfc <cli_printf>
 8010188:	e02e      	b.n	80101e8 <AirQuality+0x90>
}
else
{

	get_sps30_measurement();
 801018a:	f7f1 fb0f 	bl	80017ac <get_sps30_measurement>
	cli_printf(cli,"%0.2f pm1.0", _RunTime_Packet.pm1_0);
 801018e:	4b19      	ldr	r3, [pc, #100]	; (80101f4 <AirQuality+0x9c>)
 8010190:	691b      	ldr	r3, [r3, #16]
 8010192:	4618      	mov	r0, r3
 8010194:	f7f0 f9f0 	bl	8000578 <__aeabi_f2d>
 8010198:	4602      	mov	r2, r0
 801019a:	460b      	mov	r3, r1
 801019c:	4917      	ldr	r1, [pc, #92]	; (80101fc <AirQuality+0xa4>)
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f7fe fe2c 	bl	800edfc <cli_printf>
	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
 80101a4:	4b13      	ldr	r3, [pc, #76]	; (80101f4 <AirQuality+0x9c>)
 80101a6:	695b      	ldr	r3, [r3, #20]
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7f0 f9e5 	bl	8000578 <__aeabi_f2d>
 80101ae:	4602      	mov	r2, r0
 80101b0:	460b      	mov	r3, r1
 80101b2:	4913      	ldr	r1, [pc, #76]	; (8010200 <AirQuality+0xa8>)
 80101b4:	68f8      	ldr	r0, [r7, #12]
 80101b6:	f7fe fe21 	bl	800edfc <cli_printf>
	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
 80101ba:	4b0e      	ldr	r3, [pc, #56]	; (80101f4 <AirQuality+0x9c>)
 80101bc:	699b      	ldr	r3, [r3, #24]
 80101be:	4618      	mov	r0, r3
 80101c0:	f7f0 f9da 	bl	8000578 <__aeabi_f2d>
 80101c4:	4602      	mov	r2, r0
 80101c6:	460b      	mov	r3, r1
 80101c8:	490e      	ldr	r1, [pc, #56]	; (8010204 <AirQuality+0xac>)
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f7fe fe16 	bl	800edfc <cli_printf>
	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
 80101d0:	4b08      	ldr	r3, [pc, #32]	; (80101f4 <AirQuality+0x9c>)
 80101d2:	69db      	ldr	r3, [r3, #28]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7f0 f9cf 	bl	8000578 <__aeabi_f2d>
 80101da:	4602      	mov	r2, r0
 80101dc:	460b      	mov	r3, r1
 80101de:	490a      	ldr	r1, [pc, #40]	; (8010208 <AirQuality+0xb0>)
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f7fe fe0b 	bl	800edfc <cli_printf>
}


}
 80101e6:	bf00      	nop
 80101e8:	bf00      	nop
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	08020f10 	.word	0x08020f10
 80101f4:	20001474 	.word	0x20001474
 80101f8:	08020f2c 	.word	0x08020f2c
 80101fc:	08020f4c 	.word	0x08020f4c
 8010200:	08020f58 	.word	0x08020f58
 8010204:	08020f68 	.word	0x08020f68
 8010208:	08020f78 	.word	0x08020f78

0801020c <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8010218:	4808      	ldr	r0, [pc, #32]	; (801023c <BattVolt+0x30>)
 801021a:	f002 f9e9 	bl	80125f0 <adc_Measure>
	cli_printf(cli,"Battery voltage: %0.2f",_RunTime_Packet.battery_voltage);
 801021e:	4b08      	ldr	r3, [pc, #32]	; (8010240 <BattVolt+0x34>)
 8010220:	6a1b      	ldr	r3, [r3, #32]
 8010222:	4618      	mov	r0, r3
 8010224:	f7f0 f9a8 	bl	8000578 <__aeabi_f2d>
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	4905      	ldr	r1, [pc, #20]	; (8010244 <BattVolt+0x38>)
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	f7fe fde4 	bl	800edfc <cli_printf>


}
 8010234:	bf00      	nop
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}
 801023c:	20001494 	.word	0x20001494
 8010240:	20001474 	.word	0x20001474
 8010244:	08020f88 	.word	0x08020f88

08010248 <initializeEmbeddedCli>:


/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 8010248:	b5b0      	push	{r4, r5, r7, lr}
 801024a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801024e:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 8010250:	f000 fcd1 	bl	8010bf6 <embeddedCliNewDefault>
 8010254:	4603      	mov	r3, r0
 8010256:	4aac      	ldr	r2, [pc, #688]	; (8010508 <initializeEmbeddedCli+0x2c0>)
 8010258:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 801025a:	4bac      	ldr	r3, [pc, #688]	; (801050c <initializeEmbeddedCli+0x2c4>)
 801025c:	f507 7411 	add.w	r4, r7, #580	; 0x244
 8010260:	461d      	mov	r5, r3
 8010262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010266:	682b      	ldr	r3, [r5, #0]
 8010268:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 801026a:	4ba9      	ldr	r3, [pc, #676]	; (8010510 <initializeEmbeddedCli+0x2c8>)
 801026c:	f507 740c 	add.w	r4, r7, #560	; 0x230
 8010270:	461d      	mov	r5, r3
 8010272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010276:	682b      	ldr	r3, [r5, #0]
 8010278:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor", .tokenizeArgs = true, .context = NULL,
			.binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature", .help =
 801027a:	4ba6      	ldr	r3, [pc, #664]	; (8010514 <initializeEmbeddedCli+0x2cc>)
 801027c:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 8010280:	461d      	mov	r5, r3
 8010282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010286:	682b      	ldr	r3, [r5, #0]
 8010288:	6023      	str	r3, [r4, #0]
				"Device Signature-Electronic ID", .tokenizeArgs = true, .context = NULL,
				.binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 801028a:	4ba3      	ldr	r3, [pc, #652]	; (8010518 <initializeEmbeddedCli+0x2d0>)
 801028c:	f507 7402 	add.w	r4, r7, #520	; 0x208
 8010290:	461d      	mov	r5, r3
 8010292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010296:	682b      	ldr	r3, [r5, #0]
 8010298:	6023      	str	r3, [r4, #0]
				"Sets ID", .tokenizeArgs = true, .context = NULL,
				.binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 801029a:	4ba0      	ldr	r3, [pc, #640]	; (801051c <initializeEmbeddedCli+0x2d4>)
 801029c:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 80102a0:	461d      	mov	r5, r3
 80102a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102a6:	682b      	ldr	r3, [r5, #0]
 80102a8:	6023      	str	r3, [r4, #0]
				"Sets Location", .tokenizeArgs = true, .context = NULL,
				.binding = SetLocation };

	CliCommandBinding Set_name = { .name = "set-name", .help =
 80102aa:	4b9d      	ldr	r3, [pc, #628]	; (8010520 <initializeEmbeddedCli+0x2d8>)
 80102ac:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 80102b0:	461d      	mov	r5, r3
 80102b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102b6:	682b      	ldr	r3, [r5, #0]
 80102b8:	6023      	str	r3, [r4, #0]
				"Sets name", .tokenizeArgs = true, .context = NULL,
				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 80102ba:	4b9a      	ldr	r3, [pc, #616]	; (8010524 <initializeEmbeddedCli+0x2dc>)
 80102bc:	f507 74e6 	add.w	r4, r7, #460	; 0x1cc
 80102c0:	461d      	mov	r5, r3
 80102c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102c6:	682b      	ldr	r3, [r5, #0]
 80102c8:	6023      	str	r3, [r4, #0]
				"Sets group", .tokenizeArgs = true, .context = NULL,
				.binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help =
 80102ca:	4b97      	ldr	r3, [pc, #604]	; (8010528 <initializeEmbeddedCli+0x2e0>)
 80102cc:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 80102d0:	461d      	mov	r5, r3
 80102d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102d6:	682b      	ldr	r3, [r5, #0]
 80102d8:	6023      	str	r3, [r4, #0]
				"gets ID", .tokenizeArgs = true, .context = NULL,
				.binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 80102da:	4b94      	ldr	r3, [pc, #592]	; (801052c <initializeEmbeddedCli+0x2e4>)
 80102dc:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 80102e0:	461d      	mov	r5, r3
 80102e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102e6:	682b      	ldr	r3, [r5, #0]
 80102e8:	6023      	str	r3, [r4, #0]
				"gets Location", .tokenizeArgs = true, .context = NULL,
				.binding = GetLocation };

	CliCommandBinding Get_name = { .name = "get-name", .help =
 80102ea:	4b91      	ldr	r3, [pc, #580]	; (8010530 <initializeEmbeddedCli+0x2e8>)
 80102ec:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 80102f0:	461d      	mov	r5, r3
 80102f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80102f6:	682b      	ldr	r3, [r5, #0]
 80102f8:	6023      	str	r3, [r4, #0]
				"gets name", .tokenizeArgs = true, .context = NULL,
				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help =
 80102fa:	4b8e      	ldr	r3, [pc, #568]	; (8010534 <initializeEmbeddedCli+0x2ec>)
 80102fc:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 8010300:	461d      	mov	r5, r3
 8010302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010306:	682b      	ldr	r3, [r5, #0]
 8010308:	6023      	str	r3, [r4, #0]
				"gets group", .tokenizeArgs = true, .context = NULL,
				.binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 801030a:	4b8b      	ldr	r3, [pc, #556]	; (8010538 <initializeEmbeddedCli+0x2f0>)
 801030c:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 8010310:	461d      	mov	r5, r3
 8010312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010316:	682b      	ldr	r3, [r5, #0]
 8010318:	6023      	str	r3, [r4, #0]
			"Set Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help =
 801031a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801031e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010322:	4a86      	ldr	r2, [pc, #536]	; (801053c <initializeEmbeddedCli+0x2f4>)
 8010324:	461c      	mov	r4, r3
 8010326:	4615      	mov	r5, r2
 8010328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801032a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801032c:	682b      	ldr	r3, [r5, #0]
 801032e:	6023      	str	r3, [r4, #0]
			"Set Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 8010330:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010334:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010338:	4a81      	ldr	r2, [pc, #516]	; (8010540 <initializeEmbeddedCli+0x2f8>)
 801033a:	461c      	mov	r4, r3
 801033c:	4615      	mov	r5, r2
 801033e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010342:	682b      	ldr	r3, [r5, #0]
 8010344:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 8010346:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801034a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801034e:	4a7d      	ldr	r2, [pc, #500]	; (8010544 <initializeEmbeddedCli+0x2fc>)
 8010350:	461c      	mov	r4, r3
 8010352:	4615      	mov	r5, r2
 8010354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 801035c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010360:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8010364:	4a78      	ldr	r2, [pc, #480]	; (8010548 <initializeEmbeddedCli+0x300>)
 8010366:	461c      	mov	r4, r3
 8010368:	4615      	mov	r5, r2
 801036a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801036c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801036e:	682b      	ldr	r3, [r5, #0]
 8010370:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true, .context = NULL,
			.binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 8010372:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010376:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801037a:	4a74      	ldr	r2, [pc, #464]	; (801054c <initializeEmbeddedCli+0x304>)
 801037c:	461c      	mov	r4, r3
 801037e:	4615      	mov	r5, r2
 8010380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010384:	682b      	ldr	r3, [r5, #0]
 8010386:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };


	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 8010388:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801038c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8010390:	4a6f      	ldr	r2, [pc, #444]	; (8010550 <initializeEmbeddedCli+0x308>)
 8010392:	461c      	mov	r4, r3
 8010394:	4615      	mov	r5, r2
 8010396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801039a:	682b      	ldr	r3, [r5, #0]
 801039c:	6023      	str	r3, [r4, #0]
			"Set desired filename", .tokenizeArgs = true, .context = NULL,
			.binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 801039e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80103a6:	4a6b      	ldr	r2, [pc, #428]	; (8010554 <initializeEmbeddedCli+0x30c>)
 80103a8:	461c      	mov	r4, r3
 80103aa:	4615      	mov	r5, r2
 80103ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103b0:	682b      	ldr	r3, [r5, #0]
 80103b2:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL,
			.binding = GetFilename };


	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 80103b4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80103bc:	4a66      	ldr	r2, [pc, #408]	; (8010558 <initializeEmbeddedCli+0x310>)
 80103be:	461c      	mov	r4, r3
 80103c0:	4615      	mov	r5, r2
 80103c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103c6:	682b      	ldr	r3, [r5, #0]
 80103c8:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 80103ca:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103ce:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80103d2:	4a62      	ldr	r2, [pc, #392]	; (801055c <initializeEmbeddedCli+0x314>)
 80103d4:	461c      	mov	r4, r3
 80103d6:	4615      	mov	r5, r2
 80103d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103dc:	682b      	ldr	r3, [r5, #0]
 80103de:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL,
			.binding = GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 80103e0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80103e8:	4a5d      	ldr	r2, [pc, #372]	; (8010560 <initializeEmbeddedCli+0x318>)
 80103ea:	461c      	mov	r4, r3
 80103ec:	4615      	mov	r5, r2
 80103ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103f2:	682b      	ldr	r3, [r5, #0]
 80103f4:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context = NULL,
			.binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 80103f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80103fa:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80103fe:	4a59      	ldr	r2, [pc, #356]	; (8010564 <initializeEmbeddedCli+0x31c>)
 8010400:	461c      	mov	r4, r3
 8010402:	4615      	mov	r5, r2
 8010404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010408:	682b      	ldr	r3, [r5, #0]
 801040a:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 801040c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010410:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010414:	4a54      	ldr	r2, [pc, #336]	; (8010568 <initializeEmbeddedCli+0x320>)
 8010416:	461c      	mov	r4, r3
 8010418:	4615      	mov	r5, r2
 801041a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801041c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801041e:	682b      	ldr	r3, [r5, #0]
 8010420:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8010422:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010426:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 801042a:	4a50      	ldr	r2, [pc, #320]	; (801056c <initializeEmbeddedCli+0x324>)
 801042c:	461c      	mov	r4, r3
 801042e:	4615      	mov	r5, r2
 8010430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010434:	682b      	ldr	r3, [r5, #0]
 8010436:	6023      	str	r3, [r4, #0]
			"Check Co2 level", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8010438:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801043c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8010440:	4a4b      	ldr	r2, [pc, #300]	; (8010570 <initializeEmbeddedCli+0x328>)
 8010442:	461c      	mov	r4, r3
 8010444:	4615      	mov	r5, r2
 8010446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801044a:	682b      	ldr	r3, [r5, #0]
 801044c:	6023      	str	r3, [r4, #0]
			"Check Temperature level", .tokenizeArgs = true, .context = NULL,
			.binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 801044e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010452:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010456:	4a47      	ldr	r2, [pc, #284]	; (8010574 <initializeEmbeddedCli+0x32c>)
 8010458:	461c      	mov	r4, r3
 801045a:	4615      	mov	r5, r2
 801045c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801045e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010460:	682b      	ldr	r3, [r5, #0]
 8010462:	6023      	str	r3, [r4, #0]
			"Check Humidity level", .tokenizeArgs = true, .context = NULL,
			.binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8010464:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010468:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801046c:	4a42      	ldr	r2, [pc, #264]	; (8010578 <initializeEmbeddedCli+0x330>)
 801046e:	461c      	mov	r4, r3
 8010470:	4615      	mov	r5, r2
 8010472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010476:	682b      	ldr	r3, [r5, #0]
 8010478:	6023      	str	r3, [r4, #0]
			"Detect Motion", .tokenizeArgs = true, .context = NULL,
			.binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 801047a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801047e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010482:	4a3e      	ldr	r2, [pc, #248]	; (801057c <initializeEmbeddedCli+0x334>)
 8010484:	461c      	mov	r4, r3
 8010486:	4615      	mov	r5, r2
 8010488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801048c:	682b      	ldr	r3, [r5, #0]
 801048e:	6023      	str	r3, [r4, #0]
				"Check air quality level", .tokenizeArgs = true, .context = NULL,
				.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 8010490:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010494:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010498:	4a39      	ldr	r2, [pc, #228]	; (8010580 <initializeEmbeddedCli+0x338>)
 801049a:	461c      	mov	r4, r3
 801049c:	4615      	mov	r5, r2
 801049e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104a2:	682b      	ldr	r3, [r5, #0]
 80104a4:	6023      	str	r3, [r4, #0]
				.binding = BattVolt };



	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 80104a6:	4b18      	ldr	r3, [pc, #96]	; (8010508 <initializeEmbeddedCli+0x2c0>)
 80104a8:	681c      	ldr	r4, [r3, #0]
 80104aa:	466a      	mov	r2, sp
 80104ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80104b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104b4:	e882 0003 	stmia.w	r2, {r0, r1}
 80104b8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80104bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80104be:	4620      	mov	r0, r4
 80104c0:	f000 fc57 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 80104c4:	4b10      	ldr	r3, [pc, #64]	; (8010508 <initializeEmbeddedCli+0x2c0>)
 80104c6:	681c      	ldr	r4, [r3, #0]
 80104c8:	466a      	mov	r2, sp
 80104ca:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80104ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80104d6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80104da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80104dc:	4620      	mov	r0, r4
 80104de:	f000 fc48 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 80104e2:	4b09      	ldr	r3, [pc, #36]	; (8010508 <initializeEmbeddedCli+0x2c0>)
 80104e4:	681c      	ldr	r4, [r3, #0]
 80104e6:	466a      	mov	r2, sp
 80104e8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80104ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80104f4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80104f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80104fa:	4620      	mov	r0, r4
 80104fc:	f000 fc39 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8010500:	4b01      	ldr	r3, [pc, #4]	; (8010508 <initializeEmbeddedCli+0x2c0>)
 8010502:	681c      	ldr	r4, [r3, #0]
 8010504:	466a      	mov	r2, sp
 8010506:	e03d      	b.n	8010584 <initializeEmbeddedCli+0x33c>
 8010508:	20001a50 	.word	0x20001a50
 801050c:	08020fa0 	.word	0x08020fa0
 8010510:	08020fb4 	.word	0x08020fb4
 8010514:	08020fc8 	.word	0x08020fc8
 8010518:	08020fdc 	.word	0x08020fdc
 801051c:	08020ff0 	.word	0x08020ff0
 8010520:	08021004 	.word	0x08021004
 8010524:	08021018 	.word	0x08021018
 8010528:	0802102c 	.word	0x0802102c
 801052c:	08021040 	.word	0x08021040
 8010530:	08021054 	.word	0x08021054
 8010534:	08021068 	.word	0x08021068
 8010538:	0802107c 	.word	0x0802107c
 801053c:	08021090 	.word	0x08021090
 8010540:	080210a4 	.word	0x080210a4
 8010544:	080210b8 	.word	0x080210b8
 8010548:	080210cc 	.word	0x080210cc
 801054c:	080210e0 	.word	0x080210e0
 8010550:	080210f4 	.word	0x080210f4
 8010554:	08021108 	.word	0x08021108
 8010558:	0802111c 	.word	0x0802111c
 801055c:	08021130 	.word	0x08021130
 8010560:	08021144 	.word	0x08021144
 8010564:	08021158 	.word	0x08021158
 8010568:	0802116c 	.word	0x0802116c
 801056c:	08021180 	.word	0x08021180
 8010570:	08021194 	.word	0x08021194
 8010574:	080211a8 	.word	0x080211a8
 8010578:	080211bc 	.word	0x080211bc
 801057c:	080211d0 	.word	0x080211d0
 8010580:	080211e4 	.word	0x080211e4
 8010584:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8010588:	e893 0003 	ldmia.w	r3, {r0, r1}
 801058c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8010594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010596:	4620      	mov	r0, r4
 8010598:	f000 fbeb 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 801059c:	4bd6      	ldr	r3, [pc, #856]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 801059e:	681c      	ldr	r4, [r3, #0]
 80105a0:	466a      	mov	r2, sp
 80105a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80105a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80105aa:	e882 0003 	stmia.w	r2, {r0, r1}
 80105ae:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80105b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105b4:	4620      	mov	r0, r4
 80105b6:	f000 fbdc 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_name);
 80105ba:	4bcf      	ldr	r3, [pc, #828]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80105bc:	681c      	ldr	r4, [r3, #0]
 80105be:	466a      	mov	r2, sp
 80105c0:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80105c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80105c8:	e882 0003 	stmia.w	r2, {r0, r1}
 80105cc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80105d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105d2:	4620      	mov	r0, r4
 80105d4:	f000 fbcd 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_group);
 80105d8:	4bc7      	ldr	r3, [pc, #796]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80105da:	681c      	ldr	r4, [r3, #0]
 80105dc:	466a      	mov	r2, sp
 80105de:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80105e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80105e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80105ea:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80105ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80105f0:	4620      	mov	r0, r4
 80105f2:	f000 fbbe 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 80105f6:	4bc0      	ldr	r3, [pc, #768]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80105f8:	681c      	ldr	r4, [r3, #0]
 80105fa:	466a      	mov	r2, sp
 80105fc:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8010600:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010604:	e882 0003 	stmia.w	r2, {r0, r1}
 8010608:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801060c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801060e:	4620      	mov	r0, r4
 8010610:	f000 fbaf 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8010614:	4bb8      	ldr	r3, [pc, #736]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010616:	681c      	ldr	r4, [r3, #0]
 8010618:	466a      	mov	r2, sp
 801061a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801061e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010622:	e882 0003 	stmia.w	r2, {r0, r1}
 8010626:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801062a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801062c:	4620      	mov	r0, r4
 801062e:	f000 fba0 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_name);
 8010632:	4bb1      	ldr	r3, [pc, #708]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010634:	681c      	ldr	r4, [r3, #0]
 8010636:	466a      	mov	r2, sp
 8010638:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801063c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010640:	e882 0003 	stmia.w	r2, {r0, r1}
 8010644:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8010648:	cb0e      	ldmia	r3, {r1, r2, r3}
 801064a:	4620      	mov	r0, r4
 801064c:	f000 fb91 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_group);
 8010650:	4ba9      	ldr	r3, [pc, #676]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010652:	681c      	ldr	r4, [r3, #0]
 8010654:	466a      	mov	r2, sp
 8010656:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801065a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801065e:	e882 0003 	stmia.w	r2, {r0, r1}
 8010662:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8010666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010668:	4620      	mov	r0, r4
 801066a:	f000 fb82 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 801066e:	4ba2      	ldr	r3, [pc, #648]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010670:	681c      	ldr	r4, [r3, #0]
 8010672:	466a      	mov	r2, sp
 8010674:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8010678:	e893 0003 	ldmia.w	r3, {r0, r1}
 801067c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010680:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8010684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010686:	4620      	mov	r0, r4
 8010688:	f000 fb73 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 801068c:	4b9a      	ldr	r3, [pc, #616]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 801068e:	681c      	ldr	r4, [r3, #0]
 8010690:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010694:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010698:	466d      	mov	r5, sp
 801069a:	f103 020c 	add.w	r2, r3, #12
 801069e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80106a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80106a8:	4620      	mov	r0, r4
 80106aa:	f000 fb62 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 80106ae:	4b92      	ldr	r3, [pc, #584]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80106b0:	681c      	ldr	r4, [r3, #0]
 80106b2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80106b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80106ba:	466d      	mov	r5, sp
 80106bc:	f103 020c 	add.w	r2, r3, #12
 80106c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80106c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80106ca:	4620      	mov	r0, r4
 80106cc:	f000 fb51 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 80106d0:	4b89      	ldr	r3, [pc, #548]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80106d2:	681c      	ldr	r4, [r3, #0]
 80106d4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80106d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106dc:	466d      	mov	r5, sp
 80106de:	f103 020c 	add.w	r2, r3, #12
 80106e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80106ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80106ec:	4620      	mov	r0, r4
 80106ee:	f000 fb40 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 80106f2:	4b81      	ldr	r3, [pc, #516]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80106f4:	681c      	ldr	r4, [r3, #0]
 80106f6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80106fa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80106fe:	466d      	mov	r5, sp
 8010700:	f103 020c 	add.w	r2, r3, #12
 8010704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010708:	e885 0003 	stmia.w	r5, {r0, r1}
 801070c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801070e:	4620      	mov	r0, r4
 8010710:	f000 fb2f 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8010714:	4b78      	ldr	r3, [pc, #480]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010716:	681c      	ldr	r4, [r3, #0]
 8010718:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801071c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8010720:	466d      	mov	r5, sp
 8010722:	f103 020c 	add.w	r2, r3, #12
 8010726:	e892 0003 	ldmia.w	r2, {r0, r1}
 801072a:	e885 0003 	stmia.w	r5, {r0, r1}
 801072e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010730:	4620      	mov	r0, r4
 8010732:	f000 fb1e 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8010736:	4b70      	ldr	r3, [pc, #448]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010738:	681c      	ldr	r4, [r3, #0]
 801073a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801073e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8010742:	466d      	mov	r5, sp
 8010744:	f103 020c 	add.w	r2, r3, #12
 8010748:	e892 0003 	ldmia.w	r2, {r0, r1}
 801074c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010752:	4620      	mov	r0, r4
 8010754:	f000 fb0d 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8010758:	4b67      	ldr	r3, [pc, #412]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 801075a:	681c      	ldr	r4, [r3, #0]
 801075c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010760:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8010764:	466d      	mov	r5, sp
 8010766:	f103 020c 	add.w	r2, r3, #12
 801076a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801076e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fafc 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 801077a:	4b5f      	ldr	r3, [pc, #380]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 801077c:	681c      	ldr	r4, [r3, #0]
 801077e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010782:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010786:	466d      	mov	r5, sp
 8010788:	f103 020c 	add.w	r2, r3, #12
 801078c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010790:	e885 0003 	stmia.w	r5, {r0, r1}
 8010794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010796:	4620      	mov	r0, r4
 8010798:	f000 faeb 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 801079c:	4b56      	ldr	r3, [pc, #344]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 801079e:	681c      	ldr	r4, [r3, #0]
 80107a0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80107a4:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80107a8:	466d      	mov	r5, sp
 80107aa:	f103 020c 	add.w	r2, r3, #12
 80107ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80107b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80107b8:	4620      	mov	r0, r4
 80107ba:	f000 fada 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 80107be:	4b4e      	ldr	r3, [pc, #312]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80107c0:	681c      	ldr	r4, [r3, #0]
 80107c2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80107c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80107ca:	466d      	mov	r5, sp
 80107cc:	f103 020c 	add.w	r2, r3, #12
 80107d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80107d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80107da:	4620      	mov	r0, r4
 80107dc:	f000 fac9 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 80107e0:	4b45      	ldr	r3, [pc, #276]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80107e2:	681c      	ldr	r4, [r3, #0]
 80107e4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80107e8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80107ec:	466d      	mov	r5, sp
 80107ee:	f103 020c 	add.w	r2, r3, #12
 80107f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80107fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80107fc:	4620      	mov	r0, r4
 80107fe:	f000 fab8 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 8010802:	4b3d      	ldr	r3, [pc, #244]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010804:	681c      	ldr	r4, [r3, #0]
 8010806:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801080a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801080e:	466d      	mov	r5, sp
 8010810:	f103 020c 	add.w	r2, r3, #12
 8010814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010818:	e885 0003 	stmia.w	r5, {r0, r1}
 801081c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801081e:	4620      	mov	r0, r4
 8010820:	f000 faa7 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 8010824:	4b34      	ldr	r3, [pc, #208]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010826:	681c      	ldr	r4, [r3, #0]
 8010828:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801082c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010830:	466d      	mov	r5, sp
 8010832:	f103 020c 	add.w	r2, r3, #12
 8010836:	e892 0003 	ldmia.w	r2, {r0, r1}
 801083a:	e885 0003 	stmia.w	r5, {r0, r1}
 801083e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010840:	4620      	mov	r0, r4
 8010842:	f000 fa96 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8010846:	4b2c      	ldr	r3, [pc, #176]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 8010848:	681c      	ldr	r4, [r3, #0]
 801084a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801084e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8010852:	466d      	mov	r5, sp
 8010854:	f103 020c 	add.w	r2, r3, #12
 8010858:	e892 0003 	ldmia.w	r2, {r0, r1}
 801085c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010862:	4620      	mov	r0, r4
 8010864:	f000 fa85 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8010868:	4b23      	ldr	r3, [pc, #140]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 801086a:	681c      	ldr	r4, [r3, #0]
 801086c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010870:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010874:	466d      	mov	r5, sp
 8010876:	f103 020c 	add.w	r2, r3, #12
 801087a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801087e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010884:	4620      	mov	r0, r4
 8010886:	f000 fa74 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 801088a:	4b1b      	ldr	r3, [pc, #108]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 801088c:	681c      	ldr	r4, [r3, #0]
 801088e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8010892:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010896:	466d      	mov	r5, sp
 8010898:	f103 020c 	add.w	r2, r3, #12
 801089c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80108a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80108a6:	4620      	mov	r0, r4
 80108a8:	f000 fa63 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 80108ac:	4b12      	ldr	r3, [pc, #72]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80108ae:	681c      	ldr	r4, [r3, #0]
 80108b0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80108b4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80108b8:	466d      	mov	r5, sp
 80108ba:	f103 020c 	add.w	r2, r3, #12
 80108be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80108c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80108c8:	4620      	mov	r0, r4
 80108ca:	f000 fa52 	bl	8010d72 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 80108ce:	4b0a      	ldr	r3, [pc, #40]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80108d0:	681c      	ldr	r4, [r3, #0]
 80108d2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80108d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80108da:	466d      	mov	r5, sp
 80108dc:	f103 020c 	add.w	r2, r3, #12
 80108e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80108e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80108ea:	4620      	mov	r0, r4
 80108ec:	f000 fa41 	bl	8010d72 <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 80108f0:	4b01      	ldr	r3, [pc, #4]	; (80108f8 <initializeEmbeddedCli+0x6b0>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	e002      	b.n	80108fc <initializeEmbeddedCli+0x6b4>
 80108f6:	bf00      	nop
 80108f8:	20001a50 	.word	0x20001a50
 80108fc:	4a06      	ldr	r2, [pc, #24]	; (8010918 <initializeEmbeddedCli+0x6d0>)
 80108fe:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8010900:	4b06      	ldr	r3, [pc, #24]	; (801091c <initializeEmbeddedCli+0x6d4>)
 8010902:	2201      	movs	r2, #1
 8010904:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010906:	4b06      	ldr	r3, [pc, #24]	; (8010920 <initializeEmbeddedCli+0x6d8>)
 8010908:	2200      	movs	r2, #0
 801090a:	701a      	strb	r2, [r3, #0]
}
 801090c:	bf00      	nop
 801090e:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8010912:	46bd      	mov	sp, r7
 8010914:	bdb0      	pop	{r4, r5, r7, pc}
 8010916:	bf00      	nop
 8010918:	0800edd1 	.word	0x0800edd1
 801091c:	20001a5d 	.word	0x20001a5d
 8010920:	20001a5e 	.word	0x20001a5e

08010924 <console_process>:

void console_process(void) {
 8010924:	b580      	push	{r7, lr}
 8010926:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8010928:	4b03      	ldr	r3, [pc, #12]	; (8010938 <console_process+0x14>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4618      	mov	r0, r3
 801092e:	f000 f990 	bl	8010c52 <embeddedCliProcess>
}
 8010932:	bf00      	nop
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	20001a50 	.word	0x20001a50

0801093c <console_uart_deinit>:



void console_uart_deinit()
{
 801093c:	b580      	push	{r7, lr}
 801093e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010940:	4803      	ldr	r0, [pc, #12]	; (8010950 <console_uart_deinit+0x14>)
 8010942:	f7fa ff92 	bl	800b86a <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 8010946:	4802      	ldr	r0, [pc, #8]	; (8010950 <console_uart_deinit+0x14>)
 8010948:	f7f2 fee8 	bl	800371c <HAL_UART_MspDeInit>
}
 801094c:	bf00      	nop
 801094e:	bd80      	pop	{r7, pc}
 8010950:	200019a0 	.word	0x200019a0

08010954 <console_uart_init>:
void console_uart_init()
{
 8010954:	b580      	push	{r7, lr}
 8010956:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010958:	4815      	ldr	r0, [pc, #84]	; (80109b0 <console_uart_init+0x5c>)
 801095a:	f7fa ff86 	bl	800b86a <HAL_UART_DeInit>
	  huart1.Instance = USART1;
 801095e:	4b14      	ldr	r3, [pc, #80]	; (80109b0 <console_uart_init+0x5c>)
 8010960:	4a14      	ldr	r2, [pc, #80]	; (80109b4 <console_uart_init+0x60>)
 8010962:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 8010964:	4b12      	ldr	r3, [pc, #72]	; (80109b0 <console_uart_init+0x5c>)
 8010966:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801096a:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801096c:	4b10      	ldr	r3, [pc, #64]	; (80109b0 <console_uart_init+0x5c>)
 801096e:	2200      	movs	r2, #0
 8010970:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8010972:	4b0f      	ldr	r3, [pc, #60]	; (80109b0 <console_uart_init+0x5c>)
 8010974:	2200      	movs	r2, #0
 8010976:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8010978:	4b0d      	ldr	r3, [pc, #52]	; (80109b0 <console_uart_init+0x5c>)
 801097a:	2200      	movs	r2, #0
 801097c:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 801097e:	4b0c      	ldr	r3, [pc, #48]	; (80109b0 <console_uart_init+0x5c>)
 8010980:	220c      	movs	r2, #12
 8010982:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010984:	4b0a      	ldr	r3, [pc, #40]	; (80109b0 <console_uart_init+0x5c>)
 8010986:	2200      	movs	r2, #0
 8010988:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801098a:	4b09      	ldr	r3, [pc, #36]	; (80109b0 <console_uart_init+0x5c>)
 801098c:	2200      	movs	r2, #0
 801098e:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010990:	4807      	ldr	r0, [pc, #28]	; (80109b0 <console_uart_init+0x5c>)
 8010992:	f7fa ff1d 	bl	800b7d0 <HAL_UART_Init>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d001      	beq.n	80109a0 <console_uart_init+0x4c>
	  {
	    Error_Handler();
 801099c:	f7f2 fb9e 	bl	80030dc <Error_Handler>
	  }
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80109a0:	2201      	movs	r2, #1
 80109a2:	4905      	ldr	r1, [pc, #20]	; (80109b8 <console_uart_init+0x64>)
 80109a4:	4802      	ldr	r0, [pc, #8]	; (80109b0 <console_uart_init+0x5c>)
 80109a6:	f7fb f821 	bl	800b9ec <HAL_UART_Receive_IT>
}
 80109aa:	bf00      	nop
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	200019a0 	.word	0x200019a0
 80109b4:	40011000 	.word	0x40011000
 80109b8:	20001a5c 	.word	0x20001a5c

080109bc <console_init>:

void console_init(void) {
 80109bc:	b580      	push	{r7, lr}
 80109be:	af00      	add	r7, sp, #0
	console_uart_init();
 80109c0:	f7ff ffc8 	bl	8010954 <console_uart_init>
	initializeEmbeddedCli();
 80109c4:	f7ff fc40 	bl	8010248 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80109c8:	2201      	movs	r2, #1
 80109ca:	4903      	ldr	r1, [pc, #12]	; (80109d8 <console_init+0x1c>)
 80109cc:	4803      	ldr	r0, [pc, #12]	; (80109dc <console_init+0x20>)
 80109ce:	f7fb f80d 	bl	800b9ec <HAL_UART_Receive_IT>
}
 80109d2:	bf00      	nop
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	20001a5c 	.word	0x20001a5c
 80109dc:	200019a0 	.word	0x200019a0

080109e0 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 80109e0:	b480      	push	{r7}
 80109e2:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 80109e4:	4b0e      	ldr	r3, [pc, #56]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
 80109e6:	2240      	movs	r2, #64	; 0x40
 80109e8:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 80109ea:	4b0d      	ldr	r3, [pc, #52]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
 80109ec:	2240      	movs	r2, #64	; 0x40
 80109ee:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 80109f0:	4b0b      	ldr	r3, [pc, #44]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
 80109f2:	2280      	movs	r2, #128	; 0x80
 80109f4:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 80109f6:	4b0a      	ldr	r3, [pc, #40]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 80109fc:	4b08      	ldr	r3, [pc, #32]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 8010a02:	4b07      	ldr	r3, [pc, #28]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
 8010a04:	2232      	movs	r2, #50	; 0x32
 8010a06:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8010a08:	4b05      	ldr	r3, [pc, #20]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8010a0e:	4b04      	ldr	r3, [pc, #16]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
 8010a10:	4a04      	ldr	r2, [pc, #16]	; (8010a24 <embeddedCliDefaultConfig+0x44>)
 8010a12:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8010a14:	4b02      	ldr	r3, [pc, #8]	; (8010a20 <embeddedCliDefaultConfig+0x40>)
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr
 8010a20:	20001a64 	.word	0x20001a64
 8010a24:	0802121c 	.word	0x0802121c

08010a28 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	895b      	ldrh	r3, [r3, #10]
 8010a34:	2201      	movs	r2, #1
 8010a36:	4413      	add	r3, r2
 8010a38:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	889b      	ldrh	r3, [r3, #4]
 8010a3e:	3303      	adds	r3, #3
 8010a40:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	88db      	ldrh	r3, [r3, #6]
 8010a46:	3303      	adds	r3, #3
 8010a48:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010a4a:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	891b      	ldrh	r3, [r3, #8]
 8010a50:	3303      	adds	r3, #3
 8010a52:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8010a54:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8010a56:	89fa      	ldrh	r2, [r7, #14]
 8010a58:	4613      	mov	r3, r2
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	4413      	add	r3, r2
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	3303      	adds	r3, #3
 8010a62:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010a64:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8010a66:	89fb      	ldrh	r3, [r7, #14]
 8010a68:	3303      	adds	r3, #3
 8010a6a:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8010a6c:	4413      	add	r3, r2
 8010a6e:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	009b      	lsls	r3, r3, #2
 8010a74:	b29b      	uxth	r3, r3
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	3714      	adds	r7, #20
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr

08010a82 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b088      	sub	sp, #32
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	895b      	ldrh	r3, [r3, #10]
 8010a92:	2201      	movs	r2, #1
 8010a94:	4413      	add	r3, r2
 8010a96:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff ffc5 	bl	8010a28 <embeddedCliRequiredSize>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d10f      	bne.n	8010ace <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8010aae:	6938      	ldr	r0, [r7, #16]
 8010ab0:	f00a fd6c 	bl	801b58c <malloc>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d101      	bne.n	8010ac8 <embeddedCliNew+0x46>
            return NULL;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	e092      	b.n	8010bee <embeddedCliNew+0x16c>
        allocated = true;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	77fb      	strb	r3, [r7, #31]
 8010acc:	e007      	b.n	8010ade <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	8a1b      	ldrh	r3, [r3, #16]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d901      	bls.n	8010ade <embeddedCliNew+0x5c>
        return NULL;
 8010ada:	2300      	movs	r3, #0
 8010adc:	e087      	b.n	8010bee <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	68db      	ldr	r3, [r3, #12]
 8010ae2:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8010ae4:	693a      	ldr	r2, [r7, #16]
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	68f8      	ldr	r0, [r7, #12]
 8010aea:	f00a fd7f 	bl	801b5ec <memset>

    cli = (EmbeddedCli *) buf;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	3310      	adds	r3, #16
 8010af6:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8010af8:	69bb      	ldr	r3, [r7, #24]
 8010afa:	68fa      	ldr	r2, [r7, #12]
 8010afc:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	3334      	adds	r3, #52	; 0x34
 8010b02:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	889b      	ldrh	r3, [r3, #4]
 8010b14:	3303      	adds	r3, #3
 8010b16:	f023 0303 	bic.w	r3, r3, #3
 8010b1a:	68fa      	ldr	r2, [r7, #12]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	68fa      	ldr	r2, [r7, #12]
 8010b24:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	88db      	ldrh	r3, [r3, #6]
 8010b2a:	3303      	adds	r3, #3
 8010b2c:	f023 0303 	bic.w	r3, r3, #3
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	4413      	add	r3, r2
 8010b34:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8010b3c:	8afa      	ldrh	r2, [r7, #22]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	009b      	lsls	r3, r3, #2
 8010b42:	4413      	add	r3, r2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	3303      	adds	r3, #3
 8010b48:	f023 0303 	bic.w	r3, r3, #3
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	4413      	add	r3, r2
 8010b50:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8010b58:	8afb      	ldrh	r3, [r7, #22]
 8010b5a:	3303      	adds	r3, #3
 8010b5c:	f023 0303 	bic.w	r3, r3, #3
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	4413      	add	r3, r2
 8010b64:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	891a      	ldrh	r2, [r3, #8]
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8010b74:	7ffb      	ldrb	r3, [r7, #31]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d008      	beq.n	8010b8c <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010b80:	f043 0304 	orr.w	r3, r3, #4
 8010b84:	b2da      	uxtb	r2, r3
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	7c9b      	ldrb	r3, [r3, #18]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d008      	beq.n	8010ba6 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010b9a:	f043 0320 	orr.w	r3, r3, #32
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	889a      	ldrh	r2, [r3, #4]
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	88da      	ldrh	r2, [r3, #6]
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	895b      	ldrh	r3, [r3, #10]
 8010bcc:	2201      	movs	r2, #1
 8010bce:	4413      	add	r3, r2
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8010be6:	69b8      	ldr	r0, [r7, #24]
 8010be8:	f000 fc5e 	bl	80114a8 <initInternalBindings>

    return cli;
 8010bec:	69bb      	ldr	r3, [r7, #24]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3720      	adds	r7, #32
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 8010bfa:	f7ff fef1 	bl	80109e0 <embeddedCliDefaultConfig>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff ff3e 	bl	8010a82 <embeddedCliNew>
 8010c06:	4603      	mov	r3, r0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	460b      	mov	r3, r1
 8010c16:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	3310      	adds	r3, #16
 8010c22:	78fa      	ldrb	r2, [r7, #3]
 8010c24:	4611      	mov	r1, r2
 8010c26:	4618      	mov	r0, r3
 8010c28:	f000 ffe1 	bl	8011bee <fifoBufPush>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	f083 0301 	eor.w	r3, r3, #1
 8010c32:	b2db      	uxtb	r3, r3
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d008      	beq.n	8010c4a <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010c3e:	f043 0301 	orr.w	r3, r3, #1
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 8010c4a:	bf00      	nop
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b084      	sub	sp, #16
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	f000 8083 	beq.w	8010d6a <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010c70:	f003 0302 	and.w	r3, r3, #2
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d155      	bne.n	8010d24 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010c7e:	f043 0302 	orr.w	r3, r3, #2
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4619      	mov	r1, r3
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f000 ff0b 	bl	8011aac <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8010c96:	e045      	b.n	8010d24 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	3310      	adds	r3, #16
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f000 ff7e 	bl	8011b9e <fifoBufPop>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010cac:	f003 0308 	and.w	r3, r3, #8
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d005      	beq.n	8010cc0 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8010cb4:	7afb      	ldrb	r3, [r7, #11]
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 fa17 	bl	80110ec <onEscapedInput>
 8010cbe:	e02a      	b.n	8010d16 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010cc6:	2b1b      	cmp	r3, #27
 8010cc8:	d10c      	bne.n	8010ce4 <embeddedCliProcess+0x92>
 8010cca:	7afb      	ldrb	r3, [r7, #11]
 8010ccc:	2b5b      	cmp	r3, #91	; 0x5b
 8010cce:	d109      	bne.n	8010ce4 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010cd6:	f043 0308 	orr.w	r3, r3, #8
 8010cda:	b2da      	uxtb	r2, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8010ce2:	e018      	b.n	8010d16 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8010ce4:	7afb      	ldrb	r3, [r7, #11]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f000 ff01 	bl	8011aee <isControlChar>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d005      	beq.n	8010cfe <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8010cf2:	7afb      	ldrb	r3, [r7, #11]
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f000 fa54 	bl	80111a4 <onControlInput>
 8010cfc:	e00b      	b.n	8010d16 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8010cfe:	7afb      	ldrb	r3, [r7, #11]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f000 ff14 	bl	8011b2e <isDisplayableChar>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d004      	beq.n	8010d16 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8010d0c:	7afb      	ldrb	r3, [r7, #11]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f000 fa17 	bl	8011144 <onCharInput>
        }

        printLiveAutocompletion(cli);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f000 fdb1 	bl	801187e <printLiveAutocompletion>

        impl->lastChar = c;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	7afa      	ldrb	r2, [r7, #11]
 8010d20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	3310      	adds	r3, #16
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f000 ff17 	bl	8011b5c <fifoBufAvailable>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d1b1      	bne.n	8010c98 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010d3a:	f003 0301 	and.w	r3, r3, #1
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d014      	beq.n	8010d6c <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2200      	movs	r2, #0
 8010d46:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	69db      	ldr	r3, [r3, #28]
 8010d4c:	68fa      	ldr	r2, [r7, #12]
 8010d4e:	8c12      	ldrh	r2, [r2, #32]
 8010d50:	4413      	add	r3, r2
 8010d52:	2200      	movs	r2, #0
 8010d54:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010d5c:	f023 0301 	bic.w	r3, r3, #1
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8010d68:	e000      	b.n	8010d6c <embeddedCliProcess+0x11a>
        return;
 8010d6a:	bf00      	nop
    }
}
 8010d6c:	3710      	adds	r7, #16
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 8010d72:	b084      	sub	sp, #16
 8010d74:	b4b0      	push	{r4, r5, r7}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010d80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	68db      	ldr	r3, [r3, #12]
 8010d88:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d101      	bne.n	8010d9a <embeddedCliAddBinding+0x28>
        return false;
 8010d96:	2300      	movs	r3, #0
 8010d98:	e017      	b.n	8010dca <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010da2:	4619      	mov	r1, r3
 8010da4:	460b      	mov	r3, r1
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	440b      	add	r3, r1
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	4413      	add	r3, r2
 8010dae:	461d      	mov	r5, r3
 8010db0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8010db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010db8:	6823      	ldr	r3, [r4, #0]
 8010dba:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 8010dc8:	2301      	movs	r3, #1
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3714      	adds	r7, #20
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bcb0      	pop	{r4, r5, r7}
 8010dd2:	b004      	add	sp, #16
 8010dd4:	4770      	bx	lr
	...

08010dd8 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d031      	beq.n	8010e4e <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010df6:	f003 0310 	and.w	r3, r3, #16
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d102      	bne.n	8010e04 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f000 fe22 	bl	8011a48 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fe50 	bl	8011aac <writeToOutput>
    writeToOutput(cli, lineBreak);
 8010e0c:	4b12      	ldr	r3, [pc, #72]	; (8010e58 <embeddedCliPrint+0x80>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	4619      	mov	r1, r3
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 fe4a 	bl	8011aac <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010e1e:	f003 0310 	and.w	r3, r3, #16
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d114      	bne.n	8010e50 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fe3d 	bl	8011aac <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	69db      	ldr	r3, [r3, #28]
 8010e36:	4619      	mov	r1, r3
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f000 fe37 	bl	8011aac <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	8c1a      	ldrh	r2, [r3, #32]
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f000 fd19 	bl	801187e <printLiveAutocompletion>
 8010e4c:	e000      	b.n	8010e50 <embeddedCliPrint+0x78>
        return;
 8010e4e:	bf00      	nop
    }
}
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop
 8010e58:	20000024 	.word	0x20000024

08010e5c <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b088      	sub	sp, #32
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d066      	beq.n	8010f38 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8010e6a:	4b35      	ldr	r3, [pc, #212]	; (8010f40 <embeddedCliTokenizeArgs+0xe4>)
 8010e6c:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 8010e72:	2300      	movs	r3, #0
 8010e74:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8010e76:	2300      	movs	r3, #0
 8010e78:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 8010e7e:	e047      	b.n	8010f10 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	3301      	adds	r3, #1
 8010e84:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8010e86:	7fbb      	ldrb	r3, [r7, #30]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d002      	beq.n	8010e92 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	77bb      	strb	r3, [r7, #30]
 8010e90:	e029      	b.n	8010ee6 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 8010e92:	7cfb      	ldrb	r3, [r7, #19]
 8010e94:	2b5c      	cmp	r3, #92	; 0x5c
 8010e96:	d102      	bne.n	8010e9e <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	77bb      	strb	r3, [r7, #30]
            continue;
 8010e9c:	e038      	b.n	8010f10 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 8010e9e:	7cfb      	ldrb	r3, [r7, #19]
 8010ea0:	2b22      	cmp	r3, #34	; 0x22
 8010ea2:	d110      	bne.n	8010ec6 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8010ea4:	7ffb      	ldrb	r3, [r7, #31]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	bf14      	ite	ne
 8010eaa:	2301      	movne	r3, #1
 8010eac:	2300      	moveq	r3, #0
 8010eae:	b2db      	uxtb	r3, r3
 8010eb0:	f083 0301 	eor.w	r3, r3, #1
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	77fb      	strb	r3, [r7, #31]
 8010eb8:	7ffb      	ldrb	r3, [r7, #31]
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	74fb      	strb	r3, [r7, #19]
 8010ec4:	e00f      	b.n	8010ee6 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8010ec6:	7ffb      	ldrb	r3, [r7, #31]
 8010ec8:	f083 0301 	eor.w	r3, r3, #1
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d009      	beq.n	8010ee6 <embeddedCliTokenizeArgs+0x8a>
 8010ed2:	7cfb      	ldrb	r3, [r7, #19]
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	68f8      	ldr	r0, [r7, #12]
 8010ed8:	f00b fbae 	bl	801c638 <strchr>
 8010edc:	4603      	mov	r3, r0
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d001      	beq.n	8010ee6 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8010ee6:	7cfb      	ldrb	r3, [r7, #19]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d109      	bne.n	8010f00 <embeddedCliTokenizeArgs+0xa4>
 8010eec:	69bb      	ldr	r3, [r7, #24]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	dd0e      	ble.n	8010f10 <embeddedCliTokenizeArgs+0xb4>
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	4413      	add	r3, r2
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d007      	beq.n	8010f10 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	4413      	add	r3, r2
 8010f06:	7cfa      	ldrb	r2, [r7, #19]
 8010f08:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 8010f0a:	69bb      	ldr	r3, [r7, #24]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	4413      	add	r3, r2
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	74fb      	strb	r3, [r7, #19]
 8010f1a:	7cfb      	ldrb	r3, [r7, #19]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d1af      	bne.n	8010e80 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	4413      	add	r3, r2
 8010f26:	2200      	movs	r2, #0
 8010f28:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	4413      	add	r3, r2
 8010f32:	2200      	movs	r2, #0
 8010f34:	701a      	strb	r2, [r3, #0]
 8010f36:	e000      	b.n	8010f3a <embeddedCliTokenizeArgs+0xde>
        return;
 8010f38:	bf00      	nop
}
 8010f3a:	3720      	adds	r7, #32
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	08021220 	.word	0x08021220

08010f44 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8010f50:	887b      	ldrh	r3, [r7, #2]
 8010f52:	4619      	mov	r1, r3
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 ff51 	bl	8011dfc <getTokenPosition>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8010f5e:	89fb      	ldrh	r3, [r7, #14]
 8010f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d003      	beq.n	8010f70 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8010f68:	89fb      	ldrh	r3, [r7, #14]
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	e000      	b.n	8010f72 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 8010f70:	2300      	movs	r3, #0
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3710      	adds	r7, #16
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}

08010f7a <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8010f7a:	b580      	push	{r7, lr}
 8010f7c:	b084      	sub	sp, #16
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
 8010f82:	460b      	mov	r3, r1
 8010f84:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8010f86:	887b      	ldrh	r3, [r7, #2]
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 ff36 	bl	8011dfc <getTokenPosition>
 8010f90:	4603      	mov	r3, r0
 8010f92:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8010f94:	89fb      	ldrh	r3, [r7, #14]
 8010f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d003      	beq.n	8010fa6 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 8010f9e:	89fb      	ldrh	r3, [r7, #14]
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	e000      	b.n	8010fa8 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 8010fb0:	b480      	push	{r7}
 8010fb2:	b085      	sub	sp, #20
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d003      	beq.n	8010fc6 <embeddedCliGetTokenCount+0x16>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <embeddedCliGetTokenCount+0x1a>
        return 0;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	e019      	b.n	8010ffe <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8010fce:	2301      	movs	r3, #1
 8010fd0:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	4413      	add	r3, r2
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d109      	bne.n	8010ff2 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	4413      	add	r3, r2
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d006      	beq.n	8010ffa <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8010fec:	897b      	ldrh	r3, [r7, #10]
 8010fee:	3301      	adds	r3, #1
 8010ff0:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8010ff8:	e7eb      	b.n	8010fd2 <embeddedCliGetTokenCount+0x22>
                break;
 8010ffa:	bf00      	nop
    }

    return tokenCount;
 8010ffc:	897b      	ldrh	r3, [r7, #10]
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3714      	adds	r7, #20
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
	...

0801100c <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 801100c:	b580      	push	{r7, lr}
 801100e:	b086      	sub	sp, #24
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	460b      	mov	r3, r1
 8011016:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	899b      	ldrh	r3, [r3, #12]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d05c      	beq.n	80110e0 <navigateHistory+0xd4>
 8011026:	78fb      	ldrb	r3, [r7, #3]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d005      	beq.n	8011038 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	895a      	ldrh	r2, [r3, #10]
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	899b      	ldrh	r3, [r3, #12]
 8011034:	429a      	cmp	r2, r3
 8011036:	d053      	beq.n	80110e0 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 8011038:	78fb      	ldrb	r3, [r7, #3]
 801103a:	f083 0301 	eor.w	r3, r3, #1
 801103e:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8011040:	2b00      	cmp	r3, #0
 8011042:	d003      	beq.n	801104c <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	895b      	ldrh	r3, [r3, #10]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d049      	beq.n	80110e0 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f000 fcfb 	bl	8011a48 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4619      	mov	r1, r3
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fd27 	bl	8011aac <writeToOutput>

    if (navigateUp)
 801105e:	78fb      	ldrb	r3, [r7, #3]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d006      	beq.n	8011072 <navigateHistory+0x66>
        ++impl->history.current;
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	895b      	ldrh	r3, [r3, #10]
 8011068:	3301      	adds	r3, #1
 801106a:	b29a      	uxth	r2, r3
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	815a      	strh	r2, [r3, #10]
 8011070:	e005      	b.n	801107e <navigateHistory+0x72>
    else
        --impl->history.current;
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	895b      	ldrh	r3, [r3, #10]
 8011076:	3b01      	subs	r3, #1
 8011078:	b29a      	uxth	r2, r3
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	1d1a      	adds	r2, r3, #4
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	895b      	ldrh	r3, [r3, #10]
 8011086:	4619      	mov	r1, r3
 8011088:	4610      	mov	r0, r2
 801108a:	f000 fe3e 	bl	8011d0a <historyGet>
 801108e:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d101      	bne.n	801109a <navigateHistory+0x8e>
        item = "";
 8011096:	4b14      	ldr	r3, [pc, #80]	; (80110e8 <navigateHistory+0xdc>)
 8011098:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 801109a:	6978      	ldr	r0, [r7, #20]
 801109c:	f7ef f8aa 	bl	80001f4 <strlen>
 80110a0:	4603      	mov	r3, r0
 80110a2:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	69db      	ldr	r3, [r3, #28]
 80110a8:	89fa      	ldrh	r2, [r7, #14]
 80110aa:	6979      	ldr	r1, [r7, #20]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f00a fa75 	bl	801b59c <memcpy>
    impl->cmdBuffer[len] = '\0';
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	69da      	ldr	r2, [r3, #28]
 80110b6:	89fb      	ldrh	r3, [r7, #14]
 80110b8:	4413      	add	r3, r2
 80110ba:	2200      	movs	r2, #0
 80110bc:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	89fa      	ldrh	r2, [r7, #14]
 80110c2:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	69db      	ldr	r3, [r3, #28]
 80110c8:	4619      	mov	r1, r3
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 fcee 	bl	8011aac <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	8c1a      	ldrh	r2, [r3, #32]
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fbd0 	bl	801187e <printLiveAutocompletion>
 80110de:	e000      	b.n	80110e2 <navigateHistory+0xd6>
        return;
 80110e0:	bf00      	nop
}
 80110e2:	3718      	adds	r7, #24
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	08021224 	.word	0x08021224

080110ec <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	460b      	mov	r3, r1
 80110f6:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 80110fe:	78fb      	ldrb	r3, [r7, #3]
 8011100:	2b3f      	cmp	r3, #63	; 0x3f
 8011102:	d91b      	bls.n	801113c <onEscapedInput+0x50>
 8011104:	78fb      	ldrb	r3, [r7, #3]
 8011106:	2b7e      	cmp	r3, #126	; 0x7e
 8011108:	d818      	bhi.n	801113c <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011110:	f023 0308 	bic.w	r3, r3, #8
 8011114:	b2da      	uxtb	r2, r3
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 801111c:	78fb      	ldrb	r3, [r7, #3]
 801111e:	2b41      	cmp	r3, #65	; 0x41
 8011120:	d002      	beq.n	8011128 <onEscapedInput+0x3c>
 8011122:	78fb      	ldrb	r3, [r7, #3]
 8011124:	2b42      	cmp	r3, #66	; 0x42
 8011126:	d109      	bne.n	801113c <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8011128:	78fb      	ldrb	r3, [r7, #3]
 801112a:	2b41      	cmp	r3, #65	; 0x41
 801112c:	bf0c      	ite	eq
 801112e:	2301      	moveq	r3, #1
 8011130:	2300      	movne	r3, #0
 8011132:	b2db      	uxtb	r3, r3
 8011134:	4619      	mov	r1, r3
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f7ff ff68 	bl	801100c <navigateHistory>
        }
    }
}
 801113c:	bf00      	nop
 801113e:	3710      	adds	r7, #16
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	460b      	mov	r3, r1
 801114e:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	8c1b      	ldrh	r3, [r3, #32]
 801115a:	3302      	adds	r3, #2
 801115c:	68fa      	ldr	r2, [r7, #12]
 801115e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8011160:	4293      	cmp	r3, r2
 8011162:	da1a      	bge.n	801119a <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	69db      	ldr	r3, [r3, #28]
 8011168:	68fa      	ldr	r2, [r7, #12]
 801116a:	8c12      	ldrh	r2, [r2, #32]
 801116c:	4413      	add	r3, r2
 801116e:	78fa      	ldrb	r2, [r7, #3]
 8011170:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	8c1b      	ldrh	r3, [r3, #32]
 8011176:	3301      	adds	r3, #1
 8011178:	b29a      	uxth	r2, r3
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	69db      	ldr	r3, [r3, #28]
 8011182:	68fa      	ldr	r2, [r7, #12]
 8011184:	8c12      	ldrh	r2, [r2, #32]
 8011186:	4413      	add	r3, r2
 8011188:	2200      	movs	r2, #0
 801118a:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	78fa      	ldrb	r2, [r7, #3]
 8011192:	4611      	mov	r1, r2
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	4798      	blx	r3
 8011198:	e000      	b.n	801119c <onCharInput+0x58>
        return;
 801119a:	bf00      	nop
}
 801119c:	3710      	adds	r7, #16
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
	...

080111a4 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	460b      	mov	r3, r1
 80111ae:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80111bc:	2b0d      	cmp	r3, #13
 80111be:	d102      	bne.n	80111c6 <onControlInput+0x22>
 80111c0:	78fb      	ldrb	r3, [r7, #3]
 80111c2:	2b0a      	cmp	r3, #10
 80111c4:	d062      	beq.n	801128c <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 80111cc:	2b0a      	cmp	r3, #10
 80111ce:	d102      	bne.n	80111d6 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 80111d0:	78fb      	ldrb	r3, [r7, #3]
 80111d2:	2b0d      	cmp	r3, #13
 80111d4:	d05a      	beq.n	801128c <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 80111d6:	78fb      	ldrb	r3, [r7, #3]
 80111d8:	2b0d      	cmp	r3, #13
 80111da:	d002      	beq.n	80111e2 <onControlInput+0x3e>
 80111dc:	78fb      	ldrb	r3, [r7, #3]
 80111de:	2b0a      	cmp	r3, #10
 80111e0:	d126      	bne.n	8011230 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 fba6 	bl	8011934 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 80111e8:	4b2a      	ldr	r3, [pc, #168]	; (8011294 <onControlInput+0xf0>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	4619      	mov	r1, r3
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f000 fc5c 	bl	8011aac <writeToOutput>

        if (impl->cmdSize > 0)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	8c1b      	ldrh	r3, [r3, #32]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d002      	beq.n	8011202 <onControlInput+0x5e>
            parseCommand(cli);
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 f84b 	bl	8011298 <parseCommand>
        impl->cmdSize = 0;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2200      	movs	r2, #0
 8011206:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	69db      	ldr	r3, [r3, #28]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	8c12      	ldrh	r2, [r2, #32]
 8011210:	4413      	add	r3, r2
 8011212:	2200      	movs	r2, #0
 8011214:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2200      	movs	r2, #0
 801121a:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2200      	movs	r2, #0
 8011220:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	4619      	mov	r1, r3
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 fc3f 	bl	8011aac <writeToOutput>
 801122e:	e02e      	b.n	801128e <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8011230:	78fb      	ldrb	r3, [r7, #3]
 8011232:	2b08      	cmp	r3, #8
 8011234:	d002      	beq.n	801123c <onControlInput+0x98>
 8011236:	78fb      	ldrb	r3, [r7, #3]
 8011238:	2b7f      	cmp	r3, #127	; 0x7f
 801123a:	d120      	bne.n	801127e <onControlInput+0xda>
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	8c1b      	ldrh	r3, [r3, #32]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d01c      	beq.n	801127e <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2108      	movs	r1, #8
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	2120      	movs	r1, #32
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2108      	movs	r1, #8
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	8c1b      	ldrh	r3, [r3, #32]
 8011266:	3b01      	subs	r3, #1
 8011268:	b29a      	uxth	r2, r3
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	69db      	ldr	r3, [r3, #28]
 8011272:	68fa      	ldr	r2, [r7, #12]
 8011274:	8c12      	ldrh	r2, [r2, #32]
 8011276:	4413      	add	r3, r2
 8011278:	2200      	movs	r2, #0
 801127a:	701a      	strb	r2, [r3, #0]
 801127c:	e007      	b.n	801128e <onControlInput+0xea>
    } else if (c == '\t') {
 801127e:	78fb      	ldrb	r3, [r7, #3]
 8011280:	2b09      	cmp	r3, #9
 8011282:	d104      	bne.n	801128e <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f000 fb55 	bl	8011934 <onAutocompleteRequest>
 801128a:	e000      	b.n	801128e <onControlInput+0xea>
        return;
 801128c:	bf00      	nop
    }

}
 801128e:	3710      	adds	r7, #16
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}
 8011294:	20000024 	.word	0x20000024

08011298 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8011298:	b590      	push	{r4, r7, lr}
 801129a:	b08f      	sub	sp, #60	; 0x3c
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 80112a6:	2301      	movs	r3, #1
 80112a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 80112ac:	2300      	movs	r3, #0
 80112ae:	633b      	str	r3, [r7, #48]	; 0x30
 80112b0:	e00d      	b.n	80112ce <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	69da      	ldr	r2, [r3, #28]
 80112b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b8:	4413      	add	r3, r2
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	2b20      	cmp	r3, #32
 80112be:	d003      	beq.n	80112c8 <parseCommand+0x30>
            isEmpty = false;
 80112c0:	2300      	movs	r3, #0
 80112c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 80112c6:	e008      	b.n	80112da <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 80112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ca:	3301      	adds	r3, #1
 80112cc:	633b      	str	r3, [r7, #48]	; 0x30
 80112ce:	69bb      	ldr	r3, [r7, #24]
 80112d0:	8c1b      	ldrh	r3, [r3, #32]
 80112d2:	461a      	mov	r2, r3
 80112d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d6:	4293      	cmp	r3, r2
 80112d8:	dbeb      	blt.n	80112b2 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 80112da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112de:	2b00      	cmp	r3, #0
 80112e0:	f040 80dc 	bne.w	801149c <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	1d1a      	adds	r2, r3, #4
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	69db      	ldr	r3, [r3, #28]
 80112ec:	4619      	mov	r1, r3
 80112ee:	4610      	mov	r0, r2
 80112f0:	f000 fca7 	bl	8011c42 <historyPut>

    char *cmdName = NULL;
 80112f4:	2300      	movs	r3, #0
 80112f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 80112f8:	2300      	movs	r3, #0
 80112fa:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 80112fc:	2300      	movs	r3, #0
 80112fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011302:	2300      	movs	r3, #0
 8011304:	623b      	str	r3, [r7, #32]
 8011306:	e030      	b.n	801136a <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8011308:	69bb      	ldr	r3, [r7, #24]
 801130a:	69da      	ldr	r2, [r3, #28]
 801130c:	6a3b      	ldr	r3, [r7, #32]
 801130e:	4413      	add	r3, r2
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8011314:	7dfb      	ldrb	r3, [r7, #23]
 8011316:	2b20      	cmp	r3, #32
 8011318:	d10f      	bne.n	801133a <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 801131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131c:	2b00      	cmp	r3, #0
 801131e:	d105      	bne.n	801132c <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	69da      	ldr	r2, [r3, #28]
 8011324:	6a3b      	ldr	r3, [r7, #32]
 8011326:	4413      	add	r3, r2
 8011328:	2200      	movs	r2, #0
 801132a:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 801132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132e:	2b00      	cmp	r3, #0
 8011330:	d018      	beq.n	8011364 <parseCommand+0xcc>
                nameFinished = true;
 8011332:	2301      	movs	r3, #1
 8011334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011338:	e014      	b.n	8011364 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 801133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133c:	2b00      	cmp	r3, #0
 801133e:	d105      	bne.n	801134c <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8011340:	69bb      	ldr	r3, [r7, #24]
 8011342:	69da      	ldr	r2, [r3, #28]
 8011344:	6a3b      	ldr	r3, [r7, #32]
 8011346:	4413      	add	r3, r2
 8011348:	62fb      	str	r3, [r7, #44]	; 0x2c
 801134a:	e00b      	b.n	8011364 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 801134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134e:	2b00      	cmp	r3, #0
 8011350:	d108      	bne.n	8011364 <parseCommand+0xcc>
 8011352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011356:	2b00      	cmp	r3, #0
 8011358:	d004      	beq.n	8011364 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	69da      	ldr	r2, [r3, #28]
 801135e:	6a3b      	ldr	r3, [r7, #32]
 8011360:	4413      	add	r3, r2
 8011362:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011364:	6a3b      	ldr	r3, [r7, #32]
 8011366:	3301      	adds	r3, #1
 8011368:	623b      	str	r3, [r7, #32]
 801136a:	69bb      	ldr	r3, [r7, #24]
 801136c:	8c1b      	ldrh	r3, [r3, #32]
 801136e:	461a      	mov	r2, r3
 8011370:	6a3b      	ldr	r3, [r7, #32]
 8011372:	4293      	cmp	r3, r2
 8011374:	dbc8      	blt.n	8011308 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	69da      	ldr	r2, [r3, #28]
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	8c1b      	ldrh	r3, [r3, #32]
 801137e:	3301      	adds	r3, #1
 8011380:	4413      	add	r3, r2
 8011382:	2200      	movs	r2, #0
 8011384:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8011386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011388:	2b00      	cmp	r3, #0
 801138a:	f000 8089 	beq.w	80114a0 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801138e:	2300      	movs	r3, #0
 8011390:	61fb      	str	r3, [r7, #28]
 8011392:	e054      	b.n	801143e <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011398:	69fa      	ldr	r2, [r7, #28]
 801139a:	4613      	mov	r3, r2
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	4413      	add	r3, r2
 80113a0:	009b      	lsls	r3, r3, #2
 80113a2:	440b      	add	r3, r1
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4619      	mov	r1, r3
 80113a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113aa:	f7ee ff19 	bl	80001e0 <strcmp>
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d141      	bne.n	8011438 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80113b8:	69fa      	ldr	r2, [r7, #28]
 80113ba:	4613      	mov	r3, r2
 80113bc:	009b      	lsls	r3, r3, #2
 80113be:	4413      	add	r3, r2
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	440b      	add	r3, r1
 80113c4:	691b      	ldr	r3, [r3, #16]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d040      	beq.n	801144c <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 80113ca:	69bb      	ldr	r3, [r7, #24]
 80113cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80113ce:	69fa      	ldr	r2, [r7, #28]
 80113d0:	4613      	mov	r3, r2
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	4413      	add	r3, r2
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	440b      	add	r3, r1
 80113da:	7a1b      	ldrb	r3, [r3, #8]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d002      	beq.n	80113e6 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 80113e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113e2:	f7ff fd3b 	bl	8010e5c <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80113ec:	f043 0310 	orr.w	r3, r3, #16
 80113f0:	b2da      	uxtb	r2, r3
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80113fc:	69fa      	ldr	r2, [r7, #28]
 80113fe:	4613      	mov	r3, r2
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	4413      	add	r3, r2
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	440b      	add	r3, r1
 8011408:	691c      	ldr	r4, [r3, #16]
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801140e:	69fa      	ldr	r2, [r7, #28]
 8011410:	4613      	mov	r3, r2
 8011412:	009b      	lsls	r3, r3, #2
 8011414:	4413      	add	r3, r2
 8011416:	009b      	lsls	r3, r3, #2
 8011418:	440b      	add	r3, r1
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	461a      	mov	r2, r3
 801141e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011424:	69bb      	ldr	r3, [r7, #24]
 8011426:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801142a:	f023 0310 	bic.w	r3, r3, #16
 801142e:	b2da      	uxtb	r2, r3
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 8011436:	e034      	b.n	80114a2 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	3301      	adds	r3, #1
 801143c:	61fb      	str	r3, [r7, #28]
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011442:	461a      	mov	r2, r3
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	4293      	cmp	r3, r2
 8011448:	dba4      	blt.n	8011394 <parseCommand+0xfc>
 801144a:	e000      	b.n	801144e <parseCommand+0x1b6>
                break;
 801144c:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d01d      	beq.n	8011492 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8011456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011458:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 801145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145c:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011464:	f043 0310 	orr.w	r3, r3, #16
 8011468:	b2da      	uxtb	r2, r3
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	f107 020c 	add.w	r2, r7, #12
 8011478:	4611      	mov	r1, r2
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011484:	f023 0310 	bic.w	r3, r3, #16
 8011488:	b2da      	uxtb	r2, r3
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8011490:	e007      	b.n	80114a2 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8011492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f000 f913 	bl	80116c0 <onUnknownCommand>
 801149a:	e002      	b.n	80114a2 <parseCommand+0x20a>
        return;
 801149c:	bf00      	nop
 801149e:	e000      	b.n	80114a2 <parseCommand+0x20a>
        return;
 80114a0:	bf00      	nop
    }
}
 80114a2:	373c      	adds	r7, #60	; 0x3c
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd90      	pop	{r4, r7, pc}

080114a8 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 80114a8:	b5b0      	push	{r4, r5, r7, lr}
 80114aa:	b08a      	sub	sp, #40	; 0x28
 80114ac:	af02      	add	r7, sp, #8
 80114ae:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 80114b0:	4b0c      	ldr	r3, [pc, #48]	; (80114e4 <initInternalBindings+0x3c>)
 80114b2:	f107 040c 	add.w	r4, r7, #12
 80114b6:	461d      	mov	r5, r3
 80114b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80114bc:	682b      	ldr	r3, [r5, #0]
 80114be:	6023      	str	r3, [r4, #0]
            "Print list of commands",
            true,
            NULL,
            onHelp
    };
    embeddedCliAddBinding(cli, b);
 80114c0:	466a      	mov	r2, sp
 80114c2:	f107 0318 	add.w	r3, r7, #24
 80114c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80114ca:	e882 0003 	stmia.w	r2, {r0, r1}
 80114ce:	f107 030c 	add.w	r3, r7, #12
 80114d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f7ff fc4c 	bl	8010d72 <embeddedCliAddBinding>
}
 80114da:	bf00      	nop
 80114dc:	3720      	adds	r7, #32
 80114de:	46bd      	mov	sp, r7
 80114e0:	bdb0      	pop	{r4, r5, r7, pc}
 80114e2:	bf00      	nop
 80114e4:	08021228 	.word	0x08021228

080114e8 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b08c      	sub	sp, #48	; 0x30
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10a      	bne.n	8011518 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8011502:	496b      	ldr	r1, [pc, #428]	; (80116b0 <onHelp+0x1c8>)
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f000 fad1 	bl	8011aac <writeToOutput>
        writeToOutput(cli, lineBreak);
 801150a:	4b6a      	ldr	r3, [pc, #424]	; (80116b4 <onHelp+0x1cc>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	4619      	mov	r1, r3
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f000 facb 	bl	8011aac <writeToOutput>
        return;
 8011516:	e0c8      	b.n	80116aa <onHelp+0x1c2>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8011518:	68b8      	ldr	r0, [r7, #8]
 801151a:	f7ff fd49 	bl	8010fb0 <embeddedCliGetTokenCount>
 801151e:	4603      	mov	r3, r0
 8011520:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8011522:	8b7b      	ldrh	r3, [r7, #26]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d146      	bne.n	80115b6 <onHelp+0xce>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011528:	2300      	movs	r3, #0
 801152a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801152c:	e03c      	b.n	80115a8 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 801152e:	4962      	ldr	r1, [pc, #392]	; (80116b8 <onHelp+0x1d0>)
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f000 fabb 	bl	8011aac <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8011536:	69fb      	ldr	r3, [r7, #28]
 8011538:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801153a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801153c:	4613      	mov	r3, r2
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	4413      	add	r3, r2
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	440b      	add	r3, r1
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4619      	mov	r1, r3
 801154a:	68f8      	ldr	r0, [r7, #12]
 801154c:	f000 faae 	bl	8011aac <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011550:	4b58      	ldr	r3, [pc, #352]	; (80116b4 <onHelp+0x1cc>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	4619      	mov	r1, r3
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	f000 faa8 	bl	8011aac <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011562:	4613      	mov	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4413      	add	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	440b      	add	r3, r1
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d017      	beq.n	80115a2 <onHelp+0xba>
                cli->writeChar(cli, '\t');
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	2109      	movs	r1, #9
 8011578:	68f8      	ldr	r0, [r7, #12]
 801157a:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011582:	4613      	mov	r3, r2
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	4413      	add	r3, r2
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	440b      	add	r3, r1
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	4619      	mov	r1, r3
 8011590:	68f8      	ldr	r0, [r7, #12]
 8011592:	f000 fa8b 	bl	8011aac <writeToOutput>
                writeToOutput(cli, lineBreak);
 8011596:	4b47      	ldr	r3, [pc, #284]	; (80116b4 <onHelp+0x1cc>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4619      	mov	r1, r3
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f000 fa85 	bl	8011aac <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80115a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a4:	3301      	adds	r3, #1
 80115a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80115ac:	461a      	mov	r2, r3
 80115ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b0:	4293      	cmp	r3, r2
 80115b2:	dbbc      	blt.n	801152e <onHelp+0x46>
 80115b4:	e079      	b.n	80116aa <onHelp+0x1c2>
            }
        }
    } else if (tokenCount == 1) {
 80115b6:	8b7b      	ldrh	r3, [r7, #26]
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	d16c      	bne.n	8011696 <onHelp+0x1ae>
        // try find command
        const char *helpStr = NULL;
 80115bc:	2300      	movs	r3, #0
 80115be:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 80115c0:	2101      	movs	r1, #1
 80115c2:	68b8      	ldr	r0, [r7, #8]
 80115c4:	f7ff fcbe 	bl	8010f44 <embeddedCliGetToken>
 80115c8:	6178      	str	r0, [r7, #20]
        bool found = false;
 80115ca:	2300      	movs	r3, #0
 80115cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80115d0:	2300      	movs	r3, #0
 80115d2:	623b      	str	r3, [r7, #32]
 80115d4:	e020      	b.n	8011618 <onHelp+0x130>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80115da:	6a3a      	ldr	r2, [r7, #32]
 80115dc:	4613      	mov	r3, r2
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	4413      	add	r3, r2
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	440b      	add	r3, r1
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	6979      	ldr	r1, [r7, #20]
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7ee fdf8 	bl	80001e0 <strcmp>
 80115f0:	4603      	mov	r3, r0
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d10d      	bne.n	8011612 <onHelp+0x12a>
                helpStr = impl->bindings[i].help;
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80115fa:	6a3a      	ldr	r2, [r7, #32]
 80115fc:	4613      	mov	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	4413      	add	r3, r2
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	440b      	add	r3, r1
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 801160a:	2301      	movs	r3, #1
 801160c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8011610:	e008      	b.n	8011624 <onHelp+0x13c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011612:	6a3b      	ldr	r3, [r7, #32]
 8011614:	3301      	adds	r3, #1
 8011616:	623b      	str	r3, [r7, #32]
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801161c:	461a      	mov	r2, r3
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	4293      	cmp	r3, r2
 8011622:	dbd8      	blt.n	80115d6 <onHelp+0xee>
            }
        }
        if (found && helpStr != NULL) {
 8011624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011628:	2b00      	cmp	r3, #0
 801162a:	d020      	beq.n	801166e <onHelp+0x186>
 801162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162e:	2b00      	cmp	r3, #0
 8011630:	d01d      	beq.n	801166e <onHelp+0x186>
            writeToOutput(cli, " * ");
 8011632:	4921      	ldr	r1, [pc, #132]	; (80116b8 <onHelp+0x1d0>)
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f000 fa39 	bl	8011aac <writeToOutput>
            writeToOutput(cli, cmdName);
 801163a:	6979      	ldr	r1, [r7, #20]
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	f000 fa35 	bl	8011aac <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011642:	4b1c      	ldr	r3, [pc, #112]	; (80116b4 <onHelp+0x1cc>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4619      	mov	r1, r3
 8011648:	68f8      	ldr	r0, [r7, #12]
 801164a:	f000 fa2f 	bl	8011aac <writeToOutput>
            cli->writeChar(cli, '\t');
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	2109      	movs	r1, #9
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8011658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f000 fa26 	bl	8011aac <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011660:	4b14      	ldr	r3, [pc, #80]	; (80116b4 <onHelp+0x1cc>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	4619      	mov	r1, r3
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f000 fa20 	bl	8011aac <writeToOutput>
 801166c:	e01d      	b.n	80116aa <onHelp+0x1c2>
        } else if (found) {
 801166e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00a      	beq.n	801168c <onHelp+0x1a4>
            writeToOutput(cli, "Help is not available");
 8011676:	490e      	ldr	r1, [pc, #56]	; (80116b0 <onHelp+0x1c8>)
 8011678:	68f8      	ldr	r0, [r7, #12]
 801167a:	f000 fa17 	bl	8011aac <writeToOutput>
            writeToOutput(cli, lineBreak);
 801167e:	4b0d      	ldr	r3, [pc, #52]	; (80116b4 <onHelp+0x1cc>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	4619      	mov	r1, r3
 8011684:	68f8      	ldr	r0, [r7, #12]
 8011686:	f000 fa11 	bl	8011aac <writeToOutput>
 801168a:	e00e      	b.n	80116aa <onHelp+0x1c2>
        } else {
            onUnknownCommand(cli, cmdName);
 801168c:	6979      	ldr	r1, [r7, #20]
 801168e:	68f8      	ldr	r0, [r7, #12]
 8011690:	f000 f816 	bl	80116c0 <onUnknownCommand>
 8011694:	e009      	b.n	80116aa <onHelp+0x1c2>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8011696:	4909      	ldr	r1, [pc, #36]	; (80116bc <onHelp+0x1d4>)
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f000 fa07 	bl	8011aac <writeToOutput>
        writeToOutput(cli, lineBreak);
 801169e:	4b05      	ldr	r3, [pc, #20]	; (80116b4 <onHelp+0x1cc>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	4619      	mov	r1, r3
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f000 fa01 	bl	8011aac <writeToOutput>
    }
}
 80116aa:	3730      	adds	r7, #48	; 0x30
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	0802123c 	.word	0x0802123c
 80116b4:	20000024 	.word	0x20000024
 80116b8:	08021254 	.word	0x08021254
 80116bc:	08021258 	.word	0x08021258

080116c0 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 80116ca:	490b      	ldr	r1, [pc, #44]	; (80116f8 <onUnknownCommand+0x38>)
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 f9ed 	bl	8011aac <writeToOutput>
    writeToOutput(cli, name);
 80116d2:	6839      	ldr	r1, [r7, #0]
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 f9e9 	bl	8011aac <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 80116da:	4908      	ldr	r1, [pc, #32]	; (80116fc <onUnknownCommand+0x3c>)
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f000 f9e5 	bl	8011aac <writeToOutput>
    writeToOutput(cli, lineBreak);
 80116e2:	4b07      	ldr	r3, [pc, #28]	; (8011700 <onUnknownCommand+0x40>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4619      	mov	r1, r3
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f000 f9df 	bl	8011aac <writeToOutput>
}
 80116ee:	bf00      	nop
 80116f0:	3708      	adds	r7, #8
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	08021288 	.word	0x08021288
 80116fc:	0802129c 	.word	0x0802129c
 8011700:	20000024 	.word	0x20000024

08011704 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8011704:	b580      	push	{r7, lr}
 8011706:	b08e      	sub	sp, #56	; 0x38
 8011708:	af00      	add	r7, sp, #0
 801170a:	60f8      	str	r0, [r7, #12]
 801170c:	60b9      	str	r1, [r7, #8]
 801170e:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8011710:	2300      	movs	r3, #0
 8011712:	613b      	str	r3, [r7, #16]
 8011714:	2300      	movs	r3, #0
 8011716:	82bb      	strh	r3, [r7, #20]
 8011718:	2300      	movs	r3, #0
 801171a:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f7ee fd69 	bl	80001f4 <strlen>
 8011722:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 801172a:	6a3b      	ldr	r3, [r7, #32]
 801172c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801172e:	2b00      	cmp	r3, #0
 8011730:	d002      	beq.n	8011738 <getAutocompletedCommand+0x34>
 8011732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011734:	2b00      	cmp	r3, #0
 8011736:	d108      	bne.n	801174a <getAutocompletedCommand+0x46>
        return cmd;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	461a      	mov	r2, r3
 801173c:	f107 0310 	add.w	r3, r7, #16
 8011740:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011744:	e882 0003 	stmia.w	r2, {r0, r1}
 8011748:	e095      	b.n	8011876 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 801174a:	2300      	movs	r3, #0
 801174c:	637b      	str	r3, [r7, #52]	; 0x34
 801174e:	e083      	b.n	8011858 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8011750:	6a3b      	ldr	r3, [r7, #32]
 8011752:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011756:	4613      	mov	r3, r2
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	4413      	add	r3, r2
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	440b      	add	r3, r1
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8011764:	69f8      	ldr	r0, [r7, #28]
 8011766:	f7ee fd45 	bl	80001f4 <strlen>
 801176a:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 801176c:	6a3b      	ldr	r3, [r7, #32]
 801176e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011772:	4413      	add	r3, r2
 8011774:	781a      	ldrb	r2, [r3, #0]
 8011776:	6a3b      	ldr	r3, [r7, #32]
 8011778:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177c:	440b      	add	r3, r1
 801177e:	f022 0201 	bic.w	r2, r2, #1
 8011782:	b2d2      	uxtb	r2, r2
 8011784:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8011786:	69ba      	ldr	r2, [r7, #24]
 8011788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178a:	429a      	cmp	r2, r3
 801178c:	d35e      	bcc.n	801184c <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 801178e:	2301      	movs	r3, #1
 8011790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8011794:	2300      	movs	r3, #0
 8011796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011798:	e010      	b.n	80117bc <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179e:	4413      	add	r3, r2
 80117a0:	781a      	ldrb	r2, [r3, #0]
 80117a2:	69f9      	ldr	r1, [r7, #28]
 80117a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a6:	440b      	add	r3, r1
 80117a8:	781b      	ldrb	r3, [r3, #0]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d003      	beq.n	80117b6 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 80117ae:	2300      	movs	r3, #0
 80117b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 80117b4:	e006      	b.n	80117c4 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 80117b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b8:	3301      	adds	r3, #1
 80117ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d3ea      	bcc.n	801179a <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 80117c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80117c8:	f083 0301 	eor.w	r3, r3, #1
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d13e      	bne.n	8011850 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 80117d2:	6a3b      	ldr	r3, [r7, #32]
 80117d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117d8:	4413      	add	r3, r2
 80117da:	781a      	ldrb	r2, [r3, #0]
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80117e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117e2:	440b      	add	r3, r1
 80117e4:	f042 0201 	orr.w	r2, r2, #1
 80117e8:	b2d2      	uxtb	r2, r2
 80117ea:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 80117ec:	8afb      	ldrh	r3, [r7, #22]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d004      	beq.n	80117fc <getAutocompletedCommand+0xf8>
 80117f2:	8abb      	ldrh	r3, [r7, #20]
 80117f4:	461a      	mov	r2, r3
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d202      	bcs.n	8011802 <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	b29b      	uxth	r3, r3
 8011800:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8011802:	8afb      	ldrh	r3, [r7, #22]
 8011804:	3301      	adds	r3, #1
 8011806:	b29b      	uxth	r3, r3
 8011808:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 801180a:	8afb      	ldrh	r3, [r7, #22]
 801180c:	2b01      	cmp	r3, #1
 801180e:	d102      	bne.n	8011816 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	613b      	str	r3, [r7, #16]
            continue;
 8011814:	e01d      	b.n	8011852 <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011816:	6a3b      	ldr	r3, [r7, #32]
 8011818:	8c1b      	ldrh	r3, [r3, #32]
 801181a:	62bb      	str	r3, [r7, #40]	; 0x28
 801181c:	e010      	b.n	8011840 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 801181e:	693a      	ldr	r2, [r7, #16]
 8011820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011822:	4413      	add	r3, r2
 8011824:	781a      	ldrb	r2, [r3, #0]
 8011826:	69f9      	ldr	r1, [r7, #28]
 8011828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182a:	440b      	add	r3, r1
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	429a      	cmp	r2, r3
 8011830:	d003      	beq.n	801183a <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8011832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011834:	b29b      	uxth	r3, r3
 8011836:	82bb      	strh	r3, [r7, #20]
                break;
 8011838:	e00b      	b.n	8011852 <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 801183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183c:	3301      	adds	r3, #1
 801183e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011840:	8abb      	ldrh	r3, [r7, #20]
 8011842:	461a      	mov	r2, r3
 8011844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011846:	4293      	cmp	r3, r2
 8011848:	d3e9      	bcc.n	801181e <getAutocompletedCommand+0x11a>
 801184a:	e002      	b.n	8011852 <getAutocompletedCommand+0x14e>
            continue;
 801184c:	bf00      	nop
 801184e:	e000      	b.n	8011852 <getAutocompletedCommand+0x14e>
            continue;
 8011850:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011854:	3301      	adds	r3, #1
 8011856:	637b      	str	r3, [r7, #52]	; 0x34
 8011858:	6a3b      	ldr	r3, [r7, #32]
 801185a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801185c:	461a      	mov	r2, r3
 801185e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011860:	4293      	cmp	r3, r2
 8011862:	f6ff af75 	blt.w	8011750 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	461a      	mov	r2, r3
 801186a:	f107 0310 	add.w	r3, r7, #16
 801186e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011872:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	3738      	adds	r7, #56	; 0x38
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 801187e:	b580      	push	{r7, lr}
 8011880:	b088      	sub	sp, #32
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	68db      	ldr	r3, [r3, #12]
 801188a:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011892:	f003 0320 	and.w	r3, r3, #32
 8011896:	2b00      	cmp	r3, #0
 8011898:	d048      	beq.n	801192c <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	69da      	ldr	r2, [r3, #28]
 801189e:	f107 030c 	add.w	r3, r7, #12
 80118a2:	6879      	ldr	r1, [r7, #4]
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7ff ff2d 	bl	8011704 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 80118aa:	8a7b      	ldrh	r3, [r7, #18]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d102      	bne.n	80118b6 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	8c1b      	ldrh	r3, [r3, #32]
 80118b4:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	8c1b      	ldrh	r3, [r3, #32]
 80118ba:	61fb      	str	r3, [r7, #28]
 80118bc:	e00b      	b.n	80118d6 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	68f9      	ldr	r1, [r7, #12]
 80118c4:	69fa      	ldr	r2, [r7, #28]
 80118c6:	440a      	add	r2, r1
 80118c8:	7812      	ldrb	r2, [r2, #0]
 80118ca:	4611      	mov	r1, r2
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	3301      	adds	r3, #1
 80118d4:	61fb      	str	r3, [r7, #28]
 80118d6:	8a3b      	ldrh	r3, [r7, #16]
 80118d8:	461a      	mov	r2, r3
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	4293      	cmp	r3, r2
 80118de:	d3ee      	bcc.n	80118be <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80118e0:	8a3b      	ldrh	r3, [r7, #16]
 80118e2:	61bb      	str	r3, [r7, #24]
 80118e4:	e007      	b.n	80118f6 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2120      	movs	r1, #32
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	3301      	adds	r3, #1
 80118f4:	61bb      	str	r3, [r7, #24]
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80118fa:	461a      	mov	r2, r3
 80118fc:	69bb      	ldr	r3, [r7, #24]
 80118fe:	4293      	cmp	r3, r2
 8011900:	d3f1      	bcc.n	80118e6 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8011902:	8a3a      	ldrh	r2, [r7, #16]
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	210d      	movs	r1, #13
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4619      	mov	r1, r3
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 f8c7 	bl	8011aac <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	69db      	ldr	r3, [r3, #28]
 8011922:	4619      	mov	r1, r3
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 f8c1 	bl	8011aac <writeToOutput>
 801192a:	e000      	b.n	801192e <printLiveAutocompletion+0xb0>
        return;
 801192c:	bf00      	nop
}
 801192e:	3720      	adds	r7, #32
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8011934:	b580      	push	{r7, lr}
 8011936:	b088      	sub	sp, #32
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	69da      	ldr	r2, [r3, #28]
 8011946:	f107 030c 	add.w	r3, r7, #12
 801194a:	6879      	ldr	r1, [r7, #4]
 801194c:	4618      	mov	r0, r3
 801194e:	f7ff fed9 	bl	8011704 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8011952:	8a7b      	ldrh	r3, [r7, #18]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d071      	beq.n	8011a3c <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8011958:	8a7b      	ldrh	r3, [r7, #18]
 801195a:	2b01      	cmp	r3, #1
 801195c:	d004      	beq.n	8011968 <onAutocompleteRequest+0x34>
 801195e:	8a3a      	ldrh	r2, [r7, #16]
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	8c1b      	ldrh	r3, [r3, #32]
 8011964:	429a      	cmp	r2, r3
 8011966:	d92a      	bls.n	80119be <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8011968:	69bb      	ldr	r3, [r7, #24]
 801196a:	69db      	ldr	r3, [r3, #28]
 801196c:	68f9      	ldr	r1, [r7, #12]
 801196e:	8a3a      	ldrh	r2, [r7, #16]
 8011970:	4618      	mov	r0, r3
 8011972:	f009 fe13 	bl	801b59c <memcpy>
        if (cmd.candidateCount == 1) {
 8011976:	8a7b      	ldrh	r3, [r7, #18]
 8011978:	2b01      	cmp	r3, #1
 801197a:	d109      	bne.n	8011990 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 801197c:	69bb      	ldr	r3, [r7, #24]
 801197e:	69db      	ldr	r3, [r3, #28]
 8011980:	8a3a      	ldrh	r2, [r7, #16]
 8011982:	4413      	add	r3, r2
 8011984:	2220      	movs	r2, #32
 8011986:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8011988:	8a3b      	ldrh	r3, [r7, #16]
 801198a:	3301      	adds	r3, #1
 801198c:	b29b      	uxth	r3, r3
 801198e:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	69db      	ldr	r3, [r3, #28]
 8011994:	8a3a      	ldrh	r2, [r7, #16]
 8011996:	4413      	add	r3, r2
 8011998:	2200      	movs	r2, #0
 801199a:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 801199c:	69bb      	ldr	r3, [r7, #24]
 801199e:	69db      	ldr	r3, [r3, #28]
 80119a0:	69ba      	ldr	r2, [r7, #24]
 80119a2:	8c12      	ldrh	r2, [r2, #32]
 80119a4:	4413      	add	r3, r2
 80119a6:	4619      	mov	r1, r3
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f000 f87f 	bl	8011aac <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 80119ae:	8a3a      	ldrh	r2, [r7, #16]
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 80119b4:	69bb      	ldr	r3, [r7, #24]
 80119b6:	8c1a      	ldrh	r2, [r3, #32]
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 80119bc:	e03f      	b.n	8011a3e <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f000 f842 	bl	8011a48 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 80119c4:	2300      	movs	r3, #0
 80119c6:	61fb      	str	r3, [r7, #28]
 80119c8:	e021      	b.n	8011a0e <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119ce:	69fb      	ldr	r3, [r7, #28]
 80119d0:	4413      	add	r3, r2
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	f003 0301 	and.w	r3, r3, #1
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d014      	beq.n	8011a06 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 80119dc:	69bb      	ldr	r3, [r7, #24]
 80119de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80119e0:	69fa      	ldr	r2, [r7, #28]
 80119e2:	4613      	mov	r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	4413      	add	r3, r2
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	440b      	add	r3, r1
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 80119f0:	6979      	ldr	r1, [r7, #20]
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f000 f85a 	bl	8011aac <writeToOutput>
        writeToOutput(cli, lineBreak);
 80119f8:	4b12      	ldr	r3, [pc, #72]	; (8011a44 <onAutocompleteRequest+0x110>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4619      	mov	r1, r3
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 f854 	bl	8011aac <writeToOutput>
 8011a04:	e000      	b.n	8011a08 <onAutocompleteRequest+0xd4>
            continue;
 8011a06:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	61fb      	str	r3, [r7, #28]
 8011a0e:	69bb      	ldr	r3, [r7, #24]
 8011a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011a12:	461a      	mov	r2, r3
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	4293      	cmp	r3, r2
 8011a18:	dbd7      	blt.n	80119ca <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4619      	mov	r1, r3
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f000 f843 	bl	8011aac <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	69db      	ldr	r3, [r3, #28]
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 f83d 	bl	8011aac <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	8c1a      	ldrh	r2, [r3, #32]
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	861a      	strh	r2, [r3, #48]	; 0x30
 8011a3a:	e000      	b.n	8011a3e <onAutocompleteRequest+0x10a>
        return;
 8011a3c:	bf00      	nop
}
 8011a3e:	3720      	adds	r7, #32
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	20000024 	.word	0x20000024

08011a48 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8011a48:	b590      	push	{r4, r7, lr}
 8011a4a:	b087      	sub	sp, #28
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	68db      	ldr	r3, [r3, #12]
 8011a54:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011a5a:	461c      	mov	r4, r3
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7ee fbc7 	bl	80001f4 <strlen>
 8011a66:	4603      	mov	r3, r0
 8011a68:	4423      	add	r3, r4
 8011a6a:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	210d      	movs	r1, #13
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011a76:	2300      	movs	r3, #0
 8011a78:	617b      	str	r3, [r7, #20]
 8011a7a:	e007      	b.n	8011a8c <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2120      	movs	r1, #32
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	3301      	adds	r3, #1
 8011a8a:	617b      	str	r3, [r7, #20]
 8011a8c:	697a      	ldr	r2, [r7, #20]
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d3f3      	bcc.n	8011a7c <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	210d      	movs	r1, #13
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	4798      	blx	r3
    impl->inputLineLength = 0;
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8011aa4:	bf00      	nop
 8011aa6:	371c      	adds	r7, #28
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd90      	pop	{r4, r7, pc}

08011aac <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b084      	sub	sp, #16
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8011ab6:	6838      	ldr	r0, [r7, #0]
 8011ab8:	f7ee fb9c 	bl	80001f4 <strlen>
 8011abc:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8011abe:	2300      	movs	r3, #0
 8011ac0:	60fb      	str	r3, [r7, #12]
 8011ac2:	e00b      	b.n	8011adc <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	6839      	ldr	r1, [r7, #0]
 8011aca:	68fa      	ldr	r2, [r7, #12]
 8011acc:	440a      	add	r2, r1
 8011ace:	7812      	ldrb	r2, [r2, #0]
 8011ad0:	4611      	mov	r1, r2
 8011ad2:	6878      	ldr	r0, [r7, #4]
 8011ad4:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	60fb      	str	r3, [r7, #12]
 8011adc:	68fa      	ldr	r2, [r7, #12]
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d3ef      	bcc.n	8011ac4 <writeToOutput+0x18>
    }
}
 8011ae4:	bf00      	nop
 8011ae6:	bf00      	nop
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <isControlChar>:

static bool isControlChar(char c) {
 8011aee:	b480      	push	{r7}
 8011af0:	b083      	sub	sp, #12
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	4603      	mov	r3, r0
 8011af6:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8011af8:	79fb      	ldrb	r3, [r7, #7]
 8011afa:	2b0d      	cmp	r3, #13
 8011afc:	d00b      	beq.n	8011b16 <isControlChar+0x28>
 8011afe:	79fb      	ldrb	r3, [r7, #7]
 8011b00:	2b0a      	cmp	r3, #10
 8011b02:	d008      	beq.n	8011b16 <isControlChar+0x28>
 8011b04:	79fb      	ldrb	r3, [r7, #7]
 8011b06:	2b08      	cmp	r3, #8
 8011b08:	d005      	beq.n	8011b16 <isControlChar+0x28>
 8011b0a:	79fb      	ldrb	r3, [r7, #7]
 8011b0c:	2b09      	cmp	r3, #9
 8011b0e:	d002      	beq.n	8011b16 <isControlChar+0x28>
 8011b10:	79fb      	ldrb	r3, [r7, #7]
 8011b12:	2b7f      	cmp	r3, #127	; 0x7f
 8011b14:	d101      	bne.n	8011b1a <isControlChar+0x2c>
 8011b16:	2301      	movs	r3, #1
 8011b18:	e000      	b.n	8011b1c <isControlChar+0x2e>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	f003 0301 	and.w	r3, r3, #1
 8011b20:	b2db      	uxtb	r3, r3
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	370c      	adds	r7, #12
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr

08011b2e <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8011b2e:	b480      	push	{r7}
 8011b30:	b083      	sub	sp, #12
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	4603      	mov	r3, r0
 8011b36:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8011b38:	79fb      	ldrb	r3, [r7, #7]
 8011b3a:	2b1f      	cmp	r3, #31
 8011b3c:	d904      	bls.n	8011b48 <isDisplayableChar+0x1a>
 8011b3e:	79fb      	ldrb	r3, [r7, #7]
 8011b40:	2b7e      	cmp	r3, #126	; 0x7e
 8011b42:	d801      	bhi.n	8011b48 <isDisplayableChar+0x1a>
 8011b44:	2301      	movs	r3, #1
 8011b46:	e000      	b.n	8011b4a <isDisplayableChar+0x1c>
 8011b48:	2300      	movs	r3, #0
 8011b4a:	f003 0301 	and.w	r3, r3, #1
 8011b4e:	b2db      	uxtb	r3, r3
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	370c      	adds	r7, #12
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr

08011b5c <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8011b5c:	b480      	push	{r7}
 8011b5e:	b083      	sub	sp, #12
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	88da      	ldrh	r2, [r3, #6]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	889b      	ldrh	r3, [r3, #4]
 8011b6c:	429a      	cmp	r2, r3
 8011b6e:	d306      	bcc.n	8011b7e <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	88da      	ldrh	r2, [r3, #6]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	889b      	ldrh	r3, [r3, #4]
 8011b78:	1ad3      	subs	r3, r2, r3
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	e009      	b.n	8011b92 <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	891a      	ldrh	r2, [r3, #8]
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	889b      	ldrh	r3, [r3, #4]
 8011b86:	1ad3      	subs	r3, r2, r3
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	88db      	ldrh	r3, [r3, #6]
 8011b8e:	4413      	add	r3, r2
 8011b90:	b29b      	uxth	r3, r3
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	370c      	adds	r7, #12
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr

08011b9e <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8011b9e:	b480      	push	{r7}
 8011ba0:	b085      	sub	sp, #20
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	889a      	ldrh	r2, [r3, #4]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	88db      	ldrh	r3, [r3, #6]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d014      	beq.n	8011be0 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	8892      	ldrh	r2, [r2, #4]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	889b      	ldrh	r3, [r3, #4]
 8011bc8:	3301      	adds	r3, #1
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	8912      	ldrh	r2, [r2, #8]
 8011bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bd4:	fb01 f202 	mul.w	r2, r1, r2
 8011bd8:	1a9b      	subs	r3, r3, r2
 8011bda:	b29a      	uxth	r2, r3
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8011be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3714      	adds	r7, #20
 8011be6:	46bd      	mov	sp, r7
 8011be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bec:	4770      	bx	lr

08011bee <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8011bee:	b480      	push	{r7}
 8011bf0:	b085      	sub	sp, #20
 8011bf2:	af00      	add	r7, sp, #0
 8011bf4:	6078      	str	r0, [r7, #4]
 8011bf6:	460b      	mov	r3, r1
 8011bf8:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	88db      	ldrh	r3, [r3, #6]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	8912      	ldrh	r2, [r2, #8]
 8011c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c0a:	fb01 f202 	mul.w	r2, r1, r2
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	889b      	ldrh	r3, [r3, #4]
 8011c16:	89fa      	ldrh	r2, [r7, #14]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d00b      	beq.n	8011c34 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	88d2      	ldrh	r2, [r2, #6]
 8011c24:	4413      	add	r3, r2
 8011c26:	78fa      	ldrb	r2, [r7, #3]
 8011c28:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	89fa      	ldrh	r2, [r7, #14]
 8011c2e:	80da      	strh	r2, [r3, #6]
        return true;
 8011c30:	2301      	movs	r3, #1
 8011c32:	e000      	b.n	8011c36 <fifoBufPush+0x48>
    }
    return false;
 8011c34:	2300      	movs	r3, #0
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3714      	adds	r7, #20
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr

08011c42 <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 8011c42:	b580      	push	{r7, lr}
 8011c44:	b088      	sub	sp, #32
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	6078      	str	r0, [r7, #4]
 8011c4a:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8011c4c:	6838      	ldr	r0, [r7, #0]
 8011c4e:	f7ee fad1 	bl	80001f4 <strlen>
 8011c52:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	889b      	ldrh	r3, [r3, #4]
 8011c58:	461a      	mov	r2, r3
 8011c5a:	69bb      	ldr	r3, [r7, #24]
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d201      	bcs.n	8011c66 <historyPut+0x24>
        return false;
 8011c62:	2300      	movs	r3, #0
 8011c64:	e04d      	b.n	8011d02 <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 8011c66:	6839      	ldr	r1, [r7, #0]
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f000 f86a 	bl	8011d42 <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8011c6e:	e024      	b.n	8011cba <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	891b      	ldrh	r3, [r3, #8]
 8011c74:	4619      	mov	r1, r3
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 f847 	bl	8011d0a <historyGet>
 8011c7c:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8011c7e:	6978      	ldr	r0, [r7, #20]
 8011c80:	f7ee fab8 	bl	80001f4 <strlen>
 8011c84:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	697a      	ldr	r2, [r7, #20]
 8011c8c:	1ad3      	subs	r3, r2, r3
 8011c8e:	461a      	mov	r2, r3
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	4413      	add	r3, r2
 8011c94:	3301      	adds	r3, #1
 8011c96:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	889b      	ldrh	r3, [r3, #4]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	69fb      	ldr	r3, [r7, #28]
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d20a      	bcs.n	8011cc4 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	891b      	ldrh	r3, [r3, #8]
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	891b      	ldrh	r3, [r3, #8]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d1d6      	bne.n	8011c70 <historyPut+0x2e>
 8011cc2:	e000      	b.n	8011cc6 <historyPut+0x84>
            break;
 8011cc4:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	891b      	ldrh	r3, [r3, #8]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d00a      	beq.n	8011ce4 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	69bb      	ldr	r3, [r7, #24]
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	18d0      	adds	r0, r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	69fa      	ldr	r2, [r7, #28]
 8011cde:	4619      	mov	r1, r3
 8011ce0:	f009 fc6a 	bl	801b5b8 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6818      	ldr	r0, [r3, #0]
 8011ce8:	69bb      	ldr	r3, [r7, #24]
 8011cea:	3301      	adds	r3, #1
 8011cec:	461a      	mov	r2, r3
 8011cee:	6839      	ldr	r1, [r7, #0]
 8011cf0:	f009 fc54 	bl	801b59c <memcpy>
    ++history->itemsCount;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	891b      	ldrh	r3, [r3, #8]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	811a      	strh	r2, [r3, #8]

    return true;
 8011d00:	2301      	movs	r3, #1
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3720      	adds	r7, #32
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8011d0a:	b580      	push	{r7, lr}
 8011d0c:	b082      	sub	sp, #8
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	6078      	str	r0, [r7, #4]
 8011d12:	460b      	mov	r3, r1
 8011d14:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8011d16:	887b      	ldrh	r3, [r7, #2]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d004      	beq.n	8011d26 <historyGet+0x1c>
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	891b      	ldrh	r3, [r3, #8]
 8011d20:	887a      	ldrh	r2, [r7, #2]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d901      	bls.n	8011d2a <historyGet+0x20>
        return NULL;
 8011d26:	2300      	movs	r3, #0
 8011d28:	e007      	b.n	8011d3a <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	887a      	ldrh	r2, [r7, #2]
 8011d30:	4611      	mov	r1, r2
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7ff f906 	bl	8010f44 <embeddedCliGetToken>
 8011d38:	4603      	mov	r3, r0
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3708      	adds	r7, #8
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}

08011d42 <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b086      	sub	sp, #24
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d04c      	beq.n	8011dec <historyRemove+0xaa>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	891b      	ldrh	r3, [r3, #8]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d048      	beq.n	8011dec <historyRemove+0xaa>
        return;
    char *item = NULL;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8011d5e:	2301      	movs	r3, #1
 8011d60:	827b      	strh	r3, [r7, #18]
 8011d62:	e013      	b.n	8011d8c <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	8a7a      	ldrh	r2, [r7, #18]
 8011d6a:	4611      	mov	r1, r2
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7ff f904 	bl	8010f7a <embeddedCliGetTokenVariable>
 8011d72:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	6978      	ldr	r0, [r7, #20]
 8011d78:	f7ee fa32 	bl	80001e0 <strcmp>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d00a      	beq.n	8011d98 <historyRemove+0x56>
            break;
        }
        item = NULL;
 8011d82:	2300      	movs	r3, #0
 8011d84:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8011d86:	8a7b      	ldrh	r3, [r7, #18]
 8011d88:	3301      	adds	r3, #1
 8011d8a:	827b      	strh	r3, [r7, #18]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	891b      	ldrh	r3, [r3, #8]
 8011d90:	8a7a      	ldrh	r2, [r7, #18]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d9e6      	bls.n	8011d64 <historyRemove+0x22>
 8011d96:	e000      	b.n	8011d9a <historyRemove+0x58>
            break;
 8011d98:	bf00      	nop
    }
    if (item == NULL)
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d027      	beq.n	8011df0 <historyRemove+0xae>
        return;

    --history->itemsCount;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	891b      	ldrh	r3, [r3, #8]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 8011dac:	8a7a      	ldrh	r2, [r7, #18]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	891b      	ldrh	r3, [r3, #8]
 8011db2:	3301      	adds	r3, #1
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d01d      	beq.n	8011df4 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8011db8:	6978      	ldr	r0, [r7, #20]
 8011dba:	f7ee fa1b 	bl	80001f4 <strlen>
 8011dbe:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	889b      	ldrh	r3, [r3, #4]
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	697a      	ldr	r2, [r7, #20]
 8011dcc:	441a      	add	r2, r3
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	1acb      	subs	r3, r1, r3
 8011dd6:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	3301      	adds	r3, #1
 8011ddc:	697a      	ldr	r2, [r7, #20]
 8011dde:	4413      	add	r3, r2
 8011de0:	68ba      	ldr	r2, [r7, #8]
 8011de2:	4619      	mov	r1, r3
 8011de4:	6978      	ldr	r0, [r7, #20]
 8011de6:	f009 fbe7 	bl	801b5b8 <memmove>
 8011dea:	e004      	b.n	8011df6 <historyRemove+0xb4>
        return;
 8011dec:	bf00      	nop
 8011dee:	e002      	b.n	8011df6 <historyRemove+0xb4>
        return;
 8011df0:	bf00      	nop
 8011df2:	e000      	b.n	8011df6 <historyRemove+0xb4>
        return;
 8011df4:	bf00      	nop
}
 8011df6:	3718      	adds	r7, #24
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8011dfc:	b480      	push	{r7}
 8011dfe:	b085      	sub	sp, #20
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	460b      	mov	r3, r1
 8011e06:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d002      	beq.n	8011e14 <getTokenPosition+0x18>
 8011e0e:	887b      	ldrh	r3, [r7, #2]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d102      	bne.n	8011e1a <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8011e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e18:	e028      	b.n	8011e6c <getTokenPosition+0x70>
    uint16_t i = 0;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 8011e22:	89ba      	ldrh	r2, [r7, #12]
 8011e24:	887b      	ldrh	r3, [r7, #2]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d013      	beq.n	8011e52 <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8011e2a:	89fb      	ldrh	r3, [r7, #14]
 8011e2c:	687a      	ldr	r2, [r7, #4]
 8011e2e:	4413      	add	r3, r2
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d109      	bne.n	8011e4a <getTokenPosition+0x4e>
            ++tokenCount;
 8011e36:	89bb      	ldrh	r3, [r7, #12]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8011e3c:	89fb      	ldrh	r3, [r7, #14]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	4413      	add	r3, r2
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d005      	beq.n	8011e56 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8011e4a:	89fb      	ldrh	r3, [r7, #14]
 8011e4c:	3301      	adds	r3, #1
 8011e4e:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8011e50:	e7e7      	b.n	8011e22 <getTokenPosition+0x26>
            break;
 8011e52:	bf00      	nop
 8011e54:	e000      	b.n	8011e58 <getTokenPosition+0x5c>
                break;
 8011e56:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8011e58:	89fb      	ldrh	r3, [r7, #14]
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d001      	beq.n	8011e68 <getTokenPosition+0x6c>
        return i;
 8011e64:	89fb      	ldrh	r3, [r7, #14]
 8011e66:	e001      	b.n	8011e6c <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8011e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3714      	adds	r7, #20
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011e7c:	4904      	ldr	r1, [pc, #16]	; (8011e90 <MX_FATFS_Init+0x18>)
 8011e7e:	4805      	ldr	r0, [pc, #20]	; (8011e94 <MX_FATFS_Init+0x1c>)
 8011e80:	f007 fefc 	bl	8019c7c <FATFS_LinkDriver>
 8011e84:	4603      	mov	r3, r0
 8011e86:	461a      	mov	r2, r3
 8011e88:	4b03      	ldr	r3, [pc, #12]	; (8011e98 <MX_FATFS_Init+0x20>)
 8011e8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011e8c:	bf00      	nop
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	20001a7c 	.word	0x20001a7c
 8011e94:	08021afc 	.word	0x08021afc
 8011e98:	20001a78 	.word	0x20001a78

08011e9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011e9c:	b480      	push	{r7}
 8011e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011ea0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b082      	sub	sp, #8
 8011eb0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011eb6:	f000 f86b 	bl	8011f90 <BSP_SD_IsDetected>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	d001      	beq.n	8011ec4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e005      	b.n	8011ed0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011ec4:	4804      	ldr	r0, [pc, #16]	; (8011ed8 <BSP_SD_Init+0x2c>)
 8011ec6:	f7f7 fc5a 	bl	800977e <HAL_SD_Init>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8011ece:	79fb      	ldrb	r3, [r7, #7]
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	200017e4 	.word	0x200017e4

08011edc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b088      	sub	sp, #32
 8011ee0:	af02      	add	r7, sp, #8
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	607a      	str	r2, [r7, #4]
 8011ee8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	9300      	str	r3, [sp, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	68ba      	ldr	r2, [r7, #8]
 8011ef6:	68f9      	ldr	r1, [r7, #12]
 8011ef8:	4806      	ldr	r0, [pc, #24]	; (8011f14 <BSP_SD_ReadBlocks+0x38>)
 8011efa:	f7f7 fcf1 	bl	80098e0 <HAL_SD_ReadBlocks>
 8011efe:	4603      	mov	r3, r0
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011f04:	2301      	movs	r3, #1
 8011f06:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3718      	adds	r7, #24
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	200017e4 	.word	0x200017e4

08011f18 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b088      	sub	sp, #32
 8011f1c:	af02      	add	r7, sp, #8
 8011f1e:	60f8      	str	r0, [r7, #12]
 8011f20:	60b9      	str	r1, [r7, #8]
 8011f22:	607a      	str	r2, [r7, #4]
 8011f24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011f26:	2300      	movs	r3, #0
 8011f28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	9300      	str	r3, [sp, #0]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	68ba      	ldr	r2, [r7, #8]
 8011f32:	68f9      	ldr	r1, [r7, #12]
 8011f34:	4806      	ldr	r0, [pc, #24]	; (8011f50 <BSP_SD_WriteBlocks+0x38>)
 8011f36:	f7f7 feb1 	bl	8009c9c <HAL_SD_WriteBlocks>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d001      	beq.n	8011f44 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011f40:	2301      	movs	r3, #1
 8011f42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3718      	adds	r7, #24
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	200017e4 	.word	0x200017e4

08011f54 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011f58:	4805      	ldr	r0, [pc, #20]	; (8011f70 <BSP_SD_GetCardState+0x1c>)
 8011f5a:	f7f8 f9f5 	bl	800a348 <HAL_SD_GetCardState>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b04      	cmp	r3, #4
 8011f62:	bf14      	ite	ne
 8011f64:	2301      	movne	r3, #1
 8011f66:	2300      	moveq	r3, #0
 8011f68:	b2db      	uxtb	r3, r3
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	200017e4 	.word	0x200017e4

08011f74 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011f7c:	6879      	ldr	r1, [r7, #4]
 8011f7e:	4803      	ldr	r0, [pc, #12]	; (8011f8c <BSP_SD_GetCardInfo+0x18>)
 8011f80:	f7f8 f9b6 	bl	800a2f0 <HAL_SD_GetCardInfo>
}
 8011f84:	bf00      	nop
 8011f86:	3708      	adds	r7, #8
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}
 8011f8c:	200017e4 	.word	0x200017e4

08011f90 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011f96:	2301      	movs	r3, #1
 8011f98:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8011f9a:	79fb      	ldrb	r3, [r7, #7]
 8011f9c:	b2db      	uxtb	r3, r3
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr
	...

08011fac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011fb6:	4b0b      	ldr	r3, [pc, #44]	; (8011fe4 <SD_CheckStatus+0x38>)
 8011fb8:	2201      	movs	r2, #1
 8011fba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011fbc:	f7ff ffca 	bl	8011f54 <BSP_SD_GetCardState>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d107      	bne.n	8011fd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011fc6:	4b07      	ldr	r3, [pc, #28]	; (8011fe4 <SD_CheckStatus+0x38>)
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	b2db      	uxtb	r3, r3
 8011fcc:	f023 0301 	bic.w	r3, r3, #1
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	4b04      	ldr	r3, [pc, #16]	; (8011fe4 <SD_CheckStatus+0x38>)
 8011fd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011fd6:	4b03      	ldr	r3, [pc, #12]	; (8011fe4 <SD_CheckStatus+0x38>)
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	b2db      	uxtb	r3, r3
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20000028 	.word	0x20000028

08011fe8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	4603      	mov	r3, r0
 8011ff0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011ff2:	4b0b      	ldr	r3, [pc, #44]	; (8012020 <SD_initialize+0x38>)
 8011ff4:	2201      	movs	r2, #1
 8011ff6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011ff8:	f7ff ff58 	bl	8011eac <BSP_SD_Init>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d107      	bne.n	8012012 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8012002:	79fb      	ldrb	r3, [r7, #7]
 8012004:	4618      	mov	r0, r3
 8012006:	f7ff ffd1 	bl	8011fac <SD_CheckStatus>
 801200a:	4603      	mov	r3, r0
 801200c:	461a      	mov	r2, r3
 801200e:	4b04      	ldr	r3, [pc, #16]	; (8012020 <SD_initialize+0x38>)
 8012010:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012012:	4b03      	ldr	r3, [pc, #12]	; (8012020 <SD_initialize+0x38>)
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	b2db      	uxtb	r3, r3
}
 8012018:	4618      	mov	r0, r3
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	20000028 	.word	0x20000028

08012024 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	4603      	mov	r3, r0
 801202c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801202e:	79fb      	ldrb	r3, [r7, #7]
 8012030:	4618      	mov	r0, r3
 8012032:	f7ff ffbb 	bl	8011fac <SD_CheckStatus>
 8012036:	4603      	mov	r3, r0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b086      	sub	sp, #24
 8012044:	af00      	add	r7, sp, #0
 8012046:	60b9      	str	r1, [r7, #8]
 8012048:	607a      	str	r2, [r7, #4]
 801204a:	603b      	str	r3, [r7, #0]
 801204c:	4603      	mov	r3, r0
 801204e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012050:	2301      	movs	r3, #1
 8012052:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8012054:	f04f 33ff 	mov.w	r3, #4294967295
 8012058:	683a      	ldr	r2, [r7, #0]
 801205a:	6879      	ldr	r1, [r7, #4]
 801205c:	68b8      	ldr	r0, [r7, #8]
 801205e:	f7ff ff3d 	bl	8011edc <BSP_SD_ReadBlocks>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d107      	bne.n	8012078 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012068:	bf00      	nop
 801206a:	f7ff ff73 	bl	8011f54 <BSP_SD_GetCardState>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d1fa      	bne.n	801206a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8012074:	2300      	movs	r3, #0
 8012076:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012078:	7dfb      	ldrb	r3, [r7, #23]
}
 801207a:	4618      	mov	r0, r3
 801207c:	3718      	adds	r7, #24
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012082:	b580      	push	{r7, lr}
 8012084:	b086      	sub	sp, #24
 8012086:	af00      	add	r7, sp, #0
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	607a      	str	r2, [r7, #4]
 801208c:	603b      	str	r3, [r7, #0]
 801208e:	4603      	mov	r3, r0
 8012090:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012092:	2301      	movs	r3, #1
 8012094:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8012096:	f04f 33ff 	mov.w	r3, #4294967295
 801209a:	683a      	ldr	r2, [r7, #0]
 801209c:	6879      	ldr	r1, [r7, #4]
 801209e:	68b8      	ldr	r0, [r7, #8]
 80120a0:	f7ff ff3a 	bl	8011f18 <BSP_SD_WriteBlocks>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d107      	bne.n	80120ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80120aa:	bf00      	nop
 80120ac:	f7ff ff52 	bl	8011f54 <BSP_SD_GetCardState>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d1fa      	bne.n	80120ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80120b6:	2300      	movs	r3, #0
 80120b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3718      	adds	r7, #24
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08c      	sub	sp, #48	; 0x30
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	4603      	mov	r3, r0
 80120cc:	603a      	str	r2, [r7, #0]
 80120ce:	71fb      	strb	r3, [r7, #7]
 80120d0:	460b      	mov	r3, r1
 80120d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80120d4:	2301      	movs	r3, #1
 80120d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80120da:	4b25      	ldr	r3, [pc, #148]	; (8012170 <SD_ioctl+0xac>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	b2db      	uxtb	r3, r3
 80120e0:	f003 0301 	and.w	r3, r3, #1
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d001      	beq.n	80120ec <SD_ioctl+0x28>
 80120e8:	2303      	movs	r3, #3
 80120ea:	e03c      	b.n	8012166 <SD_ioctl+0xa2>

  switch (cmd)
 80120ec:	79bb      	ldrb	r3, [r7, #6]
 80120ee:	2b03      	cmp	r3, #3
 80120f0:	d834      	bhi.n	801215c <SD_ioctl+0x98>
 80120f2:	a201      	add	r2, pc, #4	; (adr r2, 80120f8 <SD_ioctl+0x34>)
 80120f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120f8:	08012109 	.word	0x08012109
 80120fc:	08012111 	.word	0x08012111
 8012100:	08012129 	.word	0x08012129
 8012104:	08012143 	.word	0x08012143
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012108:	2300      	movs	r3, #0
 801210a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801210e:	e028      	b.n	8012162 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012110:	f107 030c 	add.w	r3, r7, #12
 8012114:	4618      	mov	r0, r3
 8012116:	f7ff ff2d 	bl	8011f74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012120:	2300      	movs	r3, #0
 8012122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012126:	e01c      	b.n	8012162 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012128:	f107 030c 	add.w	r3, r7, #12
 801212c:	4618      	mov	r0, r3
 801212e:	f7ff ff21 	bl	8011f74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012134:	b29a      	uxth	r2, r3
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012140:	e00f      	b.n	8012162 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012142:	f107 030c 	add.w	r3, r7, #12
 8012146:	4618      	mov	r0, r3
 8012148:	f7ff ff14 	bl	8011f74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214e:	0a5a      	lsrs	r2, r3, #9
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012154:	2300      	movs	r3, #0
 8012156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801215a:	e002      	b.n	8012162 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801215c:	2304      	movs	r3, #4
 801215e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012166:	4618      	mov	r0, r3
 8012168:	3730      	adds	r7, #48	; 0x30
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	20000028 	.word	0x20000028

08012174 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;

void RtcInt()
{
 8012174:	b480      	push	{r7}
 8012176:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8012178:	4b03      	ldr	r3, [pc, #12]	; (8012188 <RtcInt+0x14>)
 801217a:	2201      	movs	r2, #1
 801217c:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 801217e:	bf00      	nop
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr
 8012188:	20000029 	.word	0x20000029

0801218c <Set_Date>:

void Set_Date(char *Datebuffer) {
 801218c:	b580      	push	{r7, lr}
 801218e:	b088      	sub	sp, #32
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8012194:	f107 030c 	add.w	r3, r7, #12
 8012198:	4619      	mov	r1, r3
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 f8c8 	bl	8012330 <Parse_Date>
 80121a0:	4603      	mov	r3, r0
 80121a2:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 80121a4:	7ffb      	ldrb	r3, [r7, #31]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10c      	bne.n	80121c4 <Set_Date+0x38>
		sDate.Date = date[0];
 80121aa:	7b3b      	ldrb	r3, [r7, #12]
 80121ac:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 80121ae:	7b7b      	ldrb	r3, [r7, #13]
 80121b0:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 80121b2:	7bbb      	ldrb	r3, [r7, #14]
 80121b4:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80121b6:	f107 0318 	add.w	r3, r7, #24
 80121ba:	2200      	movs	r2, #0
 80121bc:	4619      	mov	r1, r3
 80121be:	4805      	ldr	r0, [pc, #20]	; (80121d4 <Set_Date+0x48>)
 80121c0:	f7f6 ffba 	bl	8009138 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 80121c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80121c8:	f7f1 fcd2 	bl	8003b70 <HAL_Delay>
}
 80121cc:	bf00      	nop
 80121ce:	3720      	adds	r7, #32
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}
 80121d4:	200017c4 	.word	0x200017c4

080121d8 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b092      	sub	sp, #72	; 0x48
 80121dc:	af00      	add	r7, sp, #0
uint16_t minute;



if(set_alarm_Time)
 80121de:	4b38      	ldr	r3, [pc, #224]	; (80122c0 <Rtc_set_alarm+0xe8>)
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d068      	beq.n	80122b8 <Rtc_set_alarm+0xe0>
{
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80121e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80121ea:	2200      	movs	r2, #0
 80121ec:	4619      	mov	r1, r3
 80121ee:	4835      	ldr	r0, [pc, #212]	; (80122c4 <Rtc_set_alarm+0xec>)
 80121f0:	f7f6 ff44 	bl	800907c <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80121f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80121f8:	2200      	movs	r2, #0
 80121fa:	4619      	mov	r1, r3
 80121fc:	4831      	ldr	r0, [pc, #196]	; (80122c4 <Rtc_set_alarm+0xec>)
 80121fe:	f7f7 f81f 	bl	8009240 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8012202:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8012206:	b29a      	uxth	r2, r3
 8012208:	4b2f      	ldr	r3, [pc, #188]	; (80122c8 <Rtc_set_alarm+0xf0>)
 801220a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801220e:	b29b      	uxth	r3, r3
 8012210:	4413      	add	r3, r2
 8012212:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    if(minute > 59)
 8012216:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801221a:	2b3b      	cmp	r3, #59	; 0x3b
 801221c:	d912      	bls.n	8012244 <Rtc_set_alarm+0x6c>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 801221e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012222:	4a29      	ldr	r2, [pc, #164]	; (80122c8 <Rtc_set_alarm+0xf0>)
 8012224:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8012228:	fbb3 f1f2 	udiv	r1, r3, r2
 801222c:	fb01 f202 	mul.w	r2, r1, r2
 8012230:	1a9b      	subs	r3, r3, r2
 8012232:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    	if(minute == 0)
 8012236:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801223a:	2b00      	cmp	r3, #0
 801223c:	d102      	bne.n	8012244 <Rtc_set_alarm+0x6c>
    	{
    		minute = 1;
 801223e:	2301      	movs	r3, #1
 8012240:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    	}
    }

      RTC_AlarmTypeDef sAlarm = {0};
 8012244:	1d3b      	adds	r3, r7, #4
 8012246:	2228      	movs	r2, #40	; 0x28
 8012248:	2100      	movs	r1, #0
 801224a:	4618      	mov	r0, r3
 801224c:	f009 f9ce 	bl	801b5ec <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8012250:	2300      	movs	r3, #0
 8012252:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8012254:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012258:	b2db      	uxtb	r3, r3
 801225a:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 801225c:	2300      	movs	r3, #0
 801225e:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8012260:	2300      	movs	r3, #0
 8012262:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012264:	2300      	movs	r3, #0
 8012266:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012268:	2300      	movs	r3, #0
 801226a:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 801226c:	4b17      	ldr	r3, [pc, #92]	; (80122cc <Rtc_set_alarm+0xf4>)
 801226e:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8012270:	2300      	movs	r3, #0
 8012272:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8012274:	2300      	movs	r3, #0
 8012276:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8012278:	2301      	movs	r3, #1
 801227a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 801227e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012282:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8012284:	1d3b      	adds	r3, r7, #4
 8012286:	2200      	movs	r2, #0
 8012288:	4619      	mov	r1, r3
 801228a:	480e      	ldr	r0, [pc, #56]	; (80122c4 <Rtc_set_alarm+0xec>)
 801228c:	f7f7 f828 	bl	80092e0 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8012290:	4b0c      	ldr	r3, [pc, #48]	; (80122c4 <Rtc_set_alarm+0xec>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	689a      	ldr	r2, [r3, #8]
 8012296:	4b0b      	ldr	r3, [pc, #44]	; (80122c4 <Rtc_set_alarm+0xec>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801229e:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 80122a0:	4b08      	ldr	r3, [pc, #32]	; (80122c4 <Rtc_set_alarm+0xec>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	b2da      	uxtb	r2, r3
 80122a8:	4b06      	ldr	r3, [pc, #24]	; (80122c4 <Rtc_set_alarm+0xec>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 80122b0:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 80122b2:	4b03      	ldr	r3, [pc, #12]	; (80122c0 <Rtc_set_alarm+0xe8>)
 80122b4:	2200      	movs	r2, #0
 80122b6:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 80122b8:	bf00      	nop
 80122ba:	3748      	adds	r7, #72	; 0x48
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	20000029 	.word	0x20000029
 80122c4:	200017c4 	.word	0x200017c4
 80122c8:	200012dc 	.word	0x200012dc
 80122cc:	80800080 	.word	0x80800080

080122d0 <Set_Time>:
void Set_Time(char *Timebuffer) {
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b08c      	sub	sp, #48	; 0x30
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 80122d8:	f107 030c 	add.w	r3, r7, #12
 80122dc:	4619      	mov	r1, r3
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 f890 	bl	8012404 <Parse_Time>
 80122e4:	4603      	mov	r3, r0
 80122e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 80122ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d113      	bne.n	801231a <Set_Time+0x4a>
		sTime.Hours = time[0];
 80122f2:	7b3b      	ldrb	r3, [r7, #12]
 80122f4:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 80122f6:	7b7b      	ldrb	r3, [r7, #13]
 80122f8:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 80122fa:	7bbb      	ldrb	r3, [r7, #14]
 80122fc:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80122fe:	2300      	movs	r3, #0
 8012300:	627b      	str	r3, [r7, #36]	; 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012302:	2300      	movs	r3, #0
 8012304:	62bb      	str	r3, [r7, #40]	; 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8012306:	f107 0318 	add.w	r3, r7, #24
 801230a:	2200      	movs	r2, #0
 801230c:	4619      	mov	r1, r3
 801230e:	4807      	ldr	r0, [pc, #28]	; (801232c <Set_Time+0x5c>)
 8012310:	f7f6 fe1a 	bl	8008f48 <HAL_RTC_SetTime>
 8012314:	4603      	mov	r3, r0
 8012316:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}

	HAL_Delay(500);
 801231a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801231e:	f7f1 fc27 	bl	8003b70 <HAL_Delay>

}
 8012322:	bf00      	nop
 8012324:	3730      	adds	r7, #48	; 0x30
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	200017c4 	.word	0x200017c4

08012330 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 801233a:	2300      	movs	r3, #0
 801233c:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 801233e:	2300      	movs	r3, #0
 8012340:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8012342:	492e      	ldr	r1, [pc, #184]	; (80123fc <Parse_Date+0xcc>)
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f00a ffcb 	bl	801d2e0 <strtok>
 801234a:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d14b      	bne.n	80123ea <Parse_Date+0xba>
		{
			return 1;
 8012352:	2301      	movs	r3, #1
 8012354:	e04d      	b.n	80123f2 <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8012356:	68b8      	ldr	r0, [r7, #8]
 8012358:	f009 f878 	bl	801b44c <atoi>
 801235c:	4603      	mov	r3, r0
 801235e:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8012360:	89fb      	ldrh	r3, [r7, #14]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10a      	bne.n	801237c <Parse_Date+0x4c>
 8012366:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801236a:	2b1f      	cmp	r3, #31
 801236c:	dc03      	bgt.n	8012376 <Parse_Date+0x46>
 801236e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012372:	2b00      	cmp	r3, #0
 8012374:	dc02      	bgt.n	801237c <Parse_Date+0x4c>
			{
				val= 1;
 8012376:	2301      	movs	r3, #1
 8012378:	81bb      	strh	r3, [r7, #12]
 801237a:	e028      	b.n	80123ce <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 801237c:	89fb      	ldrh	r3, [r7, #14]
 801237e:	2b01      	cmp	r3, #1
 8012380:	d10a      	bne.n	8012398 <Parse_Date+0x68>
 8012382:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012386:	2b0c      	cmp	r3, #12
 8012388:	dc03      	bgt.n	8012392 <Parse_Date+0x62>
 801238a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801238e:	2b00      	cmp	r3, #0
 8012390:	dc02      	bgt.n	8012398 <Parse_Date+0x68>
			{
				val= 1;
 8012392:	2301      	movs	r3, #1
 8012394:	81bb      	strh	r3, [r7, #12]
 8012396:	e01a      	b.n	80123ce <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8012398:	89fb      	ldrh	r3, [r7, #14]
 801239a:	2b02      	cmp	r3, #2
 801239c:	d112      	bne.n	80123c4 <Parse_Date+0x94>
 801239e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80123a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80123a6:	dd0d      	ble.n	80123c4 <Parse_Date+0x94>
			{
				val=val%100;
 80123a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80123ac:	4a14      	ldr	r2, [pc, #80]	; (8012400 <Parse_Date+0xd0>)
 80123ae:	fb82 1203 	smull	r1, r2, r2, r3
 80123b2:	1151      	asrs	r1, r2, #5
 80123b4:	17da      	asrs	r2, r3, #31
 80123b6:	1a8a      	subs	r2, r1, r2
 80123b8:	2164      	movs	r1, #100	; 0x64
 80123ba:	fb01 f202 	mul.w	r2, r1, r2
 80123be:	1a9b      	subs	r3, r3, r2
 80123c0:	81bb      	strh	r3, [r7, #12]
 80123c2:	e004      	b.n	80123ce <Parse_Date+0x9e>
			}
			else if(i > 2)
 80123c4:	89fb      	ldrh	r3, [r7, #14]
 80123c6:	2b02      	cmp	r3, #2
 80123c8:	d901      	bls.n	80123ce <Parse_Date+0x9e>
			{
				return 1;
 80123ca:	2301      	movs	r3, #1
 80123cc:	e011      	b.n	80123f2 <Parse_Date+0xc2>
			}


		   date[i] =val;
 80123ce:	89fb      	ldrh	r3, [r7, #14]
 80123d0:	683a      	ldr	r2, [r7, #0]
 80123d2:	4413      	add	r3, r2
 80123d4:	89ba      	ldrh	r2, [r7, #12]
 80123d6:	b2d2      	uxtb	r2, r2
 80123d8:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 80123da:	4908      	ldr	r1, [pc, #32]	; (80123fc <Parse_Date+0xcc>)
 80123dc:	2000      	movs	r0, #0
 80123de:	f00a ff7f 	bl	801d2e0 <strtok>
 80123e2:	60b8      	str	r0, [r7, #8]
		i++;
 80123e4:	89fb      	ldrh	r3, [r7, #14]
 80123e6:	3301      	adds	r3, #1
 80123e8:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d1b2      	bne.n	8012356 <Parse_Date+0x26>
	}

	}

	return 0;
 80123f0:	2300      	movs	r3, #0

}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3710      	adds	r7, #16
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	080212d0 	.word	0x080212d0
 8012400:	51eb851f 	.word	0x51eb851f

08012404 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 801240e:	2300      	movs	r3, #0
 8012410:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8012412:	2300      	movs	r3, #0
 8012414:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8012416:	492a      	ldr	r1, [pc, #168]	; (80124c0 <Parse_Time+0xbc>)
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f00a ff61 	bl	801d2e0 <strtok>
 801241e:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d143      	bne.n	80124ae <Parse_Time+0xaa>
			{
				return 1;
 8012426:	2301      	movs	r3, #1
 8012428:	e045      	b.n	80124b6 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 801242a:	68b8      	ldr	r0, [r7, #8]
 801242c:	f009 f80e 	bl	801b44c <atoi>
 8012430:	4603      	mov	r3, r0
 8012432:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8012434:	89fb      	ldrh	r3, [r7, #14]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d10a      	bne.n	8012450 <Parse_Time+0x4c>
 801243a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801243e:	2b18      	cmp	r3, #24
 8012440:	dc03      	bgt.n	801244a <Parse_Time+0x46>
 8012442:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012446:	2b00      	cmp	r3, #0
 8012448:	da02      	bge.n	8012450 <Parse_Time+0x4c>
				{
					val= 24;
 801244a:	2318      	movs	r3, #24
 801244c:	81bb      	strh	r3, [r7, #12]
 801244e:	e020      	b.n	8012492 <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8012450:	89fb      	ldrh	r3, [r7, #14]
 8012452:	2b01      	cmp	r3, #1
 8012454:	d10a      	bne.n	801246c <Parse_Time+0x68>
 8012456:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801245a:	2b3b      	cmp	r3, #59	; 0x3b
 801245c:	dc03      	bgt.n	8012466 <Parse_Time+0x62>
 801245e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	da02      	bge.n	801246c <Parse_Time+0x68>
				{
					val= 59;
 8012466:	233b      	movs	r3, #59	; 0x3b
 8012468:	81bb      	strh	r3, [r7, #12]
 801246a:	e012      	b.n	8012492 <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 801246c:	89fb      	ldrh	r3, [r7, #14]
 801246e:	2b02      	cmp	r3, #2
 8012470:	d10a      	bne.n	8012488 <Parse_Time+0x84>
 8012472:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012476:	2b3b      	cmp	r3, #59	; 0x3b
 8012478:	dc03      	bgt.n	8012482 <Parse_Time+0x7e>
 801247a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801247e:	2b00      	cmp	r3, #0
 8012480:	da02      	bge.n	8012488 <Parse_Time+0x84>
				{
					val=59;
 8012482:	233b      	movs	r3, #59	; 0x3b
 8012484:	81bb      	strh	r3, [r7, #12]
 8012486:	e004      	b.n	8012492 <Parse_Time+0x8e>
				}
				else if(i > 2)
 8012488:	89fb      	ldrh	r3, [r7, #14]
 801248a:	2b02      	cmp	r3, #2
 801248c:	d901      	bls.n	8012492 <Parse_Time+0x8e>
				{
					return 1;
 801248e:	2301      	movs	r3, #1
 8012490:	e011      	b.n	80124b6 <Parse_Time+0xb2>
				}


				time[i] =val;
 8012492:	89fb      	ldrh	r3, [r7, #14]
 8012494:	683a      	ldr	r2, [r7, #0]
 8012496:	4413      	add	r3, r2
 8012498:	89ba      	ldrh	r2, [r7, #12]
 801249a:	b2d2      	uxtb	r2, r2
 801249c:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 801249e:	4908      	ldr	r1, [pc, #32]	; (80124c0 <Parse_Time+0xbc>)
 80124a0:	2000      	movs	r0, #0
 80124a2:	f00a ff1d 	bl	801d2e0 <strtok>
 80124a6:	60b8      	str	r0, [r7, #8]
			i++;
 80124a8:	89fb      	ldrh	r3, [r7, #14]
 80124aa:	3301      	adds	r3, #1
 80124ac:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d1ba      	bne.n	801242a <Parse_Time+0x26>
		}

		}

		return 0;
 80124b4:	2300      	movs	r3, #0
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3710      	adds	r7, #16
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	080212d0 	.word	0x080212d0

080124c4 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 80124c4:	b480      	push	{r7}
 80124c6:	b083      	sub	sp, #12
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	460b      	mov	r3, r1
 80124ce:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 80124d0:	78fb      	ldrb	r3, [r7, #3]
 80124d2:	091b      	lsrs	r3, r3, #4
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	4619      	mov	r1, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	1c5a      	adds	r2, r3, #1
 80124dc:	607a      	str	r2, [r7, #4]
 80124de:	4a08      	ldr	r2, [pc, #32]	; (8012500 <CharToHexasc+0x3c>)
 80124e0:	5c52      	ldrb	r2, [r2, r1]
 80124e2:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 80124e4:	78fb      	ldrb	r3, [r7, #3]
 80124e6:	f003 030f 	and.w	r3, r3, #15
 80124ea:	4a05      	ldr	r2, [pc, #20]	; (8012500 <CharToHexasc+0x3c>)
 80124ec:	5cd2      	ldrb	r2, [r2, r3]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	701a      	strb	r2, [r3, #0]
}
 80124f2:	bf00      	nop
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop
 8012500:	08021b10 	.word	0x08021b10

08012504 <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b088      	sub	sp, #32
 8012508:	af00      	add	r7, sp, #0
	adc_Disable();
 801250a:	4830      	ldr	r0, [pc, #192]	; (80125cc <adc_InitOneShotMode+0xc8>)
 801250c:	f7f1 fbdb 	bl	8003cc6 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8012510:	f107 0314 	add.w	r3, r7, #20
 8012514:	2200      	movs	r2, #0
 8012516:	601a      	str	r2, [r3, #0]
 8012518:	605a      	str	r2, [r3, #4]
 801251a:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 801251c:	4b2b      	ldr	r3, [pc, #172]	; (80125cc <adc_InitOneShotMode+0xc8>)
 801251e:	4a2c      	ldr	r2, [pc, #176]	; (80125d0 <adc_InitOneShotMode+0xcc>)
 8012520:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012522:	4b2a      	ldr	r3, [pc, #168]	; (80125cc <adc_InitOneShotMode+0xc8>)
 8012524:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012528:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801252a:	4b28      	ldr	r3, [pc, #160]	; (80125cc <adc_InitOneShotMode+0xc8>)
 801252c:	2200      	movs	r2, #0
 801252e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8012530:	4b26      	ldr	r3, [pc, #152]	; (80125cc <adc_InitOneShotMode+0xc8>)
 8012532:	2200      	movs	r2, #0
 8012534:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8012536:	4b25      	ldr	r3, [pc, #148]	; (80125cc <adc_InitOneShotMode+0xc8>)
 8012538:	2200      	movs	r2, #0
 801253a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801253c:	4b23      	ldr	r3, [pc, #140]	; (80125cc <adc_InitOneShotMode+0xc8>)
 801253e:	2200      	movs	r2, #0
 8012540:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012544:	4b21      	ldr	r3, [pc, #132]	; (80125cc <adc_InitOneShotMode+0xc8>)
 8012546:	2200      	movs	r2, #0
 8012548:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801254a:	4b20      	ldr	r3, [pc, #128]	; (80125cc <adc_InitOneShotMode+0xc8>)
 801254c:	4a21      	ldr	r2, [pc, #132]	; (80125d4 <adc_InitOneShotMode+0xd0>)
 801254e:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012550:	4b1e      	ldr	r3, [pc, #120]	; (80125cc <adc_InitOneShotMode+0xc8>)
 8012552:	2200      	movs	r2, #0
 8012554:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8012556:	4b1d      	ldr	r3, [pc, #116]	; (80125cc <adc_InitOneShotMode+0xc8>)
 8012558:	2201      	movs	r2, #1
 801255a:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 801255c:	4b1b      	ldr	r3, [pc, #108]	; (80125cc <adc_InitOneShotMode+0xc8>)
 801255e:	2200      	movs	r2, #0
 8012560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012564:	4b19      	ldr	r3, [pc, #100]	; (80125cc <adc_InitOneShotMode+0xc8>)
 8012566:	2201      	movs	r2, #1
 8012568:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801256a:	4818      	ldr	r0, [pc, #96]	; (80125cc <adc_InitOneShotMode+0xc8>)
 801256c:	f7f1 fb68 	bl	8003c40 <HAL_ADC_Init>
 8012570:	4603      	mov	r3, r0
 8012572:	2b00      	cmp	r3, #0
 8012574:	d001      	beq.n	801257a <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 8012576:	f7f0 fdb1 	bl	80030dc <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 801257a:	2300      	movs	r3, #0
 801257c:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 801257e:	f107 0314 	add.w	r3, r7, #20
 8012582:	4619      	mov	r1, r3
 8012584:	4811      	ldr	r0, [pc, #68]	; (80125cc <adc_InitOneShotMode+0xc8>)
 8012586:	f7f1 ff6f 	bl	8004468 <HAL_ADCEx_MultiModeConfigChannel>
 801258a:	4603      	mov	r3, r0
 801258c:	2b00      	cmp	r3, #0
 801258e:	d001      	beq.n	8012594 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 8012590:	f7f0 fda4 	bl	80030dc <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 8012594:	1d3b      	adds	r3, r7, #4
 8012596:	2200      	movs	r2, #0
 8012598:	601a      	str	r2, [r3, #0]
 801259a:	605a      	str	r2, [r3, #4]
 801259c:	609a      	str	r2, [r3, #8]
 801259e:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 80125a0:	230a      	movs	r3, #10
 80125a2:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 80125a4:	2301      	movs	r3, #1
 80125a6:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80125a8:	2302      	movs	r3, #2
 80125aa:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 80125ac:	2300      	movs	r3, #0
 80125ae:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80125b0:	1d3b      	adds	r3, r7, #4
 80125b2:	4619      	mov	r1, r3
 80125b4:	4805      	ldr	r0, [pc, #20]	; (80125cc <adc_InitOneShotMode+0xc8>)
 80125b6:	f7f1 fd39 	bl	800402c <HAL_ADC_ConfigChannel>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 80125c0:	f7f0 fd8c 	bl	80030dc <Error_Handler>
		  }



}
 80125c4:	bf00      	nop
 80125c6:	3720      	adds	r7, #32
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	20001728 	.word	0x20001728
 80125d0:	40012000 	.word	0x40012000
 80125d4:	0f000001 	.word	0x0f000001

080125d8 <adc_Getval>:

static uint32_t adc_Getval ()
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 80125dc:	4802      	ldr	r0, [pc, #8]	; (80125e8 <adc_Getval+0x10>)
 80125de:	f7f1 fd17 	bl	8004010 <HAL_ADC_GetValue>
 80125e2:	4603      	mov	r3, r0

}
 80125e4:	4618      	mov	r0, r3
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	20001728 	.word	0x20001728
 80125ec:	00000000 	.word	0x00000000

080125f0 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 80125f8:	f7ff ff84 	bl	8012504 <adc_InitOneShotMode>
	HAL_Delay(1);
 80125fc:	2001      	movs	r0, #1
 80125fe:	f7f1 fab7 	bl	8003b70 <HAL_Delay>
	adc_Start();
 8012602:	4847      	ldr	r0, [pc, #284]	; (8012720 <adc_Measure+0x130>)
 8012604:	f7f1 fb92 	bl	8003d2c <HAL_ADC_Start>
	HAL_Delay(1);
 8012608:	2001      	movs	r0, #1
 801260a:	f7f1 fab1 	bl	8003b70 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801260e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012612:	4843      	ldr	r0, [pc, #268]	; (8012720 <adc_Measure+0x130>)
 8012614:	f7f1 fc71 	bl	8003efa <HAL_ADC_PollForConversion>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d01d      	beq.n	801265a <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 801261e:	2001      	movs	r0, #1
 8012620:	f7f1 faa6 	bl	8003b70 <HAL_Delay>
		   adc_Start();
 8012624:	483e      	ldr	r0, [pc, #248]	; (8012720 <adc_Measure+0x130>)
 8012626:	f7f1 fb81 	bl	8003d2c <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801262a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801262e:	483c      	ldr	r0, [pc, #240]	; (8012720 <adc_Measure+0x130>)
 8012630:	f7f1 fc63 	bl	8003efa <HAL_ADC_PollForConversion>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00f      	beq.n	801265a <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 801263a:	2001      	movs	r0, #1
 801263c:	f7f1 fa98 	bl	8003b70 <HAL_Delay>
				adc_Start();
 8012640:	4837      	ldr	r0, [pc, #220]	; (8012720 <adc_Measure+0x130>)
 8012642:	f7f1 fb73 	bl	8003d2c <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012646:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801264a:	4835      	ldr	r0, [pc, #212]	; (8012720 <adc_Measure+0x130>)
 801264c:	f7f1 fc55 	bl	8003efa <HAL_ADC_PollForConversion>
 8012650:	4603      	mov	r3, r0
 8012652:	2b00      	cmp	r3, #0
 8012654:	d001      	beq.n	801265a <adc_Measure+0x6a>
				{
					return 0;
 8012656:	2300      	movs	r3, #0
 8012658:	e05a      	b.n	8012710 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 801265a:	4831      	ldr	r0, [pc, #196]	; (8012720 <adc_Measure+0x130>)
 801265c:	f7f1 fc1a 	bl	8003e94 <HAL_ADC_Stop>

	val = adc_Getval();
 8012660:	f7ff ffba 	bl	80125d8 <adc_Getval>
 8012664:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 8012666:	2001      	movs	r0, #1
 8012668:	f7f1 fa82 	bl	8003b70 <HAL_Delay>
	adc_Start();
 801266c:	482c      	ldr	r0, [pc, #176]	; (8012720 <adc_Measure+0x130>)
 801266e:	f7f1 fb5d 	bl	8003d2c <HAL_ADC_Start>
	HAL_Delay(1);
 8012672:	2001      	movs	r0, #1
 8012674:	f7f1 fa7c 	bl	8003b70 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012678:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801267c:	4828      	ldr	r0, [pc, #160]	; (8012720 <adc_Measure+0x130>)
 801267e:	f7f1 fc3c 	bl	8003efa <HAL_ADC_PollForConversion>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	d01d      	beq.n	80126c4 <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8012688:	2001      	movs	r0, #1
 801268a:	f7f1 fa71 	bl	8003b70 <HAL_Delay>
		   adc_Start();
 801268e:	4824      	ldr	r0, [pc, #144]	; (8012720 <adc_Measure+0x130>)
 8012690:	f7f1 fb4c 	bl	8003d2c <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012694:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012698:	4821      	ldr	r0, [pc, #132]	; (8012720 <adc_Measure+0x130>)
 801269a:	f7f1 fc2e 	bl	8003efa <HAL_ADC_PollForConversion>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d00f      	beq.n	80126c4 <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 80126a4:	2001      	movs	r0, #1
 80126a6:	f7f1 fa63 	bl	8003b70 <HAL_Delay>
				adc_Start();
 80126aa:	481d      	ldr	r0, [pc, #116]	; (8012720 <adc_Measure+0x130>)
 80126ac:	f7f1 fb3e 	bl	8003d2c <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80126b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80126b4:	481a      	ldr	r0, [pc, #104]	; (8012720 <adc_Measure+0x130>)
 80126b6:	f7f1 fc20 	bl	8003efa <HAL_ADC_PollForConversion>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d001      	beq.n	80126c4 <adc_Measure+0xd4>
				{
					return 0;
 80126c0:	2300      	movs	r3, #0
 80126c2:	e025      	b.n	8012710 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 80126c4:	4816      	ldr	r0, [pc, #88]	; (8012720 <adc_Measure+0x130>)
 80126c6:	f7f1 fbe5 	bl	8003e94 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 80126ca:	f7ff ff85 	bl	80125d8 <adc_Getval>
 80126ce:	4602      	mov	r2, r0
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	4413      	add	r3, r2
 80126d4:	085b      	lsrs	r3, r3, #1
 80126d6:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	ee07 3a90 	vmov	s15, r3
 80126de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012724 <adc_Measure+0x134>
 80126e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126ea:	ee17 0a90 	vmov	r0, s15
 80126ee:	f7ed ff43 	bl	8000578 <__aeabi_f2d>
 80126f2:	a309      	add	r3, pc, #36	; (adr r3, 8012718 <adc_Measure+0x128>)
 80126f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f8:	f7ed ff96 	bl	8000628 <__aeabi_dmul>
 80126fc:	4602      	mov	r2, r0
 80126fe:	460b      	mov	r3, r1
 8012700:	4610      	mov	r0, r2
 8012702:	4619      	mov	r1, r3
 8012704:	f7ee fa88 	bl	8000c18 <__aeabi_d2f>
 8012708:	4602      	mov	r2, r0
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	601a      	str	r2, [r3, #0]


	return 1;
 801270e:	2301      	movs	r3, #1


}
 8012710:	4618      	mov	r0, r3
 8012712:	3710      	adds	r7, #16
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	851eb852 	.word	0x851eb852
 801271c:	3ff451eb 	.word	0x3ff451eb
 8012720:	20001728 	.word	0x20001728
 8012724:	3a533333 	.word	0x3a533333

08012728 <scd4x_start_periodic_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SCD4X_I2C_ADDRESS 0x62

int16_t scd4x_start_periodic_measurement() {
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 801272e:	2300      	movs	r3, #0
 8012730:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21B1);
 8012732:	88f9      	ldrh	r1, [r7, #6]
 8012734:	463b      	mov	r3, r7
 8012736:	f242 12b1 	movw	r2, #8625	; 0x21b1
 801273a:	4618      	mov	r0, r3
 801273c:	f000 fa8d 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 8012740:	4603      	mov	r3, r0
 8012742:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012744:	88fa      	ldrh	r2, [r7, #6]
 8012746:	463b      	mov	r3, r7
 8012748:	4619      	mov	r1, r3
 801274a:	2062      	movs	r0, #98	; 0x62
 801274c:	f000 fad8 	bl	8012d00 <sensirion_i2c_write_data>
 8012750:	4603      	mov	r3, r0
 8012752:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012754:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d002      	beq.n	8012762 <scd4x_start_periodic_measurement+0x3a>
        return error;
 801275c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012760:	e004      	b.n	801276c <scd4x_start_periodic_measurement+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8012762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012766:	f000 fbb9 	bl	8012edc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 801276a:	2300      	movs	r3, #0
}
 801276c:	4618      	mov	r0, r3
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <scd4x_read_measurement_ticks>:

int16_t scd4x_read_measurement_ticks(uint16_t* co2, uint16_t* temperature,
                                     uint16_t* humidity) {
 8012774:	b580      	push	{r7, lr}
 8012776:	b088      	sub	sp, #32
 8012778:	af00      	add	r7, sp, #0
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012780:	2300      	movs	r3, #0
 8012782:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xEC05);
 8012784:	8bf9      	ldrh	r1, [r7, #30]
 8012786:	f107 0310 	add.w	r3, r7, #16
 801278a:	f64e 4205 	movw	r2, #60421	; 0xec05
 801278e:	4618      	mov	r0, r3
 8012790:	f000 fa63 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 8012794:	4603      	mov	r3, r0
 8012796:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012798:	8bfa      	ldrh	r2, [r7, #30]
 801279a:	f107 0310 	add.w	r3, r7, #16
 801279e:	4619      	mov	r1, r3
 80127a0:	2062      	movs	r0, #98	; 0x62
 80127a2:	f000 faad 	bl	8012d00 <sensirion_i2c_write_data>
 80127a6:	4603      	mov	r3, r0
 80127a8:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80127aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d002      	beq.n	80127b8 <scd4x_read_measurement_ticks+0x44>
        return error;
 80127b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80127b6:	e031      	b.n	801281c <scd4x_read_measurement_ticks+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 80127b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80127bc:	f000 fb8e 	bl	8012edc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 80127c0:	f107 0310 	add.w	r3, r7, #16
 80127c4:	2206      	movs	r2, #6
 80127c6:	4619      	mov	r1, r3
 80127c8:	2062      	movs	r0, #98	; 0x62
 80127ca:	f000 faad 	bl	8012d28 <sensirion_i2c_read_data_inplace>
 80127ce:	4603      	mov	r3, r0
 80127d0:	83bb      	strh	r3, [r7, #28]
    if (error) {
 80127d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d002      	beq.n	80127e0 <scd4x_read_measurement_ticks+0x6c>
        return error;
 80127da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80127de:	e01d      	b.n	801281c <scd4x_read_measurement_ticks+0xa8>
    }
    *co2 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80127e0:	f107 0310 	add.w	r3, r7, #16
 80127e4:	4618      	mov	r0, r3
 80127e6:	f000 f9d2 	bl	8012b8e <sensirion_common_bytes_to_uint16_t>
 80127ea:	4603      	mov	r3, r0
 80127ec:	461a      	mov	r2, r3
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	801a      	strh	r2, [r3, #0]
    *temperature = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80127f2:	f107 0310 	add.w	r3, r7, #16
 80127f6:	3302      	adds	r3, #2
 80127f8:	4618      	mov	r0, r3
 80127fa:	f000 f9c8 	bl	8012b8e <sensirion_common_bytes_to_uint16_t>
 80127fe:	4603      	mov	r3, r0
 8012800:	461a      	mov	r2, r3
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	801a      	strh	r2, [r3, #0]
    *humidity = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8012806:	f107 0310 	add.w	r3, r7, #16
 801280a:	3304      	adds	r3, #4
 801280c:	4618      	mov	r0, r3
 801280e:	f000 f9be 	bl	8012b8e <sensirion_common_bytes_to_uint16_t>
 8012812:	4603      	mov	r3, r0
 8012814:	461a      	mov	r2, r3
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	3720      	adds	r7, #32
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <scd4x_read_measurement>:

int16_t scd4x_read_measurement(uint16_t* co2, int32_t* temperature_m_deg_c,
                               int32_t* humidity_m_percent_rh) {
 8012824:	b580      	push	{r7, lr}
 8012826:	b086      	sub	sp, #24
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint16_t temperature;
    uint16_t humidity;

    error = scd4x_read_measurement_ticks(co2, &temperature, &humidity);
 8012830:	f107 0212 	add.w	r2, r7, #18
 8012834:	f107 0314 	add.w	r3, r7, #20
 8012838:	4619      	mov	r1, r3
 801283a:	68f8      	ldr	r0, [r7, #12]
 801283c:	f7ff ff9a 	bl	8012774 <scd4x_read_measurement_ticks>
 8012840:	4603      	mov	r3, r0
 8012842:	82fb      	strh	r3, [r7, #22]
    if (error) {
 8012844:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d002      	beq.n	8012852 <scd4x_read_measurement+0x2e>
        return error;
 801284c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012850:	e015      	b.n	801287e <scd4x_read_measurement+0x5a>
    }
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
 8012852:	8abb      	ldrh	r3, [r7, #20]
 8012854:	461a      	mov	r2, r3
 8012856:	f245 5373 	movw	r3, #21875	; 0x5573
 801285a:	fb02 f303 	mul.w	r3, r2, r3
 801285e:	135b      	asrs	r3, r3, #13
 8012860:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8012864:	3bc8      	subs	r3, #200	; 0xc8
 8012866:	68ba      	ldr	r2, [r7, #8]
 8012868:	6013      	str	r3, [r2, #0]
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
 801286a:	8a7b      	ldrh	r3, [r7, #18]
 801286c:	461a      	mov	r2, r3
 801286e:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8012872:	fb02 f303 	mul.w	r3, r2, r3
 8012876:	135a      	asrs	r2, r3, #13
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 801287c:	2300      	movs	r3, #0
}
 801287e:	4618      	mov	r0, r3
 8012880:	3718      	adds	r7, #24
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
	...

08012888 <scd4x_stop_periodic_measurement>:

int16_t scd4x_stop_periodic_measurement() {
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 801288e:	2300      	movs	r3, #0
 8012890:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8012892:	88f9      	ldrh	r1, [r7, #6]
 8012894:	463b      	mov	r3, r7
 8012896:	f643 7286 	movw	r2, #16262	; 0x3f86
 801289a:	4618      	mov	r0, r3
 801289c:	f000 f9dd 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 80128a0:	4603      	mov	r3, r0
 80128a2:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 80128a4:	88fa      	ldrh	r2, [r7, #6]
 80128a6:	463b      	mov	r3, r7
 80128a8:	4619      	mov	r1, r3
 80128aa:	2062      	movs	r0, #98	; 0x62
 80128ac:	f000 fa28 	bl	8012d00 <sensirion_i2c_write_data>
 80128b0:	4603      	mov	r3, r0
 80128b2:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80128b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d002      	beq.n	80128c2 <scd4x_stop_periodic_measurement+0x3a>
        return error;
 80128bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80128c0:	e003      	b.n	80128ca <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 80128c2:	4804      	ldr	r0, [pc, #16]	; (80128d4 <scd4x_stop_periodic_measurement+0x4c>)
 80128c4:	f000 fb0a 	bl	8012edc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3708      	adds	r7, #8
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	0007a120 	.word	0x0007a120

080128d8 <scd4x_perform_forced_recalibration>:
    sensirion_i2c_hal_sleep_usec(1000);
    return NO_ERROR;
}

int16_t scd4x_perform_forced_recalibration(uint16_t target_co2_concentration,
                                           uint16_t* frc_correction) {
 80128d8:	b580      	push	{r7, lr}
 80128da:	b086      	sub	sp, #24
 80128dc:	af00      	add	r7, sp, #0
 80128de:	4603      	mov	r3, r0
 80128e0:	6039      	str	r1, [r7, #0]
 80128e2:	80fb      	strh	r3, [r7, #6]
    int16_t error;
    uint8_t buffer[5];
    uint16_t offset = 0;
 80128e4:	2300      	movs	r3, #0
 80128e6:	82fb      	strh	r3, [r7, #22]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x362F);
 80128e8:	8af9      	ldrh	r1, [r7, #22]
 80128ea:	f107 030c 	add.w	r3, r7, #12
 80128ee:	f243 622f 	movw	r2, #13871	; 0x362f
 80128f2:	4618      	mov	r0, r3
 80128f4:	f000 f9b1 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 80128f8:	4603      	mov	r3, r0
 80128fa:	82fb      	strh	r3, [r7, #22]

    offset = sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset,
 80128fc:	88fa      	ldrh	r2, [r7, #6]
 80128fe:	8af9      	ldrh	r1, [r7, #22]
 8012900:	f107 030c 	add.w	r3, r7, #12
 8012904:	4618      	mov	r0, r3
 8012906:	f000 f9cb 	bl	8012ca0 <sensirion_i2c_add_uint16_t_to_buffer>
 801290a:	4603      	mov	r3, r0
 801290c:	82fb      	strh	r3, [r7, #22]
                                                  target_co2_concentration);

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 801290e:	8afa      	ldrh	r2, [r7, #22]
 8012910:	f107 030c 	add.w	r3, r7, #12
 8012914:	4619      	mov	r1, r3
 8012916:	2062      	movs	r0, #98	; 0x62
 8012918:	f000 f9f2 	bl	8012d00 <sensirion_i2c_write_data>
 801291c:	4603      	mov	r3, r0
 801291e:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8012920:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d002      	beq.n	801292e <scd4x_perform_forced_recalibration+0x56>
        return error;
 8012928:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801292c:	e01c      	b.n	8012968 <scd4x_perform_forced_recalibration+0x90>
    }

    sensirion_i2c_hal_sleep_usec(400000);
 801292e:	4810      	ldr	r0, [pc, #64]	; (8012970 <scd4x_perform_forced_recalibration+0x98>)
 8012930:	f000 fad4 	bl	8012edc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 8012934:	f107 030c 	add.w	r3, r7, #12
 8012938:	2202      	movs	r2, #2
 801293a:	4619      	mov	r1, r3
 801293c:	2062      	movs	r0, #98	; 0x62
 801293e:	f000 f9f3 	bl	8012d28 <sensirion_i2c_read_data_inplace>
 8012942:	4603      	mov	r3, r0
 8012944:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8012946:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d002      	beq.n	8012954 <scd4x_perform_forced_recalibration+0x7c>
        return error;
 801294e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012952:	e009      	b.n	8012968 <scd4x_perform_forced_recalibration+0x90>
    }
    *frc_correction = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012954:	f107 030c 	add.w	r3, r7, #12
 8012958:	4618      	mov	r0, r3
 801295a:	f000 f918 	bl	8012b8e <sensirion_common_bytes_to_uint16_t>
 801295e:	4603      	mov	r3, r0
 8012960:	461a      	mov	r2, r3
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012966:	2300      	movs	r3, #0
}
 8012968:	4618      	mov	r0, r3
 801296a:	3718      	adds	r7, #24
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	00061a80 	.word	0x00061a80

08012974 <scd4x_get_data_ready_flag>:
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21AC);

    return sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
}

int16_t scd4x_get_data_ready_flag(bool* data_ready_flag) {
 8012974:	b580      	push	{r7, lr}
 8012976:	b086      	sub	sp, #24
 8012978:	af00      	add	r7, sp, #0
 801297a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 801297c:	2300      	movs	r3, #0
 801297e:	82fb      	strh	r3, [r7, #22]
    uint16_t local_data_ready = 0;
 8012980:	2300      	movs	r3, #0
 8012982:	82bb      	strh	r3, [r7, #20]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xE4B8);
 8012984:	8af9      	ldrh	r1, [r7, #22]
 8012986:	f107 030c 	add.w	r3, r7, #12
 801298a:	f24e 42b8 	movw	r2, #58552	; 0xe4b8
 801298e:	4618      	mov	r0, r3
 8012990:	f000 f963 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 8012994:	4603      	mov	r3, r0
 8012996:	82fb      	strh	r3, [r7, #22]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012998:	8afa      	ldrh	r2, [r7, #22]
 801299a:	f107 030c 	add.w	r3, r7, #12
 801299e:	4619      	mov	r1, r3
 80129a0:	2062      	movs	r0, #98	; 0x62
 80129a2:	f000 f9ad 	bl	8012d00 <sensirion_i2c_write_data>
 80129a6:	4603      	mov	r3, r0
 80129a8:	827b      	strh	r3, [r7, #18]
    if (error) {
 80129aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d002      	beq.n	80129b8 <scd4x_get_data_ready_flag+0x44>
        return error;
 80129b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129b6:	e025      	b.n	8012a04 <scd4x_get_data_ready_flag+0x90>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 80129b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80129bc:	f000 fa8e 	bl	8012edc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 80129c0:	f107 030c 	add.w	r3, r7, #12
 80129c4:	2202      	movs	r2, #2
 80129c6:	4619      	mov	r1, r3
 80129c8:	2062      	movs	r0, #98	; 0x62
 80129ca:	f000 f9ad 	bl	8012d28 <sensirion_i2c_read_data_inplace>
 80129ce:	4603      	mov	r3, r0
 80129d0:	827b      	strh	r3, [r7, #18]
    if (error) {
 80129d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d002      	beq.n	80129e0 <scd4x_get_data_ready_flag+0x6c>
        return error;
 80129da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80129de:	e011      	b.n	8012a04 <scd4x_get_data_ready_flag+0x90>
    }
    local_data_ready = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80129e0:	f107 030c 	add.w	r3, r7, #12
 80129e4:	4618      	mov	r0, r3
 80129e6:	f000 f8d2 	bl	8012b8e <sensirion_common_bytes_to_uint16_t>
 80129ea:	4603      	mov	r3, r0
 80129ec:	82bb      	strh	r3, [r7, #20]
    *data_ready_flag = (local_data_ready & 0x07FF) != 0;
 80129ee:	8abb      	ldrh	r3, [r7, #20]
 80129f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	bf14      	ite	ne
 80129f8:	2301      	movne	r3, #1
 80129fa:	2300      	moveq	r3, #0
 80129fc:	b2da      	uxtb	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8012a02:	2300      	movs	r3, #0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3718      	adds	r7, #24
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <scd4x_get_serial_number>:
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_get_serial_number(uint16_t* serial_0, uint16_t* serial_1,
                                uint16_t* serial_2) {
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b088      	sub	sp, #32
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	60b9      	str	r1, [r7, #8]
 8012a16:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3682);
 8012a1c:	8bf9      	ldrh	r1, [r7, #30]
 8012a1e:	f107 0310 	add.w	r3, r7, #16
 8012a22:	f243 6282 	movw	r2, #13954	; 0x3682
 8012a26:	4618      	mov	r0, r3
 8012a28:	f000 f917 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012a30:	8bfa      	ldrh	r2, [r7, #30]
 8012a32:	f107 0310 	add.w	r3, r7, #16
 8012a36:	4619      	mov	r1, r3
 8012a38:	2062      	movs	r0, #98	; 0x62
 8012a3a:	f000 f961 	bl	8012d00 <sensirion_i2c_write_data>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012a42:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d002      	beq.n	8012a50 <scd4x_get_serial_number+0x44>
        return error;
 8012a4a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012a4e:	e031      	b.n	8012ab4 <scd4x_get_serial_number+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012a54:	f000 fa42 	bl	8012edc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8012a58:	f107 0310 	add.w	r3, r7, #16
 8012a5c:	2206      	movs	r2, #6
 8012a5e:	4619      	mov	r1, r3
 8012a60:	2062      	movs	r0, #98	; 0x62
 8012a62:	f000 f961 	bl	8012d28 <sensirion_i2c_read_data_inplace>
 8012a66:	4603      	mov	r3, r0
 8012a68:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012a6a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d002      	beq.n	8012a78 <scd4x_get_serial_number+0x6c>
        return error;
 8012a72:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012a76:	e01d      	b.n	8012ab4 <scd4x_get_serial_number+0xa8>
    }
    *serial_0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012a78:	f107 0310 	add.w	r3, r7, #16
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f000 f886 	bl	8012b8e <sensirion_common_bytes_to_uint16_t>
 8012a82:	4603      	mov	r3, r0
 8012a84:	461a      	mov	r2, r3
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	801a      	strh	r2, [r3, #0]
    *serial_1 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8012a8a:	f107 0310 	add.w	r3, r7, #16
 8012a8e:	3302      	adds	r3, #2
 8012a90:	4618      	mov	r0, r3
 8012a92:	f000 f87c 	bl	8012b8e <sensirion_common_bytes_to_uint16_t>
 8012a96:	4603      	mov	r3, r0
 8012a98:	461a      	mov	r2, r3
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	801a      	strh	r2, [r3, #0]
    *serial_2 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8012a9e:	f107 0310 	add.w	r3, r7, #16
 8012aa2:	3304      	adds	r3, #4
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f000 f872 	bl	8012b8e <sensirion_common_bytes_to_uint16_t>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	461a      	mov	r2, r3
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012ab2:	2300      	movs	r3, #0
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3720      	adds	r7, #32
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}

08012abc <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8012ac6:	88f9      	ldrh	r1, [r7, #6]
 8012ac8:	463b      	mov	r3, r7
 8012aca:	f243 6246 	movw	r2, #13894	; 0x3646
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f000 f8c3 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012ad8:	88fa      	ldrh	r2, [r7, #6]
 8012ada:	463b      	mov	r3, r7
 8012adc:	4619      	mov	r1, r3
 8012ade:	2062      	movs	r0, #98	; 0x62
 8012ae0:	f000 f90e 	bl	8012d00 <sensirion_i2c_write_data>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012ae8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d002      	beq.n	8012af6 <scd4x_reinit+0x3a>
        return error;
 8012af0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012af4:	e004      	b.n	8012b00 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8012af6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012afa:	f000 f9ef 	bl	8012edc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012afe:	2300      	movs	r3, #0
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3708      	adds	r7, #8
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8012b12:	88f9      	ldrh	r1, [r7, #6]
 8012b14:	463b      	mov	r3, r7
 8012b16:	f243 62e0 	movw	r2, #14048	; 0x36e0
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f000 f89d 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 8012b20:	4603      	mov	r3, r0
 8012b22:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012b24:	88fa      	ldrh	r2, [r7, #6]
 8012b26:	463b      	mov	r3, r7
 8012b28:	4619      	mov	r1, r3
 8012b2a:	2062      	movs	r0, #98	; 0x62
 8012b2c:	f000 f8e8 	bl	8012d00 <sensirion_i2c_write_data>
 8012b30:	4603      	mov	r3, r0
 8012b32:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012b34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d002      	beq.n	8012b42 <scd4x_power_down+0x3a>
        return error;
 8012b3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012b40:	e004      	b.n	8012b4c <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8012b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012b46:	f000 f9c9 	bl	8012edc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012b4a:	2300      	movs	r3, #0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3708      	adds	r7, #8
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}

08012b54 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8012b5e:	88f9      	ldrh	r1, [r7, #6]
 8012b60:	1d3b      	adds	r3, r7, #4
 8012b62:	f243 62f6 	movw	r2, #14070	; 0x36f6
 8012b66:	4618      	mov	r0, r3
 8012b68:	f000 f877 	bl	8012c5a <sensirion_i2c_add_command_to_buffer>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012b70:	88fa      	ldrh	r2, [r7, #6]
 8012b72:	1d3b      	adds	r3, r7, #4
 8012b74:	4619      	mov	r1, r3
 8012b76:	2062      	movs	r0, #98	; 0x62
 8012b78:	f000 f8c2 	bl	8012d00 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8012b7c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012b80:	f000 f9ac 	bl	8012edc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012b84:	2300      	movs	r3, #0
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3708      	adds	r7, #8
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}

08012b8e <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8012b8e:	b480      	push	{r7}
 8012b90:	b083      	sub	sp, #12
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	021b      	lsls	r3, r3, #8
 8012b9c:	b21a      	sxth	r2, r3
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	b21b      	sxth	r3, r3
 8012ba6:	4313      	orrs	r3, r2
 8012ba8:	b21b      	sxth	r3, r3
 8012baa:	b29b      	uxth	r3, r3
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8012bb8:	b480      	push	{r7}
 8012bba:	b085      	sub	sp, #20
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8012bc4:	23ff      	movs	r3, #255	; 0xff
 8012bc6:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8012bc8:	2300      	movs	r3, #0
 8012bca:	81fb      	strh	r3, [r7, #14]
 8012bcc:	e021      	b.n	8012c12 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8012bce:	89fb      	ldrh	r3, [r7, #14]
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	4413      	add	r3, r2
 8012bd4:	781a      	ldrb	r2, [r3, #0]
 8012bd6:	7b7b      	ldrb	r3, [r7, #13]
 8012bd8:	4053      	eors	r3, r2
 8012bda:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8012bdc:	2308      	movs	r3, #8
 8012bde:	733b      	strb	r3, [r7, #12]
 8012be0:	e011      	b.n	8012c06 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8012be2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	da07      	bge.n	8012bfa <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8012bea:	7b7b      	ldrb	r3, [r7, #13]
 8012bec:	005b      	lsls	r3, r3, #1
 8012bee:	b25b      	sxtb	r3, r3
 8012bf0:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8012bf4:	b25b      	sxtb	r3, r3
 8012bf6:	737b      	strb	r3, [r7, #13]
 8012bf8:	e002      	b.n	8012c00 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8012bfa:	7b7b      	ldrb	r3, [r7, #13]
 8012bfc:	005b      	lsls	r3, r3, #1
 8012bfe:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8012c00:	7b3b      	ldrb	r3, [r7, #12]
 8012c02:	3b01      	subs	r3, #1
 8012c04:	733b      	strb	r3, [r7, #12]
 8012c06:	7b3b      	ldrb	r3, [r7, #12]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d1ea      	bne.n	8012be2 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8012c0c:	89fb      	ldrh	r3, [r7, #14]
 8012c0e:	3301      	adds	r3, #1
 8012c10:	81fb      	strh	r3, [r7, #14]
 8012c12:	89fa      	ldrh	r2, [r7, #14]
 8012c14:	887b      	ldrh	r3, [r7, #2]
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d3d9      	bcc.n	8012bce <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8012c1a:	7b7b      	ldrb	r3, [r7, #13]
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3714      	adds	r7, #20
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	460b      	mov	r3, r1
 8012c32:	807b      	strh	r3, [r7, #2]
 8012c34:	4613      	mov	r3, r2
 8012c36:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8012c38:	887b      	ldrh	r3, [r7, #2]
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ff ffbb 	bl	8012bb8 <sensirion_i2c_generate_crc>
 8012c42:	4603      	mov	r3, r0
 8012c44:	461a      	mov	r2, r3
 8012c46:	787b      	ldrb	r3, [r7, #1]
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d001      	beq.n	8012c50 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	e000      	b.n	8012c52 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8012c50:	2300      	movs	r3, #0
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8012c5a:	b480      	push	{r7}
 8012c5c:	b083      	sub	sp, #12
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
 8012c62:	460b      	mov	r3, r1
 8012c64:	807b      	strh	r3, [r7, #2]
 8012c66:	4613      	mov	r3, r2
 8012c68:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8012c6a:	883b      	ldrh	r3, [r7, #0]
 8012c6c:	0a1b      	lsrs	r3, r3, #8
 8012c6e:	b29a      	uxth	r2, r3
 8012c70:	887b      	ldrh	r3, [r7, #2]
 8012c72:	1c59      	adds	r1, r3, #1
 8012c74:	8079      	strh	r1, [r7, #2]
 8012c76:	4619      	mov	r1, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	440b      	add	r3, r1
 8012c7c:	b2d2      	uxtb	r2, r2
 8012c7e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8012c80:	887b      	ldrh	r3, [r7, #2]
 8012c82:	1c5a      	adds	r2, r3, #1
 8012c84:	807a      	strh	r2, [r7, #2]
 8012c86:	461a      	mov	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	4413      	add	r3, r2
 8012c8c:	883a      	ldrh	r2, [r7, #0]
 8012c8e:	b2d2      	uxtb	r2, r2
 8012c90:	701a      	strb	r2, [r3, #0]
    return offset;
 8012c92:	887b      	ldrh	r3, [r7, #2]
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr

08012ca0 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8012ca0:	b590      	push	{r4, r7, lr}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	460b      	mov	r3, r1
 8012caa:	807b      	strh	r3, [r7, #2]
 8012cac:	4613      	mov	r3, r2
 8012cae:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8012cb0:	883b      	ldrh	r3, [r7, #0]
 8012cb2:	0a1b      	lsrs	r3, r3, #8
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	887b      	ldrh	r3, [r7, #2]
 8012cb8:	1c59      	adds	r1, r3, #1
 8012cba:	8079      	strh	r1, [r7, #2]
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	440b      	add	r3, r1
 8012cc2:	b2d2      	uxtb	r2, r2
 8012cc4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8012cc6:	887b      	ldrh	r3, [r7, #2]
 8012cc8:	1c5a      	adds	r2, r3, #1
 8012cca:	807a      	strh	r2, [r7, #2]
 8012ccc:	461a      	mov	r2, r3
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4413      	add	r3, r2
 8012cd2:	883a      	ldrh	r2, [r7, #0]
 8012cd4:	b2d2      	uxtb	r2, r2
 8012cd6:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8012cd8:	887b      	ldrh	r3, [r7, #2]
 8012cda:	3b02      	subs	r3, #2
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8012ce0:	887b      	ldrh	r3, [r7, #2]
 8012ce2:	687a      	ldr	r2, [r7, #4]
 8012ce4:	18d4      	adds	r4, r2, r3
 8012ce6:	2102      	movs	r1, #2
 8012ce8:	f7ff ff66 	bl	8012bb8 <sensirion_i2c_generate_crc>
 8012cec:	4603      	mov	r3, r0
 8012cee:	7023      	strb	r3, [r4, #0]
    offset++;
 8012cf0:	887b      	ldrh	r3, [r7, #2]
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	807b      	strh	r3, [r7, #2]

    return offset;
 8012cf6:	887b      	ldrh	r3, [r7, #2]
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	370c      	adds	r7, #12
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd90      	pop	{r4, r7, pc}

08012d00 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	4603      	mov	r3, r0
 8012d08:	6039      	str	r1, [r7, #0]
 8012d0a:	71fb      	strb	r3, [r7, #7]
 8012d0c:	4613      	mov	r3, r2
 8012d0e:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8012d10:	88ba      	ldrh	r2, [r7, #4]
 8012d12:	79fb      	ldrb	r3, [r7, #7]
 8012d14:	6839      	ldr	r1, [r7, #0]
 8012d16:	4618      	mov	r0, r3
 8012d18:	f000 f8c4 	bl	8012ea4 <sensirion_i2c_hal_write>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	b21b      	sxth	r3, r3
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}

08012d28 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	4603      	mov	r3, r0
 8012d30:	6039      	str	r1, [r7, #0]
 8012d32:	71fb      	strb	r3, [r7, #7]
 8012d34:	4613      	mov	r3, r2
 8012d36:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8012d38:	88bb      	ldrh	r3, [r7, #4]
 8012d3a:	085b      	lsrs	r3, r3, #1
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	461a      	mov	r2, r3
 8012d40:	0052      	lsls	r2, r2, #1
 8012d42:	4413      	add	r3, r2
 8012d44:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8012d46:	88bb      	ldrh	r3, [r7, #4]
 8012d48:	f003 0301 	and.w	r3, r3, #1
 8012d4c:	b29b      	uxth	r3, r3
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d001      	beq.n	8012d56 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8012d52:	2304      	movs	r3, #4
 8012d54:	e047      	b.n	8012de6 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8012d56:	897a      	ldrh	r2, [r7, #10]
 8012d58:	79fb      	ldrb	r3, [r7, #7]
 8012d5a:	6839      	ldr	r1, [r7, #0]
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f000 f885 	bl	8012e6c <sensirion_i2c_hal_read>
 8012d62:	4603      	mov	r3, r0
 8012d64:	813b      	strh	r3, [r7, #8]
    if (error) {
 8012d66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d002      	beq.n	8012d74 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8012d6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012d72:	e038      	b.n	8012de6 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8012d74:	2300      	movs	r3, #0
 8012d76:	81fb      	strh	r3, [r7, #14]
 8012d78:	2300      	movs	r3, #0
 8012d7a:	81bb      	strh	r3, [r7, #12]
 8012d7c:	e02e      	b.n	8012ddc <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8012d7e:	89fb      	ldrh	r3, [r7, #14]
 8012d80:	683a      	ldr	r2, [r7, #0]
 8012d82:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8012d84:	89fb      	ldrh	r3, [r7, #14]
 8012d86:	3302      	adds	r3, #2
 8012d88:	683a      	ldr	r2, [r7, #0]
 8012d8a:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	461a      	mov	r2, r3
 8012d90:	2102      	movs	r1, #2
 8012d92:	f7ff ff49 	bl	8012c28 <sensirion_i2c_check_crc>
 8012d96:	4603      	mov	r3, r0
 8012d98:	813b      	strh	r3, [r7, #8]
        if (error) {
 8012d9a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d002      	beq.n	8012da8 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8012da2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012da6:	e01e      	b.n	8012de6 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8012da8:	89fb      	ldrh	r3, [r7, #14]
 8012daa:	683a      	ldr	r2, [r7, #0]
 8012dac:	441a      	add	r2, r3
 8012dae:	89bb      	ldrh	r3, [r7, #12]
 8012db0:	1c59      	adds	r1, r3, #1
 8012db2:	81b9      	strh	r1, [r7, #12]
 8012db4:	4619      	mov	r1, r3
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	440b      	add	r3, r1
 8012dba:	7812      	ldrb	r2, [r2, #0]
 8012dbc:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8012dbe:	89fb      	ldrh	r3, [r7, #14]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	683a      	ldr	r2, [r7, #0]
 8012dc4:	441a      	add	r2, r3
 8012dc6:	89bb      	ldrh	r3, [r7, #12]
 8012dc8:	1c59      	adds	r1, r3, #1
 8012dca:	81b9      	strh	r1, [r7, #12]
 8012dcc:	4619      	mov	r1, r3
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	440b      	add	r3, r1
 8012dd2:	7812      	ldrb	r2, [r2, #0]
 8012dd4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8012dd6:	89fb      	ldrh	r3, [r7, #14]
 8012dd8:	3303      	adds	r3, #3
 8012dda:	81fb      	strh	r3, [r7, #14]
 8012ddc:	89fa      	ldrh	r2, [r7, #14]
 8012dde:	897b      	ldrh	r3, [r7, #10]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d3cc      	bcc.n	8012d7e <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8012de4:	2300      	movs	r3, #0
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3710      	adds	r7, #16
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
	...

08012df0 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8012df0:	b580      	push	{r7, lr}
 8012df2:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8012df4:	4814      	ldr	r0, [pc, #80]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012df6:	f7f3 f809 	bl	8005e0c <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8012dfa:	4b13      	ldr	r3, [pc, #76]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012dfc:	4a13      	ldr	r2, [pc, #76]	; (8012e4c <sensirion_i2c_hal_init+0x5c>)
 8012dfe:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8012e00:	4b11      	ldr	r3, [pc, #68]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e02:	4a13      	ldr	r2, [pc, #76]	; (8012e50 <sensirion_i2c_hal_init+0x60>)
 8012e04:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012e06:	4b10      	ldr	r3, [pc, #64]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e08:	2200      	movs	r2, #0
 8012e0a:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8012e0c:	4b0e      	ldr	r3, [pc, #56]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e0e:	2200      	movs	r2, #0
 8012e10:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012e12:	4b0d      	ldr	r3, [pc, #52]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012e18:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012e1a:	4b0b      	ldr	r3, [pc, #44]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8012e20:	4b09      	ldr	r3, [pc, #36]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e22:	2200      	movs	r2, #0
 8012e24:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012e26:	4b08      	ldr	r3, [pc, #32]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e28:	2200      	movs	r2, #0
 8012e2a:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012e2c:	4b06      	ldr	r3, [pc, #24]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e2e:	2200      	movs	r2, #0
 8012e30:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012e32:	4805      	ldr	r0, [pc, #20]	; (8012e48 <sensirion_i2c_hal_init+0x58>)
 8012e34:	f7f2 fea6 	bl	8005b84 <HAL_I2C_Init>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d001      	beq.n	8012e42 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8012e3e:	f7f0 f94d 	bl	80030dc <Error_Handler>
	  }
}
 8012e42:	bf00      	nop
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	20001770 	.word	0x20001770
 8012e4c:	40005400 	.word	0x40005400
 8012e50:	00061a80 	.word	0x00061a80

08012e54 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8012e54:	b580      	push	{r7, lr}
 8012e56:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8012e58:	4803      	ldr	r0, [pc, #12]	; (8012e68 <sensirion_i2c_hal_free+0x14>)
 8012e5a:	f7f2 ffd7 	bl	8005e0c <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8012e5e:	4802      	ldr	r0, [pc, #8]	; (8012e68 <sensirion_i2c_hal_free+0x14>)
 8012e60:	f7f0 fa14 	bl	800328c <HAL_I2C_MspDeInit>
}
 8012e64:	bf00      	nop
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	20001770 	.word	0x20001770

08012e6c <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af02      	add	r7, sp, #8
 8012e72:	4603      	mov	r3, r0
 8012e74:	6039      	str	r1, [r7, #0]
 8012e76:	71fb      	strb	r3, [r7, #7]
 8012e78:	4613      	mov	r3, r2
 8012e7a:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8012e7c:	79fb      	ldrb	r3, [r7, #7]
 8012e7e:	b29b      	uxth	r3, r3
 8012e80:	005b      	lsls	r3, r3, #1
 8012e82:	b299      	uxth	r1, r3
 8012e84:	88bb      	ldrh	r3, [r7, #4]
 8012e86:	f04f 32ff 	mov.w	r2, #4294967295
 8012e8a:	9200      	str	r2, [sp, #0]
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	4804      	ldr	r0, [pc, #16]	; (8012ea0 <sensirion_i2c_hal_read+0x34>)
 8012e90:	f7f3 f8ea 	bl	8006068 <HAL_I2C_Master_Receive>
 8012e94:	4603      	mov	r3, r0
 8012e96:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3708      	adds	r7, #8
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	20001770 	.word	0x20001770

08012ea4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af02      	add	r7, sp, #8
 8012eaa:	4603      	mov	r3, r0
 8012eac:	6039      	str	r1, [r7, #0]
 8012eae:	71fb      	strb	r3, [r7, #7]
 8012eb0:	4613      	mov	r3, r2
 8012eb2:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8012eb4:	79fb      	ldrb	r3, [r7, #7]
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	005b      	lsls	r3, r3, #1
 8012eba:	b299      	uxth	r1, r3
 8012ebc:	88bb      	ldrh	r3, [r7, #4]
 8012ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8012ec2:	9200      	str	r2, [sp, #0]
 8012ec4:	683a      	ldr	r2, [r7, #0]
 8012ec6:	4804      	ldr	r0, [pc, #16]	; (8012ed8 <sensirion_i2c_hal_write+0x34>)
 8012ec8:	f7f2 ffd0 	bl	8005e6c <HAL_I2C_Master_Transmit>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3708      	adds	r7, #8
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	20001770 	.word	0x20001770

08012edc <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */

	HAL_Delay(useconds/1000);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	4a05      	ldr	r2, [pc, #20]	; (8012efc <sensirion_i2c_hal_sleep_usec+0x20>)
 8012ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8012eec:	099b      	lsrs	r3, r3, #6
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7f0 fe3e 	bl	8003b70 <HAL_Delay>
}
 8012ef4:	bf00      	nop
 8012ef6:	3708      	adds	r7, #8
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	10624dd3 	.word	0x10624dd3

08012f00 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8012f00:	b480      	push	{r7}
 8012f02:	b083      	sub	sp, #12
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	061a      	lsls	r2, r3, #24
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	3301      	adds	r3, #1
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	041b      	lsls	r3, r3, #16
 8012f16:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	3302      	adds	r3, #2
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8012f20:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	3203      	adds	r2, #3
 8012f26:	7812      	ldrb	r2, [r2, #0]
 8012f28:	4313      	orrs	r3, r2
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	370c      	adds	r7, #12
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr

08012f36 <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8012f36:	b580      	push	{r7, lr}
 8012f38:	b084      	sub	sp, #16
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7ff ffde 	bl	8012f00 <sensirion_bytes_to_uint32_t>
 8012f44:	4603      	mov	r3, r0
 8012f46:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	ee07 3a90 	vmov	s15, r3
}
 8012f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8012f52:	3710      	adds	r7, #16
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	4603      	mov	r3, r0
 8012f60:	603a      	str	r2, [r7, #0]
 8012f62:	71fb      	strb	r3, [r7, #7]
 8012f64:	460b      	mov	r3, r1
 8012f66:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 8012f68:	79fa      	ldrb	r2, [r7, #7]
 8012f6a:	79bb      	ldrb	r3, [r7, #6]
 8012f6c:	4413      	add	r3, r2
 8012f6e:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8012f70:	e006      	b.n	8012f80 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	1c5a      	adds	r2, r3, #1
 8012f76:	603a      	str	r2, [r7, #0]
 8012f78:	781a      	ldrb	r2, [r3, #0]
 8012f7a:	79fb      	ldrb	r3, [r7, #7]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8012f80:	79bb      	ldrb	r3, [r7, #6]
 8012f82:	1e5a      	subs	r2, r3, #1
 8012f84:	71ba      	strb	r2, [r7, #6]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d1f3      	bne.n	8012f72 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 8012f8a:	79fb      	ldrb	r3, [r7, #7]
 8012f8c:	43db      	mvns	r3, r3
 8012f8e:	b2db      	uxtb	r3, r3
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	370c      	adds	r7, #12
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr

08012f9c <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8012f9c:	b480      	push	{r7}
 8012f9e:	b087      	sub	sp, #28
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	607a      	str	r2, [r7, #4]
 8012fa8:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 8012faa:	2300      	movs	r3, #0
 8012fac:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 8012fae:	e026      	b.n	8012ffe <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	1c5a      	adds	r2, r3, #1
 8012fb4:	60ba      	str	r2, [r7, #8]
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	757b      	strb	r3, [r7, #21]
        switch (c) {
 8012fba:	7d7b      	ldrb	r3, [r7, #21]
 8012fbc:	2b7e      	cmp	r3, #126	; 0x7e
 8012fbe:	dc16      	bgt.n	8012fee <sensirion_shdlc_stuff_data+0x52>
 8012fc0:	2b7d      	cmp	r3, #125	; 0x7d
 8012fc2:	da03      	bge.n	8012fcc <sensirion_shdlc_stuff_data+0x30>
 8012fc4:	2b11      	cmp	r3, #17
 8012fc6:	d001      	beq.n	8012fcc <sensirion_shdlc_stuff_data+0x30>
 8012fc8:	2b13      	cmp	r3, #19
 8012fca:	d110      	bne.n	8012fee <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	1c5a      	adds	r2, r3, #1
 8012fd0:	607a      	str	r2, [r7, #4]
 8012fd2:	227d      	movs	r2, #125	; 0x7d
 8012fd4:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	1c5a      	adds	r2, r3, #1
 8012fda:	607a      	str	r2, [r7, #4]
 8012fdc:	7d7a      	ldrb	r2, [r7, #21]
 8012fde:	f082 0220 	eor.w	r2, r2, #32
 8012fe2:	b2d2      	uxtb	r2, r2
 8012fe4:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 8012fe6:	8afb      	ldrh	r3, [r7, #22]
 8012fe8:	3302      	adds	r3, #2
 8012fea:	82fb      	strh	r3, [r7, #22]
                break;
 8012fec:	e007      	b.n	8012ffe <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	1c5a      	adds	r2, r3, #1
 8012ff2:	607a      	str	r2, [r7, #4]
 8012ff4:	7d7a      	ldrb	r2, [r7, #21]
 8012ff6:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 8012ff8:	8afb      	ldrh	r3, [r7, #22]
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 8012ffe:	7bfb      	ldrb	r3, [r7, #15]
 8013000:	1e5a      	subs	r2, r3, #1
 8013002:	73fa      	strb	r2, [r7, #15]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d1d3      	bne.n	8012fb0 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8013008:	8afb      	ldrh	r3, [r7, #22]
}
 801300a:	4618      	mov	r0, r3
 801300c:	371c      	adds	r7, #28
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr

08013016 <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8013016:	b480      	push	{r7}
 8013018:	b083      	sub	sp, #12
 801301a:	af00      	add	r7, sp, #0
 801301c:	4603      	mov	r3, r0
 801301e:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8013020:	79fb      	ldrb	r3, [r7, #7]
 8013022:	2b7d      	cmp	r3, #125	; 0x7d
 8013024:	bf0c      	ite	eq
 8013026:	2301      	moveq	r3, #1
 8013028:	2300      	movne	r3, #0
 801302a:	b2db      	uxtb	r3, r3
}
 801302c:	4618      	mov	r0, r3
 801302e:	370c      	adds	r7, #12
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8013038:	b480      	push	{r7}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
 801303e:	4603      	mov	r3, r0
 8013040:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8013042:	79fb      	ldrb	r3, [r7, #7]
 8013044:	2b5e      	cmp	r3, #94	; 0x5e
 8013046:	d010      	beq.n	801306a <sensirion_shdlc_unstuff_byte+0x32>
 8013048:	2b5e      	cmp	r3, #94	; 0x5e
 801304a:	dc10      	bgt.n	801306e <sensirion_shdlc_unstuff_byte+0x36>
 801304c:	2b5d      	cmp	r3, #93	; 0x5d
 801304e:	d00a      	beq.n	8013066 <sensirion_shdlc_unstuff_byte+0x2e>
 8013050:	2b5d      	cmp	r3, #93	; 0x5d
 8013052:	dc0c      	bgt.n	801306e <sensirion_shdlc_unstuff_byte+0x36>
 8013054:	2b31      	cmp	r3, #49	; 0x31
 8013056:	d002      	beq.n	801305e <sensirion_shdlc_unstuff_byte+0x26>
 8013058:	2b33      	cmp	r3, #51	; 0x33
 801305a:	d002      	beq.n	8013062 <sensirion_shdlc_unstuff_byte+0x2a>
 801305c:	e007      	b.n	801306e <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 801305e:	2311      	movs	r3, #17
 8013060:	e006      	b.n	8013070 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 8013062:	2313      	movs	r3, #19
 8013064:	e004      	b.n	8013070 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 8013066:	237d      	movs	r3, #125	; 0x7d
 8013068:	e002      	b.n	8013070 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 801306a:	237e      	movs	r3, #126	; 0x7e
 801306c:	e000      	b.n	8013070 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 801306e:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8013070:	4618      	mov	r0, r3
 8013072:	370c      	adds	r7, #12
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	603b      	str	r3, [r7, #0]
 8013084:	4603      	mov	r3, r0
 8013086:	71fb      	strb	r3, [r7, #7]
 8013088:	460b      	mov	r3, r1
 801308a:	71bb      	strb	r3, [r7, #6]
 801308c:	4613      	mov	r3, r2
 801308e:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8013090:	797a      	ldrb	r2, [r7, #5]
 8013092:	79b9      	ldrb	r1, [r7, #6]
 8013094:	79f8      	ldrb	r0, [r7, #7]
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	f000 f818 	bl	80130cc <sensirion_shdlc_tx>
 801309c:	4603      	mov	r3, r0
 801309e:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 80130a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d002      	beq.n	80130ae <sensirion_shdlc_xcv+0x32>
        return ret;
 80130a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80130ac:	e00a      	b.n	80130c4 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 80130ae:	f644 6020 	movw	r0, #20000	; 0x4e20
 80130b2:	f000 fb07 	bl	80136c4 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 80130b6:	7e3b      	ldrb	r3, [r7, #24]
 80130b8:	6a3a      	ldr	r2, [r7, #32]
 80130ba:	69f9      	ldr	r1, [r7, #28]
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 f8d7 	bl	8013270 <sensirion_shdlc_rx>
 80130c2:	4603      	mov	r3, r0
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3710      	adds	r7, #16
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 80130cc:	b590      	push	{r4, r7, lr}
 80130ce:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80130d2:	af00      	add	r7, sp, #0
 80130d4:	4604      	mov	r4, r0
 80130d6:	4608      	mov	r0, r1
 80130d8:	4611      	mov	r1, r2
 80130da:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80130de:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80130e2:	6013      	str	r3, [r2, #0]
 80130e4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80130e8:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 80130ec:	4622      	mov	r2, r4
 80130ee:	701a      	strb	r2, [r3, #0]
 80130f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80130f4:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 80130f8:	4602      	mov	r2, r0
 80130fa:	701a      	strb	r2, [r3, #0]
 80130fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013100:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8013104:	460a      	mov	r2, r1
 8013106:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8013108:	2300      	movs	r3, #0
 801310a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 801310e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013112:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8013116:	781a      	ldrb	r2, [r3, #0]
 8013118:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801311c:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	4413      	add	r3, r2
 8013124:	b2d8      	uxtb	r0, r3
 8013126:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801312a:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 801312e:	7819      	ldrb	r1, [r3, #0]
 8013130:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013134:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	f7ff ff0d 	bl	8012f58 <sensirion_shdlc_crc>
 801313e:	4603      	mov	r3, r0
 8013140:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8013144:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013148:	1c5a      	adds	r2, r3, #1
 801314a:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 801314e:	461a      	mov	r2, r3
 8013150:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013154:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8013158:	217e      	movs	r1, #126	; 0x7e
 801315a:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 801315c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013160:	f107 0208 	add.w	r2, r7, #8
 8013164:	441a      	add	r2, r3
 8013166:	1dfb      	adds	r3, r7, #7
 8013168:	4619      	mov	r1, r3
 801316a:	2001      	movs	r0, #1
 801316c:	f7ff ff16 	bl	8012f9c <sensirion_shdlc_stuff_data>
 8013170:	4603      	mov	r3, r0
 8013172:	461a      	mov	r2, r3
 8013174:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013178:	4413      	add	r3, r2
 801317a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 801317e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013182:	f107 0208 	add.w	r2, r7, #8
 8013186:	441a      	add	r2, r3
 8013188:	1dbb      	adds	r3, r7, #6
 801318a:	4619      	mov	r1, r3
 801318c:	2001      	movs	r0, #1
 801318e:	f7ff ff05 	bl	8012f9c <sensirion_shdlc_stuff_data>
 8013192:	4603      	mov	r3, r0
 8013194:	461a      	mov	r2, r3
 8013196:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801319a:	4413      	add	r3, r2
 801319c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 80131a0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80131a4:	f107 0208 	add.w	r2, r7, #8
 80131a8:	441a      	add	r2, r3
 80131aa:	1d7b      	adds	r3, r7, #5
 80131ac:	4619      	mov	r1, r3
 80131ae:	2001      	movs	r0, #1
 80131b0:	f7ff fef4 	bl	8012f9c <sensirion_shdlc_stuff_data>
 80131b4:	4603      	mov	r3, r0
 80131b6:	461a      	mov	r2, r3
 80131b8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80131bc:	4413      	add	r3, r2
 80131be:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 80131c2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80131c6:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 80131ca:	7818      	ldrb	r0, [r3, #0]
 80131cc:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80131d0:	f107 0208 	add.w	r2, r7, #8
 80131d4:	441a      	add	r2, r3
 80131d6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80131da:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80131de:	6819      	ldr	r1, [r3, #0]
 80131e0:	f7ff fedc 	bl	8012f9c <sensirion_shdlc_stuff_data>
 80131e4:	4603      	mov	r3, r0
 80131e6:	461a      	mov	r2, r3
 80131e8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80131ec:	4413      	add	r3, r2
 80131ee:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 80131f2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80131f6:	f107 0208 	add.w	r2, r7, #8
 80131fa:	441a      	add	r2, r3
 80131fc:	f207 2313 	addw	r3, r7, #531	; 0x213
 8013200:	4619      	mov	r1, r3
 8013202:	2001      	movs	r0, #1
 8013204:	f7ff feca 	bl	8012f9c <sensirion_shdlc_stuff_data>
 8013208:	4603      	mov	r3, r0
 801320a:	461a      	mov	r2, r3
 801320c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013210:	4413      	add	r3, r2
 8013212:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8013216:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801321a:	1c5a      	adds	r2, r3, #1
 801321c:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8013220:	461a      	mov	r2, r3
 8013222:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013226:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801322a:	217e      	movs	r1, #126	; 0x7e
 801322c:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 801322e:	f107 0208 	add.w	r2, r7, #8
 8013232:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013236:	4611      	mov	r1, r2
 8013238:	4618      	mov	r0, r3
 801323a:	f000 f9db 	bl	80135f4 <sensirion_uart_tx>
 801323e:	4603      	mov	r3, r0
 8013240:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    if (ret < 0)
 8013244:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8013248:	2b00      	cmp	r3, #0
 801324a:	da02      	bge.n	8013252 <sensirion_shdlc_tx+0x186>
        return ret;
 801324c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8013250:	e009      	b.n	8013266 <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8013252:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	; 0x214
 8013256:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801325a:	429a      	cmp	r2, r3
 801325c:	d002      	beq.n	8013264 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 801325e:	f06f 0305 	mvn.w	r3, #5
 8013262:	e000      	b.n	8013266 <sensirion_shdlc_tx+0x19a>
    return 0;
 8013264:	2300      	movs	r3, #0
}
 8013266:	4618      	mov	r0, r3
 8013268:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 801326c:	46bd      	mov	sp, r7
 801326e:	bd90      	pop	{r4, r7, pc}

08013270 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8013270:	b590      	push	{r4, r7, lr}
 8013272:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8013276:	af00      	add	r7, sp, #0
 8013278:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801327c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013280:	6019      	str	r1, [r3, #0]
 8013282:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013286:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 801328a:	601a      	str	r2, [r3, #0]
 801328c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013290:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8013294:	4602      	mov	r2, r0
 8013296:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 8013298:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801329c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 80132a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80132aa:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	3306      	adds	r3, #6
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	005b      	lsls	r3, r3, #1
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	f107 0210 	add.w	r2, r7, #16
 80132bc:	4611      	mov	r1, r2
 80132be:	4618      	mov	r0, r3
 80132c0:	f000 f9d2 	bl	8013668 <sensirion_uart_rx>
 80132c4:	4603      	mov	r3, r0
 80132c6:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 80132ca:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	dd03      	ble.n	80132da <sensirion_shdlc_rx+0x6a>
 80132d2:	4ba0      	ldr	r3, [pc, #640]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 80132d4:	781b      	ldrb	r3, [r3, #0]
 80132d6:	2b7e      	cmp	r3, #126	; 0x7e
 80132d8:	d002      	beq.n	80132e0 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 80132da:	f06f 0301 	mvn.w	r3, #1
 80132de:	e133      	b.n	8013548 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 80132e0:	2300      	movs	r3, #0
 80132e2:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 80132e6:	2301      	movs	r3, #1
 80132e8:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 80132ec:	2300      	movs	r3, #0
 80132ee:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 80132f2:	e03a      	b.n	801336a <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 80132f4:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d015      	beq.n	8013328 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80132fc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013300:	4a94      	ldr	r2, [pc, #592]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 8013302:	5cd2      	ldrb	r2, [r2, r3]
 8013304:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013308:	1c59      	adds	r1, r3, #1
 801330a:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 801330e:	4619      	mov	r1, r3
 8013310:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013314:	185c      	adds	r4, r3, r1
 8013316:	4610      	mov	r0, r2
 8013318:	f7ff fe8e 	bl	8013038 <sensirion_shdlc_unstuff_byte>
 801331c:	4603      	mov	r3, r0
 801331e:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013320:	2300      	movs	r3, #0
 8013322:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8013326:	e01b      	b.n	8013360 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013328:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 801332c:	4a89      	ldr	r2, [pc, #548]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 801332e:	5cd3      	ldrb	r3, [r2, r3]
 8013330:	4618      	mov	r0, r3
 8013332:	f7ff fe70 	bl	8013016 <sensirion_shdlc_check_unstuff>
 8013336:	4603      	mov	r3, r0
 8013338:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 801333c:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013340:	2b00      	cmp	r3, #0
 8013342:	d10d      	bne.n	8013360 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8013344:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8013348:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 801334c:	1c59      	adds	r1, r3, #1
 801334e:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8013352:	4619      	mov	r1, r3
 8013354:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013358:	440b      	add	r3, r1
 801335a:	497e      	ldr	r1, [pc, #504]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 801335c:	5c8a      	ldrb	r2, [r1, r2]
 801335e:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013360:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013364:	3301      	adds	r3, #1
 8013366:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 801336a:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 801336e:	2b03      	cmp	r3, #3
 8013370:	d806      	bhi.n	8013380 <sensirion_shdlc_rx+0x110>
 8013372:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8013376:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 801337a:	3b02      	subs	r3, #2
 801337c:	429a      	cmp	r2, r3
 801337e:	dbb9      	blt.n	80132f4 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8013380:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013384:	2b04      	cmp	r3, #4
 8013386:	d103      	bne.n	8013390 <sensirion_shdlc_rx+0x120>
 8013388:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 801338c:	2b00      	cmp	r3, #0
 801338e:	d002      	beq.n	8013396 <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013390:	f06f 0304 	mvn.w	r3, #4
 8013394:	e0d8      	b.n	8013548 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 8013396:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801339a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	78db      	ldrb	r3, [r3, #3]
 80133a2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80133a6:	f2a2 2219 	subw	r2, r2, #537	; 0x219
 80133aa:	7812      	ldrb	r2, [r2, #0]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d202      	bcs.n	80133b6 <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 80133b0:	f06f 0306 	mvn.w	r3, #6
 80133b4:	e0c8      	b.n	8013548 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80133b6:	2300      	movs	r3, #0
 80133b8:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 80133bc:	2300      	movs	r3, #0
 80133be:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 80133c2:	e040      	b.n	8013446 <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 80133c4:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d018      	beq.n	80133fe <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 80133cc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80133d0:	4a60      	ldr	r2, [pc, #384]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 80133d2:	5cd2      	ldrb	r2, [r2, r3]
 80133d4:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80133d8:	1c59      	adds	r1, r3, #1
 80133da:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 80133de:	4619      	mov	r1, r3
 80133e0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80133e4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	185c      	adds	r4, r3, r1
 80133ec:	4610      	mov	r0, r2
 80133ee:	f7ff fe23 	bl	8013038 <sensirion_shdlc_unstuff_byte>
 80133f2:	4603      	mov	r3, r0
 80133f4:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 80133f6:	2300      	movs	r3, #0
 80133f8:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 80133fc:	e01e      	b.n	801343c <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 80133fe:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013402:	4a54      	ldr	r2, [pc, #336]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 8013404:	5cd3      	ldrb	r3, [r2, r3]
 8013406:	4618      	mov	r0, r3
 8013408:	f7ff fe05 	bl	8013016 <sensirion_shdlc_check_unstuff>
 801340c:	4603      	mov	r3, r0
 801340e:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8013412:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013416:	2b00      	cmp	r3, #0
 8013418:	d110      	bne.n	801343c <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 801341a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 801341e:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013422:	1c59      	adds	r1, r3, #1
 8013424:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8013428:	4619      	mov	r1, r3
 801342a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801342e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	440b      	add	r3, r1
 8013436:	4947      	ldr	r1, [pc, #284]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 8013438:	5c8a      	ldrb	r2, [r1, r2]
 801343a:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 801343c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013440:	3301      	adds	r3, #1
 8013442:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8013446:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801344a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	78db      	ldrb	r3, [r3, #3]
 8013452:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8013456:	429a      	cmp	r2, r3
 8013458:	d206      	bcs.n	8013468 <sensirion_shdlc_rx+0x1f8>
 801345a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 801345e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8013462:	3b02      	subs	r3, #2
 8013464:	429a      	cmp	r2, r3
 8013466:	dbad      	blt.n	80133c4 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 8013468:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 801346c:	2b00      	cmp	r3, #0
 801346e:	d002      	beq.n	8013476 <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8013470:	f06f 0304 	mvn.w	r3, #4
 8013474:	e068      	b.n	8013548 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 8013476:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801347a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	78db      	ldrb	r3, [r3, #3]
 8013482:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8013486:	429a      	cmp	r2, r3
 8013488:	d202      	bcs.n	8013490 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 801348a:	f06f 0304 	mvn.w	r3, #4
 801348e:	e05b      	b.n	8013548 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8013490:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013494:	1c5a      	adds	r2, r3, #1
 8013496:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 801349a:	461a      	mov	r2, r3
 801349c:	4b2d      	ldr	r3, [pc, #180]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 801349e:	5c9b      	ldrb	r3, [r3, r2]
 80134a0:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 80134a4:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7ff fdb4 	bl	8013016 <sensirion_shdlc_check_unstuff>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d00d      	beq.n	80134d0 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 80134b4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80134b8:	1c5a      	adds	r2, r3, #1
 80134ba:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 80134be:	461a      	mov	r2, r3
 80134c0:	4b24      	ldr	r3, [pc, #144]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 80134c2:	5c9b      	ldrb	r3, [r3, r2]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7ff fdb7 	bl	8013038 <sensirion_shdlc_unstuff_byte>
 80134ca:	4603      	mov	r3, r0
 80134cc:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 80134d0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80134d4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	781a      	ldrb	r2, [r3, #0]
 80134dc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80134e0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	785b      	ldrb	r3, [r3, #1]
 80134e8:	4413      	add	r3, r2
 80134ea:	b2da      	uxtb	r2, r3
 80134ec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80134f0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	789b      	ldrb	r3, [r3, #2]
 80134f8:	4413      	add	r3, r2
 80134fa:	b2d8      	uxtb	r0, r3
 80134fc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013500:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	78d9      	ldrb	r1, [r3, #3]
 8013508:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801350c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013510:	681a      	ldr	r2, [r3, #0]
 8013512:	f7ff fd21 	bl	8012f58 <sensirion_shdlc_crc>
 8013516:	4603      	mov	r3, r0
 8013518:	461a      	mov	r2, r3
 801351a:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 801351e:	4293      	cmp	r3, r2
 8013520:	d002      	beq.n	8013528 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 8013522:	f06f 0303 	mvn.w	r3, #3
 8013526:	e00f      	b.n	8013548 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8013528:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 801352c:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8013530:	429a      	cmp	r2, r3
 8013532:	da05      	bge.n	8013540 <sensirion_shdlc_rx+0x2d0>
 8013534:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013538:	4a06      	ldr	r2, [pc, #24]	; (8013554 <sensirion_shdlc_rx+0x2e4>)
 801353a:	5cd3      	ldrb	r3, [r2, r3]
 801353c:	2b7e      	cmp	r3, #126	; 0x7e
 801353e:	d002      	beq.n	8013546 <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8013540:	f06f 0302 	mvn.w	r3, #2
 8013544:	e000      	b.n	8013548 <sensirion_shdlc_rx+0x2d8>

    return 0;
 8013546:	2300      	movs	r3, #0
}
 8013548:	4618      	mov	r0, r3
 801354a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 801354e:	46bd      	mov	sp, r7
 8013550:	bd90      	pop	{r4, r7, pc}
 8013552:	bf00      	nop
 8013554:	200014c4 	.word	0x200014c4

08013558 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8013558:	b580      	push	{r7, lr}
 801355a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 801355c:	4819      	ldr	r0, [pc, #100]	; (80135c4 <sensirion_uart_open+0x6c>)
 801355e:	f7f8 f984 	bl	800b86a <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 8013562:	4b18      	ldr	r3, [pc, #96]	; (80135c4 <sensirion_uart_open+0x6c>)
 8013564:	4a18      	ldr	r2, [pc, #96]	; (80135c8 <sensirion_uart_open+0x70>)
 8013566:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8013568:	4b16      	ldr	r3, [pc, #88]	; (80135c4 <sensirion_uart_open+0x6c>)
 801356a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801356e:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8013570:	4b14      	ldr	r3, [pc, #80]	; (80135c4 <sensirion_uart_open+0x6c>)
 8013572:	2200      	movs	r2, #0
 8013574:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8013576:	4b13      	ldr	r3, [pc, #76]	; (80135c4 <sensirion_uart_open+0x6c>)
 8013578:	2200      	movs	r2, #0
 801357a:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 801357c:	4b11      	ldr	r3, [pc, #68]	; (80135c4 <sensirion_uart_open+0x6c>)
 801357e:	2200      	movs	r2, #0
 8013580:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8013582:	4b10      	ldr	r3, [pc, #64]	; (80135c4 <sensirion_uart_open+0x6c>)
 8013584:	220c      	movs	r2, #12
 8013586:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013588:	4b0e      	ldr	r3, [pc, #56]	; (80135c4 <sensirion_uart_open+0x6c>)
 801358a:	2200      	movs	r2, #0
 801358c:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801358e:	4b0d      	ldr	r3, [pc, #52]	; (80135c4 <sensirion_uart_open+0x6c>)
 8013590:	2200      	movs	r2, #0
 8013592:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013594:	480b      	ldr	r0, [pc, #44]	; (80135c4 <sensirion_uart_open+0x6c>)
 8013596:	f7f8 f91b 	bl	800b7d0 <HAL_UART_Init>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d001      	beq.n	80135a4 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 80135a0:	f7ef fd9c 	bl	80030dc <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 80135a4:	f240 220a 	movw	r2, #522	; 0x20a
 80135a8:	4908      	ldr	r1, [pc, #32]	; (80135cc <sensirion_uart_open+0x74>)
 80135aa:	4806      	ldr	r0, [pc, #24]	; (80135c4 <sensirion_uart_open+0x6c>)
 80135ac:	f7f8 fa4e 	bl	800ba4c <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 80135b0:	4b07      	ldr	r3, [pc, #28]	; (80135d0 <sensirion_uart_open+0x78>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 80135b6:	4b07      	ldr	r3, [pc, #28]	; (80135d4 <sensirion_uart_open+0x7c>)
 80135b8:	2200      	movs	r2, #0
 80135ba:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 80135bc:	2300      	movs	r3, #0
}
 80135be:	4618      	mov	r0, r3
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop
 80135c4:	200019e4 	.word	0x200019e4
 80135c8:	40004400 	.word	0x40004400
 80135cc:	200014c4 	.word	0x200014c4
 80135d0:	20001a80 	.word	0x20001a80
 80135d4:	20001a82 	.word	0x20001a82

080135d8 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 80135d8:	b580      	push	{r7, lr}
 80135da:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 80135dc:	4804      	ldr	r0, [pc, #16]	; (80135f0 <sensirion_uart_close+0x18>)
 80135de:	f7f8 f944 	bl	800b86a <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 80135e2:	4803      	ldr	r0, [pc, #12]	; (80135f0 <sensirion_uart_close+0x18>)
 80135e4:	f7f0 f89a 	bl	800371c <HAL_UART_MspDeInit>
    return 0;
 80135e8:	2300      	movs	r3, #0
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	200019e4 	.word	0x200019e4

080135f4 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	4603      	mov	r3, r0
 80135fc:	6039      	str	r1, [r7, #0]
 80135fe:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8013600:	88fa      	ldrh	r2, [r7, #6]
 8013602:	f04f 33ff 	mov.w	r3, #4294967295
 8013606:	6839      	ldr	r1, [r7, #0]
 8013608:	4807      	ldr	r0, [pc, #28]	; (8013628 <sensirion_uart_tx+0x34>)
 801360a:	f7f8 f95d 	bl	800b8c8 <HAL_UART_Transmit>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d102      	bne.n	801361a <sensirion_uart_tx+0x26>
		{
			return data_len;
 8013614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013618:	e001      	b.n	801361e <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 801361a:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 801361e:	4618      	mov	r0, r3
 8013620:	3708      	adds	r7, #8
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop
 8013628:	200019e4 	.word	0x200019e4

0801362c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	460b      	mov	r3, r1
 8013636:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8013638:	4a07      	ldr	r2, [pc, #28]	; (8013658 <HAL_UARTEx_RxEventCallback+0x2c>)
 801363a:	887b      	ldrh	r3, [r7, #2]
 801363c:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 801363e:	4b07      	ldr	r3, [pc, #28]	; (801365c <HAL_UARTEx_RxEventCallback+0x30>)
 8013640:	2201      	movs	r2, #1
 8013642:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 8013644:	f240 220a 	movw	r2, #522	; 0x20a
 8013648:	4905      	ldr	r1, [pc, #20]	; (8013660 <HAL_UARTEx_RxEventCallback+0x34>)
 801364a:	4806      	ldr	r0, [pc, #24]	; (8013664 <HAL_UARTEx_RxEventCallback+0x38>)
 801364c:	f7f8 f9fe 	bl	800ba4c <HAL_UARTEx_ReceiveToIdle_IT>
}
 8013650:	bf00      	nop
 8013652:	3708      	adds	r7, #8
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	20001a80 	.word	0x20001a80
 801365c:	20001a84 	.word	0x20001a84
 8013660:	200014c4 	.word	0x200014c4
 8013664:	200019e4 	.word	0x200019e4

08013668 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	4603      	mov	r3, r0
 8013670:	6039      	str	r1, [r7, #0]
 8013672:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8013678:	e005      	b.n	8013686 <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	3301      	adds	r3, #1
 801367e:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8013680:	200a      	movs	r0, #10
 8013682:	f7f0 fa75 	bl	8003b70 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8013686:	4b0b      	ldr	r3, [pc, #44]	; (80136b4 <sensirion_uart_rx+0x4c>)
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d102      	bne.n	8013694 <sensirion_uart_rx+0x2c>
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2b02      	cmp	r3, #2
 8013692:	d9f2      	bls.n	801367a <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8013694:	4b07      	ldr	r3, [pc, #28]	; (80136b4 <sensirion_uart_rx+0x4c>)
 8013696:	2200      	movs	r2, #0
 8013698:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 801369a:	4b07      	ldr	r3, [pc, #28]	; (80136b8 <sensirion_uart_rx+0x50>)
 801369c:	2200      	movs	r2, #0
 801369e:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 80136a0:	4b06      	ldr	r3, [pc, #24]	; (80136bc <sensirion_uart_rx+0x54>)
 80136a2:	2200      	movs	r2, #0
 80136a4:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 80136a6:	4b06      	ldr	r3, [pc, #24]	; (80136c0 <sensirion_uart_rx+0x58>)
 80136a8:	881b      	ldrh	r3, [r3, #0]
 80136aa:	b21b      	sxth	r3, r3
	//return i;
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	20001a84 	.word	0x20001a84
 80136b8:	20001a86 	.word	0x20001a86
 80136bc:	20001a82 	.word	0x20001a82
 80136c0:	20001a80 	.word	0x20001a80

080136c4 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	4a06      	ldr	r2, [pc, #24]	; (80136e8 <sensirion_sleep_usec+0x24>)
 80136d0:	fba2 2303 	umull	r2, r3, r2, r3
 80136d4:	099b      	lsrs	r3, r3, #6
 80136d6:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7f0 fa49 	bl	8003b70 <HAL_Delay>
}
 80136de:	bf00      	nop
 80136e0:	3708      	adds	r7, #8
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	10624dd3 	.word	0x10624dd3

080136ec <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b08a      	sub	sp, #40	; 0x28
 80136f0:	af04      	add	r7, sp, #16
 80136f2:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 80136f4:	2303      	movs	r3, #3
 80136f6:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 80136f8:	f107 020c 	add.w	r2, r7, #12
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	9302      	str	r3, [sp, #8]
 8013700:	f107 0310 	add.w	r3, r7, #16
 8013704:	9301      	str	r3, [sp, #4]
 8013706:	2320      	movs	r3, #32
 8013708:	9300      	str	r3, [sp, #0]
 801370a:	4613      	mov	r3, r2
 801370c:	2201      	movs	r2, #1
 801370e:	21d0      	movs	r1, #208	; 0xd0
 8013710:	2000      	movs	r0, #0
 8013712:	f7ff fcb3 	bl	801307c <sensirion_shdlc_xcv>
 8013716:	4603      	mov	r3, r0
 8013718:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 801371a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801371e:	2b00      	cmp	r3, #0
 8013720:	da02      	bge.n	8013728 <sps30_get_serial+0x3c>
        return ret;
 8013722:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013726:	e009      	b.n	801373c <sps30_get_serial+0x50>

    if (header.state)
 8013728:	7cbb      	ldrb	r3, [r7, #18]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d005      	beq.n	801373a <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 801372e:	7cbb      	ldrb	r3, [r7, #18]
 8013730:	b21b      	sxth	r3, r3
 8013732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013736:	b21b      	sxth	r3, r3
 8013738:	e000      	b.n	801373c <sps30_get_serial+0x50>

    return 0;
 801373a:	2300      	movs	r3, #0
}
 801373c:	4618      	mov	r0, r3
 801373e:	3718      	adds	r7, #24
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 8013744:	b580      	push	{r7, lr}
 8013746:	b086      	sub	sp, #24
 8013748:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 801374a:	f240 3301 	movw	r3, #769	; 0x301
 801374e:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8013750:	463a      	mov	r2, r7
 8013752:	2300      	movs	r3, #0
 8013754:	9302      	str	r3, [sp, #8]
 8013756:	1d3b      	adds	r3, r7, #4
 8013758:	9301      	str	r3, [sp, #4]
 801375a:	2300      	movs	r3, #0
 801375c:	9300      	str	r3, [sp, #0]
 801375e:	4613      	mov	r3, r2
 8013760:	2202      	movs	r2, #2
 8013762:	2100      	movs	r1, #0
 8013764:	2000      	movs	r0, #0
 8013766:	f7ff fc89 	bl	801307c <sensirion_shdlc_xcv>
 801376a:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 801376c:	4618      	mov	r0, r3
 801376e:	3708      	adds	r7, #8
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}

08013774 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8013774:	b580      	push	{r7, lr}
 8013776:	b086      	sub	sp, #24
 8013778:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 801377a:	2300      	movs	r3, #0
 801377c:	9302      	str	r3, [sp, #8]
 801377e:	1d3b      	adds	r3, r7, #4
 8013780:	9301      	str	r3, [sp, #4]
 8013782:	2300      	movs	r3, #0
 8013784:	9300      	str	r3, [sp, #0]
 8013786:	2300      	movs	r3, #0
 8013788:	2200      	movs	r2, #0
 801378a:	2101      	movs	r1, #1
 801378c:	2000      	movs	r0, #0
 801378e:	f7ff fc75 	bl	801307c <sensirion_shdlc_xcv>
 8013792:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013794:	4618      	mov	r0, r3
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 801379c:	b580      	push	{r7, lr}
 801379e:	b092      	sub	sp, #72	; 0x48
 80137a0:	af04      	add	r7, sp, #16
 80137a2:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 80137a4:	f107 0308 	add.w	r3, r7, #8
 80137a8:	9302      	str	r3, [sp, #8]
 80137aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80137ae:	9301      	str	r3, [sp, #4]
 80137b0:	2328      	movs	r3, #40	; 0x28
 80137b2:	9300      	str	r3, [sp, #0]
 80137b4:	2300      	movs	r3, #0
 80137b6:	2200      	movs	r2, #0
 80137b8:	2103      	movs	r1, #3
 80137ba:	2000      	movs	r0, #0
 80137bc:	f7ff fc5e 	bl	801307c <sensirion_shdlc_xcv>
 80137c0:	4603      	mov	r3, r0
 80137c2:	86fb      	strh	r3, [r7, #54]	; 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 80137c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d002      	beq.n	80137d2 <sps30_read_measurement+0x36>
        return error;
 80137cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80137d0:	e07f      	b.n	80138d2 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 80137d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80137d6:	2b28      	cmp	r3, #40	; 0x28
 80137d8:	d002      	beq.n	80137e0 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 80137da:	f04f 33ff 	mov.w	r3, #4294967295
 80137de:	e078      	b.n	80138d2 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 80137e0:	f107 0308 	add.w	r3, r7, #8
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7ff fba6 	bl	8012f36 <sensirion_bytes_to_float>
 80137ea:	eef0 7a40 	vmov.f32	s15, s0
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 80137f4:	f107 0308 	add.w	r3, r7, #8
 80137f8:	3304      	adds	r3, #4
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7ff fb9b 	bl	8012f36 <sensirion_bytes_to_float>
 8013800:	eef0 7a40 	vmov.f32	s15, s0
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 801380a:	f107 0308 	add.w	r3, r7, #8
 801380e:	3308      	adds	r3, #8
 8013810:	4618      	mov	r0, r3
 8013812:	f7ff fb90 	bl	8012f36 <sensirion_bytes_to_float>
 8013816:	eef0 7a40 	vmov.f32	s15, s0
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 8013820:	f107 0308 	add.w	r3, r7, #8
 8013824:	330c      	adds	r3, #12
 8013826:	4618      	mov	r0, r3
 8013828:	f7ff fb85 	bl	8012f36 <sensirion_bytes_to_float>
 801382c:	eef0 7a40 	vmov.f32	s15, s0
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 8013836:	f107 0308 	add.w	r3, r7, #8
 801383a:	3310      	adds	r3, #16
 801383c:	4618      	mov	r0, r3
 801383e:	f7ff fb7a 	bl	8012f36 <sensirion_bytes_to_float>
 8013842:	eef0 7a40 	vmov.f32	s15, s0
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 801384c:	f107 0308 	add.w	r3, r7, #8
 8013850:	3314      	adds	r3, #20
 8013852:	4618      	mov	r0, r3
 8013854:	f7ff fb6f 	bl	8012f36 <sensirion_bytes_to_float>
 8013858:	eef0 7a40 	vmov.f32	s15, s0
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 8013862:	f107 0308 	add.w	r3, r7, #8
 8013866:	3318      	adds	r3, #24
 8013868:	4618      	mov	r0, r3
 801386a:	f7ff fb64 	bl	8012f36 <sensirion_bytes_to_float>
 801386e:	eef0 7a40 	vmov.f32	s15, s0
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8013878:	f107 0308 	add.w	r3, r7, #8
 801387c:	331c      	adds	r3, #28
 801387e:	4618      	mov	r0, r3
 8013880:	f7ff fb59 	bl	8012f36 <sensirion_bytes_to_float>
 8013884:	eef0 7a40 	vmov.f32	s15, s0
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 801388e:	f107 0308 	add.w	r3, r7, #8
 8013892:	3320      	adds	r3, #32
 8013894:	4618      	mov	r0, r3
 8013896:	f7ff fb4e 	bl	8012f36 <sensirion_bytes_to_float>
 801389a:	eef0 7a40 	vmov.f32	s15, s0
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 80138a4:	f107 0308 	add.w	r3, r7, #8
 80138a8:	3324      	adds	r3, #36	; 0x24
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7ff fb43 	bl	8012f36 <sensirion_bytes_to_float>
 80138b0:	eef0 7a40 	vmov.f32	s15, s0
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if (header.state) {
 80138ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d006      	beq.n	80138d0 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 80138c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80138c6:	b21b      	sxth	r3, r3
 80138c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80138cc:	b21b      	sxth	r3, r3
 80138ce:	e000      	b.n	80138d2 <sps30_read_measurement+0x136>
    }

    return 0;
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3738      	adds	r7, #56	; 0x38
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}

080138da <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 80138da:	b580      	push	{r7, lr}
 80138dc:	b086      	sub	sp, #24
 80138de:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 80138e0:	2300      	movs	r3, #0
 80138e2:	9302      	str	r3, [sp, #8]
 80138e4:	1d3b      	adds	r3, r7, #4
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	2300      	movs	r3, #0
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	2300      	movs	r3, #0
 80138ee:	2200      	movs	r2, #0
 80138f0:	2156      	movs	r1, #86	; 0x56
 80138f2:	2000      	movs	r0, #0
 80138f4:	f7ff fbc2 	bl	801307c <sensirion_shdlc_xcv>
 80138f8:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3708      	adds	r7, #8
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}

08013902 <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8013902:	b580      	push	{r7, lr}
 8013904:	b08a      	sub	sp, #40	; 0x28
 8013906:	af04      	add	r7, sp, #16
 8013908:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 801390a:	f107 0308 	add.w	r3, r7, #8
 801390e:	9302      	str	r3, [sp, #8]
 8013910:	f107 0310 	add.w	r3, r7, #16
 8013914:	9301      	str	r3, [sp, #4]
 8013916:	2307      	movs	r3, #7
 8013918:	9300      	str	r3, [sp, #0]
 801391a:	2300      	movs	r3, #0
 801391c:	2200      	movs	r2, #0
 801391e:	21d1      	movs	r1, #209	; 0xd1
 8013920:	2000      	movs	r0, #0
 8013922:	f7ff fbab 	bl	801307c <sensirion_shdlc_xcv>
 8013926:	4603      	mov	r3, r0
 8013928:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 801392a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d002      	beq.n	8013938 <sps30_read_version+0x36>
        return error;
 8013932:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013936:	e01f      	b.n	8013978 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8013938:	7cfb      	ldrb	r3, [r7, #19]
 801393a:	2b07      	cmp	r3, #7
 801393c:	d002      	beq.n	8013944 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 801393e:	f04f 33ff 	mov.w	r3, #4294967295
 8013942:	e019      	b.n	8013978 <sps30_read_version+0x76>
    }

    if (header.state) {
 8013944:	7cbb      	ldrb	r3, [r7, #18]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d005      	beq.n	8013956 <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 801394a:	7cbb      	ldrb	r3, [r7, #18]
 801394c:	b21b      	sxth	r3, r3
 801394e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013952:	b21b      	sxth	r3, r3
 8013954:	e010      	b.n	8013978 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8013956:	7a3a      	ldrb	r2, [r7, #8]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 801395c:	7a7a      	ldrb	r2, [r7, #9]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8013962:	7afa      	ldrb	r2, [r7, #11]
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8013968:	7b7a      	ldrb	r2, [r7, #13]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 801396e:	7bba      	ldrb	r2, [r7, #14]
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	711a      	strb	r2, [r3, #4]

    return error;
 8013974:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8013978:	4618      	mov	r0, r3
 801397a:	3718      	adds	r7, #24
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	460b      	mov	r3, r1
 801398a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801398c:	f640 0074 	movw	r0, #2164	; 0x874
 8013990:	f007 fd18 	bl	801b3c4 <USBD_static_malloc>
 8013994:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d109      	bne.n	80139b0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	32b0      	adds	r2, #176	; 0xb0
 80139a6:	2100      	movs	r1, #0
 80139a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80139ac:	2302      	movs	r3, #2
 80139ae:	e06e      	b.n	8013a8e <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	32b0      	adds	r2, #176	; 0xb0
 80139ba:	68f9      	ldr	r1, [r7, #12]
 80139bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	32b0      	adds	r2, #176	; 0xb0
 80139ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	7c1b      	ldrb	r3, [r3, #16]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d12b      	bne.n	8013a34 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80139dc:	4b2e      	ldr	r3, [pc, #184]	; (8013a98 <USBD_MSC_Init+0x118>)
 80139de:	7819      	ldrb	r1, [r3, #0]
 80139e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80139e4:	2202      	movs	r2, #2
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	f007 fba9 	bl	801b13e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80139ec:	4b2a      	ldr	r3, [pc, #168]	; (8013a98 <USBD_MSC_Init+0x118>)
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	f003 020f 	and.w	r2, r3, #15
 80139f4:	6879      	ldr	r1, [r7, #4]
 80139f6:	4613      	mov	r3, r2
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	4413      	add	r3, r2
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	440b      	add	r3, r1
 8013a00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013a04:	2201      	movs	r2, #1
 8013a06:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013a08:	4b24      	ldr	r3, [pc, #144]	; (8013a9c <USBD_MSC_Init+0x11c>)
 8013a0a:	7819      	ldrb	r1, [r3, #0]
 8013a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013a10:	2202      	movs	r2, #2
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f007 fb93 	bl	801b13e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013a18:	4b20      	ldr	r3, [pc, #128]	; (8013a9c <USBD_MSC_Init+0x11c>)
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	f003 020f 	and.w	r2, r3, #15
 8013a20:	6879      	ldr	r1, [r7, #4]
 8013a22:	4613      	mov	r3, r2
 8013a24:	009b      	lsls	r3, r3, #2
 8013a26:	4413      	add	r3, r2
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	440b      	add	r3, r1
 8013a2c:	3324      	adds	r3, #36	; 0x24
 8013a2e:	2201      	movs	r2, #1
 8013a30:	801a      	strh	r2, [r3, #0]
 8013a32:	e028      	b.n	8013a86 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013a34:	4b18      	ldr	r3, [pc, #96]	; (8013a98 <USBD_MSC_Init+0x118>)
 8013a36:	7819      	ldrb	r1, [r3, #0]
 8013a38:	2340      	movs	r3, #64	; 0x40
 8013a3a:	2202      	movs	r2, #2
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f007 fb7e 	bl	801b13e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8013a42:	4b15      	ldr	r3, [pc, #84]	; (8013a98 <USBD_MSC_Init+0x118>)
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	f003 020f 	and.w	r2, r3, #15
 8013a4a:	6879      	ldr	r1, [r7, #4]
 8013a4c:	4613      	mov	r3, r2
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	4413      	add	r3, r2
 8013a52:	009b      	lsls	r3, r3, #2
 8013a54:	440b      	add	r3, r1
 8013a56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013a5e:	4b0f      	ldr	r3, [pc, #60]	; (8013a9c <USBD_MSC_Init+0x11c>)
 8013a60:	7819      	ldrb	r1, [r3, #0]
 8013a62:	2340      	movs	r3, #64	; 0x40
 8013a64:	2202      	movs	r2, #2
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f007 fb69 	bl	801b13e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013a6c:	4b0b      	ldr	r3, [pc, #44]	; (8013a9c <USBD_MSC_Init+0x11c>)
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	f003 020f 	and.w	r2, r3, #15
 8013a74:	6879      	ldr	r1, [r7, #4]
 8013a76:	4613      	mov	r3, r2
 8013a78:	009b      	lsls	r3, r3, #2
 8013a7a:	4413      	add	r3, r2
 8013a7c:	009b      	lsls	r3, r3, #2
 8013a7e:	440b      	add	r3, r1
 8013a80:	3324      	adds	r3, #36	; 0x24
 8013a82:	2201      	movs	r2, #1
 8013a84:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f000 fa2c 	bl	8013ee4 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013a8c:	2300      	movs	r3, #0
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3710      	adds	r7, #16
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	2000008f 	.word	0x2000008f
 8013a9c:	2000008e 	.word	0x2000008e

08013aa0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8013aac:	4b26      	ldr	r3, [pc, #152]	; (8013b48 <USBD_MSC_DeInit+0xa8>)
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f007 fb69 	bl	801b18a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8013ab8:	4b23      	ldr	r3, [pc, #140]	; (8013b48 <USBD_MSC_DeInit+0xa8>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	f003 020f 	and.w	r2, r3, #15
 8013ac0:	6879      	ldr	r1, [r7, #4]
 8013ac2:	4613      	mov	r3, r2
 8013ac4:	009b      	lsls	r3, r3, #2
 8013ac6:	4413      	add	r3, r2
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	440b      	add	r3, r1
 8013acc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8013ad4:	4b1d      	ldr	r3, [pc, #116]	; (8013b4c <USBD_MSC_DeInit+0xac>)
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	4619      	mov	r1, r3
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f007 fb55 	bl	801b18a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8013ae0:	4b1a      	ldr	r3, [pc, #104]	; (8013b4c <USBD_MSC_DeInit+0xac>)
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	f003 020f 	and.w	r2, r3, #15
 8013ae8:	6879      	ldr	r1, [r7, #4]
 8013aea:	4613      	mov	r3, r2
 8013aec:	009b      	lsls	r3, r3, #2
 8013aee:	4413      	add	r3, r2
 8013af0:	009b      	lsls	r3, r3, #2
 8013af2:	440b      	add	r3, r1
 8013af4:	3324      	adds	r3, #36	; 0x24
 8013af6:	2200      	movs	r2, #0
 8013af8:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	32b0      	adds	r2, #176	; 0xb0
 8013b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d018      	beq.n	8013b3e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 fa67 	bl	8013fe0 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	32b0      	adds	r2, #176	; 0xb0
 8013b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f007 fc5d 	bl	801b3e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	32b0      	adds	r2, #176	; 0xb0
 8013b30:	2100      	movs	r1, #0
 8013b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2200      	movs	r2, #0
 8013b3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013b3e:	2300      	movs	r3, #0
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3708      	adds	r7, #8
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	2000008f 	.word	0x2000008f
 8013b4c:	2000008e 	.word	0x2000008e

08013b50 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	32b0      	adds	r2, #176	; 0xb0
 8013b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b68:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d101      	bne.n	8013b7c <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013b78:	2303      	movs	r3, #3
 8013b7a:	e0e1      	b.n	8013d40 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013b7c:	683b      	ldr	r3, [r7, #0]
 8013b7e:	781b      	ldrb	r3, [r3, #0]
 8013b80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d053      	beq.n	8013c30 <USBD_MSC_Setup+0xe0>
 8013b88:	2b20      	cmp	r3, #32
 8013b8a:	f040 80d1 	bne.w	8013d30 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	785b      	ldrb	r3, [r3, #1]
 8013b92:	2bfe      	cmp	r3, #254	; 0xfe
 8013b94:	d002      	beq.n	8013b9c <USBD_MSC_Setup+0x4c>
 8013b96:	2bff      	cmp	r3, #255	; 0xff
 8013b98:	d02a      	beq.n	8013bf0 <USBD_MSC_Setup+0xa0>
 8013b9a:	e041      	b.n	8013c20 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	885b      	ldrh	r3, [r3, #2]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d11e      	bne.n	8013be2 <USBD_MSC_Setup+0x92>
 8013ba4:	683b      	ldr	r3, [r7, #0]
 8013ba6:	88db      	ldrh	r3, [r3, #6]
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d11a      	bne.n	8013be2 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	da15      	bge.n	8013be2 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	33b0      	adds	r3, #176	; 0xb0
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	4413      	add	r3, r2
 8013bc4:	685b      	ldr	r3, [r3, #4]
 8013bc6:	699b      	ldr	r3, [r3, #24]
 8013bc8:	4798      	blx	r3
 8013bca:	4603      	mov	r3, r0
 8013bcc:	461a      	mov	r2, r3
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8013bd2:	693b      	ldr	r3, [r7, #16]
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f003 f949 	bl	8016e70 <USBD_CtlSendData>
 8013bde:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013be0:	e025      	b.n	8013c2e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8013be2:	6839      	ldr	r1, [r7, #0]
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f003 f8d2 	bl	8016d8e <USBD_CtlError>
            ret = USBD_FAIL;
 8013bea:	2303      	movs	r3, #3
 8013bec:	75fb      	strb	r3, [r7, #23]
          break;
 8013bee:	e01e      	b.n	8013c2e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	885b      	ldrh	r3, [r3, #2]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10c      	bne.n	8013c12 <USBD_MSC_Setup+0xc2>
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	88db      	ldrh	r3, [r3, #6]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d108      	bne.n	8013c12 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	db03      	blt.n	8013c12 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 f9b4 	bl	8013f78 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013c10:	e00d      	b.n	8013c2e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8013c12:	6839      	ldr	r1, [r7, #0]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f003 f8ba 	bl	8016d8e <USBD_CtlError>
            ret = USBD_FAIL;
 8013c1a:	2303      	movs	r3, #3
 8013c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8013c1e:	e006      	b.n	8013c2e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8013c20:	6839      	ldr	r1, [r7, #0]
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f003 f8b3 	bl	8016d8e <USBD_CtlError>
          ret = USBD_FAIL;
 8013c28:	2303      	movs	r3, #3
 8013c2a:	75fb      	strb	r3, [r7, #23]
          break;
 8013c2c:	bf00      	nop
      }
      break;
 8013c2e:	e086      	b.n	8013d3e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	785b      	ldrb	r3, [r3, #1]
 8013c34:	2b0b      	cmp	r3, #11
 8013c36:	d872      	bhi.n	8013d1e <USBD_MSC_Setup+0x1ce>
 8013c38:	a201      	add	r2, pc, #4	; (adr r2, 8013c40 <USBD_MSC_Setup+0xf0>)
 8013c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c3e:	bf00      	nop
 8013c40:	08013c71 	.word	0x08013c71
 8013c44:	08013ced 	.word	0x08013ced
 8013c48:	08013d1f 	.word	0x08013d1f
 8013c4c:	08013d1f 	.word	0x08013d1f
 8013c50:	08013d1f 	.word	0x08013d1f
 8013c54:	08013d1f 	.word	0x08013d1f
 8013c58:	08013d1f 	.word	0x08013d1f
 8013c5c:	08013d1f 	.word	0x08013d1f
 8013c60:	08013d1f 	.word	0x08013d1f
 8013c64:	08013d1f 	.word	0x08013d1f
 8013c68:	08013c9b 	.word	0x08013c9b
 8013c6c:	08013cc5 	.word	0x08013cc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	2b03      	cmp	r3, #3
 8013c7a:	d107      	bne.n	8013c8c <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013c7c:	f107 030e 	add.w	r3, r7, #14
 8013c80:	2202      	movs	r2, #2
 8013c82:	4619      	mov	r1, r3
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f003 f8f3 	bl	8016e70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013c8a:	e050      	b.n	8013d2e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013c8c:	6839      	ldr	r1, [r7, #0]
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f003 f87d 	bl	8016d8e <USBD_CtlError>
            ret = USBD_FAIL;
 8013c94:	2303      	movs	r3, #3
 8013c96:	75fb      	strb	r3, [r7, #23]
          break;
 8013c98:	e049      	b.n	8013d2e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ca0:	b2db      	uxtb	r3, r3
 8013ca2:	2b03      	cmp	r3, #3
 8013ca4:	d107      	bne.n	8013cb6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	3304      	adds	r3, #4
 8013caa:	2201      	movs	r2, #1
 8013cac:	4619      	mov	r1, r3
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f003 f8de 	bl	8016e70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013cb4:	e03b      	b.n	8013d2e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013cb6:	6839      	ldr	r1, [r7, #0]
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f003 f868 	bl	8016d8e <USBD_CtlError>
            ret = USBD_FAIL;
 8013cbe:	2303      	movs	r3, #3
 8013cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8013cc2:	e034      	b.n	8013d2e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	2b03      	cmp	r3, #3
 8013cce:	d106      	bne.n	8013cde <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	885b      	ldrh	r3, [r3, #2]
 8013cd4:	b2db      	uxtb	r3, r3
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013cdc:	e027      	b.n	8013d2e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8013cde:	6839      	ldr	r1, [r7, #0]
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f003 f854 	bl	8016d8e <USBD_CtlError>
            ret = USBD_FAIL;
 8013ce6:	2303      	movs	r3, #3
 8013ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8013cea:	e020      	b.n	8013d2e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cf2:	b2db      	uxtb	r3, r3
 8013cf4:	2b03      	cmp	r3, #3
 8013cf6:	d119      	bne.n	8013d2c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	885b      	ldrh	r3, [r3, #2]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d115      	bne.n	8013d2c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	889b      	ldrh	r3, [r3, #4]
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	4619      	mov	r1, r3
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f007 fa5d 	bl	801b1c8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	889b      	ldrh	r3, [r3, #4]
 8013d12:	b2db      	uxtb	r3, r3
 8013d14:	4619      	mov	r1, r3
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f000 fb2e 	bl	8014378 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8013d1c:	e006      	b.n	8013d2c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8013d1e:	6839      	ldr	r1, [r7, #0]
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f003 f834 	bl	8016d8e <USBD_CtlError>
          ret = USBD_FAIL;
 8013d26:	2303      	movs	r3, #3
 8013d28:	75fb      	strb	r3, [r7, #23]
          break;
 8013d2a:	e000      	b.n	8013d2e <USBD_MSC_Setup+0x1de>
          break;
 8013d2c:	bf00      	nop
      }
      break;
 8013d2e:	e006      	b.n	8013d3e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8013d30:	6839      	ldr	r1, [r7, #0]
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f003 f82b 	bl	8016d8e <USBD_CtlError>
      ret = USBD_FAIL;
 8013d38:	2303      	movs	r3, #3
 8013d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8013d3c:	bf00      	nop
  }

  return (uint8_t)ret;
 8013d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3718      	adds	r7, #24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}

08013d48 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	460b      	mov	r3, r1
 8013d52:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8013d54:	78fb      	ldrb	r3, [r7, #3]
 8013d56:	4619      	mov	r1, r3
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f000 f959 	bl	8014010 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8013d5e:	2300      	movs	r3, #0
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3708      	adds	r7, #8
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}

08013d68 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	460b      	mov	r3, r1
 8013d72:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8013d74:	78fb      	ldrb	r3, [r7, #3]
 8013d76:	4619      	mov	r1, r3
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f000 f983 	bl	8014084 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8013d7e:	2300      	movs	r3, #0
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013d90:	2181      	movs	r1, #129	; 0x81
 8013d92:	4812      	ldr	r0, [pc, #72]	; (8013ddc <USBD_MSC_GetHSCfgDesc+0x54>)
 8013d94:	f002 f9c3 	bl	801611e <USBD_GetEpDesc>
 8013d98:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013d9a:	2101      	movs	r1, #1
 8013d9c:	480f      	ldr	r0, [pc, #60]	; (8013ddc <USBD_MSC_GetHSCfgDesc+0x54>)
 8013d9e:	f002 f9be 	bl	801611e <USBD_GetEpDesc>
 8013da2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d006      	beq.n	8013db8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2200      	movs	r2, #0
 8013dae:	711a      	strb	r2, [r3, #4]
 8013db0:	2200      	movs	r2, #0
 8013db2:	f042 0202 	orr.w	r2, r2, #2
 8013db6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d006      	beq.n	8013dcc <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	711a      	strb	r2, [r3, #4]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	f042 0202 	orr.w	r2, r2, #2
 8013dca:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2220      	movs	r2, #32
 8013dd0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013dd2:	4b02      	ldr	r3, [pc, #8]	; (8013ddc <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	20000064 	.word	0x20000064

08013de0 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013de8:	2181      	movs	r1, #129	; 0x81
 8013dea:	4812      	ldr	r0, [pc, #72]	; (8013e34 <USBD_MSC_GetFSCfgDesc+0x54>)
 8013dec:	f002 f997 	bl	801611e <USBD_GetEpDesc>
 8013df0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013df2:	2101      	movs	r1, #1
 8013df4:	480f      	ldr	r0, [pc, #60]	; (8013e34 <USBD_MSC_GetFSCfgDesc+0x54>)
 8013df6:	f002 f992 	bl	801611e <USBD_GetEpDesc>
 8013dfa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d006      	beq.n	8013e10 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	2200      	movs	r2, #0
 8013e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e0a:	711a      	strb	r2, [r3, #4]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d006      	beq.n	8013e24 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e1e:	711a      	strb	r2, [r3, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2220      	movs	r2, #32
 8013e28:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013e2a:	4b02      	ldr	r3, [pc, #8]	; (8013e34 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3710      	adds	r7, #16
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	20000064 	.word	0x20000064

08013e38 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8013e40:	2181      	movs	r1, #129	; 0x81
 8013e42:	4812      	ldr	r0, [pc, #72]	; (8013e8c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8013e44:	f002 f96b 	bl	801611e <USBD_GetEpDesc>
 8013e48:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8013e4a:	2101      	movs	r1, #1
 8013e4c:	480f      	ldr	r0, [pc, #60]	; (8013e8c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8013e4e:	f002 f966 	bl	801611e <USBD_GetEpDesc>
 8013e52:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d006      	beq.n	8013e68 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e62:	711a      	strb	r2, [r3, #4]
 8013e64:	2200      	movs	r2, #0
 8013e66:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d006      	beq.n	8013e7c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	2200      	movs	r2, #0
 8013e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e76:	711a      	strb	r2, [r3, #4]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2220      	movs	r2, #32
 8013e80:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8013e82:	4b02      	ldr	r3, [pc, #8]	; (8013e8c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	3710      	adds	r7, #16
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	20000064 	.word	0x20000064

08013e90 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b083      	sub	sp, #12
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	220a      	movs	r2, #10
 8013e9c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013e9e:	4b03      	ldr	r3, [pc, #12]	; (8013eac <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	370c      	adds	r7, #12
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eaa:	4770      	bx	lr
 8013eac:	20000084 	.word	0x20000084

08013eb0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b083      	sub	sp, #12
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d101      	bne.n	8013ec4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013ec0:	2303      	movs	r3, #3
 8013ec2:	e009      	b.n	8013ed8 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013eca:	687a      	ldr	r2, [r7, #4]
 8013ecc:	33b0      	adds	r3, #176	; 0xb0
 8013ece:	009b      	lsls	r3, r3, #2
 8013ed0:	4413      	add	r3, r2
 8013ed2:	683a      	ldr	r2, [r7, #0]
 8013ed4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013ed6:	2300      	movs	r3, #0
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	370c      	adds	r7, #12
 8013edc:	46bd      	mov	sp, r7
 8013ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee2:	4770      	bx	lr

08013ee4 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	32b0      	adds	r2, #176	; 0xb0
 8013ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013efa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d032      	beq.n	8013f68 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2200      	movs	r2, #0
 8013f06:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	2200      	movs	r2, #0
 8013f12:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
  hmsc->scsi_sense_head = 0U;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2200      	movs	r2, #0
 8013f22:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	33b0      	adds	r3, #176	; 0xb0
 8013f30:	009b      	lsls	r3, r3, #2
 8013f32:	4413      	add	r3, r2
 8013f34:	685b      	ldr	r3, [r3, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	2000      	movs	r0, #0
 8013f3a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8013f3c:	4b0c      	ldr	r3, [pc, #48]	; (8013f70 <MSC_BOT_Init+0x8c>)
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	4619      	mov	r1, r3
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f007 f940 	bl	801b1c8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8013f48:	4b0a      	ldr	r3, [pc, #40]	; (8013f74 <MSC_BOT_Init+0x90>)
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f007 f93a 	bl	801b1c8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013f54:	4b06      	ldr	r3, [pc, #24]	; (8013f70 <MSC_BOT_Init+0x8c>)
 8013f56:	7819      	ldrb	r1, [r3, #0]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013f5e:	231f      	movs	r3, #31
 8013f60:	6878      	ldr	r0, [r7, #4]
 8013f62:	f007 f9fa 	bl	801b35a <USBD_LL_PrepareReceive>
 8013f66:	e000      	b.n	8013f6a <MSC_BOT_Init+0x86>
    return;
 8013f68:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013f6a:	3710      	adds	r7, #16
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}
 8013f70:	2000008f 	.word	0x2000008f
 8013f74:	2000008e 	.word	0x2000008e

08013f78 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	32b0      	adds	r2, #176	; 0xb0
 8013f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f8e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d01b      	beq.n	8013fce <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8013fa2:	4b0d      	ldr	r3, [pc, #52]	; (8013fd8 <MSC_BOT_Reset+0x60>)
 8013fa4:	781b      	ldrb	r3, [r3, #0]
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f007 f94b 	bl	801b244 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8013fae:	4b0b      	ldr	r3, [pc, #44]	; (8013fdc <MSC_BOT_Reset+0x64>)
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f007 f945 	bl	801b244 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8013fba:	4b08      	ldr	r3, [pc, #32]	; (8013fdc <MSC_BOT_Reset+0x64>)
 8013fbc:	7819      	ldrb	r1, [r3, #0]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8013fc4:	231f      	movs	r3, #31
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f007 f9c7 	bl	801b35a <USBD_LL_PrepareReceive>
 8013fcc:	e000      	b.n	8013fd0 <MSC_BOT_Reset+0x58>
    return;
 8013fce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8013fd0:	3710      	adds	r7, #16
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	2000008e 	.word	0x2000008e
 8013fdc:	2000008f 	.word	0x2000008f

08013fe0 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b085      	sub	sp, #20
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	32b0      	adds	r2, #176	; 0xb0
 8013ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ff6:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d002      	beq.n	8014004 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	2200      	movs	r2, #0
 8014002:	721a      	strb	r2, [r3, #8]
  }
}
 8014004:	bf00      	nop
 8014006:	3714      	adds	r7, #20
 8014008:	46bd      	mov	sp, r7
 801400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400e:	4770      	bx	lr

08014010 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	460b      	mov	r3, r1
 801401a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	32b0      	adds	r2, #176	; 0xb0
 8014026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801402a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d020      	beq.n	8014074 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	7a1b      	ldrb	r3, [r3, #8]
 8014036:	2b02      	cmp	r3, #2
 8014038:	d005      	beq.n	8014046 <MSC_BOT_DataIn+0x36>
 801403a:	2b02      	cmp	r3, #2
 801403c:	db1c      	blt.n	8014078 <MSC_BOT_DataIn+0x68>
 801403e:	3b03      	subs	r3, #3
 8014040:	2b01      	cmp	r3, #1
 8014042:	d819      	bhi.n	8014078 <MSC_BOT_DataIn+0x68>
 8014044:	e011      	b.n	801406a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8014052:	461a      	mov	r2, r3
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f000 f9c9 	bl	80143ec <SCSI_ProcessCmd>
 801405a:	4603      	mov	r3, r0
 801405c:	2b00      	cmp	r3, #0
 801405e:	da0d      	bge.n	801407c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014060:	2101      	movs	r1, #1
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f000 f90c 	bl	8014280 <MSC_BOT_SendCSW>
      }
      break;
 8014068:	e008      	b.n	801407c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801406a:	2100      	movs	r1, #0
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	f000 f907 	bl	8014280 <MSC_BOT_SendCSW>
      break;
 8014072:	e004      	b.n	801407e <MSC_BOT_DataIn+0x6e>
    return;
 8014074:	bf00      	nop
 8014076:	e002      	b.n	801407e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8014078:	bf00      	nop
 801407a:	e000      	b.n	801407e <MSC_BOT_DataIn+0x6e>
      break;
 801407c:	bf00      	nop
  }
}
 801407e:	3710      	adds	r7, #16
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}

08014084 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b084      	sub	sp, #16
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	460b      	mov	r3, r1
 801408e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	32b0      	adds	r2, #176	; 0xb0
 801409a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801409e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d01c      	beq.n	80140e0 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	7a1b      	ldrb	r3, [r3, #8]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d002      	beq.n	80140b4 <MSC_BOT_DataOut+0x30>
 80140ae:	2b01      	cmp	r3, #1
 80140b0:	d004      	beq.n	80140bc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80140b2:	e018      	b.n	80140e6 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f000 f819 	bl	80140ec <MSC_BOT_CBW_Decode>
      break;
 80140ba:	e014      	b.n	80140e6 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 80140c8:	461a      	mov	r2, r3
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f000 f98e 	bl	80143ec <SCSI_ProcessCmd>
 80140d0:	4603      	mov	r3, r0
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	da06      	bge.n	80140e4 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80140d6:	2101      	movs	r1, #1
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	f000 f8d1 	bl	8014280 <MSC_BOT_SendCSW>
      break;
 80140de:	e001      	b.n	80140e4 <MSC_BOT_DataOut+0x60>
    return;
 80140e0:	bf00      	nop
 80140e2:	e000      	b.n	80140e6 <MSC_BOT_DataOut+0x62>
      break;
 80140e4:	bf00      	nop
  }
}
 80140e6:	3710      	adds	r7, #16
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}

080140ec <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b084      	sub	sp, #16
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	32b0      	adds	r2, #176	; 0xb0
 80140fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014102:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d079      	beq.n	80141fe <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8014122:	4b3a      	ldr	r3, [pc, #232]	; (801420c <MSC_BOT_CBW_Decode+0x120>)
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	4619      	mov	r1, r3
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f007 f937 	bl	801b39c <USBD_LL_GetRxDataSize>
 801412e:	4603      	mov	r3, r0
 8014130:	2b1f      	cmp	r3, #31
 8014132:	d114      	bne.n	801415e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801413a:	4a35      	ldr	r2, [pc, #212]	; (8014210 <MSC_BOT_CBW_Decode+0x124>)
 801413c:	4293      	cmp	r3, r2
 801413e:	d10e      	bne.n	801415e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014146:	2b01      	cmp	r3, #1
 8014148:	d809      	bhi.n	801415e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8014150:	2b00      	cmp	r3, #0
 8014152:	d004      	beq.n	801415e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801415a:	2b10      	cmp	r3, #16
 801415c:	d90e      	bls.n	801417c <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014164:	2320      	movs	r3, #32
 8014166:	2205      	movs	r2, #5
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f000 fe2b 	bl	8014dc4 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2202      	movs	r2, #2
 8014172:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f000 f8bd 	bl	80142f4 <MSC_BOT_Abort>
 801417a:	e043      	b.n	8014204 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8014188:	461a      	mov	r2, r3
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f000 f92e 	bl	80143ec <SCSI_ProcessCmd>
 8014190:	4603      	mov	r3, r0
 8014192:	2b00      	cmp	r3, #0
 8014194:	da0c      	bge.n	80141b0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	7a1b      	ldrb	r3, [r3, #8]
 801419a:	2b05      	cmp	r3, #5
 801419c:	d104      	bne.n	80141a8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801419e:	2101      	movs	r1, #1
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f000 f86d 	bl	8014280 <MSC_BOT_SendCSW>
 80141a6:	e02d      	b.n	8014204 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f000 f8a3 	bl	80142f4 <MSC_BOT_Abort>
 80141ae:	e029      	b.n	8014204 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	7a1b      	ldrb	r3, [r3, #8]
 80141b4:	2b02      	cmp	r3, #2
 80141b6:	d024      	beq.n	8014202 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80141bc:	2b01      	cmp	r3, #1
 80141be:	d020      	beq.n	8014202 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80141c4:	2b03      	cmp	r3, #3
 80141c6:	d01c      	beq.n	8014202 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d009      	beq.n	80141e4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	f103 0110 	add.w	r1, r3, #16
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	68db      	ldr	r3, [r3, #12]
 80141da:	461a      	mov	r2, r3
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f000 f819 	bl	8014214 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80141e2:	e00f      	b.n	8014204 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d104      	bne.n	80141f6 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80141ec:	2100      	movs	r1, #0
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f000 f846 	bl	8014280 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80141f4:	e006      	b.n	8014204 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f000 f87c 	bl	80142f4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80141fc:	e002      	b.n	8014204 <MSC_BOT_CBW_Decode+0x118>
    return;
 80141fe:	bf00      	nop
 8014200:	e000      	b.n	8014204 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8014202:	bf00      	nop
    }
  }
}
 8014204:	3710      	adds	r7, #16
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	2000008f 	.word	0x2000008f
 8014210:	43425355 	.word	0x43425355

08014214 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	32b0      	adds	r2, #176	; 0xb0
 801422a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801422e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d01e      	beq.n	8014274 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801423c:	687a      	ldr	r2, [r7, #4]
 801423e:	4293      	cmp	r3, r2
 8014240:	bf28      	it	cs
 8014242:	4613      	movcs	r3, r2
 8014244:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	1ad2      	subs	r2, r2, r3
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	2200      	movs	r2, #0
 801425a:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	2204      	movs	r2, #4
 8014262:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8014264:	4b05      	ldr	r3, [pc, #20]	; (801427c <MSC_BOT_SendData+0x68>)
 8014266:	7819      	ldrb	r1, [r3, #0]
 8014268:	693b      	ldr	r3, [r7, #16]
 801426a:	68ba      	ldr	r2, [r7, #8]
 801426c:	68f8      	ldr	r0, [r7, #12]
 801426e:	f007 f853 	bl	801b318 <USBD_LL_Transmit>
 8014272:	e000      	b.n	8014276 <MSC_BOT_SendData+0x62>
    return;
 8014274:	bf00      	nop
}
 8014276:	3718      	adds	r7, #24
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	2000008e 	.word	0x2000008e

08014280 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b084      	sub	sp, #16
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	460b      	mov	r3, r1
 801428a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	32b0      	adds	r2, #176	; 0xb0
 8014296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801429a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d01d      	beq.n	80142de <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	4a10      	ldr	r2, [pc, #64]	; (80142e8 <MSC_BOT_SendCSW+0x68>)
 80142a6:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  hmsc->csw.bStatus = CSW_Status;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	78fa      	ldrb	r2, [r7, #3]
 80142ae:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	2200      	movs	r2, #0
 80142b6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80142b8:	4b0c      	ldr	r3, [pc, #48]	; (80142ec <MSC_BOT_SendCSW+0x6c>)
 80142ba:	7819      	ldrb	r1, [r3, #0]
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 80142c2:	230d      	movs	r3, #13
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f007 f827 	bl	801b318 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80142ca:	4b09      	ldr	r3, [pc, #36]	; (80142f0 <MSC_BOT_SendCSW+0x70>)
 80142cc:	7819      	ldrb	r1, [r3, #0]
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 80142d4:	231f      	movs	r3, #31
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f007 f83f 	bl	801b35a <USBD_LL_PrepareReceive>
 80142dc:	e000      	b.n	80142e0 <MSC_BOT_SendCSW+0x60>
    return;
 80142de:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80142e0:	3710      	adds	r7, #16
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	53425355 	.word	0x53425355
 80142ec:	2000008e 	.word	0x2000008e
 80142f0:	2000008f 	.word	0x2000008f

080142f4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	32b0      	adds	r2, #176	; 0xb0
 8014306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801430a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d02a      	beq.n	8014368 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014318:	2b00      	cmp	r3, #0
 801431a:	d10e      	bne.n	801433a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8014322:	2b00      	cmp	r3, #0
 8014324:	d009      	beq.n	801433a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801432a:	2b00      	cmp	r3, #0
 801432c:	d105      	bne.n	801433a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801432e:	4b10      	ldr	r3, [pc, #64]	; (8014370 <MSC_BOT_Abort+0x7c>)
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	4619      	mov	r1, r3
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f006 ff66 	bl	801b206 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801433a:	4b0e      	ldr	r3, [pc, #56]	; (8014374 <MSC_BOT_Abort+0x80>)
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	4619      	mov	r1, r3
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f006 ff60 	bl	801b206 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	7a5b      	ldrb	r3, [r3, #9]
 801434a:	2b02      	cmp	r3, #2
 801434c:	d10d      	bne.n	801436a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801434e:	4b09      	ldr	r3, [pc, #36]	; (8014374 <MSC_BOT_Abort+0x80>)
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	4619      	mov	r1, r3
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f006 ff56 	bl	801b206 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801435a:	4b05      	ldr	r3, [pc, #20]	; (8014370 <MSC_BOT_Abort+0x7c>)
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	4619      	mov	r1, r3
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f006 ff50 	bl	801b206 <USBD_LL_StallEP>
 8014366:	e000      	b.n	801436a <MSC_BOT_Abort+0x76>
    return;
 8014368:	bf00      	nop
  }
}
 801436a:	3710      	adds	r7, #16
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	2000008f 	.word	0x2000008f
 8014374:	2000008e 	.word	0x2000008e

08014378 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	460b      	mov	r3, r1
 8014382:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	32b0      	adds	r2, #176	; 0xb0
 801438e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014392:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d01d      	beq.n	80143d6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	7a5b      	ldrb	r3, [r3, #9]
 801439e:	2b02      	cmp	r3, #2
 80143a0:	d10c      	bne.n	80143bc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80143a2:	4b10      	ldr	r3, [pc, #64]	; (80143e4 <MSC_BOT_CplClrFeature+0x6c>)
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	4619      	mov	r1, r3
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f006 ff2c 	bl	801b206 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80143ae:	4b0e      	ldr	r3, [pc, #56]	; (80143e8 <MSC_BOT_CplClrFeature+0x70>)
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	4619      	mov	r1, r3
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f006 ff26 	bl	801b206 <USBD_LL_StallEP>
 80143ba:	e00f      	b.n	80143dc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80143bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	da0a      	bge.n	80143da <MSC_BOT_CplClrFeature+0x62>
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	7a5b      	ldrb	r3, [r3, #9]
 80143c8:	2b01      	cmp	r3, #1
 80143ca:	d006      	beq.n	80143da <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80143cc:	2101      	movs	r1, #1
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f7ff ff56 	bl	8014280 <MSC_BOT_SendCSW>
 80143d4:	e002      	b.n	80143dc <MSC_BOT_CplClrFeature+0x64>
    return;
 80143d6:	bf00      	nop
 80143d8:	e000      	b.n	80143dc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80143da:	bf00      	nop
  }
}
 80143dc:	3710      	adds	r7, #16
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	bf00      	nop
 80143e4:	2000008e 	.word	0x2000008e
 80143e8:	2000008f 	.word	0x2000008f

080143ec <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b086      	sub	sp, #24
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	460b      	mov	r3, r1
 80143f6:	607a      	str	r2, [r7, #4]
 80143f8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	32b0      	adds	r2, #176	; 0xb0
 8014404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014408:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801440a:	693b      	ldr	r3, [r7, #16]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d102      	bne.n	8014416 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8014410:	f04f 33ff 	mov.w	r3, #4294967295
 8014414:	e168      	b.n	80146e8 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	2baa      	cmp	r3, #170	; 0xaa
 801441c:	f000 8144 	beq.w	80146a8 <SCSI_ProcessCmd+0x2bc>
 8014420:	2baa      	cmp	r3, #170	; 0xaa
 8014422:	f300 8153 	bgt.w	80146cc <SCSI_ProcessCmd+0x2e0>
 8014426:	2ba8      	cmp	r3, #168	; 0xa8
 8014428:	f000 812c 	beq.w	8014684 <SCSI_ProcessCmd+0x298>
 801442c:	2ba8      	cmp	r3, #168	; 0xa8
 801442e:	f300 814d 	bgt.w	80146cc <SCSI_ProcessCmd+0x2e0>
 8014432:	2b5a      	cmp	r3, #90	; 0x5a
 8014434:	f300 80c0 	bgt.w	80145b8 <SCSI_ProcessCmd+0x1cc>
 8014438:	2b00      	cmp	r3, #0
 801443a:	f2c0 8147 	blt.w	80146cc <SCSI_ProcessCmd+0x2e0>
 801443e:	2b5a      	cmp	r3, #90	; 0x5a
 8014440:	f200 8144 	bhi.w	80146cc <SCSI_ProcessCmd+0x2e0>
 8014444:	a201      	add	r2, pc, #4	; (adr r2, 801444c <SCSI_ProcessCmd+0x60>)
 8014446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801444a:	bf00      	nop
 801444c:	080145bf 	.word	0x080145bf
 8014450:	080146cd 	.word	0x080146cd
 8014454:	080146cd 	.word	0x080146cd
 8014458:	080145d1 	.word	0x080145d1
 801445c:	080146cd 	.word	0x080146cd
 8014460:	080146cd 	.word	0x080146cd
 8014464:	080146cd 	.word	0x080146cd
 8014468:	080146cd 	.word	0x080146cd
 801446c:	080146cd 	.word	0x080146cd
 8014470:	080146cd 	.word	0x080146cd
 8014474:	080146cd 	.word	0x080146cd
 8014478:	080146cd 	.word	0x080146cd
 801447c:	080146cd 	.word	0x080146cd
 8014480:	080146cd 	.word	0x080146cd
 8014484:	080146cd 	.word	0x080146cd
 8014488:	080146cd 	.word	0x080146cd
 801448c:	080146cd 	.word	0x080146cd
 8014490:	080146cd 	.word	0x080146cd
 8014494:	080145e3 	.word	0x080145e3
 8014498:	080146cd 	.word	0x080146cd
 801449c:	080146cd 	.word	0x080146cd
 80144a0:	080146cd 	.word	0x080146cd
 80144a4:	080146cd 	.word	0x080146cd
 80144a8:	080146cd 	.word	0x080146cd
 80144ac:	080146cd 	.word	0x080146cd
 80144b0:	080146cd 	.word	0x080146cd
 80144b4:	08014619 	.word	0x08014619
 80144b8:	080145f5 	.word	0x080145f5
 80144bc:	080146cd 	.word	0x080146cd
 80144c0:	080146cd 	.word	0x080146cd
 80144c4:	08014607 	.word	0x08014607
 80144c8:	080146cd 	.word	0x080146cd
 80144cc:	080146cd 	.word	0x080146cd
 80144d0:	080146cd 	.word	0x080146cd
 80144d4:	080146cd 	.word	0x080146cd
 80144d8:	0801463d 	.word	0x0801463d
 80144dc:	080146cd 	.word	0x080146cd
 80144e0:	0801464f 	.word	0x0801464f
 80144e4:	080146cd 	.word	0x080146cd
 80144e8:	080146cd 	.word	0x080146cd
 80144ec:	08014673 	.word	0x08014673
 80144f0:	080146cd 	.word	0x080146cd
 80144f4:	08014697 	.word	0x08014697
 80144f8:	080146cd 	.word	0x080146cd
 80144fc:	080146cd 	.word	0x080146cd
 8014500:	080146cd 	.word	0x080146cd
 8014504:	080146cd 	.word	0x080146cd
 8014508:	080146bb 	.word	0x080146bb
 801450c:	080146cd 	.word	0x080146cd
 8014510:	080146cd 	.word	0x080146cd
 8014514:	080146cd 	.word	0x080146cd
 8014518:	080146cd 	.word	0x080146cd
 801451c:	080146cd 	.word	0x080146cd
 8014520:	080146cd 	.word	0x080146cd
 8014524:	080146cd 	.word	0x080146cd
 8014528:	080146cd 	.word	0x080146cd
 801452c:	080146cd 	.word	0x080146cd
 8014530:	080146cd 	.word	0x080146cd
 8014534:	080146cd 	.word	0x080146cd
 8014538:	080146cd 	.word	0x080146cd
 801453c:	080146cd 	.word	0x080146cd
 8014540:	080146cd 	.word	0x080146cd
 8014544:	080146cd 	.word	0x080146cd
 8014548:	080146cd 	.word	0x080146cd
 801454c:	080146cd 	.word	0x080146cd
 8014550:	080146cd 	.word	0x080146cd
 8014554:	080146cd 	.word	0x080146cd
 8014558:	080146cd 	.word	0x080146cd
 801455c:	080146cd 	.word	0x080146cd
 8014560:	080146cd 	.word	0x080146cd
 8014564:	080146cd 	.word	0x080146cd
 8014568:	080146cd 	.word	0x080146cd
 801456c:	080146cd 	.word	0x080146cd
 8014570:	080146cd 	.word	0x080146cd
 8014574:	080146cd 	.word	0x080146cd
 8014578:	080146cd 	.word	0x080146cd
 801457c:	080146cd 	.word	0x080146cd
 8014580:	080146cd 	.word	0x080146cd
 8014584:	080146cd 	.word	0x080146cd
 8014588:	080146cd 	.word	0x080146cd
 801458c:	080146cd 	.word	0x080146cd
 8014590:	080146cd 	.word	0x080146cd
 8014594:	080146cd 	.word	0x080146cd
 8014598:	080146cd 	.word	0x080146cd
 801459c:	080146cd 	.word	0x080146cd
 80145a0:	080146cd 	.word	0x080146cd
 80145a4:	080146cd 	.word	0x080146cd
 80145a8:	080146cd 	.word	0x080146cd
 80145ac:	080146cd 	.word	0x080146cd
 80145b0:	080146cd 	.word	0x080146cd
 80145b4:	0801462b 	.word	0x0801462b
 80145b8:	2b9e      	cmp	r3, #158	; 0x9e
 80145ba:	d051      	beq.n	8014660 <SCSI_ProcessCmd+0x274>
 80145bc:	e086      	b.n	80146cc <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80145be:	7afb      	ldrb	r3, [r7, #11]
 80145c0:	687a      	ldr	r2, [r7, #4]
 80145c2:	4619      	mov	r1, r3
 80145c4:	68f8      	ldr	r0, [r7, #12]
 80145c6:	f000 f893 	bl	80146f0 <SCSI_TestUnitReady>
 80145ca:	4603      	mov	r3, r0
 80145cc:	75fb      	strb	r3, [r7, #23]
      break;
 80145ce:	e089      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80145d0:	7afb      	ldrb	r3, [r7, #11]
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	4619      	mov	r1, r3
 80145d6:	68f8      	ldr	r0, [r7, #12]
 80145d8:	f000 fb6e 	bl	8014cb8 <SCSI_RequestSense>
 80145dc:	4603      	mov	r3, r0
 80145de:	75fb      	strb	r3, [r7, #23]
      break;
 80145e0:	e080      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80145e2:	7afb      	ldrb	r3, [r7, #11]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	4619      	mov	r1, r3
 80145e8:	68f8      	ldr	r0, [r7, #12]
 80145ea:	f000 f8db 	bl	80147a4 <SCSI_Inquiry>
 80145ee:	4603      	mov	r3, r0
 80145f0:	75fb      	strb	r3, [r7, #23]
      break;
 80145f2:	e077      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80145f4:	7afb      	ldrb	r3, [r7, #11]
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	4619      	mov	r1, r3
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	f000 fc30 	bl	8014e60 <SCSI_StartStopUnit>
 8014600:	4603      	mov	r3, r0
 8014602:	75fb      	strb	r3, [r7, #23]
      break;
 8014604:	e06e      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014606:	7afb      	ldrb	r3, [r7, #11]
 8014608:	687a      	ldr	r2, [r7, #4]
 801460a:	4619      	mov	r1, r3
 801460c:	68f8      	ldr	r0, [r7, #12]
 801460e:	f000 fc7c 	bl	8014f0a <SCSI_AllowPreventRemovable>
 8014612:	4603      	mov	r3, r0
 8014614:	75fb      	strb	r3, [r7, #23]
      break;
 8014616:	e065      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014618:	7afb      	ldrb	r3, [r7, #11]
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	4619      	mov	r1, r3
 801461e:	68f8      	ldr	r0, [r7, #12]
 8014620:	f000 faea 	bl	8014bf8 <SCSI_ModeSense6>
 8014624:	4603      	mov	r3, r0
 8014626:	75fb      	strb	r3, [r7, #23]
      break;
 8014628:	e05c      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 801462a:	7afb      	ldrb	r3, [r7, #11]
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	4619      	mov	r1, r3
 8014630:	68f8      	ldr	r0, [r7, #12]
 8014632:	f000 fb11 	bl	8014c58 <SCSI_ModeSense10>
 8014636:	4603      	mov	r3, r0
 8014638:	75fb      	strb	r3, [r7, #23]
      break;
 801463a:	e053      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 801463c:	7afb      	ldrb	r3, [r7, #11]
 801463e:	687a      	ldr	r2, [r7, #4]
 8014640:	4619      	mov	r1, r3
 8014642:	68f8      	ldr	r0, [r7, #12]
 8014644:	f000 fa5d 	bl	8014b02 <SCSI_ReadFormatCapacity>
 8014648:	4603      	mov	r3, r0
 801464a:	75fb      	strb	r3, [r7, #23]
      break;
 801464c:	e04a      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801464e:	7afb      	ldrb	r3, [r7, #11]
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	4619      	mov	r1, r3
 8014654:	68f8      	ldr	r0, [r7, #12]
 8014656:	f000 f923 	bl	80148a0 <SCSI_ReadCapacity10>
 801465a:	4603      	mov	r3, r0
 801465c:	75fb      	strb	r3, [r7, #23]
      break;
 801465e:	e041      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014660:	7afb      	ldrb	r3, [r7, #11]
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	4619      	mov	r1, r3
 8014666:	68f8      	ldr	r0, [r7, #12]
 8014668:	f000 f998 	bl	801499c <SCSI_ReadCapacity16>
 801466c:	4603      	mov	r3, r0
 801466e:	75fb      	strb	r3, [r7, #23]
      break;
 8014670:	e038      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8014672:	7afb      	ldrb	r3, [r7, #11]
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	4619      	mov	r1, r3
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f000 fc73 	bl	8014f64 <SCSI_Read10>
 801467e:	4603      	mov	r3, r0
 8014680:	75fb      	strb	r3, [r7, #23]
      break;
 8014682:	e02f      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8014684:	7afb      	ldrb	r3, [r7, #11]
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	4619      	mov	r1, r3
 801468a:	68f8      	ldr	r0, [r7, #12]
 801468c:	f000 fd14 	bl	80150b8 <SCSI_Read12>
 8014690:	4603      	mov	r3, r0
 8014692:	75fb      	strb	r3, [r7, #23]
      break;
 8014694:	e026      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8014696:	7afb      	ldrb	r3, [r7, #11]
 8014698:	687a      	ldr	r2, [r7, #4]
 801469a:	4619      	mov	r1, r3
 801469c:	68f8      	ldr	r0, [r7, #12]
 801469e:	f000 fdbf 	bl	8015220 <SCSI_Write10>
 80146a2:	4603      	mov	r3, r0
 80146a4:	75fb      	strb	r3, [r7, #23]
      break;
 80146a6:	e01d      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80146a8:	7afb      	ldrb	r3, [r7, #11]
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	4619      	mov	r1, r3
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	f000 fe8c 	bl	80153cc <SCSI_Write12>
 80146b4:	4603      	mov	r3, r0
 80146b6:	75fb      	strb	r3, [r7, #23]
      break;
 80146b8:	e014      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80146ba:	7afb      	ldrb	r3, [r7, #11]
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	4619      	mov	r1, r3
 80146c0:	68f8      	ldr	r0, [r7, #12]
 80146c2:	f000 ff69 	bl	8015598 <SCSI_Verify10>
 80146c6:	4603      	mov	r3, r0
 80146c8:	75fb      	strb	r3, [r7, #23]
      break;
 80146ca:	e00b      	b.n	80146e4 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80146cc:	7af9      	ldrb	r1, [r7, #11]
 80146ce:	2320      	movs	r3, #32
 80146d0:	2205      	movs	r2, #5
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f000 fb76 	bl	8014dc4 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	2202      	movs	r2, #2
 80146dc:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80146de:	23ff      	movs	r3, #255	; 0xff
 80146e0:	75fb      	strb	r3, [r7, #23]
      break;
 80146e2:	bf00      	nop
  }

  return ret;
 80146e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3718      	adds	r7, #24
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b086      	sub	sp, #24
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	460b      	mov	r3, r1
 80146fa:	607a      	str	r2, [r7, #4]
 80146fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	32b0      	adds	r2, #176	; 0xb0
 8014708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801470c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d102      	bne.n	801471a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8014714:	f04f 33ff 	mov.w	r3, #4294967295
 8014718:	e03f      	b.n	801479a <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014720:	2b00      	cmp	r3, #0
 8014722:	d00a      	beq.n	801473a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801472a:	2320      	movs	r3, #32
 801472c:	2205      	movs	r2, #5
 801472e:	68f8      	ldr	r0, [r7, #12]
 8014730:	f000 fb48 	bl	8014dc4 <SCSI_SenseCode>

    return -1;
 8014734:	f04f 33ff 	mov.w	r3, #4294967295
 8014738:	e02f      	b.n	801479a <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014740:	2b02      	cmp	r3, #2
 8014742:	d10b      	bne.n	801475c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014744:	7af9      	ldrb	r1, [r7, #11]
 8014746:	233a      	movs	r3, #58	; 0x3a
 8014748:	2202      	movs	r2, #2
 801474a:	68f8      	ldr	r0, [r7, #12]
 801474c:	f000 fb3a 	bl	8014dc4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	2205      	movs	r2, #5
 8014754:	721a      	strb	r2, [r3, #8]
    return -1;
 8014756:	f04f 33ff 	mov.w	r3, #4294967295
 801475a:	e01e      	b.n	801479a <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014762:	68fa      	ldr	r2, [r7, #12]
 8014764:	33b0      	adds	r3, #176	; 0xb0
 8014766:	009b      	lsls	r3, r3, #2
 8014768:	4413      	add	r3, r2
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	689b      	ldr	r3, [r3, #8]
 801476e:	7afa      	ldrb	r2, [r7, #11]
 8014770:	4610      	mov	r0, r2
 8014772:	4798      	blx	r3
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d00b      	beq.n	8014792 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801477a:	7af9      	ldrb	r1, [r7, #11]
 801477c:	233a      	movs	r3, #58	; 0x3a
 801477e:	2202      	movs	r2, #2
 8014780:	68f8      	ldr	r0, [r7, #12]
 8014782:	f000 fb1f 	bl	8014dc4 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	2205      	movs	r2, #5
 801478a:	721a      	strb	r2, [r3, #8]

    return -1;
 801478c:	f04f 33ff 	mov.w	r3, #4294967295
 8014790:	e003      	b.n	801479a <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	2200      	movs	r2, #0
 8014796:	60da      	str	r2, [r3, #12]

  return 0;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	3718      	adds	r7, #24
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
	...

080147a4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b088      	sub	sp, #32
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	460b      	mov	r3, r1
 80147ae:	607a      	str	r2, [r7, #4]
 80147b0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	32b0      	adds	r2, #176	; 0xb0
 80147bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147c0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80147c2:	69bb      	ldr	r3, [r7, #24]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d102      	bne.n	80147ce <SCSI_Inquiry+0x2a>
  {
    return -1;
 80147c8:	f04f 33ff 	mov.w	r3, #4294967295
 80147cc:	e05f      	b.n	801488e <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80147ce:	69bb      	ldr	r3, [r7, #24]
 80147d0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d10a      	bne.n	80147ee <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80147d8:	69bb      	ldr	r3, [r7, #24]
 80147da:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80147de:	2320      	movs	r3, #32
 80147e0:	2205      	movs	r2, #5
 80147e2:	68f8      	ldr	r0, [r7, #12]
 80147e4:	f000 faee 	bl	8014dc4 <SCSI_SenseCode>
    return -1;
 80147e8:	f04f 33ff 	mov.w	r3, #4294967295
 80147ec:	e04f      	b.n	801488e <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	3301      	adds	r3, #1
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	f003 0301 	and.w	r3, r3, #1
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d020      	beq.n	801483e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	3302      	adds	r3, #2
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d105      	bne.n	8014812 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8014806:	2206      	movs	r2, #6
 8014808:	4923      	ldr	r1, [pc, #140]	; (8014898 <SCSI_Inquiry+0xf4>)
 801480a:	69b8      	ldr	r0, [r7, #24]
 801480c:	f001 f84a 	bl	80158a4 <SCSI_UpdateBotData>
 8014810:	e03c      	b.n	801488c <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	3302      	adds	r3, #2
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	2b80      	cmp	r3, #128	; 0x80
 801481a:	d105      	bne.n	8014828 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801481c:	2208      	movs	r2, #8
 801481e:	491f      	ldr	r1, [pc, #124]	; (801489c <SCSI_Inquiry+0xf8>)
 8014820:	69b8      	ldr	r0, [r7, #24]
 8014822:	f001 f83f 	bl	80158a4 <SCSI_UpdateBotData>
 8014826:	e031      	b.n	801488c <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801482e:	2324      	movs	r3, #36	; 0x24
 8014830:	2205      	movs	r2, #5
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f000 fac6 	bl	8014dc4 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014838:	f04f 33ff 	mov.w	r3, #4294967295
 801483c:	e027      	b.n	801488e <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014844:	68fa      	ldr	r2, [r7, #12]
 8014846:	33b0      	adds	r3, #176	; 0xb0
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	4413      	add	r3, r2
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	69d9      	ldr	r1, [r3, #28]
 8014850:	7afa      	ldrb	r2, [r7, #11]
 8014852:	4613      	mov	r3, r2
 8014854:	00db      	lsls	r3, r3, #3
 8014856:	4413      	add	r3, r2
 8014858:	009b      	lsls	r3, r3, #2
 801485a:	440b      	add	r3, r1
 801485c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	3304      	adds	r3, #4
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	b29b      	uxth	r3, r3
 8014866:	3305      	adds	r3, #5
 8014868:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	3304      	adds	r3, #4
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	b29b      	uxth	r3, r3
 8014872:	8bfa      	ldrh	r2, [r7, #30]
 8014874:	429a      	cmp	r2, r3
 8014876:	d303      	bcc.n	8014880 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	3304      	adds	r3, #4
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014880:	8bfb      	ldrh	r3, [r7, #30]
 8014882:	461a      	mov	r2, r3
 8014884:	6979      	ldr	r1, [r7, #20]
 8014886:	69b8      	ldr	r0, [r7, #24]
 8014888:	f001 f80c 	bl	80158a4 <SCSI_UpdateBotData>
  }

  return 0;
 801488c:	2300      	movs	r3, #0
}
 801488e:	4618      	mov	r0, r3
 8014890:	3720      	adds	r7, #32
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	20000090 	.word	0x20000090
 801489c:	20000098 	.word	0x20000098

080148a0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b086      	sub	sp, #24
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	60f8      	str	r0, [r7, #12]
 80148a8:	460b      	mov	r3, r1
 80148aa:	607a      	str	r2, [r7, #4]
 80148ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	32b0      	adds	r2, #176	; 0xb0
 80148b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d102      	bne.n	80148ca <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80148c4:	f04f 33ff 	mov.w	r3, #4294967295
 80148c8:	e064      	b.n	8014994 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148d0:	68fa      	ldr	r2, [r7, #12]
 80148d2:	33b0      	adds	r3, #176	; 0xb0
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	4413      	add	r3, r2
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	697a      	ldr	r2, [r7, #20]
 80148de:	f602 0168 	addw	r1, r2, #2152	; 0x868
 80148e2:	697a      	ldr	r2, [r7, #20]
 80148e4:	f602 0264 	addw	r2, r2, #2148	; 0x864
 80148e8:	7af8      	ldrb	r0, [r7, #11]
 80148ea:	4798      	blx	r3
 80148ec:	4603      	mov	r3, r0
 80148ee:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80148f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d104      	bne.n	8014902 <SCSI_ReadCapacity10+0x62>
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80148fe:	2b02      	cmp	r3, #2
 8014900:	d108      	bne.n	8014914 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014902:	7af9      	ldrb	r1, [r7, #11]
 8014904:	233a      	movs	r3, #58	; 0x3a
 8014906:	2202      	movs	r2, #2
 8014908:	68f8      	ldr	r0, [r7, #12]
 801490a:	f000 fa5b 	bl	8014dc4 <SCSI_SenseCode>
    return -1;
 801490e:	f04f 33ff 	mov.w	r3, #4294967295
 8014912:	e03f      	b.n	8014994 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 801491a:	3b01      	subs	r3, #1
 801491c:	0e1b      	lsrs	r3, r3, #24
 801491e:	b2da      	uxtb	r2, r3
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 801492a:	3b01      	subs	r3, #1
 801492c:	0c1b      	lsrs	r3, r3, #16
 801492e:	b2da      	uxtb	r2, r3
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 801493a:	3b01      	subs	r3, #1
 801493c:	0a1b      	lsrs	r3, r3, #8
 801493e:	b2da      	uxtb	r2, r3
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 801494a:	b2db      	uxtb	r3, r3
 801494c:	3b01      	subs	r3, #1
 801494e:	b2da      	uxtb	r2, r3
 8014950:	697b      	ldr	r3, [r7, #20]
 8014952:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801495a:	161b      	asrs	r3, r3, #24
 801495c:	b2da      	uxtb	r2, r3
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014962:	697b      	ldr	r3, [r7, #20]
 8014964:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014968:	141b      	asrs	r3, r3, #16
 801496a:	b2da      	uxtb	r2, r3
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014976:	0a1b      	lsrs	r3, r3, #8
 8014978:	b29b      	uxth	r3, r3
 801497a:	b2da      	uxtb	r2, r3
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014986:	b2da      	uxtb	r2, r3
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	2208      	movs	r2, #8
 8014990:	60da      	str	r2, [r3, #12]

  return 0;
 8014992:	2300      	movs	r3, #0

}
 8014994:	4618      	mov	r0, r3
 8014996:	3718      	adds	r7, #24
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b088      	sub	sp, #32
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	60f8      	str	r0, [r7, #12]
 80149a4:	460b      	mov	r3, r1
 80149a6:	607a      	str	r2, [r7, #4]
 80149a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	32b0      	adds	r2, #176	; 0xb0
 80149b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149b8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80149ba:	69bb      	ldr	r3, [r7, #24]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d102      	bne.n	80149c6 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 80149c0:	f04f 33ff 	mov.w	r3, #4294967295
 80149c4:	e099      	b.n	8014afa <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149cc:	68fa      	ldr	r2, [r7, #12]
 80149ce:	33b0      	adds	r3, #176	; 0xb0
 80149d0:	009b      	lsls	r3, r3, #2
 80149d2:	4413      	add	r3, r2
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	69ba      	ldr	r2, [r7, #24]
 80149da:	f602 0168 	addw	r1, r2, #2152	; 0x868
 80149de:	69ba      	ldr	r2, [r7, #24]
 80149e0:	f602 0264 	addw	r2, r2, #2148	; 0x864
 80149e4:	7af8      	ldrb	r0, [r7, #11]
 80149e6:	4798      	blx	r3
 80149e8:	4603      	mov	r3, r0
 80149ea:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80149ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d104      	bne.n	80149fe <SCSI_ReadCapacity16+0x62>
 80149f4:	69bb      	ldr	r3, [r7, #24]
 80149f6:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80149fa:	2b02      	cmp	r3, #2
 80149fc:	d108      	bne.n	8014a10 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149fe:	7af9      	ldrb	r1, [r7, #11]
 8014a00:	233a      	movs	r3, #58	; 0x3a
 8014a02:	2202      	movs	r2, #2
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f000 f9dd 	bl	8014dc4 <SCSI_SenseCode>
    return -1;
 8014a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a0e:	e074      	b.n	8014afa <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	330a      	adds	r3, #10
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	330b      	adds	r3, #11
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014a20:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	330c      	adds	r3, #12
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014a2a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	320d      	adds	r2, #13
 8014a30:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014a32:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014a34:	69bb      	ldr	r3, [r7, #24]
 8014a36:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014a38:	2300      	movs	r3, #0
 8014a3a:	77fb      	strb	r3, [r7, #31]
 8014a3c:	e007      	b.n	8014a4e <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8014a3e:	7ffb      	ldrb	r3, [r7, #31]
 8014a40:	69ba      	ldr	r2, [r7, #24]
 8014a42:	4413      	add	r3, r2
 8014a44:	2200      	movs	r2, #0
 8014a46:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014a48:	7ffb      	ldrb	r3, [r7, #31]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	77fb      	strb	r3, [r7, #31]
 8014a4e:	7ffa      	ldrb	r2, [r7, #31]
 8014a50:	69bb      	ldr	r3, [r7, #24]
 8014a52:	68db      	ldr	r3, [r3, #12]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d3f2      	bcc.n	8014a3e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014a58:	69bb      	ldr	r3, [r7, #24]
 8014a5a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014a5e:	3b01      	subs	r3, #1
 8014a60:	0e1b      	lsrs	r3, r3, #24
 8014a62:	b2da      	uxtb	r2, r3
 8014a64:	69bb      	ldr	r3, [r7, #24]
 8014a66:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014a68:	69bb      	ldr	r3, [r7, #24]
 8014a6a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014a6e:	3b01      	subs	r3, #1
 8014a70:	0c1b      	lsrs	r3, r3, #16
 8014a72:	b2da      	uxtb	r2, r3
 8014a74:	69bb      	ldr	r3, [r7, #24]
 8014a76:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014a78:	69bb      	ldr	r3, [r7, #24]
 8014a7a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014a7e:	3b01      	subs	r3, #1
 8014a80:	0a1b      	lsrs	r3, r3, #8
 8014a82:	b2da      	uxtb	r2, r3
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014a88:	69bb      	ldr	r3, [r7, #24]
 8014a8a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	3b01      	subs	r3, #1
 8014a92:	b2da      	uxtb	r2, r3
 8014a94:	69bb      	ldr	r3, [r7, #24]
 8014a96:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014a9e:	161b      	asrs	r3, r3, #24
 8014aa0:	b2da      	uxtb	r2, r3
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014aac:	141b      	asrs	r3, r3, #16
 8014aae:	b2da      	uxtb	r2, r3
 8014ab0:	69bb      	ldr	r3, [r7, #24]
 8014ab2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014ab4:	69bb      	ldr	r3, [r7, #24]
 8014ab6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014aba:	0a1b      	lsrs	r3, r3, #8
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	b2da      	uxtb	r2, r3
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8014ac4:	69bb      	ldr	r3, [r7, #24]
 8014ac6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014aca:	b2da      	uxtb	r2, r3
 8014acc:	69bb      	ldr	r3, [r7, #24]
 8014ace:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	330a      	adds	r3, #10
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	330b      	adds	r3, #11
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014ae0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	330c      	adds	r3, #12
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014aea:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014aec:	687a      	ldr	r2, [r7, #4]
 8014aee:	320d      	adds	r2, #13
 8014af0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014af2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014af4:	69bb      	ldr	r3, [r7, #24]
 8014af6:	60da      	str	r2, [r3, #12]

  return 0;
 8014af8:	2300      	movs	r3, #0
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3720      	adds	r7, #32
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}

08014b02 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b02:	b580      	push	{r7, lr}
 8014b04:	b088      	sub	sp, #32
 8014b06:	af00      	add	r7, sp, #0
 8014b08:	60f8      	str	r0, [r7, #12]
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	607a      	str	r2, [r7, #4]
 8014b0e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	32b0      	adds	r2, #176	; 0xb0
 8014b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b1e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014b20:	69bb      	ldr	r3, [r7, #24]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d102      	bne.n	8014b2c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8014b26:	f04f 33ff 	mov.w	r3, #4294967295
 8014b2a:	e061      	b.n	8014bf0 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b32:	68fa      	ldr	r2, [r7, #12]
 8014b34:	33b0      	adds	r3, #176	; 0xb0
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	4413      	add	r3, r2
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	f107 0214 	add.w	r2, r7, #20
 8014b42:	f107 0110 	add.w	r1, r7, #16
 8014b46:	7af8      	ldrb	r0, [r7, #11]
 8014b48:	4798      	blx	r3
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d104      	bne.n	8014b60 <SCSI_ReadFormatCapacity+0x5e>
 8014b56:	69bb      	ldr	r3, [r7, #24]
 8014b58:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014b5c:	2b02      	cmp	r3, #2
 8014b5e:	d108      	bne.n	8014b72 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b60:	7af9      	ldrb	r1, [r7, #11]
 8014b62:	233a      	movs	r3, #58	; 0x3a
 8014b64:	2202      	movs	r2, #2
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	f000 f92c 	bl	8014dc4 <SCSI_SenseCode>
    return -1;
 8014b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b70:	e03e      	b.n	8014bf0 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8014b72:	2300      	movs	r3, #0
 8014b74:	83fb      	strh	r3, [r7, #30]
 8014b76:	e007      	b.n	8014b88 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8014b78:	8bfb      	ldrh	r3, [r7, #30]
 8014b7a:	69ba      	ldr	r2, [r7, #24]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	2200      	movs	r2, #0
 8014b80:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8014b82:	8bfb      	ldrh	r3, [r7, #30]
 8014b84:	3301      	adds	r3, #1
 8014b86:	83fb      	strh	r3, [r7, #30]
 8014b88:	8bfb      	ldrh	r3, [r7, #30]
 8014b8a:	2b0b      	cmp	r3, #11
 8014b8c:	d9f4      	bls.n	8014b78 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	2208      	movs	r2, #8
 8014b92:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	3b01      	subs	r3, #1
 8014b98:	0e1b      	lsrs	r3, r3, #24
 8014b9a:	b2da      	uxtb	r2, r3
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8014ba0:	693b      	ldr	r3, [r7, #16]
 8014ba2:	3b01      	subs	r3, #1
 8014ba4:	0c1b      	lsrs	r3, r3, #16
 8014ba6:	b2da      	uxtb	r2, r3
 8014ba8:	69bb      	ldr	r3, [r7, #24]
 8014baa:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	0a1b      	lsrs	r3, r3, #8
 8014bb2:	b2da      	uxtb	r2, r3
 8014bb4:	69bb      	ldr	r3, [r7, #24]
 8014bb6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	3b01      	subs	r3, #1
 8014bbe:	b2da      	uxtb	r2, r3
 8014bc0:	69bb      	ldr	r3, [r7, #24]
 8014bc2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8014bc4:	69bb      	ldr	r3, [r7, #24]
 8014bc6:	2202      	movs	r2, #2
 8014bc8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8014bca:	8abb      	ldrh	r3, [r7, #20]
 8014bcc:	141b      	asrs	r3, r3, #16
 8014bce:	b2da      	uxtb	r2, r3
 8014bd0:	69bb      	ldr	r3, [r7, #24]
 8014bd2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8014bd4:	8abb      	ldrh	r3, [r7, #20]
 8014bd6:	0a1b      	lsrs	r3, r3, #8
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	b2da      	uxtb	r2, r3
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8014be0:	8abb      	ldrh	r3, [r7, #20]
 8014be2:	b2da      	uxtb	r2, r3
 8014be4:	69bb      	ldr	r3, [r7, #24]
 8014be6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014be8:	69bb      	ldr	r3, [r7, #24]
 8014bea:	220c      	movs	r2, #12
 8014bec:	60da      	str	r2, [r3, #12]

  return 0;
 8014bee:	2300      	movs	r3, #0
}
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	3720      	adds	r7, #32
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}

08014bf8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b086      	sub	sp, #24
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	60f8      	str	r0, [r7, #12]
 8014c00:	460b      	mov	r3, r1
 8014c02:	607a      	str	r2, [r7, #4]
 8014c04:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	32b0      	adds	r2, #176	; 0xb0
 8014c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c14:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8014c16:	2317      	movs	r3, #23
 8014c18:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d102      	bne.n	8014c26 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8014c20:	f04f 33ff 	mov.w	r3, #4294967295
 8014c24:	e011      	b.n	8014c4a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	3304      	adds	r3, #4
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	b29b      	uxth	r3, r3
 8014c2e:	8afa      	ldrh	r2, [r7, #22]
 8014c30:	429a      	cmp	r2, r3
 8014c32:	d303      	bcc.n	8014c3c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	3304      	adds	r3, #4
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014c3c:	8afb      	ldrh	r3, [r7, #22]
 8014c3e:	461a      	mov	r2, r3
 8014c40:	4904      	ldr	r1, [pc, #16]	; (8014c54 <SCSI_ModeSense6+0x5c>)
 8014c42:	6938      	ldr	r0, [r7, #16]
 8014c44:	f000 fe2e 	bl	80158a4 <SCSI_UpdateBotData>

  return 0;
 8014c48:	2300      	movs	r3, #0
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3718      	adds	r7, #24
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	200000a0 	.word	0x200000a0

08014c58 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b086      	sub	sp, #24
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	460b      	mov	r3, r1
 8014c62:	607a      	str	r2, [r7, #4]
 8014c64:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	32b0      	adds	r2, #176	; 0xb0
 8014c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c74:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8014c76:	231b      	movs	r3, #27
 8014c78:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8014c7a:	693b      	ldr	r3, [r7, #16]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d102      	bne.n	8014c86 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8014c80:	f04f 33ff 	mov.w	r3, #4294967295
 8014c84:	e011      	b.n	8014caa <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	3308      	adds	r3, #8
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	8afa      	ldrh	r2, [r7, #22]
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d303      	bcc.n	8014c9c <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	3308      	adds	r3, #8
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014c9c:	8afb      	ldrh	r3, [r7, #22]
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	4904      	ldr	r1, [pc, #16]	; (8014cb4 <SCSI_ModeSense10+0x5c>)
 8014ca2:	6938      	ldr	r0, [r7, #16]
 8014ca4:	f000 fdfe 	bl	80158a4 <SCSI_UpdateBotData>

  return 0;
 8014ca8:	2300      	movs	r3, #0
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	3718      	adds	r7, #24
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	200000b8 	.word	0x200000b8

08014cb8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b086      	sub	sp, #24
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	60f8      	str	r0, [r7, #12]
 8014cc0:	460b      	mov	r3, r1
 8014cc2:	607a      	str	r2, [r7, #4]
 8014cc4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	32b0      	adds	r2, #176	; 0xb0
 8014cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cd4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d102      	bne.n	8014ce2 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8014cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8014ce0:	e06c      	b.n	8014dbc <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d10a      	bne.n	8014d02 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014cf2:	2320      	movs	r3, #32
 8014cf4:	2205      	movs	r2, #5
 8014cf6:	68f8      	ldr	r0, [r7, #12]
 8014cf8:	f000 f864 	bl	8014dc4 <SCSI_SenseCode>
    return -1;
 8014cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8014d00:	e05c      	b.n	8014dbc <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014d02:	2300      	movs	r3, #0
 8014d04:	75fb      	strb	r3, [r7, #23]
 8014d06:	e007      	b.n	8014d18 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8014d08:	7dfb      	ldrb	r3, [r7, #23]
 8014d0a:	693a      	ldr	r2, [r7, #16]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	2200      	movs	r2, #0
 8014d10:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014d12:	7dfb      	ldrb	r3, [r7, #23]
 8014d14:	3301      	adds	r3, #1
 8014d16:	75fb      	strb	r3, [r7, #23]
 8014d18:	7dfb      	ldrb	r3, [r7, #23]
 8014d1a:	2b11      	cmp	r3, #17
 8014d1c:	d9f4      	bls.n	8014d08 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	2270      	movs	r2, #112	; 0x70
 8014d22:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	220c      	movs	r2, #12
 8014d28:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014d2a:	693b      	ldr	r3, [r7, #16]
 8014d2c:	f893 2860 	ldrb.w	r2, [r3, #2144]	; 0x860
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d031      	beq.n	8014d9e <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014d40:	461a      	mov	r2, r3
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8014d48:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014d56:	693a      	ldr	r2, [r7, #16]
 8014d58:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014d5c:	00db      	lsls	r3, r3, #3
 8014d5e:	4413      	add	r3, r2
 8014d60:	791a      	ldrb	r2, [r3, #4]
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014d6c:	693a      	ldr	r2, [r7, #16]
 8014d6e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014d72:	00db      	lsls	r3, r3, #3
 8014d74:	4413      	add	r3, r2
 8014d76:	795a      	ldrb	r2, [r3, #5]
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014d82:	3301      	adds	r3, #1
 8014d84:	b2da      	uxtb	r2, r3
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8014d92:	2b04      	cmp	r3, #4
 8014d94:	d103      	bne.n	8014d9e <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8014d9e:	693b      	ldr	r3, [r7, #16]
 8014da0:	2212      	movs	r2, #18
 8014da2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	3304      	adds	r3, #4
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	2b12      	cmp	r3, #18
 8014dac:	d805      	bhi.n	8014dba <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	3304      	adds	r3, #4
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	461a      	mov	r2, r3
 8014db6:	693b      	ldr	r3, [r7, #16]
 8014db8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8014dba:	2300      	movs	r3, #0
}
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	3718      	adds	r7, #24
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}

08014dc4 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b085      	sub	sp, #20
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	4608      	mov	r0, r1
 8014dce:	4611      	mov	r1, r2
 8014dd0:	461a      	mov	r2, r3
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	70fb      	strb	r3, [r7, #3]
 8014dd6:	460b      	mov	r3, r1
 8014dd8:	70bb      	strb	r3, [r7, #2]
 8014dda:	4613      	mov	r3, r2
 8014ddc:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	32b0      	adds	r2, #176	; 0xb0
 8014de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dec:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d02f      	beq.n	8014e54 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8014e02:	78b9      	ldrb	r1, [r7, #2]
 8014e04:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014e0e:	68fa      	ldr	r2, [r7, #12]
 8014e10:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014e14:	00db      	lsls	r3, r3, #3
 8014e16:	4413      	add	r3, r2
 8014e18:	787a      	ldrb	r2, [r7, #1]
 8014e1a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014e22:	68fa      	ldr	r2, [r7, #12]
 8014e24:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8014e28:	00db      	lsls	r3, r3, #3
 8014e2a:	4413      	add	r3, r2
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014e36:	3301      	adds	r3, #1
 8014e38:	b2da      	uxtb	r2, r3
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8014e46:	2b04      	cmp	r3, #4
 8014e48:	d105      	bne.n	8014e56 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8014e52:	e000      	b.n	8014e56 <SCSI_SenseCode+0x92>
    return;
 8014e54:	bf00      	nop
  }
}
 8014e56:	3714      	adds	r7, #20
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5e:	4770      	bx	lr

08014e60 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b086      	sub	sp, #24
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	460b      	mov	r3, r1
 8014e6a:	607a      	str	r2, [r7, #4]
 8014e6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	32b0      	adds	r2, #176	; 0xb0
 8014e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e7c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d102      	bne.n	8014e8a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8014e84:	f04f 33ff 	mov.w	r3, #4294967295
 8014e88:	e03b      	b.n	8014f02 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014e8a:	697b      	ldr	r3, [r7, #20]
 8014e8c:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	d10f      	bne.n	8014eb4 <SCSI_StartStopUnit+0x54>
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	3304      	adds	r3, #4
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	f003 0303 	and.w	r3, r3, #3
 8014e9e:	2b02      	cmp	r3, #2
 8014ea0:	d108      	bne.n	8014eb4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014ea2:	7af9      	ldrb	r1, [r7, #11]
 8014ea4:	2324      	movs	r3, #36	; 0x24
 8014ea6:	2205      	movs	r2, #5
 8014ea8:	68f8      	ldr	r0, [r7, #12]
 8014eaa:	f7ff ff8b 	bl	8014dc4 <SCSI_SenseCode>

    return -1;
 8014eae:	f04f 33ff 	mov.w	r3, #4294967295
 8014eb2:	e026      	b.n	8014f02 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	3304      	adds	r3, #4
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	f003 0303 	and.w	r3, r3, #3
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d104      	bne.n	8014ecc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014ec2:	697b      	ldr	r3, [r7, #20]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014eca:	e016      	b.n	8014efa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	3304      	adds	r3, #4
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	f003 0303 	and.w	r3, r3, #3
 8014ed6:	2b02      	cmp	r3, #2
 8014ed8:	d104      	bne.n	8014ee4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	2202      	movs	r2, #2
 8014ede:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014ee2:	e00a      	b.n	8014efa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	3304      	adds	r3, #4
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	f003 0303 	and.w	r3, r3, #3
 8014eee:	2b03      	cmp	r3, #3
 8014ef0:	d103      	bne.n	8014efa <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	2200      	movs	r2, #0
 8014efe:	60da      	str	r2, [r3, #12]

  return 0;
 8014f00:	2300      	movs	r3, #0
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	3718      	adds	r7, #24
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}

08014f0a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f0a:	b480      	push	{r7}
 8014f0c:	b087      	sub	sp, #28
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	60f8      	str	r0, [r7, #12]
 8014f12:	460b      	mov	r3, r1
 8014f14:	607a      	str	r2, [r7, #4]
 8014f16:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	32b0      	adds	r2, #176	; 0xb0
 8014f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f26:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d102      	bne.n	8014f34 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8014f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f32:	e011      	b.n	8014f58 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	3304      	adds	r3, #4
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d104      	bne.n	8014f48 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	2200      	movs	r2, #0
 8014f42:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8014f46:	e003      	b.n	8014f50 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }

  hmsc->bot_data_length = 0U;
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	2200      	movs	r2, #0
 8014f54:	60da      	str	r2, [r3, #12]

  return 0;
 8014f56:	2300      	movs	r3, #0
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	371c      	adds	r7, #28
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f62:	4770      	bx	lr

08014f64 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b086      	sub	sp, #24
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	460b      	mov	r3, r1
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	32b0      	adds	r2, #176	; 0xb0
 8014f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f80:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014f82:	697b      	ldr	r3, [r7, #20]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d102      	bne.n	8014f8e <SCSI_Read10+0x2a>
  {
    return -1;
 8014f88:	f04f 33ff 	mov.w	r3, #4294967295
 8014f8c:	e090      	b.n	80150b0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	7a1b      	ldrb	r3, [r3, #8]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	f040 8082 	bne.w	801509c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014f9e:	b25b      	sxtb	r3, r3
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	db0a      	blt.n	8014fba <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014faa:	2320      	movs	r3, #32
 8014fac:	2205      	movs	r2, #5
 8014fae:	68f8      	ldr	r0, [r7, #12]
 8014fb0:	f7ff ff08 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8014fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb8:	e07a      	b.n	80150b0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014fc0:	2b02      	cmp	r3, #2
 8014fc2:	d108      	bne.n	8014fd6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014fc4:	7af9      	ldrb	r1, [r7, #11]
 8014fc6:	233a      	movs	r3, #58	; 0x3a
 8014fc8:	2202      	movs	r2, #2
 8014fca:	68f8      	ldr	r0, [r7, #12]
 8014fcc:	f7ff fefa 	bl	8014dc4 <SCSI_SenseCode>

      return -1;
 8014fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd4:	e06c      	b.n	80150b0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fdc:	68fa      	ldr	r2, [r7, #12]
 8014fde:	33b0      	adds	r3, #176	; 0xb0
 8014fe0:	009b      	lsls	r3, r3, #2
 8014fe2:	4413      	add	r3, r2
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	689b      	ldr	r3, [r3, #8]
 8014fe8:	7afa      	ldrb	r2, [r7, #11]
 8014fea:	4610      	mov	r0, r2
 8014fec:	4798      	blx	r3
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d008      	beq.n	8015006 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014ff4:	7af9      	ldrb	r1, [r7, #11]
 8014ff6:	233a      	movs	r3, #58	; 0x3a
 8014ff8:	2202      	movs	r2, #2
 8014ffa:	68f8      	ldr	r0, [r7, #12]
 8014ffc:	f7ff fee2 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8015000:	f04f 33ff 	mov.w	r3, #4294967295
 8015004:	e054      	b.n	80150b0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	3302      	adds	r3, #2
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	3303      	adds	r3, #3
 8015012:	781b      	ldrb	r3, [r3, #0]
 8015014:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015016:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	3304      	adds	r3, #4
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015020:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	3205      	adds	r2, #5
 8015026:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015028:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	3307      	adds	r3, #7
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	021b      	lsls	r3, r3, #8
 8015038:	687a      	ldr	r2, [r7, #4]
 801503a:	3208      	adds	r2, #8
 801503c:	7812      	ldrb	r2, [r2, #0]
 801503e:	431a      	orrs	r2, r3
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015052:	7af9      	ldrb	r1, [r7, #11]
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f000 fadc 	bl	8015612 <SCSI_CheckAddressRange>
 801505a:	4603      	mov	r3, r0
 801505c:	2b00      	cmp	r3, #0
 801505e:	da02      	bge.n	8015066 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015060:	f04f 33ff 	mov.w	r3, #4294967295
 8015064:	e024      	b.n	80150b0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015072:	6979      	ldr	r1, [r7, #20]
 8015074:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8015078:	fb01 f303 	mul.w	r3, r1, r3
 801507c:	429a      	cmp	r2, r3
 801507e:	d00a      	beq.n	8015096 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015086:	2320      	movs	r3, #32
 8015088:	2205      	movs	r2, #5
 801508a:	68f8      	ldr	r0, [r7, #12]
 801508c:	f7ff fe9a 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8015090:	f04f 33ff 	mov.w	r3, #4294967295
 8015094:	e00c      	b.n	80150b0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8015096:	697b      	ldr	r3, [r7, #20]
 8015098:	2202      	movs	r2, #2
 801509a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801509c:	697b      	ldr	r3, [r7, #20]
 801509e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80150a2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80150a4:	7afb      	ldrb	r3, [r7, #11]
 80150a6:	4619      	mov	r1, r3
 80150a8:	68f8      	ldr	r0, [r7, #12]
 80150aa:	f000 fadf 	bl	801566c <SCSI_ProcessRead>
 80150ae:	4603      	mov	r3, r0
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b086      	sub	sp, #24
 80150bc:	af00      	add	r7, sp, #0
 80150be:	60f8      	str	r0, [r7, #12]
 80150c0:	460b      	mov	r3, r1
 80150c2:	607a      	str	r2, [r7, #4]
 80150c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	32b0      	adds	r2, #176	; 0xb0
 80150d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d102      	bne.n	80150e2 <SCSI_Read12+0x2a>
  {
    return -1;
 80150dc:	f04f 33ff 	mov.w	r3, #4294967295
 80150e0:	e09a      	b.n	8015218 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	7a1b      	ldrb	r3, [r3, #8]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	f040 808c 	bne.w	8015204 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 80150f2:	b25b      	sxtb	r3, r3
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	db0a      	blt.n	801510e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80150f8:	697b      	ldr	r3, [r7, #20]
 80150fa:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80150fe:	2320      	movs	r3, #32
 8015100:	2205      	movs	r2, #5
 8015102:	68f8      	ldr	r0, [r7, #12]
 8015104:	f7ff fe5e 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8015108:	f04f 33ff 	mov.w	r3, #4294967295
 801510c:	e084      	b.n	8015218 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8015114:	2b02      	cmp	r3, #2
 8015116:	d108      	bne.n	801512a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015118:	7af9      	ldrb	r1, [r7, #11]
 801511a:	233a      	movs	r3, #58	; 0x3a
 801511c:	2202      	movs	r2, #2
 801511e:	68f8      	ldr	r0, [r7, #12]
 8015120:	f7ff fe50 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8015124:	f04f 33ff 	mov.w	r3, #4294967295
 8015128:	e076      	b.n	8015218 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015130:	68fa      	ldr	r2, [r7, #12]
 8015132:	33b0      	adds	r3, #176	; 0xb0
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	4413      	add	r3, r2
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	689b      	ldr	r3, [r3, #8]
 801513c:	7afa      	ldrb	r2, [r7, #11]
 801513e:	4610      	mov	r0, r2
 8015140:	4798      	blx	r3
 8015142:	4603      	mov	r3, r0
 8015144:	2b00      	cmp	r3, #0
 8015146:	d008      	beq.n	801515a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015148:	7af9      	ldrb	r1, [r7, #11]
 801514a:	233a      	movs	r3, #58	; 0x3a
 801514c:	2202      	movs	r2, #2
 801514e:	68f8      	ldr	r0, [r7, #12]
 8015150:	f7ff fe38 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8015154:	f04f 33ff 	mov.w	r3, #4294967295
 8015158:	e05e      	b.n	8015218 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	3302      	adds	r3, #2
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	3303      	adds	r3, #3
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801516a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	3304      	adds	r3, #4
 8015170:	781b      	ldrb	r3, [r3, #0]
 8015172:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015174:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	3205      	adds	r2, #5
 801517a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801517c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801517e:	697b      	ldr	r3, [r7, #20]
 8015180:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	3306      	adds	r3, #6
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	3307      	adds	r3, #7
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015194:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	3308      	adds	r3, #8
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801519e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80151a0:	687a      	ldr	r2, [r7, #4]
 80151a2:	3209      	adds	r2, #9
 80151a4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80151a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80151ba:	7af9      	ldrb	r1, [r7, #11]
 80151bc:	68f8      	ldr	r0, [r7, #12]
 80151be:	f000 fa28 	bl	8015612 <SCSI_CheckAddressRange>
 80151c2:	4603      	mov	r3, r0
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	da02      	bge.n	80151ce <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80151c8:	f04f 33ff 	mov.w	r3, #4294967295
 80151cc:	e024      	b.n	8015218 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80151d4:	697b      	ldr	r3, [r7, #20]
 80151d6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80151da:	6979      	ldr	r1, [r7, #20]
 80151dc:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 80151e0:	fb01 f303 	mul.w	r3, r1, r3
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d00a      	beq.n	80151fe <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80151e8:	697b      	ldr	r3, [r7, #20]
 80151ea:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80151ee:	2320      	movs	r3, #32
 80151f0:	2205      	movs	r2, #5
 80151f2:	68f8      	ldr	r0, [r7, #12]
 80151f4:	f7ff fde6 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 80151f8:	f04f 33ff 	mov.w	r3, #4294967295
 80151fc:	e00c      	b.n	8015218 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	2202      	movs	r2, #2
 8015202:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801520a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801520c:	7afb      	ldrb	r3, [r7, #11]
 801520e:	4619      	mov	r1, r3
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	f000 fa2b 	bl	801566c <SCSI_ProcessRead>
 8015216:	4603      	mov	r3, r0
}
 8015218:	4618      	mov	r0, r3
 801521a:	3718      	adds	r7, #24
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}

08015220 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b086      	sub	sp, #24
 8015224:	af00      	add	r7, sp, #0
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	460b      	mov	r3, r1
 801522a:	607a      	str	r2, [r7, #4]
 801522c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	32b0      	adds	r2, #176	; 0xb0
 8015238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801523c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d102      	bne.n	801524a <SCSI_Write10+0x2a>
  {
    return -1;
 8015244:	f04f 33ff 	mov.w	r3, #4294967295
 8015248:	e0ba      	b.n	80153c0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	7a1b      	ldrb	r3, [r3, #8]
 801524e:	2b00      	cmp	r3, #0
 8015250:	f040 80b0 	bne.w	80153b4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015254:	697b      	ldr	r3, [r7, #20]
 8015256:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801525a:	2b00      	cmp	r3, #0
 801525c:	d10a      	bne.n	8015274 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801525e:	697b      	ldr	r3, [r7, #20]
 8015260:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015264:	2320      	movs	r3, #32
 8015266:	2205      	movs	r2, #5
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	f7ff fdab 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 801526e:	f04f 33ff 	mov.w	r3, #4294967295
 8015272:	e0a5      	b.n	80153c0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 801527a:	b25b      	sxtb	r3, r3
 801527c:	2b00      	cmp	r3, #0
 801527e:	da0a      	bge.n	8015296 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015286:	2320      	movs	r3, #32
 8015288:	2205      	movs	r2, #5
 801528a:	68f8      	ldr	r0, [r7, #12]
 801528c:	f7ff fd9a 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8015290:	f04f 33ff 	mov.w	r3, #4294967295
 8015294:	e094      	b.n	80153c0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801529c:	68fa      	ldr	r2, [r7, #12]
 801529e:	33b0      	adds	r3, #176	; 0xb0
 80152a0:	009b      	lsls	r3, r3, #2
 80152a2:	4413      	add	r3, r2
 80152a4:	685b      	ldr	r3, [r3, #4]
 80152a6:	689b      	ldr	r3, [r3, #8]
 80152a8:	7afa      	ldrb	r2, [r7, #11]
 80152aa:	4610      	mov	r0, r2
 80152ac:	4798      	blx	r3
 80152ae:	4603      	mov	r3, r0
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d008      	beq.n	80152c6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80152b4:	7af9      	ldrb	r1, [r7, #11]
 80152b6:	233a      	movs	r3, #58	; 0x3a
 80152b8:	2202      	movs	r2, #2
 80152ba:	68f8      	ldr	r0, [r7, #12]
 80152bc:	f7ff fd82 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 80152c0:	f04f 33ff 	mov.w	r3, #4294967295
 80152c4:	e07c      	b.n	80153c0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152cc:	68fa      	ldr	r2, [r7, #12]
 80152ce:	33b0      	adds	r3, #176	; 0xb0
 80152d0:	009b      	lsls	r3, r3, #2
 80152d2:	4413      	add	r3, r2
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	7afa      	ldrb	r2, [r7, #11]
 80152da:	4610      	mov	r0, r2
 80152dc:	4798      	blx	r3
 80152de:	4603      	mov	r3, r0
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d008      	beq.n	80152f6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80152e4:	7af9      	ldrb	r1, [r7, #11]
 80152e6:	2327      	movs	r3, #39	; 0x27
 80152e8:	2202      	movs	r2, #2
 80152ea:	68f8      	ldr	r0, [r7, #12]
 80152ec:	f7ff fd6a 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 80152f0:	f04f 33ff 	mov.w	r3, #4294967295
 80152f4:	e064      	b.n	80153c0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	3302      	adds	r3, #2
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	3303      	adds	r3, #3
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015306:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	3304      	adds	r3, #4
 801530c:	781b      	ldrb	r3, [r3, #0]
 801530e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015310:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015312:	687a      	ldr	r2, [r7, #4]
 8015314:	3205      	adds	r2, #5
 8015316:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015318:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	3307      	adds	r3, #7
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	3208      	adds	r2, #8
 801532c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801532e:	431a      	orrs	r2, r3
 8015330:	697b      	ldr	r3, [r7, #20]
 8015332:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015342:	7af9      	ldrb	r1, [r7, #11]
 8015344:	68f8      	ldr	r0, [r7, #12]
 8015346:	f000 f964 	bl	8015612 <SCSI_CheckAddressRange>
 801534a:	4603      	mov	r3, r0
 801534c:	2b00      	cmp	r3, #0
 801534e:	da02      	bge.n	8015356 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015350:	f04f 33ff 	mov.w	r3, #4294967295
 8015354:	e034      	b.n	80153c0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801535c:	697a      	ldr	r2, [r7, #20]
 801535e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015362:	fb02 f303 	mul.w	r3, r2, r3
 8015366:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801536e:	693a      	ldr	r2, [r7, #16]
 8015370:	429a      	cmp	r2, r3
 8015372:	d00a      	beq.n	801538a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801537a:	2320      	movs	r3, #32
 801537c:	2205      	movs	r2, #5
 801537e:	68f8      	ldr	r0, [r7, #12]
 8015380:	f7ff fd20 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8015384:	f04f 33ff 	mov.w	r3, #4294967295
 8015388:	e01a      	b.n	80153c0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015390:	bf28      	it	cs
 8015392:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015396:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	2201      	movs	r2, #1
 801539c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801539e:	4b0a      	ldr	r3, [pc, #40]	; (80153c8 <SCSI_Write10+0x1a8>)
 80153a0:	7819      	ldrb	r1, [r3, #0]
 80153a2:	697b      	ldr	r3, [r7, #20]
 80153a4:	f103 0210 	add.w	r2, r3, #16
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	68f8      	ldr	r0, [r7, #12]
 80153ac:	f005 ffd5 	bl	801b35a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80153b0:	2300      	movs	r3, #0
 80153b2:	e005      	b.n	80153c0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80153b4:	7afb      	ldrb	r3, [r7, #11]
 80153b6:	4619      	mov	r1, r3
 80153b8:	68f8      	ldr	r0, [r7, #12]
 80153ba:	f000 f9dd 	bl	8015778 <SCSI_ProcessWrite>
 80153be:	4603      	mov	r3, r0
}
 80153c0:	4618      	mov	r0, r3
 80153c2:	3718      	adds	r7, #24
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	2000008f 	.word	0x2000008f

080153cc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b086      	sub	sp, #24
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	60f8      	str	r0, [r7, #12]
 80153d4:	460b      	mov	r3, r1
 80153d6:	607a      	str	r2, [r7, #4]
 80153d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	32b0      	adds	r2, #176	; 0xb0
 80153e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153e8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d102      	bne.n	80153f6 <SCSI_Write12+0x2a>
  {
    return -1;
 80153f0:	f04f 33ff 	mov.w	r3, #4294967295
 80153f4:	e0ca      	b.n	801558c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	7a1b      	ldrb	r3, [r3, #8]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	f040 80c0 	bne.w	8015580 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8015406:	2b00      	cmp	r3, #0
 8015408:	d10a      	bne.n	8015420 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015410:	2320      	movs	r3, #32
 8015412:	2205      	movs	r2, #5
 8015414:	68f8      	ldr	r0, [r7, #12]
 8015416:	f7ff fcd5 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 801541a:	f04f 33ff 	mov.w	r3, #4294967295
 801541e:	e0b5      	b.n	801558c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8015426:	b25b      	sxtb	r3, r3
 8015428:	2b00      	cmp	r3, #0
 801542a:	da0a      	bge.n	8015442 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015432:	2320      	movs	r3, #32
 8015434:	2205      	movs	r2, #5
 8015436:	68f8      	ldr	r0, [r7, #12]
 8015438:	f7ff fcc4 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 801543c:	f04f 33ff 	mov.w	r3, #4294967295
 8015440:	e0a4      	b.n	801558c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015448:	68fa      	ldr	r2, [r7, #12]
 801544a:	33b0      	adds	r3, #176	; 0xb0
 801544c:	009b      	lsls	r3, r3, #2
 801544e:	4413      	add	r3, r2
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	689b      	ldr	r3, [r3, #8]
 8015454:	7afa      	ldrb	r2, [r7, #11]
 8015456:	4610      	mov	r0, r2
 8015458:	4798      	blx	r3
 801545a:	4603      	mov	r3, r0
 801545c:	2b00      	cmp	r3, #0
 801545e:	d00b      	beq.n	8015478 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015460:	7af9      	ldrb	r1, [r7, #11]
 8015462:	233a      	movs	r3, #58	; 0x3a
 8015464:	2202      	movs	r2, #2
 8015466:	68f8      	ldr	r0, [r7, #12]
 8015468:	f7ff fcac 	bl	8014dc4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	2205      	movs	r2, #5
 8015470:	721a      	strb	r2, [r3, #8]
      return -1;
 8015472:	f04f 33ff 	mov.w	r3, #4294967295
 8015476:	e089      	b.n	801558c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801547e:	68fa      	ldr	r2, [r7, #12]
 8015480:	33b0      	adds	r3, #176	; 0xb0
 8015482:	009b      	lsls	r3, r3, #2
 8015484:	4413      	add	r3, r2
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	7afa      	ldrb	r2, [r7, #11]
 801548c:	4610      	mov	r0, r2
 801548e:	4798      	blx	r3
 8015490:	4603      	mov	r3, r0
 8015492:	2b00      	cmp	r3, #0
 8015494:	d00b      	beq.n	80154ae <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015496:	7af9      	ldrb	r1, [r7, #11]
 8015498:	2327      	movs	r3, #39	; 0x27
 801549a:	2202      	movs	r2, #2
 801549c:	68f8      	ldr	r0, [r7, #12]
 801549e:	f7ff fc91 	bl	8014dc4 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	2205      	movs	r2, #5
 80154a6:	721a      	strb	r2, [r3, #8]
      return -1;
 80154a8:	f04f 33ff 	mov.w	r3, #4294967295
 80154ac:	e06e      	b.n	801558c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	3302      	adds	r3, #2
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	3303      	adds	r3, #3
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80154be:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	3304      	adds	r3, #4
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80154c8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80154ca:	687a      	ldr	r2, [r7, #4]
 80154cc:	3205      	adds	r2, #5
 80154ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80154d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	3306      	adds	r3, #6
 80154dc:	781b      	ldrb	r3, [r3, #0]
 80154de:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	3307      	adds	r3, #7
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80154e8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	3308      	adds	r3, #8
 80154ee:	781b      	ldrb	r3, [r3, #0]
 80154f0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80154f2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80154f4:	687a      	ldr	r2, [r7, #4]
 80154f6:	3209      	adds	r2, #9
 80154f8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80154fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80154fc:	697b      	ldr	r3, [r7, #20]
 80154fe:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801550e:	7af9      	ldrb	r1, [r7, #11]
 8015510:	68f8      	ldr	r0, [r7, #12]
 8015512:	f000 f87e 	bl	8015612 <SCSI_CheckAddressRange>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	da02      	bge.n	8015522 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801551c:	f04f 33ff 	mov.w	r3, #4294967295
 8015520:	e034      	b.n	801558c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015528:	697a      	ldr	r2, [r7, #20]
 801552a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801552e:	fb02 f303 	mul.w	r3, r2, r3
 8015532:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801553a:	693a      	ldr	r2, [r7, #16]
 801553c:	429a      	cmp	r2, r3
 801553e:	d00a      	beq.n	8015556 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015546:	2320      	movs	r3, #32
 8015548:	2205      	movs	r2, #5
 801554a:	68f8      	ldr	r0, [r7, #12]
 801554c:	f7ff fc3a 	bl	8014dc4 <SCSI_SenseCode>
      return -1;
 8015550:	f04f 33ff 	mov.w	r3, #4294967295
 8015554:	e01a      	b.n	801558c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801555c:	bf28      	it	cs
 801555e:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015562:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	2201      	movs	r2, #1
 8015568:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801556a:	4b0a      	ldr	r3, [pc, #40]	; (8015594 <SCSI_Write12+0x1c8>)
 801556c:	7819      	ldrb	r1, [r3, #0]
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	f103 0210 	add.w	r2, r3, #16
 8015574:	693b      	ldr	r3, [r7, #16]
 8015576:	68f8      	ldr	r0, [r7, #12]
 8015578:	f005 feef 	bl	801b35a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801557c:	2300      	movs	r3, #0
 801557e:	e005      	b.n	801558c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8015580:	7afb      	ldrb	r3, [r7, #11]
 8015582:	4619      	mov	r1, r3
 8015584:	68f8      	ldr	r0, [r7, #12]
 8015586:	f000 f8f7 	bl	8015778 <SCSI_ProcessWrite>
 801558a:	4603      	mov	r3, r0
}
 801558c:	4618      	mov	r0, r3
 801558e:	3718      	adds	r7, #24
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	2000008f 	.word	0x2000008f

08015598 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b086      	sub	sp, #24
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	460b      	mov	r3, r1
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	32b0      	adds	r2, #176	; 0xb0
 80155b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80155b6:	697b      	ldr	r3, [r7, #20]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d102      	bne.n	80155c2 <SCSI_Verify10+0x2a>
  {
    return -1;
 80155bc:	f04f 33ff 	mov.w	r3, #4294967295
 80155c0:	e023      	b.n	801560a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	3301      	adds	r3, #1
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	f003 0302 	and.w	r3, r3, #2
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d008      	beq.n	80155e2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80155d0:	7af9      	ldrb	r1, [r7, #11]
 80155d2:	2324      	movs	r3, #36	; 0x24
 80155d4:	2205      	movs	r2, #5
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	f7ff fbf4 	bl	8014dc4 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80155dc:	f04f 33ff 	mov.w	r3, #4294967295
 80155e0:	e013      	b.n	801560a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80155ee:	7af9      	ldrb	r1, [r7, #11]
 80155f0:	68f8      	ldr	r0, [r7, #12]
 80155f2:	f000 f80e 	bl	8015612 <SCSI_CheckAddressRange>
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	da02      	bge.n	8015602 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80155fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015600:	e003      	b.n	801560a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	2200      	movs	r2, #0
 8015606:	60da      	str	r2, [r3, #12]

  return 0;
 8015608:	2300      	movs	r3, #0
}
 801560a:	4618      	mov	r0, r3
 801560c:	3718      	adds	r7, #24
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}

08015612 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015612:	b580      	push	{r7, lr}
 8015614:	b086      	sub	sp, #24
 8015616:	af00      	add	r7, sp, #0
 8015618:	60f8      	str	r0, [r7, #12]
 801561a:	607a      	str	r2, [r7, #4]
 801561c:	603b      	str	r3, [r7, #0]
 801561e:	460b      	mov	r3, r1
 8015620:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	32b0      	adds	r2, #176	; 0xb0
 801562c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015630:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d102      	bne.n	801563e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015638:	f04f 33ff 	mov.w	r3, #4294967295
 801563c:	e011      	b.n	8015662 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	441a      	add	r2, r3
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 801564a:	429a      	cmp	r2, r3
 801564c:	d908      	bls.n	8015660 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801564e:	7af9      	ldrb	r1, [r7, #11]
 8015650:	2321      	movs	r3, #33	; 0x21
 8015652:	2205      	movs	r2, #5
 8015654:	68f8      	ldr	r0, [r7, #12]
 8015656:	f7ff fbb5 	bl	8014dc4 <SCSI_SenseCode>
    return -1;
 801565a:	f04f 33ff 	mov.w	r3, #4294967295
 801565e:	e000      	b.n	8015662 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015660:	2300      	movs	r3, #0
}
 8015662:	4618      	mov	r0, r3
 8015664:	3718      	adds	r7, #24
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
	...

0801566c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801566c:	b590      	push	{r4, r7, lr}
 801566e:	b085      	sub	sp, #20
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
 8015674:	460b      	mov	r3, r1
 8015676:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	32b0      	adds	r2, #176	; 0xb0
 8015682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015686:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d102      	bne.n	8015694 <SCSI_ProcessRead+0x28>
  {
    return -1;
 801568e:	f04f 33ff 	mov.w	r3, #4294967295
 8015692:	e06a      	b.n	801576a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801569a:	68fa      	ldr	r2, [r7, #12]
 801569c:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80156a0:	fb02 f303 	mul.w	r3, r2, r3
 80156a4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80156ac:	bf28      	it	cs
 80156ae:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80156b2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156ba:	687a      	ldr	r2, [r7, #4]
 80156bc:	33b0      	adds	r3, #176	; 0xb0
 80156be:	009b      	lsls	r3, r3, #2
 80156c0:	4413      	add	r3, r2
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	691c      	ldr	r4, [r3, #16]
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	f103 0110 	add.w	r1, r3, #16
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80156d8:	4618      	mov	r0, r3
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80156e0:	b29b      	uxth	r3, r3
 80156e2:	78f8      	ldrb	r0, [r7, #3]
 80156e4:	47a0      	blx	r4
 80156e6:	4603      	mov	r3, r0
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	da08      	bge.n	80156fe <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80156ec:	78f9      	ldrb	r1, [r7, #3]
 80156ee:	2311      	movs	r3, #17
 80156f0:	2204      	movs	r2, #4
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f7ff fb66 	bl	8014dc4 <SCSI_SenseCode>
    return -1;
 80156f8:	f04f 33ff 	mov.w	r3, #4294967295
 80156fc:	e035      	b.n	801576a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80156fe:	4b1d      	ldr	r3, [pc, #116]	; (8015774 <SCSI_ProcessRead+0x108>)
 8015700:	7819      	ldrb	r1, [r3, #0]
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	f103 0210 	add.w	r2, r3, #16
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f005 fe04 	bl	801b318 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 801571c:	4619      	mov	r1, r3
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	fbb3 f3f1 	udiv	r3, r3, r1
 8015724:	441a      	add	r2, r3
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015738:	4619      	mov	r1, r3
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015740:	1ad2      	subs	r2, r2, r3
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	1ad2      	subs	r2, r2, r3
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801575e:	2b00      	cmp	r3, #0
 8015760:	d102      	bne.n	8015768 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	2203      	movs	r2, #3
 8015766:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015768:	2300      	movs	r3, #0
}
 801576a:	4618      	mov	r0, r3
 801576c:	3714      	adds	r7, #20
 801576e:	46bd      	mov	sp, r7
 8015770:	bd90      	pop	{r4, r7, pc}
 8015772:	bf00      	nop
 8015774:	2000008e 	.word	0x2000008e

08015778 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015778:	b590      	push	{r4, r7, lr}
 801577a:	b085      	sub	sp, #20
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
 8015780:	460b      	mov	r3, r1
 8015782:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	32b0      	adds	r2, #176	; 0xb0
 801578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015792:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d102      	bne.n	80157a0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 801579a:	f04f 33ff 	mov.w	r3, #4294967295
 801579e:	e07a      	b.n	8015896 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80157a6:	68fa      	ldr	r2, [r7, #12]
 80157a8:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80157ac:	fb02 f303 	mul.w	r3, r2, r3
 80157b0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80157b8:	bf28      	it	cs
 80157ba:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80157be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	33b0      	adds	r3, #176	; 0xb0
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	4413      	add	r3, r2
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	695c      	ldr	r4, [r3, #20]
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	f103 0110 	add.w	r1, r3, #16
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 80157e4:	4618      	mov	r0, r3
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	78f8      	ldrb	r0, [r7, #3]
 80157f0:	47a0      	blx	r4
 80157f2:	4603      	mov	r3, r0
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	da08      	bge.n	801580a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80157f8:	78f9      	ldrb	r1, [r7, #3]
 80157fa:	2303      	movs	r3, #3
 80157fc:	2204      	movs	r2, #4
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f7ff fae0 	bl	8014dc4 <SCSI_SenseCode>
    return -1;
 8015804:	f04f 33ff 	mov.w	r3, #4294967295
 8015808:	e045      	b.n	8015896 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015816:	4619      	mov	r1, r3
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	fbb3 f3f1 	udiv	r3, r3, r1
 801581e:	441a      	add	r2, r3
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015832:	4619      	mov	r1, r3
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	fbb3 f3f1 	udiv	r3, r3, r1
 801583a:	1ad2      	subs	r2, r2, r3
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	1ad2      	subs	r2, r2, r3
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015858:	2b00      	cmp	r3, #0
 801585a:	d104      	bne.n	8015866 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801585c:	2100      	movs	r1, #0
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f7fe fd0e 	bl	8014280 <MSC_BOT_SendCSW>
 8015864:	e016      	b.n	8015894 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801586c:	68fa      	ldr	r2, [r7, #12]
 801586e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015872:	fb02 f303 	mul.w	r3, r2, r3
 8015876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801587a:	bf28      	it	cs
 801587c:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015880:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015882:	4b07      	ldr	r3, [pc, #28]	; (80158a0 <SCSI_ProcessWrite+0x128>)
 8015884:	7819      	ldrb	r1, [r3, #0]
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	f103 0210 	add.w	r2, r3, #16
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f005 fd63 	bl	801b35a <USBD_LL_PrepareReceive>
  }

  return 0;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	3714      	adds	r7, #20
 801589a:	46bd      	mov	sp, r7
 801589c:	bd90      	pop	{r4, r7, pc}
 801589e:	bf00      	nop
 80158a0:	2000008f 	.word	0x2000008f

080158a4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80158a4:	b480      	push	{r7}
 80158a6:	b087      	sub	sp, #28
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	60f8      	str	r0, [r7, #12]
 80158ac:	60b9      	str	r1, [r7, #8]
 80158ae:	4613      	mov	r3, r2
 80158b0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80158b2:	88fb      	ldrh	r3, [r7, #6]
 80158b4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d102      	bne.n	80158c2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80158bc:	f04f 33ff 	mov.w	r3, #4294967295
 80158c0:	e013      	b.n	80158ea <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80158c2:	8afa      	ldrh	r2, [r7, #22]
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80158c8:	e00b      	b.n	80158e2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80158ca:	8afb      	ldrh	r3, [r7, #22]
 80158cc:	3b01      	subs	r3, #1
 80158ce:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80158d0:	8afb      	ldrh	r3, [r7, #22]
 80158d2:	68ba      	ldr	r2, [r7, #8]
 80158d4:	441a      	add	r2, r3
 80158d6:	8afb      	ldrh	r3, [r7, #22]
 80158d8:	7811      	ldrb	r1, [r2, #0]
 80158da:	68fa      	ldr	r2, [r7, #12]
 80158dc:	4413      	add	r3, r2
 80158de:	460a      	mov	r2, r1
 80158e0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80158e2:	8afb      	ldrh	r3, [r7, #22]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d1f0      	bne.n	80158ca <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80158e8:	2300      	movs	r3, #0
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	371c      	adds	r7, #28
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr

080158f6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80158f6:	b580      	push	{r7, lr}
 80158f8:	b086      	sub	sp, #24
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	60f8      	str	r0, [r7, #12]
 80158fe:	60b9      	str	r1, [r7, #8]
 8015900:	4613      	mov	r3, r2
 8015902:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d101      	bne.n	801590e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801590a:	2303      	movs	r3, #3
 801590c:	e01f      	b.n	801594e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2200      	movs	r2, #0
 8015912:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	2200      	movs	r2, #0
 801591a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2200      	movs	r2, #0
 8015922:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d003      	beq.n	8015934 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	68ba      	ldr	r2, [r7, #8]
 8015930:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	2201      	movs	r2, #1
 8015938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	79fa      	ldrb	r2, [r7, #7]
 8015940:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015942:	68f8      	ldr	r0, [r7, #12]
 8015944:	f005 fb5e 	bl	801b004 <USBD_LL_Init>
 8015948:	4603      	mov	r3, r0
 801594a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801594c:	7dfb      	ldrb	r3, [r7, #23]
}
 801594e:	4618      	mov	r0, r3
 8015950:	3718      	adds	r7, #24
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}

08015956 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8015956:	b580      	push	{r7, lr}
 8015958:	b084      	sub	sp, #16
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f005 fbd2 	bl	801b108 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	2201      	movs	r2, #1
 8015968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015972:	2b00      	cmp	r3, #0
 8015974:	d009      	beq.n	801598a <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801597c:	685b      	ldr	r3, [r3, #4]
 801597e:	687a      	ldr	r2, [r7, #4]
 8015980:	6852      	ldr	r2, [r2, #4]
 8015982:	b2d2      	uxtb	r2, r2
 8015984:	4611      	mov	r1, r2
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	2200      	movs	r2, #0
 801598e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	2200      	movs	r2, #0
 8015996:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	2200      	movs	r2, #0
 801599e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 80159a2:	6878      	ldr	r0, [r7, #4]
 80159a4:	f005 fb7a 	bl	801b09c <USBD_LL_DeInit>
 80159a8:	4603      	mov	r3, r0
 80159aa:	73fb      	strb	r3, [r7, #15]

  return ret;
 80159ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3710      	adds	r7, #16
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}

080159b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80159b6:	b580      	push	{r7, lr}
 80159b8:	b084      	sub	sp, #16
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
 80159be:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80159c0:	2300      	movs	r3, #0
 80159c2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d101      	bne.n	80159ce <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80159ca:	2303      	movs	r3, #3
 80159cc:	e025      	b.n	8015a1a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	683a      	ldr	r2, [r7, #0]
 80159d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	32ae      	adds	r2, #174	; 0xae
 80159e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d00f      	beq.n	8015a0a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	32ae      	adds	r2, #174	; 0xae
 80159f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159fa:	f107 020e 	add.w	r2, r7, #14
 80159fe:	4610      	mov	r0, r2
 8015a00:	4798      	blx	r3
 8015a02:	4602      	mov	r2, r0
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015a10:	1c5a      	adds	r2, r3, #1
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015a18:	2300      	movs	r3, #0
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3710      	adds	r7, #16
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}

08015a22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015a22:	b580      	push	{r7, lr}
 8015a24:	b082      	sub	sp, #8
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f005 fb51 	bl	801b0d2 <USBD_LL_Start>
 8015a30:	4603      	mov	r3, r0
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3708      	adds	r7, #8
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b082      	sub	sp, #8
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f005 fb60 	bl	801b108 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d009      	beq.n	8015a66 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a58:	685b      	ldr	r3, [r3, #4]
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	6852      	ldr	r2, [r2, #4]
 8015a5e:	b2d2      	uxtb	r2, r2
 8015a60:	4611      	mov	r1, r2
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8015a66:	2300      	movs	r3, #0
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3708      	adds	r7, #8
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bd80      	pop	{r7, pc}

08015a70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015a70:	b480      	push	{r7}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015a78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	370c      	adds	r7, #12
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a84:	4770      	bx	lr

08015a86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015a86:	b580      	push	{r7, lr}
 8015a88:	b084      	sub	sp, #16
 8015a8a:	af00      	add	r7, sp, #0
 8015a8c:	6078      	str	r0, [r7, #4]
 8015a8e:	460b      	mov	r3, r1
 8015a90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a92:	2300      	movs	r3, #0
 8015a94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d009      	beq.n	8015ab4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	78fa      	ldrb	r2, [r7, #3]
 8015aaa:	4611      	mov	r1, r2
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	4798      	blx	r3
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3710      	adds	r7, #16
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}

08015abe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b084      	sub	sp, #16
 8015ac2:	af00      	add	r7, sp, #0
 8015ac4:	6078      	str	r0, [r7, #4]
 8015ac6:	460b      	mov	r3, r1
 8015ac8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015aca:	2300      	movs	r3, #0
 8015acc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ad4:	685b      	ldr	r3, [r3, #4]
 8015ad6:	78fa      	ldrb	r2, [r7, #3]
 8015ad8:	4611      	mov	r1, r2
 8015ada:	6878      	ldr	r0, [r7, #4]
 8015adc:	4798      	blx	r3
 8015ade:	4603      	mov	r3, r0
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d001      	beq.n	8015ae8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015ae4:	2303      	movs	r3, #3
 8015ae6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3710      	adds	r7, #16
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}

08015af2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015af2:	b580      	push	{r7, lr}
 8015af4:	b084      	sub	sp, #16
 8015af6:	af00      	add	r7, sp, #0
 8015af8:	6078      	str	r0, [r7, #4]
 8015afa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b02:	6839      	ldr	r1, [r7, #0]
 8015b04:	4618      	mov	r0, r3
 8015b06:	f001 f908 	bl	8016d1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	2201      	movs	r2, #1
 8015b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015b18:	461a      	mov	r2, r3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015b26:	f003 031f 	and.w	r3, r3, #31
 8015b2a:	2b02      	cmp	r3, #2
 8015b2c:	d01a      	beq.n	8015b64 <USBD_LL_SetupStage+0x72>
 8015b2e:	2b02      	cmp	r3, #2
 8015b30:	d822      	bhi.n	8015b78 <USBD_LL_SetupStage+0x86>
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d002      	beq.n	8015b3c <USBD_LL_SetupStage+0x4a>
 8015b36:	2b01      	cmp	r3, #1
 8015b38:	d00a      	beq.n	8015b50 <USBD_LL_SetupStage+0x5e>
 8015b3a:	e01d      	b.n	8015b78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b42:	4619      	mov	r1, r3
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f000 fb5f 	bl	8016208 <USBD_StdDevReq>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8015b4e:	e020      	b.n	8015b92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b56:	4619      	mov	r1, r3
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f000 fbc7 	bl	80162ec <USBD_StdItfReq>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	73fb      	strb	r3, [r7, #15]
      break;
 8015b62:	e016      	b.n	8015b92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f000 fc29 	bl	80163c4 <USBD_StdEPReq>
 8015b72:	4603      	mov	r3, r0
 8015b74:	73fb      	strb	r3, [r7, #15]
      break;
 8015b76:	e00c      	b.n	8015b92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015b7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	4619      	mov	r1, r3
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f005 fb3d 	bl	801b206 <USBD_LL_StallEP>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8015b90:	bf00      	nop
  }

  return ret;
 8015b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	3710      	adds	r7, #16
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}

08015b9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b086      	sub	sp, #24
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	60f8      	str	r0, [r7, #12]
 8015ba4:	460b      	mov	r3, r1
 8015ba6:	607a      	str	r2, [r7, #4]
 8015ba8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015baa:	2300      	movs	r3, #0
 8015bac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015bae:	7afb      	ldrb	r3, [r7, #11]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d16e      	bne.n	8015c92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015bba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015bc2:	2b03      	cmp	r3, #3
 8015bc4:	f040 8098 	bne.w	8015cf8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015bc8:	693b      	ldr	r3, [r7, #16]
 8015bca:	689a      	ldr	r2, [r3, #8]
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	68db      	ldr	r3, [r3, #12]
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d913      	bls.n	8015bfc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015bd4:	693b      	ldr	r3, [r7, #16]
 8015bd6:	689a      	ldr	r2, [r3, #8]
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	68db      	ldr	r3, [r3, #12]
 8015bdc:	1ad2      	subs	r2, r2, r3
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	68da      	ldr	r2, [r3, #12]
 8015be6:	693b      	ldr	r3, [r7, #16]
 8015be8:	689b      	ldr	r3, [r3, #8]
 8015bea:	4293      	cmp	r3, r2
 8015bec:	bf28      	it	cs
 8015bee:	4613      	movcs	r3, r2
 8015bf0:	461a      	mov	r2, r3
 8015bf2:	6879      	ldr	r1, [r7, #4]
 8015bf4:	68f8      	ldr	r0, [r7, #12]
 8015bf6:	f001 f967 	bl	8016ec8 <USBD_CtlContinueRx>
 8015bfa:	e07d      	b.n	8015cf8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015c02:	f003 031f 	and.w	r3, r3, #31
 8015c06:	2b02      	cmp	r3, #2
 8015c08:	d014      	beq.n	8015c34 <USBD_LL_DataOutStage+0x98>
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d81d      	bhi.n	8015c4a <USBD_LL_DataOutStage+0xae>
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d002      	beq.n	8015c18 <USBD_LL_DataOutStage+0x7c>
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d003      	beq.n	8015c1e <USBD_LL_DataOutStage+0x82>
 8015c16:	e018      	b.n	8015c4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	75bb      	strb	r3, [r7, #22]
            break;
 8015c1c:	e018      	b.n	8015c50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015c24:	b2db      	uxtb	r3, r3
 8015c26:	4619      	mov	r1, r3
 8015c28:	68f8      	ldr	r0, [r7, #12]
 8015c2a:	f000 fa5e 	bl	80160ea <USBD_CoreFindIF>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	75bb      	strb	r3, [r7, #22]
            break;
 8015c32:	e00d      	b.n	8015c50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015c3a:	b2db      	uxtb	r3, r3
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	f000 fa60 	bl	8016104 <USBD_CoreFindEP>
 8015c44:	4603      	mov	r3, r0
 8015c46:	75bb      	strb	r3, [r7, #22]
            break;
 8015c48:	e002      	b.n	8015c50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	75bb      	strb	r3, [r7, #22]
            break;
 8015c4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015c50:	7dbb      	ldrb	r3, [r7, #22]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d119      	bne.n	8015c8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	2b03      	cmp	r3, #3
 8015c60:	d113      	bne.n	8015c8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015c62:	7dba      	ldrb	r2, [r7, #22]
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	32ae      	adds	r2, #174	; 0xae
 8015c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c6c:	691b      	ldr	r3, [r3, #16]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d00b      	beq.n	8015c8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015c72:	7dba      	ldrb	r2, [r7, #22]
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015c7a:	7dba      	ldrb	r2, [r7, #22]
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	32ae      	adds	r2, #174	; 0xae
 8015c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c84:	691b      	ldr	r3, [r3, #16]
 8015c86:	68f8      	ldr	r0, [r7, #12]
 8015c88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015c8a:	68f8      	ldr	r0, [r7, #12]
 8015c8c:	f001 f92d 	bl	8016eea <USBD_CtlSendStatus>
 8015c90:	e032      	b.n	8015cf8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015c92:	7afb      	ldrb	r3, [r7, #11]
 8015c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015c98:	b2db      	uxtb	r3, r3
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	68f8      	ldr	r0, [r7, #12]
 8015c9e:	f000 fa31 	bl	8016104 <USBD_CoreFindEP>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ca6:	7dbb      	ldrb	r3, [r7, #22]
 8015ca8:	2bff      	cmp	r3, #255	; 0xff
 8015caa:	d025      	beq.n	8015cf8 <USBD_LL_DataOutStage+0x15c>
 8015cac:	7dbb      	ldrb	r3, [r7, #22]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d122      	bne.n	8015cf8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	2b03      	cmp	r3, #3
 8015cbc:	d117      	bne.n	8015cee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015cbe:	7dba      	ldrb	r2, [r7, #22]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	32ae      	adds	r2, #174	; 0xae
 8015cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cc8:	699b      	ldr	r3, [r3, #24]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d00f      	beq.n	8015cee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015cce:	7dba      	ldrb	r2, [r7, #22]
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015cd6:	7dba      	ldrb	r2, [r7, #22]
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	32ae      	adds	r2, #174	; 0xae
 8015cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ce0:	699b      	ldr	r3, [r3, #24]
 8015ce2:	7afa      	ldrb	r2, [r7, #11]
 8015ce4:	4611      	mov	r1, r2
 8015ce6:	68f8      	ldr	r0, [r7, #12]
 8015ce8:	4798      	blx	r3
 8015cea:	4603      	mov	r3, r0
 8015cec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015cee:	7dfb      	ldrb	r3, [r7, #23]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d001      	beq.n	8015cf8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015cf4:	7dfb      	ldrb	r3, [r7, #23]
 8015cf6:	e000      	b.n	8015cfa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015cf8:	2300      	movs	r3, #0
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3718      	adds	r7, #24
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}

08015d02 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015d02:	b580      	push	{r7, lr}
 8015d04:	b086      	sub	sp, #24
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	60f8      	str	r0, [r7, #12]
 8015d0a:	460b      	mov	r3, r1
 8015d0c:	607a      	str	r2, [r7, #4]
 8015d0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015d10:	7afb      	ldrb	r3, [r7, #11]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d16f      	bne.n	8015df6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	3314      	adds	r3, #20
 8015d1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015d22:	2b02      	cmp	r3, #2
 8015d24:	d15a      	bne.n	8015ddc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	689a      	ldr	r2, [r3, #8]
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	68db      	ldr	r3, [r3, #12]
 8015d2e:	429a      	cmp	r2, r3
 8015d30:	d914      	bls.n	8015d5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015d32:	693b      	ldr	r3, [r7, #16]
 8015d34:	689a      	ldr	r2, [r3, #8]
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	68db      	ldr	r3, [r3, #12]
 8015d3a:	1ad2      	subs	r2, r2, r3
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	689b      	ldr	r3, [r3, #8]
 8015d44:	461a      	mov	r2, r3
 8015d46:	6879      	ldr	r1, [r7, #4]
 8015d48:	68f8      	ldr	r0, [r7, #12]
 8015d4a:	f001 f8ac 	bl	8016ea6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d4e:	2300      	movs	r3, #0
 8015d50:	2200      	movs	r2, #0
 8015d52:	2100      	movs	r1, #0
 8015d54:	68f8      	ldr	r0, [r7, #12]
 8015d56:	f005 fb00 	bl	801b35a <USBD_LL_PrepareReceive>
 8015d5a:	e03f      	b.n	8015ddc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	68da      	ldr	r2, [r3, #12]
 8015d60:	693b      	ldr	r3, [r7, #16]
 8015d62:	689b      	ldr	r3, [r3, #8]
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d11c      	bne.n	8015da2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	685a      	ldr	r2, [r3, #4]
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d316      	bcc.n	8015da2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	685a      	ldr	r2, [r3, #4]
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015d7e:	429a      	cmp	r2, r3
 8015d80:	d20f      	bcs.n	8015da2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015d82:	2200      	movs	r2, #0
 8015d84:	2100      	movs	r1, #0
 8015d86:	68f8      	ldr	r0, [r7, #12]
 8015d88:	f001 f88d 	bl	8016ea6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2200      	movs	r2, #0
 8015d90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d94:	2300      	movs	r3, #0
 8015d96:	2200      	movs	r2, #0
 8015d98:	2100      	movs	r1, #0
 8015d9a:	68f8      	ldr	r0, [r7, #12]
 8015d9c:	f005 fadd 	bl	801b35a <USBD_LL_PrepareReceive>
 8015da0:	e01c      	b.n	8015ddc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015da8:	b2db      	uxtb	r3, r3
 8015daa:	2b03      	cmp	r3, #3
 8015dac:	d10f      	bne.n	8015dce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d009      	beq.n	8015dce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dc8:	68db      	ldr	r3, [r3, #12]
 8015dca:	68f8      	ldr	r0, [r7, #12]
 8015dcc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015dce:	2180      	movs	r1, #128	; 0x80
 8015dd0:	68f8      	ldr	r0, [r7, #12]
 8015dd2:	f005 fa18 	bl	801b206 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015dd6:	68f8      	ldr	r0, [r7, #12]
 8015dd8:	f001 f89a 	bl	8016f10 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d03a      	beq.n	8015e5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015de6:	68f8      	ldr	r0, [r7, #12]
 8015de8:	f7ff fe42 	bl	8015a70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2200      	movs	r2, #0
 8015df0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015df4:	e032      	b.n	8015e5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015df6:	7afb      	ldrb	r3, [r7, #11]
 8015df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	4619      	mov	r1, r3
 8015e00:	68f8      	ldr	r0, [r7, #12]
 8015e02:	f000 f97f 	bl	8016104 <USBD_CoreFindEP>
 8015e06:	4603      	mov	r3, r0
 8015e08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015e0a:	7dfb      	ldrb	r3, [r7, #23]
 8015e0c:	2bff      	cmp	r3, #255	; 0xff
 8015e0e:	d025      	beq.n	8015e5c <USBD_LL_DataInStage+0x15a>
 8015e10:	7dfb      	ldrb	r3, [r7, #23]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d122      	bne.n	8015e5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e1c:	b2db      	uxtb	r3, r3
 8015e1e:	2b03      	cmp	r3, #3
 8015e20:	d11c      	bne.n	8015e5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015e22:	7dfa      	ldrb	r2, [r7, #23]
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	32ae      	adds	r2, #174	; 0xae
 8015e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e2c:	695b      	ldr	r3, [r3, #20]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d014      	beq.n	8015e5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015e32:	7dfa      	ldrb	r2, [r7, #23]
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015e3a:	7dfa      	ldrb	r2, [r7, #23]
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	32ae      	adds	r2, #174	; 0xae
 8015e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e44:	695b      	ldr	r3, [r3, #20]
 8015e46:	7afa      	ldrb	r2, [r7, #11]
 8015e48:	4611      	mov	r1, r2
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	4798      	blx	r3
 8015e4e:	4603      	mov	r3, r0
 8015e50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015e52:	7dbb      	ldrb	r3, [r7, #22]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d001      	beq.n	8015e5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015e58:	7dbb      	ldrb	r3, [r7, #22]
 8015e5a:	e000      	b.n	8015e5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015e5c:	2300      	movs	r3, #0
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3718      	adds	r7, #24
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}

08015e66 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015e66:	b580      	push	{r7, lr}
 8015e68:	b084      	sub	sp, #16
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2201      	movs	r2, #1
 8015e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2200      	movs	r2, #0
 8015e86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2200      	movs	r2, #0
 8015e94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d014      	beq.n	8015ecc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d00e      	beq.n	8015ecc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015eb4:	685b      	ldr	r3, [r3, #4]
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	6852      	ldr	r2, [r2, #4]
 8015eba:	b2d2      	uxtb	r2, r2
 8015ebc:	4611      	mov	r1, r2
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	4798      	blx	r3
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d001      	beq.n	8015ecc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015ec8:	2303      	movs	r3, #3
 8015eca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ecc:	2340      	movs	r3, #64	; 0x40
 8015ece:	2200      	movs	r2, #0
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f005 f933 	bl	801b13e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2201      	movs	r2, #1
 8015edc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2240      	movs	r2, #64	; 0x40
 8015ee4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ee8:	2340      	movs	r3, #64	; 0x40
 8015eea:	2200      	movs	r2, #0
 8015eec:	2180      	movs	r1, #128	; 0x80
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f005 f925 	bl	801b13e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	2201      	movs	r2, #1
 8015ef8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2240      	movs	r2, #64	; 0x40
 8015efe:	621a      	str	r2, [r3, #32]

  return ret;
 8015f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3710      	adds	r7, #16
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}

08015f0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015f0a:	b480      	push	{r7}
 8015f0c:	b083      	sub	sp, #12
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	6078      	str	r0, [r7, #4]
 8015f12:	460b      	mov	r3, r1
 8015f14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	78fa      	ldrb	r2, [r7, #3]
 8015f1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015f1c:	2300      	movs	r3, #0
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	370c      	adds	r7, #12
 8015f22:	46bd      	mov	sp, r7
 8015f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f28:	4770      	bx	lr

08015f2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015f2a:	b480      	push	{r7}
 8015f2c:	b083      	sub	sp, #12
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f38:	b2da      	uxtb	r2, r3
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	2204      	movs	r2, #4
 8015f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015f48:	2300      	movs	r3, #0
}
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	370c      	adds	r7, #12
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f54:	4770      	bx	lr

08015f56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015f56:	b480      	push	{r7}
 8015f58:	b083      	sub	sp, #12
 8015f5a:	af00      	add	r7, sp, #0
 8015f5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f64:	b2db      	uxtb	r3, r3
 8015f66:	2b04      	cmp	r3, #4
 8015f68:	d106      	bne.n	8015f78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015f70:	b2da      	uxtb	r2, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015f78:	2300      	movs	r3, #0
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	370c      	adds	r7, #12
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f84:	4770      	bx	lr

08015f86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b082      	sub	sp, #8
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f94:	b2db      	uxtb	r3, r3
 8015f96:	2b03      	cmp	r3, #3
 8015f98:	d110      	bne.n	8015fbc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d00b      	beq.n	8015fbc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015faa:	69db      	ldr	r3, [r3, #28]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d005      	beq.n	8015fbc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fb6:	69db      	ldr	r3, [r3, #28]
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015fbc:	2300      	movs	r3, #0
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3708      	adds	r7, #8
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}

08015fc6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015fc6:	b580      	push	{r7, lr}
 8015fc8:	b082      	sub	sp, #8
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]
 8015fce:	460b      	mov	r3, r1
 8015fd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	32ae      	adds	r2, #174	; 0xae
 8015fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d101      	bne.n	8015fe8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015fe4:	2303      	movs	r3, #3
 8015fe6:	e01c      	b.n	8016022 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fee:	b2db      	uxtb	r3, r3
 8015ff0:	2b03      	cmp	r3, #3
 8015ff2:	d115      	bne.n	8016020 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	32ae      	adds	r2, #174	; 0xae
 8015ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016002:	6a1b      	ldr	r3, [r3, #32]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d00b      	beq.n	8016020 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	32ae      	adds	r2, #174	; 0xae
 8016012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016016:	6a1b      	ldr	r3, [r3, #32]
 8016018:	78fa      	ldrb	r2, [r7, #3]
 801601a:	4611      	mov	r1, r2
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016020:	2300      	movs	r3, #0
}
 8016022:	4618      	mov	r0, r3
 8016024:	3708      	adds	r7, #8
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}

0801602a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801602a:	b580      	push	{r7, lr}
 801602c:	b082      	sub	sp, #8
 801602e:	af00      	add	r7, sp, #0
 8016030:	6078      	str	r0, [r7, #4]
 8016032:	460b      	mov	r3, r1
 8016034:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	32ae      	adds	r2, #174	; 0xae
 8016040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d101      	bne.n	801604c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016048:	2303      	movs	r3, #3
 801604a:	e01c      	b.n	8016086 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016052:	b2db      	uxtb	r3, r3
 8016054:	2b03      	cmp	r3, #3
 8016056:	d115      	bne.n	8016084 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	32ae      	adds	r2, #174	; 0xae
 8016062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016068:	2b00      	cmp	r3, #0
 801606a:	d00b      	beq.n	8016084 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	32ae      	adds	r2, #174	; 0xae
 8016076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801607c:	78fa      	ldrb	r2, [r7, #3]
 801607e:	4611      	mov	r1, r2
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016084:	2300      	movs	r3, #0
}
 8016086:	4618      	mov	r0, r3
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}

0801608e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801608e:	b480      	push	{r7}
 8016090:	b083      	sub	sp, #12
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016096:	2300      	movs	r3, #0
}
 8016098:	4618      	mov	r0, r3
 801609a:	370c      	adds	r7, #12
 801609c:	46bd      	mov	sp, r7
 801609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a2:	4770      	bx	lr

080160a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80160ac:	2300      	movs	r3, #0
 80160ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	2201      	movs	r2, #1
 80160b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d00e      	beq.n	80160e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160c8:	685b      	ldr	r3, [r3, #4]
 80160ca:	687a      	ldr	r2, [r7, #4]
 80160cc:	6852      	ldr	r2, [r2, #4]
 80160ce:	b2d2      	uxtb	r2, r2
 80160d0:	4611      	mov	r1, r2
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	4798      	blx	r3
 80160d6:	4603      	mov	r3, r0
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d001      	beq.n	80160e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80160dc:	2303      	movs	r3, #3
 80160de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80160e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80160e2:	4618      	mov	r0, r3
 80160e4:	3710      	adds	r7, #16
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}

080160ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80160ea:	b480      	push	{r7}
 80160ec:	b083      	sub	sp, #12
 80160ee:	af00      	add	r7, sp, #0
 80160f0:	6078      	str	r0, [r7, #4]
 80160f2:	460b      	mov	r3, r1
 80160f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80160f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80160f8:	4618      	mov	r0, r3
 80160fa:	370c      	adds	r7, #12
 80160fc:	46bd      	mov	sp, r7
 80160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016102:	4770      	bx	lr

08016104 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016104:	b480      	push	{r7}
 8016106:	b083      	sub	sp, #12
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	460b      	mov	r3, r1
 801610e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016110:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016112:	4618      	mov	r0, r3
 8016114:	370c      	adds	r7, #12
 8016116:	46bd      	mov	sp, r7
 8016118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611c:	4770      	bx	lr

0801611e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801611e:	b580      	push	{r7, lr}
 8016120:	b086      	sub	sp, #24
 8016122:	af00      	add	r7, sp, #0
 8016124:	6078      	str	r0, [r7, #4]
 8016126:	460b      	mov	r3, r1
 8016128:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016132:	2300      	movs	r3, #0
 8016134:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	885b      	ldrh	r3, [r3, #2]
 801613a:	b29a      	uxth	r2, r3
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	b29b      	uxth	r3, r3
 8016142:	429a      	cmp	r2, r3
 8016144:	d920      	bls.n	8016188 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	b29b      	uxth	r3, r3
 801614c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801614e:	e013      	b.n	8016178 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016150:	f107 030a 	add.w	r3, r7, #10
 8016154:	4619      	mov	r1, r3
 8016156:	6978      	ldr	r0, [r7, #20]
 8016158:	f000 f81b 	bl	8016192 <USBD_GetNextDesc>
 801615c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	785b      	ldrb	r3, [r3, #1]
 8016162:	2b05      	cmp	r3, #5
 8016164:	d108      	bne.n	8016178 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	789b      	ldrb	r3, [r3, #2]
 801616e:	78fa      	ldrb	r2, [r7, #3]
 8016170:	429a      	cmp	r2, r3
 8016172:	d008      	beq.n	8016186 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016174:	2300      	movs	r3, #0
 8016176:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	885b      	ldrh	r3, [r3, #2]
 801617c:	b29a      	uxth	r2, r3
 801617e:	897b      	ldrh	r3, [r7, #10]
 8016180:	429a      	cmp	r2, r3
 8016182:	d8e5      	bhi.n	8016150 <USBD_GetEpDesc+0x32>
 8016184:	e000      	b.n	8016188 <USBD_GetEpDesc+0x6a>
          break;
 8016186:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016188:	693b      	ldr	r3, [r7, #16]
}
 801618a:	4618      	mov	r0, r3
 801618c:	3718      	adds	r7, #24
 801618e:	46bd      	mov	sp, r7
 8016190:	bd80      	pop	{r7, pc}

08016192 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016192:	b480      	push	{r7}
 8016194:	b085      	sub	sp, #20
 8016196:	af00      	add	r7, sp, #0
 8016198:	6078      	str	r0, [r7, #4]
 801619a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	881a      	ldrh	r2, [r3, #0]
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	b29b      	uxth	r3, r3
 80161aa:	4413      	add	r3, r2
 80161ac:	b29a      	uxth	r2, r3
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	781b      	ldrb	r3, [r3, #0]
 80161b6:	461a      	mov	r2, r3
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	4413      	add	r3, r2
 80161bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80161be:	68fb      	ldr	r3, [r7, #12]
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	3714      	adds	r7, #20
 80161c4:	46bd      	mov	sp, r7
 80161c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ca:	4770      	bx	lr

080161cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80161cc:	b480      	push	{r7}
 80161ce:	b087      	sub	sp, #28
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	781b      	ldrb	r3, [r3, #0]
 80161dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80161de:	697b      	ldr	r3, [r7, #20]
 80161e0:	3301      	adds	r3, #1
 80161e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	781b      	ldrb	r3, [r3, #0]
 80161e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80161ea:	8a3b      	ldrh	r3, [r7, #16]
 80161ec:	021b      	lsls	r3, r3, #8
 80161ee:	b21a      	sxth	r2, r3
 80161f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80161f4:	4313      	orrs	r3, r2
 80161f6:	b21b      	sxth	r3, r3
 80161f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80161fa:	89fb      	ldrh	r3, [r7, #14]
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	371c      	adds	r7, #28
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr

08016208 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b084      	sub	sp, #16
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016212:	2300      	movs	r3, #0
 8016214:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	781b      	ldrb	r3, [r3, #0]
 801621a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801621e:	2b40      	cmp	r3, #64	; 0x40
 8016220:	d005      	beq.n	801622e <USBD_StdDevReq+0x26>
 8016222:	2b40      	cmp	r3, #64	; 0x40
 8016224:	d857      	bhi.n	80162d6 <USBD_StdDevReq+0xce>
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00f      	beq.n	801624a <USBD_StdDevReq+0x42>
 801622a:	2b20      	cmp	r3, #32
 801622c:	d153      	bne.n	80162d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	32ae      	adds	r2, #174	; 0xae
 8016238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801623c:	689b      	ldr	r3, [r3, #8]
 801623e:	6839      	ldr	r1, [r7, #0]
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	4798      	blx	r3
 8016244:	4603      	mov	r3, r0
 8016246:	73fb      	strb	r3, [r7, #15]
      break;
 8016248:	e04a      	b.n	80162e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	785b      	ldrb	r3, [r3, #1]
 801624e:	2b09      	cmp	r3, #9
 8016250:	d83b      	bhi.n	80162ca <USBD_StdDevReq+0xc2>
 8016252:	a201      	add	r2, pc, #4	; (adr r2, 8016258 <USBD_StdDevReq+0x50>)
 8016254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016258:	080162ad 	.word	0x080162ad
 801625c:	080162c1 	.word	0x080162c1
 8016260:	080162cb 	.word	0x080162cb
 8016264:	080162b7 	.word	0x080162b7
 8016268:	080162cb 	.word	0x080162cb
 801626c:	0801628b 	.word	0x0801628b
 8016270:	08016281 	.word	0x08016281
 8016274:	080162cb 	.word	0x080162cb
 8016278:	080162a3 	.word	0x080162a3
 801627c:	08016295 	.word	0x08016295
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016280:	6839      	ldr	r1, [r7, #0]
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f000 fa3c 	bl	8016700 <USBD_GetDescriptor>
          break;
 8016288:	e024      	b.n	80162d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801628a:	6839      	ldr	r1, [r7, #0]
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f000 fba1 	bl	80169d4 <USBD_SetAddress>
          break;
 8016292:	e01f      	b.n	80162d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016294:	6839      	ldr	r1, [r7, #0]
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 fbe0 	bl	8016a5c <USBD_SetConfig>
 801629c:	4603      	mov	r3, r0
 801629e:	73fb      	strb	r3, [r7, #15]
          break;
 80162a0:	e018      	b.n	80162d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80162a2:	6839      	ldr	r1, [r7, #0]
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f000 fc83 	bl	8016bb0 <USBD_GetConfig>
          break;
 80162aa:	e013      	b.n	80162d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80162ac:	6839      	ldr	r1, [r7, #0]
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f000 fcb4 	bl	8016c1c <USBD_GetStatus>
          break;
 80162b4:	e00e      	b.n	80162d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80162b6:	6839      	ldr	r1, [r7, #0]
 80162b8:	6878      	ldr	r0, [r7, #4]
 80162ba:	f000 fce3 	bl	8016c84 <USBD_SetFeature>
          break;
 80162be:	e009      	b.n	80162d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80162c0:	6839      	ldr	r1, [r7, #0]
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f000 fd07 	bl	8016cd6 <USBD_ClrFeature>
          break;
 80162c8:	e004      	b.n	80162d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80162ca:	6839      	ldr	r1, [r7, #0]
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f000 fd5e 	bl	8016d8e <USBD_CtlError>
          break;
 80162d2:	bf00      	nop
      }
      break;
 80162d4:	e004      	b.n	80162e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80162d6:	6839      	ldr	r1, [r7, #0]
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f000 fd58 	bl	8016d8e <USBD_CtlError>
      break;
 80162de:	bf00      	nop
  }

  return ret;
 80162e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3710      	adds	r7, #16
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop

080162ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b084      	sub	sp, #16
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80162f6:	2300      	movs	r3, #0
 80162f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	781b      	ldrb	r3, [r3, #0]
 80162fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016302:	2b40      	cmp	r3, #64	; 0x40
 8016304:	d005      	beq.n	8016312 <USBD_StdItfReq+0x26>
 8016306:	2b40      	cmp	r3, #64	; 0x40
 8016308:	d852      	bhi.n	80163b0 <USBD_StdItfReq+0xc4>
 801630a:	2b00      	cmp	r3, #0
 801630c:	d001      	beq.n	8016312 <USBD_StdItfReq+0x26>
 801630e:	2b20      	cmp	r3, #32
 8016310:	d14e      	bne.n	80163b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016318:	b2db      	uxtb	r3, r3
 801631a:	3b01      	subs	r3, #1
 801631c:	2b02      	cmp	r3, #2
 801631e:	d840      	bhi.n	80163a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016320:	683b      	ldr	r3, [r7, #0]
 8016322:	889b      	ldrh	r3, [r3, #4]
 8016324:	b2db      	uxtb	r3, r3
 8016326:	2b01      	cmp	r3, #1
 8016328:	d836      	bhi.n	8016398 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	889b      	ldrh	r3, [r3, #4]
 801632e:	b2db      	uxtb	r3, r3
 8016330:	4619      	mov	r1, r3
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f7ff fed9 	bl	80160ea <USBD_CoreFindIF>
 8016338:	4603      	mov	r3, r0
 801633a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801633c:	7bbb      	ldrb	r3, [r7, #14]
 801633e:	2bff      	cmp	r3, #255	; 0xff
 8016340:	d01d      	beq.n	801637e <USBD_StdItfReq+0x92>
 8016342:	7bbb      	ldrb	r3, [r7, #14]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d11a      	bne.n	801637e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016348:	7bba      	ldrb	r2, [r7, #14]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	32ae      	adds	r2, #174	; 0xae
 801634e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016352:	689b      	ldr	r3, [r3, #8]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d00f      	beq.n	8016378 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016358:	7bba      	ldrb	r2, [r7, #14]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016360:	7bba      	ldrb	r2, [r7, #14]
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	32ae      	adds	r2, #174	; 0xae
 8016366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801636a:	689b      	ldr	r3, [r3, #8]
 801636c:	6839      	ldr	r1, [r7, #0]
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	4798      	blx	r3
 8016372:	4603      	mov	r3, r0
 8016374:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016376:	e004      	b.n	8016382 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016378:	2303      	movs	r3, #3
 801637a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801637c:	e001      	b.n	8016382 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801637e:	2303      	movs	r3, #3
 8016380:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	88db      	ldrh	r3, [r3, #6]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d110      	bne.n	80163ac <USBD_StdItfReq+0xc0>
 801638a:	7bfb      	ldrb	r3, [r7, #15]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d10d      	bne.n	80163ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016390:	6878      	ldr	r0, [r7, #4]
 8016392:	f000 fdaa 	bl	8016eea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016396:	e009      	b.n	80163ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016398:	6839      	ldr	r1, [r7, #0]
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f000 fcf7 	bl	8016d8e <USBD_CtlError>
          break;
 80163a0:	e004      	b.n	80163ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80163a2:	6839      	ldr	r1, [r7, #0]
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f000 fcf2 	bl	8016d8e <USBD_CtlError>
          break;
 80163aa:	e000      	b.n	80163ae <USBD_StdItfReq+0xc2>
          break;
 80163ac:	bf00      	nop
      }
      break;
 80163ae:	e004      	b.n	80163ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80163b0:	6839      	ldr	r1, [r7, #0]
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f000 fceb 	bl	8016d8e <USBD_CtlError>
      break;
 80163b8:	bf00      	nop
  }

  return ret;
 80163ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3710      	adds	r7, #16
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b084      	sub	sp, #16
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80163ce:	2300      	movs	r3, #0
 80163d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	889b      	ldrh	r3, [r3, #4]
 80163d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	781b      	ldrb	r3, [r3, #0]
 80163dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80163e0:	2b40      	cmp	r3, #64	; 0x40
 80163e2:	d007      	beq.n	80163f4 <USBD_StdEPReq+0x30>
 80163e4:	2b40      	cmp	r3, #64	; 0x40
 80163e6:	f200 817f 	bhi.w	80166e8 <USBD_StdEPReq+0x324>
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d02a      	beq.n	8016444 <USBD_StdEPReq+0x80>
 80163ee:	2b20      	cmp	r3, #32
 80163f0:	f040 817a 	bne.w	80166e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80163f4:	7bbb      	ldrb	r3, [r7, #14]
 80163f6:	4619      	mov	r1, r3
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f7ff fe83 	bl	8016104 <USBD_CoreFindEP>
 80163fe:	4603      	mov	r3, r0
 8016400:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016402:	7b7b      	ldrb	r3, [r7, #13]
 8016404:	2bff      	cmp	r3, #255	; 0xff
 8016406:	f000 8174 	beq.w	80166f2 <USBD_StdEPReq+0x32e>
 801640a:	7b7b      	ldrb	r3, [r7, #13]
 801640c:	2b00      	cmp	r3, #0
 801640e:	f040 8170 	bne.w	80166f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016412:	7b7a      	ldrb	r2, [r7, #13]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801641a:	7b7a      	ldrb	r2, [r7, #13]
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	32ae      	adds	r2, #174	; 0xae
 8016420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016424:	689b      	ldr	r3, [r3, #8]
 8016426:	2b00      	cmp	r3, #0
 8016428:	f000 8163 	beq.w	80166f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801642c:	7b7a      	ldrb	r2, [r7, #13]
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	32ae      	adds	r2, #174	; 0xae
 8016432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016436:	689b      	ldr	r3, [r3, #8]
 8016438:	6839      	ldr	r1, [r7, #0]
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	4798      	blx	r3
 801643e:	4603      	mov	r3, r0
 8016440:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016442:	e156      	b.n	80166f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	785b      	ldrb	r3, [r3, #1]
 8016448:	2b03      	cmp	r3, #3
 801644a:	d008      	beq.n	801645e <USBD_StdEPReq+0x9a>
 801644c:	2b03      	cmp	r3, #3
 801644e:	f300 8145 	bgt.w	80166dc <USBD_StdEPReq+0x318>
 8016452:	2b00      	cmp	r3, #0
 8016454:	f000 809b 	beq.w	801658e <USBD_StdEPReq+0x1ca>
 8016458:	2b01      	cmp	r3, #1
 801645a:	d03c      	beq.n	80164d6 <USBD_StdEPReq+0x112>
 801645c:	e13e      	b.n	80166dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016464:	b2db      	uxtb	r3, r3
 8016466:	2b02      	cmp	r3, #2
 8016468:	d002      	beq.n	8016470 <USBD_StdEPReq+0xac>
 801646a:	2b03      	cmp	r3, #3
 801646c:	d016      	beq.n	801649c <USBD_StdEPReq+0xd8>
 801646e:	e02c      	b.n	80164ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016470:	7bbb      	ldrb	r3, [r7, #14]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d00d      	beq.n	8016492 <USBD_StdEPReq+0xce>
 8016476:	7bbb      	ldrb	r3, [r7, #14]
 8016478:	2b80      	cmp	r3, #128	; 0x80
 801647a:	d00a      	beq.n	8016492 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801647c:	7bbb      	ldrb	r3, [r7, #14]
 801647e:	4619      	mov	r1, r3
 8016480:	6878      	ldr	r0, [r7, #4]
 8016482:	f004 fec0 	bl	801b206 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016486:	2180      	movs	r1, #128	; 0x80
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f004 febc 	bl	801b206 <USBD_LL_StallEP>
 801648e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016490:	e020      	b.n	80164d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016492:	6839      	ldr	r1, [r7, #0]
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f000 fc7a 	bl	8016d8e <USBD_CtlError>
              break;
 801649a:	e01b      	b.n	80164d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	885b      	ldrh	r3, [r3, #2]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d10e      	bne.n	80164c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80164a4:	7bbb      	ldrb	r3, [r7, #14]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d00b      	beq.n	80164c2 <USBD_StdEPReq+0xfe>
 80164aa:	7bbb      	ldrb	r3, [r7, #14]
 80164ac:	2b80      	cmp	r3, #128	; 0x80
 80164ae:	d008      	beq.n	80164c2 <USBD_StdEPReq+0xfe>
 80164b0:	683b      	ldr	r3, [r7, #0]
 80164b2:	88db      	ldrh	r3, [r3, #6]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d104      	bne.n	80164c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80164b8:	7bbb      	ldrb	r3, [r7, #14]
 80164ba:	4619      	mov	r1, r3
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f004 fea2 	bl	801b206 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f000 fd11 	bl	8016eea <USBD_CtlSendStatus>

              break;
 80164c8:	e004      	b.n	80164d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80164ca:	6839      	ldr	r1, [r7, #0]
 80164cc:	6878      	ldr	r0, [r7, #4]
 80164ce:	f000 fc5e 	bl	8016d8e <USBD_CtlError>
              break;
 80164d2:	bf00      	nop
          }
          break;
 80164d4:	e107      	b.n	80166e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164dc:	b2db      	uxtb	r3, r3
 80164de:	2b02      	cmp	r3, #2
 80164e0:	d002      	beq.n	80164e8 <USBD_StdEPReq+0x124>
 80164e2:	2b03      	cmp	r3, #3
 80164e4:	d016      	beq.n	8016514 <USBD_StdEPReq+0x150>
 80164e6:	e04b      	b.n	8016580 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80164e8:	7bbb      	ldrb	r3, [r7, #14]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d00d      	beq.n	801650a <USBD_StdEPReq+0x146>
 80164ee:	7bbb      	ldrb	r3, [r7, #14]
 80164f0:	2b80      	cmp	r3, #128	; 0x80
 80164f2:	d00a      	beq.n	801650a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80164f4:	7bbb      	ldrb	r3, [r7, #14]
 80164f6:	4619      	mov	r1, r3
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f004 fe84 	bl	801b206 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80164fe:	2180      	movs	r1, #128	; 0x80
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f004 fe80 	bl	801b206 <USBD_LL_StallEP>
 8016506:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016508:	e040      	b.n	801658c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801650a:	6839      	ldr	r1, [r7, #0]
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f000 fc3e 	bl	8016d8e <USBD_CtlError>
              break;
 8016512:	e03b      	b.n	801658c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	885b      	ldrh	r3, [r3, #2]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d136      	bne.n	801658a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801651c:	7bbb      	ldrb	r3, [r7, #14]
 801651e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016522:	2b00      	cmp	r3, #0
 8016524:	d004      	beq.n	8016530 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016526:	7bbb      	ldrb	r3, [r7, #14]
 8016528:	4619      	mov	r1, r3
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	f004 fe8a 	bl	801b244 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f000 fcda 	bl	8016eea <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016536:	7bbb      	ldrb	r3, [r7, #14]
 8016538:	4619      	mov	r1, r3
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f7ff fde2 	bl	8016104 <USBD_CoreFindEP>
 8016540:	4603      	mov	r3, r0
 8016542:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016544:	7b7b      	ldrb	r3, [r7, #13]
 8016546:	2bff      	cmp	r3, #255	; 0xff
 8016548:	d01f      	beq.n	801658a <USBD_StdEPReq+0x1c6>
 801654a:	7b7b      	ldrb	r3, [r7, #13]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d11c      	bne.n	801658a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016550:	7b7a      	ldrb	r2, [r7, #13]
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016558:	7b7a      	ldrb	r2, [r7, #13]
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	32ae      	adds	r2, #174	; 0xae
 801655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016562:	689b      	ldr	r3, [r3, #8]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d010      	beq.n	801658a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016568:	7b7a      	ldrb	r2, [r7, #13]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	32ae      	adds	r2, #174	; 0xae
 801656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016572:	689b      	ldr	r3, [r3, #8]
 8016574:	6839      	ldr	r1, [r7, #0]
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	4798      	blx	r3
 801657a:	4603      	mov	r3, r0
 801657c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801657e:	e004      	b.n	801658a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016580:	6839      	ldr	r1, [r7, #0]
 8016582:	6878      	ldr	r0, [r7, #4]
 8016584:	f000 fc03 	bl	8016d8e <USBD_CtlError>
              break;
 8016588:	e000      	b.n	801658c <USBD_StdEPReq+0x1c8>
              break;
 801658a:	bf00      	nop
          }
          break;
 801658c:	e0ab      	b.n	80166e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016594:	b2db      	uxtb	r3, r3
 8016596:	2b02      	cmp	r3, #2
 8016598:	d002      	beq.n	80165a0 <USBD_StdEPReq+0x1dc>
 801659a:	2b03      	cmp	r3, #3
 801659c:	d032      	beq.n	8016604 <USBD_StdEPReq+0x240>
 801659e:	e097      	b.n	80166d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80165a0:	7bbb      	ldrb	r3, [r7, #14]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d007      	beq.n	80165b6 <USBD_StdEPReq+0x1f2>
 80165a6:	7bbb      	ldrb	r3, [r7, #14]
 80165a8:	2b80      	cmp	r3, #128	; 0x80
 80165aa:	d004      	beq.n	80165b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80165ac:	6839      	ldr	r1, [r7, #0]
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f000 fbed 	bl	8016d8e <USBD_CtlError>
                break;
 80165b4:	e091      	b.n	80166da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80165b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	da0b      	bge.n	80165d6 <USBD_StdEPReq+0x212>
 80165be:	7bbb      	ldrb	r3, [r7, #14]
 80165c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80165c4:	4613      	mov	r3, r2
 80165c6:	009b      	lsls	r3, r3, #2
 80165c8:	4413      	add	r3, r2
 80165ca:	009b      	lsls	r3, r3, #2
 80165cc:	3310      	adds	r3, #16
 80165ce:	687a      	ldr	r2, [r7, #4]
 80165d0:	4413      	add	r3, r2
 80165d2:	3304      	adds	r3, #4
 80165d4:	e00b      	b.n	80165ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80165d6:	7bbb      	ldrb	r3, [r7, #14]
 80165d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80165dc:	4613      	mov	r3, r2
 80165de:	009b      	lsls	r3, r3, #2
 80165e0:	4413      	add	r3, r2
 80165e2:	009b      	lsls	r3, r3, #2
 80165e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80165e8:	687a      	ldr	r2, [r7, #4]
 80165ea:	4413      	add	r3, r2
 80165ec:	3304      	adds	r3, #4
 80165ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	2200      	movs	r2, #0
 80165f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80165f6:	68bb      	ldr	r3, [r7, #8]
 80165f8:	2202      	movs	r2, #2
 80165fa:	4619      	mov	r1, r3
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f000 fc37 	bl	8016e70 <USBD_CtlSendData>
              break;
 8016602:	e06a      	b.n	80166da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016608:	2b00      	cmp	r3, #0
 801660a:	da11      	bge.n	8016630 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801660c:	7bbb      	ldrb	r3, [r7, #14]
 801660e:	f003 020f 	and.w	r2, r3, #15
 8016612:	6879      	ldr	r1, [r7, #4]
 8016614:	4613      	mov	r3, r2
 8016616:	009b      	lsls	r3, r3, #2
 8016618:	4413      	add	r3, r2
 801661a:	009b      	lsls	r3, r3, #2
 801661c:	440b      	add	r3, r1
 801661e:	3324      	adds	r3, #36	; 0x24
 8016620:	881b      	ldrh	r3, [r3, #0]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d117      	bne.n	8016656 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016626:	6839      	ldr	r1, [r7, #0]
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f000 fbb0 	bl	8016d8e <USBD_CtlError>
                  break;
 801662e:	e054      	b.n	80166da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016630:	7bbb      	ldrb	r3, [r7, #14]
 8016632:	f003 020f 	and.w	r2, r3, #15
 8016636:	6879      	ldr	r1, [r7, #4]
 8016638:	4613      	mov	r3, r2
 801663a:	009b      	lsls	r3, r3, #2
 801663c:	4413      	add	r3, r2
 801663e:	009b      	lsls	r3, r3, #2
 8016640:	440b      	add	r3, r1
 8016642:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016646:	881b      	ldrh	r3, [r3, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d104      	bne.n	8016656 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801664c:	6839      	ldr	r1, [r7, #0]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f000 fb9d 	bl	8016d8e <USBD_CtlError>
                  break;
 8016654:	e041      	b.n	80166da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801665a:	2b00      	cmp	r3, #0
 801665c:	da0b      	bge.n	8016676 <USBD_StdEPReq+0x2b2>
 801665e:	7bbb      	ldrb	r3, [r7, #14]
 8016660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016664:	4613      	mov	r3, r2
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	4413      	add	r3, r2
 801666a:	009b      	lsls	r3, r3, #2
 801666c:	3310      	adds	r3, #16
 801666e:	687a      	ldr	r2, [r7, #4]
 8016670:	4413      	add	r3, r2
 8016672:	3304      	adds	r3, #4
 8016674:	e00b      	b.n	801668e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016676:	7bbb      	ldrb	r3, [r7, #14]
 8016678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801667c:	4613      	mov	r3, r2
 801667e:	009b      	lsls	r3, r3, #2
 8016680:	4413      	add	r3, r2
 8016682:	009b      	lsls	r3, r3, #2
 8016684:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016688:	687a      	ldr	r2, [r7, #4]
 801668a:	4413      	add	r3, r2
 801668c:	3304      	adds	r3, #4
 801668e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016690:	7bbb      	ldrb	r3, [r7, #14]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d002      	beq.n	801669c <USBD_StdEPReq+0x2d8>
 8016696:	7bbb      	ldrb	r3, [r7, #14]
 8016698:	2b80      	cmp	r3, #128	; 0x80
 801669a:	d103      	bne.n	80166a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	2200      	movs	r2, #0
 80166a0:	601a      	str	r2, [r3, #0]
 80166a2:	e00e      	b.n	80166c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80166a4:	7bbb      	ldrb	r3, [r7, #14]
 80166a6:	4619      	mov	r1, r3
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f004 fdea 	bl	801b282 <USBD_LL_IsStallEP>
 80166ae:	4603      	mov	r3, r0
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d003      	beq.n	80166bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	2201      	movs	r2, #1
 80166b8:	601a      	str	r2, [r3, #0]
 80166ba:	e002      	b.n	80166c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	2200      	movs	r2, #0
 80166c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80166c2:	68bb      	ldr	r3, [r7, #8]
 80166c4:	2202      	movs	r2, #2
 80166c6:	4619      	mov	r1, r3
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f000 fbd1 	bl	8016e70 <USBD_CtlSendData>
              break;
 80166ce:	e004      	b.n	80166da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80166d0:	6839      	ldr	r1, [r7, #0]
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f000 fb5b 	bl	8016d8e <USBD_CtlError>
              break;
 80166d8:	bf00      	nop
          }
          break;
 80166da:	e004      	b.n	80166e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80166dc:	6839      	ldr	r1, [r7, #0]
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f000 fb55 	bl	8016d8e <USBD_CtlError>
          break;
 80166e4:	bf00      	nop
      }
      break;
 80166e6:	e005      	b.n	80166f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80166e8:	6839      	ldr	r1, [r7, #0]
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	f000 fb4f 	bl	8016d8e <USBD_CtlError>
      break;
 80166f0:	e000      	b.n	80166f4 <USBD_StdEPReq+0x330>
      break;
 80166f2:	bf00      	nop
  }

  return ret;
 80166f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3710      	adds	r7, #16
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
	...

08016700 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b084      	sub	sp, #16
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
 8016708:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801670a:	2300      	movs	r3, #0
 801670c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801670e:	2300      	movs	r3, #0
 8016710:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016712:	2300      	movs	r3, #0
 8016714:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	885b      	ldrh	r3, [r3, #2]
 801671a:	0a1b      	lsrs	r3, r3, #8
 801671c:	b29b      	uxth	r3, r3
 801671e:	3b01      	subs	r3, #1
 8016720:	2b06      	cmp	r3, #6
 8016722:	f200 8128 	bhi.w	8016976 <USBD_GetDescriptor+0x276>
 8016726:	a201      	add	r2, pc, #4	; (adr r2, 801672c <USBD_GetDescriptor+0x2c>)
 8016728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801672c:	08016749 	.word	0x08016749
 8016730:	08016761 	.word	0x08016761
 8016734:	080167a1 	.word	0x080167a1
 8016738:	08016977 	.word	0x08016977
 801673c:	08016977 	.word	0x08016977
 8016740:	08016917 	.word	0x08016917
 8016744:	08016943 	.word	0x08016943
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	7c12      	ldrb	r2, [r2, #16]
 8016754:	f107 0108 	add.w	r1, r7, #8
 8016758:	4610      	mov	r0, r2
 801675a:	4798      	blx	r3
 801675c:	60f8      	str	r0, [r7, #12]
      break;
 801675e:	e112      	b.n	8016986 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	7c1b      	ldrb	r3, [r3, #16]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d10d      	bne.n	8016784 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016770:	f107 0208 	add.w	r2, r7, #8
 8016774:	4610      	mov	r0, r2
 8016776:	4798      	blx	r3
 8016778:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	3301      	adds	r3, #1
 801677e:	2202      	movs	r2, #2
 8016780:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016782:	e100      	b.n	8016986 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801678c:	f107 0208 	add.w	r2, r7, #8
 8016790:	4610      	mov	r0, r2
 8016792:	4798      	blx	r3
 8016794:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	3301      	adds	r3, #1
 801679a:	2202      	movs	r2, #2
 801679c:	701a      	strb	r2, [r3, #0]
      break;
 801679e:	e0f2      	b.n	8016986 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	885b      	ldrh	r3, [r3, #2]
 80167a4:	b2db      	uxtb	r3, r3
 80167a6:	2b05      	cmp	r3, #5
 80167a8:	f200 80ac 	bhi.w	8016904 <USBD_GetDescriptor+0x204>
 80167ac:	a201      	add	r2, pc, #4	; (adr r2, 80167b4 <USBD_GetDescriptor+0xb4>)
 80167ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167b2:	bf00      	nop
 80167b4:	080167cd 	.word	0x080167cd
 80167b8:	08016801 	.word	0x08016801
 80167bc:	08016835 	.word	0x08016835
 80167c0:	08016869 	.word	0x08016869
 80167c4:	0801689d 	.word	0x0801689d
 80167c8:	080168d1 	.word	0x080168d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167d2:	685b      	ldr	r3, [r3, #4]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d00b      	beq.n	80167f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80167de:	685b      	ldr	r3, [r3, #4]
 80167e0:	687a      	ldr	r2, [r7, #4]
 80167e2:	7c12      	ldrb	r2, [r2, #16]
 80167e4:	f107 0108 	add.w	r1, r7, #8
 80167e8:	4610      	mov	r0, r2
 80167ea:	4798      	blx	r3
 80167ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80167ee:	e091      	b.n	8016914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80167f0:	6839      	ldr	r1, [r7, #0]
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f000 facb 	bl	8016d8e <USBD_CtlError>
            err++;
 80167f8:	7afb      	ldrb	r3, [r7, #11]
 80167fa:	3301      	adds	r3, #1
 80167fc:	72fb      	strb	r3, [r7, #11]
          break;
 80167fe:	e089      	b.n	8016914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016806:	689b      	ldr	r3, [r3, #8]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d00b      	beq.n	8016824 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016812:	689b      	ldr	r3, [r3, #8]
 8016814:	687a      	ldr	r2, [r7, #4]
 8016816:	7c12      	ldrb	r2, [r2, #16]
 8016818:	f107 0108 	add.w	r1, r7, #8
 801681c:	4610      	mov	r0, r2
 801681e:	4798      	blx	r3
 8016820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016822:	e077      	b.n	8016914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016824:	6839      	ldr	r1, [r7, #0]
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f000 fab1 	bl	8016d8e <USBD_CtlError>
            err++;
 801682c:	7afb      	ldrb	r3, [r7, #11]
 801682e:	3301      	adds	r3, #1
 8016830:	72fb      	strb	r3, [r7, #11]
          break;
 8016832:	e06f      	b.n	8016914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801683a:	68db      	ldr	r3, [r3, #12]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d00b      	beq.n	8016858 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016846:	68db      	ldr	r3, [r3, #12]
 8016848:	687a      	ldr	r2, [r7, #4]
 801684a:	7c12      	ldrb	r2, [r2, #16]
 801684c:	f107 0108 	add.w	r1, r7, #8
 8016850:	4610      	mov	r0, r2
 8016852:	4798      	blx	r3
 8016854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016856:	e05d      	b.n	8016914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016858:	6839      	ldr	r1, [r7, #0]
 801685a:	6878      	ldr	r0, [r7, #4]
 801685c:	f000 fa97 	bl	8016d8e <USBD_CtlError>
            err++;
 8016860:	7afb      	ldrb	r3, [r7, #11]
 8016862:	3301      	adds	r3, #1
 8016864:	72fb      	strb	r3, [r7, #11]
          break;
 8016866:	e055      	b.n	8016914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801686e:	691b      	ldr	r3, [r3, #16]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d00b      	beq.n	801688c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801687a:	691b      	ldr	r3, [r3, #16]
 801687c:	687a      	ldr	r2, [r7, #4]
 801687e:	7c12      	ldrb	r2, [r2, #16]
 8016880:	f107 0108 	add.w	r1, r7, #8
 8016884:	4610      	mov	r0, r2
 8016886:	4798      	blx	r3
 8016888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801688a:	e043      	b.n	8016914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801688c:	6839      	ldr	r1, [r7, #0]
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f000 fa7d 	bl	8016d8e <USBD_CtlError>
            err++;
 8016894:	7afb      	ldrb	r3, [r7, #11]
 8016896:	3301      	adds	r3, #1
 8016898:	72fb      	strb	r3, [r7, #11]
          break;
 801689a:	e03b      	b.n	8016914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168a2:	695b      	ldr	r3, [r3, #20]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d00b      	beq.n	80168c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168ae:	695b      	ldr	r3, [r3, #20]
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	7c12      	ldrb	r2, [r2, #16]
 80168b4:	f107 0108 	add.w	r1, r7, #8
 80168b8:	4610      	mov	r0, r2
 80168ba:	4798      	blx	r3
 80168bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80168be:	e029      	b.n	8016914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80168c0:	6839      	ldr	r1, [r7, #0]
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f000 fa63 	bl	8016d8e <USBD_CtlError>
            err++;
 80168c8:	7afb      	ldrb	r3, [r7, #11]
 80168ca:	3301      	adds	r3, #1
 80168cc:	72fb      	strb	r3, [r7, #11]
          break;
 80168ce:	e021      	b.n	8016914 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168d6:	699b      	ldr	r3, [r3, #24]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d00b      	beq.n	80168f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80168e2:	699b      	ldr	r3, [r3, #24]
 80168e4:	687a      	ldr	r2, [r7, #4]
 80168e6:	7c12      	ldrb	r2, [r2, #16]
 80168e8:	f107 0108 	add.w	r1, r7, #8
 80168ec:	4610      	mov	r0, r2
 80168ee:	4798      	blx	r3
 80168f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80168f2:	e00f      	b.n	8016914 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80168f4:	6839      	ldr	r1, [r7, #0]
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f000 fa49 	bl	8016d8e <USBD_CtlError>
            err++;
 80168fc:	7afb      	ldrb	r3, [r7, #11]
 80168fe:	3301      	adds	r3, #1
 8016900:	72fb      	strb	r3, [r7, #11]
          break;
 8016902:	e007      	b.n	8016914 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016904:	6839      	ldr	r1, [r7, #0]
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f000 fa41 	bl	8016d8e <USBD_CtlError>
          err++;
 801690c:	7afb      	ldrb	r3, [r7, #11]
 801690e:	3301      	adds	r3, #1
 8016910:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016912:	bf00      	nop
      }
      break;
 8016914:	e037      	b.n	8016986 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	7c1b      	ldrb	r3, [r3, #16]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d109      	bne.n	8016932 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016926:	f107 0208 	add.w	r2, r7, #8
 801692a:	4610      	mov	r0, r2
 801692c:	4798      	blx	r3
 801692e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016930:	e029      	b.n	8016986 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016932:	6839      	ldr	r1, [r7, #0]
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	f000 fa2a 	bl	8016d8e <USBD_CtlError>
        err++;
 801693a:	7afb      	ldrb	r3, [r7, #11]
 801693c:	3301      	adds	r3, #1
 801693e:	72fb      	strb	r3, [r7, #11]
      break;
 8016940:	e021      	b.n	8016986 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	7c1b      	ldrb	r3, [r3, #16]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d10d      	bne.n	8016966 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016952:	f107 0208 	add.w	r2, r7, #8
 8016956:	4610      	mov	r0, r2
 8016958:	4798      	blx	r3
 801695a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	3301      	adds	r3, #1
 8016960:	2207      	movs	r2, #7
 8016962:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016964:	e00f      	b.n	8016986 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016966:	6839      	ldr	r1, [r7, #0]
 8016968:	6878      	ldr	r0, [r7, #4]
 801696a:	f000 fa10 	bl	8016d8e <USBD_CtlError>
        err++;
 801696e:	7afb      	ldrb	r3, [r7, #11]
 8016970:	3301      	adds	r3, #1
 8016972:	72fb      	strb	r3, [r7, #11]
      break;
 8016974:	e007      	b.n	8016986 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016976:	6839      	ldr	r1, [r7, #0]
 8016978:	6878      	ldr	r0, [r7, #4]
 801697a:	f000 fa08 	bl	8016d8e <USBD_CtlError>
      err++;
 801697e:	7afb      	ldrb	r3, [r7, #11]
 8016980:	3301      	adds	r3, #1
 8016982:	72fb      	strb	r3, [r7, #11]
      break;
 8016984:	bf00      	nop
  }

  if (err != 0U)
 8016986:	7afb      	ldrb	r3, [r7, #11]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d11e      	bne.n	80169ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	88db      	ldrh	r3, [r3, #6]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d016      	beq.n	80169c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016994:	893b      	ldrh	r3, [r7, #8]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d00e      	beq.n	80169b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	88da      	ldrh	r2, [r3, #6]
 801699e:	893b      	ldrh	r3, [r7, #8]
 80169a0:	4293      	cmp	r3, r2
 80169a2:	bf28      	it	cs
 80169a4:	4613      	movcs	r3, r2
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80169aa:	893b      	ldrh	r3, [r7, #8]
 80169ac:	461a      	mov	r2, r3
 80169ae:	68f9      	ldr	r1, [r7, #12]
 80169b0:	6878      	ldr	r0, [r7, #4]
 80169b2:	f000 fa5d 	bl	8016e70 <USBD_CtlSendData>
 80169b6:	e009      	b.n	80169cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80169b8:	6839      	ldr	r1, [r7, #0]
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f000 f9e7 	bl	8016d8e <USBD_CtlError>
 80169c0:	e004      	b.n	80169cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f000 fa91 	bl	8016eea <USBD_CtlSendStatus>
 80169c8:	e000      	b.n	80169cc <USBD_GetDescriptor+0x2cc>
    return;
 80169ca:	bf00      	nop
  }
}
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	bf00      	nop

080169d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b084      	sub	sp, #16
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	889b      	ldrh	r3, [r3, #4]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d131      	bne.n	8016a4a <USBD_SetAddress+0x76>
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	88db      	ldrh	r3, [r3, #6]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d12d      	bne.n	8016a4a <USBD_SetAddress+0x76>
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	885b      	ldrh	r3, [r3, #2]
 80169f2:	2b7f      	cmp	r3, #127	; 0x7f
 80169f4:	d829      	bhi.n	8016a4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	885b      	ldrh	r3, [r3, #2]
 80169fa:	b2db      	uxtb	r3, r3
 80169fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a08:	b2db      	uxtb	r3, r3
 8016a0a:	2b03      	cmp	r3, #3
 8016a0c:	d104      	bne.n	8016a18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016a0e:	6839      	ldr	r1, [r7, #0]
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f000 f9bc 	bl	8016d8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a16:	e01d      	b.n	8016a54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	7bfa      	ldrb	r2, [r7, #15]
 8016a1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016a20:	7bfb      	ldrb	r3, [r7, #15]
 8016a22:	4619      	mov	r1, r3
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f004 fc58 	bl	801b2da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f000 fa5d 	bl	8016eea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016a30:	7bfb      	ldrb	r3, [r7, #15]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d004      	beq.n	8016a40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2202      	movs	r2, #2
 8016a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a3e:	e009      	b.n	8016a54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2201      	movs	r2, #1
 8016a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a48:	e004      	b.n	8016a54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016a4a:	6839      	ldr	r1, [r7, #0]
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f000 f99e 	bl	8016d8e <USBD_CtlError>
  }
}
 8016a52:	bf00      	nop
 8016a54:	bf00      	nop
 8016a56:	3710      	adds	r7, #16
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}

08016a5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a66:	2300      	movs	r3, #0
 8016a68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016a6a:	683b      	ldr	r3, [r7, #0]
 8016a6c:	885b      	ldrh	r3, [r3, #2]
 8016a6e:	b2da      	uxtb	r2, r3
 8016a70:	4b4e      	ldr	r3, [pc, #312]	; (8016bac <USBD_SetConfig+0x150>)
 8016a72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016a74:	4b4d      	ldr	r3, [pc, #308]	; (8016bac <USBD_SetConfig+0x150>)
 8016a76:	781b      	ldrb	r3, [r3, #0]
 8016a78:	2b01      	cmp	r3, #1
 8016a7a:	d905      	bls.n	8016a88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016a7c:	6839      	ldr	r1, [r7, #0]
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f000 f985 	bl	8016d8e <USBD_CtlError>
    return USBD_FAIL;
 8016a84:	2303      	movs	r3, #3
 8016a86:	e08c      	b.n	8016ba2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a8e:	b2db      	uxtb	r3, r3
 8016a90:	2b02      	cmp	r3, #2
 8016a92:	d002      	beq.n	8016a9a <USBD_SetConfig+0x3e>
 8016a94:	2b03      	cmp	r3, #3
 8016a96:	d029      	beq.n	8016aec <USBD_SetConfig+0x90>
 8016a98:	e075      	b.n	8016b86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016a9a:	4b44      	ldr	r3, [pc, #272]	; (8016bac <USBD_SetConfig+0x150>)
 8016a9c:	781b      	ldrb	r3, [r3, #0]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d020      	beq.n	8016ae4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016aa2:	4b42      	ldr	r3, [pc, #264]	; (8016bac <USBD_SetConfig+0x150>)
 8016aa4:	781b      	ldrb	r3, [r3, #0]
 8016aa6:	461a      	mov	r2, r3
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016aac:	4b3f      	ldr	r3, [pc, #252]	; (8016bac <USBD_SetConfig+0x150>)
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	4619      	mov	r1, r3
 8016ab2:	6878      	ldr	r0, [r7, #4]
 8016ab4:	f7fe ffe7 	bl	8015a86 <USBD_SetClassConfig>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016abc:	7bfb      	ldrb	r3, [r7, #15]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d008      	beq.n	8016ad4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016ac2:	6839      	ldr	r1, [r7, #0]
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	f000 f962 	bl	8016d8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	2202      	movs	r2, #2
 8016ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016ad2:	e065      	b.n	8016ba0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016ad4:	6878      	ldr	r0, [r7, #4]
 8016ad6:	f000 fa08 	bl	8016eea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2203      	movs	r2, #3
 8016ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016ae2:	e05d      	b.n	8016ba0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016ae4:	6878      	ldr	r0, [r7, #4]
 8016ae6:	f000 fa00 	bl	8016eea <USBD_CtlSendStatus>
      break;
 8016aea:	e059      	b.n	8016ba0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016aec:	4b2f      	ldr	r3, [pc, #188]	; (8016bac <USBD_SetConfig+0x150>)
 8016aee:	781b      	ldrb	r3, [r3, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d112      	bne.n	8016b1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	2202      	movs	r2, #2
 8016af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016afc:	4b2b      	ldr	r3, [pc, #172]	; (8016bac <USBD_SetConfig+0x150>)
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	461a      	mov	r2, r3
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016b06:	4b29      	ldr	r3, [pc, #164]	; (8016bac <USBD_SetConfig+0x150>)
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	4619      	mov	r1, r3
 8016b0c:	6878      	ldr	r0, [r7, #4]
 8016b0e:	f7fe ffd6 	bl	8015abe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f000 f9e9 	bl	8016eea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016b18:	e042      	b.n	8016ba0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016b1a:	4b24      	ldr	r3, [pc, #144]	; (8016bac <USBD_SetConfig+0x150>)
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	461a      	mov	r2, r3
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	429a      	cmp	r2, r3
 8016b26:	d02a      	beq.n	8016b7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	685b      	ldr	r3, [r3, #4]
 8016b2c:	b2db      	uxtb	r3, r3
 8016b2e:	4619      	mov	r1, r3
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7fe ffc4 	bl	8015abe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016b36:	4b1d      	ldr	r3, [pc, #116]	; (8016bac <USBD_SetConfig+0x150>)
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	461a      	mov	r2, r3
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016b40:	4b1a      	ldr	r3, [pc, #104]	; (8016bac <USBD_SetConfig+0x150>)
 8016b42:	781b      	ldrb	r3, [r3, #0]
 8016b44:	4619      	mov	r1, r3
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f7fe ff9d 	bl	8015a86 <USBD_SetClassConfig>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016b50:	7bfb      	ldrb	r3, [r7, #15]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d00f      	beq.n	8016b76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016b56:	6839      	ldr	r1, [r7, #0]
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f000 f918 	bl	8016d8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	685b      	ldr	r3, [r3, #4]
 8016b62:	b2db      	uxtb	r3, r3
 8016b64:	4619      	mov	r1, r3
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f7fe ffa9 	bl	8015abe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2202      	movs	r2, #2
 8016b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016b74:	e014      	b.n	8016ba0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f000 f9b7 	bl	8016eea <USBD_CtlSendStatus>
      break;
 8016b7c:	e010      	b.n	8016ba0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f000 f9b3 	bl	8016eea <USBD_CtlSendStatus>
      break;
 8016b84:	e00c      	b.n	8016ba0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016b86:	6839      	ldr	r1, [r7, #0]
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f000 f900 	bl	8016d8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016b8e:	4b07      	ldr	r3, [pc, #28]	; (8016bac <USBD_SetConfig+0x150>)
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	4619      	mov	r1, r3
 8016b94:	6878      	ldr	r0, [r7, #4]
 8016b96:	f7fe ff92 	bl	8015abe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016b9a:	2303      	movs	r3, #3
 8016b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8016b9e:	bf00      	nop
  }

  return ret;
 8016ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3710      	adds	r7, #16
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
 8016baa:	bf00      	nop
 8016bac:	20001a88 	.word	0x20001a88

08016bb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b082      	sub	sp, #8
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	88db      	ldrh	r3, [r3, #6]
 8016bbe:	2b01      	cmp	r3, #1
 8016bc0:	d004      	beq.n	8016bcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016bc2:	6839      	ldr	r1, [r7, #0]
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f000 f8e2 	bl	8016d8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016bca:	e023      	b.n	8016c14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	2b02      	cmp	r3, #2
 8016bd6:	dc02      	bgt.n	8016bde <USBD_GetConfig+0x2e>
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	dc03      	bgt.n	8016be4 <USBD_GetConfig+0x34>
 8016bdc:	e015      	b.n	8016c0a <USBD_GetConfig+0x5a>
 8016bde:	2b03      	cmp	r3, #3
 8016be0:	d00b      	beq.n	8016bfa <USBD_GetConfig+0x4a>
 8016be2:	e012      	b.n	8016c0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2200      	movs	r2, #0
 8016be8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	3308      	adds	r3, #8
 8016bee:	2201      	movs	r2, #1
 8016bf0:	4619      	mov	r1, r3
 8016bf2:	6878      	ldr	r0, [r7, #4]
 8016bf4:	f000 f93c 	bl	8016e70 <USBD_CtlSendData>
        break;
 8016bf8:	e00c      	b.n	8016c14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	3304      	adds	r3, #4
 8016bfe:	2201      	movs	r2, #1
 8016c00:	4619      	mov	r1, r3
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f000 f934 	bl	8016e70 <USBD_CtlSendData>
        break;
 8016c08:	e004      	b.n	8016c14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016c0a:	6839      	ldr	r1, [r7, #0]
 8016c0c:	6878      	ldr	r0, [r7, #4]
 8016c0e:	f000 f8be 	bl	8016d8e <USBD_CtlError>
        break;
 8016c12:	bf00      	nop
}
 8016c14:	bf00      	nop
 8016c16:	3708      	adds	r7, #8
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
 8016c24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c2c:	b2db      	uxtb	r3, r3
 8016c2e:	3b01      	subs	r3, #1
 8016c30:	2b02      	cmp	r3, #2
 8016c32:	d81e      	bhi.n	8016c72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	88db      	ldrh	r3, [r3, #6]
 8016c38:	2b02      	cmp	r3, #2
 8016c3a:	d004      	beq.n	8016c46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016c3c:	6839      	ldr	r1, [r7, #0]
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f000 f8a5 	bl	8016d8e <USBD_CtlError>
        break;
 8016c44:	e01a      	b.n	8016c7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	2201      	movs	r2, #1
 8016c4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d005      	beq.n	8016c62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	68db      	ldr	r3, [r3, #12]
 8016c5a:	f043 0202 	orr.w	r2, r3, #2
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	330c      	adds	r3, #12
 8016c66:	2202      	movs	r2, #2
 8016c68:	4619      	mov	r1, r3
 8016c6a:	6878      	ldr	r0, [r7, #4]
 8016c6c:	f000 f900 	bl	8016e70 <USBD_CtlSendData>
      break;
 8016c70:	e004      	b.n	8016c7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016c72:	6839      	ldr	r1, [r7, #0]
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f000 f88a 	bl	8016d8e <USBD_CtlError>
      break;
 8016c7a:	bf00      	nop
  }
}
 8016c7c:	bf00      	nop
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	885b      	ldrh	r3, [r3, #2]
 8016c92:	2b01      	cmp	r3, #1
 8016c94:	d107      	bne.n	8016ca6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2201      	movs	r2, #1
 8016c9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f000 f923 	bl	8016eea <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016ca4:	e013      	b.n	8016cce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	885b      	ldrh	r3, [r3, #2]
 8016caa:	2b02      	cmp	r3, #2
 8016cac:	d10b      	bne.n	8016cc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8016cae:	683b      	ldr	r3, [r7, #0]
 8016cb0:	889b      	ldrh	r3, [r3, #4]
 8016cb2:	0a1b      	lsrs	r3, r3, #8
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	b2da      	uxtb	r2, r3
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f000 f913 	bl	8016eea <USBD_CtlSendStatus>
}
 8016cc4:	e003      	b.n	8016cce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016cc6:	6839      	ldr	r1, [r7, #0]
 8016cc8:	6878      	ldr	r0, [r7, #4]
 8016cca:	f000 f860 	bl	8016d8e <USBD_CtlError>
}
 8016cce:	bf00      	nop
 8016cd0:	3708      	adds	r7, #8
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bd80      	pop	{r7, pc}

08016cd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cd6:	b580      	push	{r7, lr}
 8016cd8:	b082      	sub	sp, #8
 8016cda:	af00      	add	r7, sp, #0
 8016cdc:	6078      	str	r0, [r7, #4]
 8016cde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ce6:	b2db      	uxtb	r3, r3
 8016ce8:	3b01      	subs	r3, #1
 8016cea:	2b02      	cmp	r3, #2
 8016cec:	d80b      	bhi.n	8016d06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016cee:	683b      	ldr	r3, [r7, #0]
 8016cf0:	885b      	ldrh	r3, [r3, #2]
 8016cf2:	2b01      	cmp	r3, #1
 8016cf4:	d10c      	bne.n	8016d10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	f000 f8f3 	bl	8016eea <USBD_CtlSendStatus>
      }
      break;
 8016d04:	e004      	b.n	8016d10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016d06:	6839      	ldr	r1, [r7, #0]
 8016d08:	6878      	ldr	r0, [r7, #4]
 8016d0a:	f000 f840 	bl	8016d8e <USBD_CtlError>
      break;
 8016d0e:	e000      	b.n	8016d12 <USBD_ClrFeature+0x3c>
      break;
 8016d10:	bf00      	nop
  }
}
 8016d12:	bf00      	nop
 8016d14:	3708      	adds	r7, #8
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bd80      	pop	{r7, pc}

08016d1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016d1a:	b580      	push	{r7, lr}
 8016d1c:	b084      	sub	sp, #16
 8016d1e:	af00      	add	r7, sp, #0
 8016d20:	6078      	str	r0, [r7, #4]
 8016d22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	781a      	ldrb	r2, [r3, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	3301      	adds	r3, #1
 8016d34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	781a      	ldrb	r2, [r3, #0]
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	3301      	adds	r3, #1
 8016d42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f7ff fa41 	bl	80161cc <SWAPBYTE>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	461a      	mov	r2, r3
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	3301      	adds	r3, #1
 8016d56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	3301      	adds	r3, #1
 8016d5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016d5e:	68f8      	ldr	r0, [r7, #12]
 8016d60:	f7ff fa34 	bl	80161cc <SWAPBYTE>
 8016d64:	4603      	mov	r3, r0
 8016d66:	461a      	mov	r2, r3
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	3301      	adds	r3, #1
 8016d70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	3301      	adds	r3, #1
 8016d76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016d78:	68f8      	ldr	r0, [r7, #12]
 8016d7a:	f7ff fa27 	bl	80161cc <SWAPBYTE>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	461a      	mov	r2, r3
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	80da      	strh	r2, [r3, #6]
}
 8016d86:	bf00      	nop
 8016d88:	3710      	adds	r7, #16
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}

08016d8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d8e:	b580      	push	{r7, lr}
 8016d90:	b082      	sub	sp, #8
 8016d92:	af00      	add	r7, sp, #0
 8016d94:	6078      	str	r0, [r7, #4]
 8016d96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016d98:	2180      	movs	r1, #128	; 0x80
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f004 fa33 	bl	801b206 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016da0:	2100      	movs	r1, #0
 8016da2:	6878      	ldr	r0, [r7, #4]
 8016da4:	f004 fa2f 	bl	801b206 <USBD_LL_StallEP>
}
 8016da8:	bf00      	nop
 8016daa:	3708      	adds	r7, #8
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}

08016db0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b086      	sub	sp, #24
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	60f8      	str	r0, [r7, #12]
 8016db8:	60b9      	str	r1, [r7, #8]
 8016dba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d036      	beq.n	8016e34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016dca:	6938      	ldr	r0, [r7, #16]
 8016dcc:	f000 f836 	bl	8016e3c <USBD_GetLen>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	3301      	adds	r3, #1
 8016dd4:	b29b      	uxth	r3, r3
 8016dd6:	005b      	lsls	r3, r3, #1
 8016dd8:	b29a      	uxth	r2, r3
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016dde:	7dfb      	ldrb	r3, [r7, #23]
 8016de0:	68ba      	ldr	r2, [r7, #8]
 8016de2:	4413      	add	r3, r2
 8016de4:	687a      	ldr	r2, [r7, #4]
 8016de6:	7812      	ldrb	r2, [r2, #0]
 8016de8:	701a      	strb	r2, [r3, #0]
  idx++;
 8016dea:	7dfb      	ldrb	r3, [r7, #23]
 8016dec:	3301      	adds	r3, #1
 8016dee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016df0:	7dfb      	ldrb	r3, [r7, #23]
 8016df2:	68ba      	ldr	r2, [r7, #8]
 8016df4:	4413      	add	r3, r2
 8016df6:	2203      	movs	r2, #3
 8016df8:	701a      	strb	r2, [r3, #0]
  idx++;
 8016dfa:	7dfb      	ldrb	r3, [r7, #23]
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016e00:	e013      	b.n	8016e2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016e02:	7dfb      	ldrb	r3, [r7, #23]
 8016e04:	68ba      	ldr	r2, [r7, #8]
 8016e06:	4413      	add	r3, r2
 8016e08:	693a      	ldr	r2, [r7, #16]
 8016e0a:	7812      	ldrb	r2, [r2, #0]
 8016e0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	3301      	adds	r3, #1
 8016e12:	613b      	str	r3, [r7, #16]
    idx++;
 8016e14:	7dfb      	ldrb	r3, [r7, #23]
 8016e16:	3301      	adds	r3, #1
 8016e18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016e1a:	7dfb      	ldrb	r3, [r7, #23]
 8016e1c:	68ba      	ldr	r2, [r7, #8]
 8016e1e:	4413      	add	r3, r2
 8016e20:	2200      	movs	r2, #0
 8016e22:	701a      	strb	r2, [r3, #0]
    idx++;
 8016e24:	7dfb      	ldrb	r3, [r7, #23]
 8016e26:	3301      	adds	r3, #1
 8016e28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d1e7      	bne.n	8016e02 <USBD_GetString+0x52>
 8016e32:	e000      	b.n	8016e36 <USBD_GetString+0x86>
    return;
 8016e34:	bf00      	nop
  }
}
 8016e36:	3718      	adds	r7, #24
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}

08016e3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016e3c:	b480      	push	{r7}
 8016e3e:	b085      	sub	sp, #20
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016e44:	2300      	movs	r3, #0
 8016e46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016e4c:	e005      	b.n	8016e5a <USBD_GetLen+0x1e>
  {
    len++;
 8016e4e:	7bfb      	ldrb	r3, [r7, #15]
 8016e50:	3301      	adds	r3, #1
 8016e52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016e54:	68bb      	ldr	r3, [r7, #8]
 8016e56:	3301      	adds	r3, #1
 8016e58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d1f5      	bne.n	8016e4e <USBD_GetLen+0x12>
  }

  return len;
 8016e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	3714      	adds	r7, #20
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6e:	4770      	bx	lr

08016e70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b084      	sub	sp, #16
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	60f8      	str	r0, [r7, #12]
 8016e78:	60b9      	str	r1, [r7, #8]
 8016e7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	2202      	movs	r2, #2
 8016e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	687a      	ldr	r2, [r7, #4]
 8016e88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	687a      	ldr	r2, [r7, #4]
 8016e8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	68ba      	ldr	r2, [r7, #8]
 8016e94:	2100      	movs	r1, #0
 8016e96:	68f8      	ldr	r0, [r7, #12]
 8016e98:	f004 fa3e 	bl	801b318 <USBD_LL_Transmit>

  return USBD_OK;
 8016e9c:	2300      	movs	r3, #0
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3710      	adds	r7, #16
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd80      	pop	{r7, pc}

08016ea6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016ea6:	b580      	push	{r7, lr}
 8016ea8:	b084      	sub	sp, #16
 8016eaa:	af00      	add	r7, sp, #0
 8016eac:	60f8      	str	r0, [r7, #12]
 8016eae:	60b9      	str	r1, [r7, #8]
 8016eb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	68ba      	ldr	r2, [r7, #8]
 8016eb6:	2100      	movs	r1, #0
 8016eb8:	68f8      	ldr	r0, [r7, #12]
 8016eba:	f004 fa2d 	bl	801b318 <USBD_LL_Transmit>

  return USBD_OK;
 8016ebe:	2300      	movs	r3, #0
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3710      	adds	r7, #16
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b084      	sub	sp, #16
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	60f8      	str	r0, [r7, #12]
 8016ed0:	60b9      	str	r1, [r7, #8]
 8016ed2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	68ba      	ldr	r2, [r7, #8]
 8016ed8:	2100      	movs	r1, #0
 8016eda:	68f8      	ldr	r0, [r7, #12]
 8016edc:	f004 fa3d 	bl	801b35a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016ee0:	2300      	movs	r3, #0
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3710      	adds	r7, #16
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}

08016eea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016eea:	b580      	push	{r7, lr}
 8016eec:	b082      	sub	sp, #8
 8016eee:	af00      	add	r7, sp, #0
 8016ef0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2204      	movs	r2, #4
 8016ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016efa:	2300      	movs	r3, #0
 8016efc:	2200      	movs	r2, #0
 8016efe:	2100      	movs	r1, #0
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f004 fa09 	bl	801b318 <USBD_LL_Transmit>

  return USBD_OK;
 8016f06:	2300      	movs	r3, #0
}
 8016f08:	4618      	mov	r0, r3
 8016f0a:	3708      	adds	r7, #8
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	2205      	movs	r2, #5
 8016f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016f20:	2300      	movs	r3, #0
 8016f22:	2200      	movs	r2, #0
 8016f24:	2100      	movs	r1, #0
 8016f26:	6878      	ldr	r0, [r7, #4]
 8016f28:	f004 fa17 	bl	801b35a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016f2c:	2300      	movs	r3, #0
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3708      	adds	r7, #8
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}
	...

08016f38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	4603      	mov	r3, r0
 8016f40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016f42:	79fb      	ldrb	r3, [r7, #7]
 8016f44:	4a08      	ldr	r2, [pc, #32]	; (8016f68 <disk_status+0x30>)
 8016f46:	009b      	lsls	r3, r3, #2
 8016f48:	4413      	add	r3, r2
 8016f4a:	685b      	ldr	r3, [r3, #4]
 8016f4c:	685b      	ldr	r3, [r3, #4]
 8016f4e:	79fa      	ldrb	r2, [r7, #7]
 8016f50:	4905      	ldr	r1, [pc, #20]	; (8016f68 <disk_status+0x30>)
 8016f52:	440a      	add	r2, r1
 8016f54:	7a12      	ldrb	r2, [r2, #8]
 8016f56:	4610      	mov	r0, r2
 8016f58:	4798      	blx	r3
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3710      	adds	r7, #16
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}
 8016f68:	20001cb4 	.word	0x20001cb4

08016f6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b084      	sub	sp, #16
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	4603      	mov	r3, r0
 8016f74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016f76:	2300      	movs	r3, #0
 8016f78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016f7a:	79fb      	ldrb	r3, [r7, #7]
 8016f7c:	4a0d      	ldr	r2, [pc, #52]	; (8016fb4 <disk_initialize+0x48>)
 8016f7e:	5cd3      	ldrb	r3, [r2, r3]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d111      	bne.n	8016fa8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016f84:	79fb      	ldrb	r3, [r7, #7]
 8016f86:	4a0b      	ldr	r2, [pc, #44]	; (8016fb4 <disk_initialize+0x48>)
 8016f88:	2101      	movs	r1, #1
 8016f8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016f8c:	79fb      	ldrb	r3, [r7, #7]
 8016f8e:	4a09      	ldr	r2, [pc, #36]	; (8016fb4 <disk_initialize+0x48>)
 8016f90:	009b      	lsls	r3, r3, #2
 8016f92:	4413      	add	r3, r2
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	79fa      	ldrb	r2, [r7, #7]
 8016f9a:	4906      	ldr	r1, [pc, #24]	; (8016fb4 <disk_initialize+0x48>)
 8016f9c:	440a      	add	r2, r1
 8016f9e:	7a12      	ldrb	r2, [r2, #8]
 8016fa0:	4610      	mov	r0, r2
 8016fa2:	4798      	blx	r3
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016faa:	4618      	mov	r0, r3
 8016fac:	3710      	adds	r7, #16
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}
 8016fb2:	bf00      	nop
 8016fb4:	20001cb4 	.word	0x20001cb4

08016fb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016fb8:	b590      	push	{r4, r7, lr}
 8016fba:	b087      	sub	sp, #28
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	60b9      	str	r1, [r7, #8]
 8016fc0:	607a      	str	r2, [r7, #4]
 8016fc2:	603b      	str	r3, [r7, #0]
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016fc8:	7bfb      	ldrb	r3, [r7, #15]
 8016fca:	4a0a      	ldr	r2, [pc, #40]	; (8016ff4 <disk_read+0x3c>)
 8016fcc:	009b      	lsls	r3, r3, #2
 8016fce:	4413      	add	r3, r2
 8016fd0:	685b      	ldr	r3, [r3, #4]
 8016fd2:	689c      	ldr	r4, [r3, #8]
 8016fd4:	7bfb      	ldrb	r3, [r7, #15]
 8016fd6:	4a07      	ldr	r2, [pc, #28]	; (8016ff4 <disk_read+0x3c>)
 8016fd8:	4413      	add	r3, r2
 8016fda:	7a18      	ldrb	r0, [r3, #8]
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	687a      	ldr	r2, [r7, #4]
 8016fe0:	68b9      	ldr	r1, [r7, #8]
 8016fe2:	47a0      	blx	r4
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	75fb      	strb	r3, [r7, #23]
  return res;
 8016fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	371c      	adds	r7, #28
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd90      	pop	{r4, r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	20001cb4 	.word	0x20001cb4

08016ff8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016ff8:	b590      	push	{r4, r7, lr}
 8016ffa:	b087      	sub	sp, #28
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	60b9      	str	r1, [r7, #8]
 8017000:	607a      	str	r2, [r7, #4]
 8017002:	603b      	str	r3, [r7, #0]
 8017004:	4603      	mov	r3, r0
 8017006:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017008:	7bfb      	ldrb	r3, [r7, #15]
 801700a:	4a0a      	ldr	r2, [pc, #40]	; (8017034 <disk_write+0x3c>)
 801700c:	009b      	lsls	r3, r3, #2
 801700e:	4413      	add	r3, r2
 8017010:	685b      	ldr	r3, [r3, #4]
 8017012:	68dc      	ldr	r4, [r3, #12]
 8017014:	7bfb      	ldrb	r3, [r7, #15]
 8017016:	4a07      	ldr	r2, [pc, #28]	; (8017034 <disk_write+0x3c>)
 8017018:	4413      	add	r3, r2
 801701a:	7a18      	ldrb	r0, [r3, #8]
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	68b9      	ldr	r1, [r7, #8]
 8017022:	47a0      	blx	r4
 8017024:	4603      	mov	r3, r0
 8017026:	75fb      	strb	r3, [r7, #23]
  return res;
 8017028:	7dfb      	ldrb	r3, [r7, #23]
}
 801702a:	4618      	mov	r0, r3
 801702c:	371c      	adds	r7, #28
 801702e:	46bd      	mov	sp, r7
 8017030:	bd90      	pop	{r4, r7, pc}
 8017032:	bf00      	nop
 8017034:	20001cb4 	.word	0x20001cb4

08017038 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b084      	sub	sp, #16
 801703c:	af00      	add	r7, sp, #0
 801703e:	4603      	mov	r3, r0
 8017040:	603a      	str	r2, [r7, #0]
 8017042:	71fb      	strb	r3, [r7, #7]
 8017044:	460b      	mov	r3, r1
 8017046:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017048:	79fb      	ldrb	r3, [r7, #7]
 801704a:	4a09      	ldr	r2, [pc, #36]	; (8017070 <disk_ioctl+0x38>)
 801704c:	009b      	lsls	r3, r3, #2
 801704e:	4413      	add	r3, r2
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	691b      	ldr	r3, [r3, #16]
 8017054:	79fa      	ldrb	r2, [r7, #7]
 8017056:	4906      	ldr	r1, [pc, #24]	; (8017070 <disk_ioctl+0x38>)
 8017058:	440a      	add	r2, r1
 801705a:	7a10      	ldrb	r0, [r2, #8]
 801705c:	79b9      	ldrb	r1, [r7, #6]
 801705e:	683a      	ldr	r2, [r7, #0]
 8017060:	4798      	blx	r3
 8017062:	4603      	mov	r3, r0
 8017064:	73fb      	strb	r3, [r7, #15]
  return res;
 8017066:	7bfb      	ldrb	r3, [r7, #15]
}
 8017068:	4618      	mov	r0, r3
 801706a:	3710      	adds	r7, #16
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}
 8017070:	20001cb4 	.word	0x20001cb4

08017074 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8017074:	b480      	push	{r7}
 8017076:	b085      	sub	sp, #20
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	3301      	adds	r3, #1
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8017084:	89fb      	ldrh	r3, [r7, #14]
 8017086:	021b      	lsls	r3, r3, #8
 8017088:	b21a      	sxth	r2, r3
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	781b      	ldrb	r3, [r3, #0]
 801708e:	b21b      	sxth	r3, r3
 8017090:	4313      	orrs	r3, r2
 8017092:	b21b      	sxth	r3, r3
 8017094:	81fb      	strh	r3, [r7, #14]
	return rv;
 8017096:	89fb      	ldrh	r3, [r7, #14]
}
 8017098:	4618      	mov	r0, r3
 801709a:	3714      	adds	r7, #20
 801709c:	46bd      	mov	sp, r7
 801709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a2:	4770      	bx	lr

080170a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80170a4:	b480      	push	{r7}
 80170a6:	b085      	sub	sp, #20
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	3303      	adds	r3, #3
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	021b      	lsls	r3, r3, #8
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	3202      	adds	r2, #2
 80170bc:	7812      	ldrb	r2, [r2, #0]
 80170be:	4313      	orrs	r3, r2
 80170c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	021b      	lsls	r3, r3, #8
 80170c6:	687a      	ldr	r2, [r7, #4]
 80170c8:	3201      	adds	r2, #1
 80170ca:	7812      	ldrb	r2, [r2, #0]
 80170cc:	4313      	orrs	r3, r2
 80170ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	021b      	lsls	r3, r3, #8
 80170d4:	687a      	ldr	r2, [r7, #4]
 80170d6:	7812      	ldrb	r2, [r2, #0]
 80170d8:	4313      	orrs	r3, r2
 80170da:	60fb      	str	r3, [r7, #12]
	return rv;
 80170dc:	68fb      	ldr	r3, [r7, #12]
}
 80170de:	4618      	mov	r0, r3
 80170e0:	3714      	adds	r7, #20
 80170e2:	46bd      	mov	sp, r7
 80170e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e8:	4770      	bx	lr

080170ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80170ea:	b480      	push	{r7}
 80170ec:	b083      	sub	sp, #12
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	6078      	str	r0, [r7, #4]
 80170f2:	460b      	mov	r3, r1
 80170f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	1c5a      	adds	r2, r3, #1
 80170fa:	607a      	str	r2, [r7, #4]
 80170fc:	887a      	ldrh	r2, [r7, #2]
 80170fe:	b2d2      	uxtb	r2, r2
 8017100:	701a      	strb	r2, [r3, #0]
 8017102:	887b      	ldrh	r3, [r7, #2]
 8017104:	0a1b      	lsrs	r3, r3, #8
 8017106:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	1c5a      	adds	r2, r3, #1
 801710c:	607a      	str	r2, [r7, #4]
 801710e:	887a      	ldrh	r2, [r7, #2]
 8017110:	b2d2      	uxtb	r2, r2
 8017112:	701a      	strb	r2, [r3, #0]
}
 8017114:	bf00      	nop
 8017116:	370c      	adds	r7, #12
 8017118:	46bd      	mov	sp, r7
 801711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711e:	4770      	bx	lr

08017120 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017120:	b480      	push	{r7}
 8017122:	b083      	sub	sp, #12
 8017124:	af00      	add	r7, sp, #0
 8017126:	6078      	str	r0, [r7, #4]
 8017128:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	1c5a      	adds	r2, r3, #1
 801712e:	607a      	str	r2, [r7, #4]
 8017130:	683a      	ldr	r2, [r7, #0]
 8017132:	b2d2      	uxtb	r2, r2
 8017134:	701a      	strb	r2, [r3, #0]
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	0a1b      	lsrs	r3, r3, #8
 801713a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	1c5a      	adds	r2, r3, #1
 8017140:	607a      	str	r2, [r7, #4]
 8017142:	683a      	ldr	r2, [r7, #0]
 8017144:	b2d2      	uxtb	r2, r2
 8017146:	701a      	strb	r2, [r3, #0]
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	0a1b      	lsrs	r3, r3, #8
 801714c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	1c5a      	adds	r2, r3, #1
 8017152:	607a      	str	r2, [r7, #4]
 8017154:	683a      	ldr	r2, [r7, #0]
 8017156:	b2d2      	uxtb	r2, r2
 8017158:	701a      	strb	r2, [r3, #0]
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	0a1b      	lsrs	r3, r3, #8
 801715e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	1c5a      	adds	r2, r3, #1
 8017164:	607a      	str	r2, [r7, #4]
 8017166:	683a      	ldr	r2, [r7, #0]
 8017168:	b2d2      	uxtb	r2, r2
 801716a:	701a      	strb	r2, [r3, #0]
}
 801716c:	bf00      	nop
 801716e:	370c      	adds	r7, #12
 8017170:	46bd      	mov	sp, r7
 8017172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017176:	4770      	bx	lr

08017178 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8017178:	b480      	push	{r7}
 801717a:	b087      	sub	sp, #28
 801717c:	af00      	add	r7, sp, #0
 801717e:	60f8      	str	r0, [r7, #12]
 8017180:	60b9      	str	r1, [r7, #8]
 8017182:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8017188:	68bb      	ldr	r3, [r7, #8]
 801718a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d00d      	beq.n	80171ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8017192:	693a      	ldr	r2, [r7, #16]
 8017194:	1c53      	adds	r3, r2, #1
 8017196:	613b      	str	r3, [r7, #16]
 8017198:	697b      	ldr	r3, [r7, #20]
 801719a:	1c59      	adds	r1, r3, #1
 801719c:	6179      	str	r1, [r7, #20]
 801719e:	7812      	ldrb	r2, [r2, #0]
 80171a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	3b01      	subs	r3, #1
 80171a6:	607b      	str	r3, [r7, #4]
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d1f1      	bne.n	8017192 <mem_cpy+0x1a>
	}
}
 80171ae:	bf00      	nop
 80171b0:	371c      	adds	r7, #28
 80171b2:	46bd      	mov	sp, r7
 80171b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b8:	4770      	bx	lr

080171ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80171ba:	b480      	push	{r7}
 80171bc:	b087      	sub	sp, #28
 80171be:	af00      	add	r7, sp, #0
 80171c0:	60f8      	str	r0, [r7, #12]
 80171c2:	60b9      	str	r1, [r7, #8]
 80171c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80171ca:	697b      	ldr	r3, [r7, #20]
 80171cc:	1c5a      	adds	r2, r3, #1
 80171ce:	617a      	str	r2, [r7, #20]
 80171d0:	68ba      	ldr	r2, [r7, #8]
 80171d2:	b2d2      	uxtb	r2, r2
 80171d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	3b01      	subs	r3, #1
 80171da:	607b      	str	r3, [r7, #4]
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d1f3      	bne.n	80171ca <mem_set+0x10>
}
 80171e2:	bf00      	nop
 80171e4:	bf00      	nop
 80171e6:	371c      	adds	r7, #28
 80171e8:	46bd      	mov	sp, r7
 80171ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ee:	4770      	bx	lr

080171f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80171f0:	b480      	push	{r7}
 80171f2:	b089      	sub	sp, #36	; 0x24
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	60f8      	str	r0, [r7, #12]
 80171f8:	60b9      	str	r1, [r7, #8]
 80171fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	61fb      	str	r3, [r7, #28]
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017204:	2300      	movs	r3, #0
 8017206:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	1c5a      	adds	r2, r3, #1
 801720c:	61fa      	str	r2, [r7, #28]
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	4619      	mov	r1, r3
 8017212:	69bb      	ldr	r3, [r7, #24]
 8017214:	1c5a      	adds	r2, r3, #1
 8017216:	61ba      	str	r2, [r7, #24]
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	1acb      	subs	r3, r1, r3
 801721c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	3b01      	subs	r3, #1
 8017222:	607b      	str	r3, [r7, #4]
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d002      	beq.n	8017230 <mem_cmp+0x40>
 801722a:	697b      	ldr	r3, [r7, #20]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d0eb      	beq.n	8017208 <mem_cmp+0x18>

	return r;
 8017230:	697b      	ldr	r3, [r7, #20]
}
 8017232:	4618      	mov	r0, r3
 8017234:	3724      	adds	r7, #36	; 0x24
 8017236:	46bd      	mov	sp, r7
 8017238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723c:	4770      	bx	lr

0801723e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801723e:	b480      	push	{r7}
 8017240:	b083      	sub	sp, #12
 8017242:	af00      	add	r7, sp, #0
 8017244:	6078      	str	r0, [r7, #4]
 8017246:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017248:	e002      	b.n	8017250 <chk_chr+0x12>
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	3301      	adds	r3, #1
 801724e:	607b      	str	r3, [r7, #4]
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	781b      	ldrb	r3, [r3, #0]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d005      	beq.n	8017264 <chk_chr+0x26>
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	781b      	ldrb	r3, [r3, #0]
 801725c:	461a      	mov	r2, r3
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	4293      	cmp	r3, r2
 8017262:	d1f2      	bne.n	801724a <chk_chr+0xc>
	return *str;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	781b      	ldrb	r3, [r3, #0]
}
 8017268:	4618      	mov	r0, r3
 801726a:	370c      	adds	r7, #12
 801726c:	46bd      	mov	sp, r7
 801726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017272:	4770      	bx	lr

08017274 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017274:	b480      	push	{r7}
 8017276:	b085      	sub	sp, #20
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
 801727c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801727e:	2300      	movs	r3, #0
 8017280:	60bb      	str	r3, [r7, #8]
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	60fb      	str	r3, [r7, #12]
 8017286:	e029      	b.n	80172dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8017288:	4a27      	ldr	r2, [pc, #156]	; (8017328 <chk_lock+0xb4>)
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	011b      	lsls	r3, r3, #4
 801728e:	4413      	add	r3, r2
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d01d      	beq.n	80172d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017296:	4a24      	ldr	r2, [pc, #144]	; (8017328 <chk_lock+0xb4>)
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	011b      	lsls	r3, r3, #4
 801729c:	4413      	add	r3, r2
 801729e:	681a      	ldr	r2, [r3, #0]
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	429a      	cmp	r2, r3
 80172a6:	d116      	bne.n	80172d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80172a8:	4a1f      	ldr	r2, [pc, #124]	; (8017328 <chk_lock+0xb4>)
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	011b      	lsls	r3, r3, #4
 80172ae:	4413      	add	r3, r2
 80172b0:	3304      	adds	r3, #4
 80172b2:	681a      	ldr	r2, [r3, #0]
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80172b8:	429a      	cmp	r2, r3
 80172ba:	d10c      	bne.n	80172d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80172bc:	4a1a      	ldr	r2, [pc, #104]	; (8017328 <chk_lock+0xb4>)
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	011b      	lsls	r3, r3, #4
 80172c2:	4413      	add	r3, r2
 80172c4:	3308      	adds	r3, #8
 80172c6:	681a      	ldr	r2, [r3, #0]
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80172cc:	429a      	cmp	r2, r3
 80172ce:	d102      	bne.n	80172d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80172d0:	e007      	b.n	80172e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80172d2:	2301      	movs	r3, #1
 80172d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	3301      	adds	r3, #1
 80172da:	60fb      	str	r3, [r7, #12]
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2b01      	cmp	r3, #1
 80172e0:	d9d2      	bls.n	8017288 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	2b02      	cmp	r3, #2
 80172e6:	d109      	bne.n	80172fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d102      	bne.n	80172f4 <chk_lock+0x80>
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	2b02      	cmp	r3, #2
 80172f2:	d101      	bne.n	80172f8 <chk_lock+0x84>
 80172f4:	2300      	movs	r3, #0
 80172f6:	e010      	b.n	801731a <chk_lock+0xa6>
 80172f8:	2312      	movs	r3, #18
 80172fa:	e00e      	b.n	801731a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d108      	bne.n	8017314 <chk_lock+0xa0>
 8017302:	4a09      	ldr	r2, [pc, #36]	; (8017328 <chk_lock+0xb4>)
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	011b      	lsls	r3, r3, #4
 8017308:	4413      	add	r3, r2
 801730a:	330c      	adds	r3, #12
 801730c:	881b      	ldrh	r3, [r3, #0]
 801730e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017312:	d101      	bne.n	8017318 <chk_lock+0xa4>
 8017314:	2310      	movs	r3, #16
 8017316:	e000      	b.n	801731a <chk_lock+0xa6>
 8017318:	2300      	movs	r3, #0
}
 801731a:	4618      	mov	r0, r3
 801731c:	3714      	adds	r7, #20
 801731e:	46bd      	mov	sp, r7
 8017320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017324:	4770      	bx	lr
 8017326:	bf00      	nop
 8017328:	20001a94 	.word	0x20001a94

0801732c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801732c:	b480      	push	{r7}
 801732e:	b083      	sub	sp, #12
 8017330:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017332:	2300      	movs	r3, #0
 8017334:	607b      	str	r3, [r7, #4]
 8017336:	e002      	b.n	801733e <enq_lock+0x12>
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	3301      	adds	r3, #1
 801733c:	607b      	str	r3, [r7, #4]
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	2b01      	cmp	r3, #1
 8017342:	d806      	bhi.n	8017352 <enq_lock+0x26>
 8017344:	4a09      	ldr	r2, [pc, #36]	; (801736c <enq_lock+0x40>)
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	011b      	lsls	r3, r3, #4
 801734a:	4413      	add	r3, r2
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d1f2      	bne.n	8017338 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2b02      	cmp	r3, #2
 8017356:	bf14      	ite	ne
 8017358:	2301      	movne	r3, #1
 801735a:	2300      	moveq	r3, #0
 801735c:	b2db      	uxtb	r3, r3
}
 801735e:	4618      	mov	r0, r3
 8017360:	370c      	adds	r7, #12
 8017362:	46bd      	mov	sp, r7
 8017364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017368:	4770      	bx	lr
 801736a:	bf00      	nop
 801736c:	20001a94 	.word	0x20001a94

08017370 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017370:	b480      	push	{r7}
 8017372:	b085      	sub	sp, #20
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
 8017378:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801737a:	2300      	movs	r3, #0
 801737c:	60fb      	str	r3, [r7, #12]
 801737e:	e01f      	b.n	80173c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017380:	4a41      	ldr	r2, [pc, #260]	; (8017488 <inc_lock+0x118>)
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	011b      	lsls	r3, r3, #4
 8017386:	4413      	add	r3, r2
 8017388:	681a      	ldr	r2, [r3, #0]
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	429a      	cmp	r2, r3
 8017390:	d113      	bne.n	80173ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017392:	4a3d      	ldr	r2, [pc, #244]	; (8017488 <inc_lock+0x118>)
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	011b      	lsls	r3, r3, #4
 8017398:	4413      	add	r3, r2
 801739a:	3304      	adds	r3, #4
 801739c:	681a      	ldr	r2, [r3, #0]
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80173a2:	429a      	cmp	r2, r3
 80173a4:	d109      	bne.n	80173ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80173a6:	4a38      	ldr	r2, [pc, #224]	; (8017488 <inc_lock+0x118>)
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	011b      	lsls	r3, r3, #4
 80173ac:	4413      	add	r3, r2
 80173ae:	3308      	adds	r3, #8
 80173b0:	681a      	ldr	r2, [r3, #0]
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d006      	beq.n	80173c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	3301      	adds	r3, #1
 80173be:	60fb      	str	r3, [r7, #12]
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	2b01      	cmp	r3, #1
 80173c4:	d9dc      	bls.n	8017380 <inc_lock+0x10>
 80173c6:	e000      	b.n	80173ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80173c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2b02      	cmp	r3, #2
 80173ce:	d132      	bne.n	8017436 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80173d0:	2300      	movs	r3, #0
 80173d2:	60fb      	str	r3, [r7, #12]
 80173d4:	e002      	b.n	80173dc <inc_lock+0x6c>
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	3301      	adds	r3, #1
 80173da:	60fb      	str	r3, [r7, #12]
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	2b01      	cmp	r3, #1
 80173e0:	d806      	bhi.n	80173f0 <inc_lock+0x80>
 80173e2:	4a29      	ldr	r2, [pc, #164]	; (8017488 <inc_lock+0x118>)
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	011b      	lsls	r3, r3, #4
 80173e8:	4413      	add	r3, r2
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d1f2      	bne.n	80173d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2b02      	cmp	r3, #2
 80173f4:	d101      	bne.n	80173fa <inc_lock+0x8a>
 80173f6:	2300      	movs	r3, #0
 80173f8:	e040      	b.n	801747c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	681a      	ldr	r2, [r3, #0]
 80173fe:	4922      	ldr	r1, [pc, #136]	; (8017488 <inc_lock+0x118>)
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	011b      	lsls	r3, r3, #4
 8017404:	440b      	add	r3, r1
 8017406:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	689a      	ldr	r2, [r3, #8]
 801740c:	491e      	ldr	r1, [pc, #120]	; (8017488 <inc_lock+0x118>)
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	011b      	lsls	r3, r3, #4
 8017412:	440b      	add	r3, r1
 8017414:	3304      	adds	r3, #4
 8017416:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	695a      	ldr	r2, [r3, #20]
 801741c:	491a      	ldr	r1, [pc, #104]	; (8017488 <inc_lock+0x118>)
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	011b      	lsls	r3, r3, #4
 8017422:	440b      	add	r3, r1
 8017424:	3308      	adds	r3, #8
 8017426:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017428:	4a17      	ldr	r2, [pc, #92]	; (8017488 <inc_lock+0x118>)
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	011b      	lsls	r3, r3, #4
 801742e:	4413      	add	r3, r2
 8017430:	330c      	adds	r3, #12
 8017432:	2200      	movs	r2, #0
 8017434:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d009      	beq.n	8017450 <inc_lock+0xe0>
 801743c:	4a12      	ldr	r2, [pc, #72]	; (8017488 <inc_lock+0x118>)
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	011b      	lsls	r3, r3, #4
 8017442:	4413      	add	r3, r2
 8017444:	330c      	adds	r3, #12
 8017446:	881b      	ldrh	r3, [r3, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d001      	beq.n	8017450 <inc_lock+0xe0>
 801744c:	2300      	movs	r3, #0
 801744e:	e015      	b.n	801747c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d108      	bne.n	8017468 <inc_lock+0xf8>
 8017456:	4a0c      	ldr	r2, [pc, #48]	; (8017488 <inc_lock+0x118>)
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	011b      	lsls	r3, r3, #4
 801745c:	4413      	add	r3, r2
 801745e:	330c      	adds	r3, #12
 8017460:	881b      	ldrh	r3, [r3, #0]
 8017462:	3301      	adds	r3, #1
 8017464:	b29a      	uxth	r2, r3
 8017466:	e001      	b.n	801746c <inc_lock+0xfc>
 8017468:	f44f 7280 	mov.w	r2, #256	; 0x100
 801746c:	4906      	ldr	r1, [pc, #24]	; (8017488 <inc_lock+0x118>)
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	011b      	lsls	r3, r3, #4
 8017472:	440b      	add	r3, r1
 8017474:	330c      	adds	r3, #12
 8017476:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	3301      	adds	r3, #1
}
 801747c:	4618      	mov	r0, r3
 801747e:	3714      	adds	r7, #20
 8017480:	46bd      	mov	sp, r7
 8017482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017486:	4770      	bx	lr
 8017488:	20001a94 	.word	0x20001a94

0801748c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801748c:	b480      	push	{r7}
 801748e:	b085      	sub	sp, #20
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	3b01      	subs	r3, #1
 8017498:	607b      	str	r3, [r7, #4]
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	2b01      	cmp	r3, #1
 801749e:	d825      	bhi.n	80174ec <dec_lock+0x60>
		n = Files[i].ctr;
 80174a0:	4a17      	ldr	r2, [pc, #92]	; (8017500 <dec_lock+0x74>)
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	011b      	lsls	r3, r3, #4
 80174a6:	4413      	add	r3, r2
 80174a8:	330c      	adds	r3, #12
 80174aa:	881b      	ldrh	r3, [r3, #0]
 80174ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80174ae:	89fb      	ldrh	r3, [r7, #14]
 80174b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80174b4:	d101      	bne.n	80174ba <dec_lock+0x2e>
 80174b6:	2300      	movs	r3, #0
 80174b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80174ba:	89fb      	ldrh	r3, [r7, #14]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d002      	beq.n	80174c6 <dec_lock+0x3a>
 80174c0:	89fb      	ldrh	r3, [r7, #14]
 80174c2:	3b01      	subs	r3, #1
 80174c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80174c6:	4a0e      	ldr	r2, [pc, #56]	; (8017500 <dec_lock+0x74>)
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	011b      	lsls	r3, r3, #4
 80174cc:	4413      	add	r3, r2
 80174ce:	330c      	adds	r3, #12
 80174d0:	89fa      	ldrh	r2, [r7, #14]
 80174d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80174d4:	89fb      	ldrh	r3, [r7, #14]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d105      	bne.n	80174e6 <dec_lock+0x5a>
 80174da:	4a09      	ldr	r2, [pc, #36]	; (8017500 <dec_lock+0x74>)
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	011b      	lsls	r3, r3, #4
 80174e0:	4413      	add	r3, r2
 80174e2:	2200      	movs	r2, #0
 80174e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80174e6:	2300      	movs	r3, #0
 80174e8:	737b      	strb	r3, [r7, #13]
 80174ea:	e001      	b.n	80174f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80174ec:	2302      	movs	r3, #2
 80174ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80174f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	3714      	adds	r7, #20
 80174f6:	46bd      	mov	sp, r7
 80174f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fc:	4770      	bx	lr
 80174fe:	bf00      	nop
 8017500:	20001a94 	.word	0x20001a94

08017504 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017504:	b480      	push	{r7}
 8017506:	b085      	sub	sp, #20
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801750c:	2300      	movs	r3, #0
 801750e:	60fb      	str	r3, [r7, #12]
 8017510:	e010      	b.n	8017534 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017512:	4a0d      	ldr	r2, [pc, #52]	; (8017548 <clear_lock+0x44>)
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	011b      	lsls	r3, r3, #4
 8017518:	4413      	add	r3, r2
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	687a      	ldr	r2, [r7, #4]
 801751e:	429a      	cmp	r2, r3
 8017520:	d105      	bne.n	801752e <clear_lock+0x2a>
 8017522:	4a09      	ldr	r2, [pc, #36]	; (8017548 <clear_lock+0x44>)
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	011b      	lsls	r3, r3, #4
 8017528:	4413      	add	r3, r2
 801752a:	2200      	movs	r2, #0
 801752c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	3301      	adds	r3, #1
 8017532:	60fb      	str	r3, [r7, #12]
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	2b01      	cmp	r3, #1
 8017538:	d9eb      	bls.n	8017512 <clear_lock+0xe>
	}
}
 801753a:	bf00      	nop
 801753c:	bf00      	nop
 801753e:	3714      	adds	r7, #20
 8017540:	46bd      	mov	sp, r7
 8017542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017546:	4770      	bx	lr
 8017548:	20001a94 	.word	0x20001a94

0801754c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b086      	sub	sp, #24
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017554:	2300      	movs	r3, #0
 8017556:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	78db      	ldrb	r3, [r3, #3]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d034      	beq.n	80175ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017564:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	7858      	ldrb	r0, [r3, #1]
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017570:	2301      	movs	r3, #1
 8017572:	697a      	ldr	r2, [r7, #20]
 8017574:	f7ff fd40 	bl	8016ff8 <disk_write>
 8017578:	4603      	mov	r3, r0
 801757a:	2b00      	cmp	r3, #0
 801757c:	d002      	beq.n	8017584 <sync_window+0x38>
			res = FR_DISK_ERR;
 801757e:	2301      	movs	r3, #1
 8017580:	73fb      	strb	r3, [r7, #15]
 8017582:	e022      	b.n	80175ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2200      	movs	r2, #0
 8017588:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801758e:	697a      	ldr	r2, [r7, #20]
 8017590:	1ad2      	subs	r2, r2, r3
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	69db      	ldr	r3, [r3, #28]
 8017596:	429a      	cmp	r2, r3
 8017598:	d217      	bcs.n	80175ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	789b      	ldrb	r3, [r3, #2]
 801759e:	613b      	str	r3, [r7, #16]
 80175a0:	e010      	b.n	80175c4 <sync_window+0x78>
					wsect += fs->fsize;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	69db      	ldr	r3, [r3, #28]
 80175a6:	697a      	ldr	r2, [r7, #20]
 80175a8:	4413      	add	r3, r2
 80175aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	7858      	ldrb	r0, [r3, #1]
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80175b6:	2301      	movs	r3, #1
 80175b8:	697a      	ldr	r2, [r7, #20]
 80175ba:	f7ff fd1d 	bl	8016ff8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	3b01      	subs	r3, #1
 80175c2:	613b      	str	r3, [r7, #16]
 80175c4:	693b      	ldr	r3, [r7, #16]
 80175c6:	2b01      	cmp	r3, #1
 80175c8:	d8eb      	bhi.n	80175a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80175ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3718      	adds	r7, #24
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b084      	sub	sp, #16
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80175de:	2300      	movs	r3, #0
 80175e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175e6:	683a      	ldr	r2, [r7, #0]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d01b      	beq.n	8017624 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80175ec:	6878      	ldr	r0, [r7, #4]
 80175ee:	f7ff ffad 	bl	801754c <sync_window>
 80175f2:	4603      	mov	r3, r0
 80175f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80175f6:	7bfb      	ldrb	r3, [r7, #15]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d113      	bne.n	8017624 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	7858      	ldrb	r0, [r3, #1]
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017606:	2301      	movs	r3, #1
 8017608:	683a      	ldr	r2, [r7, #0]
 801760a:	f7ff fcd5 	bl	8016fb8 <disk_read>
 801760e:	4603      	mov	r3, r0
 8017610:	2b00      	cmp	r3, #0
 8017612:	d004      	beq.n	801761e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017614:	f04f 33ff 	mov.w	r3, #4294967295
 8017618:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801761a:	2301      	movs	r3, #1
 801761c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	683a      	ldr	r2, [r7, #0]
 8017622:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8017624:	7bfb      	ldrb	r3, [r7, #15]
}
 8017626:	4618      	mov	r0, r3
 8017628:	3710      	adds	r7, #16
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}
	...

08017630 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b084      	sub	sp, #16
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f7ff ff87 	bl	801754c <sync_window>
 801763e:	4603      	mov	r3, r0
 8017640:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017642:	7bfb      	ldrb	r3, [r7, #15]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d158      	bne.n	80176fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	2b03      	cmp	r3, #3
 801764e:	d148      	bne.n	80176e2 <sync_fs+0xb2>
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	791b      	ldrb	r3, [r3, #4]
 8017654:	2b01      	cmp	r3, #1
 8017656:	d144      	bne.n	80176e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	3334      	adds	r3, #52	; 0x34
 801765c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017660:	2100      	movs	r1, #0
 8017662:	4618      	mov	r0, r3
 8017664:	f7ff fda9 	bl	80171ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	3334      	adds	r3, #52	; 0x34
 801766c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017670:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017674:	4618      	mov	r0, r3
 8017676:	f7ff fd38 	bl	80170ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	3334      	adds	r3, #52	; 0x34
 801767e:	4921      	ldr	r1, [pc, #132]	; (8017704 <sync_fs+0xd4>)
 8017680:	4618      	mov	r0, r3
 8017682:	f7ff fd4d 	bl	8017120 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	3334      	adds	r3, #52	; 0x34
 801768a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801768e:	491e      	ldr	r1, [pc, #120]	; (8017708 <sync_fs+0xd8>)
 8017690:	4618      	mov	r0, r3
 8017692:	f7ff fd45 	bl	8017120 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	3334      	adds	r3, #52	; 0x34
 801769a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	695b      	ldr	r3, [r3, #20]
 80176a2:	4619      	mov	r1, r3
 80176a4:	4610      	mov	r0, r2
 80176a6:	f7ff fd3b 	bl	8017120 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	3334      	adds	r3, #52	; 0x34
 80176ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	691b      	ldr	r3, [r3, #16]
 80176b6:	4619      	mov	r1, r3
 80176b8:	4610      	mov	r0, r2
 80176ba:	f7ff fd31 	bl	8017120 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	6a1b      	ldr	r3, [r3, #32]
 80176c2:	1c5a      	adds	r2, r3, #1
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	7858      	ldrb	r0, [r3, #1]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80176d6:	2301      	movs	r3, #1
 80176d8:	f7ff fc8e 	bl	8016ff8 <disk_write>
			fs->fsi_flag = 0;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	2200      	movs	r2, #0
 80176e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	785b      	ldrb	r3, [r3, #1]
 80176e6:	2200      	movs	r2, #0
 80176e8:	2100      	movs	r1, #0
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7ff fca4 	bl	8017038 <disk_ioctl>
 80176f0:	4603      	mov	r3, r0
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d001      	beq.n	80176fa <sync_fs+0xca>
 80176f6:	2301      	movs	r3, #1
 80176f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80176fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80176fc:	4618      	mov	r0, r3
 80176fe:	3710      	adds	r7, #16
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}
 8017704:	41615252 	.word	0x41615252
 8017708:	61417272 	.word	0x61417272

0801770c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801770c:	b480      	push	{r7}
 801770e:	b083      	sub	sp, #12
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	3b02      	subs	r3, #2
 801771a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	699b      	ldr	r3, [r3, #24]
 8017720:	3b02      	subs	r3, #2
 8017722:	683a      	ldr	r2, [r7, #0]
 8017724:	429a      	cmp	r2, r3
 8017726:	d301      	bcc.n	801772c <clust2sect+0x20>
 8017728:	2300      	movs	r3, #0
 801772a:	e008      	b.n	801773e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	895b      	ldrh	r3, [r3, #10]
 8017730:	461a      	mov	r2, r3
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	fb03 f202 	mul.w	r2, r3, r2
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801773c:	4413      	add	r3, r2
}
 801773e:	4618      	mov	r0, r3
 8017740:	370c      	adds	r7, #12
 8017742:	46bd      	mov	sp, r7
 8017744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017748:	4770      	bx	lr

0801774a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801774a:	b580      	push	{r7, lr}
 801774c:	b086      	sub	sp, #24
 801774e:	af00      	add	r7, sp, #0
 8017750:	6078      	str	r0, [r7, #4]
 8017752:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	2b01      	cmp	r3, #1
 801775e:	d904      	bls.n	801776a <get_fat+0x20>
 8017760:	693b      	ldr	r3, [r7, #16]
 8017762:	699b      	ldr	r3, [r3, #24]
 8017764:	683a      	ldr	r2, [r7, #0]
 8017766:	429a      	cmp	r2, r3
 8017768:	d302      	bcc.n	8017770 <get_fat+0x26>
		val = 1;	/* Internal error */
 801776a:	2301      	movs	r3, #1
 801776c:	617b      	str	r3, [r7, #20]
 801776e:	e08f      	b.n	8017890 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017770:	f04f 33ff 	mov.w	r3, #4294967295
 8017774:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017776:	693b      	ldr	r3, [r7, #16]
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	2b03      	cmp	r3, #3
 801777c:	d062      	beq.n	8017844 <get_fat+0xfa>
 801777e:	2b03      	cmp	r3, #3
 8017780:	dc7c      	bgt.n	801787c <get_fat+0x132>
 8017782:	2b01      	cmp	r3, #1
 8017784:	d002      	beq.n	801778c <get_fat+0x42>
 8017786:	2b02      	cmp	r3, #2
 8017788:	d042      	beq.n	8017810 <get_fat+0xc6>
 801778a:	e077      	b.n	801787c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801778c:	683b      	ldr	r3, [r7, #0]
 801778e:	60fb      	str	r3, [r7, #12]
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	085b      	lsrs	r3, r3, #1
 8017794:	68fa      	ldr	r2, [r7, #12]
 8017796:	4413      	add	r3, r2
 8017798:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	0a5b      	lsrs	r3, r3, #9
 80177a2:	4413      	add	r3, r2
 80177a4:	4619      	mov	r1, r3
 80177a6:	6938      	ldr	r0, [r7, #16]
 80177a8:	f7ff ff14 	bl	80175d4 <move_window>
 80177ac:	4603      	mov	r3, r0
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d167      	bne.n	8017882 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	1c5a      	adds	r2, r3, #1
 80177b6:	60fa      	str	r2, [r7, #12]
 80177b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177bc:	693a      	ldr	r2, [r7, #16]
 80177be:	4413      	add	r3, r2
 80177c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80177c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80177c6:	693b      	ldr	r3, [r7, #16]
 80177c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	0a5b      	lsrs	r3, r3, #9
 80177ce:	4413      	add	r3, r2
 80177d0:	4619      	mov	r1, r3
 80177d2:	6938      	ldr	r0, [r7, #16]
 80177d4:	f7ff fefe 	bl	80175d4 <move_window>
 80177d8:	4603      	mov	r3, r0
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d153      	bne.n	8017886 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177e4:	693a      	ldr	r2, [r7, #16]
 80177e6:	4413      	add	r3, r2
 80177e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80177ec:	021b      	lsls	r3, r3, #8
 80177ee:	461a      	mov	r2, r3
 80177f0:	68bb      	ldr	r3, [r7, #8]
 80177f2:	4313      	orrs	r3, r2
 80177f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	f003 0301 	and.w	r3, r3, #1
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d002      	beq.n	8017806 <get_fat+0xbc>
 8017800:	68bb      	ldr	r3, [r7, #8]
 8017802:	091b      	lsrs	r3, r3, #4
 8017804:	e002      	b.n	801780c <get_fat+0xc2>
 8017806:	68bb      	ldr	r3, [r7, #8]
 8017808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801780c:	617b      	str	r3, [r7, #20]
			break;
 801780e:	e03f      	b.n	8017890 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017810:	693b      	ldr	r3, [r7, #16]
 8017812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	0a1b      	lsrs	r3, r3, #8
 8017818:	4413      	add	r3, r2
 801781a:	4619      	mov	r1, r3
 801781c:	6938      	ldr	r0, [r7, #16]
 801781e:	f7ff fed9 	bl	80175d4 <move_window>
 8017822:	4603      	mov	r3, r0
 8017824:	2b00      	cmp	r3, #0
 8017826:	d130      	bne.n	801788a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	005b      	lsls	r3, r3, #1
 8017832:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017836:	4413      	add	r3, r2
 8017838:	4618      	mov	r0, r3
 801783a:	f7ff fc1b 	bl	8017074 <ld_word>
 801783e:	4603      	mov	r3, r0
 8017840:	617b      	str	r3, [r7, #20]
			break;
 8017842:	e025      	b.n	8017890 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017844:	693b      	ldr	r3, [r7, #16]
 8017846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	09db      	lsrs	r3, r3, #7
 801784c:	4413      	add	r3, r2
 801784e:	4619      	mov	r1, r3
 8017850:	6938      	ldr	r0, [r7, #16]
 8017852:	f7ff febf 	bl	80175d4 <move_window>
 8017856:	4603      	mov	r3, r0
 8017858:	2b00      	cmp	r3, #0
 801785a:	d118      	bne.n	801788e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017862:	683b      	ldr	r3, [r7, #0]
 8017864:	009b      	lsls	r3, r3, #2
 8017866:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801786a:	4413      	add	r3, r2
 801786c:	4618      	mov	r0, r3
 801786e:	f7ff fc19 	bl	80170a4 <ld_dword>
 8017872:	4603      	mov	r3, r0
 8017874:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017878:	617b      	str	r3, [r7, #20]
			break;
 801787a:	e009      	b.n	8017890 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801787c:	2301      	movs	r3, #1
 801787e:	617b      	str	r3, [r7, #20]
 8017880:	e006      	b.n	8017890 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017882:	bf00      	nop
 8017884:	e004      	b.n	8017890 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017886:	bf00      	nop
 8017888:	e002      	b.n	8017890 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801788a:	bf00      	nop
 801788c:	e000      	b.n	8017890 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801788e:	bf00      	nop
		}
	}

	return val;
 8017890:	697b      	ldr	r3, [r7, #20]
}
 8017892:	4618      	mov	r0, r3
 8017894:	3718      	adds	r7, #24
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}

0801789a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801789a:	b590      	push	{r4, r7, lr}
 801789c:	b089      	sub	sp, #36	; 0x24
 801789e:	af00      	add	r7, sp, #0
 80178a0:	60f8      	str	r0, [r7, #12]
 80178a2:	60b9      	str	r1, [r7, #8]
 80178a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80178a6:	2302      	movs	r3, #2
 80178a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	2b01      	cmp	r3, #1
 80178ae:	f240 80d2 	bls.w	8017a56 <put_fat+0x1bc>
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	699b      	ldr	r3, [r3, #24]
 80178b6:	68ba      	ldr	r2, [r7, #8]
 80178b8:	429a      	cmp	r2, r3
 80178ba:	f080 80cc 	bcs.w	8017a56 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	781b      	ldrb	r3, [r3, #0]
 80178c2:	2b03      	cmp	r3, #3
 80178c4:	f000 8096 	beq.w	80179f4 <put_fat+0x15a>
 80178c8:	2b03      	cmp	r3, #3
 80178ca:	f300 80cd 	bgt.w	8017a68 <put_fat+0x1ce>
 80178ce:	2b01      	cmp	r3, #1
 80178d0:	d002      	beq.n	80178d8 <put_fat+0x3e>
 80178d2:	2b02      	cmp	r3, #2
 80178d4:	d06e      	beq.n	80179b4 <put_fat+0x11a>
 80178d6:	e0c7      	b.n	8017a68 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	61bb      	str	r3, [r7, #24]
 80178dc:	69bb      	ldr	r3, [r7, #24]
 80178de:	085b      	lsrs	r3, r3, #1
 80178e0:	69ba      	ldr	r2, [r7, #24]
 80178e2:	4413      	add	r3, r2
 80178e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80178ea:	69bb      	ldr	r3, [r7, #24]
 80178ec:	0a5b      	lsrs	r3, r3, #9
 80178ee:	4413      	add	r3, r2
 80178f0:	4619      	mov	r1, r3
 80178f2:	68f8      	ldr	r0, [r7, #12]
 80178f4:	f7ff fe6e 	bl	80175d4 <move_window>
 80178f8:	4603      	mov	r3, r0
 80178fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80178fc:	7ffb      	ldrb	r3, [r7, #31]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	f040 80ab 	bne.w	8017a5a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801790a:	69bb      	ldr	r3, [r7, #24]
 801790c:	1c59      	adds	r1, r3, #1
 801790e:	61b9      	str	r1, [r7, #24]
 8017910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017914:	4413      	add	r3, r2
 8017916:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017918:	68bb      	ldr	r3, [r7, #8]
 801791a:	f003 0301 	and.w	r3, r3, #1
 801791e:	2b00      	cmp	r3, #0
 8017920:	d00d      	beq.n	801793e <put_fat+0xa4>
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	781b      	ldrb	r3, [r3, #0]
 8017926:	b25b      	sxtb	r3, r3
 8017928:	f003 030f 	and.w	r3, r3, #15
 801792c:	b25a      	sxtb	r2, r3
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	b2db      	uxtb	r3, r3
 8017932:	011b      	lsls	r3, r3, #4
 8017934:	b25b      	sxtb	r3, r3
 8017936:	4313      	orrs	r3, r2
 8017938:	b25b      	sxtb	r3, r3
 801793a:	b2db      	uxtb	r3, r3
 801793c:	e001      	b.n	8017942 <put_fat+0xa8>
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	b2db      	uxtb	r3, r3
 8017942:	697a      	ldr	r2, [r7, #20]
 8017944:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	2201      	movs	r2, #1
 801794a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017950:	69bb      	ldr	r3, [r7, #24]
 8017952:	0a5b      	lsrs	r3, r3, #9
 8017954:	4413      	add	r3, r2
 8017956:	4619      	mov	r1, r3
 8017958:	68f8      	ldr	r0, [r7, #12]
 801795a:	f7ff fe3b 	bl	80175d4 <move_window>
 801795e:	4603      	mov	r3, r0
 8017960:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017962:	7ffb      	ldrb	r3, [r7, #31]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d17a      	bne.n	8017a5e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801796e:	69bb      	ldr	r3, [r7, #24]
 8017970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017974:	4413      	add	r3, r2
 8017976:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	f003 0301 	and.w	r3, r3, #1
 801797e:	2b00      	cmp	r3, #0
 8017980:	d003      	beq.n	801798a <put_fat+0xf0>
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	091b      	lsrs	r3, r3, #4
 8017986:	b2db      	uxtb	r3, r3
 8017988:	e00e      	b.n	80179a8 <put_fat+0x10e>
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	b25b      	sxtb	r3, r3
 8017990:	f023 030f 	bic.w	r3, r3, #15
 8017994:	b25a      	sxtb	r2, r3
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	0a1b      	lsrs	r3, r3, #8
 801799a:	b25b      	sxtb	r3, r3
 801799c:	f003 030f 	and.w	r3, r3, #15
 80179a0:	b25b      	sxtb	r3, r3
 80179a2:	4313      	orrs	r3, r2
 80179a4:	b25b      	sxtb	r3, r3
 80179a6:	b2db      	uxtb	r3, r3
 80179a8:	697a      	ldr	r2, [r7, #20]
 80179aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	2201      	movs	r2, #1
 80179b0:	70da      	strb	r2, [r3, #3]
			break;
 80179b2:	e059      	b.n	8017a68 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	0a1b      	lsrs	r3, r3, #8
 80179bc:	4413      	add	r3, r2
 80179be:	4619      	mov	r1, r3
 80179c0:	68f8      	ldr	r0, [r7, #12]
 80179c2:	f7ff fe07 	bl	80175d4 <move_window>
 80179c6:	4603      	mov	r3, r0
 80179c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80179ca:	7ffb      	ldrb	r3, [r7, #31]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d148      	bne.n	8017a62 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80179d6:	68bb      	ldr	r3, [r7, #8]
 80179d8:	005b      	lsls	r3, r3, #1
 80179da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80179de:	4413      	add	r3, r2
 80179e0:	687a      	ldr	r2, [r7, #4]
 80179e2:	b292      	uxth	r2, r2
 80179e4:	4611      	mov	r1, r2
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7ff fb7f 	bl	80170ea <st_word>
			fs->wflag = 1;
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	2201      	movs	r2, #1
 80179f0:	70da      	strb	r2, [r3, #3]
			break;
 80179f2:	e039      	b.n	8017a68 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179f8:	68bb      	ldr	r3, [r7, #8]
 80179fa:	09db      	lsrs	r3, r3, #7
 80179fc:	4413      	add	r3, r2
 80179fe:	4619      	mov	r1, r3
 8017a00:	68f8      	ldr	r0, [r7, #12]
 8017a02:	f7ff fde7 	bl	80175d4 <move_window>
 8017a06:	4603      	mov	r3, r0
 8017a08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017a0a:	7ffb      	ldrb	r3, [r7, #31]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d12a      	bne.n	8017a66 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	009b      	lsls	r3, r3, #2
 8017a20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017a24:	4413      	add	r3, r2
 8017a26:	4618      	mov	r0, r3
 8017a28:	f7ff fb3c 	bl	80170a4 <ld_dword>
 8017a2c:	4603      	mov	r3, r0
 8017a2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017a32:	4323      	orrs	r3, r4
 8017a34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	009b      	lsls	r3, r3, #2
 8017a40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017a44:	4413      	add	r3, r2
 8017a46:	6879      	ldr	r1, [r7, #4]
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7ff fb69 	bl	8017120 <st_dword>
			fs->wflag = 1;
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	2201      	movs	r2, #1
 8017a52:	70da      	strb	r2, [r3, #3]
			break;
 8017a54:	e008      	b.n	8017a68 <put_fat+0x1ce>
		}
	}
 8017a56:	bf00      	nop
 8017a58:	e006      	b.n	8017a68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017a5a:	bf00      	nop
 8017a5c:	e004      	b.n	8017a68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017a5e:	bf00      	nop
 8017a60:	e002      	b.n	8017a68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017a62:	bf00      	nop
 8017a64:	e000      	b.n	8017a68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017a66:	bf00      	nop
	return res;
 8017a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3724      	adds	r7, #36	; 0x24
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd90      	pop	{r4, r7, pc}

08017a72 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017a72:	b580      	push	{r7, lr}
 8017a74:	b088      	sub	sp, #32
 8017a76:	af00      	add	r7, sp, #0
 8017a78:	60f8      	str	r0, [r7, #12]
 8017a7a:	60b9      	str	r1, [r7, #8]
 8017a7c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017a88:	68bb      	ldr	r3, [r7, #8]
 8017a8a:	2b01      	cmp	r3, #1
 8017a8c:	d904      	bls.n	8017a98 <remove_chain+0x26>
 8017a8e:	69bb      	ldr	r3, [r7, #24]
 8017a90:	699b      	ldr	r3, [r3, #24]
 8017a92:	68ba      	ldr	r2, [r7, #8]
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d301      	bcc.n	8017a9c <remove_chain+0x2a>
 8017a98:	2302      	movs	r3, #2
 8017a9a:	e04b      	b.n	8017b34 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d00c      	beq.n	8017abc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8017aa6:	6879      	ldr	r1, [r7, #4]
 8017aa8:	69b8      	ldr	r0, [r7, #24]
 8017aaa:	f7ff fef6 	bl	801789a <put_fat>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017ab2:	7ffb      	ldrb	r3, [r7, #31]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d001      	beq.n	8017abc <remove_chain+0x4a>
 8017ab8:	7ffb      	ldrb	r3, [r7, #31]
 8017aba:	e03b      	b.n	8017b34 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017abc:	68b9      	ldr	r1, [r7, #8]
 8017abe:	68f8      	ldr	r0, [r7, #12]
 8017ac0:	f7ff fe43 	bl	801774a <get_fat>
 8017ac4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d031      	beq.n	8017b30 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017acc:	697b      	ldr	r3, [r7, #20]
 8017ace:	2b01      	cmp	r3, #1
 8017ad0:	d101      	bne.n	8017ad6 <remove_chain+0x64>
 8017ad2:	2302      	movs	r3, #2
 8017ad4:	e02e      	b.n	8017b34 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017adc:	d101      	bne.n	8017ae2 <remove_chain+0x70>
 8017ade:	2301      	movs	r3, #1
 8017ae0:	e028      	b.n	8017b34 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	68b9      	ldr	r1, [r7, #8]
 8017ae6:	69b8      	ldr	r0, [r7, #24]
 8017ae8:	f7ff fed7 	bl	801789a <put_fat>
 8017aec:	4603      	mov	r3, r0
 8017aee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017af0:	7ffb      	ldrb	r3, [r7, #31]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d001      	beq.n	8017afa <remove_chain+0x88>
 8017af6:	7ffb      	ldrb	r3, [r7, #31]
 8017af8:	e01c      	b.n	8017b34 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017afa:	69bb      	ldr	r3, [r7, #24]
 8017afc:	695a      	ldr	r2, [r3, #20]
 8017afe:	69bb      	ldr	r3, [r7, #24]
 8017b00:	699b      	ldr	r3, [r3, #24]
 8017b02:	3b02      	subs	r3, #2
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d20b      	bcs.n	8017b20 <remove_chain+0xae>
			fs->free_clst++;
 8017b08:	69bb      	ldr	r3, [r7, #24]
 8017b0a:	695b      	ldr	r3, [r3, #20]
 8017b0c:	1c5a      	adds	r2, r3, #1
 8017b0e:	69bb      	ldr	r3, [r7, #24]
 8017b10:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8017b12:	69bb      	ldr	r3, [r7, #24]
 8017b14:	791b      	ldrb	r3, [r3, #4]
 8017b16:	f043 0301 	orr.w	r3, r3, #1
 8017b1a:	b2da      	uxtb	r2, r3
 8017b1c:	69bb      	ldr	r3, [r7, #24]
 8017b1e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017b20:	697b      	ldr	r3, [r7, #20]
 8017b22:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017b24:	69bb      	ldr	r3, [r7, #24]
 8017b26:	699b      	ldr	r3, [r3, #24]
 8017b28:	68ba      	ldr	r2, [r7, #8]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d3c6      	bcc.n	8017abc <remove_chain+0x4a>
 8017b2e:	e000      	b.n	8017b32 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017b30:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017b32:	2300      	movs	r3, #0
}
 8017b34:	4618      	mov	r0, r3
 8017b36:	3720      	adds	r7, #32
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}

08017b3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b088      	sub	sp, #32
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
 8017b44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017b4c:	683b      	ldr	r3, [r7, #0]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d10d      	bne.n	8017b6e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	691b      	ldr	r3, [r3, #16]
 8017b56:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017b58:	69bb      	ldr	r3, [r7, #24]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d004      	beq.n	8017b68 <create_chain+0x2c>
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	699b      	ldr	r3, [r3, #24]
 8017b62:	69ba      	ldr	r2, [r7, #24]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d31b      	bcc.n	8017ba0 <create_chain+0x64>
 8017b68:	2301      	movs	r3, #1
 8017b6a:	61bb      	str	r3, [r7, #24]
 8017b6c:	e018      	b.n	8017ba0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017b6e:	6839      	ldr	r1, [r7, #0]
 8017b70:	6878      	ldr	r0, [r7, #4]
 8017b72:	f7ff fdea 	bl	801774a <get_fat>
 8017b76:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	2b01      	cmp	r3, #1
 8017b7c:	d801      	bhi.n	8017b82 <create_chain+0x46>
 8017b7e:	2301      	movs	r3, #1
 8017b80:	e070      	b.n	8017c64 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b88:	d101      	bne.n	8017b8e <create_chain+0x52>
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	e06a      	b.n	8017c64 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	699b      	ldr	r3, [r3, #24]
 8017b92:	68fa      	ldr	r2, [r7, #12]
 8017b94:	429a      	cmp	r2, r3
 8017b96:	d201      	bcs.n	8017b9c <create_chain+0x60>
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	e063      	b.n	8017c64 <create_chain+0x128>
		scl = clst;
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017ba0:	69bb      	ldr	r3, [r7, #24]
 8017ba2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017ba4:	69fb      	ldr	r3, [r7, #28]
 8017ba6:	3301      	adds	r3, #1
 8017ba8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	699b      	ldr	r3, [r3, #24]
 8017bae:	69fa      	ldr	r2, [r7, #28]
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d307      	bcc.n	8017bc4 <create_chain+0x88>
				ncl = 2;
 8017bb4:	2302      	movs	r3, #2
 8017bb6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017bb8:	69fa      	ldr	r2, [r7, #28]
 8017bba:	69bb      	ldr	r3, [r7, #24]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d901      	bls.n	8017bc4 <create_chain+0x88>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e04f      	b.n	8017c64 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017bc4:	69f9      	ldr	r1, [r7, #28]
 8017bc6:	6878      	ldr	r0, [r7, #4]
 8017bc8:	f7ff fdbf 	bl	801774a <get_fat>
 8017bcc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d00e      	beq.n	8017bf2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2b01      	cmp	r3, #1
 8017bd8:	d003      	beq.n	8017be2 <create_chain+0xa6>
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017be0:	d101      	bne.n	8017be6 <create_chain+0xaa>
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	e03e      	b.n	8017c64 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017be6:	69fa      	ldr	r2, [r7, #28]
 8017be8:	69bb      	ldr	r3, [r7, #24]
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d1da      	bne.n	8017ba4 <create_chain+0x68>
 8017bee:	2300      	movs	r3, #0
 8017bf0:	e038      	b.n	8017c64 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017bf2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8017bf8:	69f9      	ldr	r1, [r7, #28]
 8017bfa:	6938      	ldr	r0, [r7, #16]
 8017bfc:	f7ff fe4d 	bl	801789a <put_fat>
 8017c00:	4603      	mov	r3, r0
 8017c02:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017c04:	7dfb      	ldrb	r3, [r7, #23]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d109      	bne.n	8017c1e <create_chain+0xe2>
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d006      	beq.n	8017c1e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017c10:	69fa      	ldr	r2, [r7, #28]
 8017c12:	6839      	ldr	r1, [r7, #0]
 8017c14:	6938      	ldr	r0, [r7, #16]
 8017c16:	f7ff fe40 	bl	801789a <put_fat>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017c1e:	7dfb      	ldrb	r3, [r7, #23]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d116      	bne.n	8017c52 <create_chain+0x116>
		fs->last_clst = ncl;
 8017c24:	693b      	ldr	r3, [r7, #16]
 8017c26:	69fa      	ldr	r2, [r7, #28]
 8017c28:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017c2a:	693b      	ldr	r3, [r7, #16]
 8017c2c:	695a      	ldr	r2, [r3, #20]
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	699b      	ldr	r3, [r3, #24]
 8017c32:	3b02      	subs	r3, #2
 8017c34:	429a      	cmp	r2, r3
 8017c36:	d804      	bhi.n	8017c42 <create_chain+0x106>
 8017c38:	693b      	ldr	r3, [r7, #16]
 8017c3a:	695b      	ldr	r3, [r3, #20]
 8017c3c:	1e5a      	subs	r2, r3, #1
 8017c3e:	693b      	ldr	r3, [r7, #16]
 8017c40:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8017c42:	693b      	ldr	r3, [r7, #16]
 8017c44:	791b      	ldrb	r3, [r3, #4]
 8017c46:	f043 0301 	orr.w	r3, r3, #1
 8017c4a:	b2da      	uxtb	r2, r3
 8017c4c:	693b      	ldr	r3, [r7, #16]
 8017c4e:	711a      	strb	r2, [r3, #4]
 8017c50:	e007      	b.n	8017c62 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017c52:	7dfb      	ldrb	r3, [r7, #23]
 8017c54:	2b01      	cmp	r3, #1
 8017c56:	d102      	bne.n	8017c5e <create_chain+0x122>
 8017c58:	f04f 33ff 	mov.w	r3, #4294967295
 8017c5c:	e000      	b.n	8017c60 <create_chain+0x124>
 8017c5e:	2301      	movs	r3, #1
 8017c60:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017c62:	69fb      	ldr	r3, [r7, #28]
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	3720      	adds	r7, #32
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017c6c:	b480      	push	{r7}
 8017c6e:	b087      	sub	sp, #28
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c80:	3304      	adds	r3, #4
 8017c82:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017c84:	683b      	ldr	r3, [r7, #0]
 8017c86:	0a5b      	lsrs	r3, r3, #9
 8017c88:	68fa      	ldr	r2, [r7, #12]
 8017c8a:	8952      	ldrh	r2, [r2, #10]
 8017c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017c92:	693b      	ldr	r3, [r7, #16]
 8017c94:	1d1a      	adds	r2, r3, #4
 8017c96:	613a      	str	r2, [r7, #16]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d101      	bne.n	8017ca6 <clmt_clust+0x3a>
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	e010      	b.n	8017cc8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8017ca6:	697a      	ldr	r2, [r7, #20]
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d307      	bcc.n	8017cbe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017cae:	697a      	ldr	r2, [r7, #20]
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	1ad3      	subs	r3, r2, r3
 8017cb4:	617b      	str	r3, [r7, #20]
 8017cb6:	693b      	ldr	r3, [r7, #16]
 8017cb8:	3304      	adds	r3, #4
 8017cba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017cbc:	e7e9      	b.n	8017c92 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8017cbe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	681a      	ldr	r2, [r3, #0]
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	4413      	add	r3, r2
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	371c      	adds	r7, #28
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd2:	4770      	bx	lr

08017cd4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b086      	sub	sp, #24
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017ce4:	683b      	ldr	r3, [r7, #0]
 8017ce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017cea:	d204      	bcs.n	8017cf6 <dir_sdi+0x22>
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	f003 031f 	and.w	r3, r3, #31
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d001      	beq.n	8017cfa <dir_sdi+0x26>
		return FR_INT_ERR;
 8017cf6:	2302      	movs	r3, #2
 8017cf8:	e063      	b.n	8017dc2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	683a      	ldr	r2, [r7, #0]
 8017cfe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	689b      	ldr	r3, [r3, #8]
 8017d04:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d106      	bne.n	8017d1a <dir_sdi+0x46>
 8017d0c:	693b      	ldr	r3, [r7, #16]
 8017d0e:	781b      	ldrb	r3, [r3, #0]
 8017d10:	2b02      	cmp	r3, #2
 8017d12:	d902      	bls.n	8017d1a <dir_sdi+0x46>
		clst = fs->dirbase;
 8017d14:	693b      	ldr	r3, [r7, #16]
 8017d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d18:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d10c      	bne.n	8017d3a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	095b      	lsrs	r3, r3, #5
 8017d24:	693a      	ldr	r2, [r7, #16]
 8017d26:	8912      	ldrh	r2, [r2, #8]
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d301      	bcc.n	8017d30 <dir_sdi+0x5c>
 8017d2c:	2302      	movs	r3, #2
 8017d2e:	e048      	b.n	8017dc2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017d30:	693b      	ldr	r3, [r7, #16]
 8017d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	61da      	str	r2, [r3, #28]
 8017d38:	e029      	b.n	8017d8e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017d3a:	693b      	ldr	r3, [r7, #16]
 8017d3c:	895b      	ldrh	r3, [r3, #10]
 8017d3e:	025b      	lsls	r3, r3, #9
 8017d40:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017d42:	e019      	b.n	8017d78 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	6979      	ldr	r1, [r7, #20]
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f7ff fcfe 	bl	801774a <get_fat>
 8017d4e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d56:	d101      	bne.n	8017d5c <dir_sdi+0x88>
 8017d58:	2301      	movs	r3, #1
 8017d5a:	e032      	b.n	8017dc2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017d5c:	697b      	ldr	r3, [r7, #20]
 8017d5e:	2b01      	cmp	r3, #1
 8017d60:	d904      	bls.n	8017d6c <dir_sdi+0x98>
 8017d62:	693b      	ldr	r3, [r7, #16]
 8017d64:	699b      	ldr	r3, [r3, #24]
 8017d66:	697a      	ldr	r2, [r7, #20]
 8017d68:	429a      	cmp	r2, r3
 8017d6a:	d301      	bcc.n	8017d70 <dir_sdi+0x9c>
 8017d6c:	2302      	movs	r3, #2
 8017d6e:	e028      	b.n	8017dc2 <dir_sdi+0xee>
			ofs -= csz;
 8017d70:	683a      	ldr	r2, [r7, #0]
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	1ad3      	subs	r3, r2, r3
 8017d76:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017d78:	683a      	ldr	r2, [r7, #0]
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	d2e1      	bcs.n	8017d44 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017d80:	6979      	ldr	r1, [r7, #20]
 8017d82:	6938      	ldr	r0, [r7, #16]
 8017d84:	f7ff fcc2 	bl	801770c <clust2sect>
 8017d88:	4602      	mov	r2, r0
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	697a      	ldr	r2, [r7, #20]
 8017d92:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	69db      	ldr	r3, [r3, #28]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d101      	bne.n	8017da0 <dir_sdi+0xcc>
 8017d9c:	2302      	movs	r3, #2
 8017d9e:	e010      	b.n	8017dc2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	69da      	ldr	r2, [r3, #28]
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	0a5b      	lsrs	r3, r3, #9
 8017da8:	441a      	add	r2, r3
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017db4:	683b      	ldr	r3, [r7, #0]
 8017db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017dba:	441a      	add	r2, r3
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017dc0:	2300      	movs	r3, #0
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3718      	adds	r7, #24
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}

08017dca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017dca:	b580      	push	{r7, lr}
 8017dcc:	b086      	sub	sp, #24
 8017dce:	af00      	add	r7, sp, #0
 8017dd0:	6078      	str	r0, [r7, #4]
 8017dd2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	695b      	ldr	r3, [r3, #20]
 8017dde:	3320      	adds	r3, #32
 8017de0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	69db      	ldr	r3, [r3, #28]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d003      	beq.n	8017df2 <dir_next+0x28>
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017df0:	d301      	bcc.n	8017df6 <dir_next+0x2c>
 8017df2:	2304      	movs	r3, #4
 8017df4:	e0aa      	b.n	8017f4c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017df6:	68bb      	ldr	r3, [r7, #8]
 8017df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f040 8098 	bne.w	8017f32 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	69db      	ldr	r3, [r3, #28]
 8017e06:	1c5a      	adds	r2, r3, #1
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	699b      	ldr	r3, [r3, #24]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d10b      	bne.n	8017e2c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	095b      	lsrs	r3, r3, #5
 8017e18:	68fa      	ldr	r2, [r7, #12]
 8017e1a:	8912      	ldrh	r2, [r2, #8]
 8017e1c:	4293      	cmp	r3, r2
 8017e1e:	f0c0 8088 	bcc.w	8017f32 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2200      	movs	r2, #0
 8017e26:	61da      	str	r2, [r3, #28]
 8017e28:	2304      	movs	r3, #4
 8017e2a:	e08f      	b.n	8017f4c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017e2c:	68bb      	ldr	r3, [r7, #8]
 8017e2e:	0a5b      	lsrs	r3, r3, #9
 8017e30:	68fa      	ldr	r2, [r7, #12]
 8017e32:	8952      	ldrh	r2, [r2, #10]
 8017e34:	3a01      	subs	r2, #1
 8017e36:	4013      	ands	r3, r2
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d17a      	bne.n	8017f32 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017e3c:	687a      	ldr	r2, [r7, #4]
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	699b      	ldr	r3, [r3, #24]
 8017e42:	4619      	mov	r1, r3
 8017e44:	4610      	mov	r0, r2
 8017e46:	f7ff fc80 	bl	801774a <get_fat>
 8017e4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	2b01      	cmp	r3, #1
 8017e50:	d801      	bhi.n	8017e56 <dir_next+0x8c>
 8017e52:	2302      	movs	r3, #2
 8017e54:	e07a      	b.n	8017f4c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017e56:	697b      	ldr	r3, [r7, #20]
 8017e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e5c:	d101      	bne.n	8017e62 <dir_next+0x98>
 8017e5e:	2301      	movs	r3, #1
 8017e60:	e074      	b.n	8017f4c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	699b      	ldr	r3, [r3, #24]
 8017e66:	697a      	ldr	r2, [r7, #20]
 8017e68:	429a      	cmp	r2, r3
 8017e6a:	d358      	bcc.n	8017f1e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017e6c:	683b      	ldr	r3, [r7, #0]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d104      	bne.n	8017e7c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	2200      	movs	r2, #0
 8017e76:	61da      	str	r2, [r3, #28]
 8017e78:	2304      	movs	r3, #4
 8017e7a:	e067      	b.n	8017f4c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017e7c:	687a      	ldr	r2, [r7, #4]
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	699b      	ldr	r3, [r3, #24]
 8017e82:	4619      	mov	r1, r3
 8017e84:	4610      	mov	r0, r2
 8017e86:	f7ff fe59 	bl	8017b3c <create_chain>
 8017e8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017e8c:	697b      	ldr	r3, [r7, #20]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d101      	bne.n	8017e96 <dir_next+0xcc>
 8017e92:	2307      	movs	r3, #7
 8017e94:	e05a      	b.n	8017f4c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017e96:	697b      	ldr	r3, [r7, #20]
 8017e98:	2b01      	cmp	r3, #1
 8017e9a:	d101      	bne.n	8017ea0 <dir_next+0xd6>
 8017e9c:	2302      	movs	r3, #2
 8017e9e:	e055      	b.n	8017f4c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ea6:	d101      	bne.n	8017eac <dir_next+0xe2>
 8017ea8:	2301      	movs	r3, #1
 8017eaa:	e04f      	b.n	8017f4c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017eac:	68f8      	ldr	r0, [r7, #12]
 8017eae:	f7ff fb4d 	bl	801754c <sync_window>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d001      	beq.n	8017ebc <dir_next+0xf2>
 8017eb8:	2301      	movs	r3, #1
 8017eba:	e047      	b.n	8017f4c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	3334      	adds	r3, #52	; 0x34
 8017ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ec4:	2100      	movs	r1, #0
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f7ff f977 	bl	80171ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017ecc:	2300      	movs	r3, #0
 8017ece:	613b      	str	r3, [r7, #16]
 8017ed0:	6979      	ldr	r1, [r7, #20]
 8017ed2:	68f8      	ldr	r0, [r7, #12]
 8017ed4:	f7ff fc1a 	bl	801770c <clust2sect>
 8017ed8:	4602      	mov	r2, r0
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	631a      	str	r2, [r3, #48]	; 0x30
 8017ede:	e012      	b.n	8017f06 <dir_next+0x13c>
						fs->wflag = 1;
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	2201      	movs	r2, #1
 8017ee4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017ee6:	68f8      	ldr	r0, [r7, #12]
 8017ee8:	f7ff fb30 	bl	801754c <sync_window>
 8017eec:	4603      	mov	r3, r0
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d001      	beq.n	8017ef6 <dir_next+0x12c>
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	e02a      	b.n	8017f4c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017ef6:	693b      	ldr	r3, [r7, #16]
 8017ef8:	3301      	adds	r3, #1
 8017efa:	613b      	str	r3, [r7, #16]
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f00:	1c5a      	adds	r2, r3, #1
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	631a      	str	r2, [r3, #48]	; 0x30
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	895b      	ldrh	r3, [r3, #10]
 8017f0a:	461a      	mov	r2, r3
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	4293      	cmp	r3, r2
 8017f10:	d3e6      	bcc.n	8017ee0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017f16:	693b      	ldr	r3, [r7, #16]
 8017f18:	1ad2      	subs	r2, r2, r3
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	697a      	ldr	r2, [r7, #20]
 8017f22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017f24:	6979      	ldr	r1, [r7, #20]
 8017f26:	68f8      	ldr	r0, [r7, #12]
 8017f28:	f7ff fbf0 	bl	801770c <clust2sect>
 8017f2c:	4602      	mov	r2, r0
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	68ba      	ldr	r2, [r7, #8]
 8017f36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017f3e:	68bb      	ldr	r3, [r7, #8]
 8017f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f44:	441a      	add	r2, r3
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017f4a:	2300      	movs	r3, #0
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3718      	adds	r7, #24
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b086      	sub	sp, #24
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017f64:	2100      	movs	r1, #0
 8017f66:	6878      	ldr	r0, [r7, #4]
 8017f68:	f7ff feb4 	bl	8017cd4 <dir_sdi>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017f70:	7dfb      	ldrb	r3, [r7, #23]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d12b      	bne.n	8017fce <dir_alloc+0x7a>
		n = 0;
 8017f76:	2300      	movs	r3, #0
 8017f78:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	69db      	ldr	r3, [r3, #28]
 8017f7e:	4619      	mov	r1, r3
 8017f80:	68f8      	ldr	r0, [r7, #12]
 8017f82:	f7ff fb27 	bl	80175d4 <move_window>
 8017f86:	4603      	mov	r3, r0
 8017f88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017f8a:	7dfb      	ldrb	r3, [r7, #23]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d11d      	bne.n	8017fcc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	6a1b      	ldr	r3, [r3, #32]
 8017f94:	781b      	ldrb	r3, [r3, #0]
 8017f96:	2be5      	cmp	r3, #229	; 0xe5
 8017f98:	d004      	beq.n	8017fa4 <dir_alloc+0x50>
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	6a1b      	ldr	r3, [r3, #32]
 8017f9e:	781b      	ldrb	r3, [r3, #0]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d107      	bne.n	8017fb4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017fa4:	693b      	ldr	r3, [r7, #16]
 8017fa6:	3301      	adds	r3, #1
 8017fa8:	613b      	str	r3, [r7, #16]
 8017faa:	693a      	ldr	r2, [r7, #16]
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	d102      	bne.n	8017fb8 <dir_alloc+0x64>
 8017fb2:	e00c      	b.n	8017fce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017fb8:	2101      	movs	r1, #1
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f7ff ff05 	bl	8017dca <dir_next>
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017fc4:	7dfb      	ldrb	r3, [r7, #23]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d0d7      	beq.n	8017f7a <dir_alloc+0x26>
 8017fca:	e000      	b.n	8017fce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017fcc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017fce:	7dfb      	ldrb	r3, [r7, #23]
 8017fd0:	2b04      	cmp	r3, #4
 8017fd2:	d101      	bne.n	8017fd8 <dir_alloc+0x84>
 8017fd4:	2307      	movs	r3, #7
 8017fd6:	75fb      	strb	r3, [r7, #23]
	return res;
 8017fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	3718      	adds	r7, #24
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}

08017fe2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017fe2:	b580      	push	{r7, lr}
 8017fe4:	b084      	sub	sp, #16
 8017fe6:	af00      	add	r7, sp, #0
 8017fe8:	6078      	str	r0, [r7, #4]
 8017fea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017fec:	683b      	ldr	r3, [r7, #0]
 8017fee:	331a      	adds	r3, #26
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7ff f83f 	bl	8017074 <ld_word>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	781b      	ldrb	r3, [r3, #0]
 8017ffe:	2b03      	cmp	r3, #3
 8018000:	d109      	bne.n	8018016 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018002:	683b      	ldr	r3, [r7, #0]
 8018004:	3314      	adds	r3, #20
 8018006:	4618      	mov	r0, r3
 8018008:	f7ff f834 	bl	8017074 <ld_word>
 801800c:	4603      	mov	r3, r0
 801800e:	041b      	lsls	r3, r3, #16
 8018010:	68fa      	ldr	r2, [r7, #12]
 8018012:	4313      	orrs	r3, r2
 8018014:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018016:	68fb      	ldr	r3, [r7, #12]
}
 8018018:	4618      	mov	r0, r3
 801801a:	3710      	adds	r7, #16
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b084      	sub	sp, #16
 8018024:	af00      	add	r7, sp, #0
 8018026:	60f8      	str	r0, [r7, #12]
 8018028:	60b9      	str	r1, [r7, #8]
 801802a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801802c:	68bb      	ldr	r3, [r7, #8]
 801802e:	331a      	adds	r3, #26
 8018030:	687a      	ldr	r2, [r7, #4]
 8018032:	b292      	uxth	r2, r2
 8018034:	4611      	mov	r1, r2
 8018036:	4618      	mov	r0, r3
 8018038:	f7ff f857 	bl	80170ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	781b      	ldrb	r3, [r3, #0]
 8018040:	2b03      	cmp	r3, #3
 8018042:	d109      	bne.n	8018058 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018044:	68bb      	ldr	r3, [r7, #8]
 8018046:	f103 0214 	add.w	r2, r3, #20
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	0c1b      	lsrs	r3, r3, #16
 801804e:	b29b      	uxth	r3, r3
 8018050:	4619      	mov	r1, r3
 8018052:	4610      	mov	r0, r2
 8018054:	f7ff f849 	bl	80170ea <st_word>
	}
}
 8018058:	bf00      	nop
 801805a:	3710      	adds	r7, #16
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8018060:	b590      	push	{r4, r7, lr}
 8018062:	b087      	sub	sp, #28
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	331a      	adds	r3, #26
 801806e:	4618      	mov	r0, r3
 8018070:	f7ff f800 	bl	8017074 <ld_word>
 8018074:	4603      	mov	r3, r0
 8018076:	2b00      	cmp	r3, #0
 8018078:	d001      	beq.n	801807e <cmp_lfn+0x1e>
 801807a:	2300      	movs	r3, #0
 801807c:	e059      	b.n	8018132 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	781b      	ldrb	r3, [r3, #0]
 8018082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018086:	1e5a      	subs	r2, r3, #1
 8018088:	4613      	mov	r3, r2
 801808a:	005b      	lsls	r3, r3, #1
 801808c:	4413      	add	r3, r2
 801808e:	009b      	lsls	r3, r3, #2
 8018090:	4413      	add	r3, r2
 8018092:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018094:	2301      	movs	r3, #1
 8018096:	81fb      	strh	r3, [r7, #14]
 8018098:	2300      	movs	r3, #0
 801809a:	613b      	str	r3, [r7, #16]
 801809c:	e033      	b.n	8018106 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801809e:	4a27      	ldr	r2, [pc, #156]	; (801813c <cmp_lfn+0xdc>)
 80180a0:	693b      	ldr	r3, [r7, #16]
 80180a2:	4413      	add	r3, r2
 80180a4:	781b      	ldrb	r3, [r3, #0]
 80180a6:	461a      	mov	r2, r3
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	4413      	add	r3, r2
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7fe ffe1 	bl	8017074 <ld_word>
 80180b2:	4603      	mov	r3, r0
 80180b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80180b6:	89fb      	ldrh	r3, [r7, #14]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d01a      	beq.n	80180f2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	2bfe      	cmp	r3, #254	; 0xfe
 80180c0:	d812      	bhi.n	80180e8 <cmp_lfn+0x88>
 80180c2:	89bb      	ldrh	r3, [r7, #12]
 80180c4:	4618      	mov	r0, r3
 80180c6:	f001 fe25 	bl	8019d14 <ff_wtoupper>
 80180ca:	4603      	mov	r3, r0
 80180cc:	461c      	mov	r4, r3
 80180ce:	697b      	ldr	r3, [r7, #20]
 80180d0:	1c5a      	adds	r2, r3, #1
 80180d2:	617a      	str	r2, [r7, #20]
 80180d4:	005b      	lsls	r3, r3, #1
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	4413      	add	r3, r2
 80180da:	881b      	ldrh	r3, [r3, #0]
 80180dc:	4618      	mov	r0, r3
 80180de:	f001 fe19 	bl	8019d14 <ff_wtoupper>
 80180e2:	4603      	mov	r3, r0
 80180e4:	429c      	cmp	r4, r3
 80180e6:	d001      	beq.n	80180ec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80180e8:	2300      	movs	r3, #0
 80180ea:	e022      	b.n	8018132 <cmp_lfn+0xd2>
			}
			wc = uc;
 80180ec:	89bb      	ldrh	r3, [r7, #12]
 80180ee:	81fb      	strh	r3, [r7, #14]
 80180f0:	e006      	b.n	8018100 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80180f2:	89bb      	ldrh	r3, [r7, #12]
 80180f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180f8:	4293      	cmp	r3, r2
 80180fa:	d001      	beq.n	8018100 <cmp_lfn+0xa0>
 80180fc:	2300      	movs	r3, #0
 80180fe:	e018      	b.n	8018132 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	3301      	adds	r3, #1
 8018104:	613b      	str	r3, [r7, #16]
 8018106:	693b      	ldr	r3, [r7, #16]
 8018108:	2b0c      	cmp	r3, #12
 801810a:	d9c8      	bls.n	801809e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018114:	2b00      	cmp	r3, #0
 8018116:	d00b      	beq.n	8018130 <cmp_lfn+0xd0>
 8018118:	89fb      	ldrh	r3, [r7, #14]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d008      	beq.n	8018130 <cmp_lfn+0xd0>
 801811e:	697b      	ldr	r3, [r7, #20]
 8018120:	005b      	lsls	r3, r3, #1
 8018122:	687a      	ldr	r2, [r7, #4]
 8018124:	4413      	add	r3, r2
 8018126:	881b      	ldrh	r3, [r3, #0]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d001      	beq.n	8018130 <cmp_lfn+0xd0>
 801812c:	2300      	movs	r3, #0
 801812e:	e000      	b.n	8018132 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018130:	2301      	movs	r3, #1
}
 8018132:	4618      	mov	r0, r3
 8018134:	371c      	adds	r7, #28
 8018136:	46bd      	mov	sp, r7
 8018138:	bd90      	pop	{r4, r7, pc}
 801813a:	bf00      	nop
 801813c:	08021ba0 	.word	0x08021ba0

08018140 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b088      	sub	sp, #32
 8018144:	af00      	add	r7, sp, #0
 8018146:	60f8      	str	r0, [r7, #12]
 8018148:	60b9      	str	r1, [r7, #8]
 801814a:	4611      	mov	r1, r2
 801814c:	461a      	mov	r2, r3
 801814e:	460b      	mov	r3, r1
 8018150:	71fb      	strb	r3, [r7, #7]
 8018152:	4613      	mov	r3, r2
 8018154:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	330d      	adds	r3, #13
 801815a:	79ba      	ldrb	r2, [r7, #6]
 801815c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801815e:	68bb      	ldr	r3, [r7, #8]
 8018160:	330b      	adds	r3, #11
 8018162:	220f      	movs	r2, #15
 8018164:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8018166:	68bb      	ldr	r3, [r7, #8]
 8018168:	330c      	adds	r3, #12
 801816a:	2200      	movs	r2, #0
 801816c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	331a      	adds	r3, #26
 8018172:	2100      	movs	r1, #0
 8018174:	4618      	mov	r0, r3
 8018176:	f7fe ffb8 	bl	80170ea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801817a:	79fb      	ldrb	r3, [r7, #7]
 801817c:	1e5a      	subs	r2, r3, #1
 801817e:	4613      	mov	r3, r2
 8018180:	005b      	lsls	r3, r3, #1
 8018182:	4413      	add	r3, r2
 8018184:	009b      	lsls	r3, r3, #2
 8018186:	4413      	add	r3, r2
 8018188:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801818a:	2300      	movs	r3, #0
 801818c:	82fb      	strh	r3, [r7, #22]
 801818e:	2300      	movs	r3, #0
 8018190:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8018192:	8afb      	ldrh	r3, [r7, #22]
 8018194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018198:	4293      	cmp	r3, r2
 801819a:	d007      	beq.n	80181ac <put_lfn+0x6c>
 801819c:	69fb      	ldr	r3, [r7, #28]
 801819e:	1c5a      	adds	r2, r3, #1
 80181a0:	61fa      	str	r2, [r7, #28]
 80181a2:	005b      	lsls	r3, r3, #1
 80181a4:	68fa      	ldr	r2, [r7, #12]
 80181a6:	4413      	add	r3, r2
 80181a8:	881b      	ldrh	r3, [r3, #0]
 80181aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80181ac:	4a17      	ldr	r2, [pc, #92]	; (801820c <put_lfn+0xcc>)
 80181ae:	69bb      	ldr	r3, [r7, #24]
 80181b0:	4413      	add	r3, r2
 80181b2:	781b      	ldrb	r3, [r3, #0]
 80181b4:	461a      	mov	r2, r3
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	4413      	add	r3, r2
 80181ba:	8afa      	ldrh	r2, [r7, #22]
 80181bc:	4611      	mov	r1, r2
 80181be:	4618      	mov	r0, r3
 80181c0:	f7fe ff93 	bl	80170ea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80181c4:	8afb      	ldrh	r3, [r7, #22]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d102      	bne.n	80181d0 <put_lfn+0x90>
 80181ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80181d0:	69bb      	ldr	r3, [r7, #24]
 80181d2:	3301      	adds	r3, #1
 80181d4:	61bb      	str	r3, [r7, #24]
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	2b0c      	cmp	r3, #12
 80181da:	d9da      	bls.n	8018192 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80181dc:	8afb      	ldrh	r3, [r7, #22]
 80181de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80181e2:	4293      	cmp	r3, r2
 80181e4:	d006      	beq.n	80181f4 <put_lfn+0xb4>
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	005b      	lsls	r3, r3, #1
 80181ea:	68fa      	ldr	r2, [r7, #12]
 80181ec:	4413      	add	r3, r2
 80181ee:	881b      	ldrh	r3, [r3, #0]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d103      	bne.n	80181fc <put_lfn+0xbc>
 80181f4:	79fb      	ldrb	r3, [r7, #7]
 80181f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80181fc:	68bb      	ldr	r3, [r7, #8]
 80181fe:	79fa      	ldrb	r2, [r7, #7]
 8018200:	701a      	strb	r2, [r3, #0]
}
 8018202:	bf00      	nop
 8018204:	3720      	adds	r7, #32
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}
 801820a:	bf00      	nop
 801820c:	08021ba0 	.word	0x08021ba0

08018210 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018210:	b580      	push	{r7, lr}
 8018212:	b08c      	sub	sp, #48	; 0x30
 8018214:	af00      	add	r7, sp, #0
 8018216:	60f8      	str	r0, [r7, #12]
 8018218:	60b9      	str	r1, [r7, #8]
 801821a:	607a      	str	r2, [r7, #4]
 801821c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801821e:	220b      	movs	r2, #11
 8018220:	68b9      	ldr	r1, [r7, #8]
 8018222:	68f8      	ldr	r0, [r7, #12]
 8018224:	f7fe ffa8 	bl	8017178 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018228:	683b      	ldr	r3, [r7, #0]
 801822a:	2b05      	cmp	r3, #5
 801822c:	d92b      	bls.n	8018286 <gen_numname+0x76>
		sr = seq;
 801822e:	683b      	ldr	r3, [r7, #0]
 8018230:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018232:	e022      	b.n	801827a <gen_numname+0x6a>
			wc = *lfn++;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	1c9a      	adds	r2, r3, #2
 8018238:	607a      	str	r2, [r7, #4]
 801823a:	881b      	ldrh	r3, [r3, #0]
 801823c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801823e:	2300      	movs	r3, #0
 8018240:	62bb      	str	r3, [r7, #40]	; 0x28
 8018242:	e017      	b.n	8018274 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8018244:	69fb      	ldr	r3, [r7, #28]
 8018246:	005a      	lsls	r2, r3, #1
 8018248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801824a:	f003 0301 	and.w	r3, r3, #1
 801824e:	4413      	add	r3, r2
 8018250:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018254:	085b      	lsrs	r3, r3, #1
 8018256:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018258:	69fb      	ldr	r3, [r7, #28]
 801825a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801825e:	2b00      	cmp	r3, #0
 8018260:	d005      	beq.n	801826e <gen_numname+0x5e>
 8018262:	69fb      	ldr	r3, [r7, #28]
 8018264:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8018268:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 801826c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018270:	3301      	adds	r3, #1
 8018272:	62bb      	str	r3, [r7, #40]	; 0x28
 8018274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018276:	2b0f      	cmp	r3, #15
 8018278:	d9e4      	bls.n	8018244 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	881b      	ldrh	r3, [r3, #0]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d1d8      	bne.n	8018234 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8018282:	69fb      	ldr	r3, [r7, #28]
 8018284:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8018286:	2307      	movs	r3, #7
 8018288:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801828a:	683b      	ldr	r3, [r7, #0]
 801828c:	b2db      	uxtb	r3, r3
 801828e:	f003 030f 	and.w	r3, r3, #15
 8018292:	b2db      	uxtb	r3, r3
 8018294:	3330      	adds	r3, #48	; 0x30
 8018296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801829a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801829e:	2b39      	cmp	r3, #57	; 0x39
 80182a0:	d904      	bls.n	80182ac <gen_numname+0x9c>
 80182a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80182a6:	3307      	adds	r3, #7
 80182a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80182ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ae:	1e5a      	subs	r2, r3, #1
 80182b0:	62ba      	str	r2, [r7, #40]	; 0x28
 80182b2:	3330      	adds	r3, #48	; 0x30
 80182b4:	443b      	add	r3, r7
 80182b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80182ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	091b      	lsrs	r3, r3, #4
 80182c2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80182c4:	683b      	ldr	r3, [r7, #0]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d1df      	bne.n	801828a <gen_numname+0x7a>
	ns[i] = '~';
 80182ca:	f107 0214 	add.w	r2, r7, #20
 80182ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d0:	4413      	add	r3, r2
 80182d2:	227e      	movs	r2, #126	; 0x7e
 80182d4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80182d6:	2300      	movs	r3, #0
 80182d8:	627b      	str	r3, [r7, #36]	; 0x24
 80182da:	e002      	b.n	80182e2 <gen_numname+0xd2>
 80182dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182de:	3301      	adds	r3, #1
 80182e0:	627b      	str	r3, [r7, #36]	; 0x24
 80182e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80182e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d205      	bcs.n	80182f6 <gen_numname+0xe6>
 80182ea:	68fa      	ldr	r2, [r7, #12]
 80182ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ee:	4413      	add	r3, r2
 80182f0:	781b      	ldrb	r3, [r3, #0]
 80182f2:	2b20      	cmp	r3, #32
 80182f4:	d1f2      	bne.n	80182dc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80182f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f8:	2b07      	cmp	r3, #7
 80182fa:	d807      	bhi.n	801830c <gen_numname+0xfc>
 80182fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182fe:	1c5a      	adds	r2, r3, #1
 8018300:	62ba      	str	r2, [r7, #40]	; 0x28
 8018302:	3330      	adds	r3, #48	; 0x30
 8018304:	443b      	add	r3, r7
 8018306:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801830a:	e000      	b.n	801830e <gen_numname+0xfe>
 801830c:	2120      	movs	r1, #32
 801830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018310:	1c5a      	adds	r2, r3, #1
 8018312:	627a      	str	r2, [r7, #36]	; 0x24
 8018314:	68fa      	ldr	r2, [r7, #12]
 8018316:	4413      	add	r3, r2
 8018318:	460a      	mov	r2, r1
 801831a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801831e:	2b07      	cmp	r3, #7
 8018320:	d9e9      	bls.n	80182f6 <gen_numname+0xe6>
}
 8018322:	bf00      	nop
 8018324:	bf00      	nop
 8018326:	3730      	adds	r7, #48	; 0x30
 8018328:	46bd      	mov	sp, r7
 801832a:	bd80      	pop	{r7, pc}

0801832c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801832c:	b480      	push	{r7}
 801832e:	b085      	sub	sp, #20
 8018330:	af00      	add	r7, sp, #0
 8018332:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018334:	2300      	movs	r3, #0
 8018336:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018338:	230b      	movs	r3, #11
 801833a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801833c:	7bfb      	ldrb	r3, [r7, #15]
 801833e:	b2da      	uxtb	r2, r3
 8018340:	0852      	lsrs	r2, r2, #1
 8018342:	01db      	lsls	r3, r3, #7
 8018344:	4313      	orrs	r3, r2
 8018346:	b2da      	uxtb	r2, r3
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	1c59      	adds	r1, r3, #1
 801834c:	6079      	str	r1, [r7, #4]
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	4413      	add	r3, r2
 8018352:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	3b01      	subs	r3, #1
 8018358:	60bb      	str	r3, [r7, #8]
 801835a:	68bb      	ldr	r3, [r7, #8]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d1ed      	bne.n	801833c <sum_sfn+0x10>
	return sum;
 8018360:	7bfb      	ldrb	r3, [r7, #15]
}
 8018362:	4618      	mov	r0, r3
 8018364:	3714      	adds	r7, #20
 8018366:	46bd      	mov	sp, r7
 8018368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801836c:	4770      	bx	lr

0801836e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801836e:	b580      	push	{r7, lr}
 8018370:	b086      	sub	sp, #24
 8018372:	af00      	add	r7, sp, #0
 8018374:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801837c:	2100      	movs	r1, #0
 801837e:	6878      	ldr	r0, [r7, #4]
 8018380:	f7ff fca8 	bl	8017cd4 <dir_sdi>
 8018384:	4603      	mov	r3, r0
 8018386:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8018388:	7dfb      	ldrb	r3, [r7, #23]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d001      	beq.n	8018392 <dir_find+0x24>
 801838e:	7dfb      	ldrb	r3, [r7, #23]
 8018390:	e0a9      	b.n	80184e6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018392:	23ff      	movs	r3, #255	; 0xff
 8018394:	753b      	strb	r3, [r7, #20]
 8018396:	7d3b      	ldrb	r3, [r7, #20]
 8018398:	757b      	strb	r3, [r7, #21]
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	f04f 32ff 	mov.w	r2, #4294967295
 80183a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	69db      	ldr	r3, [r3, #28]
 80183a6:	4619      	mov	r1, r3
 80183a8:	6938      	ldr	r0, [r7, #16]
 80183aa:	f7ff f913 	bl	80175d4 <move_window>
 80183ae:	4603      	mov	r3, r0
 80183b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80183b2:	7dfb      	ldrb	r3, [r7, #23]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	f040 8090 	bne.w	80184da <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6a1b      	ldr	r3, [r3, #32]
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80183c2:	7dbb      	ldrb	r3, [r7, #22]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d102      	bne.n	80183ce <dir_find+0x60>
 80183c8:	2304      	movs	r3, #4
 80183ca:	75fb      	strb	r3, [r7, #23]
 80183cc:	e08a      	b.n	80184e4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6a1b      	ldr	r3, [r3, #32]
 80183d2:	330b      	adds	r3, #11
 80183d4:	781b      	ldrb	r3, [r3, #0]
 80183d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80183da:	73fb      	strb	r3, [r7, #15]
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	7bfa      	ldrb	r2, [r7, #15]
 80183e0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80183e2:	7dbb      	ldrb	r3, [r7, #22]
 80183e4:	2be5      	cmp	r3, #229	; 0xe5
 80183e6:	d007      	beq.n	80183f8 <dir_find+0x8a>
 80183e8:	7bfb      	ldrb	r3, [r7, #15]
 80183ea:	f003 0308 	and.w	r3, r3, #8
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d009      	beq.n	8018406 <dir_find+0x98>
 80183f2:	7bfb      	ldrb	r3, [r7, #15]
 80183f4:	2b0f      	cmp	r3, #15
 80183f6:	d006      	beq.n	8018406 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80183f8:	23ff      	movs	r3, #255	; 0xff
 80183fa:	757b      	strb	r3, [r7, #21]
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	f04f 32ff 	mov.w	r2, #4294967295
 8018402:	631a      	str	r2, [r3, #48]	; 0x30
 8018404:	e05e      	b.n	80184c4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018406:	7bfb      	ldrb	r3, [r7, #15]
 8018408:	2b0f      	cmp	r3, #15
 801840a:	d136      	bne.n	801847a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018416:	2b00      	cmp	r3, #0
 8018418:	d154      	bne.n	80184c4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801841a:	7dbb      	ldrb	r3, [r7, #22]
 801841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018420:	2b00      	cmp	r3, #0
 8018422:	d00d      	beq.n	8018440 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6a1b      	ldr	r3, [r3, #32]
 8018428:	7b5b      	ldrb	r3, [r3, #13]
 801842a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801842c:	7dbb      	ldrb	r3, [r7, #22]
 801842e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018432:	75bb      	strb	r3, [r7, #22]
 8018434:	7dbb      	ldrb	r3, [r7, #22]
 8018436:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	695a      	ldr	r2, [r3, #20]
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018440:	7dba      	ldrb	r2, [r7, #22]
 8018442:	7d7b      	ldrb	r3, [r7, #21]
 8018444:	429a      	cmp	r2, r3
 8018446:	d115      	bne.n	8018474 <dir_find+0x106>
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	6a1b      	ldr	r3, [r3, #32]
 801844c:	330d      	adds	r3, #13
 801844e:	781b      	ldrb	r3, [r3, #0]
 8018450:	7d3a      	ldrb	r2, [r7, #20]
 8018452:	429a      	cmp	r2, r3
 8018454:	d10e      	bne.n	8018474 <dir_find+0x106>
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	68da      	ldr	r2, [r3, #12]
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	6a1b      	ldr	r3, [r3, #32]
 801845e:	4619      	mov	r1, r3
 8018460:	4610      	mov	r0, r2
 8018462:	f7ff fdfd 	bl	8018060 <cmp_lfn>
 8018466:	4603      	mov	r3, r0
 8018468:	2b00      	cmp	r3, #0
 801846a:	d003      	beq.n	8018474 <dir_find+0x106>
 801846c:	7d7b      	ldrb	r3, [r7, #21]
 801846e:	3b01      	subs	r3, #1
 8018470:	b2db      	uxtb	r3, r3
 8018472:	e000      	b.n	8018476 <dir_find+0x108>
 8018474:	23ff      	movs	r3, #255	; 0xff
 8018476:	757b      	strb	r3, [r7, #21]
 8018478:	e024      	b.n	80184c4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801847a:	7d7b      	ldrb	r3, [r7, #21]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d109      	bne.n	8018494 <dir_find+0x126>
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	6a1b      	ldr	r3, [r3, #32]
 8018484:	4618      	mov	r0, r3
 8018486:	f7ff ff51 	bl	801832c <sum_sfn>
 801848a:	4603      	mov	r3, r0
 801848c:	461a      	mov	r2, r3
 801848e:	7d3b      	ldrb	r3, [r7, #20]
 8018490:	4293      	cmp	r3, r2
 8018492:	d024      	beq.n	80184de <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801849a:	f003 0301 	and.w	r3, r3, #1
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d10a      	bne.n	80184b8 <dir_find+0x14a>
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	6a18      	ldr	r0, [r3, #32]
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	3324      	adds	r3, #36	; 0x24
 80184aa:	220b      	movs	r2, #11
 80184ac:	4619      	mov	r1, r3
 80184ae:	f7fe fe9f 	bl	80171f0 <mem_cmp>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d014      	beq.n	80184e2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80184b8:	23ff      	movs	r3, #255	; 0xff
 80184ba:	757b      	strb	r3, [r7, #21]
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f04f 32ff 	mov.w	r2, #4294967295
 80184c2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80184c4:	2100      	movs	r1, #0
 80184c6:	6878      	ldr	r0, [r7, #4]
 80184c8:	f7ff fc7f 	bl	8017dca <dir_next>
 80184cc:	4603      	mov	r3, r0
 80184ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80184d0:	7dfb      	ldrb	r3, [r7, #23]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	f43f af65 	beq.w	80183a2 <dir_find+0x34>
 80184d8:	e004      	b.n	80184e4 <dir_find+0x176>
		if (res != FR_OK) break;
 80184da:	bf00      	nop
 80184dc:	e002      	b.n	80184e4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80184de:	bf00      	nop
 80184e0:	e000      	b.n	80184e4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80184e2:	bf00      	nop

	return res;
 80184e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80184e6:	4618      	mov	r0, r3
 80184e8:	3718      	adds	r7, #24
 80184ea:	46bd      	mov	sp, r7
 80184ec:	bd80      	pop	{r7, pc}
	...

080184f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b08c      	sub	sp, #48	; 0x30
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018504:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018508:	2b00      	cmp	r3, #0
 801850a:	d001      	beq.n	8018510 <dir_register+0x20>
 801850c:	2306      	movs	r3, #6
 801850e:	e0e0      	b.n	80186d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018510:	2300      	movs	r3, #0
 8018512:	627b      	str	r3, [r7, #36]	; 0x24
 8018514:	e002      	b.n	801851c <dir_register+0x2c>
 8018516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018518:	3301      	adds	r3, #1
 801851a:	627b      	str	r3, [r7, #36]	; 0x24
 801851c:	69fb      	ldr	r3, [r7, #28]
 801851e:	68da      	ldr	r2, [r3, #12]
 8018520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018522:	005b      	lsls	r3, r3, #1
 8018524:	4413      	add	r3, r2
 8018526:	881b      	ldrh	r3, [r3, #0]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d1f4      	bne.n	8018516 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018532:	f107 030c 	add.w	r3, r7, #12
 8018536:	220c      	movs	r2, #12
 8018538:	4618      	mov	r0, r3
 801853a:	f7fe fe1d 	bl	8017178 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801853e:	7dfb      	ldrb	r3, [r7, #23]
 8018540:	f003 0301 	and.w	r3, r3, #1
 8018544:	2b00      	cmp	r3, #0
 8018546:	d032      	beq.n	80185ae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	2240      	movs	r2, #64	; 0x40
 801854c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018550:	2301      	movs	r3, #1
 8018552:	62bb      	str	r3, [r7, #40]	; 0x28
 8018554:	e016      	b.n	8018584 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801855c:	69fb      	ldr	r3, [r7, #28]
 801855e:	68da      	ldr	r2, [r3, #12]
 8018560:	f107 010c 	add.w	r1, r7, #12
 8018564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018566:	f7ff fe53 	bl	8018210 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801856a:	6878      	ldr	r0, [r7, #4]
 801856c:	f7ff feff 	bl	801836e <dir_find>
 8018570:	4603      	mov	r3, r0
 8018572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801857a:	2b00      	cmp	r3, #0
 801857c:	d106      	bne.n	801858c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018580:	3301      	adds	r3, #1
 8018582:	62bb      	str	r3, [r7, #40]	; 0x28
 8018584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018586:	2b63      	cmp	r3, #99	; 0x63
 8018588:	d9e5      	bls.n	8018556 <dir_register+0x66>
 801858a:	e000      	b.n	801858e <dir_register+0x9e>
			if (res != FR_OK) break;
 801858c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018590:	2b64      	cmp	r3, #100	; 0x64
 8018592:	d101      	bne.n	8018598 <dir_register+0xa8>
 8018594:	2307      	movs	r3, #7
 8018596:	e09c      	b.n	80186d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801859c:	2b04      	cmp	r3, #4
 801859e:	d002      	beq.n	80185a6 <dir_register+0xb6>
 80185a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80185a4:	e095      	b.n	80186d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80185a6:	7dfa      	ldrb	r2, [r7, #23]
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80185ae:	7dfb      	ldrb	r3, [r7, #23]
 80185b0:	f003 0302 	and.w	r3, r3, #2
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d007      	beq.n	80185c8 <dir_register+0xd8>
 80185b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ba:	330c      	adds	r3, #12
 80185bc:	4a47      	ldr	r2, [pc, #284]	; (80186dc <dir_register+0x1ec>)
 80185be:	fba2 2303 	umull	r2, r3, r2, r3
 80185c2:	089b      	lsrs	r3, r3, #2
 80185c4:	3301      	adds	r3, #1
 80185c6:	e000      	b.n	80185ca <dir_register+0xda>
 80185c8:	2301      	movs	r3, #1
 80185ca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80185cc:	6a39      	ldr	r1, [r7, #32]
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f7ff fcc0 	bl	8017f54 <dir_alloc>
 80185d4:	4603      	mov	r3, r0
 80185d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80185da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d148      	bne.n	8018674 <dir_register+0x184>
 80185e2:	6a3b      	ldr	r3, [r7, #32]
 80185e4:	3b01      	subs	r3, #1
 80185e6:	623b      	str	r3, [r7, #32]
 80185e8:	6a3b      	ldr	r3, [r7, #32]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d042      	beq.n	8018674 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	695a      	ldr	r2, [r3, #20]
 80185f2:	6a3b      	ldr	r3, [r7, #32]
 80185f4:	015b      	lsls	r3, r3, #5
 80185f6:	1ad3      	subs	r3, r2, r3
 80185f8:	4619      	mov	r1, r3
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f7ff fb6a 	bl	8017cd4 <dir_sdi>
 8018600:	4603      	mov	r3, r0
 8018602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801860a:	2b00      	cmp	r3, #0
 801860c:	d132      	bne.n	8018674 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	3324      	adds	r3, #36	; 0x24
 8018612:	4618      	mov	r0, r3
 8018614:	f7ff fe8a 	bl	801832c <sum_sfn>
 8018618:	4603      	mov	r3, r0
 801861a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	69db      	ldr	r3, [r3, #28]
 8018620:	4619      	mov	r1, r3
 8018622:	69f8      	ldr	r0, [r7, #28]
 8018624:	f7fe ffd6 	bl	80175d4 <move_window>
 8018628:	4603      	mov	r3, r0
 801862a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801862e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018632:	2b00      	cmp	r3, #0
 8018634:	d11d      	bne.n	8018672 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018636:	69fb      	ldr	r3, [r7, #28]
 8018638:	68d8      	ldr	r0, [r3, #12]
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	6a19      	ldr	r1, [r3, #32]
 801863e:	6a3b      	ldr	r3, [r7, #32]
 8018640:	b2da      	uxtb	r2, r3
 8018642:	7efb      	ldrb	r3, [r7, #27]
 8018644:	f7ff fd7c 	bl	8018140 <put_lfn>
				fs->wflag = 1;
 8018648:	69fb      	ldr	r3, [r7, #28]
 801864a:	2201      	movs	r2, #1
 801864c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801864e:	2100      	movs	r1, #0
 8018650:	6878      	ldr	r0, [r7, #4]
 8018652:	f7ff fbba 	bl	8017dca <dir_next>
 8018656:	4603      	mov	r3, r0
 8018658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801865c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018660:	2b00      	cmp	r3, #0
 8018662:	d107      	bne.n	8018674 <dir_register+0x184>
 8018664:	6a3b      	ldr	r3, [r7, #32]
 8018666:	3b01      	subs	r3, #1
 8018668:	623b      	str	r3, [r7, #32]
 801866a:	6a3b      	ldr	r3, [r7, #32]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d1d5      	bne.n	801861c <dir_register+0x12c>
 8018670:	e000      	b.n	8018674 <dir_register+0x184>
				if (res != FR_OK) break;
 8018672:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018678:	2b00      	cmp	r3, #0
 801867a:	d128      	bne.n	80186ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	69db      	ldr	r3, [r3, #28]
 8018680:	4619      	mov	r1, r3
 8018682:	69f8      	ldr	r0, [r7, #28]
 8018684:	f7fe ffa6 	bl	80175d4 <move_window>
 8018688:	4603      	mov	r3, r0
 801868a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801868e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018692:	2b00      	cmp	r3, #0
 8018694:	d11b      	bne.n	80186ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	6a1b      	ldr	r3, [r3, #32]
 801869a:	2220      	movs	r2, #32
 801869c:	2100      	movs	r1, #0
 801869e:	4618      	mov	r0, r3
 80186a0:	f7fe fd8b 	bl	80171ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	6a18      	ldr	r0, [r3, #32]
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	3324      	adds	r3, #36	; 0x24
 80186ac:	220b      	movs	r2, #11
 80186ae:	4619      	mov	r1, r3
 80186b0:	f7fe fd62 	bl	8017178 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	6a1b      	ldr	r3, [r3, #32]
 80186be:	330c      	adds	r3, #12
 80186c0:	f002 0218 	and.w	r2, r2, #24
 80186c4:	b2d2      	uxtb	r2, r2
 80186c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80186c8:	69fb      	ldr	r3, [r7, #28]
 80186ca:	2201      	movs	r2, #1
 80186cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80186ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80186d2:	4618      	mov	r0, r3
 80186d4:	3730      	adds	r7, #48	; 0x30
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bd80      	pop	{r7, pc}
 80186da:	bf00      	nop
 80186dc:	4ec4ec4f 	.word	0x4ec4ec4f

080186e0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b088      	sub	sp, #32
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
 80186e8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80186f0:	683b      	ldr	r3, [r7, #0]
 80186f2:	2200      	movs	r2, #0
 80186f4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	69db      	ldr	r3, [r3, #28]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	f000 80c9 	beq.w	8018892 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018708:	d032      	beq.n	8018770 <get_fileinfo+0x90>
			i = j = 0;
 801870a:	2300      	movs	r3, #0
 801870c:	61bb      	str	r3, [r7, #24]
 801870e:	69bb      	ldr	r3, [r7, #24]
 8018710:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018712:	e01b      	b.n	801874c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8018714:	89fb      	ldrh	r3, [r7, #14]
 8018716:	2100      	movs	r1, #0
 8018718:	4618      	mov	r0, r3
 801871a:	f001 fabf 	bl	8019c9c <ff_convert>
 801871e:	4603      	mov	r3, r0
 8018720:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8018722:	89fb      	ldrh	r3, [r7, #14]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d102      	bne.n	801872e <get_fileinfo+0x4e>
 8018728:	2300      	movs	r3, #0
 801872a:	61fb      	str	r3, [r7, #28]
 801872c:	e01a      	b.n	8018764 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801872e:	69fb      	ldr	r3, [r7, #28]
 8018730:	2bfe      	cmp	r3, #254	; 0xfe
 8018732:	d902      	bls.n	801873a <get_fileinfo+0x5a>
 8018734:	2300      	movs	r3, #0
 8018736:	61fb      	str	r3, [r7, #28]
 8018738:	e014      	b.n	8018764 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	1c5a      	adds	r2, r3, #1
 801873e:	61fa      	str	r2, [r7, #28]
 8018740:	89fa      	ldrh	r2, [r7, #14]
 8018742:	b2d1      	uxtb	r1, r2
 8018744:	683a      	ldr	r2, [r7, #0]
 8018746:	4413      	add	r3, r2
 8018748:	460a      	mov	r2, r1
 801874a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801874c:	693b      	ldr	r3, [r7, #16]
 801874e:	68da      	ldr	r2, [r3, #12]
 8018750:	69bb      	ldr	r3, [r7, #24]
 8018752:	1c59      	adds	r1, r3, #1
 8018754:	61b9      	str	r1, [r7, #24]
 8018756:	005b      	lsls	r3, r3, #1
 8018758:	4413      	add	r3, r2
 801875a:	881b      	ldrh	r3, [r3, #0]
 801875c:	81fb      	strh	r3, [r7, #14]
 801875e:	89fb      	ldrh	r3, [r7, #14]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d1d7      	bne.n	8018714 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8018764:	683a      	ldr	r2, [r7, #0]
 8018766:	69fb      	ldr	r3, [r7, #28]
 8018768:	4413      	add	r3, r2
 801876a:	3316      	adds	r3, #22
 801876c:	2200      	movs	r2, #0
 801876e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8018770:	2300      	movs	r3, #0
 8018772:	61bb      	str	r3, [r7, #24]
 8018774:	69bb      	ldr	r3, [r7, #24]
 8018776:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8018778:	683a      	ldr	r2, [r7, #0]
 801877a:	69fb      	ldr	r3, [r7, #28]
 801877c:	4413      	add	r3, r2
 801877e:	3316      	adds	r3, #22
 8018780:	781b      	ldrb	r3, [r3, #0]
 8018782:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8018784:	e04c      	b.n	8018820 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	6a1a      	ldr	r2, [r3, #32]
 801878a:	69fb      	ldr	r3, [r7, #28]
 801878c:	1c59      	adds	r1, r3, #1
 801878e:	61f9      	str	r1, [r7, #28]
 8018790:	4413      	add	r3, r2
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8018796:	7dfb      	ldrb	r3, [r7, #23]
 8018798:	2b20      	cmp	r3, #32
 801879a:	d100      	bne.n	801879e <get_fileinfo+0xbe>
 801879c:	e040      	b.n	8018820 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801879e:	7dfb      	ldrb	r3, [r7, #23]
 80187a0:	2b05      	cmp	r3, #5
 80187a2:	d101      	bne.n	80187a8 <get_fileinfo+0xc8>
 80187a4:	23e5      	movs	r3, #229	; 0xe5
 80187a6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80187a8:	69fb      	ldr	r3, [r7, #28]
 80187aa:	2b09      	cmp	r3, #9
 80187ac:	d10f      	bne.n	80187ce <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80187ae:	89bb      	ldrh	r3, [r7, #12]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d105      	bne.n	80187c0 <get_fileinfo+0xe0>
 80187b4:	683a      	ldr	r2, [r7, #0]
 80187b6:	69bb      	ldr	r3, [r7, #24]
 80187b8:	4413      	add	r3, r2
 80187ba:	3316      	adds	r3, #22
 80187bc:	222e      	movs	r2, #46	; 0x2e
 80187be:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80187c0:	69bb      	ldr	r3, [r7, #24]
 80187c2:	1c5a      	adds	r2, r3, #1
 80187c4:	61ba      	str	r2, [r7, #24]
 80187c6:	683a      	ldr	r2, [r7, #0]
 80187c8:	4413      	add	r3, r2
 80187ca:	222e      	movs	r2, #46	; 0x2e
 80187cc:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80187ce:	683a      	ldr	r2, [r7, #0]
 80187d0:	69bb      	ldr	r3, [r7, #24]
 80187d2:	4413      	add	r3, r2
 80187d4:	3309      	adds	r3, #9
 80187d6:	7dfa      	ldrb	r2, [r7, #23]
 80187d8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80187da:	89bb      	ldrh	r3, [r7, #12]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d11c      	bne.n	801881a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80187e0:	7dfb      	ldrb	r3, [r7, #23]
 80187e2:	2b40      	cmp	r3, #64	; 0x40
 80187e4:	d913      	bls.n	801880e <get_fileinfo+0x12e>
 80187e6:	7dfb      	ldrb	r3, [r7, #23]
 80187e8:	2b5a      	cmp	r3, #90	; 0x5a
 80187ea:	d810      	bhi.n	801880e <get_fileinfo+0x12e>
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6a1b      	ldr	r3, [r3, #32]
 80187f0:	330c      	adds	r3, #12
 80187f2:	781b      	ldrb	r3, [r3, #0]
 80187f4:	461a      	mov	r2, r3
 80187f6:	69fb      	ldr	r3, [r7, #28]
 80187f8:	2b08      	cmp	r3, #8
 80187fa:	d901      	bls.n	8018800 <get_fileinfo+0x120>
 80187fc:	2310      	movs	r3, #16
 80187fe:	e000      	b.n	8018802 <get_fileinfo+0x122>
 8018800:	2308      	movs	r3, #8
 8018802:	4013      	ands	r3, r2
 8018804:	2b00      	cmp	r3, #0
 8018806:	d002      	beq.n	801880e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8018808:	7dfb      	ldrb	r3, [r7, #23]
 801880a:	3320      	adds	r3, #32
 801880c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801880e:	683a      	ldr	r2, [r7, #0]
 8018810:	69bb      	ldr	r3, [r7, #24]
 8018812:	4413      	add	r3, r2
 8018814:	3316      	adds	r3, #22
 8018816:	7dfa      	ldrb	r2, [r7, #23]
 8018818:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801881a:	69bb      	ldr	r3, [r7, #24]
 801881c:	3301      	adds	r3, #1
 801881e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	2b0a      	cmp	r3, #10
 8018824:	d9af      	bls.n	8018786 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8018826:	89bb      	ldrh	r3, [r7, #12]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d10d      	bne.n	8018848 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801882c:	683a      	ldr	r2, [r7, #0]
 801882e:	69bb      	ldr	r3, [r7, #24]
 8018830:	4413      	add	r3, r2
 8018832:	3316      	adds	r3, #22
 8018834:	2200      	movs	r2, #0
 8018836:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6a1b      	ldr	r3, [r3, #32]
 801883c:	330c      	adds	r3, #12
 801883e:	781b      	ldrb	r3, [r3, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d101      	bne.n	8018848 <get_fileinfo+0x168>
 8018844:	2300      	movs	r3, #0
 8018846:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8018848:	683a      	ldr	r2, [r7, #0]
 801884a:	69bb      	ldr	r3, [r7, #24]
 801884c:	4413      	add	r3, r2
 801884e:	3309      	adds	r3, #9
 8018850:	2200      	movs	r2, #0
 8018852:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	6a1b      	ldr	r3, [r3, #32]
 8018858:	7ada      	ldrb	r2, [r3, #11]
 801885a:	683b      	ldr	r3, [r7, #0]
 801885c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	6a1b      	ldr	r3, [r3, #32]
 8018862:	331c      	adds	r3, #28
 8018864:	4618      	mov	r0, r3
 8018866:	f7fe fc1d 	bl	80170a4 <ld_dword>
 801886a:	4602      	mov	r2, r0
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	6a1b      	ldr	r3, [r3, #32]
 8018874:	3316      	adds	r3, #22
 8018876:	4618      	mov	r0, r3
 8018878:	f7fe fc14 	bl	80170a4 <ld_dword>
 801887c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	b29a      	uxth	r2, r3
 8018882:	683b      	ldr	r3, [r7, #0]
 8018884:	80da      	strh	r2, [r3, #6]
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	0c1b      	lsrs	r3, r3, #16
 801888a:	b29a      	uxth	r2, r3
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	809a      	strh	r2, [r3, #4]
 8018890:	e000      	b.n	8018894 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018892:	bf00      	nop
}
 8018894:	3720      	adds	r7, #32
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}
	...

0801889c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801889c:	b580      	push	{r7, lr}
 801889e:	b08a      	sub	sp, #40	; 0x28
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	6078      	str	r0, [r7, #4]
 80188a4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80188a6:	683b      	ldr	r3, [r7, #0]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	613b      	str	r3, [r7, #16]
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	68db      	ldr	r3, [r3, #12]
 80188b2:	60fb      	str	r3, [r7, #12]
 80188b4:	2300      	movs	r3, #0
 80188b6:	617b      	str	r3, [r7, #20]
 80188b8:	697b      	ldr	r3, [r7, #20]
 80188ba:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80188bc:	69bb      	ldr	r3, [r7, #24]
 80188be:	1c5a      	adds	r2, r3, #1
 80188c0:	61ba      	str	r2, [r7, #24]
 80188c2:	693a      	ldr	r2, [r7, #16]
 80188c4:	4413      	add	r3, r2
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80188ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188cc:	2b1f      	cmp	r3, #31
 80188ce:	d940      	bls.n	8018952 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80188d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188d2:	2b2f      	cmp	r3, #47	; 0x2f
 80188d4:	d006      	beq.n	80188e4 <create_name+0x48>
 80188d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188d8:	2b5c      	cmp	r3, #92	; 0x5c
 80188da:	d110      	bne.n	80188fe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80188dc:	e002      	b.n	80188e4 <create_name+0x48>
 80188de:	69bb      	ldr	r3, [r7, #24]
 80188e0:	3301      	adds	r3, #1
 80188e2:	61bb      	str	r3, [r7, #24]
 80188e4:	693a      	ldr	r2, [r7, #16]
 80188e6:	69bb      	ldr	r3, [r7, #24]
 80188e8:	4413      	add	r3, r2
 80188ea:	781b      	ldrb	r3, [r3, #0]
 80188ec:	2b2f      	cmp	r3, #47	; 0x2f
 80188ee:	d0f6      	beq.n	80188de <create_name+0x42>
 80188f0:	693a      	ldr	r2, [r7, #16]
 80188f2:	69bb      	ldr	r3, [r7, #24]
 80188f4:	4413      	add	r3, r2
 80188f6:	781b      	ldrb	r3, [r3, #0]
 80188f8:	2b5c      	cmp	r3, #92	; 0x5c
 80188fa:	d0f0      	beq.n	80188de <create_name+0x42>
			break;
 80188fc:	e02a      	b.n	8018954 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80188fe:	697b      	ldr	r3, [r7, #20]
 8018900:	2bfe      	cmp	r3, #254	; 0xfe
 8018902:	d901      	bls.n	8018908 <create_name+0x6c>
 8018904:	2306      	movs	r3, #6
 8018906:	e17d      	b.n	8018c04 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801890a:	b2db      	uxtb	r3, r3
 801890c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801890e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018910:	2101      	movs	r1, #1
 8018912:	4618      	mov	r0, r3
 8018914:	f001 f9c2 	bl	8019c9c <ff_convert>
 8018918:	4603      	mov	r3, r0
 801891a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801891c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801891e:	2b00      	cmp	r3, #0
 8018920:	d101      	bne.n	8018926 <create_name+0x8a>
 8018922:	2306      	movs	r3, #6
 8018924:	e16e      	b.n	8018c04 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018928:	2b7f      	cmp	r3, #127	; 0x7f
 801892a:	d809      	bhi.n	8018940 <create_name+0xa4>
 801892c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801892e:	4619      	mov	r1, r3
 8018930:	488d      	ldr	r0, [pc, #564]	; (8018b68 <create_name+0x2cc>)
 8018932:	f7fe fc84 	bl	801723e <chk_chr>
 8018936:	4603      	mov	r3, r0
 8018938:	2b00      	cmp	r3, #0
 801893a:	d001      	beq.n	8018940 <create_name+0xa4>
 801893c:	2306      	movs	r3, #6
 801893e:	e161      	b.n	8018c04 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	1c5a      	adds	r2, r3, #1
 8018944:	617a      	str	r2, [r7, #20]
 8018946:	005b      	lsls	r3, r3, #1
 8018948:	68fa      	ldr	r2, [r7, #12]
 801894a:	4413      	add	r3, r2
 801894c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801894e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018950:	e7b4      	b.n	80188bc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018952:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018954:	693a      	ldr	r2, [r7, #16]
 8018956:	69bb      	ldr	r3, [r7, #24]
 8018958:	441a      	add	r2, r3
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801895e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018960:	2b1f      	cmp	r3, #31
 8018962:	d801      	bhi.n	8018968 <create_name+0xcc>
 8018964:	2304      	movs	r3, #4
 8018966:	e000      	b.n	801896a <create_name+0xce>
 8018968:	2300      	movs	r3, #0
 801896a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801896e:	e011      	b.n	8018994 <create_name+0xf8>
		w = lfn[di - 1];
 8018970:	697b      	ldr	r3, [r7, #20]
 8018972:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018976:	3b01      	subs	r3, #1
 8018978:	005b      	lsls	r3, r3, #1
 801897a:	68fa      	ldr	r2, [r7, #12]
 801897c:	4413      	add	r3, r2
 801897e:	881b      	ldrh	r3, [r3, #0]
 8018980:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018984:	2b20      	cmp	r3, #32
 8018986:	d002      	beq.n	801898e <create_name+0xf2>
 8018988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801898a:	2b2e      	cmp	r3, #46	; 0x2e
 801898c:	d106      	bne.n	801899c <create_name+0x100>
		di--;
 801898e:	697b      	ldr	r3, [r7, #20]
 8018990:	3b01      	subs	r3, #1
 8018992:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018994:	697b      	ldr	r3, [r7, #20]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d1ea      	bne.n	8018970 <create_name+0xd4>
 801899a:	e000      	b.n	801899e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801899c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801899e:	697b      	ldr	r3, [r7, #20]
 80189a0:	005b      	lsls	r3, r3, #1
 80189a2:	68fa      	ldr	r2, [r7, #12]
 80189a4:	4413      	add	r3, r2
 80189a6:	2200      	movs	r2, #0
 80189a8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80189aa:	697b      	ldr	r3, [r7, #20]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d101      	bne.n	80189b4 <create_name+0x118>
 80189b0:	2306      	movs	r3, #6
 80189b2:	e127      	b.n	8018c04 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	3324      	adds	r3, #36	; 0x24
 80189b8:	220b      	movs	r2, #11
 80189ba:	2120      	movs	r1, #32
 80189bc:	4618      	mov	r0, r3
 80189be:	f7fe fbfc 	bl	80171ba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80189c2:	2300      	movs	r3, #0
 80189c4:	61bb      	str	r3, [r7, #24]
 80189c6:	e002      	b.n	80189ce <create_name+0x132>
 80189c8:	69bb      	ldr	r3, [r7, #24]
 80189ca:	3301      	adds	r3, #1
 80189cc:	61bb      	str	r3, [r7, #24]
 80189ce:	69bb      	ldr	r3, [r7, #24]
 80189d0:	005b      	lsls	r3, r3, #1
 80189d2:	68fa      	ldr	r2, [r7, #12]
 80189d4:	4413      	add	r3, r2
 80189d6:	881b      	ldrh	r3, [r3, #0]
 80189d8:	2b20      	cmp	r3, #32
 80189da:	d0f5      	beq.n	80189c8 <create_name+0x12c>
 80189dc:	69bb      	ldr	r3, [r7, #24]
 80189de:	005b      	lsls	r3, r3, #1
 80189e0:	68fa      	ldr	r2, [r7, #12]
 80189e2:	4413      	add	r3, r2
 80189e4:	881b      	ldrh	r3, [r3, #0]
 80189e6:	2b2e      	cmp	r3, #46	; 0x2e
 80189e8:	d0ee      	beq.n	80189c8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80189ea:	69bb      	ldr	r3, [r7, #24]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d009      	beq.n	8018a04 <create_name+0x168>
 80189f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189f4:	f043 0303 	orr.w	r3, r3, #3
 80189f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80189fc:	e002      	b.n	8018a04 <create_name+0x168>
 80189fe:	697b      	ldr	r3, [r7, #20]
 8018a00:	3b01      	subs	r3, #1
 8018a02:	617b      	str	r3, [r7, #20]
 8018a04:	697b      	ldr	r3, [r7, #20]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d009      	beq.n	8018a1e <create_name+0x182>
 8018a0a:	697b      	ldr	r3, [r7, #20]
 8018a0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018a10:	3b01      	subs	r3, #1
 8018a12:	005b      	lsls	r3, r3, #1
 8018a14:	68fa      	ldr	r2, [r7, #12]
 8018a16:	4413      	add	r3, r2
 8018a18:	881b      	ldrh	r3, [r3, #0]
 8018a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8018a1c:	d1ef      	bne.n	80189fe <create_name+0x162>

	i = b = 0; ni = 8;
 8018a1e:	2300      	movs	r3, #0
 8018a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018a24:	2300      	movs	r3, #0
 8018a26:	623b      	str	r3, [r7, #32]
 8018a28:	2308      	movs	r3, #8
 8018a2a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018a2c:	69bb      	ldr	r3, [r7, #24]
 8018a2e:	1c5a      	adds	r2, r3, #1
 8018a30:	61ba      	str	r2, [r7, #24]
 8018a32:	005b      	lsls	r3, r3, #1
 8018a34:	68fa      	ldr	r2, [r7, #12]
 8018a36:	4413      	add	r3, r2
 8018a38:	881b      	ldrh	r3, [r3, #0]
 8018a3a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	f000 8090 	beq.w	8018b64 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018a44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a46:	2b20      	cmp	r3, #32
 8018a48:	d006      	beq.n	8018a58 <create_name+0x1bc>
 8018a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8018a4e:	d10a      	bne.n	8018a66 <create_name+0x1ca>
 8018a50:	69ba      	ldr	r2, [r7, #24]
 8018a52:	697b      	ldr	r3, [r7, #20]
 8018a54:	429a      	cmp	r2, r3
 8018a56:	d006      	beq.n	8018a66 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a5c:	f043 0303 	orr.w	r3, r3, #3
 8018a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a64:	e07d      	b.n	8018b62 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018a66:	6a3a      	ldr	r2, [r7, #32]
 8018a68:	69fb      	ldr	r3, [r7, #28]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d203      	bcs.n	8018a76 <create_name+0x1da>
 8018a6e:	69ba      	ldr	r2, [r7, #24]
 8018a70:	697b      	ldr	r3, [r7, #20]
 8018a72:	429a      	cmp	r2, r3
 8018a74:	d123      	bne.n	8018abe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	2b0b      	cmp	r3, #11
 8018a7a:	d106      	bne.n	8018a8a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a80:	f043 0303 	orr.w	r3, r3, #3
 8018a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018a88:	e075      	b.n	8018b76 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018a8a:	69ba      	ldr	r2, [r7, #24]
 8018a8c:	697b      	ldr	r3, [r7, #20]
 8018a8e:	429a      	cmp	r2, r3
 8018a90:	d005      	beq.n	8018a9e <create_name+0x202>
 8018a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a96:	f043 0303 	orr.w	r3, r3, #3
 8018a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018a9e:	69ba      	ldr	r2, [r7, #24]
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	d866      	bhi.n	8018b74 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018aa6:	697b      	ldr	r3, [r7, #20]
 8018aa8:	61bb      	str	r3, [r7, #24]
 8018aaa:	2308      	movs	r3, #8
 8018aac:	623b      	str	r3, [r7, #32]
 8018aae:	230b      	movs	r3, #11
 8018ab0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ab6:	009b      	lsls	r3, r3, #2
 8018ab8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018abc:	e051      	b.n	8018b62 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018abe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8018ac2:	d914      	bls.n	8018aee <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ac6:	2100      	movs	r1, #0
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f001 f8e7 	bl	8019c9c <ff_convert>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d004      	beq.n	8018ae2 <create_name+0x246>
 8018ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ada:	3b80      	subs	r3, #128	; 0x80
 8018adc:	4a23      	ldr	r2, [pc, #140]	; (8018b6c <create_name+0x2d0>)
 8018ade:	5cd3      	ldrb	r3, [r2, r3]
 8018ae0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ae6:	f043 0302 	orr.w	r3, r3, #2
 8018aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d007      	beq.n	8018b04 <create_name+0x268>
 8018af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018af6:	4619      	mov	r1, r3
 8018af8:	481d      	ldr	r0, [pc, #116]	; (8018b70 <create_name+0x2d4>)
 8018afa:	f7fe fba0 	bl	801723e <chk_chr>
 8018afe:	4603      	mov	r3, r0
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d008      	beq.n	8018b16 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018b04:	235f      	movs	r3, #95	; 0x5f
 8018b06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b0c:	f043 0303 	orr.w	r3, r3, #3
 8018b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018b14:	e01b      	b.n	8018b4e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b18:	2b40      	cmp	r3, #64	; 0x40
 8018b1a:	d909      	bls.n	8018b30 <create_name+0x294>
 8018b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b1e:	2b5a      	cmp	r3, #90	; 0x5a
 8018b20:	d806      	bhi.n	8018b30 <create_name+0x294>
					b |= 2;
 8018b22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b26:	f043 0302 	orr.w	r3, r3, #2
 8018b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018b2e:	e00e      	b.n	8018b4e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b32:	2b60      	cmp	r3, #96	; 0x60
 8018b34:	d90b      	bls.n	8018b4e <create_name+0x2b2>
 8018b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b38:	2b7a      	cmp	r3, #122	; 0x7a
 8018b3a:	d808      	bhi.n	8018b4e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b40:	f043 0301 	orr.w	r3, r3, #1
 8018b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b4a:	3b20      	subs	r3, #32
 8018b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018b4e:	6a3b      	ldr	r3, [r7, #32]
 8018b50:	1c5a      	adds	r2, r3, #1
 8018b52:	623a      	str	r2, [r7, #32]
 8018b54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018b56:	b2d1      	uxtb	r1, r2
 8018b58:	687a      	ldr	r2, [r7, #4]
 8018b5a:	4413      	add	r3, r2
 8018b5c:	460a      	mov	r2, r1
 8018b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018b62:	e763      	b.n	8018a2c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018b64:	bf00      	nop
 8018b66:	e006      	b.n	8018b76 <create_name+0x2da>
 8018b68:	080212d4 	.word	0x080212d4
 8018b6c:	08021b20 	.word	0x08021b20
 8018b70:	080212e0 	.word	0x080212e0
			if (si > di) break;			/* No extension */
 8018b74:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018b7c:	2be5      	cmp	r3, #229	; 0xe5
 8018b7e:	d103      	bne.n	8018b88 <create_name+0x2ec>
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2205      	movs	r2, #5
 8018b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018b88:	69fb      	ldr	r3, [r7, #28]
 8018b8a:	2b08      	cmp	r3, #8
 8018b8c:	d104      	bne.n	8018b98 <create_name+0x2fc>
 8018b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018b98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b9c:	f003 030c 	and.w	r3, r3, #12
 8018ba0:	2b0c      	cmp	r3, #12
 8018ba2:	d005      	beq.n	8018bb0 <create_name+0x314>
 8018ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ba8:	f003 0303 	and.w	r3, r3, #3
 8018bac:	2b03      	cmp	r3, #3
 8018bae:	d105      	bne.n	8018bbc <create_name+0x320>
 8018bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bb4:	f043 0302 	orr.w	r3, r3, #2
 8018bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bc0:	f003 0302 	and.w	r3, r3, #2
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d117      	bne.n	8018bf8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8018bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018bcc:	f003 0303 	and.w	r3, r3, #3
 8018bd0:	2b01      	cmp	r3, #1
 8018bd2:	d105      	bne.n	8018be0 <create_name+0x344>
 8018bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bd8:	f043 0310 	orr.w	r3, r3, #16
 8018bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018be0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018be4:	f003 030c 	and.w	r3, r3, #12
 8018be8:	2b04      	cmp	r3, #4
 8018bea:	d105      	bne.n	8018bf8 <create_name+0x35c>
 8018bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bf0:	f043 0308 	orr.w	r3, r3, #8
 8018bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018bfe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018c02:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018c04:	4618      	mov	r0, r3
 8018c06:	3728      	adds	r7, #40	; 0x28
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd80      	pop	{r7, pc}

08018c0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b086      	sub	sp, #24
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
 8018c14:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018c1a:	693b      	ldr	r3, [r7, #16]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018c20:	e002      	b.n	8018c28 <follow_path+0x1c>
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	3301      	adds	r3, #1
 8018c26:	603b      	str	r3, [r7, #0]
 8018c28:	683b      	ldr	r3, [r7, #0]
 8018c2a:	781b      	ldrb	r3, [r3, #0]
 8018c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8018c2e:	d0f8      	beq.n	8018c22 <follow_path+0x16>
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	2b5c      	cmp	r3, #92	; 0x5c
 8018c36:	d0f4      	beq.n	8018c22 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018c38:	693b      	ldr	r3, [r7, #16]
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018c3e:	683b      	ldr	r3, [r7, #0]
 8018c40:	781b      	ldrb	r3, [r3, #0]
 8018c42:	2b1f      	cmp	r3, #31
 8018c44:	d80a      	bhi.n	8018c5c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	2280      	movs	r2, #128	; 0x80
 8018c4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018c4e:	2100      	movs	r1, #0
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f7ff f83f 	bl	8017cd4 <dir_sdi>
 8018c56:	4603      	mov	r3, r0
 8018c58:	75fb      	strb	r3, [r7, #23]
 8018c5a:	e043      	b.n	8018ce4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018c5c:	463b      	mov	r3, r7
 8018c5e:	4619      	mov	r1, r3
 8018c60:	6878      	ldr	r0, [r7, #4]
 8018c62:	f7ff fe1b 	bl	801889c <create_name>
 8018c66:	4603      	mov	r3, r0
 8018c68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8018c6a:	7dfb      	ldrb	r3, [r7, #23]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d134      	bne.n	8018cda <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8018c70:	6878      	ldr	r0, [r7, #4]
 8018c72:	f7ff fb7c 	bl	801836e <dir_find>
 8018c76:	4603      	mov	r3, r0
 8018c78:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018c80:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018c82:	7dfb      	ldrb	r3, [r7, #23]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d00a      	beq.n	8018c9e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018c88:	7dfb      	ldrb	r3, [r7, #23]
 8018c8a:	2b04      	cmp	r3, #4
 8018c8c:	d127      	bne.n	8018cde <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8018c8e:	7afb      	ldrb	r3, [r7, #11]
 8018c90:	f003 0304 	and.w	r3, r3, #4
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d122      	bne.n	8018cde <follow_path+0xd2>
 8018c98:	2305      	movs	r3, #5
 8018c9a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8018c9c:	e01f      	b.n	8018cde <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018c9e:	7afb      	ldrb	r3, [r7, #11]
 8018ca0:	f003 0304 	and.w	r3, r3, #4
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d11c      	bne.n	8018ce2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018ca8:	693b      	ldr	r3, [r7, #16]
 8018caa:	799b      	ldrb	r3, [r3, #6]
 8018cac:	f003 0310 	and.w	r3, r3, #16
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d102      	bne.n	8018cba <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018cb4:	2305      	movs	r3, #5
 8018cb6:	75fb      	strb	r3, [r7, #23]
 8018cb8:	e014      	b.n	8018ce4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	695b      	ldr	r3, [r3, #20]
 8018cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018cc8:	4413      	add	r3, r2
 8018cca:	4619      	mov	r1, r3
 8018ccc:	68f8      	ldr	r0, [r7, #12]
 8018cce:	f7ff f988 	bl	8017fe2 <ld_clust>
 8018cd2:	4602      	mov	r2, r0
 8018cd4:	693b      	ldr	r3, [r7, #16]
 8018cd6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018cd8:	e7c0      	b.n	8018c5c <follow_path+0x50>
			if (res != FR_OK) break;
 8018cda:	bf00      	nop
 8018cdc:	e002      	b.n	8018ce4 <follow_path+0xd8>
				break;
 8018cde:	bf00      	nop
 8018ce0:	e000      	b.n	8018ce4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018ce2:	bf00      	nop
			}
		}
	}

	return res;
 8018ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	3718      	adds	r7, #24
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}

08018cee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8018cee:	b480      	push	{r7}
 8018cf0:	b087      	sub	sp, #28
 8018cf2:	af00      	add	r7, sp, #0
 8018cf4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8018cfa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d031      	beq.n	8018d68 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	617b      	str	r3, [r7, #20]
 8018d0a:	e002      	b.n	8018d12 <get_ldnumber+0x24>
 8018d0c:	697b      	ldr	r3, [r7, #20]
 8018d0e:	3301      	adds	r3, #1
 8018d10:	617b      	str	r3, [r7, #20]
 8018d12:	697b      	ldr	r3, [r7, #20]
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	2b1f      	cmp	r3, #31
 8018d18:	d903      	bls.n	8018d22 <get_ldnumber+0x34>
 8018d1a:	697b      	ldr	r3, [r7, #20]
 8018d1c:	781b      	ldrb	r3, [r3, #0]
 8018d1e:	2b3a      	cmp	r3, #58	; 0x3a
 8018d20:	d1f4      	bne.n	8018d0c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018d22:	697b      	ldr	r3, [r7, #20]
 8018d24:	781b      	ldrb	r3, [r3, #0]
 8018d26:	2b3a      	cmp	r3, #58	; 0x3a
 8018d28:	d11c      	bne.n	8018d64 <get_ldnumber+0x76>
			tp = *path;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	1c5a      	adds	r2, r3, #1
 8018d34:	60fa      	str	r2, [r7, #12]
 8018d36:	781b      	ldrb	r3, [r3, #0]
 8018d38:	3b30      	subs	r3, #48	; 0x30
 8018d3a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	2b09      	cmp	r3, #9
 8018d40:	d80e      	bhi.n	8018d60 <get_ldnumber+0x72>
 8018d42:	68fa      	ldr	r2, [r7, #12]
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d10a      	bne.n	8018d60 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d107      	bne.n	8018d60 <get_ldnumber+0x72>
					vol = (int)i;
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8018d54:	697b      	ldr	r3, [r7, #20]
 8018d56:	3301      	adds	r3, #1
 8018d58:	617b      	str	r3, [r7, #20]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	697a      	ldr	r2, [r7, #20]
 8018d5e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8018d60:	693b      	ldr	r3, [r7, #16]
 8018d62:	e002      	b.n	8018d6a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8018d64:	2300      	movs	r3, #0
 8018d66:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8018d68:	693b      	ldr	r3, [r7, #16]
}
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	371c      	adds	r7, #28
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d74:	4770      	bx	lr
	...

08018d78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b082      	sub	sp, #8
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	2200      	movs	r2, #0
 8018d86:	70da      	strb	r2, [r3, #3]
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8018d8e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018d90:	6839      	ldr	r1, [r7, #0]
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f7fe fc1e 	bl	80175d4 <move_window>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d001      	beq.n	8018da2 <check_fs+0x2a>
 8018d9e:	2304      	movs	r3, #4
 8018da0:	e038      	b.n	8018e14 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	3334      	adds	r3, #52	; 0x34
 8018da6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7fe f962 	bl	8017074 <ld_word>
 8018db0:	4603      	mov	r3, r0
 8018db2:	461a      	mov	r2, r3
 8018db4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018db8:	429a      	cmp	r2, r3
 8018dba:	d001      	beq.n	8018dc0 <check_fs+0x48>
 8018dbc:	2303      	movs	r3, #3
 8018dbe:	e029      	b.n	8018e14 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018dc6:	2be9      	cmp	r3, #233	; 0xe9
 8018dc8:	d009      	beq.n	8018dde <check_fs+0x66>
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018dd0:	2beb      	cmp	r3, #235	; 0xeb
 8018dd2:	d11e      	bne.n	8018e12 <check_fs+0x9a>
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8018dda:	2b90      	cmp	r3, #144	; 0x90
 8018ddc:	d119      	bne.n	8018e12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	3334      	adds	r3, #52	; 0x34
 8018de2:	3336      	adds	r3, #54	; 0x36
 8018de4:	4618      	mov	r0, r3
 8018de6:	f7fe f95d 	bl	80170a4 <ld_dword>
 8018dea:	4603      	mov	r3, r0
 8018dec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018df0:	4a0a      	ldr	r2, [pc, #40]	; (8018e1c <check_fs+0xa4>)
 8018df2:	4293      	cmp	r3, r2
 8018df4:	d101      	bne.n	8018dfa <check_fs+0x82>
 8018df6:	2300      	movs	r3, #0
 8018df8:	e00c      	b.n	8018e14 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	3334      	adds	r3, #52	; 0x34
 8018dfe:	3352      	adds	r3, #82	; 0x52
 8018e00:	4618      	mov	r0, r3
 8018e02:	f7fe f94f 	bl	80170a4 <ld_dword>
 8018e06:	4603      	mov	r3, r0
 8018e08:	4a05      	ldr	r2, [pc, #20]	; (8018e20 <check_fs+0xa8>)
 8018e0a:	4293      	cmp	r3, r2
 8018e0c:	d101      	bne.n	8018e12 <check_fs+0x9a>
 8018e0e:	2300      	movs	r3, #0
 8018e10:	e000      	b.n	8018e14 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8018e12:	2302      	movs	r3, #2
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	3708      	adds	r7, #8
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd80      	pop	{r7, pc}
 8018e1c:	00544146 	.word	0x00544146
 8018e20:	33544146 	.word	0x33544146

08018e24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b096      	sub	sp, #88	; 0x58
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	60f8      	str	r0, [r7, #12]
 8018e2c:	60b9      	str	r1, [r7, #8]
 8018e2e:	4613      	mov	r3, r2
 8018e30:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8018e32:	68bb      	ldr	r3, [r7, #8]
 8018e34:	2200      	movs	r2, #0
 8018e36:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018e38:	68f8      	ldr	r0, [r7, #12]
 8018e3a:	f7ff ff58 	bl	8018cee <get_ldnumber>
 8018e3e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	da01      	bge.n	8018e4a <find_volume+0x26>
 8018e46:	230b      	movs	r3, #11
 8018e48:	e230      	b.n	80192ac <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8018e4a:	4aa1      	ldr	r2, [pc, #644]	; (80190d0 <find_volume+0x2ac>)
 8018e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018e52:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8018e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d101      	bne.n	8018e5e <find_volume+0x3a>
 8018e5a:	230c      	movs	r3, #12
 8018e5c:	e226      	b.n	80192ac <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8018e5e:	68bb      	ldr	r3, [r7, #8]
 8018e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018e62:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8018e64:	79fb      	ldrb	r3, [r7, #7]
 8018e66:	f023 0301 	bic.w	r3, r3, #1
 8018e6a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8018e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e6e:	781b      	ldrb	r3, [r3, #0]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d01a      	beq.n	8018eaa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8018e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e76:	785b      	ldrb	r3, [r3, #1]
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f7fe f85d 	bl	8016f38 <disk_status>
 8018e7e:	4603      	mov	r3, r0
 8018e80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018e84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018e88:	f003 0301 	and.w	r3, r3, #1
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d10c      	bne.n	8018eaa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018e90:	79fb      	ldrb	r3, [r7, #7]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d007      	beq.n	8018ea6 <find_volume+0x82>
 8018e96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018e9a:	f003 0304 	and.w	r3, r3, #4
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d001      	beq.n	8018ea6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8018ea2:	230a      	movs	r3, #10
 8018ea4:	e202      	b.n	80192ac <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	e200      	b.n	80192ac <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018eac:	2200      	movs	r2, #0
 8018eae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018eb2:	b2da      	uxtb	r2, r3
 8018eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018eb6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018eba:	785b      	ldrb	r3, [r3, #1]
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f7fe f855 	bl	8016f6c <disk_initialize>
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018ec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018ecc:	f003 0301 	and.w	r3, r3, #1
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d001      	beq.n	8018ed8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018ed4:	2303      	movs	r3, #3
 8018ed6:	e1e9      	b.n	80192ac <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018ed8:	79fb      	ldrb	r3, [r7, #7]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d007      	beq.n	8018eee <find_volume+0xca>
 8018ede:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018ee2:	f003 0304 	and.w	r3, r3, #4
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d001      	beq.n	8018eee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018eea:	230a      	movs	r3, #10
 8018eec:	e1de      	b.n	80192ac <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8018eee:	2300      	movs	r3, #0
 8018ef0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018ef2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018ef6:	f7ff ff3f 	bl	8018d78 <check_fs>
 8018efa:	4603      	mov	r3, r0
 8018efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018f00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f04:	2b02      	cmp	r3, #2
 8018f06:	d149      	bne.n	8018f9c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018f08:	2300      	movs	r3, #0
 8018f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8018f0c:	e01e      	b.n	8018f4c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8018f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8018f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f16:	011b      	lsls	r3, r3, #4
 8018f18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018f1c:	4413      	add	r3, r2
 8018f1e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f22:	3304      	adds	r3, #4
 8018f24:	781b      	ldrb	r3, [r3, #0]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d006      	beq.n	8018f38 <find_volume+0x114>
 8018f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f2c:	3308      	adds	r3, #8
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7fe f8b8 	bl	80170a4 <ld_dword>
 8018f34:	4602      	mov	r2, r0
 8018f36:	e000      	b.n	8018f3a <find_volume+0x116>
 8018f38:	2200      	movs	r2, #0
 8018f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f3c:	009b      	lsls	r3, r3, #2
 8018f3e:	3358      	adds	r3, #88	; 0x58
 8018f40:	443b      	add	r3, r7
 8018f42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f48:	3301      	adds	r3, #1
 8018f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8018f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f4e:	2b03      	cmp	r3, #3
 8018f50:	d9dd      	bls.n	8018f0e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8018f52:	2300      	movs	r3, #0
 8018f54:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8018f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d002      	beq.n	8018f62 <find_volume+0x13e>
 8018f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f5e:	3b01      	subs	r3, #1
 8018f60:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f64:	009b      	lsls	r3, r3, #2
 8018f66:	3358      	adds	r3, #88	; 0x58
 8018f68:	443b      	add	r3, r7
 8018f6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8018f6e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d005      	beq.n	8018f82 <find_volume+0x15e>
 8018f76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018f7a:	f7ff fefd 	bl	8018d78 <check_fs>
 8018f7e:	4603      	mov	r3, r0
 8018f80:	e000      	b.n	8018f84 <find_volume+0x160>
 8018f82:	2303      	movs	r3, #3
 8018f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f8c:	2b01      	cmp	r3, #1
 8018f8e:	d905      	bls.n	8018f9c <find_volume+0x178>
 8018f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f92:	3301      	adds	r3, #1
 8018f94:	643b      	str	r3, [r7, #64]	; 0x40
 8018f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f98:	2b03      	cmp	r3, #3
 8018f9a:	d9e2      	bls.n	8018f62 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018fa0:	2b04      	cmp	r3, #4
 8018fa2:	d101      	bne.n	8018fa8 <find_volume+0x184>
 8018fa4:	2301      	movs	r3, #1
 8018fa6:	e181      	b.n	80192ac <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018fac:	2b01      	cmp	r3, #1
 8018fae:	d901      	bls.n	8018fb4 <find_volume+0x190>
 8018fb0:	230d      	movs	r3, #13
 8018fb2:	e17b      	b.n	80192ac <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fb6:	3334      	adds	r3, #52	; 0x34
 8018fb8:	330b      	adds	r3, #11
 8018fba:	4618      	mov	r0, r3
 8018fbc:	f7fe f85a 	bl	8017074 <ld_word>
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018fc6:	d001      	beq.n	8018fcc <find_volume+0x1a8>
 8018fc8:	230d      	movs	r3, #13
 8018fca:	e16f      	b.n	80192ac <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fce:	3334      	adds	r3, #52	; 0x34
 8018fd0:	3316      	adds	r3, #22
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f7fe f84e 	bl	8017074 <ld_word>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d106      	bne.n	8018ff0 <find_volume+0x1cc>
 8018fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fe4:	3334      	adds	r3, #52	; 0x34
 8018fe6:	3324      	adds	r3, #36	; 0x24
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f7fe f85b 	bl	80170a4 <ld_dword>
 8018fee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018ff4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ff8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8018ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ffe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019002:	789b      	ldrb	r3, [r3, #2]
 8019004:	2b01      	cmp	r3, #1
 8019006:	d005      	beq.n	8019014 <find_volume+0x1f0>
 8019008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801900a:	789b      	ldrb	r3, [r3, #2]
 801900c:	2b02      	cmp	r3, #2
 801900e:	d001      	beq.n	8019014 <find_volume+0x1f0>
 8019010:	230d      	movs	r3, #13
 8019012:	e14b      	b.n	80192ac <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019016:	789b      	ldrb	r3, [r3, #2]
 8019018:	461a      	mov	r2, r3
 801901a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801901c:	fb02 f303 	mul.w	r3, r2, r3
 8019020:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019028:	b29a      	uxth	r2, r3
 801902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801902c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801902e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019030:	895b      	ldrh	r3, [r3, #10]
 8019032:	2b00      	cmp	r3, #0
 8019034:	d008      	beq.n	8019048 <find_volume+0x224>
 8019036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019038:	895b      	ldrh	r3, [r3, #10]
 801903a:	461a      	mov	r2, r3
 801903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801903e:	895b      	ldrh	r3, [r3, #10]
 8019040:	3b01      	subs	r3, #1
 8019042:	4013      	ands	r3, r2
 8019044:	2b00      	cmp	r3, #0
 8019046:	d001      	beq.n	801904c <find_volume+0x228>
 8019048:	230d      	movs	r3, #13
 801904a:	e12f      	b.n	80192ac <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801904e:	3334      	adds	r3, #52	; 0x34
 8019050:	3311      	adds	r3, #17
 8019052:	4618      	mov	r0, r3
 8019054:	f7fe f80e 	bl	8017074 <ld_word>
 8019058:	4603      	mov	r3, r0
 801905a:	461a      	mov	r2, r3
 801905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801905e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019062:	891b      	ldrh	r3, [r3, #8]
 8019064:	f003 030f 	and.w	r3, r3, #15
 8019068:	b29b      	uxth	r3, r3
 801906a:	2b00      	cmp	r3, #0
 801906c:	d001      	beq.n	8019072 <find_volume+0x24e>
 801906e:	230d      	movs	r3, #13
 8019070:	e11c      	b.n	80192ac <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8019072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019074:	3334      	adds	r3, #52	; 0x34
 8019076:	3313      	adds	r3, #19
 8019078:	4618      	mov	r0, r3
 801907a:	f7fd fffb 	bl	8017074 <ld_word>
 801907e:	4603      	mov	r3, r0
 8019080:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8019082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019084:	2b00      	cmp	r3, #0
 8019086:	d106      	bne.n	8019096 <find_volume+0x272>
 8019088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801908a:	3334      	adds	r3, #52	; 0x34
 801908c:	3320      	adds	r3, #32
 801908e:	4618      	mov	r0, r3
 8019090:	f7fe f808 	bl	80170a4 <ld_dword>
 8019094:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019098:	3334      	adds	r3, #52	; 0x34
 801909a:	330e      	adds	r3, #14
 801909c:	4618      	mov	r0, r3
 801909e:	f7fd ffe9 	bl	8017074 <ld_word>
 80190a2:	4603      	mov	r3, r0
 80190a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80190a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d101      	bne.n	80190b0 <find_volume+0x28c>
 80190ac:	230d      	movs	r3, #13
 80190ae:	e0fd      	b.n	80192ac <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80190b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80190b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80190b4:	4413      	add	r3, r2
 80190b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190b8:	8912      	ldrh	r2, [r2, #8]
 80190ba:	0912      	lsrs	r2, r2, #4
 80190bc:	b292      	uxth	r2, r2
 80190be:	4413      	add	r3, r2
 80190c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80190c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80190c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c6:	429a      	cmp	r2, r3
 80190c8:	d204      	bcs.n	80190d4 <find_volume+0x2b0>
 80190ca:	230d      	movs	r3, #13
 80190cc:	e0ee      	b.n	80192ac <find_volume+0x488>
 80190ce:	bf00      	nop
 80190d0:	20001a8c 	.word	0x20001a8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80190d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80190d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d8:	1ad3      	subs	r3, r2, r3
 80190da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80190dc:	8952      	ldrh	r2, [r2, #10]
 80190de:	fbb3 f3f2 	udiv	r3, r3, r2
 80190e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80190e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d101      	bne.n	80190ee <find_volume+0x2ca>
 80190ea:	230d      	movs	r3, #13
 80190ec:	e0de      	b.n	80192ac <find_volume+0x488>
		fmt = FS_FAT32;
 80190ee:	2303      	movs	r3, #3
 80190f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80190f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80190fa:	4293      	cmp	r3, r2
 80190fc:	d802      	bhi.n	8019104 <find_volume+0x2e0>
 80190fe:	2302      	movs	r3, #2
 8019100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019106:	f640 72f5 	movw	r2, #4085	; 0xff5
 801910a:	4293      	cmp	r3, r2
 801910c:	d802      	bhi.n	8019114 <find_volume+0x2f0>
 801910e:	2301      	movs	r3, #1
 8019110:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019116:	1c9a      	adds	r2, r3, #2
 8019118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801911a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801911c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801911e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019120:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019122:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019126:	441a      	add	r2, r3
 8019128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801912a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801912c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019130:	441a      	add	r2, r3
 8019132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019134:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8019136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801913a:	2b03      	cmp	r3, #3
 801913c:	d11e      	bne.n	801917c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801913e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019140:	3334      	adds	r3, #52	; 0x34
 8019142:	332a      	adds	r3, #42	; 0x2a
 8019144:	4618      	mov	r0, r3
 8019146:	f7fd ff95 	bl	8017074 <ld_word>
 801914a:	4603      	mov	r3, r0
 801914c:	2b00      	cmp	r3, #0
 801914e:	d001      	beq.n	8019154 <find_volume+0x330>
 8019150:	230d      	movs	r3, #13
 8019152:	e0ab      	b.n	80192ac <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019156:	891b      	ldrh	r3, [r3, #8]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d001      	beq.n	8019160 <find_volume+0x33c>
 801915c:	230d      	movs	r3, #13
 801915e:	e0a5      	b.n	80192ac <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8019160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019162:	3334      	adds	r3, #52	; 0x34
 8019164:	332c      	adds	r3, #44	; 0x2c
 8019166:	4618      	mov	r0, r3
 8019168:	f7fd ff9c 	bl	80170a4 <ld_dword>
 801916c:	4602      	mov	r2, r0
 801916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019170:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019174:	699b      	ldr	r3, [r3, #24]
 8019176:	009b      	lsls	r3, r3, #2
 8019178:	647b      	str	r3, [r7, #68]	; 0x44
 801917a:	e01f      	b.n	80191bc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801917e:	891b      	ldrh	r3, [r3, #8]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d101      	bne.n	8019188 <find_volume+0x364>
 8019184:	230d      	movs	r3, #13
 8019186:	e091      	b.n	80192ac <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801918a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801918c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801918e:	441a      	add	r2, r3
 8019190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019192:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019194:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019198:	2b02      	cmp	r3, #2
 801919a:	d103      	bne.n	80191a4 <find_volume+0x380>
 801919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801919e:	699b      	ldr	r3, [r3, #24]
 80191a0:	005b      	lsls	r3, r3, #1
 80191a2:	e00a      	b.n	80191ba <find_volume+0x396>
 80191a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191a6:	699a      	ldr	r2, [r3, #24]
 80191a8:	4613      	mov	r3, r2
 80191aa:	005b      	lsls	r3, r3, #1
 80191ac:	4413      	add	r3, r2
 80191ae:	085a      	lsrs	r2, r3, #1
 80191b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191b2:	699b      	ldr	r3, [r3, #24]
 80191b4:	f003 0301 	and.w	r3, r3, #1
 80191b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80191ba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80191bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191be:	69da      	ldr	r2, [r3, #28]
 80191c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80191c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80191c6:	0a5b      	lsrs	r3, r3, #9
 80191c8:	429a      	cmp	r2, r3
 80191ca:	d201      	bcs.n	80191d0 <find_volume+0x3ac>
 80191cc:	230d      	movs	r3, #13
 80191ce:	e06d      	b.n	80192ac <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80191d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d2:	f04f 32ff 	mov.w	r2, #4294967295
 80191d6:	615a      	str	r2, [r3, #20]
 80191d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191da:	695a      	ldr	r2, [r3, #20]
 80191dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80191e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191e2:	2280      	movs	r2, #128	; 0x80
 80191e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80191e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80191ea:	2b03      	cmp	r3, #3
 80191ec:	d149      	bne.n	8019282 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80191ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f0:	3334      	adds	r3, #52	; 0x34
 80191f2:	3330      	adds	r3, #48	; 0x30
 80191f4:	4618      	mov	r0, r3
 80191f6:	f7fd ff3d 	bl	8017074 <ld_word>
 80191fa:	4603      	mov	r3, r0
 80191fc:	2b01      	cmp	r3, #1
 80191fe:	d140      	bne.n	8019282 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019202:	3301      	adds	r3, #1
 8019204:	4619      	mov	r1, r3
 8019206:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019208:	f7fe f9e4 	bl	80175d4 <move_window>
 801920c:	4603      	mov	r3, r0
 801920e:	2b00      	cmp	r3, #0
 8019210:	d137      	bne.n	8019282 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8019212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019214:	2200      	movs	r2, #0
 8019216:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801921a:	3334      	adds	r3, #52	; 0x34
 801921c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019220:	4618      	mov	r0, r3
 8019222:	f7fd ff27 	bl	8017074 <ld_word>
 8019226:	4603      	mov	r3, r0
 8019228:	461a      	mov	r2, r3
 801922a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801922e:	429a      	cmp	r2, r3
 8019230:	d127      	bne.n	8019282 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019234:	3334      	adds	r3, #52	; 0x34
 8019236:	4618      	mov	r0, r3
 8019238:	f7fd ff34 	bl	80170a4 <ld_dword>
 801923c:	4603      	mov	r3, r0
 801923e:	4a1d      	ldr	r2, [pc, #116]	; (80192b4 <find_volume+0x490>)
 8019240:	4293      	cmp	r3, r2
 8019242:	d11e      	bne.n	8019282 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019246:	3334      	adds	r3, #52	; 0x34
 8019248:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801924c:	4618      	mov	r0, r3
 801924e:	f7fd ff29 	bl	80170a4 <ld_dword>
 8019252:	4603      	mov	r3, r0
 8019254:	4a18      	ldr	r2, [pc, #96]	; (80192b8 <find_volume+0x494>)
 8019256:	4293      	cmp	r3, r2
 8019258:	d113      	bne.n	8019282 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801925a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801925c:	3334      	adds	r3, #52	; 0x34
 801925e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8019262:	4618      	mov	r0, r3
 8019264:	f7fd ff1e 	bl	80170a4 <ld_dword>
 8019268:	4602      	mov	r2, r0
 801926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801926c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019270:	3334      	adds	r3, #52	; 0x34
 8019272:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019276:	4618      	mov	r0, r3
 8019278:	f7fd ff14 	bl	80170a4 <ld_dword>
 801927c:	4602      	mov	r2, r0
 801927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019280:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8019282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019284:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019288:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801928a:	4b0c      	ldr	r3, [pc, #48]	; (80192bc <find_volume+0x498>)
 801928c:	881b      	ldrh	r3, [r3, #0]
 801928e:	3301      	adds	r3, #1
 8019290:	b29a      	uxth	r2, r3
 8019292:	4b0a      	ldr	r3, [pc, #40]	; (80192bc <find_volume+0x498>)
 8019294:	801a      	strh	r2, [r3, #0]
 8019296:	4b09      	ldr	r3, [pc, #36]	; (80192bc <find_volume+0x498>)
 8019298:	881a      	ldrh	r2, [r3, #0]
 801929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801929c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192a0:	4a07      	ldr	r2, [pc, #28]	; (80192c0 <find_volume+0x49c>)
 80192a2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80192a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80192a6:	f7fe f92d 	bl	8017504 <clear_lock>
#endif
	return FR_OK;
 80192aa:	2300      	movs	r3, #0
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	3758      	adds	r7, #88	; 0x58
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	41615252 	.word	0x41615252
 80192b8:	61417272 	.word	0x61417272
 80192bc:	20001a90 	.word	0x20001a90
 80192c0:	20001ab4 	.word	0x20001ab4

080192c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b084      	sub	sp, #16
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
 80192cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80192ce:	2309      	movs	r3, #9
 80192d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d01c      	beq.n	8019312 <validate+0x4e>
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d018      	beq.n	8019312 <validate+0x4e>
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	781b      	ldrb	r3, [r3, #0]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d013      	beq.n	8019312 <validate+0x4e>
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	889a      	ldrh	r2, [r3, #4]
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	88db      	ldrh	r3, [r3, #6]
 80192f4:	429a      	cmp	r2, r3
 80192f6:	d10c      	bne.n	8019312 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	785b      	ldrb	r3, [r3, #1]
 80192fe:	4618      	mov	r0, r3
 8019300:	f7fd fe1a 	bl	8016f38 <disk_status>
 8019304:	4603      	mov	r3, r0
 8019306:	f003 0301 	and.w	r3, r3, #1
 801930a:	2b00      	cmp	r3, #0
 801930c:	d101      	bne.n	8019312 <validate+0x4e>
			res = FR_OK;
 801930e:	2300      	movs	r3, #0
 8019310:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019312:	7bfb      	ldrb	r3, [r7, #15]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d102      	bne.n	801931e <validate+0x5a>
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	e000      	b.n	8019320 <validate+0x5c>
 801931e:	2300      	movs	r3, #0
 8019320:	683a      	ldr	r2, [r7, #0]
 8019322:	6013      	str	r3, [r2, #0]
	return res;
 8019324:	7bfb      	ldrb	r3, [r7, #15]
}
 8019326:	4618      	mov	r0, r3
 8019328:	3710      	adds	r7, #16
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}
	...

08019330 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b088      	sub	sp, #32
 8019334:	af00      	add	r7, sp, #0
 8019336:	60f8      	str	r0, [r7, #12]
 8019338:	60b9      	str	r1, [r7, #8]
 801933a:	4613      	mov	r3, r2
 801933c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801933e:	68bb      	ldr	r3, [r7, #8]
 8019340:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019342:	f107 0310 	add.w	r3, r7, #16
 8019346:	4618      	mov	r0, r3
 8019348:	f7ff fcd1 	bl	8018cee <get_ldnumber>
 801934c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801934e:	69fb      	ldr	r3, [r7, #28]
 8019350:	2b00      	cmp	r3, #0
 8019352:	da01      	bge.n	8019358 <f_mount+0x28>
 8019354:	230b      	movs	r3, #11
 8019356:	e02b      	b.n	80193b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019358:	4a17      	ldr	r2, [pc, #92]	; (80193b8 <f_mount+0x88>)
 801935a:	69fb      	ldr	r3, [r7, #28]
 801935c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019360:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8019362:	69bb      	ldr	r3, [r7, #24]
 8019364:	2b00      	cmp	r3, #0
 8019366:	d005      	beq.n	8019374 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019368:	69b8      	ldr	r0, [r7, #24]
 801936a:	f7fe f8cb 	bl	8017504 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801936e:	69bb      	ldr	r3, [r7, #24]
 8019370:	2200      	movs	r2, #0
 8019372:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d002      	beq.n	8019380 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	2200      	movs	r2, #0
 801937e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8019380:	68fa      	ldr	r2, [r7, #12]
 8019382:	490d      	ldr	r1, [pc, #52]	; (80193b8 <f_mount+0x88>)
 8019384:	69fb      	ldr	r3, [r7, #28]
 8019386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d002      	beq.n	8019396 <f_mount+0x66>
 8019390:	79fb      	ldrb	r3, [r7, #7]
 8019392:	2b01      	cmp	r3, #1
 8019394:	d001      	beq.n	801939a <f_mount+0x6a>
 8019396:	2300      	movs	r3, #0
 8019398:	e00a      	b.n	80193b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801939a:	f107 010c 	add.w	r1, r7, #12
 801939e:	f107 0308 	add.w	r3, r7, #8
 80193a2:	2200      	movs	r2, #0
 80193a4:	4618      	mov	r0, r3
 80193a6:	f7ff fd3d 	bl	8018e24 <find_volume>
 80193aa:	4603      	mov	r3, r0
 80193ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80193ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80193b0:	4618      	mov	r0, r3
 80193b2:	3720      	adds	r7, #32
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}
 80193b8:	20001a8c 	.word	0x20001a8c

080193bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b09a      	sub	sp, #104	; 0x68
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	60f8      	str	r0, [r7, #12]
 80193c4:	60b9      	str	r1, [r7, #8]
 80193c6:	4613      	mov	r3, r2
 80193c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d101      	bne.n	80193d4 <f_open+0x18>
 80193d0:	2309      	movs	r3, #9
 80193d2:	e1ad      	b.n	8019730 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80193d4:	79fb      	ldrb	r3, [r7, #7]
 80193d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80193dc:	79fa      	ldrb	r2, [r7, #7]
 80193de:	f107 0114 	add.w	r1, r7, #20
 80193e2:	f107 0308 	add.w	r3, r7, #8
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7ff fd1c 	bl	8018e24 <find_volume>
 80193ec:	4603      	mov	r3, r0
 80193ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80193f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	f040 8191 	bne.w	801971e <f_open+0x362>
		dj.obj.fs = fs;
 80193fc:	697b      	ldr	r3, [r7, #20]
 80193fe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019400:	68ba      	ldr	r2, [r7, #8]
 8019402:	f107 0318 	add.w	r3, r7, #24
 8019406:	4611      	mov	r1, r2
 8019408:	4618      	mov	r0, r3
 801940a:	f7ff fbff 	bl	8018c0c <follow_path>
 801940e:	4603      	mov	r3, r0
 8019410:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019414:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019418:	2b00      	cmp	r3, #0
 801941a:	d11a      	bne.n	8019452 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801941c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019420:	b25b      	sxtb	r3, r3
 8019422:	2b00      	cmp	r3, #0
 8019424:	da03      	bge.n	801942e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019426:	2306      	movs	r3, #6
 8019428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801942c:	e011      	b.n	8019452 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801942e:	79fb      	ldrb	r3, [r7, #7]
 8019430:	f023 0301 	bic.w	r3, r3, #1
 8019434:	2b00      	cmp	r3, #0
 8019436:	bf14      	ite	ne
 8019438:	2301      	movne	r3, #1
 801943a:	2300      	moveq	r3, #0
 801943c:	b2db      	uxtb	r3, r3
 801943e:	461a      	mov	r2, r3
 8019440:	f107 0318 	add.w	r3, r7, #24
 8019444:	4611      	mov	r1, r2
 8019446:	4618      	mov	r0, r3
 8019448:	f7fd ff14 	bl	8017274 <chk_lock>
 801944c:	4603      	mov	r3, r0
 801944e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019452:	79fb      	ldrb	r3, [r7, #7]
 8019454:	f003 031c 	and.w	r3, r3, #28
 8019458:	2b00      	cmp	r3, #0
 801945a:	d07f      	beq.n	801955c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801945c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019460:	2b00      	cmp	r3, #0
 8019462:	d017      	beq.n	8019494 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019464:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019468:	2b04      	cmp	r3, #4
 801946a:	d10e      	bne.n	801948a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801946c:	f7fd ff5e 	bl	801732c <enq_lock>
 8019470:	4603      	mov	r3, r0
 8019472:	2b00      	cmp	r3, #0
 8019474:	d006      	beq.n	8019484 <f_open+0xc8>
 8019476:	f107 0318 	add.w	r3, r7, #24
 801947a:	4618      	mov	r0, r3
 801947c:	f7ff f838 	bl	80184f0 <dir_register>
 8019480:	4603      	mov	r3, r0
 8019482:	e000      	b.n	8019486 <f_open+0xca>
 8019484:	2312      	movs	r3, #18
 8019486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801948a:	79fb      	ldrb	r3, [r7, #7]
 801948c:	f043 0308 	orr.w	r3, r3, #8
 8019490:	71fb      	strb	r3, [r7, #7]
 8019492:	e010      	b.n	80194b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8019494:	7fbb      	ldrb	r3, [r7, #30]
 8019496:	f003 0311 	and.w	r3, r3, #17
 801949a:	2b00      	cmp	r3, #0
 801949c:	d003      	beq.n	80194a6 <f_open+0xea>
					res = FR_DENIED;
 801949e:	2307      	movs	r3, #7
 80194a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80194a4:	e007      	b.n	80194b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80194a6:	79fb      	ldrb	r3, [r7, #7]
 80194a8:	f003 0304 	and.w	r3, r3, #4
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d002      	beq.n	80194b6 <f_open+0xfa>
 80194b0:	2308      	movs	r3, #8
 80194b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80194b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d168      	bne.n	8019590 <f_open+0x1d4>
 80194be:	79fb      	ldrb	r3, [r7, #7]
 80194c0:	f003 0308 	and.w	r3, r3, #8
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d063      	beq.n	8019590 <f_open+0x1d4>
				dw = GET_FATTIME();
 80194c8:	f7f8 fce8 	bl	8011e9c <get_fattime>
 80194cc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80194ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d0:	330e      	adds	r3, #14
 80194d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80194d4:	4618      	mov	r0, r3
 80194d6:	f7fd fe23 	bl	8017120 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80194da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194dc:	3316      	adds	r3, #22
 80194de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80194e0:	4618      	mov	r0, r3
 80194e2:	f7fd fe1d 	bl	8017120 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80194e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194e8:	330b      	adds	r3, #11
 80194ea:	2220      	movs	r2, #32
 80194ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80194ee:	697b      	ldr	r3, [r7, #20]
 80194f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194f2:	4611      	mov	r1, r2
 80194f4:	4618      	mov	r0, r3
 80194f6:	f7fe fd74 	bl	8017fe2 <ld_clust>
 80194fa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80194fc:	697b      	ldr	r3, [r7, #20]
 80194fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019500:	2200      	movs	r2, #0
 8019502:	4618      	mov	r0, r3
 8019504:	f7fe fd8c 	bl	8018020 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801950a:	331c      	adds	r3, #28
 801950c:	2100      	movs	r1, #0
 801950e:	4618      	mov	r0, r3
 8019510:	f7fd fe06 	bl	8017120 <st_dword>
					fs->wflag = 1;
 8019514:	697b      	ldr	r3, [r7, #20]
 8019516:	2201      	movs	r2, #1
 8019518:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801951a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801951c:	2b00      	cmp	r3, #0
 801951e:	d037      	beq.n	8019590 <f_open+0x1d4>
						dw = fs->winsect;
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019524:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019526:	f107 0318 	add.w	r3, r7, #24
 801952a:	2200      	movs	r2, #0
 801952c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801952e:	4618      	mov	r0, r3
 8019530:	f7fe fa9f 	bl	8017a72 <remove_chain>
 8019534:	4603      	mov	r3, r0
 8019536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801953a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801953e:	2b00      	cmp	r3, #0
 8019540:	d126      	bne.n	8019590 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019542:	697b      	ldr	r3, [r7, #20]
 8019544:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019546:	4618      	mov	r0, r3
 8019548:	f7fe f844 	bl	80175d4 <move_window>
 801954c:	4603      	mov	r3, r0
 801954e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019556:	3a01      	subs	r2, #1
 8019558:	611a      	str	r2, [r3, #16]
 801955a:	e019      	b.n	8019590 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801955c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019560:	2b00      	cmp	r3, #0
 8019562:	d115      	bne.n	8019590 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019564:	7fbb      	ldrb	r3, [r7, #30]
 8019566:	f003 0310 	and.w	r3, r3, #16
 801956a:	2b00      	cmp	r3, #0
 801956c:	d003      	beq.n	8019576 <f_open+0x1ba>
					res = FR_NO_FILE;
 801956e:	2304      	movs	r3, #4
 8019570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019574:	e00c      	b.n	8019590 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019576:	79fb      	ldrb	r3, [r7, #7]
 8019578:	f003 0302 	and.w	r3, r3, #2
 801957c:	2b00      	cmp	r3, #0
 801957e:	d007      	beq.n	8019590 <f_open+0x1d4>
 8019580:	7fbb      	ldrb	r3, [r7, #30]
 8019582:	f003 0301 	and.w	r3, r3, #1
 8019586:	2b00      	cmp	r3, #0
 8019588:	d002      	beq.n	8019590 <f_open+0x1d4>
						res = FR_DENIED;
 801958a:	2307      	movs	r3, #7
 801958c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8019590:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019594:	2b00      	cmp	r3, #0
 8019596:	d128      	bne.n	80195ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8019598:	79fb      	ldrb	r3, [r7, #7]
 801959a:	f003 0308 	and.w	r3, r3, #8
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d003      	beq.n	80195aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80195a2:	79fb      	ldrb	r3, [r7, #7]
 80195a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80195aa:	697b      	ldr	r3, [r7, #20]
 80195ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80195b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80195b8:	79fb      	ldrb	r3, [r7, #7]
 80195ba:	f023 0301 	bic.w	r3, r3, #1
 80195be:	2b00      	cmp	r3, #0
 80195c0:	bf14      	ite	ne
 80195c2:	2301      	movne	r3, #1
 80195c4:	2300      	moveq	r3, #0
 80195c6:	b2db      	uxtb	r3, r3
 80195c8:	461a      	mov	r2, r3
 80195ca:	f107 0318 	add.w	r3, r7, #24
 80195ce:	4611      	mov	r1, r2
 80195d0:	4618      	mov	r0, r3
 80195d2:	f7fd fecd 	bl	8017370 <inc_lock>
 80195d6:	4602      	mov	r2, r0
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	691b      	ldr	r3, [r3, #16]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d102      	bne.n	80195ea <f_open+0x22e>
 80195e4:	2302      	movs	r3, #2
 80195e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80195ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	f040 8095 	bne.w	801971e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80195f4:	697b      	ldr	r3, [r7, #20]
 80195f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80195f8:	4611      	mov	r1, r2
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7fe fcf1 	bl	8017fe2 <ld_clust>
 8019600:	4602      	mov	r2, r0
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019608:	331c      	adds	r3, #28
 801960a:	4618      	mov	r0, r3
 801960c:	f7fd fd4a 	bl	80170a4 <ld_dword>
 8019610:	4602      	mov	r2, r0
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	2200      	movs	r2, #0
 801961a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801961c:	697a      	ldr	r2, [r7, #20]
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	88da      	ldrh	r2, [r3, #6]
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	79fa      	ldrb	r2, [r7, #7]
 801962e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	2200      	movs	r2, #0
 8019634:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	2200      	movs	r2, #0
 801963a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	2200      	movs	r2, #0
 8019640:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	3330      	adds	r3, #48	; 0x30
 8019646:	f44f 7200 	mov.w	r2, #512	; 0x200
 801964a:	2100      	movs	r1, #0
 801964c:	4618      	mov	r0, r3
 801964e:	f7fd fdb4 	bl	80171ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019652:	79fb      	ldrb	r3, [r7, #7]
 8019654:	f003 0320 	and.w	r3, r3, #32
 8019658:	2b00      	cmp	r3, #0
 801965a:	d060      	beq.n	801971e <f_open+0x362>
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	68db      	ldr	r3, [r3, #12]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d05c      	beq.n	801971e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	68da      	ldr	r2, [r3, #12]
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	895b      	ldrh	r3, [r3, #10]
 8019670:	025b      	lsls	r3, r3, #9
 8019672:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	689b      	ldr	r3, [r3, #8]
 8019678:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	68db      	ldr	r3, [r3, #12]
 801967e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019680:	e016      	b.n	80196b0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019686:	4618      	mov	r0, r3
 8019688:	f7fe f85f 	bl	801774a <get_fat>
 801968c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801968e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019690:	2b01      	cmp	r3, #1
 8019692:	d802      	bhi.n	801969a <f_open+0x2de>
 8019694:	2302      	movs	r3, #2
 8019696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801969a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801969c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196a0:	d102      	bne.n	80196a8 <f_open+0x2ec>
 80196a2:	2301      	movs	r3, #1
 80196a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80196a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80196aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196ac:	1ad3      	subs	r3, r2, r3
 80196ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80196b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d103      	bne.n	80196c0 <f_open+0x304>
 80196b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80196ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196bc:	429a      	cmp	r2, r3
 80196be:	d8e0      	bhi.n	8019682 <f_open+0x2c6>
				}
				fp->clust = clst;
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80196c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80196c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d127      	bne.n	801971e <f_open+0x362>
 80196ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80196d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d022      	beq.n	801971e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80196d8:	697b      	ldr	r3, [r7, #20]
 80196da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80196dc:	4618      	mov	r0, r3
 80196de:	f7fe f815 	bl	801770c <clust2sect>
 80196e2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80196e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d103      	bne.n	80196f2 <f_open+0x336>
						res = FR_INT_ERR;
 80196ea:	2302      	movs	r3, #2
 80196ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80196f0:	e015      	b.n	801971e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80196f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80196f4:	0a5a      	lsrs	r2, r3, #9
 80196f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196f8:	441a      	add	r2, r3
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80196fe:	697b      	ldr	r3, [r7, #20]
 8019700:	7858      	ldrb	r0, [r3, #1]
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	6a1a      	ldr	r2, [r3, #32]
 801970c:	2301      	movs	r3, #1
 801970e:	f7fd fc53 	bl	8016fb8 <disk_read>
 8019712:	4603      	mov	r3, r0
 8019714:	2b00      	cmp	r3, #0
 8019716:	d002      	beq.n	801971e <f_open+0x362>
 8019718:	2301      	movs	r3, #1
 801971a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801971e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019722:	2b00      	cmp	r3, #0
 8019724:	d002      	beq.n	801972c <f_open+0x370>
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	2200      	movs	r2, #0
 801972a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801972c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019730:	4618      	mov	r0, r3
 8019732:	3768      	adds	r7, #104	; 0x68
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}

08019738 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b08c      	sub	sp, #48	; 0x30
 801973c:	af00      	add	r7, sp, #0
 801973e:	60f8      	str	r0, [r7, #12]
 8019740:	60b9      	str	r1, [r7, #8]
 8019742:	607a      	str	r2, [r7, #4]
 8019744:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019746:	68bb      	ldr	r3, [r7, #8]
 8019748:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801974a:	683b      	ldr	r3, [r7, #0]
 801974c:	2200      	movs	r2, #0
 801974e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	f107 0210 	add.w	r2, r7, #16
 8019756:	4611      	mov	r1, r2
 8019758:	4618      	mov	r0, r3
 801975a:	f7ff fdb3 	bl	80192c4 <validate>
 801975e:	4603      	mov	r3, r0
 8019760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019764:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019768:	2b00      	cmp	r3, #0
 801976a:	d107      	bne.n	801977c <f_write+0x44>
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	7d5b      	ldrb	r3, [r3, #21]
 8019770:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019774:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019778:	2b00      	cmp	r3, #0
 801977a:	d002      	beq.n	8019782 <f_write+0x4a>
 801977c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019780:	e14b      	b.n	8019a1a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	7d1b      	ldrb	r3, [r3, #20]
 8019786:	f003 0302 	and.w	r3, r3, #2
 801978a:	2b00      	cmp	r3, #0
 801978c:	d101      	bne.n	8019792 <f_write+0x5a>
 801978e:	2307      	movs	r3, #7
 8019790:	e143      	b.n	8019a1a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	699a      	ldr	r2, [r3, #24]
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	441a      	add	r2, r3
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	699b      	ldr	r3, [r3, #24]
 801979e:	429a      	cmp	r2, r3
 80197a0:	f080 812d 	bcs.w	80199fe <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	699b      	ldr	r3, [r3, #24]
 80197a8:	43db      	mvns	r3, r3
 80197aa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80197ac:	e127      	b.n	80199fe <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	699b      	ldr	r3, [r3, #24]
 80197b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f040 80e3 	bne.w	8019982 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	699b      	ldr	r3, [r3, #24]
 80197c0:	0a5b      	lsrs	r3, r3, #9
 80197c2:	693a      	ldr	r2, [r7, #16]
 80197c4:	8952      	ldrh	r2, [r2, #10]
 80197c6:	3a01      	subs	r2, #1
 80197c8:	4013      	ands	r3, r2
 80197ca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80197cc:	69bb      	ldr	r3, [r7, #24]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d143      	bne.n	801985a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	699b      	ldr	r3, [r3, #24]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d10c      	bne.n	80197f4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	689b      	ldr	r3, [r3, #8]
 80197de:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80197e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d11a      	bne.n	801981c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	2100      	movs	r1, #0
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7fe f9a6 	bl	8017b3c <create_chain>
 80197f0:	62b8      	str	r0, [r7, #40]	; 0x28
 80197f2:	e013      	b.n	801981c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d007      	beq.n	801980c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	699b      	ldr	r3, [r3, #24]
 8019800:	4619      	mov	r1, r3
 8019802:	68f8      	ldr	r0, [r7, #12]
 8019804:	f7fe fa32 	bl	8017c6c <clmt_clust>
 8019808:	62b8      	str	r0, [r7, #40]	; 0x28
 801980a:	e007      	b.n	801981c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801980c:	68fa      	ldr	r2, [r7, #12]
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	69db      	ldr	r3, [r3, #28]
 8019812:	4619      	mov	r1, r3
 8019814:	4610      	mov	r0, r2
 8019816:	f7fe f991 	bl	8017b3c <create_chain>
 801981a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801981e:	2b00      	cmp	r3, #0
 8019820:	f000 80f2 	beq.w	8019a08 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019826:	2b01      	cmp	r3, #1
 8019828:	d104      	bne.n	8019834 <f_write+0xfc>
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	2202      	movs	r2, #2
 801982e:	755a      	strb	r2, [r3, #21]
 8019830:	2302      	movs	r3, #2
 8019832:	e0f2      	b.n	8019a1a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801983a:	d104      	bne.n	8019846 <f_write+0x10e>
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	2201      	movs	r2, #1
 8019840:	755a      	strb	r2, [r3, #21]
 8019842:	2301      	movs	r3, #1
 8019844:	e0e9      	b.n	8019a1a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801984a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	689b      	ldr	r3, [r3, #8]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d102      	bne.n	801985a <f_write+0x122>
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019858:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	7d1b      	ldrb	r3, [r3, #20]
 801985e:	b25b      	sxtb	r3, r3
 8019860:	2b00      	cmp	r3, #0
 8019862:	da18      	bge.n	8019896 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019864:	693b      	ldr	r3, [r7, #16]
 8019866:	7858      	ldrb	r0, [r3, #1]
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	6a1a      	ldr	r2, [r3, #32]
 8019872:	2301      	movs	r3, #1
 8019874:	f7fd fbc0 	bl	8016ff8 <disk_write>
 8019878:	4603      	mov	r3, r0
 801987a:	2b00      	cmp	r3, #0
 801987c:	d004      	beq.n	8019888 <f_write+0x150>
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	2201      	movs	r2, #1
 8019882:	755a      	strb	r2, [r3, #21]
 8019884:	2301      	movs	r3, #1
 8019886:	e0c8      	b.n	8019a1a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	7d1b      	ldrb	r3, [r3, #20]
 801988c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019890:	b2da      	uxtb	r2, r3
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019896:	693a      	ldr	r2, [r7, #16]
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	69db      	ldr	r3, [r3, #28]
 801989c:	4619      	mov	r1, r3
 801989e:	4610      	mov	r0, r2
 80198a0:	f7fd ff34 	bl	801770c <clust2sect>
 80198a4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80198a6:	697b      	ldr	r3, [r7, #20]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d104      	bne.n	80198b6 <f_write+0x17e>
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	2202      	movs	r2, #2
 80198b0:	755a      	strb	r2, [r3, #21]
 80198b2:	2302      	movs	r3, #2
 80198b4:	e0b1      	b.n	8019a1a <f_write+0x2e2>
			sect += csect;
 80198b6:	697a      	ldr	r2, [r7, #20]
 80198b8:	69bb      	ldr	r3, [r7, #24]
 80198ba:	4413      	add	r3, r2
 80198bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	0a5b      	lsrs	r3, r3, #9
 80198c2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80198c4:	6a3b      	ldr	r3, [r7, #32]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d03c      	beq.n	8019944 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80198ca:	69ba      	ldr	r2, [r7, #24]
 80198cc:	6a3b      	ldr	r3, [r7, #32]
 80198ce:	4413      	add	r3, r2
 80198d0:	693a      	ldr	r2, [r7, #16]
 80198d2:	8952      	ldrh	r2, [r2, #10]
 80198d4:	4293      	cmp	r3, r2
 80198d6:	d905      	bls.n	80198e4 <f_write+0x1ac>
					cc = fs->csize - csect;
 80198d8:	693b      	ldr	r3, [r7, #16]
 80198da:	895b      	ldrh	r3, [r3, #10]
 80198dc:	461a      	mov	r2, r3
 80198de:	69bb      	ldr	r3, [r7, #24]
 80198e0:	1ad3      	subs	r3, r2, r3
 80198e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80198e4:	693b      	ldr	r3, [r7, #16]
 80198e6:	7858      	ldrb	r0, [r3, #1]
 80198e8:	6a3b      	ldr	r3, [r7, #32]
 80198ea:	697a      	ldr	r2, [r7, #20]
 80198ec:	69f9      	ldr	r1, [r7, #28]
 80198ee:	f7fd fb83 	bl	8016ff8 <disk_write>
 80198f2:	4603      	mov	r3, r0
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d004      	beq.n	8019902 <f_write+0x1ca>
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	2201      	movs	r2, #1
 80198fc:	755a      	strb	r2, [r3, #21]
 80198fe:	2301      	movs	r3, #1
 8019900:	e08b      	b.n	8019a1a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	6a1a      	ldr	r2, [r3, #32]
 8019906:	697b      	ldr	r3, [r7, #20]
 8019908:	1ad3      	subs	r3, r2, r3
 801990a:	6a3a      	ldr	r2, [r7, #32]
 801990c:	429a      	cmp	r2, r3
 801990e:	d915      	bls.n	801993c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	6a1a      	ldr	r2, [r3, #32]
 801991a:	697b      	ldr	r3, [r7, #20]
 801991c:	1ad3      	subs	r3, r2, r3
 801991e:	025b      	lsls	r3, r3, #9
 8019920:	69fa      	ldr	r2, [r7, #28]
 8019922:	4413      	add	r3, r2
 8019924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019928:	4619      	mov	r1, r3
 801992a:	f7fd fc25 	bl	8017178 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	7d1b      	ldrb	r3, [r3, #20]
 8019932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019936:	b2da      	uxtb	r2, r3
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801993c:	6a3b      	ldr	r3, [r7, #32]
 801993e:	025b      	lsls	r3, r3, #9
 8019940:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019942:	e03f      	b.n	80199c4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	6a1b      	ldr	r3, [r3, #32]
 8019948:	697a      	ldr	r2, [r7, #20]
 801994a:	429a      	cmp	r2, r3
 801994c:	d016      	beq.n	801997c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	699a      	ldr	r2, [r3, #24]
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019956:	429a      	cmp	r2, r3
 8019958:	d210      	bcs.n	801997c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801995a:	693b      	ldr	r3, [r7, #16]
 801995c:	7858      	ldrb	r0, [r3, #1]
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019964:	2301      	movs	r3, #1
 8019966:	697a      	ldr	r2, [r7, #20]
 8019968:	f7fd fb26 	bl	8016fb8 <disk_read>
 801996c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801996e:	2b00      	cmp	r3, #0
 8019970:	d004      	beq.n	801997c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	2201      	movs	r2, #1
 8019976:	755a      	strb	r2, [r3, #21]
 8019978:	2301      	movs	r3, #1
 801997a:	e04e      	b.n	8019a1a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	697a      	ldr	r2, [r7, #20]
 8019980:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	699b      	ldr	r3, [r3, #24]
 8019986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801998a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801998e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	429a      	cmp	r2, r3
 8019996:	d901      	bls.n	801999c <f_write+0x264>
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	699b      	ldr	r3, [r3, #24]
 80199a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80199aa:	4413      	add	r3, r2
 80199ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80199ae:	69f9      	ldr	r1, [r7, #28]
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7fd fbe1 	bl	8017178 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	7d1b      	ldrb	r3, [r3, #20]
 80199ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80199be:	b2da      	uxtb	r2, r3
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80199c4:	69fa      	ldr	r2, [r7, #28]
 80199c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199c8:	4413      	add	r3, r2
 80199ca:	61fb      	str	r3, [r7, #28]
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	699a      	ldr	r2, [r3, #24]
 80199d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d2:	441a      	add	r2, r3
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	619a      	str	r2, [r3, #24]
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	68da      	ldr	r2, [r3, #12]
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	699b      	ldr	r3, [r3, #24]
 80199e0:	429a      	cmp	r2, r3
 80199e2:	bf38      	it	cc
 80199e4:	461a      	movcc	r2, r3
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	60da      	str	r2, [r3, #12]
 80199ea:	683b      	ldr	r3, [r7, #0]
 80199ec:	681a      	ldr	r2, [r3, #0]
 80199ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f0:	441a      	add	r2, r3
 80199f2:	683b      	ldr	r3, [r7, #0]
 80199f4:	601a      	str	r2, [r3, #0]
 80199f6:	687a      	ldr	r2, [r7, #4]
 80199f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199fa:	1ad3      	subs	r3, r2, r3
 80199fc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	f47f aed4 	bne.w	80197ae <f_write+0x76>
 8019a06:	e000      	b.n	8019a0a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019a08:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	7d1b      	ldrb	r3, [r3, #20]
 8019a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a12:	b2da      	uxtb	r2, r3
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019a18:	2300      	movs	r3, #0
}
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	3730      	adds	r7, #48	; 0x30
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	bd80      	pop	{r7, pc}

08019a22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019a22:	b580      	push	{r7, lr}
 8019a24:	b086      	sub	sp, #24
 8019a26:	af00      	add	r7, sp, #0
 8019a28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	f107 0208 	add.w	r2, r7, #8
 8019a30:	4611      	mov	r1, r2
 8019a32:	4618      	mov	r0, r3
 8019a34:	f7ff fc46 	bl	80192c4 <validate>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019a3c:	7dfb      	ldrb	r3, [r7, #23]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d168      	bne.n	8019b14 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	7d1b      	ldrb	r3, [r3, #20]
 8019a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d062      	beq.n	8019b14 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	7d1b      	ldrb	r3, [r3, #20]
 8019a52:	b25b      	sxtb	r3, r3
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	da15      	bge.n	8019a84 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019a58:	68bb      	ldr	r3, [r7, #8]
 8019a5a:	7858      	ldrb	r0, [r3, #1]
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	6a1a      	ldr	r2, [r3, #32]
 8019a66:	2301      	movs	r3, #1
 8019a68:	f7fd fac6 	bl	8016ff8 <disk_write>
 8019a6c:	4603      	mov	r3, r0
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d001      	beq.n	8019a76 <f_sync+0x54>
 8019a72:	2301      	movs	r3, #1
 8019a74:	e04f      	b.n	8019b16 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	7d1b      	ldrb	r3, [r3, #20]
 8019a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019a7e:	b2da      	uxtb	r2, r3
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019a84:	f7f8 fa0a 	bl	8011e9c <get_fattime>
 8019a88:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019a8a:	68ba      	ldr	r2, [r7, #8]
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a90:	4619      	mov	r1, r3
 8019a92:	4610      	mov	r0, r2
 8019a94:	f7fd fd9e 	bl	80175d4 <move_window>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019a9c:	7dfb      	ldrb	r3, [r7, #23]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d138      	bne.n	8019b14 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019aa6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	330b      	adds	r3, #11
 8019aac:	781a      	ldrb	r2, [r3, #0]
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	330b      	adds	r3, #11
 8019ab2:	f042 0220 	orr.w	r2, r2, #32
 8019ab6:	b2d2      	uxtb	r2, r2
 8019ab8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	6818      	ldr	r0, [r3, #0]
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	689b      	ldr	r3, [r3, #8]
 8019ac2:	461a      	mov	r2, r3
 8019ac4:	68f9      	ldr	r1, [r7, #12]
 8019ac6:	f7fe faab 	bl	8018020 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	f103 021c 	add.w	r2, r3, #28
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	68db      	ldr	r3, [r3, #12]
 8019ad4:	4619      	mov	r1, r3
 8019ad6:	4610      	mov	r0, r2
 8019ad8:	f7fd fb22 	bl	8017120 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	3316      	adds	r3, #22
 8019ae0:	6939      	ldr	r1, [r7, #16]
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	f7fd fb1c 	bl	8017120 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	3312      	adds	r3, #18
 8019aec:	2100      	movs	r1, #0
 8019aee:	4618      	mov	r0, r3
 8019af0:	f7fd fafb 	bl	80170ea <st_word>
					fs->wflag = 1;
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	2201      	movs	r2, #1
 8019af8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019afa:	68bb      	ldr	r3, [r7, #8]
 8019afc:	4618      	mov	r0, r3
 8019afe:	f7fd fd97 	bl	8017630 <sync_fs>
 8019b02:	4603      	mov	r3, r0
 8019b04:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	7d1b      	ldrb	r3, [r3, #20]
 8019b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019b0e:	b2da      	uxtb	r2, r3
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8019b16:	4618      	mov	r0, r3
 8019b18:	3718      	adds	r7, #24
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	bd80      	pop	{r7, pc}

08019b1e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019b1e:	b580      	push	{r7, lr}
 8019b20:	b084      	sub	sp, #16
 8019b22:	af00      	add	r7, sp, #0
 8019b24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	f7ff ff7b 	bl	8019a22 <f_sync>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019b30:	7bfb      	ldrb	r3, [r7, #15]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d118      	bne.n	8019b68 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	f107 0208 	add.w	r2, r7, #8
 8019b3c:	4611      	mov	r1, r2
 8019b3e:	4618      	mov	r0, r3
 8019b40:	f7ff fbc0 	bl	80192c4 <validate>
 8019b44:	4603      	mov	r3, r0
 8019b46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019b48:	7bfb      	ldrb	r3, [r7, #15]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d10c      	bne.n	8019b68 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	691b      	ldr	r3, [r3, #16]
 8019b52:	4618      	mov	r0, r3
 8019b54:	f7fd fc9a 	bl	801748c <dec_lock>
 8019b58:	4603      	mov	r3, r0
 8019b5a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019b5c:	7bfb      	ldrb	r3, [r7, #15]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d102      	bne.n	8019b68 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	2200      	movs	r2, #0
 8019b66:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b6a:	4618      	mov	r0, r3
 8019b6c:	3710      	adds	r7, #16
 8019b6e:	46bd      	mov	sp, r7
 8019b70:	bd80      	pop	{r7, pc}

08019b72 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8019b72:	b580      	push	{r7, lr}
 8019b74:	b090      	sub	sp, #64	; 0x40
 8019b76:	af00      	add	r7, sp, #0
 8019b78:	6078      	str	r0, [r7, #4]
 8019b7a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8019b7c:	f107 0108 	add.w	r1, r7, #8
 8019b80:	1d3b      	adds	r3, r7, #4
 8019b82:	2200      	movs	r2, #0
 8019b84:	4618      	mov	r0, r3
 8019b86:	f7ff f94d 	bl	8018e24 <find_volume>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8019b90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d11f      	bne.n	8019bd8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019b98:	687a      	ldr	r2, [r7, #4]
 8019b9a:	f107 0308 	add.w	r3, r7, #8
 8019b9e:	4611      	mov	r1, r2
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7ff f833 	bl	8018c0c <follow_path>
 8019ba6:	4603      	mov	r3, r0
 8019ba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8019bac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d111      	bne.n	8019bd8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8019bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019bb8:	b25b      	sxtb	r3, r3
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	da03      	bge.n	8019bc6 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8019bbe:	2306      	movs	r3, #6
 8019bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8019bc4:	e008      	b.n	8019bd8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d005      	beq.n	8019bd8 <f_stat+0x66>
 8019bcc:	f107 0308 	add.w	r3, r7, #8
 8019bd0:	6839      	ldr	r1, [r7, #0]
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	f7fe fd84 	bl	80186e0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8019bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8019bdc:	4618      	mov	r0, r3
 8019bde:	3740      	adds	r7, #64	; 0x40
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}

08019be4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019be4:	b480      	push	{r7}
 8019be6:	b087      	sub	sp, #28
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	60f8      	str	r0, [r7, #12]
 8019bec:	60b9      	str	r1, [r7, #8]
 8019bee:	4613      	mov	r3, r2
 8019bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8019bfa:	4b1f      	ldr	r3, [pc, #124]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019bfc:	7a5b      	ldrb	r3, [r3, #9]
 8019bfe:	b2db      	uxtb	r3, r3
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d131      	bne.n	8019c68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019c04:	4b1c      	ldr	r3, [pc, #112]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019c06:	7a5b      	ldrb	r3, [r3, #9]
 8019c08:	b2db      	uxtb	r3, r3
 8019c0a:	461a      	mov	r2, r3
 8019c0c:	4b1a      	ldr	r3, [pc, #104]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019c0e:	2100      	movs	r1, #0
 8019c10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019c12:	4b19      	ldr	r3, [pc, #100]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019c14:	7a5b      	ldrb	r3, [r3, #9]
 8019c16:	b2db      	uxtb	r3, r3
 8019c18:	4a17      	ldr	r2, [pc, #92]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019c1a:	009b      	lsls	r3, r3, #2
 8019c1c:	4413      	add	r3, r2
 8019c1e:	68fa      	ldr	r2, [r7, #12]
 8019c20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8019c22:	4b15      	ldr	r3, [pc, #84]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019c24:	7a5b      	ldrb	r3, [r3, #9]
 8019c26:	b2db      	uxtb	r3, r3
 8019c28:	461a      	mov	r2, r3
 8019c2a:	4b13      	ldr	r3, [pc, #76]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019c2c:	4413      	add	r3, r2
 8019c2e:	79fa      	ldrb	r2, [r7, #7]
 8019c30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8019c32:	4b11      	ldr	r3, [pc, #68]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019c34:	7a5b      	ldrb	r3, [r3, #9]
 8019c36:	b2db      	uxtb	r3, r3
 8019c38:	1c5a      	adds	r2, r3, #1
 8019c3a:	b2d1      	uxtb	r1, r2
 8019c3c:	4a0e      	ldr	r2, [pc, #56]	; (8019c78 <FATFS_LinkDriverEx+0x94>)
 8019c3e:	7251      	strb	r1, [r2, #9]
 8019c40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019c42:	7dbb      	ldrb	r3, [r7, #22]
 8019c44:	3330      	adds	r3, #48	; 0x30
 8019c46:	b2da      	uxtb	r2, r3
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019c4c:	68bb      	ldr	r3, [r7, #8]
 8019c4e:	3301      	adds	r3, #1
 8019c50:	223a      	movs	r2, #58	; 0x3a
 8019c52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019c54:	68bb      	ldr	r3, [r7, #8]
 8019c56:	3302      	adds	r3, #2
 8019c58:	222f      	movs	r2, #47	; 0x2f
 8019c5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019c5c:	68bb      	ldr	r3, [r7, #8]
 8019c5e:	3303      	adds	r3, #3
 8019c60:	2200      	movs	r2, #0
 8019c62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019c64:	2300      	movs	r3, #0
 8019c66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	371c      	adds	r7, #28
 8019c6e:	46bd      	mov	sp, r7
 8019c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c74:	4770      	bx	lr
 8019c76:	bf00      	nop
 8019c78:	20001cb4 	.word	0x20001cb4

08019c7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b082      	sub	sp, #8
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
 8019c84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019c86:	2200      	movs	r2, #0
 8019c88:	6839      	ldr	r1, [r7, #0]
 8019c8a:	6878      	ldr	r0, [r7, #4]
 8019c8c:	f7ff ffaa 	bl	8019be4 <FATFS_LinkDriverEx>
 8019c90:	4603      	mov	r3, r0
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	3708      	adds	r7, #8
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}
	...

08019c9c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8019c9c:	b480      	push	{r7}
 8019c9e:	b085      	sub	sp, #20
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	4603      	mov	r3, r0
 8019ca4:	6039      	str	r1, [r7, #0]
 8019ca6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8019ca8:	88fb      	ldrh	r3, [r7, #6]
 8019caa:	2b7f      	cmp	r3, #127	; 0x7f
 8019cac:	d802      	bhi.n	8019cb4 <ff_convert+0x18>
		c = chr;
 8019cae:	88fb      	ldrh	r3, [r7, #6]
 8019cb0:	81fb      	strh	r3, [r7, #14]
 8019cb2:	e025      	b.n	8019d00 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d00b      	beq.n	8019cd2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8019cba:	88fb      	ldrh	r3, [r7, #6]
 8019cbc:	2bff      	cmp	r3, #255	; 0xff
 8019cbe:	d805      	bhi.n	8019ccc <ff_convert+0x30>
 8019cc0:	88fb      	ldrh	r3, [r7, #6]
 8019cc2:	3b80      	subs	r3, #128	; 0x80
 8019cc4:	4a12      	ldr	r2, [pc, #72]	; (8019d10 <ff_convert+0x74>)
 8019cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cca:	e000      	b.n	8019cce <ff_convert+0x32>
 8019ccc:	2300      	movs	r3, #0
 8019cce:	81fb      	strh	r3, [r7, #14]
 8019cd0:	e016      	b.n	8019d00 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	81fb      	strh	r3, [r7, #14]
 8019cd6:	e009      	b.n	8019cec <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8019cd8:	89fb      	ldrh	r3, [r7, #14]
 8019cda:	4a0d      	ldr	r2, [pc, #52]	; (8019d10 <ff_convert+0x74>)
 8019cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ce0:	88fa      	ldrh	r2, [r7, #6]
 8019ce2:	429a      	cmp	r2, r3
 8019ce4:	d006      	beq.n	8019cf4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8019ce6:	89fb      	ldrh	r3, [r7, #14]
 8019ce8:	3301      	adds	r3, #1
 8019cea:	81fb      	strh	r3, [r7, #14]
 8019cec:	89fb      	ldrh	r3, [r7, #14]
 8019cee:	2b7f      	cmp	r3, #127	; 0x7f
 8019cf0:	d9f2      	bls.n	8019cd8 <ff_convert+0x3c>
 8019cf2:	e000      	b.n	8019cf6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8019cf4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8019cf6:	89fb      	ldrh	r3, [r7, #14]
 8019cf8:	3380      	adds	r3, #128	; 0x80
 8019cfa:	b29b      	uxth	r3, r3
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8019d00:	89fb      	ldrh	r3, [r7, #14]
}
 8019d02:	4618      	mov	r0, r3
 8019d04:	3714      	adds	r7, #20
 8019d06:	46bd      	mov	sp, r7
 8019d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d0c:	4770      	bx	lr
 8019d0e:	bf00      	nop
 8019d10:	08021bb0 	.word	0x08021bb0

08019d14 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8019d14:	b480      	push	{r7}
 8019d16:	b087      	sub	sp, #28
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8019d1e:	88fb      	ldrh	r3, [r7, #6]
 8019d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019d24:	d201      	bcs.n	8019d2a <ff_wtoupper+0x16>
 8019d26:	4b3e      	ldr	r3, [pc, #248]	; (8019e20 <ff_wtoupper+0x10c>)
 8019d28:	e000      	b.n	8019d2c <ff_wtoupper+0x18>
 8019d2a:	4b3e      	ldr	r3, [pc, #248]	; (8019e24 <ff_wtoupper+0x110>)
 8019d2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	1c9a      	adds	r2, r3, #2
 8019d32:	617a      	str	r2, [r7, #20]
 8019d34:	881b      	ldrh	r3, [r3, #0]
 8019d36:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8019d38:	8a7b      	ldrh	r3, [r7, #18]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d068      	beq.n	8019e10 <ff_wtoupper+0xfc>
 8019d3e:	88fa      	ldrh	r2, [r7, #6]
 8019d40:	8a7b      	ldrh	r3, [r7, #18]
 8019d42:	429a      	cmp	r2, r3
 8019d44:	d364      	bcc.n	8019e10 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8019d46:	697b      	ldr	r3, [r7, #20]
 8019d48:	1c9a      	adds	r2, r3, #2
 8019d4a:	617a      	str	r2, [r7, #20]
 8019d4c:	881b      	ldrh	r3, [r3, #0]
 8019d4e:	823b      	strh	r3, [r7, #16]
 8019d50:	8a3b      	ldrh	r3, [r7, #16]
 8019d52:	0a1b      	lsrs	r3, r3, #8
 8019d54:	81fb      	strh	r3, [r7, #14]
 8019d56:	8a3b      	ldrh	r3, [r7, #16]
 8019d58:	b2db      	uxtb	r3, r3
 8019d5a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8019d5c:	88fa      	ldrh	r2, [r7, #6]
 8019d5e:	8a79      	ldrh	r1, [r7, #18]
 8019d60:	8a3b      	ldrh	r3, [r7, #16]
 8019d62:	440b      	add	r3, r1
 8019d64:	429a      	cmp	r2, r3
 8019d66:	da49      	bge.n	8019dfc <ff_wtoupper+0xe8>
			switch (cmd) {
 8019d68:	89fb      	ldrh	r3, [r7, #14]
 8019d6a:	2b08      	cmp	r3, #8
 8019d6c:	d84f      	bhi.n	8019e0e <ff_wtoupper+0xfa>
 8019d6e:	a201      	add	r2, pc, #4	; (adr r2, 8019d74 <ff_wtoupper+0x60>)
 8019d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d74:	08019d99 	.word	0x08019d99
 8019d78:	08019dab 	.word	0x08019dab
 8019d7c:	08019dc1 	.word	0x08019dc1
 8019d80:	08019dc9 	.word	0x08019dc9
 8019d84:	08019dd1 	.word	0x08019dd1
 8019d88:	08019dd9 	.word	0x08019dd9
 8019d8c:	08019de1 	.word	0x08019de1
 8019d90:	08019de9 	.word	0x08019de9
 8019d94:	08019df1 	.word	0x08019df1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8019d98:	88fa      	ldrh	r2, [r7, #6]
 8019d9a:	8a7b      	ldrh	r3, [r7, #18]
 8019d9c:	1ad3      	subs	r3, r2, r3
 8019d9e:	005b      	lsls	r3, r3, #1
 8019da0:	697a      	ldr	r2, [r7, #20]
 8019da2:	4413      	add	r3, r2
 8019da4:	881b      	ldrh	r3, [r3, #0]
 8019da6:	80fb      	strh	r3, [r7, #6]
 8019da8:	e027      	b.n	8019dfa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8019daa:	88fa      	ldrh	r2, [r7, #6]
 8019dac:	8a7b      	ldrh	r3, [r7, #18]
 8019dae:	1ad3      	subs	r3, r2, r3
 8019db0:	b29b      	uxth	r3, r3
 8019db2:	f003 0301 	and.w	r3, r3, #1
 8019db6:	b29b      	uxth	r3, r3
 8019db8:	88fa      	ldrh	r2, [r7, #6]
 8019dba:	1ad3      	subs	r3, r2, r3
 8019dbc:	80fb      	strh	r3, [r7, #6]
 8019dbe:	e01c      	b.n	8019dfa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8019dc0:	88fb      	ldrh	r3, [r7, #6]
 8019dc2:	3b10      	subs	r3, #16
 8019dc4:	80fb      	strh	r3, [r7, #6]
 8019dc6:	e018      	b.n	8019dfa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8019dc8:	88fb      	ldrh	r3, [r7, #6]
 8019dca:	3b20      	subs	r3, #32
 8019dcc:	80fb      	strh	r3, [r7, #6]
 8019dce:	e014      	b.n	8019dfa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8019dd0:	88fb      	ldrh	r3, [r7, #6]
 8019dd2:	3b30      	subs	r3, #48	; 0x30
 8019dd4:	80fb      	strh	r3, [r7, #6]
 8019dd6:	e010      	b.n	8019dfa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8019dd8:	88fb      	ldrh	r3, [r7, #6]
 8019dda:	3b1a      	subs	r3, #26
 8019ddc:	80fb      	strh	r3, [r7, #6]
 8019dde:	e00c      	b.n	8019dfa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8019de0:	88fb      	ldrh	r3, [r7, #6]
 8019de2:	3308      	adds	r3, #8
 8019de4:	80fb      	strh	r3, [r7, #6]
 8019de6:	e008      	b.n	8019dfa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8019de8:	88fb      	ldrh	r3, [r7, #6]
 8019dea:	3b50      	subs	r3, #80	; 0x50
 8019dec:	80fb      	strh	r3, [r7, #6]
 8019dee:	e004      	b.n	8019dfa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8019df0:	88fb      	ldrh	r3, [r7, #6]
 8019df2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8019df6:	80fb      	strh	r3, [r7, #6]
 8019df8:	bf00      	nop
			}
			break;
 8019dfa:	e008      	b.n	8019e0e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8019dfc:	89fb      	ldrh	r3, [r7, #14]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d195      	bne.n	8019d2e <ff_wtoupper+0x1a>
 8019e02:	8a3b      	ldrh	r3, [r7, #16]
 8019e04:	005b      	lsls	r3, r3, #1
 8019e06:	697a      	ldr	r2, [r7, #20]
 8019e08:	4413      	add	r3, r2
 8019e0a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8019e0c:	e78f      	b.n	8019d2e <ff_wtoupper+0x1a>
			break;
 8019e0e:	bf00      	nop
	}

	return chr;
 8019e10:	88fb      	ldrh	r3, [r7, #6]
}
 8019e12:	4618      	mov	r0, r3
 8019e14:	371c      	adds	r7, #28
 8019e16:	46bd      	mov	sp, r7
 8019e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e1c:	4770      	bx	lr
 8019e1e:	bf00      	nop
 8019e20:	08021cb0 	.word	0x08021cb0
 8019e24:	08021ea4 	.word	0x08021ea4

08019e28 <Mount_SD>:
//			}
//	}
//}

FRESULT Mount_SD (const TCHAR* path)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b082      	sub	sp, #8
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8019e30:	2201      	movs	r2, #1
 8019e32:	6879      	ldr	r1, [r7, #4]
 8019e34:	480e      	ldr	r0, [pc, #56]	; (8019e70 <Mount_SD+0x48>)
 8019e36:	f7ff fa7b 	bl	8019330 <f_mount>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	461a      	mov	r2, r3
 8019e3e:	4b0d      	ldr	r3, [pc, #52]	; (8019e74 <Mount_SD+0x4c>)
 8019e40:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8019e42:	4b0c      	ldr	r3, [pc, #48]	; (8019e74 <Mount_SD+0x4c>)
 8019e44:	781b      	ldrb	r3, [r3, #0]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d006      	beq.n	8019e58 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d009      	beq.n	8019e64 <Mount_SD+0x3c>
 8019e50:	4809      	ldr	r0, [pc, #36]	; (8019e78 <Mount_SD+0x50>)
 8019e52:	f002 fbb3 	bl	801c5bc <puts>
 8019e56:	e005      	b.n	8019e64 <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 8019e58:	2300      	movs	r3, #0
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d002      	beq.n	8019e64 <Mount_SD+0x3c>
 8019e5e:	4807      	ldr	r0, [pc, #28]	; (8019e7c <Mount_SD+0x54>)
 8019e60:	f002 fbac 	bl	801c5bc <puts>

	return fresult;
 8019e64:	4b03      	ldr	r3, [pc, #12]	; (8019e74 <Mount_SD+0x4c>)
 8019e66:	781b      	ldrb	r3, [r3, #0]
}
 8019e68:	4618      	mov	r0, r3
 8019e6a:	3708      	adds	r7, #8
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}
 8019e70:	20001cc0 	.word	0x20001cc0
 8019e74:	2000223c 	.word	0x2000223c
 8019e78:	0802131c 	.word	0x0802131c
 8019e7c:	0802133c 	.word	0x0802133c

08019e80 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8019e80:	b580      	push	{r7, lr}
 8019e82:	b082      	sub	sp, #8
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8019e88:	2201      	movs	r2, #1
 8019e8a:	6879      	ldr	r1, [r7, #4]
 8019e8c:	2000      	movs	r0, #0
 8019e8e:	f7ff fa4f 	bl	8019330 <f_mount>
 8019e92:	4603      	mov	r3, r0
 8019e94:	461a      	mov	r2, r3
 8019e96:	4b0b      	ldr	r3, [pc, #44]	; (8019ec4 <Unmount_SD+0x44>)
 8019e98:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8019e9a:	4b0a      	ldr	r3, [pc, #40]	; (8019ec4 <Unmount_SD+0x44>)
 8019e9c:	781b      	ldrb	r3, [r3, #0]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d106      	bne.n	8019eb0 <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 8019ea2:	2300      	movs	r3, #0
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d009      	beq.n	8019ebc <Unmount_SD+0x3c>
 8019ea8:	4807      	ldr	r0, [pc, #28]	; (8019ec8 <Unmount_SD+0x48>)
 8019eaa:	f002 fb87 	bl	801c5bc <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 8019eae:	e005      	b.n	8019ebc <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d002      	beq.n	8019ebc <Unmount_SD+0x3c>
 8019eb6:	4805      	ldr	r0, [pc, #20]	; (8019ecc <Unmount_SD+0x4c>)
 8019eb8:	f002 fb80 	bl	801c5bc <puts>
}
 8019ebc:	bf00      	nop
 8019ebe:	3708      	adds	r7, #8
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}
 8019ec4:	2000223c 	.word	0x2000223c
 8019ec8:	0802135c 	.word	0x0802135c
 8019ecc:	08021380 	.word	0x08021380

08019ed0 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b0a8      	sub	sp, #160	; 0xa0
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat (name, &fno);
 8019ed8:	4941      	ldr	r1, [pc, #260]	; (8019fe0 <Create_File+0x110>)
 8019eda:	6878      	ldr	r0, [r7, #4]
 8019edc:	f7ff fe49 	bl	8019b72 <f_stat>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	461a      	mov	r2, r3
 8019ee4:	4b3f      	ldr	r3, [pc, #252]	; (8019fe4 <Create_File+0x114>)
 8019ee6:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8019ee8:	4b3e      	ldr	r3, [pc, #248]	; (8019fe4 <Create_File+0x114>)
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d114      	bne.n	8019f1a <Create_File+0x4a>
	{
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 8019ef0:	4b3d      	ldr	r3, [pc, #244]	; (8019fe8 <Create_File+0x118>)
 8019ef2:	2201      	movs	r2, #1
 8019ef4:	701a      	strb	r2, [r3, #0]

		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 8019ef6:	f107 0308 	add.w	r3, r7, #8
 8019efa:	687a      	ldr	r2, [r7, #4]
 8019efc:	493b      	ldr	r1, [pc, #236]	; (8019fec <Create_File+0x11c>)
 8019efe:	4618      	mov	r0, r3
 8019f00:	f002 fb7a 	bl	801c5f8 <siprintf>
		if(sdioPrints) printf(buf);
 8019f04:	2300      	movs	r3, #0
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d004      	beq.n	8019f14 <Create_File+0x44>
 8019f0a:	f107 0308 	add.w	r3, r7, #8
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f002 face 	bl	801c4b0 <iprintf>

	    return fresult;
 8019f14:	4b33      	ldr	r3, [pc, #204]	; (8019fe4 <Create_File+0x114>)
 8019f16:	781b      	ldrb	r3, [r3, #0]
 8019f18:	e05d      	b.n	8019fd6 <Create_File+0x106>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8019f1a:	220b      	movs	r2, #11
 8019f1c:	6879      	ldr	r1, [r7, #4]
 8019f1e:	4834      	ldr	r0, [pc, #208]	; (8019ff0 <Create_File+0x120>)
 8019f20:	f7ff fa4c 	bl	80193bc <f_open>
 8019f24:	4603      	mov	r3, r0
 8019f26:	461a      	mov	r2, r3
 8019f28:	4b2e      	ldr	r3, [pc, #184]	; (8019fe4 <Create_File+0x114>)
 8019f2a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8019f2c:	4b2d      	ldr	r3, [pc, #180]	; (8019fe4 <Create_File+0x114>)
 8019f2e:	781b      	ldrb	r3, [r3, #0]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d013      	beq.n	8019f5c <Create_File+0x8c>
		{

			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 8019f34:	4b2b      	ldr	r3, [pc, #172]	; (8019fe4 <Create_File+0x114>)
 8019f36:	781b      	ldrb	r3, [r3, #0]
 8019f38:	461a      	mov	r2, r3
 8019f3a:	f107 0008 	add.w	r0, r7, #8
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	492c      	ldr	r1, [pc, #176]	; (8019ff4 <Create_File+0x124>)
 8019f42:	f002 fb59 	bl	801c5f8 <siprintf>
			if(sdioPrints) printf(buf);
 8019f46:	2300      	movs	r3, #0
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d004      	beq.n	8019f56 <Create_File+0x86>
 8019f4c:	f107 0308 	add.w	r3, r7, #8
 8019f50:	4618      	mov	r0, r3
 8019f52:	f002 faad 	bl	801c4b0 <iprintf>

		    return fresult;
 8019f56:	4b23      	ldr	r3, [pc, #140]	; (8019fe4 <Create_File+0x114>)
 8019f58:	781b      	ldrb	r3, [r3, #0]
 8019f5a:	e03c      	b.n	8019fd6 <Create_File+0x106>
		}
		else
		{

			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8019f5c:	f107 0308 	add.w	r3, r7, #8
 8019f60:	687a      	ldr	r2, [r7, #4]
 8019f62:	4925      	ldr	r1, [pc, #148]	; (8019ff8 <Create_File+0x128>)
 8019f64:	4618      	mov	r0, r3
 8019f66:	f002 fb47 	bl	801c5f8 <siprintf>
			if(sdioPrints) printf(buf);
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d004      	beq.n	8019f7a <Create_File+0xaa>
 8019f70:	f107 0308 	add.w	r3, r7, #8
 8019f74:	4618      	mov	r0, r3
 8019f76:	f002 fa9b 	bl	801c4b0 <iprintf>

		}

		fresult = f_close(&fil);
 8019f7a:	481d      	ldr	r0, [pc, #116]	; (8019ff0 <Create_File+0x120>)
 8019f7c:	f7ff fdcf 	bl	8019b1e <f_close>
 8019f80:	4603      	mov	r3, r0
 8019f82:	461a      	mov	r2, r3
 8019f84:	4b17      	ldr	r3, [pc, #92]	; (8019fe4 <Create_File+0x114>)
 8019f86:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8019f88:	4b16      	ldr	r3, [pc, #88]	; (8019fe4 <Create_File+0x114>)
 8019f8a:	781b      	ldrb	r3, [r3, #0]
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d011      	beq.n	8019fb4 <Create_File+0xe4>
		{

			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 8019f90:	4b14      	ldr	r3, [pc, #80]	; (8019fe4 <Create_File+0x114>)
 8019f92:	781b      	ldrb	r3, [r3, #0]
 8019f94:	461a      	mov	r2, r3
 8019f96:	f107 0008 	add.w	r0, r7, #8
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	4917      	ldr	r1, [pc, #92]	; (8019ffc <Create_File+0x12c>)
 8019f9e:	f002 fb2b 	bl	801c5f8 <siprintf>
			if(sdioPrints) printf(buf);
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d014      	beq.n	8019fd2 <Create_File+0x102>
 8019fa8:	f107 0308 	add.w	r3, r7, #8
 8019fac:	4618      	mov	r0, r3
 8019fae:	f002 fa7f 	bl	801c4b0 <iprintf>
 8019fb2:	e00e      	b.n	8019fd2 <Create_File+0x102>

		}
		else
		{

			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8019fb4:	f107 0308 	add.w	r3, r7, #8
 8019fb8:	687a      	ldr	r2, [r7, #4]
 8019fba:	4911      	ldr	r1, [pc, #68]	; (801a000 <Create_File+0x130>)
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	f002 fb1b 	bl	801c5f8 <siprintf>
			if(sdioPrints) printf(buf);
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d004      	beq.n	8019fd2 <Create_File+0x102>
 8019fc8:	f107 0308 	add.w	r3, r7, #8
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f002 fa6f 	bl	801c4b0 <iprintf>

		}
	}
    return fresult;
 8019fd2:	4b04      	ldr	r3, [pc, #16]	; (8019fe4 <Create_File+0x114>)
 8019fd4:	781b      	ldrb	r3, [r3, #0]
}
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	37a0      	adds	r7, #160	; 0xa0
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bd80      	pop	{r7, pc}
 8019fde:	bf00      	nop
 8019fe0:	20002124 	.word	0x20002124
 8019fe4:	2000223c 	.word	0x2000223c
 8019fe8:	200022ac 	.word	0x200022ac
 8019fec:	08021544 	.word	0x08021544
 8019ff0:	20001ef4 	.word	0x20001ef4
 8019ff4:	08021578 	.word	0x08021578
 8019ff8:	080215a0 	.word	0x080215a0
 8019ffc:	080215e0 	.word	0x080215e0
 801a000:	08021524 	.word	0x08021524

0801a004 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b0a8      	sub	sp, #160	; 0xa0
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
 801a00c:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 801a00e:	4951      	ldr	r1, [pc, #324]	; (801a154 <Update_File+0x150>)
 801a010:	6878      	ldr	r0, [r7, #4]
 801a012:	f7ff fdae 	bl	8019b72 <f_stat>
 801a016:	4603      	mov	r3, r0
 801a018:	461a      	mov	r2, r3
 801a01a:	4b4f      	ldr	r3, [pc, #316]	; (801a158 <Update_File+0x154>)
 801a01c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 801a01e:	4b4e      	ldr	r3, [pc, #312]	; (801a158 <Update_File+0x154>)
 801a020:	781b      	ldrb	r3, [r3, #0]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d011      	beq.n	801a04a <Update_File+0x46>
	{

		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 801a026:	f107 0308 	add.w	r3, r7, #8
 801a02a:	687a      	ldr	r2, [r7, #4]
 801a02c:	494b      	ldr	r1, [pc, #300]	; (801a15c <Update_File+0x158>)
 801a02e:	4618      	mov	r0, r3
 801a030:	f002 fae2 	bl	801c5f8 <siprintf>
		if(sdioPrints) printf (buf);
 801a034:	2300      	movs	r3, #0
 801a036:	2b00      	cmp	r3, #0
 801a038:	d004      	beq.n	801a044 <Update_File+0x40>
 801a03a:	f107 0308 	add.w	r3, r7, #8
 801a03e:	4618      	mov	r0, r3
 801a040:	f002 fa36 	bl	801c4b0 <iprintf>

	    return fresult;
 801a044:	4b44      	ldr	r3, [pc, #272]	; (801a158 <Update_File+0x154>)
 801a046:	781b      	ldrb	r3, [r3, #0]
 801a048:	e080      	b.n	801a14c <Update_File+0x148>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801a04a:	2232      	movs	r2, #50	; 0x32
 801a04c:	6879      	ldr	r1, [r7, #4]
 801a04e:	4844      	ldr	r0, [pc, #272]	; (801a160 <Update_File+0x15c>)
 801a050:	f7ff f9b4 	bl	80193bc <f_open>
 801a054:	4603      	mov	r3, r0
 801a056:	461a      	mov	r2, r3
 801a058:	4b3f      	ldr	r3, [pc, #252]	; (801a158 <Update_File+0x154>)
 801a05a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 801a05c:	4b3e      	ldr	r3, [pc, #248]	; (801a158 <Update_File+0x154>)
 801a05e:	781b      	ldrb	r3, [r3, #0]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d013      	beq.n	801a08c <Update_File+0x88>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 801a064:	4b3c      	ldr	r3, [pc, #240]	; (801a158 <Update_File+0x154>)
 801a066:	781b      	ldrb	r3, [r3, #0]
 801a068:	461a      	mov	r2, r3
 801a06a:	f107 0008 	add.w	r0, r7, #8
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	493c      	ldr	r1, [pc, #240]	; (801a164 <Update_File+0x160>)
 801a072:	f002 fac1 	bl	801c5f8 <siprintf>
	    	if(sdioPrints) printf(buf);
 801a076:	2300      	movs	r3, #0
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d004      	beq.n	801a086 <Update_File+0x82>
 801a07c:	f107 0308 	add.w	r3, r7, #8
 801a080:	4618      	mov	r0, r3
 801a082:	f002 fa15 	bl	801c4b0 <iprintf>

	        return fresult;
 801a086:	4b34      	ldr	r3, [pc, #208]	; (801a158 <Update_File+0x154>)
 801a088:	781b      	ldrb	r3, [r3, #0]
 801a08a:	e05f      	b.n	801a14c <Update_File+0x148>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 801a08c:	6838      	ldr	r0, [r7, #0]
 801a08e:	f7e6 f8b1 	bl	80001f4 <strlen>
 801a092:	4602      	mov	r2, r0
 801a094:	4b34      	ldr	r3, [pc, #208]	; (801a168 <Update_File+0x164>)
 801a096:	6839      	ldr	r1, [r7, #0]
 801a098:	4831      	ldr	r0, [pc, #196]	; (801a160 <Update_File+0x15c>)
 801a09a:	f7ff fb4d 	bl	8019738 <f_write>
 801a09e:	4603      	mov	r3, r0
 801a0a0:	461a      	mov	r2, r3
 801a0a2:	4b2d      	ldr	r3, [pc, #180]	; (801a158 <Update_File+0x154>)
 801a0a4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 801a0a6:	4b2c      	ldr	r3, [pc, #176]	; (801a158 <Update_File+0x154>)
 801a0a8:	781b      	ldrb	r3, [r3, #0]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d011      	beq.n	801a0d2 <Update_File+0xce>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 801a0ae:	4b2a      	ldr	r3, [pc, #168]	; (801a158 <Update_File+0x154>)
 801a0b0:	781b      	ldrb	r3, [r3, #0]
 801a0b2:	461a      	mov	r2, r3
 801a0b4:	f107 0008 	add.w	r0, r7, #8
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	492c      	ldr	r1, [pc, #176]	; (801a16c <Update_File+0x168>)
 801a0bc:	f002 fa9c 	bl	801c5f8 <siprintf>
	    	if(sdioPrints) printf(buf);
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d014      	beq.n	801a0f0 <Update_File+0xec>
 801a0c6:	f107 0308 	add.w	r3, r7, #8
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	f002 f9f0 	bl	801c4b0 <iprintf>
 801a0d0:	e00e      	b.n	801a0f0 <Update_File+0xec>
	    }

	    else
	    {

	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 801a0d2:	f107 0308 	add.w	r3, r7, #8
 801a0d6:	687a      	ldr	r2, [r7, #4]
 801a0d8:	4925      	ldr	r1, [pc, #148]	; (801a170 <Update_File+0x16c>)
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f002 fa8c 	bl	801c5f8 <siprintf>
	    	if(sdioPrints) printf(buf);
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d004      	beq.n	801a0f0 <Update_File+0xec>
 801a0e6:	f107 0308 	add.w	r3, r7, #8
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f002 f9e0 	bl	801c4b0 <iprintf>

	    }

	    /* Close file */
	    fresult = f_close(&fil);
 801a0f0:	481b      	ldr	r0, [pc, #108]	; (801a160 <Update_File+0x15c>)
 801a0f2:	f7ff fd14 	bl	8019b1e <f_close>
 801a0f6:	4603      	mov	r3, r0
 801a0f8:	461a      	mov	r2, r3
 801a0fa:	4b17      	ldr	r3, [pc, #92]	; (801a158 <Update_File+0x154>)
 801a0fc:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 801a0fe:	4b16      	ldr	r3, [pc, #88]	; (801a158 <Update_File+0x154>)
 801a100:	781b      	ldrb	r3, [r3, #0]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d011      	beq.n	801a12a <Update_File+0x126>
	    {

	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 801a106:	4b14      	ldr	r3, [pc, #80]	; (801a158 <Update_File+0x154>)
 801a108:	781b      	ldrb	r3, [r3, #0]
 801a10a:	461a      	mov	r2, r3
 801a10c:	f107 0008 	add.w	r0, r7, #8
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	4918      	ldr	r1, [pc, #96]	; (801a174 <Update_File+0x170>)
 801a114:	f002 fa70 	bl	801c5f8 <siprintf>
	    	if(sdioPrints) printf(buf);
 801a118:	2300      	movs	r3, #0
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d014      	beq.n	801a148 <Update_File+0x144>
 801a11e:	f107 0308 	add.w	r3, r7, #8
 801a122:	4618      	mov	r0, r3
 801a124:	f002 f9c4 	bl	801c4b0 <iprintf>
 801a128:	e00e      	b.n	801a148 <Update_File+0x144>

	    }
	    else
	    {

	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 801a12a:	f107 0308 	add.w	r3, r7, #8
 801a12e:	687a      	ldr	r2, [r7, #4]
 801a130:	4911      	ldr	r1, [pc, #68]	; (801a178 <Update_File+0x174>)
 801a132:	4618      	mov	r0, r3
 801a134:	f002 fa60 	bl	801c5f8 <siprintf>
	    	if(sdioPrints) printf(buf);
 801a138:	2300      	movs	r3, #0
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d004      	beq.n	801a148 <Update_File+0x144>
 801a13e:	f107 0308 	add.w	r3, r7, #8
 801a142:	4618      	mov	r0, r3
 801a144:	f002 f9b4 	bl	801c4b0 <iprintf>

	     }
	}
    return fresult;
 801a148:	4b03      	ldr	r3, [pc, #12]	; (801a158 <Update_File+0x154>)
 801a14a:	781b      	ldrb	r3, [r3, #0]
}
 801a14c:	4618      	mov	r0, r3
 801a14e:	37a0      	adds	r7, #160	; 0xa0
 801a150:	46bd      	mov	sp, r7
 801a152:	bd80      	pop	{r7, pc}
 801a154:	20002124 	.word	0x20002124
 801a158:	2000223c 	.word	0x2000223c
 801a15c:	080213d4 	.word	0x080213d4
 801a160:	20001ef4 	.word	0x20001ef4
 801a164:	080213f4 	.word	0x080213f4
 801a168:	20002240 	.word	0x20002240
 801a16c:	08021604 	.word	0x08021604
 801a170:	0802162c 	.word	0x0802162c
 801a174:	080214fc 	.word	0x080214fc
 801a178:	08021524 	.word	0x08021524

0801a17c <json_update>:

char filename_with_format[100];
uint8_t file_already_exist = 0;
char buffer[255];

void json_update() {
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b088      	sub	sp, #32
 801a180:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a182:	f107 0314 	add.w	r3, r7, #20
 801a186:	2200      	movs	r2, #0
 801a188:	4619      	mov	r1, r3
 801a18a:	4889      	ldr	r0, [pc, #548]	; (801a3b0 <json_update+0x234>)
 801a18c:	f7ef f858 	bl	8009240 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a190:	463b      	mov	r3, r7
 801a192:	2200      	movs	r2, #0
 801a194:	4619      	mov	r1, r3
 801a196:	4886      	ldr	r0, [pc, #536]	; (801a3b0 <json_update+0x234>)
 801a198:	f7ee ff70 	bl	800907c <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 801a19c:	4885      	ldr	r0, [pc, #532]	; (801a3b4 <json_update+0x238>)
 801a19e:	f7ff fe43 	bl	8019e28 <Mount_SD>
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	461a      	mov	r2, r3
 801a1a6:	4b84      	ldr	r3, [pc, #528]	; (801a3b8 <json_update+0x23c>)
 801a1a8:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a1aa:	4b83      	ldr	r3, [pc, #524]	; (801a3b8 <json_update+0x23c>)
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	f040 80f3 	bne.w	801a39a <json_update+0x21e>
		//CAN Bus
		sprintf(buffer, "{\n");
 801a1b4:	4981      	ldr	r1, [pc, #516]	; (801a3bc <json_update+0x240>)
 801a1b6:	4882      	ldr	r0, [pc, #520]	; (801a3c0 <json_update+0x244>)
 801a1b8:	f002 fa1e 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a1bc:	4980      	ldr	r1, [pc, #512]	; (801a3c0 <json_update+0x244>)
 801a1be:	4881      	ldr	r0, [pc, #516]	; (801a3c4 <json_update+0x248>)
 801a1c0:	f7ff ff20 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a1c4:	22ff      	movs	r2, #255	; 0xff
 801a1c6:	2100      	movs	r1, #0
 801a1c8:	487d      	ldr	r0, [pc, #500]	; (801a3c0 <json_update+0x244>)
 801a1ca:	f001 fa0f 	bl	801b5ec <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801a1ce:	f7e8 f8a1 	bl	8002314 <ver_GetUid>
 801a1d2:	4603      	mov	r3, r0
 801a1d4:	461a      	mov	r2, r3
 801a1d6:	497c      	ldr	r1, [pc, #496]	; (801a3c8 <json_update+0x24c>)
 801a1d8:	4879      	ldr	r0, [pc, #484]	; (801a3c0 <json_update+0x244>)
 801a1da:	f002 fa0d 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a1de:	4978      	ldr	r1, [pc, #480]	; (801a3c0 <json_update+0x244>)
 801a1e0:	4878      	ldr	r0, [pc, #480]	; (801a3c4 <json_update+0x248>)
 801a1e2:	f7ff ff0f 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a1e6:	22ff      	movs	r2, #255	; 0xff
 801a1e8:	2100      	movs	r1, #0
 801a1ea:	4875      	ldr	r0, [pc, #468]	; (801a3c0 <json_update+0x244>)
 801a1ec:	f001 f9fe 	bl	801b5ec <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801a1f0:	4a76      	ldr	r2, [pc, #472]	; (801a3cc <json_update+0x250>)
 801a1f2:	4977      	ldr	r1, [pc, #476]	; (801a3d0 <json_update+0x254>)
 801a1f4:	4872      	ldr	r0, [pc, #456]	; (801a3c0 <json_update+0x244>)
 801a1f6:	f002 f9ff 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a1fa:	4971      	ldr	r1, [pc, #452]	; (801a3c0 <json_update+0x244>)
 801a1fc:	4871      	ldr	r0, [pc, #452]	; (801a3c4 <json_update+0x248>)
 801a1fe:	f7ff ff01 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a202:	22ff      	movs	r2, #255	; 0xff
 801a204:	2100      	movs	r1, #0
 801a206:	486e      	ldr	r0, [pc, #440]	; (801a3c0 <json_update+0x244>)
 801a208:	f001 f9f0 	bl	801b5ec <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a20c:	783b      	ldrb	r3, [r7, #0]
 801a20e:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801a210:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a212:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801a214:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a216:	9300      	str	r3, [sp, #0]
 801a218:	460b      	mov	r3, r1
 801a21a:	496e      	ldr	r1, [pc, #440]	; (801a3d4 <json_update+0x258>)
 801a21c:	4868      	ldr	r0, [pc, #416]	; (801a3c0 <json_update+0x244>)
 801a21e:	f002 f9eb 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a222:	4967      	ldr	r1, [pc, #412]	; (801a3c0 <json_update+0x244>)
 801a224:	4867      	ldr	r0, [pc, #412]	; (801a3c4 <json_update+0x248>)
 801a226:	f7ff feed 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a22a:	22ff      	movs	r2, #255	; 0xff
 801a22c:	2100      	movs	r1, #0
 801a22e:	4864      	ldr	r0, [pc, #400]	; (801a3c0 <json_update+0x244>)
 801a230:	f001 f9dc 	bl	801b5ec <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801a234:	4a68      	ldr	r2, [pc, #416]	; (801a3d8 <json_update+0x25c>)
 801a236:	4969      	ldr	r1, [pc, #420]	; (801a3dc <json_update+0x260>)
 801a238:	4861      	ldr	r0, [pc, #388]	; (801a3c0 <json_update+0x244>)
 801a23a:	f002 f9dd 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a23e:	4960      	ldr	r1, [pc, #384]	; (801a3c0 <json_update+0x244>)
 801a240:	4860      	ldr	r0, [pc, #384]	; (801a3c4 <json_update+0x248>)
 801a242:	f7ff fedf 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a246:	22ff      	movs	r2, #255	; 0xff
 801a248:	2100      	movs	r1, #0
 801a24a:	485d      	ldr	r0, [pc, #372]	; (801a3c0 <json_update+0x244>)
 801a24c:	f001 f9ce 	bl	801b5ec <memset>
		sprintf(buffer, "\"name\":\"%s\",\n", _Flash_Packet.name);
 801a250:	4a63      	ldr	r2, [pc, #396]	; (801a3e0 <json_update+0x264>)
 801a252:	4964      	ldr	r1, [pc, #400]	; (801a3e4 <json_update+0x268>)
 801a254:	485a      	ldr	r0, [pc, #360]	; (801a3c0 <json_update+0x244>)
 801a256:	f002 f9cf 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a25a:	4959      	ldr	r1, [pc, #356]	; (801a3c0 <json_update+0x244>)
 801a25c:	4859      	ldr	r0, [pc, #356]	; (801a3c4 <json_update+0x248>)
 801a25e:	f7ff fed1 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a262:	22ff      	movs	r2, #255	; 0xff
 801a264:	2100      	movs	r1, #0
 801a266:	4856      	ldr	r0, [pc, #344]	; (801a3c0 <json_update+0x244>)
 801a268:	f001 f9c0 	bl	801b5ec <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801a26c:	4a5e      	ldr	r2, [pc, #376]	; (801a3e8 <json_update+0x26c>)
 801a26e:	495f      	ldr	r1, [pc, #380]	; (801a3ec <json_update+0x270>)
 801a270:	4853      	ldr	r0, [pc, #332]	; (801a3c0 <json_update+0x244>)
 801a272:	f002 f9c1 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a276:	4952      	ldr	r1, [pc, #328]	; (801a3c0 <json_update+0x244>)
 801a278:	4852      	ldr	r0, [pc, #328]	; (801a3c4 <json_update+0x248>)
 801a27a:	f7ff fec3 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a27e:	22ff      	movs	r2, #255	; 0xff
 801a280:	2100      	movs	r1, #0
 801a282:	484f      	ldr	r0, [pc, #316]	; (801a3c0 <json_update+0x244>)
 801a284:	f001 f9b2 	bl	801b5ec <memset>
		sprintf(buffer, "\"co2\":\"%d\",\n", _RunTime_Packet.co2);
 801a288:	4b59      	ldr	r3, [pc, #356]	; (801a3f0 <json_update+0x274>)
 801a28a:	881b      	ldrh	r3, [r3, #0]
 801a28c:	461a      	mov	r2, r3
 801a28e:	4959      	ldr	r1, [pc, #356]	; (801a3f4 <json_update+0x278>)
 801a290:	484b      	ldr	r0, [pc, #300]	; (801a3c0 <json_update+0x244>)
 801a292:	f002 f9b1 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a296:	494a      	ldr	r1, [pc, #296]	; (801a3c0 <json_update+0x244>)
 801a298:	484a      	ldr	r0, [pc, #296]	; (801a3c4 <json_update+0x248>)
 801a29a:	f7ff feb3 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a29e:	22ff      	movs	r2, #255	; 0xff
 801a2a0:	2100      	movs	r1, #0
 801a2a2:	4847      	ldr	r0, [pc, #284]	; (801a3c0 <json_update+0x244>)
 801a2a4:	f001 f9a2 	bl	801b5ec <memset>
		sprintf(buffer, "\"temperature\":\"%ld\",\n",
 801a2a8:	4b51      	ldr	r3, [pc, #324]	; (801a3f0 <json_update+0x274>)
 801a2aa:	685b      	ldr	r3, [r3, #4]
 801a2ac:	461a      	mov	r2, r3
 801a2ae:	4952      	ldr	r1, [pc, #328]	; (801a3f8 <json_update+0x27c>)
 801a2b0:	4843      	ldr	r0, [pc, #268]	; (801a3c0 <json_update+0x244>)
 801a2b2:	f002 f9a1 	bl	801c5f8 <siprintf>
				_RunTime_Packet.temperature);
		Update_File(filename_with_format, buffer);
 801a2b6:	4942      	ldr	r1, [pc, #264]	; (801a3c0 <json_update+0x244>)
 801a2b8:	4842      	ldr	r0, [pc, #264]	; (801a3c4 <json_update+0x248>)
 801a2ba:	f7ff fea3 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a2be:	22ff      	movs	r2, #255	; 0xff
 801a2c0:	2100      	movs	r1, #0
 801a2c2:	483f      	ldr	r0, [pc, #252]	; (801a3c0 <json_update+0x244>)
 801a2c4:	f001 f992 	bl	801b5ec <memset>
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
 801a2c8:	4b49      	ldr	r3, [pc, #292]	; (801a3f0 <json_update+0x274>)
 801a2ca:	689b      	ldr	r3, [r3, #8]
 801a2cc:	461a      	mov	r2, r3
 801a2ce:	494b      	ldr	r1, [pc, #300]	; (801a3fc <json_update+0x280>)
 801a2d0:	483b      	ldr	r0, [pc, #236]	; (801a3c0 <json_update+0x244>)
 801a2d2:	f002 f991 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a2d6:	493a      	ldr	r1, [pc, #232]	; (801a3c0 <json_update+0x244>)
 801a2d8:	483a      	ldr	r0, [pc, #232]	; (801a3c4 <json_update+0x248>)
 801a2da:	f7ff fe93 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a2de:	22ff      	movs	r2, #255	; 0xff
 801a2e0:	2100      	movs	r1, #0
 801a2e2:	4837      	ldr	r0, [pc, #220]	; (801a3c0 <json_update+0x244>)
 801a2e4:	f001 f982 	bl	801b5ec <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801a2e8:	4b41      	ldr	r3, [pc, #260]	; (801a3f0 <json_update+0x274>)
 801a2ea:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d001      	beq.n	801a2f4 <json_update+0x178>
 801a2f0:	4b43      	ldr	r3, [pc, #268]	; (801a400 <json_update+0x284>)
 801a2f2:	e000      	b.n	801a2f6 <json_update+0x17a>
 801a2f4:	4b43      	ldr	r3, [pc, #268]	; (801a404 <json_update+0x288>)
 801a2f6:	461a      	mov	r2, r3
 801a2f8:	4943      	ldr	r1, [pc, #268]	; (801a408 <json_update+0x28c>)
 801a2fa:	4831      	ldr	r0, [pc, #196]	; (801a3c0 <json_update+0x244>)
 801a2fc:	f002 f97c 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a300:	492f      	ldr	r1, [pc, #188]	; (801a3c0 <json_update+0x244>)
 801a302:	4830      	ldr	r0, [pc, #192]	; (801a3c4 <json_update+0x248>)
 801a304:	f7ff fe7e 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a308:	22ff      	movs	r2, #255	; 0xff
 801a30a:	2100      	movs	r1, #0
 801a30c:	482c      	ldr	r0, [pc, #176]	; (801a3c0 <json_update+0x244>)
 801a30e:	f001 f96d 	bl	801b5ec <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801a312:	4b37      	ldr	r3, [pc, #220]	; (801a3f0 <json_update+0x274>)
 801a314:	695b      	ldr	r3, [r3, #20]
 801a316:	4618      	mov	r0, r3
 801a318:	f7e6 f92e 	bl	8000578 <__aeabi_f2d>
 801a31c:	4602      	mov	r2, r0
 801a31e:	460b      	mov	r3, r1
 801a320:	493a      	ldr	r1, [pc, #232]	; (801a40c <json_update+0x290>)
 801a322:	4827      	ldr	r0, [pc, #156]	; (801a3c0 <json_update+0x244>)
 801a324:	f002 f968 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a328:	4925      	ldr	r1, [pc, #148]	; (801a3c0 <json_update+0x244>)
 801a32a:	4826      	ldr	r0, [pc, #152]	; (801a3c4 <json_update+0x248>)
 801a32c:	f7ff fe6a 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a330:	22ff      	movs	r2, #255	; 0xff
 801a332:	2100      	movs	r1, #0
 801a334:	4822      	ldr	r0, [pc, #136]	; (801a3c0 <json_update+0x244>)
 801a336:	f001 f959 	bl	801b5ec <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801a33a:	4935      	ldr	r1, [pc, #212]	; (801a410 <json_update+0x294>)
 801a33c:	4820      	ldr	r0, [pc, #128]	; (801a3c0 <json_update+0x244>)
 801a33e:	f002 f95b 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a342:	491f      	ldr	r1, [pc, #124]	; (801a3c0 <json_update+0x244>)
 801a344:	481f      	ldr	r0, [pc, #124]	; (801a3c4 <json_update+0x248>)
 801a346:	f7ff fe5d 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a34a:	22ff      	movs	r2, #255	; 0xff
 801a34c:	2100      	movs	r1, #0
 801a34e:	481c      	ldr	r0, [pc, #112]	; (801a3c0 <json_update+0x244>)
 801a350:	f001 f94c 	bl	801b5ec <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801a354:	4b26      	ldr	r3, [pc, #152]	; (801a3f0 <json_update+0x274>)
 801a356:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801a358:	4618      	mov	r0, r3
 801a35a:	f7e6 f90d 	bl	8000578 <__aeabi_f2d>
 801a35e:	4602      	mov	r2, r0
 801a360:	460b      	mov	r3, r1
 801a362:	492c      	ldr	r1, [pc, #176]	; (801a414 <json_update+0x298>)
 801a364:	4816      	ldr	r0, [pc, #88]	; (801a3c0 <json_update+0x244>)
 801a366:	f002 f947 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a36a:	4915      	ldr	r1, [pc, #84]	; (801a3c0 <json_update+0x244>)
 801a36c:	4815      	ldr	r0, [pc, #84]	; (801a3c4 <json_update+0x248>)
 801a36e:	f7ff fe49 	bl	801a004 <Update_File>

		//we end it
		memset(buffer,0,sizeof(buffer));
 801a372:	22ff      	movs	r2, #255	; 0xff
 801a374:	2100      	movs	r1, #0
 801a376:	4812      	ldr	r0, [pc, #72]	; (801a3c0 <json_update+0x244>)
 801a378:	f001 f938 	bl	801b5ec <memset>
		sprintf(buffer, "}\n\n");
 801a37c:	4926      	ldr	r1, [pc, #152]	; (801a418 <json_update+0x29c>)
 801a37e:	4810      	ldr	r0, [pc, #64]	; (801a3c0 <json_update+0x244>)
 801a380:	f002 f93a 	bl	801c5f8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a384:	490e      	ldr	r1, [pc, #56]	; (801a3c0 <json_update+0x244>)
 801a386:	480f      	ldr	r0, [pc, #60]	; (801a3c4 <json_update+0x248>)
 801a388:	f7ff fe3c 	bl	801a004 <Update_File>
 801a38c:	4603      	mov	r3, r0
 801a38e:	461a      	mov	r2, r3
 801a390:	4b09      	ldr	r3, [pc, #36]	; (801a3b8 <json_update+0x23c>)
 801a392:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801a394:	4807      	ldr	r0, [pc, #28]	; (801a3b4 <json_update+0x238>)
 801a396:	f7ff fd73 	bl	8019e80 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a39a:	4b07      	ldr	r3, [pc, #28]	; (801a3b8 <json_update+0x23c>)
 801a39c:	781b      	ldrb	r3, [r3, #0]
 801a39e:	b25a      	sxtb	r2, r3
 801a3a0:	4b13      	ldr	r3, [pc, #76]	; (801a3f0 <json_update+0x274>)
 801a3a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 801a3a6:	bf00      	nop
 801a3a8:	3718      	adds	r7, #24
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}
 801a3ae:	bf00      	nop
 801a3b0:	200017c4 	.word	0x200017c4
 801a3b4:	08021718 	.word	0x08021718
 801a3b8:	20002244 	.word	0x20002244
 801a3bc:	0802171c 	.word	0x0802171c
 801a3c0:	200022b0 	.word	0x200022b0
 801a3c4:	20002248 	.word	0x20002248
 801a3c8:	08021720 	.word	0x08021720
 801a3cc:	200013a9 	.word	0x200013a9
 801a3d0:	08021730 	.word	0x08021730
 801a3d4:	0802173c 	.word	0x0802173c
 801a3d8:	200013db 	.word	0x200013db
 801a3dc:	0802175c 	.word	0x0802175c
 801a3e0:	2000140d 	.word	0x2000140d
 801a3e4:	08021770 	.word	0x08021770
 801a3e8:	2000143f 	.word	0x2000143f
 801a3ec:	08021780 	.word	0x08021780
 801a3f0:	20001474 	.word	0x20001474
 801a3f4:	08021790 	.word	0x08021790
 801a3f8:	080217a0 	.word	0x080217a0
 801a3fc:	080217b8 	.word	0x080217b8
 801a400:	080217cc 	.word	0x080217cc
 801a404:	080217d4 	.word	0x080217d4
 801a408:	080217dc 	.word	0x080217dc
 801a40c:	080217ec 	.word	0x080217ec
 801a410:	08021800 	.word	0x08021800
 801a414:	08021810 	.word	0x08021810
 801a418:	08021824 	.word	0x08021824

0801a41c <csv_update>:
void csv_update() {
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b088      	sub	sp, #32
 801a420:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a422:	f107 0314 	add.w	r3, r7, #20
 801a426:	2200      	movs	r2, #0
 801a428:	4619      	mov	r1, r3
 801a42a:	4880      	ldr	r0, [pc, #512]	; (801a62c <csv_update+0x210>)
 801a42c:	f7ee ff08 	bl	8009240 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a430:	463b      	mov	r3, r7
 801a432:	2200      	movs	r2, #0
 801a434:	4619      	mov	r1, r3
 801a436:	487d      	ldr	r0, [pc, #500]	; (801a62c <csv_update+0x210>)
 801a438:	f7ee fe20 	bl	800907c <HAL_RTC_GetTime>
	fresult1 = Mount_SD("/");
 801a43c:	487c      	ldr	r0, [pc, #496]	; (801a630 <csv_update+0x214>)
 801a43e:	f7ff fcf3 	bl	8019e28 <Mount_SD>
 801a442:	4603      	mov	r3, r0
 801a444:	461a      	mov	r2, r3
 801a446:	4b7b      	ldr	r3, [pc, #492]	; (801a634 <csv_update+0x218>)
 801a448:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a44a:	4b7a      	ldr	r3, [pc, #488]	; (801a634 <csv_update+0x218>)
 801a44c:	781b      	ldrb	r3, [r3, #0]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	f040 80e2 	bne.w	801a618 <csv_update+0x1fc>
//		sprintf(buffer, "\n");
//		Update_File(filename_with_format, buffer);



		sprintf(buffer, "%s ,", ver_GetUid());
 801a454:	f7e7 ff5e 	bl	8002314 <ver_GetUid>
 801a458:	4603      	mov	r3, r0
 801a45a:	461a      	mov	r2, r3
 801a45c:	4976      	ldr	r1, [pc, #472]	; (801a638 <csv_update+0x21c>)
 801a45e:	4877      	ldr	r0, [pc, #476]	; (801a63c <csv_update+0x220>)
 801a460:	f002 f8ca 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a464:	4975      	ldr	r1, [pc, #468]	; (801a63c <csv_update+0x220>)
 801a466:	4876      	ldr	r0, [pc, #472]	; (801a640 <csv_update+0x224>)
 801a468:	f7ff fdcc 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a46c:	22ff      	movs	r2, #255	; 0xff
 801a46e:	2100      	movs	r1, #0
 801a470:	4872      	ldr	r0, [pc, #456]	; (801a63c <csv_update+0x220>)
 801a472:	f001 f8bb 	bl	801b5ec <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801a476:	4a73      	ldr	r2, [pc, #460]	; (801a644 <csv_update+0x228>)
 801a478:	496f      	ldr	r1, [pc, #444]	; (801a638 <csv_update+0x21c>)
 801a47a:	4870      	ldr	r0, [pc, #448]	; (801a63c <csv_update+0x220>)
 801a47c:	f002 f8bc 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a480:	496e      	ldr	r1, [pc, #440]	; (801a63c <csv_update+0x220>)
 801a482:	486f      	ldr	r0, [pc, #444]	; (801a640 <csv_update+0x224>)
 801a484:	f7ff fdbe 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a488:	22ff      	movs	r2, #255	; 0xff
 801a48a:	2100      	movs	r1, #0
 801a48c:	486b      	ldr	r0, [pc, #428]	; (801a63c <csv_update+0x220>)
 801a48e:	f001 f8ad 	bl	801b5ec <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes, sTime.Seconds);
 801a492:	783b      	ldrb	r3, [r7, #0]
 801a494:	461a      	mov	r2, r3
 801a496:	787b      	ldrb	r3, [r7, #1]
 801a498:	4619      	mov	r1, r3
 801a49a:	78bb      	ldrb	r3, [r7, #2]
 801a49c:	9300      	str	r3, [sp, #0]
 801a49e:	460b      	mov	r3, r1
 801a4a0:	4969      	ldr	r1, [pc, #420]	; (801a648 <csv_update+0x22c>)
 801a4a2:	4866      	ldr	r0, [pc, #408]	; (801a63c <csv_update+0x220>)
 801a4a4:	f002 f8a8 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a4a8:	4964      	ldr	r1, [pc, #400]	; (801a63c <csv_update+0x220>)
 801a4aa:	4865      	ldr	r0, [pc, #404]	; (801a640 <csv_update+0x224>)
 801a4ac:	f7ff fdaa 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a4b0:	22ff      	movs	r2, #255	; 0xff
 801a4b2:	2100      	movs	r1, #0
 801a4b4:	4861      	ldr	r0, [pc, #388]	; (801a63c <csv_update+0x220>)
 801a4b6:	f001 f899 	bl	801b5ec <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801a4ba:	4a64      	ldr	r2, [pc, #400]	; (801a64c <csv_update+0x230>)
 801a4bc:	495e      	ldr	r1, [pc, #376]	; (801a638 <csv_update+0x21c>)
 801a4be:	485f      	ldr	r0, [pc, #380]	; (801a63c <csv_update+0x220>)
 801a4c0:	f002 f89a 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a4c4:	495d      	ldr	r1, [pc, #372]	; (801a63c <csv_update+0x220>)
 801a4c6:	485e      	ldr	r0, [pc, #376]	; (801a640 <csv_update+0x224>)
 801a4c8:	f7ff fd9c 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a4cc:	22ff      	movs	r2, #255	; 0xff
 801a4ce:	2100      	movs	r1, #0
 801a4d0:	485a      	ldr	r0, [pc, #360]	; (801a63c <csv_update+0x220>)
 801a4d2:	f001 f88b 	bl	801b5ec <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.name);
 801a4d6:	4a5e      	ldr	r2, [pc, #376]	; (801a650 <csv_update+0x234>)
 801a4d8:	4957      	ldr	r1, [pc, #348]	; (801a638 <csv_update+0x21c>)
 801a4da:	4858      	ldr	r0, [pc, #352]	; (801a63c <csv_update+0x220>)
 801a4dc:	f002 f88c 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a4e0:	4956      	ldr	r1, [pc, #344]	; (801a63c <csv_update+0x220>)
 801a4e2:	4857      	ldr	r0, [pc, #348]	; (801a640 <csv_update+0x224>)
 801a4e4:	f7ff fd8e 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a4e8:	22ff      	movs	r2, #255	; 0xff
 801a4ea:	2100      	movs	r1, #0
 801a4ec:	4853      	ldr	r0, [pc, #332]	; (801a63c <csv_update+0x220>)
 801a4ee:	f001 f87d 	bl	801b5ec <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801a4f2:	4a58      	ldr	r2, [pc, #352]	; (801a654 <csv_update+0x238>)
 801a4f4:	4950      	ldr	r1, [pc, #320]	; (801a638 <csv_update+0x21c>)
 801a4f6:	4851      	ldr	r0, [pc, #324]	; (801a63c <csv_update+0x220>)
 801a4f8:	f002 f87e 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a4fc:	494f      	ldr	r1, [pc, #316]	; (801a63c <csv_update+0x220>)
 801a4fe:	4850      	ldr	r0, [pc, #320]	; (801a640 <csv_update+0x224>)
 801a500:	f7ff fd80 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a504:	22ff      	movs	r2, #255	; 0xff
 801a506:	2100      	movs	r1, #0
 801a508:	484c      	ldr	r0, [pc, #304]	; (801a63c <csv_update+0x220>)
 801a50a:	f001 f86f 	bl	801b5ec <memset>
		sprintf(buffer, "%d ,", _RunTime_Packet.co2);
 801a50e:	4b52      	ldr	r3, [pc, #328]	; (801a658 <csv_update+0x23c>)
 801a510:	881b      	ldrh	r3, [r3, #0]
 801a512:	461a      	mov	r2, r3
 801a514:	4951      	ldr	r1, [pc, #324]	; (801a65c <csv_update+0x240>)
 801a516:	4849      	ldr	r0, [pc, #292]	; (801a63c <csv_update+0x220>)
 801a518:	f002 f86e 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a51c:	4947      	ldr	r1, [pc, #284]	; (801a63c <csv_update+0x220>)
 801a51e:	4848      	ldr	r0, [pc, #288]	; (801a640 <csv_update+0x224>)
 801a520:	f7ff fd70 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a524:	22ff      	movs	r2, #255	; 0xff
 801a526:	2100      	movs	r1, #0
 801a528:	4844      	ldr	r0, [pc, #272]	; (801a63c <csv_update+0x220>)
 801a52a:	f001 f85f 	bl	801b5ec <memset>
		sprintf(buffer, "%ld ,", _RunTime_Packet.temperature);
 801a52e:	4b4a      	ldr	r3, [pc, #296]	; (801a658 <csv_update+0x23c>)
 801a530:	685b      	ldr	r3, [r3, #4]
 801a532:	461a      	mov	r2, r3
 801a534:	494a      	ldr	r1, [pc, #296]	; (801a660 <csv_update+0x244>)
 801a536:	4841      	ldr	r0, [pc, #260]	; (801a63c <csv_update+0x220>)
 801a538:	f002 f85e 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a53c:	493f      	ldr	r1, [pc, #252]	; (801a63c <csv_update+0x220>)
 801a53e:	4840      	ldr	r0, [pc, #256]	; (801a640 <csv_update+0x224>)
 801a540:	f7ff fd60 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a544:	22ff      	movs	r2, #255	; 0xff
 801a546:	2100      	movs	r1, #0
 801a548:	483c      	ldr	r0, [pc, #240]	; (801a63c <csv_update+0x220>)
 801a54a:	f001 f84f 	bl	801b5ec <memset>
		sprintf(buffer, "%ld ,",  _RunTime_Packet.humidity);
 801a54e:	4b42      	ldr	r3, [pc, #264]	; (801a658 <csv_update+0x23c>)
 801a550:	689b      	ldr	r3, [r3, #8]
 801a552:	461a      	mov	r2, r3
 801a554:	4942      	ldr	r1, [pc, #264]	; (801a660 <csv_update+0x244>)
 801a556:	4839      	ldr	r0, [pc, #228]	; (801a63c <csv_update+0x220>)
 801a558:	f002 f84e 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a55c:	4937      	ldr	r1, [pc, #220]	; (801a63c <csv_update+0x220>)
 801a55e:	4838      	ldr	r0, [pc, #224]	; (801a640 <csv_update+0x224>)
 801a560:	f7ff fd50 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a564:	22ff      	movs	r2, #255	; 0xff
 801a566:	2100      	movs	r1, #0
 801a568:	4834      	ldr	r0, [pc, #208]	; (801a63c <csv_update+0x220>)
 801a56a:	f001 f83f 	bl	801b5ec <memset>
		sprintf(buffer, "%s ,", _RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801a56e:	4b3a      	ldr	r3, [pc, #232]	; (801a658 <csv_update+0x23c>)
 801a570:	7b1b      	ldrb	r3, [r3, #12]
 801a572:	2b01      	cmp	r3, #1
 801a574:	d101      	bne.n	801a57a <csv_update+0x15e>
 801a576:	4b3b      	ldr	r3, [pc, #236]	; (801a664 <csv_update+0x248>)
 801a578:	e000      	b.n	801a57c <csv_update+0x160>
 801a57a:	4b3b      	ldr	r3, [pc, #236]	; (801a668 <csv_update+0x24c>)
 801a57c:	461a      	mov	r2, r3
 801a57e:	492e      	ldr	r1, [pc, #184]	; (801a638 <csv_update+0x21c>)
 801a580:	482e      	ldr	r0, [pc, #184]	; (801a63c <csv_update+0x220>)
 801a582:	f002 f839 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a586:	492d      	ldr	r1, [pc, #180]	; (801a63c <csv_update+0x220>)
 801a588:	482d      	ldr	r0, [pc, #180]	; (801a640 <csv_update+0x224>)
 801a58a:	f7ff fd3b 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a58e:	22ff      	movs	r2, #255	; 0xff
 801a590:	2100      	movs	r1, #0
 801a592:	482a      	ldr	r0, [pc, #168]	; (801a63c <csv_update+0x220>)
 801a594:	f001 f82a 	bl	801b5ec <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801a598:	4b2f      	ldr	r3, [pc, #188]	; (801a658 <csv_update+0x23c>)
 801a59a:	695b      	ldr	r3, [r3, #20]
 801a59c:	4618      	mov	r0, r3
 801a59e:	f7e5 ffeb 	bl	8000578 <__aeabi_f2d>
 801a5a2:	4602      	mov	r2, r0
 801a5a4:	460b      	mov	r3, r1
 801a5a6:	4931      	ldr	r1, [pc, #196]	; (801a66c <csv_update+0x250>)
 801a5a8:	4824      	ldr	r0, [pc, #144]	; (801a63c <csv_update+0x220>)
 801a5aa:	f002 f825 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a5ae:	4923      	ldr	r1, [pc, #140]	; (801a63c <csv_update+0x220>)
 801a5b0:	4823      	ldr	r0, [pc, #140]	; (801a640 <csv_update+0x224>)
 801a5b2:	f7ff fd27 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a5b6:	22ff      	movs	r2, #255	; 0xff
 801a5b8:	2100      	movs	r1, #0
 801a5ba:	4820      	ldr	r0, [pc, #128]	; (801a63c <csv_update+0x220>)
 801a5bc:	f001 f816 	bl	801b5ec <memset>
		sprintf(buffer, "NONE ,");
 801a5c0:	492b      	ldr	r1, [pc, #172]	; (801a670 <csv_update+0x254>)
 801a5c2:	481e      	ldr	r0, [pc, #120]	; (801a63c <csv_update+0x220>)
 801a5c4:	f002 f818 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a5c8:	491c      	ldr	r1, [pc, #112]	; (801a63c <csv_update+0x220>)
 801a5ca:	481d      	ldr	r0, [pc, #116]	; (801a640 <csv_update+0x224>)
 801a5cc:	f7ff fd1a 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a5d0:	22ff      	movs	r2, #255	; 0xff
 801a5d2:	2100      	movs	r1, #0
 801a5d4:	4819      	ldr	r0, [pc, #100]	; (801a63c <csv_update+0x220>)
 801a5d6:	f001 f809 	bl	801b5ec <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801a5da:	4b1f      	ldr	r3, [pc, #124]	; (801a658 <csv_update+0x23c>)
 801a5dc:	6a1b      	ldr	r3, [r3, #32]
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f7e5 ffca 	bl	8000578 <__aeabi_f2d>
 801a5e4:	4602      	mov	r2, r0
 801a5e6:	460b      	mov	r3, r1
 801a5e8:	4920      	ldr	r1, [pc, #128]	; (801a66c <csv_update+0x250>)
 801a5ea:	4814      	ldr	r0, [pc, #80]	; (801a63c <csv_update+0x220>)
 801a5ec:	f002 f804 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a5f0:	4912      	ldr	r1, [pc, #72]	; (801a63c <csv_update+0x220>)
 801a5f2:	4813      	ldr	r0, [pc, #76]	; (801a640 <csv_update+0x224>)
 801a5f4:	f7ff fd06 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a5f8:	22ff      	movs	r2, #255	; 0xff
 801a5fa:	2100      	movs	r1, #0
 801a5fc:	480f      	ldr	r0, [pc, #60]	; (801a63c <csv_update+0x220>)
 801a5fe:	f000 fff5 	bl	801b5ec <memset>
		sprintf(buffer, "\n");
 801a602:	491c      	ldr	r1, [pc, #112]	; (801a674 <csv_update+0x258>)
 801a604:	480d      	ldr	r0, [pc, #52]	; (801a63c <csv_update+0x220>)
 801a606:	f001 fff7 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a60a:	490c      	ldr	r1, [pc, #48]	; (801a63c <csv_update+0x220>)
 801a60c:	480c      	ldr	r0, [pc, #48]	; (801a640 <csv_update+0x224>)
 801a60e:	f7ff fcf9 	bl	801a004 <Update_File>

		Unmount_SD("/");
 801a612:	4807      	ldr	r0, [pc, #28]	; (801a630 <csv_update+0x214>)
 801a614:	f7ff fc34 	bl	8019e80 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a618:	4b06      	ldr	r3, [pc, #24]	; (801a634 <csv_update+0x218>)
 801a61a:	781b      	ldrb	r3, [r3, #0]
 801a61c:	b25a      	sxtb	r2, r3
 801a61e:	4b0e      	ldr	r3, [pc, #56]	; (801a658 <csv_update+0x23c>)
 801a620:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 801a624:	bf00      	nop
 801a626:	3718      	adds	r7, #24
 801a628:	46bd      	mov	sp, r7
 801a62a:	bd80      	pop	{r7, pc}
 801a62c:	200017c4 	.word	0x200017c4
 801a630:	08021718 	.word	0x08021718
 801a634:	20002244 	.word	0x20002244
 801a638:	08021828 	.word	0x08021828
 801a63c:	200022b0 	.word	0x200022b0
 801a640:	20002248 	.word	0x20002248
 801a644:	200013a9 	.word	0x200013a9
 801a648:	08021830 	.word	0x08021830
 801a64c:	200013db 	.word	0x200013db
 801a650:	2000140d 	.word	0x2000140d
 801a654:	2000143f 	.word	0x2000143f
 801a658:	20001474 	.word	0x20001474
 801a65c:	08021844 	.word	0x08021844
 801a660:	0802184c 	.word	0x0802184c
 801a664:	080217cc 	.word	0x080217cc
 801a668:	080217d4 	.word	0x080217d4
 801a66c:	08021854 	.word	0x08021854
 801a670:	0802185c 	.word	0x0802185c
 801a674:	08021864 	.word	0x08021864

0801a678 <csv_header>:
void csv_header() {
 801a678:	b580      	push	{r7, lr}
 801a67a:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801a67c:	485d      	ldr	r0, [pc, #372]	; (801a7f4 <csv_header+0x17c>)
 801a67e:	f7ff fbd3 	bl	8019e28 <Mount_SD>
 801a682:	4603      	mov	r3, r0
 801a684:	461a      	mov	r2, r3
 801a686:	4b5c      	ldr	r3, [pc, #368]	; (801a7f8 <csv_header+0x180>)
 801a688:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a68a:	4b5b      	ldr	r3, [pc, #364]	; (801a7f8 <csv_header+0x180>)
 801a68c:	781b      	ldrb	r3, [r3, #0]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	f040 80a7 	bne.w	801a7e2 <csv_header+0x16a>
//		sprintf(buffer, " co2 , temperature , humidity ,");
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, " pir , pm2.5 , port ,battery\n\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "devEUI ,");
 801a694:	4959      	ldr	r1, [pc, #356]	; (801a7fc <csv_header+0x184>)
 801a696:	485a      	ldr	r0, [pc, #360]	; (801a800 <csv_header+0x188>)
 801a698:	f001 ffae 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a69c:	4958      	ldr	r1, [pc, #352]	; (801a800 <csv_header+0x188>)
 801a69e:	4859      	ldr	r0, [pc, #356]	; (801a804 <csv_header+0x18c>)
 801a6a0:	f7ff fcb0 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a6a4:	22ff      	movs	r2, #255	; 0xff
 801a6a6:	2100      	movs	r1, #0
 801a6a8:	4855      	ldr	r0, [pc, #340]	; (801a800 <csv_header+0x188>)
 801a6aa:	f000 ff9f 	bl	801b5ec <memset>
		sprintf(buffer, "id ,");
 801a6ae:	4956      	ldr	r1, [pc, #344]	; (801a808 <csv_header+0x190>)
 801a6b0:	4853      	ldr	r0, [pc, #332]	; (801a800 <csv_header+0x188>)
 801a6b2:	f001 ffa1 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a6b6:	4952      	ldr	r1, [pc, #328]	; (801a800 <csv_header+0x188>)
 801a6b8:	4852      	ldr	r0, [pc, #328]	; (801a804 <csv_header+0x18c>)
 801a6ba:	f7ff fca3 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a6be:	22ff      	movs	r2, #255	; 0xff
 801a6c0:	2100      	movs	r1, #0
 801a6c2:	484f      	ldr	r0, [pc, #316]	; (801a800 <csv_header+0x188>)
 801a6c4:	f000 ff92 	bl	801b5ec <memset>
		sprintf(buffer, "timestamp ,");
 801a6c8:	4950      	ldr	r1, [pc, #320]	; (801a80c <csv_header+0x194>)
 801a6ca:	484d      	ldr	r0, [pc, #308]	; (801a800 <csv_header+0x188>)
 801a6cc:	f001 ff94 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a6d0:	494b      	ldr	r1, [pc, #300]	; (801a800 <csv_header+0x188>)
 801a6d2:	484c      	ldr	r0, [pc, #304]	; (801a804 <csv_header+0x18c>)
 801a6d4:	f7ff fc96 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a6d8:	22ff      	movs	r2, #255	; 0xff
 801a6da:	2100      	movs	r1, #0
 801a6dc:	4848      	ldr	r0, [pc, #288]	; (801a800 <csv_header+0x188>)
 801a6de:	f000 ff85 	bl	801b5ec <memset>
		sprintf(buffer, "location ,");
 801a6e2:	494b      	ldr	r1, [pc, #300]	; (801a810 <csv_header+0x198>)
 801a6e4:	4846      	ldr	r0, [pc, #280]	; (801a800 <csv_header+0x188>)
 801a6e6:	f001 ff87 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a6ea:	4945      	ldr	r1, [pc, #276]	; (801a800 <csv_header+0x188>)
 801a6ec:	4845      	ldr	r0, [pc, #276]	; (801a804 <csv_header+0x18c>)
 801a6ee:	f7ff fc89 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a6f2:	22ff      	movs	r2, #255	; 0xff
 801a6f4:	2100      	movs	r1, #0
 801a6f6:	4842      	ldr	r0, [pc, #264]	; (801a800 <csv_header+0x188>)
 801a6f8:	f000 ff78 	bl	801b5ec <memset>
		sprintf(buffer, "name ,");
 801a6fc:	4945      	ldr	r1, [pc, #276]	; (801a814 <csv_header+0x19c>)
 801a6fe:	4840      	ldr	r0, [pc, #256]	; (801a800 <csv_header+0x188>)
 801a700:	f001 ff7a 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a704:	493e      	ldr	r1, [pc, #248]	; (801a800 <csv_header+0x188>)
 801a706:	483f      	ldr	r0, [pc, #252]	; (801a804 <csv_header+0x18c>)
 801a708:	f7ff fc7c 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a70c:	22ff      	movs	r2, #255	; 0xff
 801a70e:	2100      	movs	r1, #0
 801a710:	483b      	ldr	r0, [pc, #236]	; (801a800 <csv_header+0x188>)
 801a712:	f000 ff6b 	bl	801b5ec <memset>
		sprintf(buffer, "group ,");
 801a716:	4940      	ldr	r1, [pc, #256]	; (801a818 <csv_header+0x1a0>)
 801a718:	4839      	ldr	r0, [pc, #228]	; (801a800 <csv_header+0x188>)
 801a71a:	f001 ff6d 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a71e:	4938      	ldr	r1, [pc, #224]	; (801a800 <csv_header+0x188>)
 801a720:	4838      	ldr	r0, [pc, #224]	; (801a804 <csv_header+0x18c>)
 801a722:	f7ff fc6f 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a726:	22ff      	movs	r2, #255	; 0xff
 801a728:	2100      	movs	r1, #0
 801a72a:	4835      	ldr	r0, [pc, #212]	; (801a800 <csv_header+0x188>)
 801a72c:	f000 ff5e 	bl	801b5ec <memset>
		sprintf(buffer, "co2 ,");
 801a730:	493a      	ldr	r1, [pc, #232]	; (801a81c <csv_header+0x1a4>)
 801a732:	4833      	ldr	r0, [pc, #204]	; (801a800 <csv_header+0x188>)
 801a734:	f001 ff60 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a738:	4931      	ldr	r1, [pc, #196]	; (801a800 <csv_header+0x188>)
 801a73a:	4832      	ldr	r0, [pc, #200]	; (801a804 <csv_header+0x18c>)
 801a73c:	f7ff fc62 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a740:	22ff      	movs	r2, #255	; 0xff
 801a742:	2100      	movs	r1, #0
 801a744:	482e      	ldr	r0, [pc, #184]	; (801a800 <csv_header+0x188>)
 801a746:	f000 ff51 	bl	801b5ec <memset>
		sprintf(buffer, "temperature ,");
 801a74a:	4935      	ldr	r1, [pc, #212]	; (801a820 <csv_header+0x1a8>)
 801a74c:	482c      	ldr	r0, [pc, #176]	; (801a800 <csv_header+0x188>)
 801a74e:	f001 ff53 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a752:	492b      	ldr	r1, [pc, #172]	; (801a800 <csv_header+0x188>)
 801a754:	482b      	ldr	r0, [pc, #172]	; (801a804 <csv_header+0x18c>)
 801a756:	f7ff fc55 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a75a:	22ff      	movs	r2, #255	; 0xff
 801a75c:	2100      	movs	r1, #0
 801a75e:	4828      	ldr	r0, [pc, #160]	; (801a800 <csv_header+0x188>)
 801a760:	f000 ff44 	bl	801b5ec <memset>
		sprintf(buffer, "humidity ,");
 801a764:	492f      	ldr	r1, [pc, #188]	; (801a824 <csv_header+0x1ac>)
 801a766:	4826      	ldr	r0, [pc, #152]	; (801a800 <csv_header+0x188>)
 801a768:	f001 ff46 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a76c:	4924      	ldr	r1, [pc, #144]	; (801a800 <csv_header+0x188>)
 801a76e:	4825      	ldr	r0, [pc, #148]	; (801a804 <csv_header+0x18c>)
 801a770:	f7ff fc48 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a774:	22ff      	movs	r2, #255	; 0xff
 801a776:	2100      	movs	r1, #0
 801a778:	4821      	ldr	r0, [pc, #132]	; (801a800 <csv_header+0x188>)
 801a77a:	f000 ff37 	bl	801b5ec <memset>
		sprintf(buffer, "pir ,");
 801a77e:	492a      	ldr	r1, [pc, #168]	; (801a828 <csv_header+0x1b0>)
 801a780:	481f      	ldr	r0, [pc, #124]	; (801a800 <csv_header+0x188>)
 801a782:	f001 ff39 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a786:	491e      	ldr	r1, [pc, #120]	; (801a800 <csv_header+0x188>)
 801a788:	481e      	ldr	r0, [pc, #120]	; (801a804 <csv_header+0x18c>)
 801a78a:	f7ff fc3b 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a78e:	22ff      	movs	r2, #255	; 0xff
 801a790:	2100      	movs	r1, #0
 801a792:	481b      	ldr	r0, [pc, #108]	; (801a800 <csv_header+0x188>)
 801a794:	f000 ff2a 	bl	801b5ec <memset>
		sprintf(buffer, "pm2.5 ,");
 801a798:	4924      	ldr	r1, [pc, #144]	; (801a82c <csv_header+0x1b4>)
 801a79a:	4819      	ldr	r0, [pc, #100]	; (801a800 <csv_header+0x188>)
 801a79c:	f001 ff2c 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a7a0:	4917      	ldr	r1, [pc, #92]	; (801a800 <csv_header+0x188>)
 801a7a2:	4818      	ldr	r0, [pc, #96]	; (801a804 <csv_header+0x18c>)
 801a7a4:	f7ff fc2e 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a7a8:	22ff      	movs	r2, #255	; 0xff
 801a7aa:	2100      	movs	r1, #0
 801a7ac:	4814      	ldr	r0, [pc, #80]	; (801a800 <csv_header+0x188>)
 801a7ae:	f000 ff1d 	bl	801b5ec <memset>
		sprintf(buffer, "port ,");
 801a7b2:	491f      	ldr	r1, [pc, #124]	; (801a830 <csv_header+0x1b8>)
 801a7b4:	4812      	ldr	r0, [pc, #72]	; (801a800 <csv_header+0x188>)
 801a7b6:	f001 ff1f 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a7ba:	4911      	ldr	r1, [pc, #68]	; (801a800 <csv_header+0x188>)
 801a7bc:	4811      	ldr	r0, [pc, #68]	; (801a804 <csv_header+0x18c>)
 801a7be:	f7ff fc21 	bl	801a004 <Update_File>

		memset(buffer,0,sizeof(buffer));
 801a7c2:	22ff      	movs	r2, #255	; 0xff
 801a7c4:	2100      	movs	r1, #0
 801a7c6:	480e      	ldr	r0, [pc, #56]	; (801a800 <csv_header+0x188>)
 801a7c8:	f000 ff10 	bl	801b5ec <memset>
		sprintf(buffer, "battery \n\n");
 801a7cc:	4919      	ldr	r1, [pc, #100]	; (801a834 <csv_header+0x1bc>)
 801a7ce:	480c      	ldr	r0, [pc, #48]	; (801a800 <csv_header+0x188>)
 801a7d0:	f001 ff12 	bl	801c5f8 <siprintf>
		Update_File(filename_with_format, buffer);
 801a7d4:	490a      	ldr	r1, [pc, #40]	; (801a800 <csv_header+0x188>)
 801a7d6:	480b      	ldr	r0, [pc, #44]	; (801a804 <csv_header+0x18c>)
 801a7d8:	f7ff fc14 	bl	801a004 <Update_File>

		Unmount_SD("/");
 801a7dc:	4805      	ldr	r0, [pc, #20]	; (801a7f4 <csv_header+0x17c>)
 801a7de:	f7ff fb4f 	bl	8019e80 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a7e2:	4b05      	ldr	r3, [pc, #20]	; (801a7f8 <csv_header+0x180>)
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	b25a      	sxtb	r2, r3
 801a7e8:	4b13      	ldr	r3, [pc, #76]	; (801a838 <csv_header+0x1c0>)
 801a7ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31


}
 801a7ee:	bf00      	nop
 801a7f0:	bd80      	pop	{r7, pc}
 801a7f2:	bf00      	nop
 801a7f4:	08021718 	.word	0x08021718
 801a7f8:	20002244 	.word	0x20002244
 801a7fc:	08021868 	.word	0x08021868
 801a800:	200022b0 	.word	0x200022b0
 801a804:	20002248 	.word	0x20002248
 801a808:	08021874 	.word	0x08021874
 801a80c:	0802187c 	.word	0x0802187c
 801a810:	08021888 	.word	0x08021888
 801a814:	08021894 	.word	0x08021894
 801a818:	0802189c 	.word	0x0802189c
 801a81c:	080218a4 	.word	0x080218a4
 801a820:	080218ac 	.word	0x080218ac
 801a824:	080218bc 	.word	0x080218bc
 801a828:	080218c8 	.word	0x080218c8
 801a82c:	080218d0 	.word	0x080218d0
 801a830:	080218d8 	.word	0x080218d8
 801a834:	080218e0 	.word	0x080218e0
 801a838:	20001474 	.word	0x20001474

0801a83c <filesaving_process>:
void filesaving_process() {
 801a83c:	b580      	push	{r7, lr}
 801a83e:	af00      	add	r7, sp, #0
//	__disable_irq();
	memset(buffer,0,sizeof(buffer));
 801a840:	22ff      	movs	r2, #255	; 0xff
 801a842:	2100      	movs	r1, #0
 801a844:	480a      	ldr	r0, [pc, #40]	; (801a870 <filesaving_process+0x34>)
 801a846:	f000 fed1 	bl	801b5ec <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801a84a:	4b0a      	ldr	r3, [pc, #40]	; (801a874 <filesaving_process+0x38>)
 801a84c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a850:	2b00      	cmp	r3, #0
 801a852:	d002      	beq.n	801a85a <filesaving_process+0x1e>
		csv_update();
 801a854:	f7ff fde2 	bl	801a41c <csv_update>
 801a858:	e001      	b.n	801a85e <filesaving_process+0x22>
	} else {
		json_update();
 801a85a:	f7ff fc8f 	bl	801a17c <json_update>
	}

	if(_RunTime_Packet.sd_card_disk_write_error != 0)//means there is error
 801a85e:	4b05      	ldr	r3, [pc, #20]	; (801a874 <filesaving_process+0x38>)
 801a860:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a864:	2b00      	cmp	r3, #0
 801a866:	d001      	beq.n	801a86c <filesaving_process+0x30>
	{
        //blink red so user can know
		blink_red();
 801a868:	f7e7 fb56 	bl	8001f18 <blink_red>
	}
//	__enable_irq();
}
 801a86c:	bf00      	nop
 801a86e:	bd80      	pop	{r7, pc}
 801a870:	200022b0 	.word	0x200022b0
 801a874:	20001474 	.word	0x20001474

0801a878 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801a878:	b580      	push	{r7, lr}
 801a87a:	b08c      	sub	sp, #48	; 0x30
 801a87c:	af04      	add	r7, sp, #16
 801a87e:	6078      	str	r0, [r7, #4]
 801a880:	6039      	str	r1, [r7, #0]
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801a882:	482b      	ldr	r0, [pc, #172]	; (801a930 <createfile+0xb8>)
 801a884:	f7ff fad0 	bl	8019e28 <Mount_SD>
 801a888:	4603      	mov	r3, r0
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d002      	beq.n	801a894 <createfile+0x1c>
	} else {
	//	__enable_irq();
		return -1;
 801a88e:	f04f 33ff 	mov.w	r3, #4294967295
 801a892:	e049      	b.n	801a928 <createfile+0xb0>
	}
	Unmount_SD("/");
 801a894:	4826      	ldr	r0, [pc, #152]	; (801a930 <createfile+0xb8>)
 801a896:	f7ff faf3 	bl	8019e80 <Unmount_SD>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a89a:	f107 031c 	add.w	r3, r7, #28
 801a89e:	2200      	movs	r2, #0
 801a8a0:	4619      	mov	r1, r3
 801a8a2:	4824      	ldr	r0, [pc, #144]	; (801a934 <createfile+0xbc>)
 801a8a4:	f7ee fccc 	bl	8009240 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a8a8:	f107 0308 	add.w	r3, r7, #8
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	4619      	mov	r1, r3
 801a8b0:	4820      	ldr	r0, [pc, #128]	; (801a934 <createfile+0xbc>)
 801a8b2:	f7ee fbe3 	bl	800907c <HAL_RTC_GetTime>

	fresult1 = Mount_SD("/");
 801a8b6:	481e      	ldr	r0, [pc, #120]	; (801a930 <createfile+0xb8>)
 801a8b8:	f7ff fab6 	bl	8019e28 <Mount_SD>
 801a8bc:	4603      	mov	r3, r0
 801a8be:	461a      	mov	r2, r3
 801a8c0:	4b1d      	ldr	r3, [pc, #116]	; (801a938 <createfile+0xc0>)
 801a8c2:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801a8c4:	4b1c      	ldr	r3, [pc, #112]	; (801a938 <createfile+0xc0>)
 801a8c6:	781b      	ldrb	r3, [r3, #0]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d129      	bne.n	801a920 <createfile+0xa8>

		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a8cc:	7ffb      	ldrb	r3, [r7, #31]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a8ce:	4618      	mov	r0, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a8d0:	7f7b      	ldrb	r3, [r7, #29]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a8d2:	461a      	mov	r2, r3
				sDate.Year, sDate.Month, sDate.Date, fileformat);
 801a8d4:	7fbb      	ldrb	r3, [r7, #30]
		sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801a8d6:	4619      	mov	r1, r3
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	9302      	str	r3, [sp, #8]
 801a8dc:	9101      	str	r1, [sp, #4]
 801a8de:	9200      	str	r2, [sp, #0]
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	687a      	ldr	r2, [r7, #4]
 801a8e4:	4915      	ldr	r1, [pc, #84]	; (801a93c <createfile+0xc4>)
 801a8e6:	4816      	ldr	r0, [pc, #88]	; (801a940 <createfile+0xc8>)
 801a8e8:	f001 fe86 	bl	801c5f8 <siprintf>

		fresult1 = Create_File(filename_with_format);
 801a8ec:	4814      	ldr	r0, [pc, #80]	; (801a940 <createfile+0xc8>)
 801a8ee:	f7ff faef 	bl	8019ed0 <Create_File>
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	461a      	mov	r2, r3
 801a8f6:	4b10      	ldr	r3, [pc, #64]	; (801a938 <createfile+0xc0>)
 801a8f8:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801a8fa:	480d      	ldr	r0, [pc, #52]	; (801a930 <createfile+0xb8>)
 801a8fc:	f7ff fac0 	bl	8019e80 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801a900:	4b10      	ldr	r3, [pc, #64]	; (801a944 <createfile+0xcc>)
 801a902:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801a906:	2b00      	cmp	r3, #0
 801a908:	d00d      	beq.n	801a926 <createfile+0xae>
			if (file_already_exist) {
 801a90a:	4b0f      	ldr	r3, [pc, #60]	; (801a948 <createfile+0xd0>)
 801a90c:	781b      	ldrb	r3, [r3, #0]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d003      	beq.n	801a91a <createfile+0xa2>
				file_already_exist = 0;
 801a912:	4b0d      	ldr	r3, [pc, #52]	; (801a948 <createfile+0xd0>)
 801a914:	2200      	movs	r2, #0
 801a916:	701a      	strb	r2, [r3, #0]
 801a918:	e005      	b.n	801a926 <createfile+0xae>
			} else {
				csv_header();  //json does not require an header only csv
 801a91a:	f7ff fead 	bl	801a678 <csv_header>
 801a91e:	e002      	b.n	801a926 <createfile+0xae>
			}
		}

	} else {
	//	__enable_irq();
		return -1;
 801a920:	f04f 33ff 	mov.w	r3, #4294967295
 801a924:	e000      	b.n	801a928 <createfile+0xb0>
	}
//	__enable_irq();
	return 0;
 801a926:	2300      	movs	r3, #0
}
 801a928:	4618      	mov	r0, r3
 801a92a:	3720      	adds	r7, #32
 801a92c:	46bd      	mov	sp, r7
 801a92e:	bd80      	pop	{r7, pc}
 801a930:	08021718 	.word	0x08021718
 801a934:	200017c4 	.word	0x200017c4
 801a938:	20002244 	.word	0x20002244
 801a93c:	080218ec 	.word	0x080218ec
 801a940:	20002248 	.word	0x20002248
 801a944:	20001474 	.word	0x20001474
 801a948:	200022ac 	.word	0x200022ac

0801a94c <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801a950:	4905      	ldr	r1, [pc, #20]	; (801a968 <MX_USB_DEVICE_DeInit+0x1c>)
 801a952:	4806      	ldr	r0, [pc, #24]	; (801a96c <MX_USB_DEVICE_DeInit+0x20>)
 801a954:	f7f9 f8a4 	bl	8013aa0 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801a958:	4804      	ldr	r0, [pc, #16]	; (801a96c <MX_USB_DEVICE_DeInit+0x20>)
 801a95a:	f7fb f86e 	bl	8015a3a <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801a95e:	4803      	ldr	r0, [pc, #12]	; (801a96c <MX_USB_DEVICE_DeInit+0x20>)
 801a960:	f7fa fff9 	bl	8015956 <USBD_DeInit>

}
 801a964:	bf00      	nop
 801a966:	bd80      	pop	{r7, pc}
 801a968:	20000124 	.word	0x20000124
 801a96c:	200023b0 	.word	0x200023b0

0801a970 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a970:	b580      	push	{r7, lr}
 801a972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a974:	2200      	movs	r2, #0
 801a976:	4912      	ldr	r1, [pc, #72]	; (801a9c0 <MX_USB_DEVICE_Init+0x50>)
 801a978:	4812      	ldr	r0, [pc, #72]	; (801a9c4 <MX_USB_DEVICE_Init+0x54>)
 801a97a:	f7fa ffbc 	bl	80158f6 <USBD_Init>
 801a97e:	4603      	mov	r3, r0
 801a980:	2b00      	cmp	r3, #0
 801a982:	d001      	beq.n	801a988 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a984:	f7e8 fbaa 	bl	80030dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801a988:	490f      	ldr	r1, [pc, #60]	; (801a9c8 <MX_USB_DEVICE_Init+0x58>)
 801a98a:	480e      	ldr	r0, [pc, #56]	; (801a9c4 <MX_USB_DEVICE_Init+0x54>)
 801a98c:	f7fb f813 	bl	80159b6 <USBD_RegisterClass>
 801a990:	4603      	mov	r3, r0
 801a992:	2b00      	cmp	r3, #0
 801a994:	d001      	beq.n	801a99a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a996:	f7e8 fba1 	bl	80030dc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801a99a:	490c      	ldr	r1, [pc, #48]	; (801a9cc <MX_USB_DEVICE_Init+0x5c>)
 801a99c:	4809      	ldr	r0, [pc, #36]	; (801a9c4 <MX_USB_DEVICE_Init+0x54>)
 801a99e:	f7f9 fa87 	bl	8013eb0 <USBD_MSC_RegisterStorage>
 801a9a2:	4603      	mov	r3, r0
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d001      	beq.n	801a9ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a9a8:	f7e8 fb98 	bl	80030dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a9ac:	4805      	ldr	r0, [pc, #20]	; (801a9c4 <MX_USB_DEVICE_Init+0x54>)
 801a9ae:	f7fb f838 	bl	8015a22 <USBD_Start>
 801a9b2:	4603      	mov	r3, r0
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d001      	beq.n	801a9bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a9b8:	f7e8 fb90 	bl	80030dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a9bc:	bf00      	nop
 801a9be:	bd80      	pop	{r7, pc}
 801a9c0:	200000d4 	.word	0x200000d4
 801a9c4:	200023b0 	.word	0x200023b0
 801a9c8:	2000002c 	.word	0x2000002c
 801a9cc:	20000124 	.word	0x20000124

0801a9d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a9d0:	b480      	push	{r7}
 801a9d2:	b083      	sub	sp, #12
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	4603      	mov	r3, r0
 801a9d8:	6039      	str	r1, [r7, #0]
 801a9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	2212      	movs	r2, #18
 801a9e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a9e2:	4b03      	ldr	r3, [pc, #12]	; (801a9f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	370c      	adds	r7, #12
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ee:	4770      	bx	lr
 801a9f0:	200000f0 	.word	0x200000f0

0801a9f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a9f4:	b480      	push	{r7}
 801a9f6:	b083      	sub	sp, #12
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	6039      	str	r1, [r7, #0]
 801a9fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801aa00:	683b      	ldr	r3, [r7, #0]
 801aa02:	2204      	movs	r2, #4
 801aa04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801aa06:	4b03      	ldr	r3, [pc, #12]	; (801aa14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801aa08:	4618      	mov	r0, r3
 801aa0a:	370c      	adds	r7, #12
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa12:	4770      	bx	lr
 801aa14:	20000104 	.word	0x20000104

0801aa18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b082      	sub	sp, #8
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	4603      	mov	r3, r0
 801aa20:	6039      	str	r1, [r7, #0]
 801aa22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801aa24:	79fb      	ldrb	r3, [r7, #7]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d105      	bne.n	801aa36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801aa2a:	683a      	ldr	r2, [r7, #0]
 801aa2c:	4907      	ldr	r1, [pc, #28]	; (801aa4c <USBD_FS_ProductStrDescriptor+0x34>)
 801aa2e:	4808      	ldr	r0, [pc, #32]	; (801aa50 <USBD_FS_ProductStrDescriptor+0x38>)
 801aa30:	f7fc f9be 	bl	8016db0 <USBD_GetString>
 801aa34:	e004      	b.n	801aa40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801aa36:	683a      	ldr	r2, [r7, #0]
 801aa38:	4904      	ldr	r1, [pc, #16]	; (801aa4c <USBD_FS_ProductStrDescriptor+0x34>)
 801aa3a:	4805      	ldr	r0, [pc, #20]	; (801aa50 <USBD_FS_ProductStrDescriptor+0x38>)
 801aa3c:	f7fc f9b8 	bl	8016db0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aa40:	4b02      	ldr	r3, [pc, #8]	; (801aa4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801aa42:	4618      	mov	r0, r3
 801aa44:	3708      	adds	r7, #8
 801aa46:	46bd      	mov	sp, r7
 801aa48:	bd80      	pop	{r7, pc}
 801aa4a:	bf00      	nop
 801aa4c:	2000268c 	.word	0x2000268c
 801aa50:	08021900 	.word	0x08021900

0801aa54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b082      	sub	sp, #8
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	6039      	str	r1, [r7, #0]
 801aa5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801aa60:	683a      	ldr	r2, [r7, #0]
 801aa62:	4904      	ldr	r1, [pc, #16]	; (801aa74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801aa64:	4804      	ldr	r0, [pc, #16]	; (801aa78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801aa66:	f7fc f9a3 	bl	8016db0 <USBD_GetString>
  return USBD_StrDesc;
 801aa6a:	4b02      	ldr	r3, [pc, #8]	; (801aa74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	3708      	adds	r7, #8
 801aa70:	46bd      	mov	sp, r7
 801aa72:	bd80      	pop	{r7, pc}
 801aa74:	2000268c 	.word	0x2000268c
 801aa78:	08021914 	.word	0x08021914

0801aa7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b082      	sub	sp, #8
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	4603      	mov	r3, r0
 801aa84:	6039      	str	r1, [r7, #0]
 801aa86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801aa88:	683b      	ldr	r3, [r7, #0]
 801aa8a:	221a      	movs	r2, #26
 801aa8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801aa8e:	f000 f843 	bl	801ab18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801aa92:	4b02      	ldr	r3, [pc, #8]	; (801aa9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801aa94:	4618      	mov	r0, r3
 801aa96:	3708      	adds	r7, #8
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bd80      	pop	{r7, pc}
 801aa9c:	20000108 	.word	0x20000108

0801aaa0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	4603      	mov	r3, r0
 801aaa8:	6039      	str	r1, [r7, #0]
 801aaaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801aaac:	79fb      	ldrb	r3, [r7, #7]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	d105      	bne.n	801aabe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801aab2:	683a      	ldr	r2, [r7, #0]
 801aab4:	4907      	ldr	r1, [pc, #28]	; (801aad4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801aab6:	4808      	ldr	r0, [pc, #32]	; (801aad8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801aab8:	f7fc f97a 	bl	8016db0 <USBD_GetString>
 801aabc:	e004      	b.n	801aac8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801aabe:	683a      	ldr	r2, [r7, #0]
 801aac0:	4904      	ldr	r1, [pc, #16]	; (801aad4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801aac2:	4805      	ldr	r0, [pc, #20]	; (801aad8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801aac4:	f7fc f974 	bl	8016db0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801aac8:	4b02      	ldr	r3, [pc, #8]	; (801aad4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801aaca:	4618      	mov	r0, r3
 801aacc:	3708      	adds	r7, #8
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd80      	pop	{r7, pc}
 801aad2:	bf00      	nop
 801aad4:	2000268c 	.word	0x2000268c
 801aad8:	08021928 	.word	0x08021928

0801aadc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b082      	sub	sp, #8
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	4603      	mov	r3, r0
 801aae4:	6039      	str	r1, [r7, #0]
 801aae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801aae8:	79fb      	ldrb	r3, [r7, #7]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d105      	bne.n	801aafa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801aaee:	683a      	ldr	r2, [r7, #0]
 801aaf0:	4907      	ldr	r1, [pc, #28]	; (801ab10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801aaf2:	4808      	ldr	r0, [pc, #32]	; (801ab14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801aaf4:	f7fc f95c 	bl	8016db0 <USBD_GetString>
 801aaf8:	e004      	b.n	801ab04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801aafa:	683a      	ldr	r2, [r7, #0]
 801aafc:	4904      	ldr	r1, [pc, #16]	; (801ab10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801aafe:	4805      	ldr	r0, [pc, #20]	; (801ab14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ab00:	f7fc f956 	bl	8016db0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ab04:	4b02      	ldr	r3, [pc, #8]	; (801ab10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ab06:	4618      	mov	r0, r3
 801ab08:	3708      	adds	r7, #8
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bd80      	pop	{r7, pc}
 801ab0e:	bf00      	nop
 801ab10:	2000268c 	.word	0x2000268c
 801ab14:	08021934 	.word	0x08021934

0801ab18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b084      	sub	sp, #16
 801ab1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ab1e:	4b0f      	ldr	r3, [pc, #60]	; (801ab5c <Get_SerialNum+0x44>)
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ab24:	4b0e      	ldr	r3, [pc, #56]	; (801ab60 <Get_SerialNum+0x48>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ab2a:	4b0e      	ldr	r3, [pc, #56]	; (801ab64 <Get_SerialNum+0x4c>)
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801ab30:	68fa      	ldr	r2, [r7, #12]
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	4413      	add	r3, r2
 801ab36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d009      	beq.n	801ab52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ab3e:	2208      	movs	r2, #8
 801ab40:	4909      	ldr	r1, [pc, #36]	; (801ab68 <Get_SerialNum+0x50>)
 801ab42:	68f8      	ldr	r0, [r7, #12]
 801ab44:	f000 f814 	bl	801ab70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ab48:	2204      	movs	r2, #4
 801ab4a:	4908      	ldr	r1, [pc, #32]	; (801ab6c <Get_SerialNum+0x54>)
 801ab4c:	68b8      	ldr	r0, [r7, #8]
 801ab4e:	f000 f80f 	bl	801ab70 <IntToUnicode>
  }
}
 801ab52:	bf00      	nop
 801ab54:	3710      	adds	r7, #16
 801ab56:	46bd      	mov	sp, r7
 801ab58:	bd80      	pop	{r7, pc}
 801ab5a:	bf00      	nop
 801ab5c:	1fff7a10 	.word	0x1fff7a10
 801ab60:	1fff7a14 	.word	0x1fff7a14
 801ab64:	1fff7a18 	.word	0x1fff7a18
 801ab68:	2000010a 	.word	0x2000010a
 801ab6c:	2000011a 	.word	0x2000011a

0801ab70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801ab70:	b480      	push	{r7}
 801ab72:	b087      	sub	sp, #28
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	60f8      	str	r0, [r7, #12]
 801ab78:	60b9      	str	r1, [r7, #8]
 801ab7a:	4613      	mov	r3, r2
 801ab7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801ab7e:	2300      	movs	r3, #0
 801ab80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801ab82:	2300      	movs	r3, #0
 801ab84:	75fb      	strb	r3, [r7, #23]
 801ab86:	e027      	b.n	801abd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	0f1b      	lsrs	r3, r3, #28
 801ab8c:	2b09      	cmp	r3, #9
 801ab8e:	d80b      	bhi.n	801aba8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	0f1b      	lsrs	r3, r3, #28
 801ab94:	b2da      	uxtb	r2, r3
 801ab96:	7dfb      	ldrb	r3, [r7, #23]
 801ab98:	005b      	lsls	r3, r3, #1
 801ab9a:	4619      	mov	r1, r3
 801ab9c:	68bb      	ldr	r3, [r7, #8]
 801ab9e:	440b      	add	r3, r1
 801aba0:	3230      	adds	r2, #48	; 0x30
 801aba2:	b2d2      	uxtb	r2, r2
 801aba4:	701a      	strb	r2, [r3, #0]
 801aba6:	e00a      	b.n	801abbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	0f1b      	lsrs	r3, r3, #28
 801abac:	b2da      	uxtb	r2, r3
 801abae:	7dfb      	ldrb	r3, [r7, #23]
 801abb0:	005b      	lsls	r3, r3, #1
 801abb2:	4619      	mov	r1, r3
 801abb4:	68bb      	ldr	r3, [r7, #8]
 801abb6:	440b      	add	r3, r1
 801abb8:	3237      	adds	r2, #55	; 0x37
 801abba:	b2d2      	uxtb	r2, r2
 801abbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	011b      	lsls	r3, r3, #4
 801abc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801abc4:	7dfb      	ldrb	r3, [r7, #23]
 801abc6:	005b      	lsls	r3, r3, #1
 801abc8:	3301      	adds	r3, #1
 801abca:	68ba      	ldr	r2, [r7, #8]
 801abcc:	4413      	add	r3, r2
 801abce:	2200      	movs	r2, #0
 801abd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801abd2:	7dfb      	ldrb	r3, [r7, #23]
 801abd4:	3301      	adds	r3, #1
 801abd6:	75fb      	strb	r3, [r7, #23]
 801abd8:	7dfa      	ldrb	r2, [r7, #23]
 801abda:	79fb      	ldrb	r3, [r7, #7]
 801abdc:	429a      	cmp	r2, r3
 801abde:	d3d3      	bcc.n	801ab88 <IntToUnicode+0x18>
  }
}
 801abe0:	bf00      	nop
 801abe2:	bf00      	nop
 801abe4:	371c      	adds	r7, #28
 801abe6:	46bd      	mov	sp, r7
 801abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abec:	4770      	bx	lr

0801abee <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801abee:	b480      	push	{r7}
 801abf0:	b083      	sub	sp, #12
 801abf2:	af00      	add	r7, sp, #0
 801abf4:	4603      	mov	r3, r0
 801abf6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801abf8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801abfa:	4618      	mov	r0, r3
 801abfc:	370c      	adds	r7, #12
 801abfe:	46bd      	mov	sp, r7
 801ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac04:	4770      	bx	lr
	...

0801ac08 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b08e      	sub	sp, #56	; 0x38
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	4603      	mov	r3, r0
 801ac10:	60b9      	str	r1, [r7, #8]
 801ac12:	607a      	str	r2, [r7, #4]
 801ac14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801ac16:	23ff      	movs	r3, #255	; 0xff
 801ac18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801ac1c:	f107 0314 	add.w	r3, r7, #20
 801ac20:	4619      	mov	r1, r3
 801ac22:	480a      	ldr	r0, [pc, #40]	; (801ac4c <STORAGE_GetCapacity_FS+0x44>)
 801ac24:	f7ef fb64 	bl	800a2f0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac2a:	1e5a      	subs	r2, r3, #1
 801ac2c:	68bb      	ldr	r3, [r7, #8]
 801ac2e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac32:	b29a      	uxth	r2, r3
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801ac38:	2300      	movs	r3, #0
 801ac3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801ac3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	3738      	adds	r7, #56	; 0x38
 801ac46:	46bd      	mov	sp, r7
 801ac48:	bd80      	pop	{r7, pc}
 801ac4a:	bf00      	nop
 801ac4c:	200017e4 	.word	0x200017e4

0801ac50 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801ac50:	b480      	push	{r7}
 801ac52:	b083      	sub	sp, #12
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	4603      	mov	r3, r0
 801ac58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801ac5a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ac5c:	4618      	mov	r0, r3
 801ac5e:	370c      	adds	r7, #12
 801ac60:	46bd      	mov	sp, r7
 801ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac66:	4770      	bx	lr

0801ac68 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801ac68:	b480      	push	{r7}
 801ac6a:	b083      	sub	sp, #12
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	4603      	mov	r3, r0
 801ac70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801ac72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ac74:	4618      	mov	r0, r3
 801ac76:	370c      	adds	r7, #12
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac7e:	4770      	bx	lr

0801ac80 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	b088      	sub	sp, #32
 801ac84:	af02      	add	r7, sp, #8
 801ac86:	60b9      	str	r1, [r7, #8]
 801ac88:	607a      	str	r2, [r7, #4]
 801ac8a:	461a      	mov	r2, r3
 801ac8c:	4603      	mov	r3, r0
 801ac8e:	73fb      	strb	r3, [r7, #15]
 801ac90:	4613      	mov	r3, r2
 801ac92:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801ac94:	23ff      	movs	r3, #255	; 0xff
 801ac96:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801ac98:	f7e8 ff5e 	bl	8003b58 <HAL_GetTick>
 801ac9c:	4603      	mov	r3, r0
 801ac9e:	4a0d      	ldr	r2, [pc, #52]	; (801acd4 <STORAGE_Read_FS+0x54>)
 801aca0:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801aca2:	89bb      	ldrh	r3, [r7, #12]
 801aca4:	f04f 32ff 	mov.w	r2, #4294967295
 801aca8:	9200      	str	r2, [sp, #0]
 801acaa:	687a      	ldr	r2, [r7, #4]
 801acac:	68b9      	ldr	r1, [r7, #8]
 801acae:	480a      	ldr	r0, [pc, #40]	; (801acd8 <STORAGE_Read_FS+0x58>)
 801acb0:	f7ee fe16 	bl	80098e0 <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801acb4:	bf00      	nop
 801acb6:	4808      	ldr	r0, [pc, #32]	; (801acd8 <STORAGE_Read_FS+0x58>)
 801acb8:	f7ef fb46 	bl	800a348 <HAL_SD_GetCardState>
 801acbc:	4603      	mov	r3, r0
 801acbe:	2b04      	cmp	r3, #4
 801acc0:	d1f9      	bne.n	801acb6 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801acc2:	2300      	movs	r3, #0
 801acc4:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801acc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801acca:	4618      	mov	r0, r3
 801accc:	3718      	adds	r7, #24
 801acce:	46bd      	mov	sp, r7
 801acd0:	bd80      	pop	{r7, pc}
 801acd2:	bf00      	nop
 801acd4:	200016f8 	.word	0x200016f8
 801acd8:	200017e4 	.word	0x200017e4

0801acdc <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b088      	sub	sp, #32
 801ace0:	af02      	add	r7, sp, #8
 801ace2:	60b9      	str	r1, [r7, #8]
 801ace4:	607a      	str	r2, [r7, #4]
 801ace6:	461a      	mov	r2, r3
 801ace8:	4603      	mov	r3, r0
 801acea:	73fb      	strb	r3, [r7, #15]
 801acec:	4613      	mov	r3, r2
 801acee:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801acf0:	23ff      	movs	r3, #255	; 0xff
 801acf2:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801acf4:	89bb      	ldrh	r3, [r7, #12]
 801acf6:	f04f 32ff 	mov.w	r2, #4294967295
 801acfa:	9200      	str	r2, [sp, #0]
 801acfc:	687a      	ldr	r2, [r7, #4]
 801acfe:	68b9      	ldr	r1, [r7, #8]
 801ad00:	4808      	ldr	r0, [pc, #32]	; (801ad24 <STORAGE_Write_FS+0x48>)
 801ad02:	f7ee ffcb 	bl	8009c9c <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801ad06:	bf00      	nop
 801ad08:	4806      	ldr	r0, [pc, #24]	; (801ad24 <STORAGE_Write_FS+0x48>)
 801ad0a:	f7ef fb1d 	bl	800a348 <HAL_SD_GetCardState>
 801ad0e:	4603      	mov	r3, r0
 801ad10:	2b04      	cmp	r3, #4
 801ad12:	d1f9      	bne.n	801ad08 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801ad14:	2300      	movs	r3, #0
 801ad16:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801ad18:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	3718      	adds	r7, #24
 801ad20:	46bd      	mov	sp, r7
 801ad22:	bd80      	pop	{r7, pc}
 801ad24:	200017e4 	.word	0x200017e4

0801ad28 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801ad28:	b480      	push	{r7}
 801ad2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801ad2c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801ad2e:	4618      	mov	r0, r3
 801ad30:	46bd      	mov	sp, r7
 801ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad36:	4770      	bx	lr

0801ad38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ad38:	b580      	push	{r7, lr}
 801ad3a:	b08a      	sub	sp, #40	; 0x28
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ad40:	f107 0314 	add.w	r3, r7, #20
 801ad44:	2200      	movs	r2, #0
 801ad46:	601a      	str	r2, [r3, #0]
 801ad48:	605a      	str	r2, [r3, #4]
 801ad4a:	609a      	str	r2, [r3, #8]
 801ad4c:	60da      	str	r2, [r3, #12]
 801ad4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ad58:	d13a      	bne.n	801add0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	613b      	str	r3, [r7, #16]
 801ad5e:	4b1e      	ldr	r3, [pc, #120]	; (801add8 <HAL_PCD_MspInit+0xa0>)
 801ad60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad62:	4a1d      	ldr	r2, [pc, #116]	; (801add8 <HAL_PCD_MspInit+0xa0>)
 801ad64:	f043 0301 	orr.w	r3, r3, #1
 801ad68:	6313      	str	r3, [r2, #48]	; 0x30
 801ad6a:	4b1b      	ldr	r3, [pc, #108]	; (801add8 <HAL_PCD_MspInit+0xa0>)
 801ad6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad6e:	f003 0301 	and.w	r3, r3, #1
 801ad72:	613b      	str	r3, [r7, #16]
 801ad74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801ad76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801ad7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ad7c:	2302      	movs	r3, #2
 801ad7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ad80:	2300      	movs	r3, #0
 801ad82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ad84:	2303      	movs	r3, #3
 801ad86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801ad88:	230a      	movs	r3, #10
 801ad8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ad8c:	f107 0314 	add.w	r3, r7, #20
 801ad90:	4619      	mov	r1, r3
 801ad92:	4812      	ldr	r0, [pc, #72]	; (801addc <HAL_PCD_MspInit+0xa4>)
 801ad94:	f7ea fc44 	bl	8005620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ad98:	4b0f      	ldr	r3, [pc, #60]	; (801add8 <HAL_PCD_MspInit+0xa0>)
 801ad9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad9c:	4a0e      	ldr	r2, [pc, #56]	; (801add8 <HAL_PCD_MspInit+0xa0>)
 801ad9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ada2:	6353      	str	r3, [r2, #52]	; 0x34
 801ada4:	2300      	movs	r3, #0
 801ada6:	60fb      	str	r3, [r7, #12]
 801ada8:	4b0b      	ldr	r3, [pc, #44]	; (801add8 <HAL_PCD_MspInit+0xa0>)
 801adaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adac:	4a0a      	ldr	r2, [pc, #40]	; (801add8 <HAL_PCD_MspInit+0xa0>)
 801adae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801adb2:	6453      	str	r3, [r2, #68]	; 0x44
 801adb4:	4b08      	ldr	r3, [pc, #32]	; (801add8 <HAL_PCD_MspInit+0xa0>)
 801adb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801adbc:	60fb      	str	r3, [r7, #12]
 801adbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801adc0:	2200      	movs	r2, #0
 801adc2:	2100      	movs	r1, #0
 801adc4:	2043      	movs	r0, #67	; 0x43
 801adc6:	f7e9 fcaa 	bl	800471e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801adca:	2043      	movs	r0, #67	; 0x43
 801adcc:	f7e9 fcc3 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801add0:	bf00      	nop
 801add2:	3728      	adds	r7, #40	; 0x28
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}
 801add8:	40023800 	.word	0x40023800
 801addc:	40020000 	.word	0x40020000

0801ade0 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b082      	sub	sp, #8
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801adf0:	d10d      	bne.n	801ae0e <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801adf2:	4b09      	ldr	r3, [pc, #36]	; (801ae18 <HAL_PCD_MspDeInit+0x38>)
 801adf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801adf6:	4a08      	ldr	r2, [pc, #32]	; (801ae18 <HAL_PCD_MspDeInit+0x38>)
 801adf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801adfc:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801adfe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ae02:	4806      	ldr	r0, [pc, #24]	; (801ae1c <HAL_PCD_MspDeInit+0x3c>)
 801ae04:	f7ea fd90 	bl	8005928 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801ae08:	2043      	movs	r0, #67	; 0x43
 801ae0a:	f7e9 fcb2 	bl	8004772 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801ae0e:	bf00      	nop
 801ae10:	3708      	adds	r7, #8
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	40023800 	.word	0x40023800
 801ae1c:	40020000 	.word	0x40020000

0801ae20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b082      	sub	sp, #8
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801ae34:	4619      	mov	r1, r3
 801ae36:	4610      	mov	r0, r2
 801ae38:	f7fa fe5b 	bl	8015af2 <USBD_LL_SetupStage>
}
 801ae3c:	bf00      	nop
 801ae3e:	3708      	adds	r7, #8
 801ae40:	46bd      	mov	sp, r7
 801ae42:	bd80      	pop	{r7, pc}

0801ae44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	b082      	sub	sp, #8
 801ae48:	af00      	add	r7, sp, #0
 801ae4a:	6078      	str	r0, [r7, #4]
 801ae4c:	460b      	mov	r3, r1
 801ae4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ae56:	78fa      	ldrb	r2, [r7, #3]
 801ae58:	6879      	ldr	r1, [r7, #4]
 801ae5a:	4613      	mov	r3, r2
 801ae5c:	00db      	lsls	r3, r3, #3
 801ae5e:	4413      	add	r3, r2
 801ae60:	009b      	lsls	r3, r3, #2
 801ae62:	440b      	add	r3, r1
 801ae64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801ae68:	681a      	ldr	r2, [r3, #0]
 801ae6a:	78fb      	ldrb	r3, [r7, #3]
 801ae6c:	4619      	mov	r1, r3
 801ae6e:	f7fa fe95 	bl	8015b9c <USBD_LL_DataOutStage>
}
 801ae72:	bf00      	nop
 801ae74:	3708      	adds	r7, #8
 801ae76:	46bd      	mov	sp, r7
 801ae78:	bd80      	pop	{r7, pc}

0801ae7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ae7a:	b580      	push	{r7, lr}
 801ae7c:	b082      	sub	sp, #8
 801ae7e:	af00      	add	r7, sp, #0
 801ae80:	6078      	str	r0, [r7, #4]
 801ae82:	460b      	mov	r3, r1
 801ae84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801ae8c:	78fa      	ldrb	r2, [r7, #3]
 801ae8e:	6879      	ldr	r1, [r7, #4]
 801ae90:	4613      	mov	r3, r2
 801ae92:	00db      	lsls	r3, r3, #3
 801ae94:	4413      	add	r3, r2
 801ae96:	009b      	lsls	r3, r3, #2
 801ae98:	440b      	add	r3, r1
 801ae9a:	334c      	adds	r3, #76	; 0x4c
 801ae9c:	681a      	ldr	r2, [r3, #0]
 801ae9e:	78fb      	ldrb	r3, [r7, #3]
 801aea0:	4619      	mov	r1, r3
 801aea2:	f7fa ff2e 	bl	8015d02 <USBD_LL_DataInStage>
}
 801aea6:	bf00      	nop
 801aea8:	3708      	adds	r7, #8
 801aeaa:	46bd      	mov	sp, r7
 801aeac:	bd80      	pop	{r7, pc}

0801aeae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aeae:	b580      	push	{r7, lr}
 801aeb0:	b082      	sub	sp, #8
 801aeb2:	af00      	add	r7, sp, #0
 801aeb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aebc:	4618      	mov	r0, r3
 801aebe:	f7fb f862 	bl	8015f86 <USBD_LL_SOF>
}
 801aec2:	bf00      	nop
 801aec4:	3708      	adds	r7, #8
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}

0801aeca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aeca:	b580      	push	{r7, lr}
 801aecc:	b084      	sub	sp, #16
 801aece:	af00      	add	r7, sp, #0
 801aed0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801aed2:	2301      	movs	r3, #1
 801aed4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	68db      	ldr	r3, [r3, #12]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d102      	bne.n	801aee4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801aede:	2300      	movs	r3, #0
 801aee0:	73fb      	strb	r3, [r7, #15]
 801aee2:	e008      	b.n	801aef6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	68db      	ldr	r3, [r3, #12]
 801aee8:	2b02      	cmp	r3, #2
 801aeea:	d102      	bne.n	801aef2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801aeec:	2301      	movs	r3, #1
 801aeee:	73fb      	strb	r3, [r7, #15]
 801aef0:	e001      	b.n	801aef6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801aef2:	f7e8 f8f3 	bl	80030dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aefc:	7bfa      	ldrb	r2, [r7, #15]
 801aefe:	4611      	mov	r1, r2
 801af00:	4618      	mov	r0, r3
 801af02:	f7fb f802 	bl	8015f0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af0c:	4618      	mov	r0, r3
 801af0e:	f7fa ffaa 	bl	8015e66 <USBD_LL_Reset>
}
 801af12:	bf00      	nop
 801af14:	3710      	adds	r7, #16
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}
	...

0801af1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b082      	sub	sp, #8
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af2a:	4618      	mov	r0, r3
 801af2c:	f7fa fffd 	bl	8015f2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	687a      	ldr	r2, [r7, #4]
 801af3c:	6812      	ldr	r2, [r2, #0]
 801af3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801af42:	f043 0301 	orr.w	r3, r3, #1
 801af46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	6a1b      	ldr	r3, [r3, #32]
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d005      	beq.n	801af5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801af50:	4b04      	ldr	r3, [pc, #16]	; (801af64 <HAL_PCD_SuspendCallback+0x48>)
 801af52:	691b      	ldr	r3, [r3, #16]
 801af54:	4a03      	ldr	r2, [pc, #12]	; (801af64 <HAL_PCD_SuspendCallback+0x48>)
 801af56:	f043 0306 	orr.w	r3, r3, #6
 801af5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801af5c:	bf00      	nop
 801af5e:	3708      	adds	r7, #8
 801af60:	46bd      	mov	sp, r7
 801af62:	bd80      	pop	{r7, pc}
 801af64:	e000ed00 	.word	0xe000ed00

0801af68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b082      	sub	sp, #8
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af76:	4618      	mov	r0, r3
 801af78:	f7fa ffed 	bl	8015f56 <USBD_LL_Resume>
}
 801af7c:	bf00      	nop
 801af7e:	3708      	adds	r7, #8
 801af80:	46bd      	mov	sp, r7
 801af82:	bd80      	pop	{r7, pc}

0801af84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b082      	sub	sp, #8
 801af88:	af00      	add	r7, sp, #0
 801af8a:	6078      	str	r0, [r7, #4]
 801af8c:	460b      	mov	r3, r1
 801af8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801af96:	78fa      	ldrb	r2, [r7, #3]
 801af98:	4611      	mov	r1, r2
 801af9a:	4618      	mov	r0, r3
 801af9c:	f7fb f845 	bl	801602a <USBD_LL_IsoOUTIncomplete>
}
 801afa0:	bf00      	nop
 801afa2:	3708      	adds	r7, #8
 801afa4:	46bd      	mov	sp, r7
 801afa6:	bd80      	pop	{r7, pc}

0801afa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b082      	sub	sp, #8
 801afac:	af00      	add	r7, sp, #0
 801afae:	6078      	str	r0, [r7, #4]
 801afb0:	460b      	mov	r3, r1
 801afb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801afba:	78fa      	ldrb	r2, [r7, #3]
 801afbc:	4611      	mov	r1, r2
 801afbe:	4618      	mov	r0, r3
 801afc0:	f7fb f801 	bl	8015fc6 <USBD_LL_IsoINIncomplete>
}
 801afc4:	bf00      	nop
 801afc6:	3708      	adds	r7, #8
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd80      	pop	{r7, pc}

0801afcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b082      	sub	sp, #8
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801afda:	4618      	mov	r0, r3
 801afdc:	f7fb f857 	bl	801608e <USBD_LL_DevConnected>
}
 801afe0:	bf00      	nop
 801afe2:	3708      	adds	r7, #8
 801afe4:	46bd      	mov	sp, r7
 801afe6:	bd80      	pop	{r7, pc}

0801afe8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b082      	sub	sp, #8
 801afec:	af00      	add	r7, sp, #0
 801afee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801aff6:	4618      	mov	r0, r3
 801aff8:	f7fb f854 	bl	80160a4 <USBD_LL_DevDisconnected>
}
 801affc:	bf00      	nop
 801affe:	3708      	adds	r7, #8
 801b000:	46bd      	mov	sp, r7
 801b002:	bd80      	pop	{r7, pc}

0801b004 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b004:	b580      	push	{r7, lr}
 801b006:	b082      	sub	sp, #8
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	781b      	ldrb	r3, [r3, #0]
 801b010:	2b00      	cmp	r3, #0
 801b012:	d13c      	bne.n	801b08e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801b014:	4a20      	ldr	r2, [pc, #128]	; (801b098 <USBD_LL_Init+0x94>)
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	4a1e      	ldr	r2, [pc, #120]	; (801b098 <USBD_LL_Init+0x94>)
 801b020:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b024:	4b1c      	ldr	r3, [pc, #112]	; (801b098 <USBD_LL_Init+0x94>)
 801b026:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801b02a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801b02c:	4b1a      	ldr	r3, [pc, #104]	; (801b098 <USBD_LL_Init+0x94>)
 801b02e:	2204      	movs	r2, #4
 801b030:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801b032:	4b19      	ldr	r3, [pc, #100]	; (801b098 <USBD_LL_Init+0x94>)
 801b034:	2202      	movs	r2, #2
 801b036:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b038:	4b17      	ldr	r3, [pc, #92]	; (801b098 <USBD_LL_Init+0x94>)
 801b03a:	2200      	movs	r2, #0
 801b03c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b03e:	4b16      	ldr	r3, [pc, #88]	; (801b098 <USBD_LL_Init+0x94>)
 801b040:	2202      	movs	r2, #2
 801b042:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b044:	4b14      	ldr	r3, [pc, #80]	; (801b098 <USBD_LL_Init+0x94>)
 801b046:	2200      	movs	r2, #0
 801b048:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801b04a:	4b13      	ldr	r3, [pc, #76]	; (801b098 <USBD_LL_Init+0x94>)
 801b04c:	2200      	movs	r2, #0
 801b04e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801b050:	4b11      	ldr	r3, [pc, #68]	; (801b098 <USBD_LL_Init+0x94>)
 801b052:	2200      	movs	r2, #0
 801b054:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801b056:	4b10      	ldr	r3, [pc, #64]	; (801b098 <USBD_LL_Init+0x94>)
 801b058:	2200      	movs	r2, #0
 801b05a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801b05c:	4b0e      	ldr	r3, [pc, #56]	; (801b098 <USBD_LL_Init+0x94>)
 801b05e:	2200      	movs	r2, #0
 801b060:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801b062:	480d      	ldr	r0, [pc, #52]	; (801b098 <USBD_LL_Init+0x94>)
 801b064:	f7eb fe81 	bl	8006d6a <HAL_PCD_Init>
 801b068:	4603      	mov	r3, r0
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d001      	beq.n	801b072 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801b06e:	f7e8 f835 	bl	80030dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801b072:	2180      	movs	r1, #128	; 0x80
 801b074:	4808      	ldr	r0, [pc, #32]	; (801b098 <USBD_LL_Init+0x94>)
 801b076:	f7ed f962 	bl	800833e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801b07a:	2240      	movs	r2, #64	; 0x40
 801b07c:	2100      	movs	r1, #0
 801b07e:	4806      	ldr	r0, [pc, #24]	; (801b098 <USBD_LL_Init+0x94>)
 801b080:	f7ed f916 	bl	80082b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801b084:	2280      	movs	r2, #128	; 0x80
 801b086:	2101      	movs	r1, #1
 801b088:	4803      	ldr	r0, [pc, #12]	; (801b098 <USBD_LL_Init+0x94>)
 801b08a:	f7ed f911 	bl	80082b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801b08e:	2300      	movs	r3, #0
}
 801b090:	4618      	mov	r0, r3
 801b092:	3708      	adds	r7, #8
 801b094:	46bd      	mov	sp, r7
 801b096:	bd80      	pop	{r7, pc}
 801b098:	2000288c 	.word	0x2000288c

0801b09c <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b084      	sub	sp, #16
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	f7eb ff76 	bl	8006fa4 <HAL_PCD_DeInit>
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0bc:	7bfb      	ldrb	r3, [r7, #15]
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f000 f998 	bl	801b3f4 <USBD_Get_USB_Status>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	3710      	adds	r7, #16
 801b0ce:	46bd      	mov	sp, r7
 801b0d0:	bd80      	pop	{r7, pc}

0801b0d2 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b0d2:	b580      	push	{r7, lr}
 801b0d4:	b084      	sub	sp, #16
 801b0d6:	af00      	add	r7, sp, #0
 801b0d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b0da:	2300      	movs	r3, #0
 801b0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b0de:	2300      	movs	r3, #0
 801b0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b0e8:	4618      	mov	r0, r3
 801b0ea:	f7eb ff7e 	bl	8006fea <HAL_PCD_Start>
 801b0ee:	4603      	mov	r3, r0
 801b0f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b0f2:	7bfb      	ldrb	r3, [r7, #15]
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	f000 f97d 	bl	801b3f4 <USBD_Get_USB_Status>
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b0fe:	7bbb      	ldrb	r3, [r7, #14]
}
 801b100:	4618      	mov	r0, r3
 801b102:	3710      	adds	r7, #16
 801b104:	46bd      	mov	sp, r7
 801b106:	bd80      	pop	{r7, pc}

0801b108 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b084      	sub	sp, #16
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b110:	2300      	movs	r3, #0
 801b112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b114:	2300      	movs	r3, #0
 801b116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b11e:	4618      	mov	r0, r3
 801b120:	f7eb ff96 	bl	8007050 <HAL_PCD_Stop>
 801b124:	4603      	mov	r3, r0
 801b126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b128:	7bfb      	ldrb	r3, [r7, #15]
 801b12a:	4618      	mov	r0, r3
 801b12c:	f000 f962 	bl	801b3f4 <USBD_Get_USB_Status>
 801b130:	4603      	mov	r3, r0
 801b132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b134:	7bbb      	ldrb	r3, [r7, #14]
}
 801b136:	4618      	mov	r0, r3
 801b138:	3710      	adds	r7, #16
 801b13a:	46bd      	mov	sp, r7
 801b13c:	bd80      	pop	{r7, pc}

0801b13e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b13e:	b580      	push	{r7, lr}
 801b140:	b084      	sub	sp, #16
 801b142:	af00      	add	r7, sp, #0
 801b144:	6078      	str	r0, [r7, #4]
 801b146:	4608      	mov	r0, r1
 801b148:	4611      	mov	r1, r2
 801b14a:	461a      	mov	r2, r3
 801b14c:	4603      	mov	r3, r0
 801b14e:	70fb      	strb	r3, [r7, #3]
 801b150:	460b      	mov	r3, r1
 801b152:	70bb      	strb	r3, [r7, #2]
 801b154:	4613      	mov	r3, r2
 801b156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b158:	2300      	movs	r3, #0
 801b15a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b15c:	2300      	movs	r3, #0
 801b15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b166:	78bb      	ldrb	r3, [r7, #2]
 801b168:	883a      	ldrh	r2, [r7, #0]
 801b16a:	78f9      	ldrb	r1, [r7, #3]
 801b16c:	f7ec fc6d 	bl	8007a4a <HAL_PCD_EP_Open>
 801b170:	4603      	mov	r3, r0
 801b172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b174:	7bfb      	ldrb	r3, [r7, #15]
 801b176:	4618      	mov	r0, r3
 801b178:	f000 f93c 	bl	801b3f4 <USBD_Get_USB_Status>
 801b17c:	4603      	mov	r3, r0
 801b17e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b180:	7bbb      	ldrb	r3, [r7, #14]
}
 801b182:	4618      	mov	r0, r3
 801b184:	3710      	adds	r7, #16
 801b186:	46bd      	mov	sp, r7
 801b188:	bd80      	pop	{r7, pc}

0801b18a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b18a:	b580      	push	{r7, lr}
 801b18c:	b084      	sub	sp, #16
 801b18e:	af00      	add	r7, sp, #0
 801b190:	6078      	str	r0, [r7, #4]
 801b192:	460b      	mov	r3, r1
 801b194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b196:	2300      	movs	r3, #0
 801b198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b19a:	2300      	movs	r3, #0
 801b19c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b1a4:	78fa      	ldrb	r2, [r7, #3]
 801b1a6:	4611      	mov	r1, r2
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f7ec fcb6 	bl	8007b1a <HAL_PCD_EP_Close>
 801b1ae:	4603      	mov	r3, r0
 801b1b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1b2:	7bfb      	ldrb	r3, [r7, #15]
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	f000 f91d 	bl	801b3f4 <USBD_Get_USB_Status>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b1be:	7bbb      	ldrb	r3, [r7, #14]
}
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	3710      	adds	r7, #16
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bd80      	pop	{r7, pc}

0801b1c8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b084      	sub	sp, #16
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	6078      	str	r0, [r7, #4]
 801b1d0:	460b      	mov	r3, r1
 801b1d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b1d8:	2300      	movs	r3, #0
 801b1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b1e2:	78fa      	ldrb	r2, [r7, #3]
 801b1e4:	4611      	mov	r1, r2
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	f7ec fe79 	bl	8007ede <HAL_PCD_EP_Flush>
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b1f0:	7bfb      	ldrb	r3, [r7, #15]
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	f000 f8fe 	bl	801b3f4 <USBD_Get_USB_Status>
 801b1f8:	4603      	mov	r3, r0
 801b1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 801b1fe:	4618      	mov	r0, r3
 801b200:	3710      	adds	r7, #16
 801b202:	46bd      	mov	sp, r7
 801b204:	bd80      	pop	{r7, pc}

0801b206 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b206:	b580      	push	{r7, lr}
 801b208:	b084      	sub	sp, #16
 801b20a:	af00      	add	r7, sp, #0
 801b20c:	6078      	str	r0, [r7, #4]
 801b20e:	460b      	mov	r3, r1
 801b210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b212:	2300      	movs	r3, #0
 801b214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b216:	2300      	movs	r3, #0
 801b218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b220:	78fa      	ldrb	r2, [r7, #3]
 801b222:	4611      	mov	r1, r2
 801b224:	4618      	mov	r0, r3
 801b226:	f7ec fd6f 	bl	8007d08 <HAL_PCD_EP_SetStall>
 801b22a:	4603      	mov	r3, r0
 801b22c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b22e:	7bfb      	ldrb	r3, [r7, #15]
 801b230:	4618      	mov	r0, r3
 801b232:	f000 f8df 	bl	801b3f4 <USBD_Get_USB_Status>
 801b236:	4603      	mov	r3, r0
 801b238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b23a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b23c:	4618      	mov	r0, r3
 801b23e:	3710      	adds	r7, #16
 801b240:	46bd      	mov	sp, r7
 801b242:	bd80      	pop	{r7, pc}

0801b244 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b244:	b580      	push	{r7, lr}
 801b246:	b084      	sub	sp, #16
 801b248:	af00      	add	r7, sp, #0
 801b24a:	6078      	str	r0, [r7, #4]
 801b24c:	460b      	mov	r3, r1
 801b24e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b250:	2300      	movs	r3, #0
 801b252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b254:	2300      	movs	r3, #0
 801b256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b25e:	78fa      	ldrb	r2, [r7, #3]
 801b260:	4611      	mov	r1, r2
 801b262:	4618      	mov	r0, r3
 801b264:	f7ec fdb4 	bl	8007dd0 <HAL_PCD_EP_ClrStall>
 801b268:	4603      	mov	r3, r0
 801b26a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b26c:	7bfb      	ldrb	r3, [r7, #15]
 801b26e:	4618      	mov	r0, r3
 801b270:	f000 f8c0 	bl	801b3f4 <USBD_Get_USB_Status>
 801b274:	4603      	mov	r3, r0
 801b276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b278:	7bbb      	ldrb	r3, [r7, #14]
}
 801b27a:	4618      	mov	r0, r3
 801b27c:	3710      	adds	r7, #16
 801b27e:	46bd      	mov	sp, r7
 801b280:	bd80      	pop	{r7, pc}

0801b282 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b282:	b480      	push	{r7}
 801b284:	b085      	sub	sp, #20
 801b286:	af00      	add	r7, sp, #0
 801b288:	6078      	str	r0, [r7, #4]
 801b28a:	460b      	mov	r3, r1
 801b28c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b294:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	da0b      	bge.n	801b2b6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b29e:	78fb      	ldrb	r3, [r7, #3]
 801b2a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b2a4:	68f9      	ldr	r1, [r7, #12]
 801b2a6:	4613      	mov	r3, r2
 801b2a8:	00db      	lsls	r3, r3, #3
 801b2aa:	4413      	add	r3, r2
 801b2ac:	009b      	lsls	r3, r3, #2
 801b2ae:	440b      	add	r3, r1
 801b2b0:	333e      	adds	r3, #62	; 0x3e
 801b2b2:	781b      	ldrb	r3, [r3, #0]
 801b2b4:	e00b      	b.n	801b2ce <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b2b6:	78fb      	ldrb	r3, [r7, #3]
 801b2b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b2bc:	68f9      	ldr	r1, [r7, #12]
 801b2be:	4613      	mov	r3, r2
 801b2c0:	00db      	lsls	r3, r3, #3
 801b2c2:	4413      	add	r3, r2
 801b2c4:	009b      	lsls	r3, r3, #2
 801b2c6:	440b      	add	r3, r1
 801b2c8:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b2cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	3714      	adds	r7, #20
 801b2d2:	46bd      	mov	sp, r7
 801b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d8:	4770      	bx	lr

0801b2da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b2da:	b580      	push	{r7, lr}
 801b2dc:	b084      	sub	sp, #16
 801b2de:	af00      	add	r7, sp, #0
 801b2e0:	6078      	str	r0, [r7, #4]
 801b2e2:	460b      	mov	r3, r1
 801b2e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b2f4:	78fa      	ldrb	r2, [r7, #3]
 801b2f6:	4611      	mov	r1, r2
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	f7ec fb81 	bl	8007a00 <HAL_PCD_SetAddress>
 801b2fe:	4603      	mov	r3, r0
 801b300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b302:	7bfb      	ldrb	r3, [r7, #15]
 801b304:	4618      	mov	r0, r3
 801b306:	f000 f875 	bl	801b3f4 <USBD_Get_USB_Status>
 801b30a:	4603      	mov	r3, r0
 801b30c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b30e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b310:	4618      	mov	r0, r3
 801b312:	3710      	adds	r7, #16
 801b314:	46bd      	mov	sp, r7
 801b316:	bd80      	pop	{r7, pc}

0801b318 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b318:	b580      	push	{r7, lr}
 801b31a:	b086      	sub	sp, #24
 801b31c:	af00      	add	r7, sp, #0
 801b31e:	60f8      	str	r0, [r7, #12]
 801b320:	607a      	str	r2, [r7, #4]
 801b322:	603b      	str	r3, [r7, #0]
 801b324:	460b      	mov	r3, r1
 801b326:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b328:	2300      	movs	r3, #0
 801b32a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b32c:	2300      	movs	r3, #0
 801b32e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b336:	7af9      	ldrb	r1, [r7, #11]
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	687a      	ldr	r2, [r7, #4]
 801b33c:	f7ec fc9a 	bl	8007c74 <HAL_PCD_EP_Transmit>
 801b340:	4603      	mov	r3, r0
 801b342:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b344:	7dfb      	ldrb	r3, [r7, #23]
 801b346:	4618      	mov	r0, r3
 801b348:	f000 f854 	bl	801b3f4 <USBD_Get_USB_Status>
 801b34c:	4603      	mov	r3, r0
 801b34e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b350:	7dbb      	ldrb	r3, [r7, #22]
}
 801b352:	4618      	mov	r0, r3
 801b354:	3718      	adds	r7, #24
 801b356:	46bd      	mov	sp, r7
 801b358:	bd80      	pop	{r7, pc}

0801b35a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b35a:	b580      	push	{r7, lr}
 801b35c:	b086      	sub	sp, #24
 801b35e:	af00      	add	r7, sp, #0
 801b360:	60f8      	str	r0, [r7, #12]
 801b362:	607a      	str	r2, [r7, #4]
 801b364:	603b      	str	r3, [r7, #0]
 801b366:	460b      	mov	r3, r1
 801b368:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b36a:	2300      	movs	r3, #0
 801b36c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b36e:	2300      	movs	r3, #0
 801b370:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b372:	68fb      	ldr	r3, [r7, #12]
 801b374:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b378:	7af9      	ldrb	r1, [r7, #11]
 801b37a:	683b      	ldr	r3, [r7, #0]
 801b37c:	687a      	ldr	r2, [r7, #4]
 801b37e:	f7ec fc16 	bl	8007bae <HAL_PCD_EP_Receive>
 801b382:	4603      	mov	r3, r0
 801b384:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b386:	7dfb      	ldrb	r3, [r7, #23]
 801b388:	4618      	mov	r0, r3
 801b38a:	f000 f833 	bl	801b3f4 <USBD_Get_USB_Status>
 801b38e:	4603      	mov	r3, r0
 801b390:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b392:	7dbb      	ldrb	r3, [r7, #22]
}
 801b394:	4618      	mov	r0, r3
 801b396:	3718      	adds	r7, #24
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}

0801b39c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	b082      	sub	sp, #8
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	6078      	str	r0, [r7, #4]
 801b3a4:	460b      	mov	r3, r1
 801b3a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b3ae:	78fa      	ldrb	r2, [r7, #3]
 801b3b0:	4611      	mov	r1, r2
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	f7ec fc46 	bl	8007c44 <HAL_PCD_EP_GetRxCount>
 801b3b8:	4603      	mov	r3, r0
}
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	3708      	adds	r7, #8
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	bd80      	pop	{r7, pc}
	...

0801b3c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b3c4:	b480      	push	{r7}
 801b3c6:	b083      	sub	sp, #12
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b3cc:	4b03      	ldr	r3, [pc, #12]	; (801b3dc <USBD_static_malloc+0x18>)
}
 801b3ce:	4618      	mov	r0, r3
 801b3d0:	370c      	adds	r7, #12
 801b3d2:	46bd      	mov	sp, r7
 801b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d8:	4770      	bx	lr
 801b3da:	bf00      	nop
 801b3dc:	20002d98 	.word	0x20002d98

0801b3e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b3e0:	b480      	push	{r7}
 801b3e2:	b083      	sub	sp, #12
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	6078      	str	r0, [r7, #4]

}
 801b3e8:	bf00      	nop
 801b3ea:	370c      	adds	r7, #12
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f2:	4770      	bx	lr

0801b3f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b3f4:	b480      	push	{r7}
 801b3f6:	b085      	sub	sp, #20
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	4603      	mov	r3, r0
 801b3fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b3fe:	2300      	movs	r3, #0
 801b400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b402:	79fb      	ldrb	r3, [r7, #7]
 801b404:	2b03      	cmp	r3, #3
 801b406:	d817      	bhi.n	801b438 <USBD_Get_USB_Status+0x44>
 801b408:	a201      	add	r2, pc, #4	; (adr r2, 801b410 <USBD_Get_USB_Status+0x1c>)
 801b40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b40e:	bf00      	nop
 801b410:	0801b421 	.word	0x0801b421
 801b414:	0801b427 	.word	0x0801b427
 801b418:	0801b42d 	.word	0x0801b42d
 801b41c:	0801b433 	.word	0x0801b433
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b420:	2300      	movs	r3, #0
 801b422:	73fb      	strb	r3, [r7, #15]
    break;
 801b424:	e00b      	b.n	801b43e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b426:	2303      	movs	r3, #3
 801b428:	73fb      	strb	r3, [r7, #15]
    break;
 801b42a:	e008      	b.n	801b43e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b42c:	2301      	movs	r3, #1
 801b42e:	73fb      	strb	r3, [r7, #15]
    break;
 801b430:	e005      	b.n	801b43e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b432:	2303      	movs	r3, #3
 801b434:	73fb      	strb	r3, [r7, #15]
    break;
 801b436:	e002      	b.n	801b43e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b438:	2303      	movs	r3, #3
 801b43a:	73fb      	strb	r3, [r7, #15]
    break;
 801b43c:	bf00      	nop
  }
  return usb_status;
 801b43e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b440:	4618      	mov	r0, r3
 801b442:	3714      	adds	r7, #20
 801b444:	46bd      	mov	sp, r7
 801b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b44a:	4770      	bx	lr

0801b44c <atoi>:
 801b44c:	220a      	movs	r2, #10
 801b44e:	2100      	movs	r1, #0
 801b450:	f002 b826 	b.w	801d4a0 <strtol>

0801b454 <__errno>:
 801b454:	4b01      	ldr	r3, [pc, #4]	; (801b45c <__errno+0x8>)
 801b456:	6818      	ldr	r0, [r3, #0]
 801b458:	4770      	bx	lr
 801b45a:	bf00      	nop
 801b45c:	20000144 	.word	0x20000144

0801b460 <_fwrite_r>:
 801b460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b464:	9c08      	ldr	r4, [sp, #32]
 801b466:	468a      	mov	sl, r1
 801b468:	4690      	mov	r8, r2
 801b46a:	fb02 f903 	mul.w	r9, r2, r3
 801b46e:	4605      	mov	r5, r0
 801b470:	b118      	cbz	r0, 801b47a <_fwrite_r+0x1a>
 801b472:	6983      	ldr	r3, [r0, #24]
 801b474:	b90b      	cbnz	r3, 801b47a <_fwrite_r+0x1a>
 801b476:	f003 f8cb 	bl	801e610 <__sinit>
 801b47a:	4b26      	ldr	r3, [pc, #152]	; (801b514 <_fwrite_r+0xb4>)
 801b47c:	429c      	cmp	r4, r3
 801b47e:	d123      	bne.n	801b4c8 <_fwrite_r+0x68>
 801b480:	686c      	ldr	r4, [r5, #4]
 801b482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b484:	07de      	lsls	r6, r3, #31
 801b486:	d405      	bmi.n	801b494 <_fwrite_r+0x34>
 801b488:	89a3      	ldrh	r3, [r4, #12]
 801b48a:	0598      	lsls	r0, r3, #22
 801b48c:	d402      	bmi.n	801b494 <_fwrite_r+0x34>
 801b48e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b490:	f000 f879 	bl	801b586 <__retarget_lock_acquire_recursive>
 801b494:	89a3      	ldrh	r3, [r4, #12]
 801b496:	0719      	lsls	r1, r3, #28
 801b498:	d520      	bpl.n	801b4dc <_fwrite_r+0x7c>
 801b49a:	6923      	ldr	r3, [r4, #16]
 801b49c:	b1f3      	cbz	r3, 801b4dc <_fwrite_r+0x7c>
 801b49e:	2600      	movs	r6, #0
 801b4a0:	454e      	cmp	r6, r9
 801b4a2:	d029      	beq.n	801b4f8 <_fwrite_r+0x98>
 801b4a4:	68a7      	ldr	r7, [r4, #8]
 801b4a6:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801b4aa:	3f01      	subs	r7, #1
 801b4ac:	2f00      	cmp	r7, #0
 801b4ae:	60a7      	str	r7, [r4, #8]
 801b4b0:	da04      	bge.n	801b4bc <_fwrite_r+0x5c>
 801b4b2:	69a3      	ldr	r3, [r4, #24]
 801b4b4:	429f      	cmp	r7, r3
 801b4b6:	db19      	blt.n	801b4ec <_fwrite_r+0x8c>
 801b4b8:	290a      	cmp	r1, #10
 801b4ba:	d017      	beq.n	801b4ec <_fwrite_r+0x8c>
 801b4bc:	6823      	ldr	r3, [r4, #0]
 801b4be:	1c5a      	adds	r2, r3, #1
 801b4c0:	6022      	str	r2, [r4, #0]
 801b4c2:	7019      	strb	r1, [r3, #0]
 801b4c4:	3601      	adds	r6, #1
 801b4c6:	e7eb      	b.n	801b4a0 <_fwrite_r+0x40>
 801b4c8:	4b13      	ldr	r3, [pc, #76]	; (801b518 <_fwrite_r+0xb8>)
 801b4ca:	429c      	cmp	r4, r3
 801b4cc:	d101      	bne.n	801b4d2 <_fwrite_r+0x72>
 801b4ce:	68ac      	ldr	r4, [r5, #8]
 801b4d0:	e7d7      	b.n	801b482 <_fwrite_r+0x22>
 801b4d2:	4b12      	ldr	r3, [pc, #72]	; (801b51c <_fwrite_r+0xbc>)
 801b4d4:	429c      	cmp	r4, r3
 801b4d6:	bf08      	it	eq
 801b4d8:	68ec      	ldreq	r4, [r5, #12]
 801b4da:	e7d2      	b.n	801b482 <_fwrite_r+0x22>
 801b4dc:	4621      	mov	r1, r4
 801b4de:	4628      	mov	r0, r5
 801b4e0:	f002 f874 	bl	801d5cc <__swsetup_r>
 801b4e4:	2800      	cmp	r0, #0
 801b4e6:	d0da      	beq.n	801b49e <_fwrite_r+0x3e>
 801b4e8:	2600      	movs	r6, #0
 801b4ea:	e005      	b.n	801b4f8 <_fwrite_r+0x98>
 801b4ec:	4622      	mov	r2, r4
 801b4ee:	4628      	mov	r0, r5
 801b4f0:	f002 f81a 	bl	801d528 <__swbuf_r>
 801b4f4:	3001      	adds	r0, #1
 801b4f6:	d1e5      	bne.n	801b4c4 <_fwrite_r+0x64>
 801b4f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b4fa:	07da      	lsls	r2, r3, #31
 801b4fc:	d405      	bmi.n	801b50a <_fwrite_r+0xaa>
 801b4fe:	89a3      	ldrh	r3, [r4, #12]
 801b500:	059b      	lsls	r3, r3, #22
 801b502:	d402      	bmi.n	801b50a <_fwrite_r+0xaa>
 801b504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b506:	f000 f83f 	bl	801b588 <__retarget_lock_release_recursive>
 801b50a:	fbb6 f0f8 	udiv	r0, r6, r8
 801b50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b512:	bf00      	nop
 801b514:	08022264 	.word	0x08022264
 801b518:	08022284 	.word	0x08022284
 801b51c:	08022244 	.word	0x08022244

0801b520 <fwrite>:
 801b520:	b507      	push	{r0, r1, r2, lr}
 801b522:	9300      	str	r3, [sp, #0]
 801b524:	4613      	mov	r3, r2
 801b526:	460a      	mov	r2, r1
 801b528:	4601      	mov	r1, r0
 801b52a:	4803      	ldr	r0, [pc, #12]	; (801b538 <fwrite+0x18>)
 801b52c:	6800      	ldr	r0, [r0, #0]
 801b52e:	f7ff ff97 	bl	801b460 <_fwrite_r>
 801b532:	b003      	add	sp, #12
 801b534:	f85d fb04 	ldr.w	pc, [sp], #4
 801b538:	20000144 	.word	0x20000144

0801b53c <__libc_init_array>:
 801b53c:	b570      	push	{r4, r5, r6, lr}
 801b53e:	4d0d      	ldr	r5, [pc, #52]	; (801b574 <__libc_init_array+0x38>)
 801b540:	4c0d      	ldr	r4, [pc, #52]	; (801b578 <__libc_init_array+0x3c>)
 801b542:	1b64      	subs	r4, r4, r5
 801b544:	10a4      	asrs	r4, r4, #2
 801b546:	2600      	movs	r6, #0
 801b548:	42a6      	cmp	r6, r4
 801b54a:	d109      	bne.n	801b560 <__libc_init_array+0x24>
 801b54c:	4d0b      	ldr	r5, [pc, #44]	; (801b57c <__libc_init_array+0x40>)
 801b54e:	4c0c      	ldr	r4, [pc, #48]	; (801b580 <__libc_init_array+0x44>)
 801b550:	f004 fdea 	bl	8020128 <_init>
 801b554:	1b64      	subs	r4, r4, r5
 801b556:	10a4      	asrs	r4, r4, #2
 801b558:	2600      	movs	r6, #0
 801b55a:	42a6      	cmp	r6, r4
 801b55c:	d105      	bne.n	801b56a <__libc_init_array+0x2e>
 801b55e:	bd70      	pop	{r4, r5, r6, pc}
 801b560:	f855 3b04 	ldr.w	r3, [r5], #4
 801b564:	4798      	blx	r3
 801b566:	3601      	adds	r6, #1
 801b568:	e7ee      	b.n	801b548 <__libc_init_array+0xc>
 801b56a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b56e:	4798      	blx	r3
 801b570:	3601      	adds	r6, #1
 801b572:	e7f2      	b.n	801b55a <__libc_init_array+0x1e>
 801b574:	08022498 	.word	0x08022498
 801b578:	08022498 	.word	0x08022498
 801b57c:	08022498 	.word	0x08022498
 801b580:	0802249c 	.word	0x0802249c

0801b584 <__retarget_lock_init_recursive>:
 801b584:	4770      	bx	lr

0801b586 <__retarget_lock_acquire_recursive>:
 801b586:	4770      	bx	lr

0801b588 <__retarget_lock_release_recursive>:
 801b588:	4770      	bx	lr
	...

0801b58c <malloc>:
 801b58c:	4b02      	ldr	r3, [pc, #8]	; (801b598 <malloc+0xc>)
 801b58e:	4601      	mov	r1, r0
 801b590:	6818      	ldr	r0, [r3, #0]
 801b592:	f000 b89f 	b.w	801b6d4 <_malloc_r>
 801b596:	bf00      	nop
 801b598:	20000144 	.word	0x20000144

0801b59c <memcpy>:
 801b59c:	440a      	add	r2, r1
 801b59e:	4291      	cmp	r1, r2
 801b5a0:	f100 33ff 	add.w	r3, r0, #4294967295
 801b5a4:	d100      	bne.n	801b5a8 <memcpy+0xc>
 801b5a6:	4770      	bx	lr
 801b5a8:	b510      	push	{r4, lr}
 801b5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b5ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b5b2:	4291      	cmp	r1, r2
 801b5b4:	d1f9      	bne.n	801b5aa <memcpy+0xe>
 801b5b6:	bd10      	pop	{r4, pc}

0801b5b8 <memmove>:
 801b5b8:	4288      	cmp	r0, r1
 801b5ba:	b510      	push	{r4, lr}
 801b5bc:	eb01 0402 	add.w	r4, r1, r2
 801b5c0:	d902      	bls.n	801b5c8 <memmove+0x10>
 801b5c2:	4284      	cmp	r4, r0
 801b5c4:	4623      	mov	r3, r4
 801b5c6:	d807      	bhi.n	801b5d8 <memmove+0x20>
 801b5c8:	1e43      	subs	r3, r0, #1
 801b5ca:	42a1      	cmp	r1, r4
 801b5cc:	d008      	beq.n	801b5e0 <memmove+0x28>
 801b5ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b5d6:	e7f8      	b.n	801b5ca <memmove+0x12>
 801b5d8:	4402      	add	r2, r0
 801b5da:	4601      	mov	r1, r0
 801b5dc:	428a      	cmp	r2, r1
 801b5de:	d100      	bne.n	801b5e2 <memmove+0x2a>
 801b5e0:	bd10      	pop	{r4, pc}
 801b5e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b5e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b5ea:	e7f7      	b.n	801b5dc <memmove+0x24>

0801b5ec <memset>:
 801b5ec:	4402      	add	r2, r0
 801b5ee:	4603      	mov	r3, r0
 801b5f0:	4293      	cmp	r3, r2
 801b5f2:	d100      	bne.n	801b5f6 <memset+0xa>
 801b5f4:	4770      	bx	lr
 801b5f6:	f803 1b01 	strb.w	r1, [r3], #1
 801b5fa:	e7f9      	b.n	801b5f0 <memset+0x4>

0801b5fc <_free_r>:
 801b5fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b5fe:	2900      	cmp	r1, #0
 801b600:	d044      	beq.n	801b68c <_free_r+0x90>
 801b602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b606:	9001      	str	r0, [sp, #4]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	f1a1 0404 	sub.w	r4, r1, #4
 801b60e:	bfb8      	it	lt
 801b610:	18e4      	addlt	r4, r4, r3
 801b612:	f003 fc97 	bl	801ef44 <__malloc_lock>
 801b616:	4a1e      	ldr	r2, [pc, #120]	; (801b690 <_free_r+0x94>)
 801b618:	9801      	ldr	r0, [sp, #4]
 801b61a:	6813      	ldr	r3, [r2, #0]
 801b61c:	b933      	cbnz	r3, 801b62c <_free_r+0x30>
 801b61e:	6063      	str	r3, [r4, #4]
 801b620:	6014      	str	r4, [r2, #0]
 801b622:	b003      	add	sp, #12
 801b624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b628:	f003 bc92 	b.w	801ef50 <__malloc_unlock>
 801b62c:	42a3      	cmp	r3, r4
 801b62e:	d908      	bls.n	801b642 <_free_r+0x46>
 801b630:	6825      	ldr	r5, [r4, #0]
 801b632:	1961      	adds	r1, r4, r5
 801b634:	428b      	cmp	r3, r1
 801b636:	bf01      	itttt	eq
 801b638:	6819      	ldreq	r1, [r3, #0]
 801b63a:	685b      	ldreq	r3, [r3, #4]
 801b63c:	1949      	addeq	r1, r1, r5
 801b63e:	6021      	streq	r1, [r4, #0]
 801b640:	e7ed      	b.n	801b61e <_free_r+0x22>
 801b642:	461a      	mov	r2, r3
 801b644:	685b      	ldr	r3, [r3, #4]
 801b646:	b10b      	cbz	r3, 801b64c <_free_r+0x50>
 801b648:	42a3      	cmp	r3, r4
 801b64a:	d9fa      	bls.n	801b642 <_free_r+0x46>
 801b64c:	6811      	ldr	r1, [r2, #0]
 801b64e:	1855      	adds	r5, r2, r1
 801b650:	42a5      	cmp	r5, r4
 801b652:	d10b      	bne.n	801b66c <_free_r+0x70>
 801b654:	6824      	ldr	r4, [r4, #0]
 801b656:	4421      	add	r1, r4
 801b658:	1854      	adds	r4, r2, r1
 801b65a:	42a3      	cmp	r3, r4
 801b65c:	6011      	str	r1, [r2, #0]
 801b65e:	d1e0      	bne.n	801b622 <_free_r+0x26>
 801b660:	681c      	ldr	r4, [r3, #0]
 801b662:	685b      	ldr	r3, [r3, #4]
 801b664:	6053      	str	r3, [r2, #4]
 801b666:	4421      	add	r1, r4
 801b668:	6011      	str	r1, [r2, #0]
 801b66a:	e7da      	b.n	801b622 <_free_r+0x26>
 801b66c:	d902      	bls.n	801b674 <_free_r+0x78>
 801b66e:	230c      	movs	r3, #12
 801b670:	6003      	str	r3, [r0, #0]
 801b672:	e7d6      	b.n	801b622 <_free_r+0x26>
 801b674:	6825      	ldr	r5, [r4, #0]
 801b676:	1961      	adds	r1, r4, r5
 801b678:	428b      	cmp	r3, r1
 801b67a:	bf04      	itt	eq
 801b67c:	6819      	ldreq	r1, [r3, #0]
 801b67e:	685b      	ldreq	r3, [r3, #4]
 801b680:	6063      	str	r3, [r4, #4]
 801b682:	bf04      	itt	eq
 801b684:	1949      	addeq	r1, r1, r5
 801b686:	6021      	streq	r1, [r4, #0]
 801b688:	6054      	str	r4, [r2, #4]
 801b68a:	e7ca      	b.n	801b622 <_free_r+0x26>
 801b68c:	b003      	add	sp, #12
 801b68e:	bd30      	pop	{r4, r5, pc}
 801b690:	20003614 	.word	0x20003614

0801b694 <sbrk_aligned>:
 801b694:	b570      	push	{r4, r5, r6, lr}
 801b696:	4e0e      	ldr	r6, [pc, #56]	; (801b6d0 <sbrk_aligned+0x3c>)
 801b698:	460c      	mov	r4, r1
 801b69a:	6831      	ldr	r1, [r6, #0]
 801b69c:	4605      	mov	r5, r0
 801b69e:	b911      	cbnz	r1, 801b6a6 <sbrk_aligned+0x12>
 801b6a0:	f000 ff94 	bl	801c5cc <_sbrk_r>
 801b6a4:	6030      	str	r0, [r6, #0]
 801b6a6:	4621      	mov	r1, r4
 801b6a8:	4628      	mov	r0, r5
 801b6aa:	f000 ff8f 	bl	801c5cc <_sbrk_r>
 801b6ae:	1c43      	adds	r3, r0, #1
 801b6b0:	d00a      	beq.n	801b6c8 <sbrk_aligned+0x34>
 801b6b2:	1cc4      	adds	r4, r0, #3
 801b6b4:	f024 0403 	bic.w	r4, r4, #3
 801b6b8:	42a0      	cmp	r0, r4
 801b6ba:	d007      	beq.n	801b6cc <sbrk_aligned+0x38>
 801b6bc:	1a21      	subs	r1, r4, r0
 801b6be:	4628      	mov	r0, r5
 801b6c0:	f000 ff84 	bl	801c5cc <_sbrk_r>
 801b6c4:	3001      	adds	r0, #1
 801b6c6:	d101      	bne.n	801b6cc <sbrk_aligned+0x38>
 801b6c8:	f04f 34ff 	mov.w	r4, #4294967295
 801b6cc:	4620      	mov	r0, r4
 801b6ce:	bd70      	pop	{r4, r5, r6, pc}
 801b6d0:	20003618 	.word	0x20003618

0801b6d4 <_malloc_r>:
 801b6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6d8:	1ccd      	adds	r5, r1, #3
 801b6da:	f025 0503 	bic.w	r5, r5, #3
 801b6de:	3508      	adds	r5, #8
 801b6e0:	2d0c      	cmp	r5, #12
 801b6e2:	bf38      	it	cc
 801b6e4:	250c      	movcc	r5, #12
 801b6e6:	2d00      	cmp	r5, #0
 801b6e8:	4607      	mov	r7, r0
 801b6ea:	db01      	blt.n	801b6f0 <_malloc_r+0x1c>
 801b6ec:	42a9      	cmp	r1, r5
 801b6ee:	d905      	bls.n	801b6fc <_malloc_r+0x28>
 801b6f0:	230c      	movs	r3, #12
 801b6f2:	603b      	str	r3, [r7, #0]
 801b6f4:	2600      	movs	r6, #0
 801b6f6:	4630      	mov	r0, r6
 801b6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6fc:	4e2e      	ldr	r6, [pc, #184]	; (801b7b8 <_malloc_r+0xe4>)
 801b6fe:	f003 fc21 	bl	801ef44 <__malloc_lock>
 801b702:	6833      	ldr	r3, [r6, #0]
 801b704:	461c      	mov	r4, r3
 801b706:	bb34      	cbnz	r4, 801b756 <_malloc_r+0x82>
 801b708:	4629      	mov	r1, r5
 801b70a:	4638      	mov	r0, r7
 801b70c:	f7ff ffc2 	bl	801b694 <sbrk_aligned>
 801b710:	1c43      	adds	r3, r0, #1
 801b712:	4604      	mov	r4, r0
 801b714:	d14d      	bne.n	801b7b2 <_malloc_r+0xde>
 801b716:	6834      	ldr	r4, [r6, #0]
 801b718:	4626      	mov	r6, r4
 801b71a:	2e00      	cmp	r6, #0
 801b71c:	d140      	bne.n	801b7a0 <_malloc_r+0xcc>
 801b71e:	6823      	ldr	r3, [r4, #0]
 801b720:	4631      	mov	r1, r6
 801b722:	4638      	mov	r0, r7
 801b724:	eb04 0803 	add.w	r8, r4, r3
 801b728:	f000 ff50 	bl	801c5cc <_sbrk_r>
 801b72c:	4580      	cmp	r8, r0
 801b72e:	d13a      	bne.n	801b7a6 <_malloc_r+0xd2>
 801b730:	6821      	ldr	r1, [r4, #0]
 801b732:	3503      	adds	r5, #3
 801b734:	1a6d      	subs	r5, r5, r1
 801b736:	f025 0503 	bic.w	r5, r5, #3
 801b73a:	3508      	adds	r5, #8
 801b73c:	2d0c      	cmp	r5, #12
 801b73e:	bf38      	it	cc
 801b740:	250c      	movcc	r5, #12
 801b742:	4629      	mov	r1, r5
 801b744:	4638      	mov	r0, r7
 801b746:	f7ff ffa5 	bl	801b694 <sbrk_aligned>
 801b74a:	3001      	adds	r0, #1
 801b74c:	d02b      	beq.n	801b7a6 <_malloc_r+0xd2>
 801b74e:	6823      	ldr	r3, [r4, #0]
 801b750:	442b      	add	r3, r5
 801b752:	6023      	str	r3, [r4, #0]
 801b754:	e00e      	b.n	801b774 <_malloc_r+0xa0>
 801b756:	6822      	ldr	r2, [r4, #0]
 801b758:	1b52      	subs	r2, r2, r5
 801b75a:	d41e      	bmi.n	801b79a <_malloc_r+0xc6>
 801b75c:	2a0b      	cmp	r2, #11
 801b75e:	d916      	bls.n	801b78e <_malloc_r+0xba>
 801b760:	1961      	adds	r1, r4, r5
 801b762:	42a3      	cmp	r3, r4
 801b764:	6025      	str	r5, [r4, #0]
 801b766:	bf18      	it	ne
 801b768:	6059      	strne	r1, [r3, #4]
 801b76a:	6863      	ldr	r3, [r4, #4]
 801b76c:	bf08      	it	eq
 801b76e:	6031      	streq	r1, [r6, #0]
 801b770:	5162      	str	r2, [r4, r5]
 801b772:	604b      	str	r3, [r1, #4]
 801b774:	4638      	mov	r0, r7
 801b776:	f104 060b 	add.w	r6, r4, #11
 801b77a:	f003 fbe9 	bl	801ef50 <__malloc_unlock>
 801b77e:	f026 0607 	bic.w	r6, r6, #7
 801b782:	1d23      	adds	r3, r4, #4
 801b784:	1af2      	subs	r2, r6, r3
 801b786:	d0b6      	beq.n	801b6f6 <_malloc_r+0x22>
 801b788:	1b9b      	subs	r3, r3, r6
 801b78a:	50a3      	str	r3, [r4, r2]
 801b78c:	e7b3      	b.n	801b6f6 <_malloc_r+0x22>
 801b78e:	6862      	ldr	r2, [r4, #4]
 801b790:	42a3      	cmp	r3, r4
 801b792:	bf0c      	ite	eq
 801b794:	6032      	streq	r2, [r6, #0]
 801b796:	605a      	strne	r2, [r3, #4]
 801b798:	e7ec      	b.n	801b774 <_malloc_r+0xa0>
 801b79a:	4623      	mov	r3, r4
 801b79c:	6864      	ldr	r4, [r4, #4]
 801b79e:	e7b2      	b.n	801b706 <_malloc_r+0x32>
 801b7a0:	4634      	mov	r4, r6
 801b7a2:	6876      	ldr	r6, [r6, #4]
 801b7a4:	e7b9      	b.n	801b71a <_malloc_r+0x46>
 801b7a6:	230c      	movs	r3, #12
 801b7a8:	603b      	str	r3, [r7, #0]
 801b7aa:	4638      	mov	r0, r7
 801b7ac:	f003 fbd0 	bl	801ef50 <__malloc_unlock>
 801b7b0:	e7a1      	b.n	801b6f6 <_malloc_r+0x22>
 801b7b2:	6025      	str	r5, [r4, #0]
 801b7b4:	e7de      	b.n	801b774 <_malloc_r+0xa0>
 801b7b6:	bf00      	nop
 801b7b8:	20003614 	.word	0x20003614

0801b7bc <__cvt>:
 801b7bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7c0:	ec55 4b10 	vmov	r4, r5, d0
 801b7c4:	2d00      	cmp	r5, #0
 801b7c6:	460e      	mov	r6, r1
 801b7c8:	4619      	mov	r1, r3
 801b7ca:	462b      	mov	r3, r5
 801b7cc:	bfbb      	ittet	lt
 801b7ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b7d2:	461d      	movlt	r5, r3
 801b7d4:	2300      	movge	r3, #0
 801b7d6:	232d      	movlt	r3, #45	; 0x2d
 801b7d8:	700b      	strb	r3, [r1, #0]
 801b7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b7e0:	4691      	mov	r9, r2
 801b7e2:	f023 0820 	bic.w	r8, r3, #32
 801b7e6:	bfbc      	itt	lt
 801b7e8:	4622      	movlt	r2, r4
 801b7ea:	4614      	movlt	r4, r2
 801b7ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b7f0:	d005      	beq.n	801b7fe <__cvt+0x42>
 801b7f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b7f6:	d100      	bne.n	801b7fa <__cvt+0x3e>
 801b7f8:	3601      	adds	r6, #1
 801b7fa:	2102      	movs	r1, #2
 801b7fc:	e000      	b.n	801b800 <__cvt+0x44>
 801b7fe:	2103      	movs	r1, #3
 801b800:	ab03      	add	r3, sp, #12
 801b802:	9301      	str	r3, [sp, #4]
 801b804:	ab02      	add	r3, sp, #8
 801b806:	9300      	str	r3, [sp, #0]
 801b808:	ec45 4b10 	vmov	d0, r4, r5
 801b80c:	4653      	mov	r3, sl
 801b80e:	4632      	mov	r2, r6
 801b810:	f001 fff6 	bl	801d800 <_dtoa_r>
 801b814:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b818:	4607      	mov	r7, r0
 801b81a:	d102      	bne.n	801b822 <__cvt+0x66>
 801b81c:	f019 0f01 	tst.w	r9, #1
 801b820:	d022      	beq.n	801b868 <__cvt+0xac>
 801b822:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b826:	eb07 0906 	add.w	r9, r7, r6
 801b82a:	d110      	bne.n	801b84e <__cvt+0x92>
 801b82c:	783b      	ldrb	r3, [r7, #0]
 801b82e:	2b30      	cmp	r3, #48	; 0x30
 801b830:	d10a      	bne.n	801b848 <__cvt+0x8c>
 801b832:	2200      	movs	r2, #0
 801b834:	2300      	movs	r3, #0
 801b836:	4620      	mov	r0, r4
 801b838:	4629      	mov	r1, r5
 801b83a:	f7e5 f95d 	bl	8000af8 <__aeabi_dcmpeq>
 801b83e:	b918      	cbnz	r0, 801b848 <__cvt+0x8c>
 801b840:	f1c6 0601 	rsb	r6, r6, #1
 801b844:	f8ca 6000 	str.w	r6, [sl]
 801b848:	f8da 3000 	ldr.w	r3, [sl]
 801b84c:	4499      	add	r9, r3
 801b84e:	2200      	movs	r2, #0
 801b850:	2300      	movs	r3, #0
 801b852:	4620      	mov	r0, r4
 801b854:	4629      	mov	r1, r5
 801b856:	f7e5 f94f 	bl	8000af8 <__aeabi_dcmpeq>
 801b85a:	b108      	cbz	r0, 801b860 <__cvt+0xa4>
 801b85c:	f8cd 900c 	str.w	r9, [sp, #12]
 801b860:	2230      	movs	r2, #48	; 0x30
 801b862:	9b03      	ldr	r3, [sp, #12]
 801b864:	454b      	cmp	r3, r9
 801b866:	d307      	bcc.n	801b878 <__cvt+0xbc>
 801b868:	9b03      	ldr	r3, [sp, #12]
 801b86a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b86c:	1bdb      	subs	r3, r3, r7
 801b86e:	4638      	mov	r0, r7
 801b870:	6013      	str	r3, [r2, #0]
 801b872:	b004      	add	sp, #16
 801b874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b878:	1c59      	adds	r1, r3, #1
 801b87a:	9103      	str	r1, [sp, #12]
 801b87c:	701a      	strb	r2, [r3, #0]
 801b87e:	e7f0      	b.n	801b862 <__cvt+0xa6>

0801b880 <__exponent>:
 801b880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b882:	4603      	mov	r3, r0
 801b884:	2900      	cmp	r1, #0
 801b886:	bfb8      	it	lt
 801b888:	4249      	neglt	r1, r1
 801b88a:	f803 2b02 	strb.w	r2, [r3], #2
 801b88e:	bfb4      	ite	lt
 801b890:	222d      	movlt	r2, #45	; 0x2d
 801b892:	222b      	movge	r2, #43	; 0x2b
 801b894:	2909      	cmp	r1, #9
 801b896:	7042      	strb	r2, [r0, #1]
 801b898:	dd2a      	ble.n	801b8f0 <__exponent+0x70>
 801b89a:	f10d 0407 	add.w	r4, sp, #7
 801b89e:	46a4      	mov	ip, r4
 801b8a0:	270a      	movs	r7, #10
 801b8a2:	46a6      	mov	lr, r4
 801b8a4:	460a      	mov	r2, r1
 801b8a6:	fb91 f6f7 	sdiv	r6, r1, r7
 801b8aa:	fb07 1516 	mls	r5, r7, r6, r1
 801b8ae:	3530      	adds	r5, #48	; 0x30
 801b8b0:	2a63      	cmp	r2, #99	; 0x63
 801b8b2:	f104 34ff 	add.w	r4, r4, #4294967295
 801b8b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b8ba:	4631      	mov	r1, r6
 801b8bc:	dcf1      	bgt.n	801b8a2 <__exponent+0x22>
 801b8be:	3130      	adds	r1, #48	; 0x30
 801b8c0:	f1ae 0502 	sub.w	r5, lr, #2
 801b8c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b8c8:	1c44      	adds	r4, r0, #1
 801b8ca:	4629      	mov	r1, r5
 801b8cc:	4561      	cmp	r1, ip
 801b8ce:	d30a      	bcc.n	801b8e6 <__exponent+0x66>
 801b8d0:	f10d 0209 	add.w	r2, sp, #9
 801b8d4:	eba2 020e 	sub.w	r2, r2, lr
 801b8d8:	4565      	cmp	r5, ip
 801b8da:	bf88      	it	hi
 801b8dc:	2200      	movhi	r2, #0
 801b8de:	4413      	add	r3, r2
 801b8e0:	1a18      	subs	r0, r3, r0
 801b8e2:	b003      	add	sp, #12
 801b8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b8ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b8ee:	e7ed      	b.n	801b8cc <__exponent+0x4c>
 801b8f0:	2330      	movs	r3, #48	; 0x30
 801b8f2:	3130      	adds	r1, #48	; 0x30
 801b8f4:	7083      	strb	r3, [r0, #2]
 801b8f6:	70c1      	strb	r1, [r0, #3]
 801b8f8:	1d03      	adds	r3, r0, #4
 801b8fa:	e7f1      	b.n	801b8e0 <__exponent+0x60>

0801b8fc <_printf_float>:
 801b8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b900:	ed2d 8b02 	vpush	{d8}
 801b904:	b08d      	sub	sp, #52	; 0x34
 801b906:	460c      	mov	r4, r1
 801b908:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b90c:	4616      	mov	r6, r2
 801b90e:	461f      	mov	r7, r3
 801b910:	4605      	mov	r5, r0
 801b912:	f003 fa9b 	bl	801ee4c <_localeconv_r>
 801b916:	f8d0 a000 	ldr.w	sl, [r0]
 801b91a:	4650      	mov	r0, sl
 801b91c:	f7e4 fc6a 	bl	80001f4 <strlen>
 801b920:	2300      	movs	r3, #0
 801b922:	930a      	str	r3, [sp, #40]	; 0x28
 801b924:	6823      	ldr	r3, [r4, #0]
 801b926:	9305      	str	r3, [sp, #20]
 801b928:	f8d8 3000 	ldr.w	r3, [r8]
 801b92c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b930:	3307      	adds	r3, #7
 801b932:	f023 0307 	bic.w	r3, r3, #7
 801b936:	f103 0208 	add.w	r2, r3, #8
 801b93a:	f8c8 2000 	str.w	r2, [r8]
 801b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b942:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b946:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b94a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b94e:	9307      	str	r3, [sp, #28]
 801b950:	f8cd 8018 	str.w	r8, [sp, #24]
 801b954:	ee08 0a10 	vmov	s16, r0
 801b958:	4b9f      	ldr	r3, [pc, #636]	; (801bbd8 <_printf_float+0x2dc>)
 801b95a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b95e:	f04f 32ff 	mov.w	r2, #4294967295
 801b962:	f7e5 f8fb 	bl	8000b5c <__aeabi_dcmpun>
 801b966:	bb88      	cbnz	r0, 801b9cc <_printf_float+0xd0>
 801b968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b96c:	4b9a      	ldr	r3, [pc, #616]	; (801bbd8 <_printf_float+0x2dc>)
 801b96e:	f04f 32ff 	mov.w	r2, #4294967295
 801b972:	f7e5 f8d5 	bl	8000b20 <__aeabi_dcmple>
 801b976:	bb48      	cbnz	r0, 801b9cc <_printf_float+0xd0>
 801b978:	2200      	movs	r2, #0
 801b97a:	2300      	movs	r3, #0
 801b97c:	4640      	mov	r0, r8
 801b97e:	4649      	mov	r1, r9
 801b980:	f7e5 f8c4 	bl	8000b0c <__aeabi_dcmplt>
 801b984:	b110      	cbz	r0, 801b98c <_printf_float+0x90>
 801b986:	232d      	movs	r3, #45	; 0x2d
 801b988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b98c:	4b93      	ldr	r3, [pc, #588]	; (801bbdc <_printf_float+0x2e0>)
 801b98e:	4894      	ldr	r0, [pc, #592]	; (801bbe0 <_printf_float+0x2e4>)
 801b990:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b994:	bf94      	ite	ls
 801b996:	4698      	movls	r8, r3
 801b998:	4680      	movhi	r8, r0
 801b99a:	2303      	movs	r3, #3
 801b99c:	6123      	str	r3, [r4, #16]
 801b99e:	9b05      	ldr	r3, [sp, #20]
 801b9a0:	f023 0204 	bic.w	r2, r3, #4
 801b9a4:	6022      	str	r2, [r4, #0]
 801b9a6:	f04f 0900 	mov.w	r9, #0
 801b9aa:	9700      	str	r7, [sp, #0]
 801b9ac:	4633      	mov	r3, r6
 801b9ae:	aa0b      	add	r2, sp, #44	; 0x2c
 801b9b0:	4621      	mov	r1, r4
 801b9b2:	4628      	mov	r0, r5
 801b9b4:	f000 f9d8 	bl	801bd68 <_printf_common>
 801b9b8:	3001      	adds	r0, #1
 801b9ba:	f040 8090 	bne.w	801bade <_printf_float+0x1e2>
 801b9be:	f04f 30ff 	mov.w	r0, #4294967295
 801b9c2:	b00d      	add	sp, #52	; 0x34
 801b9c4:	ecbd 8b02 	vpop	{d8}
 801b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9cc:	4642      	mov	r2, r8
 801b9ce:	464b      	mov	r3, r9
 801b9d0:	4640      	mov	r0, r8
 801b9d2:	4649      	mov	r1, r9
 801b9d4:	f7e5 f8c2 	bl	8000b5c <__aeabi_dcmpun>
 801b9d8:	b140      	cbz	r0, 801b9ec <_printf_float+0xf0>
 801b9da:	464b      	mov	r3, r9
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	bfbc      	itt	lt
 801b9e0:	232d      	movlt	r3, #45	; 0x2d
 801b9e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b9e6:	487f      	ldr	r0, [pc, #508]	; (801bbe4 <_printf_float+0x2e8>)
 801b9e8:	4b7f      	ldr	r3, [pc, #508]	; (801bbe8 <_printf_float+0x2ec>)
 801b9ea:	e7d1      	b.n	801b990 <_printf_float+0x94>
 801b9ec:	6863      	ldr	r3, [r4, #4]
 801b9ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b9f2:	9206      	str	r2, [sp, #24]
 801b9f4:	1c5a      	adds	r2, r3, #1
 801b9f6:	d13f      	bne.n	801ba78 <_printf_float+0x17c>
 801b9f8:	2306      	movs	r3, #6
 801b9fa:	6063      	str	r3, [r4, #4]
 801b9fc:	9b05      	ldr	r3, [sp, #20]
 801b9fe:	6861      	ldr	r1, [r4, #4]
 801ba00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801ba04:	2300      	movs	r3, #0
 801ba06:	9303      	str	r3, [sp, #12]
 801ba08:	ab0a      	add	r3, sp, #40	; 0x28
 801ba0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ba0e:	ab09      	add	r3, sp, #36	; 0x24
 801ba10:	ec49 8b10 	vmov	d0, r8, r9
 801ba14:	9300      	str	r3, [sp, #0]
 801ba16:	6022      	str	r2, [r4, #0]
 801ba18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ba1c:	4628      	mov	r0, r5
 801ba1e:	f7ff fecd 	bl	801b7bc <__cvt>
 801ba22:	9b06      	ldr	r3, [sp, #24]
 801ba24:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ba26:	2b47      	cmp	r3, #71	; 0x47
 801ba28:	4680      	mov	r8, r0
 801ba2a:	d108      	bne.n	801ba3e <_printf_float+0x142>
 801ba2c:	1cc8      	adds	r0, r1, #3
 801ba2e:	db02      	blt.n	801ba36 <_printf_float+0x13a>
 801ba30:	6863      	ldr	r3, [r4, #4]
 801ba32:	4299      	cmp	r1, r3
 801ba34:	dd41      	ble.n	801baba <_printf_float+0x1be>
 801ba36:	f1ab 0b02 	sub.w	fp, fp, #2
 801ba3a:	fa5f fb8b 	uxtb.w	fp, fp
 801ba3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ba42:	d820      	bhi.n	801ba86 <_printf_float+0x18a>
 801ba44:	3901      	subs	r1, #1
 801ba46:	465a      	mov	r2, fp
 801ba48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ba4c:	9109      	str	r1, [sp, #36]	; 0x24
 801ba4e:	f7ff ff17 	bl	801b880 <__exponent>
 801ba52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ba54:	1813      	adds	r3, r2, r0
 801ba56:	2a01      	cmp	r2, #1
 801ba58:	4681      	mov	r9, r0
 801ba5a:	6123      	str	r3, [r4, #16]
 801ba5c:	dc02      	bgt.n	801ba64 <_printf_float+0x168>
 801ba5e:	6822      	ldr	r2, [r4, #0]
 801ba60:	07d2      	lsls	r2, r2, #31
 801ba62:	d501      	bpl.n	801ba68 <_printf_float+0x16c>
 801ba64:	3301      	adds	r3, #1
 801ba66:	6123      	str	r3, [r4, #16]
 801ba68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d09c      	beq.n	801b9aa <_printf_float+0xae>
 801ba70:	232d      	movs	r3, #45	; 0x2d
 801ba72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ba76:	e798      	b.n	801b9aa <_printf_float+0xae>
 801ba78:	9a06      	ldr	r2, [sp, #24]
 801ba7a:	2a47      	cmp	r2, #71	; 0x47
 801ba7c:	d1be      	bne.n	801b9fc <_printf_float+0x100>
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d1bc      	bne.n	801b9fc <_printf_float+0x100>
 801ba82:	2301      	movs	r3, #1
 801ba84:	e7b9      	b.n	801b9fa <_printf_float+0xfe>
 801ba86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801ba8a:	d118      	bne.n	801babe <_printf_float+0x1c2>
 801ba8c:	2900      	cmp	r1, #0
 801ba8e:	6863      	ldr	r3, [r4, #4]
 801ba90:	dd0b      	ble.n	801baaa <_printf_float+0x1ae>
 801ba92:	6121      	str	r1, [r4, #16]
 801ba94:	b913      	cbnz	r3, 801ba9c <_printf_float+0x1a0>
 801ba96:	6822      	ldr	r2, [r4, #0]
 801ba98:	07d0      	lsls	r0, r2, #31
 801ba9a:	d502      	bpl.n	801baa2 <_printf_float+0x1a6>
 801ba9c:	3301      	adds	r3, #1
 801ba9e:	440b      	add	r3, r1
 801baa0:	6123      	str	r3, [r4, #16]
 801baa2:	65a1      	str	r1, [r4, #88]	; 0x58
 801baa4:	f04f 0900 	mov.w	r9, #0
 801baa8:	e7de      	b.n	801ba68 <_printf_float+0x16c>
 801baaa:	b913      	cbnz	r3, 801bab2 <_printf_float+0x1b6>
 801baac:	6822      	ldr	r2, [r4, #0]
 801baae:	07d2      	lsls	r2, r2, #31
 801bab0:	d501      	bpl.n	801bab6 <_printf_float+0x1ba>
 801bab2:	3302      	adds	r3, #2
 801bab4:	e7f4      	b.n	801baa0 <_printf_float+0x1a4>
 801bab6:	2301      	movs	r3, #1
 801bab8:	e7f2      	b.n	801baa0 <_printf_float+0x1a4>
 801baba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801babe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bac0:	4299      	cmp	r1, r3
 801bac2:	db05      	blt.n	801bad0 <_printf_float+0x1d4>
 801bac4:	6823      	ldr	r3, [r4, #0]
 801bac6:	6121      	str	r1, [r4, #16]
 801bac8:	07d8      	lsls	r0, r3, #31
 801baca:	d5ea      	bpl.n	801baa2 <_printf_float+0x1a6>
 801bacc:	1c4b      	adds	r3, r1, #1
 801bace:	e7e7      	b.n	801baa0 <_printf_float+0x1a4>
 801bad0:	2900      	cmp	r1, #0
 801bad2:	bfd4      	ite	le
 801bad4:	f1c1 0202 	rsble	r2, r1, #2
 801bad8:	2201      	movgt	r2, #1
 801bada:	4413      	add	r3, r2
 801badc:	e7e0      	b.n	801baa0 <_printf_float+0x1a4>
 801bade:	6823      	ldr	r3, [r4, #0]
 801bae0:	055a      	lsls	r2, r3, #21
 801bae2:	d407      	bmi.n	801baf4 <_printf_float+0x1f8>
 801bae4:	6923      	ldr	r3, [r4, #16]
 801bae6:	4642      	mov	r2, r8
 801bae8:	4631      	mov	r1, r6
 801baea:	4628      	mov	r0, r5
 801baec:	47b8      	blx	r7
 801baee:	3001      	adds	r0, #1
 801baf0:	d12c      	bne.n	801bb4c <_printf_float+0x250>
 801baf2:	e764      	b.n	801b9be <_printf_float+0xc2>
 801baf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801baf8:	f240 80e0 	bls.w	801bcbc <_printf_float+0x3c0>
 801bafc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bb00:	2200      	movs	r2, #0
 801bb02:	2300      	movs	r3, #0
 801bb04:	f7e4 fff8 	bl	8000af8 <__aeabi_dcmpeq>
 801bb08:	2800      	cmp	r0, #0
 801bb0a:	d034      	beq.n	801bb76 <_printf_float+0x27a>
 801bb0c:	4a37      	ldr	r2, [pc, #220]	; (801bbec <_printf_float+0x2f0>)
 801bb0e:	2301      	movs	r3, #1
 801bb10:	4631      	mov	r1, r6
 801bb12:	4628      	mov	r0, r5
 801bb14:	47b8      	blx	r7
 801bb16:	3001      	adds	r0, #1
 801bb18:	f43f af51 	beq.w	801b9be <_printf_float+0xc2>
 801bb1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bb20:	429a      	cmp	r2, r3
 801bb22:	db02      	blt.n	801bb2a <_printf_float+0x22e>
 801bb24:	6823      	ldr	r3, [r4, #0]
 801bb26:	07d8      	lsls	r0, r3, #31
 801bb28:	d510      	bpl.n	801bb4c <_printf_float+0x250>
 801bb2a:	ee18 3a10 	vmov	r3, s16
 801bb2e:	4652      	mov	r2, sl
 801bb30:	4631      	mov	r1, r6
 801bb32:	4628      	mov	r0, r5
 801bb34:	47b8      	blx	r7
 801bb36:	3001      	adds	r0, #1
 801bb38:	f43f af41 	beq.w	801b9be <_printf_float+0xc2>
 801bb3c:	f04f 0800 	mov.w	r8, #0
 801bb40:	f104 091a 	add.w	r9, r4, #26
 801bb44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb46:	3b01      	subs	r3, #1
 801bb48:	4543      	cmp	r3, r8
 801bb4a:	dc09      	bgt.n	801bb60 <_printf_float+0x264>
 801bb4c:	6823      	ldr	r3, [r4, #0]
 801bb4e:	079b      	lsls	r3, r3, #30
 801bb50:	f100 8105 	bmi.w	801bd5e <_printf_float+0x462>
 801bb54:	68e0      	ldr	r0, [r4, #12]
 801bb56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb58:	4298      	cmp	r0, r3
 801bb5a:	bfb8      	it	lt
 801bb5c:	4618      	movlt	r0, r3
 801bb5e:	e730      	b.n	801b9c2 <_printf_float+0xc6>
 801bb60:	2301      	movs	r3, #1
 801bb62:	464a      	mov	r2, r9
 801bb64:	4631      	mov	r1, r6
 801bb66:	4628      	mov	r0, r5
 801bb68:	47b8      	blx	r7
 801bb6a:	3001      	adds	r0, #1
 801bb6c:	f43f af27 	beq.w	801b9be <_printf_float+0xc2>
 801bb70:	f108 0801 	add.w	r8, r8, #1
 801bb74:	e7e6      	b.n	801bb44 <_printf_float+0x248>
 801bb76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	dc39      	bgt.n	801bbf0 <_printf_float+0x2f4>
 801bb7c:	4a1b      	ldr	r2, [pc, #108]	; (801bbec <_printf_float+0x2f0>)
 801bb7e:	2301      	movs	r3, #1
 801bb80:	4631      	mov	r1, r6
 801bb82:	4628      	mov	r0, r5
 801bb84:	47b8      	blx	r7
 801bb86:	3001      	adds	r0, #1
 801bb88:	f43f af19 	beq.w	801b9be <_printf_float+0xc2>
 801bb8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bb90:	4313      	orrs	r3, r2
 801bb92:	d102      	bne.n	801bb9a <_printf_float+0x29e>
 801bb94:	6823      	ldr	r3, [r4, #0]
 801bb96:	07d9      	lsls	r1, r3, #31
 801bb98:	d5d8      	bpl.n	801bb4c <_printf_float+0x250>
 801bb9a:	ee18 3a10 	vmov	r3, s16
 801bb9e:	4652      	mov	r2, sl
 801bba0:	4631      	mov	r1, r6
 801bba2:	4628      	mov	r0, r5
 801bba4:	47b8      	blx	r7
 801bba6:	3001      	adds	r0, #1
 801bba8:	f43f af09 	beq.w	801b9be <_printf_float+0xc2>
 801bbac:	f04f 0900 	mov.w	r9, #0
 801bbb0:	f104 0a1a 	add.w	sl, r4, #26
 801bbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbb6:	425b      	negs	r3, r3
 801bbb8:	454b      	cmp	r3, r9
 801bbba:	dc01      	bgt.n	801bbc0 <_printf_float+0x2c4>
 801bbbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bbbe:	e792      	b.n	801bae6 <_printf_float+0x1ea>
 801bbc0:	2301      	movs	r3, #1
 801bbc2:	4652      	mov	r2, sl
 801bbc4:	4631      	mov	r1, r6
 801bbc6:	4628      	mov	r0, r5
 801bbc8:	47b8      	blx	r7
 801bbca:	3001      	adds	r0, #1
 801bbcc:	f43f aef7 	beq.w	801b9be <_printf_float+0xc2>
 801bbd0:	f109 0901 	add.w	r9, r9, #1
 801bbd4:	e7ee      	b.n	801bbb4 <_printf_float+0x2b8>
 801bbd6:	bf00      	nop
 801bbd8:	7fefffff 	.word	0x7fefffff
 801bbdc:	08021f88 	.word	0x08021f88
 801bbe0:	08021f8c 	.word	0x08021f8c
 801bbe4:	08021f94 	.word	0x08021f94
 801bbe8:	08021f90 	.word	0x08021f90
 801bbec:	08021f98 	.word	0x08021f98
 801bbf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bbf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bbf4:	429a      	cmp	r2, r3
 801bbf6:	bfa8      	it	ge
 801bbf8:	461a      	movge	r2, r3
 801bbfa:	2a00      	cmp	r2, #0
 801bbfc:	4691      	mov	r9, r2
 801bbfe:	dc37      	bgt.n	801bc70 <_printf_float+0x374>
 801bc00:	f04f 0b00 	mov.w	fp, #0
 801bc04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bc08:	f104 021a 	add.w	r2, r4, #26
 801bc0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bc0e:	9305      	str	r3, [sp, #20]
 801bc10:	eba3 0309 	sub.w	r3, r3, r9
 801bc14:	455b      	cmp	r3, fp
 801bc16:	dc33      	bgt.n	801bc80 <_printf_float+0x384>
 801bc18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bc1c:	429a      	cmp	r2, r3
 801bc1e:	db3b      	blt.n	801bc98 <_printf_float+0x39c>
 801bc20:	6823      	ldr	r3, [r4, #0]
 801bc22:	07da      	lsls	r2, r3, #31
 801bc24:	d438      	bmi.n	801bc98 <_printf_float+0x39c>
 801bc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc28:	9a05      	ldr	r2, [sp, #20]
 801bc2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc2c:	1a9a      	subs	r2, r3, r2
 801bc2e:	eba3 0901 	sub.w	r9, r3, r1
 801bc32:	4591      	cmp	r9, r2
 801bc34:	bfa8      	it	ge
 801bc36:	4691      	movge	r9, r2
 801bc38:	f1b9 0f00 	cmp.w	r9, #0
 801bc3c:	dc35      	bgt.n	801bcaa <_printf_float+0x3ae>
 801bc3e:	f04f 0800 	mov.w	r8, #0
 801bc42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bc46:	f104 0a1a 	add.w	sl, r4, #26
 801bc4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bc4e:	1a9b      	subs	r3, r3, r2
 801bc50:	eba3 0309 	sub.w	r3, r3, r9
 801bc54:	4543      	cmp	r3, r8
 801bc56:	f77f af79 	ble.w	801bb4c <_printf_float+0x250>
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	4652      	mov	r2, sl
 801bc5e:	4631      	mov	r1, r6
 801bc60:	4628      	mov	r0, r5
 801bc62:	47b8      	blx	r7
 801bc64:	3001      	adds	r0, #1
 801bc66:	f43f aeaa 	beq.w	801b9be <_printf_float+0xc2>
 801bc6a:	f108 0801 	add.w	r8, r8, #1
 801bc6e:	e7ec      	b.n	801bc4a <_printf_float+0x34e>
 801bc70:	4613      	mov	r3, r2
 801bc72:	4631      	mov	r1, r6
 801bc74:	4642      	mov	r2, r8
 801bc76:	4628      	mov	r0, r5
 801bc78:	47b8      	blx	r7
 801bc7a:	3001      	adds	r0, #1
 801bc7c:	d1c0      	bne.n	801bc00 <_printf_float+0x304>
 801bc7e:	e69e      	b.n	801b9be <_printf_float+0xc2>
 801bc80:	2301      	movs	r3, #1
 801bc82:	4631      	mov	r1, r6
 801bc84:	4628      	mov	r0, r5
 801bc86:	9205      	str	r2, [sp, #20]
 801bc88:	47b8      	blx	r7
 801bc8a:	3001      	adds	r0, #1
 801bc8c:	f43f ae97 	beq.w	801b9be <_printf_float+0xc2>
 801bc90:	9a05      	ldr	r2, [sp, #20]
 801bc92:	f10b 0b01 	add.w	fp, fp, #1
 801bc96:	e7b9      	b.n	801bc0c <_printf_float+0x310>
 801bc98:	ee18 3a10 	vmov	r3, s16
 801bc9c:	4652      	mov	r2, sl
 801bc9e:	4631      	mov	r1, r6
 801bca0:	4628      	mov	r0, r5
 801bca2:	47b8      	blx	r7
 801bca4:	3001      	adds	r0, #1
 801bca6:	d1be      	bne.n	801bc26 <_printf_float+0x32a>
 801bca8:	e689      	b.n	801b9be <_printf_float+0xc2>
 801bcaa:	9a05      	ldr	r2, [sp, #20]
 801bcac:	464b      	mov	r3, r9
 801bcae:	4442      	add	r2, r8
 801bcb0:	4631      	mov	r1, r6
 801bcb2:	4628      	mov	r0, r5
 801bcb4:	47b8      	blx	r7
 801bcb6:	3001      	adds	r0, #1
 801bcb8:	d1c1      	bne.n	801bc3e <_printf_float+0x342>
 801bcba:	e680      	b.n	801b9be <_printf_float+0xc2>
 801bcbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bcbe:	2a01      	cmp	r2, #1
 801bcc0:	dc01      	bgt.n	801bcc6 <_printf_float+0x3ca>
 801bcc2:	07db      	lsls	r3, r3, #31
 801bcc4:	d538      	bpl.n	801bd38 <_printf_float+0x43c>
 801bcc6:	2301      	movs	r3, #1
 801bcc8:	4642      	mov	r2, r8
 801bcca:	4631      	mov	r1, r6
 801bccc:	4628      	mov	r0, r5
 801bcce:	47b8      	blx	r7
 801bcd0:	3001      	adds	r0, #1
 801bcd2:	f43f ae74 	beq.w	801b9be <_printf_float+0xc2>
 801bcd6:	ee18 3a10 	vmov	r3, s16
 801bcda:	4652      	mov	r2, sl
 801bcdc:	4631      	mov	r1, r6
 801bcde:	4628      	mov	r0, r5
 801bce0:	47b8      	blx	r7
 801bce2:	3001      	adds	r0, #1
 801bce4:	f43f ae6b 	beq.w	801b9be <_printf_float+0xc2>
 801bce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bcec:	2200      	movs	r2, #0
 801bcee:	2300      	movs	r3, #0
 801bcf0:	f7e4 ff02 	bl	8000af8 <__aeabi_dcmpeq>
 801bcf4:	b9d8      	cbnz	r0, 801bd2e <_printf_float+0x432>
 801bcf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcf8:	f108 0201 	add.w	r2, r8, #1
 801bcfc:	3b01      	subs	r3, #1
 801bcfe:	4631      	mov	r1, r6
 801bd00:	4628      	mov	r0, r5
 801bd02:	47b8      	blx	r7
 801bd04:	3001      	adds	r0, #1
 801bd06:	d10e      	bne.n	801bd26 <_printf_float+0x42a>
 801bd08:	e659      	b.n	801b9be <_printf_float+0xc2>
 801bd0a:	2301      	movs	r3, #1
 801bd0c:	4652      	mov	r2, sl
 801bd0e:	4631      	mov	r1, r6
 801bd10:	4628      	mov	r0, r5
 801bd12:	47b8      	blx	r7
 801bd14:	3001      	adds	r0, #1
 801bd16:	f43f ae52 	beq.w	801b9be <_printf_float+0xc2>
 801bd1a:	f108 0801 	add.w	r8, r8, #1
 801bd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd20:	3b01      	subs	r3, #1
 801bd22:	4543      	cmp	r3, r8
 801bd24:	dcf1      	bgt.n	801bd0a <_printf_float+0x40e>
 801bd26:	464b      	mov	r3, r9
 801bd28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bd2c:	e6dc      	b.n	801bae8 <_printf_float+0x1ec>
 801bd2e:	f04f 0800 	mov.w	r8, #0
 801bd32:	f104 0a1a 	add.w	sl, r4, #26
 801bd36:	e7f2      	b.n	801bd1e <_printf_float+0x422>
 801bd38:	2301      	movs	r3, #1
 801bd3a:	4642      	mov	r2, r8
 801bd3c:	e7df      	b.n	801bcfe <_printf_float+0x402>
 801bd3e:	2301      	movs	r3, #1
 801bd40:	464a      	mov	r2, r9
 801bd42:	4631      	mov	r1, r6
 801bd44:	4628      	mov	r0, r5
 801bd46:	47b8      	blx	r7
 801bd48:	3001      	adds	r0, #1
 801bd4a:	f43f ae38 	beq.w	801b9be <_printf_float+0xc2>
 801bd4e:	f108 0801 	add.w	r8, r8, #1
 801bd52:	68e3      	ldr	r3, [r4, #12]
 801bd54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bd56:	1a5b      	subs	r3, r3, r1
 801bd58:	4543      	cmp	r3, r8
 801bd5a:	dcf0      	bgt.n	801bd3e <_printf_float+0x442>
 801bd5c:	e6fa      	b.n	801bb54 <_printf_float+0x258>
 801bd5e:	f04f 0800 	mov.w	r8, #0
 801bd62:	f104 0919 	add.w	r9, r4, #25
 801bd66:	e7f4      	b.n	801bd52 <_printf_float+0x456>

0801bd68 <_printf_common>:
 801bd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd6c:	4616      	mov	r6, r2
 801bd6e:	4699      	mov	r9, r3
 801bd70:	688a      	ldr	r2, [r1, #8]
 801bd72:	690b      	ldr	r3, [r1, #16]
 801bd74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bd78:	4293      	cmp	r3, r2
 801bd7a:	bfb8      	it	lt
 801bd7c:	4613      	movlt	r3, r2
 801bd7e:	6033      	str	r3, [r6, #0]
 801bd80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bd84:	4607      	mov	r7, r0
 801bd86:	460c      	mov	r4, r1
 801bd88:	b10a      	cbz	r2, 801bd8e <_printf_common+0x26>
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	6033      	str	r3, [r6, #0]
 801bd8e:	6823      	ldr	r3, [r4, #0]
 801bd90:	0699      	lsls	r1, r3, #26
 801bd92:	bf42      	ittt	mi
 801bd94:	6833      	ldrmi	r3, [r6, #0]
 801bd96:	3302      	addmi	r3, #2
 801bd98:	6033      	strmi	r3, [r6, #0]
 801bd9a:	6825      	ldr	r5, [r4, #0]
 801bd9c:	f015 0506 	ands.w	r5, r5, #6
 801bda0:	d106      	bne.n	801bdb0 <_printf_common+0x48>
 801bda2:	f104 0a19 	add.w	sl, r4, #25
 801bda6:	68e3      	ldr	r3, [r4, #12]
 801bda8:	6832      	ldr	r2, [r6, #0]
 801bdaa:	1a9b      	subs	r3, r3, r2
 801bdac:	42ab      	cmp	r3, r5
 801bdae:	dc26      	bgt.n	801bdfe <_printf_common+0x96>
 801bdb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bdb4:	1e13      	subs	r3, r2, #0
 801bdb6:	6822      	ldr	r2, [r4, #0]
 801bdb8:	bf18      	it	ne
 801bdba:	2301      	movne	r3, #1
 801bdbc:	0692      	lsls	r2, r2, #26
 801bdbe:	d42b      	bmi.n	801be18 <_printf_common+0xb0>
 801bdc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bdc4:	4649      	mov	r1, r9
 801bdc6:	4638      	mov	r0, r7
 801bdc8:	47c0      	blx	r8
 801bdca:	3001      	adds	r0, #1
 801bdcc:	d01e      	beq.n	801be0c <_printf_common+0xa4>
 801bdce:	6823      	ldr	r3, [r4, #0]
 801bdd0:	68e5      	ldr	r5, [r4, #12]
 801bdd2:	6832      	ldr	r2, [r6, #0]
 801bdd4:	f003 0306 	and.w	r3, r3, #6
 801bdd8:	2b04      	cmp	r3, #4
 801bdda:	bf08      	it	eq
 801bddc:	1aad      	subeq	r5, r5, r2
 801bdde:	68a3      	ldr	r3, [r4, #8]
 801bde0:	6922      	ldr	r2, [r4, #16]
 801bde2:	bf0c      	ite	eq
 801bde4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bde8:	2500      	movne	r5, #0
 801bdea:	4293      	cmp	r3, r2
 801bdec:	bfc4      	itt	gt
 801bdee:	1a9b      	subgt	r3, r3, r2
 801bdf0:	18ed      	addgt	r5, r5, r3
 801bdf2:	2600      	movs	r6, #0
 801bdf4:	341a      	adds	r4, #26
 801bdf6:	42b5      	cmp	r5, r6
 801bdf8:	d11a      	bne.n	801be30 <_printf_common+0xc8>
 801bdfa:	2000      	movs	r0, #0
 801bdfc:	e008      	b.n	801be10 <_printf_common+0xa8>
 801bdfe:	2301      	movs	r3, #1
 801be00:	4652      	mov	r2, sl
 801be02:	4649      	mov	r1, r9
 801be04:	4638      	mov	r0, r7
 801be06:	47c0      	blx	r8
 801be08:	3001      	adds	r0, #1
 801be0a:	d103      	bne.n	801be14 <_printf_common+0xac>
 801be0c:	f04f 30ff 	mov.w	r0, #4294967295
 801be10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be14:	3501      	adds	r5, #1
 801be16:	e7c6      	b.n	801bda6 <_printf_common+0x3e>
 801be18:	18e1      	adds	r1, r4, r3
 801be1a:	1c5a      	adds	r2, r3, #1
 801be1c:	2030      	movs	r0, #48	; 0x30
 801be1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801be22:	4422      	add	r2, r4
 801be24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801be28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801be2c:	3302      	adds	r3, #2
 801be2e:	e7c7      	b.n	801bdc0 <_printf_common+0x58>
 801be30:	2301      	movs	r3, #1
 801be32:	4622      	mov	r2, r4
 801be34:	4649      	mov	r1, r9
 801be36:	4638      	mov	r0, r7
 801be38:	47c0      	blx	r8
 801be3a:	3001      	adds	r0, #1
 801be3c:	d0e6      	beq.n	801be0c <_printf_common+0xa4>
 801be3e:	3601      	adds	r6, #1
 801be40:	e7d9      	b.n	801bdf6 <_printf_common+0x8e>
	...

0801be44 <_printf_i>:
 801be44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801be48:	7e0f      	ldrb	r7, [r1, #24]
 801be4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801be4c:	2f78      	cmp	r7, #120	; 0x78
 801be4e:	4691      	mov	r9, r2
 801be50:	4680      	mov	r8, r0
 801be52:	460c      	mov	r4, r1
 801be54:	469a      	mov	sl, r3
 801be56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801be5a:	d807      	bhi.n	801be6c <_printf_i+0x28>
 801be5c:	2f62      	cmp	r7, #98	; 0x62
 801be5e:	d80a      	bhi.n	801be76 <_printf_i+0x32>
 801be60:	2f00      	cmp	r7, #0
 801be62:	f000 80d8 	beq.w	801c016 <_printf_i+0x1d2>
 801be66:	2f58      	cmp	r7, #88	; 0x58
 801be68:	f000 80a3 	beq.w	801bfb2 <_printf_i+0x16e>
 801be6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801be70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801be74:	e03a      	b.n	801beec <_printf_i+0xa8>
 801be76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801be7a:	2b15      	cmp	r3, #21
 801be7c:	d8f6      	bhi.n	801be6c <_printf_i+0x28>
 801be7e:	a101      	add	r1, pc, #4	; (adr r1, 801be84 <_printf_i+0x40>)
 801be80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801be84:	0801bedd 	.word	0x0801bedd
 801be88:	0801bef1 	.word	0x0801bef1
 801be8c:	0801be6d 	.word	0x0801be6d
 801be90:	0801be6d 	.word	0x0801be6d
 801be94:	0801be6d 	.word	0x0801be6d
 801be98:	0801be6d 	.word	0x0801be6d
 801be9c:	0801bef1 	.word	0x0801bef1
 801bea0:	0801be6d 	.word	0x0801be6d
 801bea4:	0801be6d 	.word	0x0801be6d
 801bea8:	0801be6d 	.word	0x0801be6d
 801beac:	0801be6d 	.word	0x0801be6d
 801beb0:	0801bffd 	.word	0x0801bffd
 801beb4:	0801bf21 	.word	0x0801bf21
 801beb8:	0801bfdf 	.word	0x0801bfdf
 801bebc:	0801be6d 	.word	0x0801be6d
 801bec0:	0801be6d 	.word	0x0801be6d
 801bec4:	0801c01f 	.word	0x0801c01f
 801bec8:	0801be6d 	.word	0x0801be6d
 801becc:	0801bf21 	.word	0x0801bf21
 801bed0:	0801be6d 	.word	0x0801be6d
 801bed4:	0801be6d 	.word	0x0801be6d
 801bed8:	0801bfe7 	.word	0x0801bfe7
 801bedc:	682b      	ldr	r3, [r5, #0]
 801bede:	1d1a      	adds	r2, r3, #4
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	602a      	str	r2, [r5, #0]
 801bee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801beec:	2301      	movs	r3, #1
 801beee:	e0a3      	b.n	801c038 <_printf_i+0x1f4>
 801bef0:	6820      	ldr	r0, [r4, #0]
 801bef2:	6829      	ldr	r1, [r5, #0]
 801bef4:	0606      	lsls	r6, r0, #24
 801bef6:	f101 0304 	add.w	r3, r1, #4
 801befa:	d50a      	bpl.n	801bf12 <_printf_i+0xce>
 801befc:	680e      	ldr	r6, [r1, #0]
 801befe:	602b      	str	r3, [r5, #0]
 801bf00:	2e00      	cmp	r6, #0
 801bf02:	da03      	bge.n	801bf0c <_printf_i+0xc8>
 801bf04:	232d      	movs	r3, #45	; 0x2d
 801bf06:	4276      	negs	r6, r6
 801bf08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bf0c:	485e      	ldr	r0, [pc, #376]	; (801c088 <_printf_i+0x244>)
 801bf0e:	230a      	movs	r3, #10
 801bf10:	e019      	b.n	801bf46 <_printf_i+0x102>
 801bf12:	680e      	ldr	r6, [r1, #0]
 801bf14:	602b      	str	r3, [r5, #0]
 801bf16:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bf1a:	bf18      	it	ne
 801bf1c:	b236      	sxthne	r6, r6
 801bf1e:	e7ef      	b.n	801bf00 <_printf_i+0xbc>
 801bf20:	682b      	ldr	r3, [r5, #0]
 801bf22:	6820      	ldr	r0, [r4, #0]
 801bf24:	1d19      	adds	r1, r3, #4
 801bf26:	6029      	str	r1, [r5, #0]
 801bf28:	0601      	lsls	r1, r0, #24
 801bf2a:	d501      	bpl.n	801bf30 <_printf_i+0xec>
 801bf2c:	681e      	ldr	r6, [r3, #0]
 801bf2e:	e002      	b.n	801bf36 <_printf_i+0xf2>
 801bf30:	0646      	lsls	r6, r0, #25
 801bf32:	d5fb      	bpl.n	801bf2c <_printf_i+0xe8>
 801bf34:	881e      	ldrh	r6, [r3, #0]
 801bf36:	4854      	ldr	r0, [pc, #336]	; (801c088 <_printf_i+0x244>)
 801bf38:	2f6f      	cmp	r7, #111	; 0x6f
 801bf3a:	bf0c      	ite	eq
 801bf3c:	2308      	moveq	r3, #8
 801bf3e:	230a      	movne	r3, #10
 801bf40:	2100      	movs	r1, #0
 801bf42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bf46:	6865      	ldr	r5, [r4, #4]
 801bf48:	60a5      	str	r5, [r4, #8]
 801bf4a:	2d00      	cmp	r5, #0
 801bf4c:	bfa2      	ittt	ge
 801bf4e:	6821      	ldrge	r1, [r4, #0]
 801bf50:	f021 0104 	bicge.w	r1, r1, #4
 801bf54:	6021      	strge	r1, [r4, #0]
 801bf56:	b90e      	cbnz	r6, 801bf5c <_printf_i+0x118>
 801bf58:	2d00      	cmp	r5, #0
 801bf5a:	d04d      	beq.n	801bff8 <_printf_i+0x1b4>
 801bf5c:	4615      	mov	r5, r2
 801bf5e:	fbb6 f1f3 	udiv	r1, r6, r3
 801bf62:	fb03 6711 	mls	r7, r3, r1, r6
 801bf66:	5dc7      	ldrb	r7, [r0, r7]
 801bf68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bf6c:	4637      	mov	r7, r6
 801bf6e:	42bb      	cmp	r3, r7
 801bf70:	460e      	mov	r6, r1
 801bf72:	d9f4      	bls.n	801bf5e <_printf_i+0x11a>
 801bf74:	2b08      	cmp	r3, #8
 801bf76:	d10b      	bne.n	801bf90 <_printf_i+0x14c>
 801bf78:	6823      	ldr	r3, [r4, #0]
 801bf7a:	07de      	lsls	r6, r3, #31
 801bf7c:	d508      	bpl.n	801bf90 <_printf_i+0x14c>
 801bf7e:	6923      	ldr	r3, [r4, #16]
 801bf80:	6861      	ldr	r1, [r4, #4]
 801bf82:	4299      	cmp	r1, r3
 801bf84:	bfde      	ittt	le
 801bf86:	2330      	movle	r3, #48	; 0x30
 801bf88:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bf8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bf90:	1b52      	subs	r2, r2, r5
 801bf92:	6122      	str	r2, [r4, #16]
 801bf94:	f8cd a000 	str.w	sl, [sp]
 801bf98:	464b      	mov	r3, r9
 801bf9a:	aa03      	add	r2, sp, #12
 801bf9c:	4621      	mov	r1, r4
 801bf9e:	4640      	mov	r0, r8
 801bfa0:	f7ff fee2 	bl	801bd68 <_printf_common>
 801bfa4:	3001      	adds	r0, #1
 801bfa6:	d14c      	bne.n	801c042 <_printf_i+0x1fe>
 801bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 801bfac:	b004      	add	sp, #16
 801bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfb2:	4835      	ldr	r0, [pc, #212]	; (801c088 <_printf_i+0x244>)
 801bfb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bfb8:	6829      	ldr	r1, [r5, #0]
 801bfba:	6823      	ldr	r3, [r4, #0]
 801bfbc:	f851 6b04 	ldr.w	r6, [r1], #4
 801bfc0:	6029      	str	r1, [r5, #0]
 801bfc2:	061d      	lsls	r5, r3, #24
 801bfc4:	d514      	bpl.n	801bff0 <_printf_i+0x1ac>
 801bfc6:	07df      	lsls	r7, r3, #31
 801bfc8:	bf44      	itt	mi
 801bfca:	f043 0320 	orrmi.w	r3, r3, #32
 801bfce:	6023      	strmi	r3, [r4, #0]
 801bfd0:	b91e      	cbnz	r6, 801bfda <_printf_i+0x196>
 801bfd2:	6823      	ldr	r3, [r4, #0]
 801bfd4:	f023 0320 	bic.w	r3, r3, #32
 801bfd8:	6023      	str	r3, [r4, #0]
 801bfda:	2310      	movs	r3, #16
 801bfdc:	e7b0      	b.n	801bf40 <_printf_i+0xfc>
 801bfde:	6823      	ldr	r3, [r4, #0]
 801bfe0:	f043 0320 	orr.w	r3, r3, #32
 801bfe4:	6023      	str	r3, [r4, #0]
 801bfe6:	2378      	movs	r3, #120	; 0x78
 801bfe8:	4828      	ldr	r0, [pc, #160]	; (801c08c <_printf_i+0x248>)
 801bfea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bfee:	e7e3      	b.n	801bfb8 <_printf_i+0x174>
 801bff0:	0659      	lsls	r1, r3, #25
 801bff2:	bf48      	it	mi
 801bff4:	b2b6      	uxthmi	r6, r6
 801bff6:	e7e6      	b.n	801bfc6 <_printf_i+0x182>
 801bff8:	4615      	mov	r5, r2
 801bffa:	e7bb      	b.n	801bf74 <_printf_i+0x130>
 801bffc:	682b      	ldr	r3, [r5, #0]
 801bffe:	6826      	ldr	r6, [r4, #0]
 801c000:	6961      	ldr	r1, [r4, #20]
 801c002:	1d18      	adds	r0, r3, #4
 801c004:	6028      	str	r0, [r5, #0]
 801c006:	0635      	lsls	r5, r6, #24
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	d501      	bpl.n	801c010 <_printf_i+0x1cc>
 801c00c:	6019      	str	r1, [r3, #0]
 801c00e:	e002      	b.n	801c016 <_printf_i+0x1d2>
 801c010:	0670      	lsls	r0, r6, #25
 801c012:	d5fb      	bpl.n	801c00c <_printf_i+0x1c8>
 801c014:	8019      	strh	r1, [r3, #0]
 801c016:	2300      	movs	r3, #0
 801c018:	6123      	str	r3, [r4, #16]
 801c01a:	4615      	mov	r5, r2
 801c01c:	e7ba      	b.n	801bf94 <_printf_i+0x150>
 801c01e:	682b      	ldr	r3, [r5, #0]
 801c020:	1d1a      	adds	r2, r3, #4
 801c022:	602a      	str	r2, [r5, #0]
 801c024:	681d      	ldr	r5, [r3, #0]
 801c026:	6862      	ldr	r2, [r4, #4]
 801c028:	2100      	movs	r1, #0
 801c02a:	4628      	mov	r0, r5
 801c02c:	f7e4 f8f0 	bl	8000210 <memchr>
 801c030:	b108      	cbz	r0, 801c036 <_printf_i+0x1f2>
 801c032:	1b40      	subs	r0, r0, r5
 801c034:	6060      	str	r0, [r4, #4]
 801c036:	6863      	ldr	r3, [r4, #4]
 801c038:	6123      	str	r3, [r4, #16]
 801c03a:	2300      	movs	r3, #0
 801c03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c040:	e7a8      	b.n	801bf94 <_printf_i+0x150>
 801c042:	6923      	ldr	r3, [r4, #16]
 801c044:	462a      	mov	r2, r5
 801c046:	4649      	mov	r1, r9
 801c048:	4640      	mov	r0, r8
 801c04a:	47d0      	blx	sl
 801c04c:	3001      	adds	r0, #1
 801c04e:	d0ab      	beq.n	801bfa8 <_printf_i+0x164>
 801c050:	6823      	ldr	r3, [r4, #0]
 801c052:	079b      	lsls	r3, r3, #30
 801c054:	d413      	bmi.n	801c07e <_printf_i+0x23a>
 801c056:	68e0      	ldr	r0, [r4, #12]
 801c058:	9b03      	ldr	r3, [sp, #12]
 801c05a:	4298      	cmp	r0, r3
 801c05c:	bfb8      	it	lt
 801c05e:	4618      	movlt	r0, r3
 801c060:	e7a4      	b.n	801bfac <_printf_i+0x168>
 801c062:	2301      	movs	r3, #1
 801c064:	4632      	mov	r2, r6
 801c066:	4649      	mov	r1, r9
 801c068:	4640      	mov	r0, r8
 801c06a:	47d0      	blx	sl
 801c06c:	3001      	adds	r0, #1
 801c06e:	d09b      	beq.n	801bfa8 <_printf_i+0x164>
 801c070:	3501      	adds	r5, #1
 801c072:	68e3      	ldr	r3, [r4, #12]
 801c074:	9903      	ldr	r1, [sp, #12]
 801c076:	1a5b      	subs	r3, r3, r1
 801c078:	42ab      	cmp	r3, r5
 801c07a:	dcf2      	bgt.n	801c062 <_printf_i+0x21e>
 801c07c:	e7eb      	b.n	801c056 <_printf_i+0x212>
 801c07e:	2500      	movs	r5, #0
 801c080:	f104 0619 	add.w	r6, r4, #25
 801c084:	e7f5      	b.n	801c072 <_printf_i+0x22e>
 801c086:	bf00      	nop
 801c088:	08021f9a 	.word	0x08021f9a
 801c08c:	08021fab 	.word	0x08021fab

0801c090 <_scanf_float>:
 801c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c094:	b087      	sub	sp, #28
 801c096:	4617      	mov	r7, r2
 801c098:	9303      	str	r3, [sp, #12]
 801c09a:	688b      	ldr	r3, [r1, #8]
 801c09c:	1e5a      	subs	r2, r3, #1
 801c09e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c0a2:	bf83      	ittte	hi
 801c0a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c0a8:	195b      	addhi	r3, r3, r5
 801c0aa:	9302      	strhi	r3, [sp, #8]
 801c0ac:	2300      	movls	r3, #0
 801c0ae:	bf86      	itte	hi
 801c0b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c0b4:	608b      	strhi	r3, [r1, #8]
 801c0b6:	9302      	strls	r3, [sp, #8]
 801c0b8:	680b      	ldr	r3, [r1, #0]
 801c0ba:	468b      	mov	fp, r1
 801c0bc:	2500      	movs	r5, #0
 801c0be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c0c2:	f84b 3b1c 	str.w	r3, [fp], #28
 801c0c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c0ca:	4680      	mov	r8, r0
 801c0cc:	460c      	mov	r4, r1
 801c0ce:	465e      	mov	r6, fp
 801c0d0:	46aa      	mov	sl, r5
 801c0d2:	46a9      	mov	r9, r5
 801c0d4:	9501      	str	r5, [sp, #4]
 801c0d6:	68a2      	ldr	r2, [r4, #8]
 801c0d8:	b152      	cbz	r2, 801c0f0 <_scanf_float+0x60>
 801c0da:	683b      	ldr	r3, [r7, #0]
 801c0dc:	781b      	ldrb	r3, [r3, #0]
 801c0de:	2b4e      	cmp	r3, #78	; 0x4e
 801c0e0:	d864      	bhi.n	801c1ac <_scanf_float+0x11c>
 801c0e2:	2b40      	cmp	r3, #64	; 0x40
 801c0e4:	d83c      	bhi.n	801c160 <_scanf_float+0xd0>
 801c0e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c0ea:	b2c8      	uxtb	r0, r1
 801c0ec:	280e      	cmp	r0, #14
 801c0ee:	d93a      	bls.n	801c166 <_scanf_float+0xd6>
 801c0f0:	f1b9 0f00 	cmp.w	r9, #0
 801c0f4:	d003      	beq.n	801c0fe <_scanf_float+0x6e>
 801c0f6:	6823      	ldr	r3, [r4, #0]
 801c0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c0fc:	6023      	str	r3, [r4, #0]
 801c0fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c102:	f1ba 0f01 	cmp.w	sl, #1
 801c106:	f200 8113 	bhi.w	801c330 <_scanf_float+0x2a0>
 801c10a:	455e      	cmp	r6, fp
 801c10c:	f200 8105 	bhi.w	801c31a <_scanf_float+0x28a>
 801c110:	2501      	movs	r5, #1
 801c112:	4628      	mov	r0, r5
 801c114:	b007      	add	sp, #28
 801c116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c11a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c11e:	2a0d      	cmp	r2, #13
 801c120:	d8e6      	bhi.n	801c0f0 <_scanf_float+0x60>
 801c122:	a101      	add	r1, pc, #4	; (adr r1, 801c128 <_scanf_float+0x98>)
 801c124:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c128:	0801c267 	.word	0x0801c267
 801c12c:	0801c0f1 	.word	0x0801c0f1
 801c130:	0801c0f1 	.word	0x0801c0f1
 801c134:	0801c0f1 	.word	0x0801c0f1
 801c138:	0801c2c7 	.word	0x0801c2c7
 801c13c:	0801c29f 	.word	0x0801c29f
 801c140:	0801c0f1 	.word	0x0801c0f1
 801c144:	0801c0f1 	.word	0x0801c0f1
 801c148:	0801c275 	.word	0x0801c275
 801c14c:	0801c0f1 	.word	0x0801c0f1
 801c150:	0801c0f1 	.word	0x0801c0f1
 801c154:	0801c0f1 	.word	0x0801c0f1
 801c158:	0801c0f1 	.word	0x0801c0f1
 801c15c:	0801c22d 	.word	0x0801c22d
 801c160:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c164:	e7db      	b.n	801c11e <_scanf_float+0x8e>
 801c166:	290e      	cmp	r1, #14
 801c168:	d8c2      	bhi.n	801c0f0 <_scanf_float+0x60>
 801c16a:	a001      	add	r0, pc, #4	; (adr r0, 801c170 <_scanf_float+0xe0>)
 801c16c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c170:	0801c21f 	.word	0x0801c21f
 801c174:	0801c0f1 	.word	0x0801c0f1
 801c178:	0801c21f 	.word	0x0801c21f
 801c17c:	0801c2b3 	.word	0x0801c2b3
 801c180:	0801c0f1 	.word	0x0801c0f1
 801c184:	0801c1cd 	.word	0x0801c1cd
 801c188:	0801c209 	.word	0x0801c209
 801c18c:	0801c209 	.word	0x0801c209
 801c190:	0801c209 	.word	0x0801c209
 801c194:	0801c209 	.word	0x0801c209
 801c198:	0801c209 	.word	0x0801c209
 801c19c:	0801c209 	.word	0x0801c209
 801c1a0:	0801c209 	.word	0x0801c209
 801c1a4:	0801c209 	.word	0x0801c209
 801c1a8:	0801c209 	.word	0x0801c209
 801c1ac:	2b6e      	cmp	r3, #110	; 0x6e
 801c1ae:	d809      	bhi.n	801c1c4 <_scanf_float+0x134>
 801c1b0:	2b60      	cmp	r3, #96	; 0x60
 801c1b2:	d8b2      	bhi.n	801c11a <_scanf_float+0x8a>
 801c1b4:	2b54      	cmp	r3, #84	; 0x54
 801c1b6:	d077      	beq.n	801c2a8 <_scanf_float+0x218>
 801c1b8:	2b59      	cmp	r3, #89	; 0x59
 801c1ba:	d199      	bne.n	801c0f0 <_scanf_float+0x60>
 801c1bc:	2d07      	cmp	r5, #7
 801c1be:	d197      	bne.n	801c0f0 <_scanf_float+0x60>
 801c1c0:	2508      	movs	r5, #8
 801c1c2:	e029      	b.n	801c218 <_scanf_float+0x188>
 801c1c4:	2b74      	cmp	r3, #116	; 0x74
 801c1c6:	d06f      	beq.n	801c2a8 <_scanf_float+0x218>
 801c1c8:	2b79      	cmp	r3, #121	; 0x79
 801c1ca:	e7f6      	b.n	801c1ba <_scanf_float+0x12a>
 801c1cc:	6821      	ldr	r1, [r4, #0]
 801c1ce:	05c8      	lsls	r0, r1, #23
 801c1d0:	d51a      	bpl.n	801c208 <_scanf_float+0x178>
 801c1d2:	9b02      	ldr	r3, [sp, #8]
 801c1d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c1d8:	6021      	str	r1, [r4, #0]
 801c1da:	f109 0901 	add.w	r9, r9, #1
 801c1de:	b11b      	cbz	r3, 801c1e8 <_scanf_float+0x158>
 801c1e0:	3b01      	subs	r3, #1
 801c1e2:	3201      	adds	r2, #1
 801c1e4:	9302      	str	r3, [sp, #8]
 801c1e6:	60a2      	str	r2, [r4, #8]
 801c1e8:	68a3      	ldr	r3, [r4, #8]
 801c1ea:	3b01      	subs	r3, #1
 801c1ec:	60a3      	str	r3, [r4, #8]
 801c1ee:	6923      	ldr	r3, [r4, #16]
 801c1f0:	3301      	adds	r3, #1
 801c1f2:	6123      	str	r3, [r4, #16]
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	3b01      	subs	r3, #1
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	607b      	str	r3, [r7, #4]
 801c1fc:	f340 8084 	ble.w	801c308 <_scanf_float+0x278>
 801c200:	683b      	ldr	r3, [r7, #0]
 801c202:	3301      	adds	r3, #1
 801c204:	603b      	str	r3, [r7, #0]
 801c206:	e766      	b.n	801c0d6 <_scanf_float+0x46>
 801c208:	eb1a 0f05 	cmn.w	sl, r5
 801c20c:	f47f af70 	bne.w	801c0f0 <_scanf_float+0x60>
 801c210:	6822      	ldr	r2, [r4, #0]
 801c212:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c216:	6022      	str	r2, [r4, #0]
 801c218:	f806 3b01 	strb.w	r3, [r6], #1
 801c21c:	e7e4      	b.n	801c1e8 <_scanf_float+0x158>
 801c21e:	6822      	ldr	r2, [r4, #0]
 801c220:	0610      	lsls	r0, r2, #24
 801c222:	f57f af65 	bpl.w	801c0f0 <_scanf_float+0x60>
 801c226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c22a:	e7f4      	b.n	801c216 <_scanf_float+0x186>
 801c22c:	f1ba 0f00 	cmp.w	sl, #0
 801c230:	d10e      	bne.n	801c250 <_scanf_float+0x1c0>
 801c232:	f1b9 0f00 	cmp.w	r9, #0
 801c236:	d10e      	bne.n	801c256 <_scanf_float+0x1c6>
 801c238:	6822      	ldr	r2, [r4, #0]
 801c23a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c23e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c242:	d108      	bne.n	801c256 <_scanf_float+0x1c6>
 801c244:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c248:	6022      	str	r2, [r4, #0]
 801c24a:	f04f 0a01 	mov.w	sl, #1
 801c24e:	e7e3      	b.n	801c218 <_scanf_float+0x188>
 801c250:	f1ba 0f02 	cmp.w	sl, #2
 801c254:	d055      	beq.n	801c302 <_scanf_float+0x272>
 801c256:	2d01      	cmp	r5, #1
 801c258:	d002      	beq.n	801c260 <_scanf_float+0x1d0>
 801c25a:	2d04      	cmp	r5, #4
 801c25c:	f47f af48 	bne.w	801c0f0 <_scanf_float+0x60>
 801c260:	3501      	adds	r5, #1
 801c262:	b2ed      	uxtb	r5, r5
 801c264:	e7d8      	b.n	801c218 <_scanf_float+0x188>
 801c266:	f1ba 0f01 	cmp.w	sl, #1
 801c26a:	f47f af41 	bne.w	801c0f0 <_scanf_float+0x60>
 801c26e:	f04f 0a02 	mov.w	sl, #2
 801c272:	e7d1      	b.n	801c218 <_scanf_float+0x188>
 801c274:	b97d      	cbnz	r5, 801c296 <_scanf_float+0x206>
 801c276:	f1b9 0f00 	cmp.w	r9, #0
 801c27a:	f47f af3c 	bne.w	801c0f6 <_scanf_float+0x66>
 801c27e:	6822      	ldr	r2, [r4, #0]
 801c280:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c284:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c288:	f47f af39 	bne.w	801c0fe <_scanf_float+0x6e>
 801c28c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c290:	6022      	str	r2, [r4, #0]
 801c292:	2501      	movs	r5, #1
 801c294:	e7c0      	b.n	801c218 <_scanf_float+0x188>
 801c296:	2d03      	cmp	r5, #3
 801c298:	d0e2      	beq.n	801c260 <_scanf_float+0x1d0>
 801c29a:	2d05      	cmp	r5, #5
 801c29c:	e7de      	b.n	801c25c <_scanf_float+0x1cc>
 801c29e:	2d02      	cmp	r5, #2
 801c2a0:	f47f af26 	bne.w	801c0f0 <_scanf_float+0x60>
 801c2a4:	2503      	movs	r5, #3
 801c2a6:	e7b7      	b.n	801c218 <_scanf_float+0x188>
 801c2a8:	2d06      	cmp	r5, #6
 801c2aa:	f47f af21 	bne.w	801c0f0 <_scanf_float+0x60>
 801c2ae:	2507      	movs	r5, #7
 801c2b0:	e7b2      	b.n	801c218 <_scanf_float+0x188>
 801c2b2:	6822      	ldr	r2, [r4, #0]
 801c2b4:	0591      	lsls	r1, r2, #22
 801c2b6:	f57f af1b 	bpl.w	801c0f0 <_scanf_float+0x60>
 801c2ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c2be:	6022      	str	r2, [r4, #0]
 801c2c0:	f8cd 9004 	str.w	r9, [sp, #4]
 801c2c4:	e7a8      	b.n	801c218 <_scanf_float+0x188>
 801c2c6:	6822      	ldr	r2, [r4, #0]
 801c2c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c2cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c2d0:	d006      	beq.n	801c2e0 <_scanf_float+0x250>
 801c2d2:	0550      	lsls	r0, r2, #21
 801c2d4:	f57f af0c 	bpl.w	801c0f0 <_scanf_float+0x60>
 801c2d8:	f1b9 0f00 	cmp.w	r9, #0
 801c2dc:	f43f af0f 	beq.w	801c0fe <_scanf_float+0x6e>
 801c2e0:	0591      	lsls	r1, r2, #22
 801c2e2:	bf58      	it	pl
 801c2e4:	9901      	ldrpl	r1, [sp, #4]
 801c2e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c2ea:	bf58      	it	pl
 801c2ec:	eba9 0101 	subpl.w	r1, r9, r1
 801c2f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c2f4:	bf58      	it	pl
 801c2f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c2fa:	6022      	str	r2, [r4, #0]
 801c2fc:	f04f 0900 	mov.w	r9, #0
 801c300:	e78a      	b.n	801c218 <_scanf_float+0x188>
 801c302:	f04f 0a03 	mov.w	sl, #3
 801c306:	e787      	b.n	801c218 <_scanf_float+0x188>
 801c308:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c30c:	4639      	mov	r1, r7
 801c30e:	4640      	mov	r0, r8
 801c310:	4798      	blx	r3
 801c312:	2800      	cmp	r0, #0
 801c314:	f43f aedf 	beq.w	801c0d6 <_scanf_float+0x46>
 801c318:	e6ea      	b.n	801c0f0 <_scanf_float+0x60>
 801c31a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c31e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c322:	463a      	mov	r2, r7
 801c324:	4640      	mov	r0, r8
 801c326:	4798      	blx	r3
 801c328:	6923      	ldr	r3, [r4, #16]
 801c32a:	3b01      	subs	r3, #1
 801c32c:	6123      	str	r3, [r4, #16]
 801c32e:	e6ec      	b.n	801c10a <_scanf_float+0x7a>
 801c330:	1e6b      	subs	r3, r5, #1
 801c332:	2b06      	cmp	r3, #6
 801c334:	d825      	bhi.n	801c382 <_scanf_float+0x2f2>
 801c336:	2d02      	cmp	r5, #2
 801c338:	d836      	bhi.n	801c3a8 <_scanf_float+0x318>
 801c33a:	455e      	cmp	r6, fp
 801c33c:	f67f aee8 	bls.w	801c110 <_scanf_float+0x80>
 801c340:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c344:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c348:	463a      	mov	r2, r7
 801c34a:	4640      	mov	r0, r8
 801c34c:	4798      	blx	r3
 801c34e:	6923      	ldr	r3, [r4, #16]
 801c350:	3b01      	subs	r3, #1
 801c352:	6123      	str	r3, [r4, #16]
 801c354:	e7f1      	b.n	801c33a <_scanf_float+0x2aa>
 801c356:	9802      	ldr	r0, [sp, #8]
 801c358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c35c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c360:	9002      	str	r0, [sp, #8]
 801c362:	463a      	mov	r2, r7
 801c364:	4640      	mov	r0, r8
 801c366:	4798      	blx	r3
 801c368:	6923      	ldr	r3, [r4, #16]
 801c36a:	3b01      	subs	r3, #1
 801c36c:	6123      	str	r3, [r4, #16]
 801c36e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c372:	fa5f fa8a 	uxtb.w	sl, sl
 801c376:	f1ba 0f02 	cmp.w	sl, #2
 801c37a:	d1ec      	bne.n	801c356 <_scanf_float+0x2c6>
 801c37c:	3d03      	subs	r5, #3
 801c37e:	b2ed      	uxtb	r5, r5
 801c380:	1b76      	subs	r6, r6, r5
 801c382:	6823      	ldr	r3, [r4, #0]
 801c384:	05da      	lsls	r2, r3, #23
 801c386:	d52f      	bpl.n	801c3e8 <_scanf_float+0x358>
 801c388:	055b      	lsls	r3, r3, #21
 801c38a:	d510      	bpl.n	801c3ae <_scanf_float+0x31e>
 801c38c:	455e      	cmp	r6, fp
 801c38e:	f67f aebf 	bls.w	801c110 <_scanf_float+0x80>
 801c392:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c396:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c39a:	463a      	mov	r2, r7
 801c39c:	4640      	mov	r0, r8
 801c39e:	4798      	blx	r3
 801c3a0:	6923      	ldr	r3, [r4, #16]
 801c3a2:	3b01      	subs	r3, #1
 801c3a4:	6123      	str	r3, [r4, #16]
 801c3a6:	e7f1      	b.n	801c38c <_scanf_float+0x2fc>
 801c3a8:	46aa      	mov	sl, r5
 801c3aa:	9602      	str	r6, [sp, #8]
 801c3ac:	e7df      	b.n	801c36e <_scanf_float+0x2de>
 801c3ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c3b2:	6923      	ldr	r3, [r4, #16]
 801c3b4:	2965      	cmp	r1, #101	; 0x65
 801c3b6:	f103 33ff 	add.w	r3, r3, #4294967295
 801c3ba:	f106 35ff 	add.w	r5, r6, #4294967295
 801c3be:	6123      	str	r3, [r4, #16]
 801c3c0:	d00c      	beq.n	801c3dc <_scanf_float+0x34c>
 801c3c2:	2945      	cmp	r1, #69	; 0x45
 801c3c4:	d00a      	beq.n	801c3dc <_scanf_float+0x34c>
 801c3c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c3ca:	463a      	mov	r2, r7
 801c3cc:	4640      	mov	r0, r8
 801c3ce:	4798      	blx	r3
 801c3d0:	6923      	ldr	r3, [r4, #16]
 801c3d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c3d6:	3b01      	subs	r3, #1
 801c3d8:	1eb5      	subs	r5, r6, #2
 801c3da:	6123      	str	r3, [r4, #16]
 801c3dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c3e0:	463a      	mov	r2, r7
 801c3e2:	4640      	mov	r0, r8
 801c3e4:	4798      	blx	r3
 801c3e6:	462e      	mov	r6, r5
 801c3e8:	6825      	ldr	r5, [r4, #0]
 801c3ea:	f015 0510 	ands.w	r5, r5, #16
 801c3ee:	d159      	bne.n	801c4a4 <_scanf_float+0x414>
 801c3f0:	7035      	strb	r5, [r6, #0]
 801c3f2:	6823      	ldr	r3, [r4, #0]
 801c3f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c3f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c3fc:	d11b      	bne.n	801c436 <_scanf_float+0x3a6>
 801c3fe:	9b01      	ldr	r3, [sp, #4]
 801c400:	454b      	cmp	r3, r9
 801c402:	eba3 0209 	sub.w	r2, r3, r9
 801c406:	d123      	bne.n	801c450 <_scanf_float+0x3c0>
 801c408:	2200      	movs	r2, #0
 801c40a:	4659      	mov	r1, fp
 801c40c:	4640      	mov	r0, r8
 801c40e:	f000 ff61 	bl	801d2d4 <_strtod_r>
 801c412:	6822      	ldr	r2, [r4, #0]
 801c414:	9b03      	ldr	r3, [sp, #12]
 801c416:	f012 0f02 	tst.w	r2, #2
 801c41a:	ec57 6b10 	vmov	r6, r7, d0
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	d021      	beq.n	801c466 <_scanf_float+0x3d6>
 801c422:	9903      	ldr	r1, [sp, #12]
 801c424:	1d1a      	adds	r2, r3, #4
 801c426:	600a      	str	r2, [r1, #0]
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	e9c3 6700 	strd	r6, r7, [r3]
 801c42e:	68e3      	ldr	r3, [r4, #12]
 801c430:	3301      	adds	r3, #1
 801c432:	60e3      	str	r3, [r4, #12]
 801c434:	e66d      	b.n	801c112 <_scanf_float+0x82>
 801c436:	9b04      	ldr	r3, [sp, #16]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d0e5      	beq.n	801c408 <_scanf_float+0x378>
 801c43c:	9905      	ldr	r1, [sp, #20]
 801c43e:	230a      	movs	r3, #10
 801c440:	462a      	mov	r2, r5
 801c442:	3101      	adds	r1, #1
 801c444:	4640      	mov	r0, r8
 801c446:	f001 f829 	bl	801d49c <_strtol_r>
 801c44a:	9b04      	ldr	r3, [sp, #16]
 801c44c:	9e05      	ldr	r6, [sp, #20]
 801c44e:	1ac2      	subs	r2, r0, r3
 801c450:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c454:	429e      	cmp	r6, r3
 801c456:	bf28      	it	cs
 801c458:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c45c:	4912      	ldr	r1, [pc, #72]	; (801c4a8 <_scanf_float+0x418>)
 801c45e:	4630      	mov	r0, r6
 801c460:	f000 f8ca 	bl	801c5f8 <siprintf>
 801c464:	e7d0      	b.n	801c408 <_scanf_float+0x378>
 801c466:	9903      	ldr	r1, [sp, #12]
 801c468:	f012 0f04 	tst.w	r2, #4
 801c46c:	f103 0204 	add.w	r2, r3, #4
 801c470:	600a      	str	r2, [r1, #0]
 801c472:	d1d9      	bne.n	801c428 <_scanf_float+0x398>
 801c474:	f8d3 8000 	ldr.w	r8, [r3]
 801c478:	ee10 2a10 	vmov	r2, s0
 801c47c:	ee10 0a10 	vmov	r0, s0
 801c480:	463b      	mov	r3, r7
 801c482:	4639      	mov	r1, r7
 801c484:	f7e4 fb6a 	bl	8000b5c <__aeabi_dcmpun>
 801c488:	b128      	cbz	r0, 801c496 <_scanf_float+0x406>
 801c48a:	4808      	ldr	r0, [pc, #32]	; (801c4ac <_scanf_float+0x41c>)
 801c48c:	f000 f8ae 	bl	801c5ec <nanf>
 801c490:	ed88 0a00 	vstr	s0, [r8]
 801c494:	e7cb      	b.n	801c42e <_scanf_float+0x39e>
 801c496:	4630      	mov	r0, r6
 801c498:	4639      	mov	r1, r7
 801c49a:	f7e4 fbbd 	bl	8000c18 <__aeabi_d2f>
 801c49e:	f8c8 0000 	str.w	r0, [r8]
 801c4a2:	e7c4      	b.n	801c42e <_scanf_float+0x39e>
 801c4a4:	2500      	movs	r5, #0
 801c4a6:	e634      	b.n	801c112 <_scanf_float+0x82>
 801c4a8:	08021fbc 	.word	0x08021fbc
 801c4ac:	080220c7 	.word	0x080220c7

0801c4b0 <iprintf>:
 801c4b0:	b40f      	push	{r0, r1, r2, r3}
 801c4b2:	4b0a      	ldr	r3, [pc, #40]	; (801c4dc <iprintf+0x2c>)
 801c4b4:	b513      	push	{r0, r1, r4, lr}
 801c4b6:	681c      	ldr	r4, [r3, #0]
 801c4b8:	b124      	cbz	r4, 801c4c4 <iprintf+0x14>
 801c4ba:	69a3      	ldr	r3, [r4, #24]
 801c4bc:	b913      	cbnz	r3, 801c4c4 <iprintf+0x14>
 801c4be:	4620      	mov	r0, r4
 801c4c0:	f002 f8a6 	bl	801e610 <__sinit>
 801c4c4:	ab05      	add	r3, sp, #20
 801c4c6:	9a04      	ldr	r2, [sp, #16]
 801c4c8:	68a1      	ldr	r1, [r4, #8]
 801c4ca:	9301      	str	r3, [sp, #4]
 801c4cc:	4620      	mov	r0, r4
 801c4ce:	f003 fba1 	bl	801fc14 <_vfiprintf_r>
 801c4d2:	b002      	add	sp, #8
 801c4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4d8:	b004      	add	sp, #16
 801c4da:	4770      	bx	lr
 801c4dc:	20000144 	.word	0x20000144

0801c4e0 <_puts_r>:
 801c4e0:	b570      	push	{r4, r5, r6, lr}
 801c4e2:	460e      	mov	r6, r1
 801c4e4:	4605      	mov	r5, r0
 801c4e6:	b118      	cbz	r0, 801c4f0 <_puts_r+0x10>
 801c4e8:	6983      	ldr	r3, [r0, #24]
 801c4ea:	b90b      	cbnz	r3, 801c4f0 <_puts_r+0x10>
 801c4ec:	f002 f890 	bl	801e610 <__sinit>
 801c4f0:	69ab      	ldr	r3, [r5, #24]
 801c4f2:	68ac      	ldr	r4, [r5, #8]
 801c4f4:	b913      	cbnz	r3, 801c4fc <_puts_r+0x1c>
 801c4f6:	4628      	mov	r0, r5
 801c4f8:	f002 f88a 	bl	801e610 <__sinit>
 801c4fc:	4b2c      	ldr	r3, [pc, #176]	; (801c5b0 <_puts_r+0xd0>)
 801c4fe:	429c      	cmp	r4, r3
 801c500:	d120      	bne.n	801c544 <_puts_r+0x64>
 801c502:	686c      	ldr	r4, [r5, #4]
 801c504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c506:	07db      	lsls	r3, r3, #31
 801c508:	d405      	bmi.n	801c516 <_puts_r+0x36>
 801c50a:	89a3      	ldrh	r3, [r4, #12]
 801c50c:	0598      	lsls	r0, r3, #22
 801c50e:	d402      	bmi.n	801c516 <_puts_r+0x36>
 801c510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c512:	f7ff f838 	bl	801b586 <__retarget_lock_acquire_recursive>
 801c516:	89a3      	ldrh	r3, [r4, #12]
 801c518:	0719      	lsls	r1, r3, #28
 801c51a:	d51d      	bpl.n	801c558 <_puts_r+0x78>
 801c51c:	6923      	ldr	r3, [r4, #16]
 801c51e:	b1db      	cbz	r3, 801c558 <_puts_r+0x78>
 801c520:	3e01      	subs	r6, #1
 801c522:	68a3      	ldr	r3, [r4, #8]
 801c524:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c528:	3b01      	subs	r3, #1
 801c52a:	60a3      	str	r3, [r4, #8]
 801c52c:	bb39      	cbnz	r1, 801c57e <_puts_r+0x9e>
 801c52e:	2b00      	cmp	r3, #0
 801c530:	da38      	bge.n	801c5a4 <_puts_r+0xc4>
 801c532:	4622      	mov	r2, r4
 801c534:	210a      	movs	r1, #10
 801c536:	4628      	mov	r0, r5
 801c538:	f000 fff6 	bl	801d528 <__swbuf_r>
 801c53c:	3001      	adds	r0, #1
 801c53e:	d011      	beq.n	801c564 <_puts_r+0x84>
 801c540:	250a      	movs	r5, #10
 801c542:	e011      	b.n	801c568 <_puts_r+0x88>
 801c544:	4b1b      	ldr	r3, [pc, #108]	; (801c5b4 <_puts_r+0xd4>)
 801c546:	429c      	cmp	r4, r3
 801c548:	d101      	bne.n	801c54e <_puts_r+0x6e>
 801c54a:	68ac      	ldr	r4, [r5, #8]
 801c54c:	e7da      	b.n	801c504 <_puts_r+0x24>
 801c54e:	4b1a      	ldr	r3, [pc, #104]	; (801c5b8 <_puts_r+0xd8>)
 801c550:	429c      	cmp	r4, r3
 801c552:	bf08      	it	eq
 801c554:	68ec      	ldreq	r4, [r5, #12]
 801c556:	e7d5      	b.n	801c504 <_puts_r+0x24>
 801c558:	4621      	mov	r1, r4
 801c55a:	4628      	mov	r0, r5
 801c55c:	f001 f836 	bl	801d5cc <__swsetup_r>
 801c560:	2800      	cmp	r0, #0
 801c562:	d0dd      	beq.n	801c520 <_puts_r+0x40>
 801c564:	f04f 35ff 	mov.w	r5, #4294967295
 801c568:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c56a:	07da      	lsls	r2, r3, #31
 801c56c:	d405      	bmi.n	801c57a <_puts_r+0x9a>
 801c56e:	89a3      	ldrh	r3, [r4, #12]
 801c570:	059b      	lsls	r3, r3, #22
 801c572:	d402      	bmi.n	801c57a <_puts_r+0x9a>
 801c574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c576:	f7ff f807 	bl	801b588 <__retarget_lock_release_recursive>
 801c57a:	4628      	mov	r0, r5
 801c57c:	bd70      	pop	{r4, r5, r6, pc}
 801c57e:	2b00      	cmp	r3, #0
 801c580:	da04      	bge.n	801c58c <_puts_r+0xac>
 801c582:	69a2      	ldr	r2, [r4, #24]
 801c584:	429a      	cmp	r2, r3
 801c586:	dc06      	bgt.n	801c596 <_puts_r+0xb6>
 801c588:	290a      	cmp	r1, #10
 801c58a:	d004      	beq.n	801c596 <_puts_r+0xb6>
 801c58c:	6823      	ldr	r3, [r4, #0]
 801c58e:	1c5a      	adds	r2, r3, #1
 801c590:	6022      	str	r2, [r4, #0]
 801c592:	7019      	strb	r1, [r3, #0]
 801c594:	e7c5      	b.n	801c522 <_puts_r+0x42>
 801c596:	4622      	mov	r2, r4
 801c598:	4628      	mov	r0, r5
 801c59a:	f000 ffc5 	bl	801d528 <__swbuf_r>
 801c59e:	3001      	adds	r0, #1
 801c5a0:	d1bf      	bne.n	801c522 <_puts_r+0x42>
 801c5a2:	e7df      	b.n	801c564 <_puts_r+0x84>
 801c5a4:	6823      	ldr	r3, [r4, #0]
 801c5a6:	250a      	movs	r5, #10
 801c5a8:	1c5a      	adds	r2, r3, #1
 801c5aa:	6022      	str	r2, [r4, #0]
 801c5ac:	701d      	strb	r5, [r3, #0]
 801c5ae:	e7db      	b.n	801c568 <_puts_r+0x88>
 801c5b0:	08022264 	.word	0x08022264
 801c5b4:	08022284 	.word	0x08022284
 801c5b8:	08022244 	.word	0x08022244

0801c5bc <puts>:
 801c5bc:	4b02      	ldr	r3, [pc, #8]	; (801c5c8 <puts+0xc>)
 801c5be:	4601      	mov	r1, r0
 801c5c0:	6818      	ldr	r0, [r3, #0]
 801c5c2:	f7ff bf8d 	b.w	801c4e0 <_puts_r>
 801c5c6:	bf00      	nop
 801c5c8:	20000144 	.word	0x20000144

0801c5cc <_sbrk_r>:
 801c5cc:	b538      	push	{r3, r4, r5, lr}
 801c5ce:	4d06      	ldr	r5, [pc, #24]	; (801c5e8 <_sbrk_r+0x1c>)
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	4604      	mov	r4, r0
 801c5d4:	4608      	mov	r0, r1
 801c5d6:	602b      	str	r3, [r5, #0]
 801c5d8:	f7e7 f9e6 	bl	80039a8 <_sbrk>
 801c5dc:	1c43      	adds	r3, r0, #1
 801c5de:	d102      	bne.n	801c5e6 <_sbrk_r+0x1a>
 801c5e0:	682b      	ldr	r3, [r5, #0]
 801c5e2:	b103      	cbz	r3, 801c5e6 <_sbrk_r+0x1a>
 801c5e4:	6023      	str	r3, [r4, #0]
 801c5e6:	bd38      	pop	{r3, r4, r5, pc}
 801c5e8:	2000361c 	.word	0x2000361c

0801c5ec <nanf>:
 801c5ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c5f4 <nanf+0x8>
 801c5f0:	4770      	bx	lr
 801c5f2:	bf00      	nop
 801c5f4:	7fc00000 	.word	0x7fc00000

0801c5f8 <siprintf>:
 801c5f8:	b40e      	push	{r1, r2, r3}
 801c5fa:	b500      	push	{lr}
 801c5fc:	b09c      	sub	sp, #112	; 0x70
 801c5fe:	ab1d      	add	r3, sp, #116	; 0x74
 801c600:	9002      	str	r0, [sp, #8]
 801c602:	9006      	str	r0, [sp, #24]
 801c604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c608:	4809      	ldr	r0, [pc, #36]	; (801c630 <siprintf+0x38>)
 801c60a:	9107      	str	r1, [sp, #28]
 801c60c:	9104      	str	r1, [sp, #16]
 801c60e:	4909      	ldr	r1, [pc, #36]	; (801c634 <siprintf+0x3c>)
 801c610:	f853 2b04 	ldr.w	r2, [r3], #4
 801c614:	9105      	str	r1, [sp, #20]
 801c616:	6800      	ldr	r0, [r0, #0]
 801c618:	9301      	str	r3, [sp, #4]
 801c61a:	a902      	add	r1, sp, #8
 801c61c:	f003 f9d0 	bl	801f9c0 <_svfiprintf_r>
 801c620:	9b02      	ldr	r3, [sp, #8]
 801c622:	2200      	movs	r2, #0
 801c624:	701a      	strb	r2, [r3, #0]
 801c626:	b01c      	add	sp, #112	; 0x70
 801c628:	f85d eb04 	ldr.w	lr, [sp], #4
 801c62c:	b003      	add	sp, #12
 801c62e:	4770      	bx	lr
 801c630:	20000144 	.word	0x20000144
 801c634:	ffff0208 	.word	0xffff0208

0801c638 <strchr>:
 801c638:	b2c9      	uxtb	r1, r1
 801c63a:	4603      	mov	r3, r0
 801c63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c640:	b11a      	cbz	r2, 801c64a <strchr+0x12>
 801c642:	428a      	cmp	r2, r1
 801c644:	d1f9      	bne.n	801c63a <strchr+0x2>
 801c646:	4618      	mov	r0, r3
 801c648:	4770      	bx	lr
 801c64a:	2900      	cmp	r1, #0
 801c64c:	bf18      	it	ne
 801c64e:	2300      	movne	r3, #0
 801c650:	e7f9      	b.n	801c646 <strchr+0xe>

0801c652 <strcpy>:
 801c652:	4603      	mov	r3, r0
 801c654:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c658:	f803 2b01 	strb.w	r2, [r3], #1
 801c65c:	2a00      	cmp	r2, #0
 801c65e:	d1f9      	bne.n	801c654 <strcpy+0x2>
 801c660:	4770      	bx	lr

0801c662 <strstr>:
 801c662:	780a      	ldrb	r2, [r1, #0]
 801c664:	b570      	push	{r4, r5, r6, lr}
 801c666:	b96a      	cbnz	r2, 801c684 <strstr+0x22>
 801c668:	bd70      	pop	{r4, r5, r6, pc}
 801c66a:	429a      	cmp	r2, r3
 801c66c:	d109      	bne.n	801c682 <strstr+0x20>
 801c66e:	460c      	mov	r4, r1
 801c670:	4605      	mov	r5, r0
 801c672:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c676:	2b00      	cmp	r3, #0
 801c678:	d0f6      	beq.n	801c668 <strstr+0x6>
 801c67a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c67e:	429e      	cmp	r6, r3
 801c680:	d0f7      	beq.n	801c672 <strstr+0x10>
 801c682:	3001      	adds	r0, #1
 801c684:	7803      	ldrb	r3, [r0, #0]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d1ef      	bne.n	801c66a <strstr+0x8>
 801c68a:	4618      	mov	r0, r3
 801c68c:	e7ec      	b.n	801c668 <strstr+0x6>

0801c68e <sulp>:
 801c68e:	b570      	push	{r4, r5, r6, lr}
 801c690:	4604      	mov	r4, r0
 801c692:	460d      	mov	r5, r1
 801c694:	ec45 4b10 	vmov	d0, r4, r5
 801c698:	4616      	mov	r6, r2
 801c69a:	f002 ffd1 	bl	801f640 <__ulp>
 801c69e:	ec51 0b10 	vmov	r0, r1, d0
 801c6a2:	b17e      	cbz	r6, 801c6c4 <sulp+0x36>
 801c6a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c6a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	dd09      	ble.n	801c6c4 <sulp+0x36>
 801c6b0:	051b      	lsls	r3, r3, #20
 801c6b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801c6b6:	2400      	movs	r4, #0
 801c6b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801c6bc:	4622      	mov	r2, r4
 801c6be:	462b      	mov	r3, r5
 801c6c0:	f7e3 ffb2 	bl	8000628 <__aeabi_dmul>
 801c6c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c6c8 <_strtod_l>:
 801c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6cc:	ed2d 8b02 	vpush	{d8}
 801c6d0:	b09d      	sub	sp, #116	; 0x74
 801c6d2:	461f      	mov	r7, r3
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	9318      	str	r3, [sp, #96]	; 0x60
 801c6d8:	4ba2      	ldr	r3, [pc, #648]	; (801c964 <_strtod_l+0x29c>)
 801c6da:	9213      	str	r2, [sp, #76]	; 0x4c
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	9305      	str	r3, [sp, #20]
 801c6e0:	4604      	mov	r4, r0
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	4688      	mov	r8, r1
 801c6e6:	f7e3 fd85 	bl	80001f4 <strlen>
 801c6ea:	f04f 0a00 	mov.w	sl, #0
 801c6ee:	4605      	mov	r5, r0
 801c6f0:	f04f 0b00 	mov.w	fp, #0
 801c6f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c6fa:	781a      	ldrb	r2, [r3, #0]
 801c6fc:	2a2b      	cmp	r2, #43	; 0x2b
 801c6fe:	d04e      	beq.n	801c79e <_strtod_l+0xd6>
 801c700:	d83b      	bhi.n	801c77a <_strtod_l+0xb2>
 801c702:	2a0d      	cmp	r2, #13
 801c704:	d834      	bhi.n	801c770 <_strtod_l+0xa8>
 801c706:	2a08      	cmp	r2, #8
 801c708:	d834      	bhi.n	801c774 <_strtod_l+0xac>
 801c70a:	2a00      	cmp	r2, #0
 801c70c:	d03e      	beq.n	801c78c <_strtod_l+0xc4>
 801c70e:	2300      	movs	r3, #0
 801c710:	930a      	str	r3, [sp, #40]	; 0x28
 801c712:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801c714:	7833      	ldrb	r3, [r6, #0]
 801c716:	2b30      	cmp	r3, #48	; 0x30
 801c718:	f040 80b0 	bne.w	801c87c <_strtod_l+0x1b4>
 801c71c:	7873      	ldrb	r3, [r6, #1]
 801c71e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c722:	2b58      	cmp	r3, #88	; 0x58
 801c724:	d168      	bne.n	801c7f8 <_strtod_l+0x130>
 801c726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c728:	9301      	str	r3, [sp, #4]
 801c72a:	ab18      	add	r3, sp, #96	; 0x60
 801c72c:	9702      	str	r7, [sp, #8]
 801c72e:	9300      	str	r3, [sp, #0]
 801c730:	4a8d      	ldr	r2, [pc, #564]	; (801c968 <_strtod_l+0x2a0>)
 801c732:	ab19      	add	r3, sp, #100	; 0x64
 801c734:	a917      	add	r1, sp, #92	; 0x5c
 801c736:	4620      	mov	r0, r4
 801c738:	f002 f880 	bl	801e83c <__gethex>
 801c73c:	f010 0707 	ands.w	r7, r0, #7
 801c740:	4605      	mov	r5, r0
 801c742:	d005      	beq.n	801c750 <_strtod_l+0x88>
 801c744:	2f06      	cmp	r7, #6
 801c746:	d12c      	bne.n	801c7a2 <_strtod_l+0xda>
 801c748:	3601      	adds	r6, #1
 801c74a:	2300      	movs	r3, #0
 801c74c:	9617      	str	r6, [sp, #92]	; 0x5c
 801c74e:	930a      	str	r3, [sp, #40]	; 0x28
 801c750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c752:	2b00      	cmp	r3, #0
 801c754:	f040 8590 	bne.w	801d278 <_strtod_l+0xbb0>
 801c758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c75a:	b1eb      	cbz	r3, 801c798 <_strtod_l+0xd0>
 801c75c:	4652      	mov	r2, sl
 801c75e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c762:	ec43 2b10 	vmov	d0, r2, r3
 801c766:	b01d      	add	sp, #116	; 0x74
 801c768:	ecbd 8b02 	vpop	{d8}
 801c76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c770:	2a20      	cmp	r2, #32
 801c772:	d1cc      	bne.n	801c70e <_strtod_l+0x46>
 801c774:	3301      	adds	r3, #1
 801c776:	9317      	str	r3, [sp, #92]	; 0x5c
 801c778:	e7be      	b.n	801c6f8 <_strtod_l+0x30>
 801c77a:	2a2d      	cmp	r2, #45	; 0x2d
 801c77c:	d1c7      	bne.n	801c70e <_strtod_l+0x46>
 801c77e:	2201      	movs	r2, #1
 801c780:	920a      	str	r2, [sp, #40]	; 0x28
 801c782:	1c5a      	adds	r2, r3, #1
 801c784:	9217      	str	r2, [sp, #92]	; 0x5c
 801c786:	785b      	ldrb	r3, [r3, #1]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d1c2      	bne.n	801c712 <_strtod_l+0x4a>
 801c78c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c78e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c792:	2b00      	cmp	r3, #0
 801c794:	f040 856e 	bne.w	801d274 <_strtod_l+0xbac>
 801c798:	4652      	mov	r2, sl
 801c79a:	465b      	mov	r3, fp
 801c79c:	e7e1      	b.n	801c762 <_strtod_l+0x9a>
 801c79e:	2200      	movs	r2, #0
 801c7a0:	e7ee      	b.n	801c780 <_strtod_l+0xb8>
 801c7a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c7a4:	b13a      	cbz	r2, 801c7b6 <_strtod_l+0xee>
 801c7a6:	2135      	movs	r1, #53	; 0x35
 801c7a8:	a81a      	add	r0, sp, #104	; 0x68
 801c7aa:	f003 f854 	bl	801f856 <__copybits>
 801c7ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c7b0:	4620      	mov	r0, r4
 801c7b2:	f002 fc13 	bl	801efdc <_Bfree>
 801c7b6:	3f01      	subs	r7, #1
 801c7b8:	2f04      	cmp	r7, #4
 801c7ba:	d806      	bhi.n	801c7ca <_strtod_l+0x102>
 801c7bc:	e8df f007 	tbb	[pc, r7]
 801c7c0:	1714030a 	.word	0x1714030a
 801c7c4:	0a          	.byte	0x0a
 801c7c5:	00          	.byte	0x00
 801c7c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801c7ca:	0728      	lsls	r0, r5, #28
 801c7cc:	d5c0      	bpl.n	801c750 <_strtod_l+0x88>
 801c7ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801c7d2:	e7bd      	b.n	801c750 <_strtod_l+0x88>
 801c7d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801c7d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c7da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c7de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c7e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c7e6:	e7f0      	b.n	801c7ca <_strtod_l+0x102>
 801c7e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801c96c <_strtod_l+0x2a4>
 801c7ec:	e7ed      	b.n	801c7ca <_strtod_l+0x102>
 801c7ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801c7f2:	f04f 3aff 	mov.w	sl, #4294967295
 801c7f6:	e7e8      	b.n	801c7ca <_strtod_l+0x102>
 801c7f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c7fa:	1c5a      	adds	r2, r3, #1
 801c7fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c7fe:	785b      	ldrb	r3, [r3, #1]
 801c800:	2b30      	cmp	r3, #48	; 0x30
 801c802:	d0f9      	beq.n	801c7f8 <_strtod_l+0x130>
 801c804:	2b00      	cmp	r3, #0
 801c806:	d0a3      	beq.n	801c750 <_strtod_l+0x88>
 801c808:	2301      	movs	r3, #1
 801c80a:	f04f 0900 	mov.w	r9, #0
 801c80e:	9304      	str	r3, [sp, #16]
 801c810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c812:	9308      	str	r3, [sp, #32]
 801c814:	f8cd 901c 	str.w	r9, [sp, #28]
 801c818:	464f      	mov	r7, r9
 801c81a:	220a      	movs	r2, #10
 801c81c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c81e:	7806      	ldrb	r6, [r0, #0]
 801c820:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801c824:	b2d9      	uxtb	r1, r3
 801c826:	2909      	cmp	r1, #9
 801c828:	d92a      	bls.n	801c880 <_strtod_l+0x1b8>
 801c82a:	9905      	ldr	r1, [sp, #20]
 801c82c:	462a      	mov	r2, r5
 801c82e:	f003 fb6e 	bl	801ff0e <strncmp>
 801c832:	b398      	cbz	r0, 801c89c <_strtod_l+0x1d4>
 801c834:	2000      	movs	r0, #0
 801c836:	4632      	mov	r2, r6
 801c838:	463d      	mov	r5, r7
 801c83a:	9005      	str	r0, [sp, #20]
 801c83c:	4603      	mov	r3, r0
 801c83e:	2a65      	cmp	r2, #101	; 0x65
 801c840:	d001      	beq.n	801c846 <_strtod_l+0x17e>
 801c842:	2a45      	cmp	r2, #69	; 0x45
 801c844:	d118      	bne.n	801c878 <_strtod_l+0x1b0>
 801c846:	b91d      	cbnz	r5, 801c850 <_strtod_l+0x188>
 801c848:	9a04      	ldr	r2, [sp, #16]
 801c84a:	4302      	orrs	r2, r0
 801c84c:	d09e      	beq.n	801c78c <_strtod_l+0xc4>
 801c84e:	2500      	movs	r5, #0
 801c850:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801c854:	f108 0201 	add.w	r2, r8, #1
 801c858:	9217      	str	r2, [sp, #92]	; 0x5c
 801c85a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c85e:	2a2b      	cmp	r2, #43	; 0x2b
 801c860:	d075      	beq.n	801c94e <_strtod_l+0x286>
 801c862:	2a2d      	cmp	r2, #45	; 0x2d
 801c864:	d07b      	beq.n	801c95e <_strtod_l+0x296>
 801c866:	f04f 0c00 	mov.w	ip, #0
 801c86a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c86e:	2909      	cmp	r1, #9
 801c870:	f240 8082 	bls.w	801c978 <_strtod_l+0x2b0>
 801c874:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801c878:	2600      	movs	r6, #0
 801c87a:	e09d      	b.n	801c9b8 <_strtod_l+0x2f0>
 801c87c:	2300      	movs	r3, #0
 801c87e:	e7c4      	b.n	801c80a <_strtod_l+0x142>
 801c880:	2f08      	cmp	r7, #8
 801c882:	bfd8      	it	le
 801c884:	9907      	ldrle	r1, [sp, #28]
 801c886:	f100 0001 	add.w	r0, r0, #1
 801c88a:	bfda      	itte	le
 801c88c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c890:	9307      	strle	r3, [sp, #28]
 801c892:	fb02 3909 	mlagt	r9, r2, r9, r3
 801c896:	3701      	adds	r7, #1
 801c898:	9017      	str	r0, [sp, #92]	; 0x5c
 801c89a:	e7bf      	b.n	801c81c <_strtod_l+0x154>
 801c89c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c89e:	195a      	adds	r2, r3, r5
 801c8a0:	9217      	str	r2, [sp, #92]	; 0x5c
 801c8a2:	5d5a      	ldrb	r2, [r3, r5]
 801c8a4:	2f00      	cmp	r7, #0
 801c8a6:	d037      	beq.n	801c918 <_strtod_l+0x250>
 801c8a8:	9005      	str	r0, [sp, #20]
 801c8aa:	463d      	mov	r5, r7
 801c8ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801c8b0:	2b09      	cmp	r3, #9
 801c8b2:	d912      	bls.n	801c8da <_strtod_l+0x212>
 801c8b4:	2301      	movs	r3, #1
 801c8b6:	e7c2      	b.n	801c83e <_strtod_l+0x176>
 801c8b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c8ba:	1c5a      	adds	r2, r3, #1
 801c8bc:	9217      	str	r2, [sp, #92]	; 0x5c
 801c8be:	785a      	ldrb	r2, [r3, #1]
 801c8c0:	3001      	adds	r0, #1
 801c8c2:	2a30      	cmp	r2, #48	; 0x30
 801c8c4:	d0f8      	beq.n	801c8b8 <_strtod_l+0x1f0>
 801c8c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c8ca:	2b08      	cmp	r3, #8
 801c8cc:	f200 84d9 	bhi.w	801d282 <_strtod_l+0xbba>
 801c8d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c8d2:	9005      	str	r0, [sp, #20]
 801c8d4:	2000      	movs	r0, #0
 801c8d6:	9308      	str	r3, [sp, #32]
 801c8d8:	4605      	mov	r5, r0
 801c8da:	3a30      	subs	r2, #48	; 0x30
 801c8dc:	f100 0301 	add.w	r3, r0, #1
 801c8e0:	d014      	beq.n	801c90c <_strtod_l+0x244>
 801c8e2:	9905      	ldr	r1, [sp, #20]
 801c8e4:	4419      	add	r1, r3
 801c8e6:	9105      	str	r1, [sp, #20]
 801c8e8:	462b      	mov	r3, r5
 801c8ea:	eb00 0e05 	add.w	lr, r0, r5
 801c8ee:	210a      	movs	r1, #10
 801c8f0:	4573      	cmp	r3, lr
 801c8f2:	d113      	bne.n	801c91c <_strtod_l+0x254>
 801c8f4:	182b      	adds	r3, r5, r0
 801c8f6:	2b08      	cmp	r3, #8
 801c8f8:	f105 0501 	add.w	r5, r5, #1
 801c8fc:	4405      	add	r5, r0
 801c8fe:	dc1c      	bgt.n	801c93a <_strtod_l+0x272>
 801c900:	9907      	ldr	r1, [sp, #28]
 801c902:	230a      	movs	r3, #10
 801c904:	fb03 2301 	mla	r3, r3, r1, r2
 801c908:	9307      	str	r3, [sp, #28]
 801c90a:	2300      	movs	r3, #0
 801c90c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c90e:	1c51      	adds	r1, r2, #1
 801c910:	9117      	str	r1, [sp, #92]	; 0x5c
 801c912:	7852      	ldrb	r2, [r2, #1]
 801c914:	4618      	mov	r0, r3
 801c916:	e7c9      	b.n	801c8ac <_strtod_l+0x1e4>
 801c918:	4638      	mov	r0, r7
 801c91a:	e7d2      	b.n	801c8c2 <_strtod_l+0x1fa>
 801c91c:	2b08      	cmp	r3, #8
 801c91e:	dc04      	bgt.n	801c92a <_strtod_l+0x262>
 801c920:	9e07      	ldr	r6, [sp, #28]
 801c922:	434e      	muls	r6, r1
 801c924:	9607      	str	r6, [sp, #28]
 801c926:	3301      	adds	r3, #1
 801c928:	e7e2      	b.n	801c8f0 <_strtod_l+0x228>
 801c92a:	f103 0c01 	add.w	ip, r3, #1
 801c92e:	f1bc 0f10 	cmp.w	ip, #16
 801c932:	bfd8      	it	le
 801c934:	fb01 f909 	mulle.w	r9, r1, r9
 801c938:	e7f5      	b.n	801c926 <_strtod_l+0x25e>
 801c93a:	2d10      	cmp	r5, #16
 801c93c:	bfdc      	itt	le
 801c93e:	230a      	movle	r3, #10
 801c940:	fb03 2909 	mlale	r9, r3, r9, r2
 801c944:	e7e1      	b.n	801c90a <_strtod_l+0x242>
 801c946:	2300      	movs	r3, #0
 801c948:	9305      	str	r3, [sp, #20]
 801c94a:	2301      	movs	r3, #1
 801c94c:	e77c      	b.n	801c848 <_strtod_l+0x180>
 801c94e:	f04f 0c00 	mov.w	ip, #0
 801c952:	f108 0202 	add.w	r2, r8, #2
 801c956:	9217      	str	r2, [sp, #92]	; 0x5c
 801c958:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c95c:	e785      	b.n	801c86a <_strtod_l+0x1a2>
 801c95e:	f04f 0c01 	mov.w	ip, #1
 801c962:	e7f6      	b.n	801c952 <_strtod_l+0x28a>
 801c964:	0802230c 	.word	0x0802230c
 801c968:	08021fc4 	.word	0x08021fc4
 801c96c:	7ff00000 	.word	0x7ff00000
 801c970:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c972:	1c51      	adds	r1, r2, #1
 801c974:	9117      	str	r1, [sp, #92]	; 0x5c
 801c976:	7852      	ldrb	r2, [r2, #1]
 801c978:	2a30      	cmp	r2, #48	; 0x30
 801c97a:	d0f9      	beq.n	801c970 <_strtod_l+0x2a8>
 801c97c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801c980:	2908      	cmp	r1, #8
 801c982:	f63f af79 	bhi.w	801c878 <_strtod_l+0x1b0>
 801c986:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801c98a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c98c:	9206      	str	r2, [sp, #24]
 801c98e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c990:	1c51      	adds	r1, r2, #1
 801c992:	9117      	str	r1, [sp, #92]	; 0x5c
 801c994:	7852      	ldrb	r2, [r2, #1]
 801c996:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801c99a:	2e09      	cmp	r6, #9
 801c99c:	d937      	bls.n	801ca0e <_strtod_l+0x346>
 801c99e:	9e06      	ldr	r6, [sp, #24]
 801c9a0:	1b89      	subs	r1, r1, r6
 801c9a2:	2908      	cmp	r1, #8
 801c9a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801c9a8:	dc02      	bgt.n	801c9b0 <_strtod_l+0x2e8>
 801c9aa:	4576      	cmp	r6, lr
 801c9ac:	bfa8      	it	ge
 801c9ae:	4676      	movge	r6, lr
 801c9b0:	f1bc 0f00 	cmp.w	ip, #0
 801c9b4:	d000      	beq.n	801c9b8 <_strtod_l+0x2f0>
 801c9b6:	4276      	negs	r6, r6
 801c9b8:	2d00      	cmp	r5, #0
 801c9ba:	d14d      	bne.n	801ca58 <_strtod_l+0x390>
 801c9bc:	9904      	ldr	r1, [sp, #16]
 801c9be:	4301      	orrs	r1, r0
 801c9c0:	f47f aec6 	bne.w	801c750 <_strtod_l+0x88>
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	f47f aee1 	bne.w	801c78c <_strtod_l+0xc4>
 801c9ca:	2a69      	cmp	r2, #105	; 0x69
 801c9cc:	d027      	beq.n	801ca1e <_strtod_l+0x356>
 801c9ce:	dc24      	bgt.n	801ca1a <_strtod_l+0x352>
 801c9d0:	2a49      	cmp	r2, #73	; 0x49
 801c9d2:	d024      	beq.n	801ca1e <_strtod_l+0x356>
 801c9d4:	2a4e      	cmp	r2, #78	; 0x4e
 801c9d6:	f47f aed9 	bne.w	801c78c <_strtod_l+0xc4>
 801c9da:	499f      	ldr	r1, [pc, #636]	; (801cc58 <_strtod_l+0x590>)
 801c9dc:	a817      	add	r0, sp, #92	; 0x5c
 801c9de:	f002 f985 	bl	801ecec <__match>
 801c9e2:	2800      	cmp	r0, #0
 801c9e4:	f43f aed2 	beq.w	801c78c <_strtod_l+0xc4>
 801c9e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c9ea:	781b      	ldrb	r3, [r3, #0]
 801c9ec:	2b28      	cmp	r3, #40	; 0x28
 801c9ee:	d12d      	bne.n	801ca4c <_strtod_l+0x384>
 801c9f0:	499a      	ldr	r1, [pc, #616]	; (801cc5c <_strtod_l+0x594>)
 801c9f2:	aa1a      	add	r2, sp, #104	; 0x68
 801c9f4:	a817      	add	r0, sp, #92	; 0x5c
 801c9f6:	f002 f98d 	bl	801ed14 <__hexnan>
 801c9fa:	2805      	cmp	r0, #5
 801c9fc:	d126      	bne.n	801ca4c <_strtod_l+0x384>
 801c9fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ca00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801ca04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801ca08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801ca0c:	e6a0      	b.n	801c750 <_strtod_l+0x88>
 801ca0e:	210a      	movs	r1, #10
 801ca10:	fb01 2e0e 	mla	lr, r1, lr, r2
 801ca14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ca18:	e7b9      	b.n	801c98e <_strtod_l+0x2c6>
 801ca1a:	2a6e      	cmp	r2, #110	; 0x6e
 801ca1c:	e7db      	b.n	801c9d6 <_strtod_l+0x30e>
 801ca1e:	4990      	ldr	r1, [pc, #576]	; (801cc60 <_strtod_l+0x598>)
 801ca20:	a817      	add	r0, sp, #92	; 0x5c
 801ca22:	f002 f963 	bl	801ecec <__match>
 801ca26:	2800      	cmp	r0, #0
 801ca28:	f43f aeb0 	beq.w	801c78c <_strtod_l+0xc4>
 801ca2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ca2e:	498d      	ldr	r1, [pc, #564]	; (801cc64 <_strtod_l+0x59c>)
 801ca30:	3b01      	subs	r3, #1
 801ca32:	a817      	add	r0, sp, #92	; 0x5c
 801ca34:	9317      	str	r3, [sp, #92]	; 0x5c
 801ca36:	f002 f959 	bl	801ecec <__match>
 801ca3a:	b910      	cbnz	r0, 801ca42 <_strtod_l+0x37a>
 801ca3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ca3e:	3301      	adds	r3, #1
 801ca40:	9317      	str	r3, [sp, #92]	; 0x5c
 801ca42:	f8df b230 	ldr.w	fp, [pc, #560]	; 801cc74 <_strtod_l+0x5ac>
 801ca46:	f04f 0a00 	mov.w	sl, #0
 801ca4a:	e681      	b.n	801c750 <_strtod_l+0x88>
 801ca4c:	4886      	ldr	r0, [pc, #536]	; (801cc68 <_strtod_l+0x5a0>)
 801ca4e:	f003 fa13 	bl	801fe78 <nan>
 801ca52:	ec5b ab10 	vmov	sl, fp, d0
 801ca56:	e67b      	b.n	801c750 <_strtod_l+0x88>
 801ca58:	9b05      	ldr	r3, [sp, #20]
 801ca5a:	9807      	ldr	r0, [sp, #28]
 801ca5c:	1af3      	subs	r3, r6, r3
 801ca5e:	2f00      	cmp	r7, #0
 801ca60:	bf08      	it	eq
 801ca62:	462f      	moveq	r7, r5
 801ca64:	2d10      	cmp	r5, #16
 801ca66:	9306      	str	r3, [sp, #24]
 801ca68:	46a8      	mov	r8, r5
 801ca6a:	bfa8      	it	ge
 801ca6c:	f04f 0810 	movge.w	r8, #16
 801ca70:	f7e3 fd60 	bl	8000534 <__aeabi_ui2d>
 801ca74:	2d09      	cmp	r5, #9
 801ca76:	4682      	mov	sl, r0
 801ca78:	468b      	mov	fp, r1
 801ca7a:	dd13      	ble.n	801caa4 <_strtod_l+0x3dc>
 801ca7c:	4b7b      	ldr	r3, [pc, #492]	; (801cc6c <_strtod_l+0x5a4>)
 801ca7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ca82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ca86:	f7e3 fdcf 	bl	8000628 <__aeabi_dmul>
 801ca8a:	4682      	mov	sl, r0
 801ca8c:	4648      	mov	r0, r9
 801ca8e:	468b      	mov	fp, r1
 801ca90:	f7e3 fd50 	bl	8000534 <__aeabi_ui2d>
 801ca94:	4602      	mov	r2, r0
 801ca96:	460b      	mov	r3, r1
 801ca98:	4650      	mov	r0, sl
 801ca9a:	4659      	mov	r1, fp
 801ca9c:	f7e3 fc0e 	bl	80002bc <__adddf3>
 801caa0:	4682      	mov	sl, r0
 801caa2:	468b      	mov	fp, r1
 801caa4:	2d0f      	cmp	r5, #15
 801caa6:	dc38      	bgt.n	801cb1a <_strtod_l+0x452>
 801caa8:	9b06      	ldr	r3, [sp, #24]
 801caaa:	2b00      	cmp	r3, #0
 801caac:	f43f ae50 	beq.w	801c750 <_strtod_l+0x88>
 801cab0:	dd24      	ble.n	801cafc <_strtod_l+0x434>
 801cab2:	2b16      	cmp	r3, #22
 801cab4:	dc0b      	bgt.n	801cace <_strtod_l+0x406>
 801cab6:	496d      	ldr	r1, [pc, #436]	; (801cc6c <_strtod_l+0x5a4>)
 801cab8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cabc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cac0:	4652      	mov	r2, sl
 801cac2:	465b      	mov	r3, fp
 801cac4:	f7e3 fdb0 	bl	8000628 <__aeabi_dmul>
 801cac8:	4682      	mov	sl, r0
 801caca:	468b      	mov	fp, r1
 801cacc:	e640      	b.n	801c750 <_strtod_l+0x88>
 801cace:	9a06      	ldr	r2, [sp, #24]
 801cad0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801cad4:	4293      	cmp	r3, r2
 801cad6:	db20      	blt.n	801cb1a <_strtod_l+0x452>
 801cad8:	4c64      	ldr	r4, [pc, #400]	; (801cc6c <_strtod_l+0x5a4>)
 801cada:	f1c5 050f 	rsb	r5, r5, #15
 801cade:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801cae2:	4652      	mov	r2, sl
 801cae4:	465b      	mov	r3, fp
 801cae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801caea:	f7e3 fd9d 	bl	8000628 <__aeabi_dmul>
 801caee:	9b06      	ldr	r3, [sp, #24]
 801caf0:	1b5d      	subs	r5, r3, r5
 801caf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801caf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cafa:	e7e3      	b.n	801cac4 <_strtod_l+0x3fc>
 801cafc:	9b06      	ldr	r3, [sp, #24]
 801cafe:	3316      	adds	r3, #22
 801cb00:	db0b      	blt.n	801cb1a <_strtod_l+0x452>
 801cb02:	9b05      	ldr	r3, [sp, #20]
 801cb04:	1b9e      	subs	r6, r3, r6
 801cb06:	4b59      	ldr	r3, [pc, #356]	; (801cc6c <_strtod_l+0x5a4>)
 801cb08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801cb0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801cb10:	4650      	mov	r0, sl
 801cb12:	4659      	mov	r1, fp
 801cb14:	f7e3 feb2 	bl	800087c <__aeabi_ddiv>
 801cb18:	e7d6      	b.n	801cac8 <_strtod_l+0x400>
 801cb1a:	9b06      	ldr	r3, [sp, #24]
 801cb1c:	eba5 0808 	sub.w	r8, r5, r8
 801cb20:	4498      	add	r8, r3
 801cb22:	f1b8 0f00 	cmp.w	r8, #0
 801cb26:	dd74      	ble.n	801cc12 <_strtod_l+0x54a>
 801cb28:	f018 030f 	ands.w	r3, r8, #15
 801cb2c:	d00a      	beq.n	801cb44 <_strtod_l+0x47c>
 801cb2e:	494f      	ldr	r1, [pc, #316]	; (801cc6c <_strtod_l+0x5a4>)
 801cb30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801cb34:	4652      	mov	r2, sl
 801cb36:	465b      	mov	r3, fp
 801cb38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cb3c:	f7e3 fd74 	bl	8000628 <__aeabi_dmul>
 801cb40:	4682      	mov	sl, r0
 801cb42:	468b      	mov	fp, r1
 801cb44:	f038 080f 	bics.w	r8, r8, #15
 801cb48:	d04f      	beq.n	801cbea <_strtod_l+0x522>
 801cb4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801cb4e:	dd22      	ble.n	801cb96 <_strtod_l+0x4ce>
 801cb50:	2500      	movs	r5, #0
 801cb52:	462e      	mov	r6, r5
 801cb54:	9507      	str	r5, [sp, #28]
 801cb56:	9505      	str	r5, [sp, #20]
 801cb58:	2322      	movs	r3, #34	; 0x22
 801cb5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801cc74 <_strtod_l+0x5ac>
 801cb5e:	6023      	str	r3, [r4, #0]
 801cb60:	f04f 0a00 	mov.w	sl, #0
 801cb64:	9b07      	ldr	r3, [sp, #28]
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	f43f adf2 	beq.w	801c750 <_strtod_l+0x88>
 801cb6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cb6e:	4620      	mov	r0, r4
 801cb70:	f002 fa34 	bl	801efdc <_Bfree>
 801cb74:	9905      	ldr	r1, [sp, #20]
 801cb76:	4620      	mov	r0, r4
 801cb78:	f002 fa30 	bl	801efdc <_Bfree>
 801cb7c:	4631      	mov	r1, r6
 801cb7e:	4620      	mov	r0, r4
 801cb80:	f002 fa2c 	bl	801efdc <_Bfree>
 801cb84:	9907      	ldr	r1, [sp, #28]
 801cb86:	4620      	mov	r0, r4
 801cb88:	f002 fa28 	bl	801efdc <_Bfree>
 801cb8c:	4629      	mov	r1, r5
 801cb8e:	4620      	mov	r0, r4
 801cb90:	f002 fa24 	bl	801efdc <_Bfree>
 801cb94:	e5dc      	b.n	801c750 <_strtod_l+0x88>
 801cb96:	4b36      	ldr	r3, [pc, #216]	; (801cc70 <_strtod_l+0x5a8>)
 801cb98:	9304      	str	r3, [sp, #16]
 801cb9a:	2300      	movs	r3, #0
 801cb9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801cba0:	4650      	mov	r0, sl
 801cba2:	4659      	mov	r1, fp
 801cba4:	4699      	mov	r9, r3
 801cba6:	f1b8 0f01 	cmp.w	r8, #1
 801cbaa:	dc21      	bgt.n	801cbf0 <_strtod_l+0x528>
 801cbac:	b10b      	cbz	r3, 801cbb2 <_strtod_l+0x4ea>
 801cbae:	4682      	mov	sl, r0
 801cbb0:	468b      	mov	fp, r1
 801cbb2:	4b2f      	ldr	r3, [pc, #188]	; (801cc70 <_strtod_l+0x5a8>)
 801cbb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801cbb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801cbbc:	4652      	mov	r2, sl
 801cbbe:	465b      	mov	r3, fp
 801cbc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 801cbc4:	f7e3 fd30 	bl	8000628 <__aeabi_dmul>
 801cbc8:	4b2a      	ldr	r3, [pc, #168]	; (801cc74 <_strtod_l+0x5ac>)
 801cbca:	460a      	mov	r2, r1
 801cbcc:	400b      	ands	r3, r1
 801cbce:	492a      	ldr	r1, [pc, #168]	; (801cc78 <_strtod_l+0x5b0>)
 801cbd0:	428b      	cmp	r3, r1
 801cbd2:	4682      	mov	sl, r0
 801cbd4:	d8bc      	bhi.n	801cb50 <_strtod_l+0x488>
 801cbd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801cbda:	428b      	cmp	r3, r1
 801cbdc:	bf86      	itte	hi
 801cbde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801cc7c <_strtod_l+0x5b4>
 801cbe2:	f04f 3aff 	movhi.w	sl, #4294967295
 801cbe6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801cbea:	2300      	movs	r3, #0
 801cbec:	9304      	str	r3, [sp, #16]
 801cbee:	e084      	b.n	801ccfa <_strtod_l+0x632>
 801cbf0:	f018 0f01 	tst.w	r8, #1
 801cbf4:	d005      	beq.n	801cc02 <_strtod_l+0x53a>
 801cbf6:	9b04      	ldr	r3, [sp, #16]
 801cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbfc:	f7e3 fd14 	bl	8000628 <__aeabi_dmul>
 801cc00:	2301      	movs	r3, #1
 801cc02:	9a04      	ldr	r2, [sp, #16]
 801cc04:	3208      	adds	r2, #8
 801cc06:	f109 0901 	add.w	r9, r9, #1
 801cc0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801cc0e:	9204      	str	r2, [sp, #16]
 801cc10:	e7c9      	b.n	801cba6 <_strtod_l+0x4de>
 801cc12:	d0ea      	beq.n	801cbea <_strtod_l+0x522>
 801cc14:	f1c8 0800 	rsb	r8, r8, #0
 801cc18:	f018 020f 	ands.w	r2, r8, #15
 801cc1c:	d00a      	beq.n	801cc34 <_strtod_l+0x56c>
 801cc1e:	4b13      	ldr	r3, [pc, #76]	; (801cc6c <_strtod_l+0x5a4>)
 801cc20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cc24:	4650      	mov	r0, sl
 801cc26:	4659      	mov	r1, fp
 801cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc2c:	f7e3 fe26 	bl	800087c <__aeabi_ddiv>
 801cc30:	4682      	mov	sl, r0
 801cc32:	468b      	mov	fp, r1
 801cc34:	ea5f 1828 	movs.w	r8, r8, asr #4
 801cc38:	d0d7      	beq.n	801cbea <_strtod_l+0x522>
 801cc3a:	f1b8 0f1f 	cmp.w	r8, #31
 801cc3e:	dd1f      	ble.n	801cc80 <_strtod_l+0x5b8>
 801cc40:	2500      	movs	r5, #0
 801cc42:	462e      	mov	r6, r5
 801cc44:	9507      	str	r5, [sp, #28]
 801cc46:	9505      	str	r5, [sp, #20]
 801cc48:	2322      	movs	r3, #34	; 0x22
 801cc4a:	f04f 0a00 	mov.w	sl, #0
 801cc4e:	f04f 0b00 	mov.w	fp, #0
 801cc52:	6023      	str	r3, [r4, #0]
 801cc54:	e786      	b.n	801cb64 <_strtod_l+0x49c>
 801cc56:	bf00      	nop
 801cc58:	08021f95 	.word	0x08021f95
 801cc5c:	08021fd8 	.word	0x08021fd8
 801cc60:	08021f8d 	.word	0x08021f8d
 801cc64:	080221cc 	.word	0x080221cc
 801cc68:	080220c7 	.word	0x080220c7
 801cc6c:	080223a8 	.word	0x080223a8
 801cc70:	08022380 	.word	0x08022380
 801cc74:	7ff00000 	.word	0x7ff00000
 801cc78:	7ca00000 	.word	0x7ca00000
 801cc7c:	7fefffff 	.word	0x7fefffff
 801cc80:	f018 0310 	ands.w	r3, r8, #16
 801cc84:	bf18      	it	ne
 801cc86:	236a      	movne	r3, #106	; 0x6a
 801cc88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801d038 <_strtod_l+0x970>
 801cc8c:	9304      	str	r3, [sp, #16]
 801cc8e:	4650      	mov	r0, sl
 801cc90:	4659      	mov	r1, fp
 801cc92:	2300      	movs	r3, #0
 801cc94:	f018 0f01 	tst.w	r8, #1
 801cc98:	d004      	beq.n	801cca4 <_strtod_l+0x5dc>
 801cc9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801cc9e:	f7e3 fcc3 	bl	8000628 <__aeabi_dmul>
 801cca2:	2301      	movs	r3, #1
 801cca4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801cca8:	f109 0908 	add.w	r9, r9, #8
 801ccac:	d1f2      	bne.n	801cc94 <_strtod_l+0x5cc>
 801ccae:	b10b      	cbz	r3, 801ccb4 <_strtod_l+0x5ec>
 801ccb0:	4682      	mov	sl, r0
 801ccb2:	468b      	mov	fp, r1
 801ccb4:	9b04      	ldr	r3, [sp, #16]
 801ccb6:	b1c3      	cbz	r3, 801ccea <_strtod_l+0x622>
 801ccb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ccbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	4659      	mov	r1, fp
 801ccc4:	dd11      	ble.n	801ccea <_strtod_l+0x622>
 801ccc6:	2b1f      	cmp	r3, #31
 801ccc8:	f340 8124 	ble.w	801cf14 <_strtod_l+0x84c>
 801cccc:	2b34      	cmp	r3, #52	; 0x34
 801ccce:	bfde      	ittt	le
 801ccd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801ccd4:	f04f 33ff 	movle.w	r3, #4294967295
 801ccd8:	fa03 f202 	lslle.w	r2, r3, r2
 801ccdc:	f04f 0a00 	mov.w	sl, #0
 801cce0:	bfcc      	ite	gt
 801cce2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801cce6:	ea02 0b01 	andle.w	fp, r2, r1
 801ccea:	2200      	movs	r2, #0
 801ccec:	2300      	movs	r3, #0
 801ccee:	4650      	mov	r0, sl
 801ccf0:	4659      	mov	r1, fp
 801ccf2:	f7e3 ff01 	bl	8000af8 <__aeabi_dcmpeq>
 801ccf6:	2800      	cmp	r0, #0
 801ccf8:	d1a2      	bne.n	801cc40 <_strtod_l+0x578>
 801ccfa:	9b07      	ldr	r3, [sp, #28]
 801ccfc:	9300      	str	r3, [sp, #0]
 801ccfe:	9908      	ldr	r1, [sp, #32]
 801cd00:	462b      	mov	r3, r5
 801cd02:	463a      	mov	r2, r7
 801cd04:	4620      	mov	r0, r4
 801cd06:	f002 f9d1 	bl	801f0ac <__s2b>
 801cd0a:	9007      	str	r0, [sp, #28]
 801cd0c:	2800      	cmp	r0, #0
 801cd0e:	f43f af1f 	beq.w	801cb50 <_strtod_l+0x488>
 801cd12:	9b05      	ldr	r3, [sp, #20]
 801cd14:	1b9e      	subs	r6, r3, r6
 801cd16:	9b06      	ldr	r3, [sp, #24]
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	bfb4      	ite	lt
 801cd1c:	4633      	movlt	r3, r6
 801cd1e:	2300      	movge	r3, #0
 801cd20:	930c      	str	r3, [sp, #48]	; 0x30
 801cd22:	9b06      	ldr	r3, [sp, #24]
 801cd24:	2500      	movs	r5, #0
 801cd26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd2a:	9312      	str	r3, [sp, #72]	; 0x48
 801cd2c:	462e      	mov	r6, r5
 801cd2e:	9b07      	ldr	r3, [sp, #28]
 801cd30:	4620      	mov	r0, r4
 801cd32:	6859      	ldr	r1, [r3, #4]
 801cd34:	f002 f912 	bl	801ef5c <_Balloc>
 801cd38:	9005      	str	r0, [sp, #20]
 801cd3a:	2800      	cmp	r0, #0
 801cd3c:	f43f af0c 	beq.w	801cb58 <_strtod_l+0x490>
 801cd40:	9b07      	ldr	r3, [sp, #28]
 801cd42:	691a      	ldr	r2, [r3, #16]
 801cd44:	3202      	adds	r2, #2
 801cd46:	f103 010c 	add.w	r1, r3, #12
 801cd4a:	0092      	lsls	r2, r2, #2
 801cd4c:	300c      	adds	r0, #12
 801cd4e:	f7fe fc25 	bl	801b59c <memcpy>
 801cd52:	ec4b ab10 	vmov	d0, sl, fp
 801cd56:	aa1a      	add	r2, sp, #104	; 0x68
 801cd58:	a919      	add	r1, sp, #100	; 0x64
 801cd5a:	4620      	mov	r0, r4
 801cd5c:	f002 fcec 	bl	801f738 <__d2b>
 801cd60:	ec4b ab18 	vmov	d8, sl, fp
 801cd64:	9018      	str	r0, [sp, #96]	; 0x60
 801cd66:	2800      	cmp	r0, #0
 801cd68:	f43f aef6 	beq.w	801cb58 <_strtod_l+0x490>
 801cd6c:	2101      	movs	r1, #1
 801cd6e:	4620      	mov	r0, r4
 801cd70:	f002 fa36 	bl	801f1e0 <__i2b>
 801cd74:	4606      	mov	r6, r0
 801cd76:	2800      	cmp	r0, #0
 801cd78:	f43f aeee 	beq.w	801cb58 <_strtod_l+0x490>
 801cd7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cd7e:	9904      	ldr	r1, [sp, #16]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	bfab      	itete	ge
 801cd84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801cd86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801cd88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801cd8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801cd8e:	bfac      	ite	ge
 801cd90:	eb03 0902 	addge.w	r9, r3, r2
 801cd94:	1ad7      	sublt	r7, r2, r3
 801cd96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cd98:	eba3 0801 	sub.w	r8, r3, r1
 801cd9c:	4490      	add	r8, r2
 801cd9e:	4ba1      	ldr	r3, [pc, #644]	; (801d024 <_strtod_l+0x95c>)
 801cda0:	f108 38ff 	add.w	r8, r8, #4294967295
 801cda4:	4598      	cmp	r8, r3
 801cda6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801cdaa:	f280 80c7 	bge.w	801cf3c <_strtod_l+0x874>
 801cdae:	eba3 0308 	sub.w	r3, r3, r8
 801cdb2:	2b1f      	cmp	r3, #31
 801cdb4:	eba2 0203 	sub.w	r2, r2, r3
 801cdb8:	f04f 0101 	mov.w	r1, #1
 801cdbc:	f300 80b1 	bgt.w	801cf22 <_strtod_l+0x85a>
 801cdc0:	fa01 f303 	lsl.w	r3, r1, r3
 801cdc4:	930d      	str	r3, [sp, #52]	; 0x34
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	9308      	str	r3, [sp, #32]
 801cdca:	eb09 0802 	add.w	r8, r9, r2
 801cdce:	9b04      	ldr	r3, [sp, #16]
 801cdd0:	45c1      	cmp	r9, r8
 801cdd2:	4417      	add	r7, r2
 801cdd4:	441f      	add	r7, r3
 801cdd6:	464b      	mov	r3, r9
 801cdd8:	bfa8      	it	ge
 801cdda:	4643      	movge	r3, r8
 801cddc:	42bb      	cmp	r3, r7
 801cdde:	bfa8      	it	ge
 801cde0:	463b      	movge	r3, r7
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	bfc2      	ittt	gt
 801cde6:	eba8 0803 	subgt.w	r8, r8, r3
 801cdea:	1aff      	subgt	r7, r7, r3
 801cdec:	eba9 0903 	subgt.w	r9, r9, r3
 801cdf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	dd17      	ble.n	801ce26 <_strtod_l+0x75e>
 801cdf6:	4631      	mov	r1, r6
 801cdf8:	461a      	mov	r2, r3
 801cdfa:	4620      	mov	r0, r4
 801cdfc:	f002 fab0 	bl	801f360 <__pow5mult>
 801ce00:	4606      	mov	r6, r0
 801ce02:	2800      	cmp	r0, #0
 801ce04:	f43f aea8 	beq.w	801cb58 <_strtod_l+0x490>
 801ce08:	4601      	mov	r1, r0
 801ce0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ce0c:	4620      	mov	r0, r4
 801ce0e:	f002 f9fd 	bl	801f20c <__multiply>
 801ce12:	900b      	str	r0, [sp, #44]	; 0x2c
 801ce14:	2800      	cmp	r0, #0
 801ce16:	f43f ae9f 	beq.w	801cb58 <_strtod_l+0x490>
 801ce1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ce1c:	4620      	mov	r0, r4
 801ce1e:	f002 f8dd 	bl	801efdc <_Bfree>
 801ce22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce24:	9318      	str	r3, [sp, #96]	; 0x60
 801ce26:	f1b8 0f00 	cmp.w	r8, #0
 801ce2a:	f300 808c 	bgt.w	801cf46 <_strtod_l+0x87e>
 801ce2e:	9b06      	ldr	r3, [sp, #24]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	dd08      	ble.n	801ce46 <_strtod_l+0x77e>
 801ce34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ce36:	9905      	ldr	r1, [sp, #20]
 801ce38:	4620      	mov	r0, r4
 801ce3a:	f002 fa91 	bl	801f360 <__pow5mult>
 801ce3e:	9005      	str	r0, [sp, #20]
 801ce40:	2800      	cmp	r0, #0
 801ce42:	f43f ae89 	beq.w	801cb58 <_strtod_l+0x490>
 801ce46:	2f00      	cmp	r7, #0
 801ce48:	dd08      	ble.n	801ce5c <_strtod_l+0x794>
 801ce4a:	9905      	ldr	r1, [sp, #20]
 801ce4c:	463a      	mov	r2, r7
 801ce4e:	4620      	mov	r0, r4
 801ce50:	f002 fae0 	bl	801f414 <__lshift>
 801ce54:	9005      	str	r0, [sp, #20]
 801ce56:	2800      	cmp	r0, #0
 801ce58:	f43f ae7e 	beq.w	801cb58 <_strtod_l+0x490>
 801ce5c:	f1b9 0f00 	cmp.w	r9, #0
 801ce60:	dd08      	ble.n	801ce74 <_strtod_l+0x7ac>
 801ce62:	4631      	mov	r1, r6
 801ce64:	464a      	mov	r2, r9
 801ce66:	4620      	mov	r0, r4
 801ce68:	f002 fad4 	bl	801f414 <__lshift>
 801ce6c:	4606      	mov	r6, r0
 801ce6e:	2800      	cmp	r0, #0
 801ce70:	f43f ae72 	beq.w	801cb58 <_strtod_l+0x490>
 801ce74:	9a05      	ldr	r2, [sp, #20]
 801ce76:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ce78:	4620      	mov	r0, r4
 801ce7a:	f002 fb57 	bl	801f52c <__mdiff>
 801ce7e:	4605      	mov	r5, r0
 801ce80:	2800      	cmp	r0, #0
 801ce82:	f43f ae69 	beq.w	801cb58 <_strtod_l+0x490>
 801ce86:	68c3      	ldr	r3, [r0, #12]
 801ce88:	930b      	str	r3, [sp, #44]	; 0x2c
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	60c3      	str	r3, [r0, #12]
 801ce8e:	4631      	mov	r1, r6
 801ce90:	f002 fb30 	bl	801f4f4 <__mcmp>
 801ce94:	2800      	cmp	r0, #0
 801ce96:	da60      	bge.n	801cf5a <_strtod_l+0x892>
 801ce98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce9a:	ea53 030a 	orrs.w	r3, r3, sl
 801ce9e:	f040 8082 	bne.w	801cfa6 <_strtod_l+0x8de>
 801cea2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d17d      	bne.n	801cfa6 <_strtod_l+0x8de>
 801ceaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ceae:	0d1b      	lsrs	r3, r3, #20
 801ceb0:	051b      	lsls	r3, r3, #20
 801ceb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ceb6:	d976      	bls.n	801cfa6 <_strtod_l+0x8de>
 801ceb8:	696b      	ldr	r3, [r5, #20]
 801ceba:	b913      	cbnz	r3, 801cec2 <_strtod_l+0x7fa>
 801cebc:	692b      	ldr	r3, [r5, #16]
 801cebe:	2b01      	cmp	r3, #1
 801cec0:	dd71      	ble.n	801cfa6 <_strtod_l+0x8de>
 801cec2:	4629      	mov	r1, r5
 801cec4:	2201      	movs	r2, #1
 801cec6:	4620      	mov	r0, r4
 801cec8:	f002 faa4 	bl	801f414 <__lshift>
 801cecc:	4631      	mov	r1, r6
 801cece:	4605      	mov	r5, r0
 801ced0:	f002 fb10 	bl	801f4f4 <__mcmp>
 801ced4:	2800      	cmp	r0, #0
 801ced6:	dd66      	ble.n	801cfa6 <_strtod_l+0x8de>
 801ced8:	9904      	ldr	r1, [sp, #16]
 801ceda:	4a53      	ldr	r2, [pc, #332]	; (801d028 <_strtod_l+0x960>)
 801cedc:	465b      	mov	r3, fp
 801cede:	2900      	cmp	r1, #0
 801cee0:	f000 8081 	beq.w	801cfe6 <_strtod_l+0x91e>
 801cee4:	ea02 010b 	and.w	r1, r2, fp
 801cee8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ceec:	dc7b      	bgt.n	801cfe6 <_strtod_l+0x91e>
 801ceee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801cef2:	f77f aea9 	ble.w	801cc48 <_strtod_l+0x580>
 801cef6:	4b4d      	ldr	r3, [pc, #308]	; (801d02c <_strtod_l+0x964>)
 801cef8:	4650      	mov	r0, sl
 801cefa:	4659      	mov	r1, fp
 801cefc:	2200      	movs	r2, #0
 801cefe:	f7e3 fb93 	bl	8000628 <__aeabi_dmul>
 801cf02:	460b      	mov	r3, r1
 801cf04:	4303      	orrs	r3, r0
 801cf06:	bf08      	it	eq
 801cf08:	2322      	moveq	r3, #34	; 0x22
 801cf0a:	4682      	mov	sl, r0
 801cf0c:	468b      	mov	fp, r1
 801cf0e:	bf08      	it	eq
 801cf10:	6023      	streq	r3, [r4, #0]
 801cf12:	e62b      	b.n	801cb6c <_strtod_l+0x4a4>
 801cf14:	f04f 32ff 	mov.w	r2, #4294967295
 801cf18:	fa02 f303 	lsl.w	r3, r2, r3
 801cf1c:	ea03 0a0a 	and.w	sl, r3, sl
 801cf20:	e6e3      	b.n	801ccea <_strtod_l+0x622>
 801cf22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801cf26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801cf2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801cf2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801cf32:	fa01 f308 	lsl.w	r3, r1, r8
 801cf36:	9308      	str	r3, [sp, #32]
 801cf38:	910d      	str	r1, [sp, #52]	; 0x34
 801cf3a:	e746      	b.n	801cdca <_strtod_l+0x702>
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	9308      	str	r3, [sp, #32]
 801cf40:	2301      	movs	r3, #1
 801cf42:	930d      	str	r3, [sp, #52]	; 0x34
 801cf44:	e741      	b.n	801cdca <_strtod_l+0x702>
 801cf46:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cf48:	4642      	mov	r2, r8
 801cf4a:	4620      	mov	r0, r4
 801cf4c:	f002 fa62 	bl	801f414 <__lshift>
 801cf50:	9018      	str	r0, [sp, #96]	; 0x60
 801cf52:	2800      	cmp	r0, #0
 801cf54:	f47f af6b 	bne.w	801ce2e <_strtod_l+0x766>
 801cf58:	e5fe      	b.n	801cb58 <_strtod_l+0x490>
 801cf5a:	465f      	mov	r7, fp
 801cf5c:	d16e      	bne.n	801d03c <_strtod_l+0x974>
 801cf5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cf60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cf64:	b342      	cbz	r2, 801cfb8 <_strtod_l+0x8f0>
 801cf66:	4a32      	ldr	r2, [pc, #200]	; (801d030 <_strtod_l+0x968>)
 801cf68:	4293      	cmp	r3, r2
 801cf6a:	d128      	bne.n	801cfbe <_strtod_l+0x8f6>
 801cf6c:	9b04      	ldr	r3, [sp, #16]
 801cf6e:	4651      	mov	r1, sl
 801cf70:	b1eb      	cbz	r3, 801cfae <_strtod_l+0x8e6>
 801cf72:	4b2d      	ldr	r3, [pc, #180]	; (801d028 <_strtod_l+0x960>)
 801cf74:	403b      	ands	r3, r7
 801cf76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801cf7a:	f04f 32ff 	mov.w	r2, #4294967295
 801cf7e:	d819      	bhi.n	801cfb4 <_strtod_l+0x8ec>
 801cf80:	0d1b      	lsrs	r3, r3, #20
 801cf82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cf86:	fa02 f303 	lsl.w	r3, r2, r3
 801cf8a:	4299      	cmp	r1, r3
 801cf8c:	d117      	bne.n	801cfbe <_strtod_l+0x8f6>
 801cf8e:	4b29      	ldr	r3, [pc, #164]	; (801d034 <_strtod_l+0x96c>)
 801cf90:	429f      	cmp	r7, r3
 801cf92:	d102      	bne.n	801cf9a <_strtod_l+0x8d2>
 801cf94:	3101      	adds	r1, #1
 801cf96:	f43f addf 	beq.w	801cb58 <_strtod_l+0x490>
 801cf9a:	4b23      	ldr	r3, [pc, #140]	; (801d028 <_strtod_l+0x960>)
 801cf9c:	403b      	ands	r3, r7
 801cf9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801cfa2:	f04f 0a00 	mov.w	sl, #0
 801cfa6:	9b04      	ldr	r3, [sp, #16]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d1a4      	bne.n	801cef6 <_strtod_l+0x82e>
 801cfac:	e5de      	b.n	801cb6c <_strtod_l+0x4a4>
 801cfae:	f04f 33ff 	mov.w	r3, #4294967295
 801cfb2:	e7ea      	b.n	801cf8a <_strtod_l+0x8c2>
 801cfb4:	4613      	mov	r3, r2
 801cfb6:	e7e8      	b.n	801cf8a <_strtod_l+0x8c2>
 801cfb8:	ea53 030a 	orrs.w	r3, r3, sl
 801cfbc:	d08c      	beq.n	801ced8 <_strtod_l+0x810>
 801cfbe:	9b08      	ldr	r3, [sp, #32]
 801cfc0:	b1db      	cbz	r3, 801cffa <_strtod_l+0x932>
 801cfc2:	423b      	tst	r3, r7
 801cfc4:	d0ef      	beq.n	801cfa6 <_strtod_l+0x8de>
 801cfc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cfc8:	9a04      	ldr	r2, [sp, #16]
 801cfca:	4650      	mov	r0, sl
 801cfcc:	4659      	mov	r1, fp
 801cfce:	b1c3      	cbz	r3, 801d002 <_strtod_l+0x93a>
 801cfd0:	f7ff fb5d 	bl	801c68e <sulp>
 801cfd4:	4602      	mov	r2, r0
 801cfd6:	460b      	mov	r3, r1
 801cfd8:	ec51 0b18 	vmov	r0, r1, d8
 801cfdc:	f7e3 f96e 	bl	80002bc <__adddf3>
 801cfe0:	4682      	mov	sl, r0
 801cfe2:	468b      	mov	fp, r1
 801cfe4:	e7df      	b.n	801cfa6 <_strtod_l+0x8de>
 801cfe6:	4013      	ands	r3, r2
 801cfe8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801cfec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801cff0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801cff4:	f04f 3aff 	mov.w	sl, #4294967295
 801cff8:	e7d5      	b.n	801cfa6 <_strtod_l+0x8de>
 801cffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cffc:	ea13 0f0a 	tst.w	r3, sl
 801d000:	e7e0      	b.n	801cfc4 <_strtod_l+0x8fc>
 801d002:	f7ff fb44 	bl	801c68e <sulp>
 801d006:	4602      	mov	r2, r0
 801d008:	460b      	mov	r3, r1
 801d00a:	ec51 0b18 	vmov	r0, r1, d8
 801d00e:	f7e3 f953 	bl	80002b8 <__aeabi_dsub>
 801d012:	2200      	movs	r2, #0
 801d014:	2300      	movs	r3, #0
 801d016:	4682      	mov	sl, r0
 801d018:	468b      	mov	fp, r1
 801d01a:	f7e3 fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 801d01e:	2800      	cmp	r0, #0
 801d020:	d0c1      	beq.n	801cfa6 <_strtod_l+0x8de>
 801d022:	e611      	b.n	801cc48 <_strtod_l+0x580>
 801d024:	fffffc02 	.word	0xfffffc02
 801d028:	7ff00000 	.word	0x7ff00000
 801d02c:	39500000 	.word	0x39500000
 801d030:	000fffff 	.word	0x000fffff
 801d034:	7fefffff 	.word	0x7fefffff
 801d038:	08021ff0 	.word	0x08021ff0
 801d03c:	4631      	mov	r1, r6
 801d03e:	4628      	mov	r0, r5
 801d040:	f002 fbd6 	bl	801f7f0 <__ratio>
 801d044:	ec59 8b10 	vmov	r8, r9, d0
 801d048:	ee10 0a10 	vmov	r0, s0
 801d04c:	2200      	movs	r2, #0
 801d04e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d052:	4649      	mov	r1, r9
 801d054:	f7e3 fd64 	bl	8000b20 <__aeabi_dcmple>
 801d058:	2800      	cmp	r0, #0
 801d05a:	d07a      	beq.n	801d152 <_strtod_l+0xa8a>
 801d05c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d04a      	beq.n	801d0f8 <_strtod_l+0xa30>
 801d062:	4b95      	ldr	r3, [pc, #596]	; (801d2b8 <_strtod_l+0xbf0>)
 801d064:	2200      	movs	r2, #0
 801d066:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d06a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801d2b8 <_strtod_l+0xbf0>
 801d06e:	f04f 0800 	mov.w	r8, #0
 801d072:	4b92      	ldr	r3, [pc, #584]	; (801d2bc <_strtod_l+0xbf4>)
 801d074:	403b      	ands	r3, r7
 801d076:	930d      	str	r3, [sp, #52]	; 0x34
 801d078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d07a:	4b91      	ldr	r3, [pc, #580]	; (801d2c0 <_strtod_l+0xbf8>)
 801d07c:	429a      	cmp	r2, r3
 801d07e:	f040 80b0 	bne.w	801d1e2 <_strtod_l+0xb1a>
 801d082:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d086:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801d08a:	ec4b ab10 	vmov	d0, sl, fp
 801d08e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d092:	f002 fad5 	bl	801f640 <__ulp>
 801d096:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d09a:	ec53 2b10 	vmov	r2, r3, d0
 801d09e:	f7e3 fac3 	bl	8000628 <__aeabi_dmul>
 801d0a2:	4652      	mov	r2, sl
 801d0a4:	465b      	mov	r3, fp
 801d0a6:	f7e3 f909 	bl	80002bc <__adddf3>
 801d0aa:	460b      	mov	r3, r1
 801d0ac:	4983      	ldr	r1, [pc, #524]	; (801d2bc <_strtod_l+0xbf4>)
 801d0ae:	4a85      	ldr	r2, [pc, #532]	; (801d2c4 <_strtod_l+0xbfc>)
 801d0b0:	4019      	ands	r1, r3
 801d0b2:	4291      	cmp	r1, r2
 801d0b4:	4682      	mov	sl, r0
 801d0b6:	d960      	bls.n	801d17a <_strtod_l+0xab2>
 801d0b8:	ee18 3a90 	vmov	r3, s17
 801d0bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d0c0:	4293      	cmp	r3, r2
 801d0c2:	d104      	bne.n	801d0ce <_strtod_l+0xa06>
 801d0c4:	ee18 3a10 	vmov	r3, s16
 801d0c8:	3301      	adds	r3, #1
 801d0ca:	f43f ad45 	beq.w	801cb58 <_strtod_l+0x490>
 801d0ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 801d2d0 <_strtod_l+0xc08>
 801d0d2:	f04f 3aff 	mov.w	sl, #4294967295
 801d0d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d0d8:	4620      	mov	r0, r4
 801d0da:	f001 ff7f 	bl	801efdc <_Bfree>
 801d0de:	9905      	ldr	r1, [sp, #20]
 801d0e0:	4620      	mov	r0, r4
 801d0e2:	f001 ff7b 	bl	801efdc <_Bfree>
 801d0e6:	4631      	mov	r1, r6
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	f001 ff77 	bl	801efdc <_Bfree>
 801d0ee:	4629      	mov	r1, r5
 801d0f0:	4620      	mov	r0, r4
 801d0f2:	f001 ff73 	bl	801efdc <_Bfree>
 801d0f6:	e61a      	b.n	801cd2e <_strtod_l+0x666>
 801d0f8:	f1ba 0f00 	cmp.w	sl, #0
 801d0fc:	d11b      	bne.n	801d136 <_strtod_l+0xa6e>
 801d0fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d102:	b9f3      	cbnz	r3, 801d142 <_strtod_l+0xa7a>
 801d104:	4b6c      	ldr	r3, [pc, #432]	; (801d2b8 <_strtod_l+0xbf0>)
 801d106:	2200      	movs	r2, #0
 801d108:	4640      	mov	r0, r8
 801d10a:	4649      	mov	r1, r9
 801d10c:	f7e3 fcfe 	bl	8000b0c <__aeabi_dcmplt>
 801d110:	b9d0      	cbnz	r0, 801d148 <_strtod_l+0xa80>
 801d112:	4640      	mov	r0, r8
 801d114:	4649      	mov	r1, r9
 801d116:	4b6c      	ldr	r3, [pc, #432]	; (801d2c8 <_strtod_l+0xc00>)
 801d118:	2200      	movs	r2, #0
 801d11a:	f7e3 fa85 	bl	8000628 <__aeabi_dmul>
 801d11e:	4680      	mov	r8, r0
 801d120:	4689      	mov	r9, r1
 801d122:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d126:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801d12a:	9315      	str	r3, [sp, #84]	; 0x54
 801d12c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d130:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d134:	e79d      	b.n	801d072 <_strtod_l+0x9aa>
 801d136:	f1ba 0f01 	cmp.w	sl, #1
 801d13a:	d102      	bne.n	801d142 <_strtod_l+0xa7a>
 801d13c:	2f00      	cmp	r7, #0
 801d13e:	f43f ad83 	beq.w	801cc48 <_strtod_l+0x580>
 801d142:	4b62      	ldr	r3, [pc, #392]	; (801d2cc <_strtod_l+0xc04>)
 801d144:	2200      	movs	r2, #0
 801d146:	e78e      	b.n	801d066 <_strtod_l+0x99e>
 801d148:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801d2c8 <_strtod_l+0xc00>
 801d14c:	f04f 0800 	mov.w	r8, #0
 801d150:	e7e7      	b.n	801d122 <_strtod_l+0xa5a>
 801d152:	4b5d      	ldr	r3, [pc, #372]	; (801d2c8 <_strtod_l+0xc00>)
 801d154:	4640      	mov	r0, r8
 801d156:	4649      	mov	r1, r9
 801d158:	2200      	movs	r2, #0
 801d15a:	f7e3 fa65 	bl	8000628 <__aeabi_dmul>
 801d15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d160:	4680      	mov	r8, r0
 801d162:	4689      	mov	r9, r1
 801d164:	b933      	cbnz	r3, 801d174 <_strtod_l+0xaac>
 801d166:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d16a:	900e      	str	r0, [sp, #56]	; 0x38
 801d16c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d16e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d172:	e7dd      	b.n	801d130 <_strtod_l+0xa68>
 801d174:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801d178:	e7f9      	b.n	801d16e <_strtod_l+0xaa6>
 801d17a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801d17e:	9b04      	ldr	r3, [sp, #16]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d1a8      	bne.n	801d0d6 <_strtod_l+0xa0e>
 801d184:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d18a:	0d1b      	lsrs	r3, r3, #20
 801d18c:	051b      	lsls	r3, r3, #20
 801d18e:	429a      	cmp	r2, r3
 801d190:	d1a1      	bne.n	801d0d6 <_strtod_l+0xa0e>
 801d192:	4640      	mov	r0, r8
 801d194:	4649      	mov	r1, r9
 801d196:	f7e3 fda7 	bl	8000ce8 <__aeabi_d2lz>
 801d19a:	f7e3 fa17 	bl	80005cc <__aeabi_l2d>
 801d19e:	4602      	mov	r2, r0
 801d1a0:	460b      	mov	r3, r1
 801d1a2:	4640      	mov	r0, r8
 801d1a4:	4649      	mov	r1, r9
 801d1a6:	f7e3 f887 	bl	80002b8 <__aeabi_dsub>
 801d1aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d1ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d1b0:	ea43 030a 	orr.w	r3, r3, sl
 801d1b4:	4313      	orrs	r3, r2
 801d1b6:	4680      	mov	r8, r0
 801d1b8:	4689      	mov	r9, r1
 801d1ba:	d055      	beq.n	801d268 <_strtod_l+0xba0>
 801d1bc:	a336      	add	r3, pc, #216	; (adr r3, 801d298 <_strtod_l+0xbd0>)
 801d1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1c2:	f7e3 fca3 	bl	8000b0c <__aeabi_dcmplt>
 801d1c6:	2800      	cmp	r0, #0
 801d1c8:	f47f acd0 	bne.w	801cb6c <_strtod_l+0x4a4>
 801d1cc:	a334      	add	r3, pc, #208	; (adr r3, 801d2a0 <_strtod_l+0xbd8>)
 801d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1d2:	4640      	mov	r0, r8
 801d1d4:	4649      	mov	r1, r9
 801d1d6:	f7e3 fcb7 	bl	8000b48 <__aeabi_dcmpgt>
 801d1da:	2800      	cmp	r0, #0
 801d1dc:	f43f af7b 	beq.w	801d0d6 <_strtod_l+0xa0e>
 801d1e0:	e4c4      	b.n	801cb6c <_strtod_l+0x4a4>
 801d1e2:	9b04      	ldr	r3, [sp, #16]
 801d1e4:	b333      	cbz	r3, 801d234 <_strtod_l+0xb6c>
 801d1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d1ec:	d822      	bhi.n	801d234 <_strtod_l+0xb6c>
 801d1ee:	a32e      	add	r3, pc, #184	; (adr r3, 801d2a8 <_strtod_l+0xbe0>)
 801d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1f4:	4640      	mov	r0, r8
 801d1f6:	4649      	mov	r1, r9
 801d1f8:	f7e3 fc92 	bl	8000b20 <__aeabi_dcmple>
 801d1fc:	b1a0      	cbz	r0, 801d228 <_strtod_l+0xb60>
 801d1fe:	4649      	mov	r1, r9
 801d200:	4640      	mov	r0, r8
 801d202:	f7e3 fce9 	bl	8000bd8 <__aeabi_d2uiz>
 801d206:	2801      	cmp	r0, #1
 801d208:	bf38      	it	cc
 801d20a:	2001      	movcc	r0, #1
 801d20c:	f7e3 f992 	bl	8000534 <__aeabi_ui2d>
 801d210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d212:	4680      	mov	r8, r0
 801d214:	4689      	mov	r9, r1
 801d216:	bb23      	cbnz	r3, 801d262 <_strtod_l+0xb9a>
 801d218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d21c:	9010      	str	r0, [sp, #64]	; 0x40
 801d21e:	9311      	str	r3, [sp, #68]	; 0x44
 801d220:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d224:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d22a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d22c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d230:	1a9b      	subs	r3, r3, r2
 801d232:	9309      	str	r3, [sp, #36]	; 0x24
 801d234:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d238:	eeb0 0a48 	vmov.f32	s0, s16
 801d23c:	eef0 0a68 	vmov.f32	s1, s17
 801d240:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d244:	f002 f9fc 	bl	801f640 <__ulp>
 801d248:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d24c:	ec53 2b10 	vmov	r2, r3, d0
 801d250:	f7e3 f9ea 	bl	8000628 <__aeabi_dmul>
 801d254:	ec53 2b18 	vmov	r2, r3, d8
 801d258:	f7e3 f830 	bl	80002bc <__adddf3>
 801d25c:	4682      	mov	sl, r0
 801d25e:	468b      	mov	fp, r1
 801d260:	e78d      	b.n	801d17e <_strtod_l+0xab6>
 801d262:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801d266:	e7db      	b.n	801d220 <_strtod_l+0xb58>
 801d268:	a311      	add	r3, pc, #68	; (adr r3, 801d2b0 <_strtod_l+0xbe8>)
 801d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d26e:	f7e3 fc4d 	bl	8000b0c <__aeabi_dcmplt>
 801d272:	e7b2      	b.n	801d1da <_strtod_l+0xb12>
 801d274:	2300      	movs	r3, #0
 801d276:	930a      	str	r3, [sp, #40]	; 0x28
 801d278:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d27a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d27c:	6013      	str	r3, [r2, #0]
 801d27e:	f7ff ba6b 	b.w	801c758 <_strtod_l+0x90>
 801d282:	2a65      	cmp	r2, #101	; 0x65
 801d284:	f43f ab5f 	beq.w	801c946 <_strtod_l+0x27e>
 801d288:	2a45      	cmp	r2, #69	; 0x45
 801d28a:	f43f ab5c 	beq.w	801c946 <_strtod_l+0x27e>
 801d28e:	2301      	movs	r3, #1
 801d290:	f7ff bb94 	b.w	801c9bc <_strtod_l+0x2f4>
 801d294:	f3af 8000 	nop.w
 801d298:	94a03595 	.word	0x94a03595
 801d29c:	3fdfffff 	.word	0x3fdfffff
 801d2a0:	35afe535 	.word	0x35afe535
 801d2a4:	3fe00000 	.word	0x3fe00000
 801d2a8:	ffc00000 	.word	0xffc00000
 801d2ac:	41dfffff 	.word	0x41dfffff
 801d2b0:	94a03595 	.word	0x94a03595
 801d2b4:	3fcfffff 	.word	0x3fcfffff
 801d2b8:	3ff00000 	.word	0x3ff00000
 801d2bc:	7ff00000 	.word	0x7ff00000
 801d2c0:	7fe00000 	.word	0x7fe00000
 801d2c4:	7c9fffff 	.word	0x7c9fffff
 801d2c8:	3fe00000 	.word	0x3fe00000
 801d2cc:	bff00000 	.word	0xbff00000
 801d2d0:	7fefffff 	.word	0x7fefffff

0801d2d4 <_strtod_r>:
 801d2d4:	4b01      	ldr	r3, [pc, #4]	; (801d2dc <_strtod_r+0x8>)
 801d2d6:	f7ff b9f7 	b.w	801c6c8 <_strtod_l>
 801d2da:	bf00      	nop
 801d2dc:	200001ac 	.word	0x200001ac

0801d2e0 <strtok>:
 801d2e0:	4b16      	ldr	r3, [pc, #88]	; (801d33c <strtok+0x5c>)
 801d2e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d2e4:	681e      	ldr	r6, [r3, #0]
 801d2e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801d2e8:	4605      	mov	r5, r0
 801d2ea:	b9fc      	cbnz	r4, 801d32c <strtok+0x4c>
 801d2ec:	2050      	movs	r0, #80	; 0x50
 801d2ee:	9101      	str	r1, [sp, #4]
 801d2f0:	f7fe f94c 	bl	801b58c <malloc>
 801d2f4:	9901      	ldr	r1, [sp, #4]
 801d2f6:	65b0      	str	r0, [r6, #88]	; 0x58
 801d2f8:	4602      	mov	r2, r0
 801d2fa:	b920      	cbnz	r0, 801d306 <strtok+0x26>
 801d2fc:	4b10      	ldr	r3, [pc, #64]	; (801d340 <strtok+0x60>)
 801d2fe:	4811      	ldr	r0, [pc, #68]	; (801d344 <strtok+0x64>)
 801d300:	2157      	movs	r1, #87	; 0x57
 801d302:	f000 f9d1 	bl	801d6a8 <__assert_func>
 801d306:	e9c0 4400 	strd	r4, r4, [r0]
 801d30a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801d30e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801d312:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801d316:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801d31a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801d31e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801d322:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801d326:	6184      	str	r4, [r0, #24]
 801d328:	7704      	strb	r4, [r0, #28]
 801d32a:	6244      	str	r4, [r0, #36]	; 0x24
 801d32c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801d32e:	2301      	movs	r3, #1
 801d330:	4628      	mov	r0, r5
 801d332:	b002      	add	sp, #8
 801d334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d338:	f000 b806 	b.w	801d348 <__strtok_r>
 801d33c:	20000144 	.word	0x20000144
 801d340:	08022018 	.word	0x08022018
 801d344:	0802202f 	.word	0x0802202f

0801d348 <__strtok_r>:
 801d348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d34a:	b908      	cbnz	r0, 801d350 <__strtok_r+0x8>
 801d34c:	6810      	ldr	r0, [r2, #0]
 801d34e:	b188      	cbz	r0, 801d374 <__strtok_r+0x2c>
 801d350:	4604      	mov	r4, r0
 801d352:	4620      	mov	r0, r4
 801d354:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d358:	460f      	mov	r7, r1
 801d35a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d35e:	b91e      	cbnz	r6, 801d368 <__strtok_r+0x20>
 801d360:	b965      	cbnz	r5, 801d37c <__strtok_r+0x34>
 801d362:	6015      	str	r5, [r2, #0]
 801d364:	4628      	mov	r0, r5
 801d366:	e005      	b.n	801d374 <__strtok_r+0x2c>
 801d368:	42b5      	cmp	r5, r6
 801d36a:	d1f6      	bne.n	801d35a <__strtok_r+0x12>
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	d1f0      	bne.n	801d352 <__strtok_r+0xa>
 801d370:	6014      	str	r4, [r2, #0]
 801d372:	7003      	strb	r3, [r0, #0]
 801d374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d376:	461c      	mov	r4, r3
 801d378:	e00c      	b.n	801d394 <__strtok_r+0x4c>
 801d37a:	b915      	cbnz	r5, 801d382 <__strtok_r+0x3a>
 801d37c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d380:	460e      	mov	r6, r1
 801d382:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d386:	42ab      	cmp	r3, r5
 801d388:	d1f7      	bne.n	801d37a <__strtok_r+0x32>
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d0f3      	beq.n	801d376 <__strtok_r+0x2e>
 801d38e:	2300      	movs	r3, #0
 801d390:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d394:	6014      	str	r4, [r2, #0]
 801d396:	e7ed      	b.n	801d374 <__strtok_r+0x2c>

0801d398 <_strtol_l.constprop.0>:
 801d398:	2b01      	cmp	r3, #1
 801d39a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d39e:	d001      	beq.n	801d3a4 <_strtol_l.constprop.0+0xc>
 801d3a0:	2b24      	cmp	r3, #36	; 0x24
 801d3a2:	d906      	bls.n	801d3b2 <_strtol_l.constprop.0+0x1a>
 801d3a4:	f7fe f856 	bl	801b454 <__errno>
 801d3a8:	2316      	movs	r3, #22
 801d3aa:	6003      	str	r3, [r0, #0]
 801d3ac:	2000      	movs	r0, #0
 801d3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801d498 <_strtol_l.constprop.0+0x100>
 801d3b6:	460d      	mov	r5, r1
 801d3b8:	462e      	mov	r6, r5
 801d3ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d3be:	f814 700c 	ldrb.w	r7, [r4, ip]
 801d3c2:	f017 0708 	ands.w	r7, r7, #8
 801d3c6:	d1f7      	bne.n	801d3b8 <_strtol_l.constprop.0+0x20>
 801d3c8:	2c2d      	cmp	r4, #45	; 0x2d
 801d3ca:	d132      	bne.n	801d432 <_strtol_l.constprop.0+0x9a>
 801d3cc:	782c      	ldrb	r4, [r5, #0]
 801d3ce:	2701      	movs	r7, #1
 801d3d0:	1cb5      	adds	r5, r6, #2
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d05b      	beq.n	801d48e <_strtol_l.constprop.0+0xf6>
 801d3d6:	2b10      	cmp	r3, #16
 801d3d8:	d109      	bne.n	801d3ee <_strtol_l.constprop.0+0x56>
 801d3da:	2c30      	cmp	r4, #48	; 0x30
 801d3dc:	d107      	bne.n	801d3ee <_strtol_l.constprop.0+0x56>
 801d3de:	782c      	ldrb	r4, [r5, #0]
 801d3e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d3e4:	2c58      	cmp	r4, #88	; 0x58
 801d3e6:	d14d      	bne.n	801d484 <_strtol_l.constprop.0+0xec>
 801d3e8:	786c      	ldrb	r4, [r5, #1]
 801d3ea:	2310      	movs	r3, #16
 801d3ec:	3502      	adds	r5, #2
 801d3ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801d3f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801d3f6:	f04f 0c00 	mov.w	ip, #0
 801d3fa:	fbb8 f9f3 	udiv	r9, r8, r3
 801d3fe:	4666      	mov	r6, ip
 801d400:	fb03 8a19 	mls	sl, r3, r9, r8
 801d404:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801d408:	f1be 0f09 	cmp.w	lr, #9
 801d40c:	d816      	bhi.n	801d43c <_strtol_l.constprop.0+0xa4>
 801d40e:	4674      	mov	r4, lr
 801d410:	42a3      	cmp	r3, r4
 801d412:	dd24      	ble.n	801d45e <_strtol_l.constprop.0+0xc6>
 801d414:	f1bc 0f00 	cmp.w	ip, #0
 801d418:	db1e      	blt.n	801d458 <_strtol_l.constprop.0+0xc0>
 801d41a:	45b1      	cmp	r9, r6
 801d41c:	d31c      	bcc.n	801d458 <_strtol_l.constprop.0+0xc0>
 801d41e:	d101      	bne.n	801d424 <_strtol_l.constprop.0+0x8c>
 801d420:	45a2      	cmp	sl, r4
 801d422:	db19      	blt.n	801d458 <_strtol_l.constprop.0+0xc0>
 801d424:	fb06 4603 	mla	r6, r6, r3, r4
 801d428:	f04f 0c01 	mov.w	ip, #1
 801d42c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d430:	e7e8      	b.n	801d404 <_strtol_l.constprop.0+0x6c>
 801d432:	2c2b      	cmp	r4, #43	; 0x2b
 801d434:	bf04      	itt	eq
 801d436:	782c      	ldrbeq	r4, [r5, #0]
 801d438:	1cb5      	addeq	r5, r6, #2
 801d43a:	e7ca      	b.n	801d3d2 <_strtol_l.constprop.0+0x3a>
 801d43c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801d440:	f1be 0f19 	cmp.w	lr, #25
 801d444:	d801      	bhi.n	801d44a <_strtol_l.constprop.0+0xb2>
 801d446:	3c37      	subs	r4, #55	; 0x37
 801d448:	e7e2      	b.n	801d410 <_strtol_l.constprop.0+0x78>
 801d44a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801d44e:	f1be 0f19 	cmp.w	lr, #25
 801d452:	d804      	bhi.n	801d45e <_strtol_l.constprop.0+0xc6>
 801d454:	3c57      	subs	r4, #87	; 0x57
 801d456:	e7db      	b.n	801d410 <_strtol_l.constprop.0+0x78>
 801d458:	f04f 3cff 	mov.w	ip, #4294967295
 801d45c:	e7e6      	b.n	801d42c <_strtol_l.constprop.0+0x94>
 801d45e:	f1bc 0f00 	cmp.w	ip, #0
 801d462:	da05      	bge.n	801d470 <_strtol_l.constprop.0+0xd8>
 801d464:	2322      	movs	r3, #34	; 0x22
 801d466:	6003      	str	r3, [r0, #0]
 801d468:	4646      	mov	r6, r8
 801d46a:	b942      	cbnz	r2, 801d47e <_strtol_l.constprop.0+0xe6>
 801d46c:	4630      	mov	r0, r6
 801d46e:	e79e      	b.n	801d3ae <_strtol_l.constprop.0+0x16>
 801d470:	b107      	cbz	r7, 801d474 <_strtol_l.constprop.0+0xdc>
 801d472:	4276      	negs	r6, r6
 801d474:	2a00      	cmp	r2, #0
 801d476:	d0f9      	beq.n	801d46c <_strtol_l.constprop.0+0xd4>
 801d478:	f1bc 0f00 	cmp.w	ip, #0
 801d47c:	d000      	beq.n	801d480 <_strtol_l.constprop.0+0xe8>
 801d47e:	1e69      	subs	r1, r5, #1
 801d480:	6011      	str	r1, [r2, #0]
 801d482:	e7f3      	b.n	801d46c <_strtol_l.constprop.0+0xd4>
 801d484:	2430      	movs	r4, #48	; 0x30
 801d486:	2b00      	cmp	r3, #0
 801d488:	d1b1      	bne.n	801d3ee <_strtol_l.constprop.0+0x56>
 801d48a:	2308      	movs	r3, #8
 801d48c:	e7af      	b.n	801d3ee <_strtol_l.constprop.0+0x56>
 801d48e:	2c30      	cmp	r4, #48	; 0x30
 801d490:	d0a5      	beq.n	801d3de <_strtol_l.constprop.0+0x46>
 801d492:	230a      	movs	r3, #10
 801d494:	e7ab      	b.n	801d3ee <_strtol_l.constprop.0+0x56>
 801d496:	bf00      	nop
 801d498:	080220c9 	.word	0x080220c9

0801d49c <_strtol_r>:
 801d49c:	f7ff bf7c 	b.w	801d398 <_strtol_l.constprop.0>

0801d4a0 <strtol>:
 801d4a0:	4613      	mov	r3, r2
 801d4a2:	460a      	mov	r2, r1
 801d4a4:	4601      	mov	r1, r0
 801d4a6:	4802      	ldr	r0, [pc, #8]	; (801d4b0 <strtol+0x10>)
 801d4a8:	6800      	ldr	r0, [r0, #0]
 801d4aa:	f7ff bf75 	b.w	801d398 <_strtol_l.constprop.0>
 801d4ae:	bf00      	nop
 801d4b0:	20000144 	.word	0x20000144

0801d4b4 <_vsniprintf_r>:
 801d4b4:	b530      	push	{r4, r5, lr}
 801d4b6:	4614      	mov	r4, r2
 801d4b8:	2c00      	cmp	r4, #0
 801d4ba:	b09b      	sub	sp, #108	; 0x6c
 801d4bc:	4605      	mov	r5, r0
 801d4be:	461a      	mov	r2, r3
 801d4c0:	da05      	bge.n	801d4ce <_vsniprintf_r+0x1a>
 801d4c2:	238b      	movs	r3, #139	; 0x8b
 801d4c4:	6003      	str	r3, [r0, #0]
 801d4c6:	f04f 30ff 	mov.w	r0, #4294967295
 801d4ca:	b01b      	add	sp, #108	; 0x6c
 801d4cc:	bd30      	pop	{r4, r5, pc}
 801d4ce:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d4d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d4d6:	bf14      	ite	ne
 801d4d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d4dc:	4623      	moveq	r3, r4
 801d4de:	9302      	str	r3, [sp, #8]
 801d4e0:	9305      	str	r3, [sp, #20]
 801d4e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d4e6:	9100      	str	r1, [sp, #0]
 801d4e8:	9104      	str	r1, [sp, #16]
 801d4ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d4ee:	4669      	mov	r1, sp
 801d4f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d4f2:	f002 fa65 	bl	801f9c0 <_svfiprintf_r>
 801d4f6:	1c43      	adds	r3, r0, #1
 801d4f8:	bfbc      	itt	lt
 801d4fa:	238b      	movlt	r3, #139	; 0x8b
 801d4fc:	602b      	strlt	r3, [r5, #0]
 801d4fe:	2c00      	cmp	r4, #0
 801d500:	d0e3      	beq.n	801d4ca <_vsniprintf_r+0x16>
 801d502:	9b00      	ldr	r3, [sp, #0]
 801d504:	2200      	movs	r2, #0
 801d506:	701a      	strb	r2, [r3, #0]
 801d508:	e7df      	b.n	801d4ca <_vsniprintf_r+0x16>
	...

0801d50c <vsniprintf>:
 801d50c:	b507      	push	{r0, r1, r2, lr}
 801d50e:	9300      	str	r3, [sp, #0]
 801d510:	4613      	mov	r3, r2
 801d512:	460a      	mov	r2, r1
 801d514:	4601      	mov	r1, r0
 801d516:	4803      	ldr	r0, [pc, #12]	; (801d524 <vsniprintf+0x18>)
 801d518:	6800      	ldr	r0, [r0, #0]
 801d51a:	f7ff ffcb 	bl	801d4b4 <_vsniprintf_r>
 801d51e:	b003      	add	sp, #12
 801d520:	f85d fb04 	ldr.w	pc, [sp], #4
 801d524:	20000144 	.word	0x20000144

0801d528 <__swbuf_r>:
 801d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d52a:	460e      	mov	r6, r1
 801d52c:	4614      	mov	r4, r2
 801d52e:	4605      	mov	r5, r0
 801d530:	b118      	cbz	r0, 801d53a <__swbuf_r+0x12>
 801d532:	6983      	ldr	r3, [r0, #24]
 801d534:	b90b      	cbnz	r3, 801d53a <__swbuf_r+0x12>
 801d536:	f001 f86b 	bl	801e610 <__sinit>
 801d53a:	4b21      	ldr	r3, [pc, #132]	; (801d5c0 <__swbuf_r+0x98>)
 801d53c:	429c      	cmp	r4, r3
 801d53e:	d12b      	bne.n	801d598 <__swbuf_r+0x70>
 801d540:	686c      	ldr	r4, [r5, #4]
 801d542:	69a3      	ldr	r3, [r4, #24]
 801d544:	60a3      	str	r3, [r4, #8]
 801d546:	89a3      	ldrh	r3, [r4, #12]
 801d548:	071a      	lsls	r2, r3, #28
 801d54a:	d52f      	bpl.n	801d5ac <__swbuf_r+0x84>
 801d54c:	6923      	ldr	r3, [r4, #16]
 801d54e:	b36b      	cbz	r3, 801d5ac <__swbuf_r+0x84>
 801d550:	6923      	ldr	r3, [r4, #16]
 801d552:	6820      	ldr	r0, [r4, #0]
 801d554:	1ac0      	subs	r0, r0, r3
 801d556:	6963      	ldr	r3, [r4, #20]
 801d558:	b2f6      	uxtb	r6, r6
 801d55a:	4283      	cmp	r3, r0
 801d55c:	4637      	mov	r7, r6
 801d55e:	dc04      	bgt.n	801d56a <__swbuf_r+0x42>
 801d560:	4621      	mov	r1, r4
 801d562:	4628      	mov	r0, r5
 801d564:	f000 ffc0 	bl	801e4e8 <_fflush_r>
 801d568:	bb30      	cbnz	r0, 801d5b8 <__swbuf_r+0x90>
 801d56a:	68a3      	ldr	r3, [r4, #8]
 801d56c:	3b01      	subs	r3, #1
 801d56e:	60a3      	str	r3, [r4, #8]
 801d570:	6823      	ldr	r3, [r4, #0]
 801d572:	1c5a      	adds	r2, r3, #1
 801d574:	6022      	str	r2, [r4, #0]
 801d576:	701e      	strb	r6, [r3, #0]
 801d578:	6963      	ldr	r3, [r4, #20]
 801d57a:	3001      	adds	r0, #1
 801d57c:	4283      	cmp	r3, r0
 801d57e:	d004      	beq.n	801d58a <__swbuf_r+0x62>
 801d580:	89a3      	ldrh	r3, [r4, #12]
 801d582:	07db      	lsls	r3, r3, #31
 801d584:	d506      	bpl.n	801d594 <__swbuf_r+0x6c>
 801d586:	2e0a      	cmp	r6, #10
 801d588:	d104      	bne.n	801d594 <__swbuf_r+0x6c>
 801d58a:	4621      	mov	r1, r4
 801d58c:	4628      	mov	r0, r5
 801d58e:	f000 ffab 	bl	801e4e8 <_fflush_r>
 801d592:	b988      	cbnz	r0, 801d5b8 <__swbuf_r+0x90>
 801d594:	4638      	mov	r0, r7
 801d596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d598:	4b0a      	ldr	r3, [pc, #40]	; (801d5c4 <__swbuf_r+0x9c>)
 801d59a:	429c      	cmp	r4, r3
 801d59c:	d101      	bne.n	801d5a2 <__swbuf_r+0x7a>
 801d59e:	68ac      	ldr	r4, [r5, #8]
 801d5a0:	e7cf      	b.n	801d542 <__swbuf_r+0x1a>
 801d5a2:	4b09      	ldr	r3, [pc, #36]	; (801d5c8 <__swbuf_r+0xa0>)
 801d5a4:	429c      	cmp	r4, r3
 801d5a6:	bf08      	it	eq
 801d5a8:	68ec      	ldreq	r4, [r5, #12]
 801d5aa:	e7ca      	b.n	801d542 <__swbuf_r+0x1a>
 801d5ac:	4621      	mov	r1, r4
 801d5ae:	4628      	mov	r0, r5
 801d5b0:	f000 f80c 	bl	801d5cc <__swsetup_r>
 801d5b4:	2800      	cmp	r0, #0
 801d5b6:	d0cb      	beq.n	801d550 <__swbuf_r+0x28>
 801d5b8:	f04f 37ff 	mov.w	r7, #4294967295
 801d5bc:	e7ea      	b.n	801d594 <__swbuf_r+0x6c>
 801d5be:	bf00      	nop
 801d5c0:	08022264 	.word	0x08022264
 801d5c4:	08022284 	.word	0x08022284
 801d5c8:	08022244 	.word	0x08022244

0801d5cc <__swsetup_r>:
 801d5cc:	4b32      	ldr	r3, [pc, #200]	; (801d698 <__swsetup_r+0xcc>)
 801d5ce:	b570      	push	{r4, r5, r6, lr}
 801d5d0:	681d      	ldr	r5, [r3, #0]
 801d5d2:	4606      	mov	r6, r0
 801d5d4:	460c      	mov	r4, r1
 801d5d6:	b125      	cbz	r5, 801d5e2 <__swsetup_r+0x16>
 801d5d8:	69ab      	ldr	r3, [r5, #24]
 801d5da:	b913      	cbnz	r3, 801d5e2 <__swsetup_r+0x16>
 801d5dc:	4628      	mov	r0, r5
 801d5de:	f001 f817 	bl	801e610 <__sinit>
 801d5e2:	4b2e      	ldr	r3, [pc, #184]	; (801d69c <__swsetup_r+0xd0>)
 801d5e4:	429c      	cmp	r4, r3
 801d5e6:	d10f      	bne.n	801d608 <__swsetup_r+0x3c>
 801d5e8:	686c      	ldr	r4, [r5, #4]
 801d5ea:	89a3      	ldrh	r3, [r4, #12]
 801d5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d5f0:	0719      	lsls	r1, r3, #28
 801d5f2:	d42c      	bmi.n	801d64e <__swsetup_r+0x82>
 801d5f4:	06dd      	lsls	r5, r3, #27
 801d5f6:	d411      	bmi.n	801d61c <__swsetup_r+0x50>
 801d5f8:	2309      	movs	r3, #9
 801d5fa:	6033      	str	r3, [r6, #0]
 801d5fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d600:	81a3      	strh	r3, [r4, #12]
 801d602:	f04f 30ff 	mov.w	r0, #4294967295
 801d606:	e03e      	b.n	801d686 <__swsetup_r+0xba>
 801d608:	4b25      	ldr	r3, [pc, #148]	; (801d6a0 <__swsetup_r+0xd4>)
 801d60a:	429c      	cmp	r4, r3
 801d60c:	d101      	bne.n	801d612 <__swsetup_r+0x46>
 801d60e:	68ac      	ldr	r4, [r5, #8]
 801d610:	e7eb      	b.n	801d5ea <__swsetup_r+0x1e>
 801d612:	4b24      	ldr	r3, [pc, #144]	; (801d6a4 <__swsetup_r+0xd8>)
 801d614:	429c      	cmp	r4, r3
 801d616:	bf08      	it	eq
 801d618:	68ec      	ldreq	r4, [r5, #12]
 801d61a:	e7e6      	b.n	801d5ea <__swsetup_r+0x1e>
 801d61c:	0758      	lsls	r0, r3, #29
 801d61e:	d512      	bpl.n	801d646 <__swsetup_r+0x7a>
 801d620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d622:	b141      	cbz	r1, 801d636 <__swsetup_r+0x6a>
 801d624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d628:	4299      	cmp	r1, r3
 801d62a:	d002      	beq.n	801d632 <__swsetup_r+0x66>
 801d62c:	4630      	mov	r0, r6
 801d62e:	f7fd ffe5 	bl	801b5fc <_free_r>
 801d632:	2300      	movs	r3, #0
 801d634:	6363      	str	r3, [r4, #52]	; 0x34
 801d636:	89a3      	ldrh	r3, [r4, #12]
 801d638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d63c:	81a3      	strh	r3, [r4, #12]
 801d63e:	2300      	movs	r3, #0
 801d640:	6063      	str	r3, [r4, #4]
 801d642:	6923      	ldr	r3, [r4, #16]
 801d644:	6023      	str	r3, [r4, #0]
 801d646:	89a3      	ldrh	r3, [r4, #12]
 801d648:	f043 0308 	orr.w	r3, r3, #8
 801d64c:	81a3      	strh	r3, [r4, #12]
 801d64e:	6923      	ldr	r3, [r4, #16]
 801d650:	b94b      	cbnz	r3, 801d666 <__swsetup_r+0x9a>
 801d652:	89a3      	ldrh	r3, [r4, #12]
 801d654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d65c:	d003      	beq.n	801d666 <__swsetup_r+0x9a>
 801d65e:	4621      	mov	r1, r4
 801d660:	4630      	mov	r0, r6
 801d662:	f001 fc1d 	bl	801eea0 <__smakebuf_r>
 801d666:	89a0      	ldrh	r0, [r4, #12]
 801d668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d66c:	f010 0301 	ands.w	r3, r0, #1
 801d670:	d00a      	beq.n	801d688 <__swsetup_r+0xbc>
 801d672:	2300      	movs	r3, #0
 801d674:	60a3      	str	r3, [r4, #8]
 801d676:	6963      	ldr	r3, [r4, #20]
 801d678:	425b      	negs	r3, r3
 801d67a:	61a3      	str	r3, [r4, #24]
 801d67c:	6923      	ldr	r3, [r4, #16]
 801d67e:	b943      	cbnz	r3, 801d692 <__swsetup_r+0xc6>
 801d680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d684:	d1ba      	bne.n	801d5fc <__swsetup_r+0x30>
 801d686:	bd70      	pop	{r4, r5, r6, pc}
 801d688:	0781      	lsls	r1, r0, #30
 801d68a:	bf58      	it	pl
 801d68c:	6963      	ldrpl	r3, [r4, #20]
 801d68e:	60a3      	str	r3, [r4, #8]
 801d690:	e7f4      	b.n	801d67c <__swsetup_r+0xb0>
 801d692:	2000      	movs	r0, #0
 801d694:	e7f7      	b.n	801d686 <__swsetup_r+0xba>
 801d696:	bf00      	nop
 801d698:	20000144 	.word	0x20000144
 801d69c:	08022264 	.word	0x08022264
 801d6a0:	08022284 	.word	0x08022284
 801d6a4:	08022244 	.word	0x08022244

0801d6a8 <__assert_func>:
 801d6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d6aa:	4614      	mov	r4, r2
 801d6ac:	461a      	mov	r2, r3
 801d6ae:	4b09      	ldr	r3, [pc, #36]	; (801d6d4 <__assert_func+0x2c>)
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	4605      	mov	r5, r0
 801d6b4:	68d8      	ldr	r0, [r3, #12]
 801d6b6:	b14c      	cbz	r4, 801d6cc <__assert_func+0x24>
 801d6b8:	4b07      	ldr	r3, [pc, #28]	; (801d6d8 <__assert_func+0x30>)
 801d6ba:	9100      	str	r1, [sp, #0]
 801d6bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d6c0:	4906      	ldr	r1, [pc, #24]	; (801d6dc <__assert_func+0x34>)
 801d6c2:	462b      	mov	r3, r5
 801d6c4:	f001 f822 	bl	801e70c <fiprintf>
 801d6c8:	f002 fc54 	bl	801ff74 <abort>
 801d6cc:	4b04      	ldr	r3, [pc, #16]	; (801d6e0 <__assert_func+0x38>)
 801d6ce:	461c      	mov	r4, r3
 801d6d0:	e7f3      	b.n	801d6ba <__assert_func+0x12>
 801d6d2:	bf00      	nop
 801d6d4:	20000144 	.word	0x20000144
 801d6d8:	0802208c 	.word	0x0802208c
 801d6dc:	08022099 	.word	0x08022099
 801d6e0:	080220c7 	.word	0x080220c7

0801d6e4 <quorem>:
 801d6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e8:	6903      	ldr	r3, [r0, #16]
 801d6ea:	690c      	ldr	r4, [r1, #16]
 801d6ec:	42a3      	cmp	r3, r4
 801d6ee:	4607      	mov	r7, r0
 801d6f0:	f2c0 8081 	blt.w	801d7f6 <quorem+0x112>
 801d6f4:	3c01      	subs	r4, #1
 801d6f6:	f101 0814 	add.w	r8, r1, #20
 801d6fa:	f100 0514 	add.w	r5, r0, #20
 801d6fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d702:	9301      	str	r3, [sp, #4]
 801d704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d70c:	3301      	adds	r3, #1
 801d70e:	429a      	cmp	r2, r3
 801d710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d718:	fbb2 f6f3 	udiv	r6, r2, r3
 801d71c:	d331      	bcc.n	801d782 <quorem+0x9e>
 801d71e:	f04f 0e00 	mov.w	lr, #0
 801d722:	4640      	mov	r0, r8
 801d724:	46ac      	mov	ip, r5
 801d726:	46f2      	mov	sl, lr
 801d728:	f850 2b04 	ldr.w	r2, [r0], #4
 801d72c:	b293      	uxth	r3, r2
 801d72e:	fb06 e303 	mla	r3, r6, r3, lr
 801d732:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d736:	b29b      	uxth	r3, r3
 801d738:	ebaa 0303 	sub.w	r3, sl, r3
 801d73c:	f8dc a000 	ldr.w	sl, [ip]
 801d740:	0c12      	lsrs	r2, r2, #16
 801d742:	fa13 f38a 	uxtah	r3, r3, sl
 801d746:	fb06 e202 	mla	r2, r6, r2, lr
 801d74a:	9300      	str	r3, [sp, #0]
 801d74c:	9b00      	ldr	r3, [sp, #0]
 801d74e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d752:	b292      	uxth	r2, r2
 801d754:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d75c:	f8bd 3000 	ldrh.w	r3, [sp]
 801d760:	4581      	cmp	r9, r0
 801d762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d766:	f84c 3b04 	str.w	r3, [ip], #4
 801d76a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d76e:	d2db      	bcs.n	801d728 <quorem+0x44>
 801d770:	f855 300b 	ldr.w	r3, [r5, fp]
 801d774:	b92b      	cbnz	r3, 801d782 <quorem+0x9e>
 801d776:	9b01      	ldr	r3, [sp, #4]
 801d778:	3b04      	subs	r3, #4
 801d77a:	429d      	cmp	r5, r3
 801d77c:	461a      	mov	r2, r3
 801d77e:	d32e      	bcc.n	801d7de <quorem+0xfa>
 801d780:	613c      	str	r4, [r7, #16]
 801d782:	4638      	mov	r0, r7
 801d784:	f001 feb6 	bl	801f4f4 <__mcmp>
 801d788:	2800      	cmp	r0, #0
 801d78a:	db24      	blt.n	801d7d6 <quorem+0xf2>
 801d78c:	3601      	adds	r6, #1
 801d78e:	4628      	mov	r0, r5
 801d790:	f04f 0c00 	mov.w	ip, #0
 801d794:	f858 2b04 	ldr.w	r2, [r8], #4
 801d798:	f8d0 e000 	ldr.w	lr, [r0]
 801d79c:	b293      	uxth	r3, r2
 801d79e:	ebac 0303 	sub.w	r3, ip, r3
 801d7a2:	0c12      	lsrs	r2, r2, #16
 801d7a4:	fa13 f38e 	uxtah	r3, r3, lr
 801d7a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d7ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d7b0:	b29b      	uxth	r3, r3
 801d7b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d7b6:	45c1      	cmp	r9, r8
 801d7b8:	f840 3b04 	str.w	r3, [r0], #4
 801d7bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d7c0:	d2e8      	bcs.n	801d794 <quorem+0xb0>
 801d7c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d7c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d7ca:	b922      	cbnz	r2, 801d7d6 <quorem+0xf2>
 801d7cc:	3b04      	subs	r3, #4
 801d7ce:	429d      	cmp	r5, r3
 801d7d0:	461a      	mov	r2, r3
 801d7d2:	d30a      	bcc.n	801d7ea <quorem+0x106>
 801d7d4:	613c      	str	r4, [r7, #16]
 801d7d6:	4630      	mov	r0, r6
 801d7d8:	b003      	add	sp, #12
 801d7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7de:	6812      	ldr	r2, [r2, #0]
 801d7e0:	3b04      	subs	r3, #4
 801d7e2:	2a00      	cmp	r2, #0
 801d7e4:	d1cc      	bne.n	801d780 <quorem+0x9c>
 801d7e6:	3c01      	subs	r4, #1
 801d7e8:	e7c7      	b.n	801d77a <quorem+0x96>
 801d7ea:	6812      	ldr	r2, [r2, #0]
 801d7ec:	3b04      	subs	r3, #4
 801d7ee:	2a00      	cmp	r2, #0
 801d7f0:	d1f0      	bne.n	801d7d4 <quorem+0xf0>
 801d7f2:	3c01      	subs	r4, #1
 801d7f4:	e7eb      	b.n	801d7ce <quorem+0xea>
 801d7f6:	2000      	movs	r0, #0
 801d7f8:	e7ee      	b.n	801d7d8 <quorem+0xf4>
 801d7fa:	0000      	movs	r0, r0
 801d7fc:	0000      	movs	r0, r0
	...

0801d800 <_dtoa_r>:
 801d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d804:	ed2d 8b04 	vpush	{d8-d9}
 801d808:	ec57 6b10 	vmov	r6, r7, d0
 801d80c:	b093      	sub	sp, #76	; 0x4c
 801d80e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d810:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d814:	9106      	str	r1, [sp, #24]
 801d816:	ee10 aa10 	vmov	sl, s0
 801d81a:	4604      	mov	r4, r0
 801d81c:	9209      	str	r2, [sp, #36]	; 0x24
 801d81e:	930c      	str	r3, [sp, #48]	; 0x30
 801d820:	46bb      	mov	fp, r7
 801d822:	b975      	cbnz	r5, 801d842 <_dtoa_r+0x42>
 801d824:	2010      	movs	r0, #16
 801d826:	f7fd feb1 	bl	801b58c <malloc>
 801d82a:	4602      	mov	r2, r0
 801d82c:	6260      	str	r0, [r4, #36]	; 0x24
 801d82e:	b920      	cbnz	r0, 801d83a <_dtoa_r+0x3a>
 801d830:	4ba7      	ldr	r3, [pc, #668]	; (801dad0 <_dtoa_r+0x2d0>)
 801d832:	21ea      	movs	r1, #234	; 0xea
 801d834:	48a7      	ldr	r0, [pc, #668]	; (801dad4 <_dtoa_r+0x2d4>)
 801d836:	f7ff ff37 	bl	801d6a8 <__assert_func>
 801d83a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d83e:	6005      	str	r5, [r0, #0]
 801d840:	60c5      	str	r5, [r0, #12]
 801d842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d844:	6819      	ldr	r1, [r3, #0]
 801d846:	b151      	cbz	r1, 801d85e <_dtoa_r+0x5e>
 801d848:	685a      	ldr	r2, [r3, #4]
 801d84a:	604a      	str	r2, [r1, #4]
 801d84c:	2301      	movs	r3, #1
 801d84e:	4093      	lsls	r3, r2
 801d850:	608b      	str	r3, [r1, #8]
 801d852:	4620      	mov	r0, r4
 801d854:	f001 fbc2 	bl	801efdc <_Bfree>
 801d858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d85a:	2200      	movs	r2, #0
 801d85c:	601a      	str	r2, [r3, #0]
 801d85e:	1e3b      	subs	r3, r7, #0
 801d860:	bfaa      	itet	ge
 801d862:	2300      	movge	r3, #0
 801d864:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d868:	f8c8 3000 	strge.w	r3, [r8]
 801d86c:	4b9a      	ldr	r3, [pc, #616]	; (801dad8 <_dtoa_r+0x2d8>)
 801d86e:	bfbc      	itt	lt
 801d870:	2201      	movlt	r2, #1
 801d872:	f8c8 2000 	strlt.w	r2, [r8]
 801d876:	ea33 030b 	bics.w	r3, r3, fp
 801d87a:	d11b      	bne.n	801d8b4 <_dtoa_r+0xb4>
 801d87c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d87e:	f242 730f 	movw	r3, #9999	; 0x270f
 801d882:	6013      	str	r3, [r2, #0]
 801d884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d888:	4333      	orrs	r3, r6
 801d88a:	f000 8592 	beq.w	801e3b2 <_dtoa_r+0xbb2>
 801d88e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d890:	b963      	cbnz	r3, 801d8ac <_dtoa_r+0xac>
 801d892:	4b92      	ldr	r3, [pc, #584]	; (801dadc <_dtoa_r+0x2dc>)
 801d894:	e022      	b.n	801d8dc <_dtoa_r+0xdc>
 801d896:	4b92      	ldr	r3, [pc, #584]	; (801dae0 <_dtoa_r+0x2e0>)
 801d898:	9301      	str	r3, [sp, #4]
 801d89a:	3308      	adds	r3, #8
 801d89c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d89e:	6013      	str	r3, [r2, #0]
 801d8a0:	9801      	ldr	r0, [sp, #4]
 801d8a2:	b013      	add	sp, #76	; 0x4c
 801d8a4:	ecbd 8b04 	vpop	{d8-d9}
 801d8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8ac:	4b8b      	ldr	r3, [pc, #556]	; (801dadc <_dtoa_r+0x2dc>)
 801d8ae:	9301      	str	r3, [sp, #4]
 801d8b0:	3303      	adds	r3, #3
 801d8b2:	e7f3      	b.n	801d89c <_dtoa_r+0x9c>
 801d8b4:	2200      	movs	r2, #0
 801d8b6:	2300      	movs	r3, #0
 801d8b8:	4650      	mov	r0, sl
 801d8ba:	4659      	mov	r1, fp
 801d8bc:	f7e3 f91c 	bl	8000af8 <__aeabi_dcmpeq>
 801d8c0:	ec4b ab19 	vmov	d9, sl, fp
 801d8c4:	4680      	mov	r8, r0
 801d8c6:	b158      	cbz	r0, 801d8e0 <_dtoa_r+0xe0>
 801d8c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d8ca:	2301      	movs	r3, #1
 801d8cc:	6013      	str	r3, [r2, #0]
 801d8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	f000 856b 	beq.w	801e3ac <_dtoa_r+0xbac>
 801d8d6:	4883      	ldr	r0, [pc, #524]	; (801dae4 <_dtoa_r+0x2e4>)
 801d8d8:	6018      	str	r0, [r3, #0]
 801d8da:	1e43      	subs	r3, r0, #1
 801d8dc:	9301      	str	r3, [sp, #4]
 801d8de:	e7df      	b.n	801d8a0 <_dtoa_r+0xa0>
 801d8e0:	ec4b ab10 	vmov	d0, sl, fp
 801d8e4:	aa10      	add	r2, sp, #64	; 0x40
 801d8e6:	a911      	add	r1, sp, #68	; 0x44
 801d8e8:	4620      	mov	r0, r4
 801d8ea:	f001 ff25 	bl	801f738 <__d2b>
 801d8ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d8f2:	ee08 0a10 	vmov	s16, r0
 801d8f6:	2d00      	cmp	r5, #0
 801d8f8:	f000 8084 	beq.w	801da04 <_dtoa_r+0x204>
 801d8fc:	ee19 3a90 	vmov	r3, s19
 801d900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d904:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d908:	4656      	mov	r6, sl
 801d90a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d90e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d912:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d916:	4b74      	ldr	r3, [pc, #464]	; (801dae8 <_dtoa_r+0x2e8>)
 801d918:	2200      	movs	r2, #0
 801d91a:	4630      	mov	r0, r6
 801d91c:	4639      	mov	r1, r7
 801d91e:	f7e2 fccb 	bl	80002b8 <__aeabi_dsub>
 801d922:	a365      	add	r3, pc, #404	; (adr r3, 801dab8 <_dtoa_r+0x2b8>)
 801d924:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d928:	f7e2 fe7e 	bl	8000628 <__aeabi_dmul>
 801d92c:	a364      	add	r3, pc, #400	; (adr r3, 801dac0 <_dtoa_r+0x2c0>)
 801d92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d932:	f7e2 fcc3 	bl	80002bc <__adddf3>
 801d936:	4606      	mov	r6, r0
 801d938:	4628      	mov	r0, r5
 801d93a:	460f      	mov	r7, r1
 801d93c:	f7e2 fe0a 	bl	8000554 <__aeabi_i2d>
 801d940:	a361      	add	r3, pc, #388	; (adr r3, 801dac8 <_dtoa_r+0x2c8>)
 801d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d946:	f7e2 fe6f 	bl	8000628 <__aeabi_dmul>
 801d94a:	4602      	mov	r2, r0
 801d94c:	460b      	mov	r3, r1
 801d94e:	4630      	mov	r0, r6
 801d950:	4639      	mov	r1, r7
 801d952:	f7e2 fcb3 	bl	80002bc <__adddf3>
 801d956:	4606      	mov	r6, r0
 801d958:	460f      	mov	r7, r1
 801d95a:	f7e3 f915 	bl	8000b88 <__aeabi_d2iz>
 801d95e:	2200      	movs	r2, #0
 801d960:	9000      	str	r0, [sp, #0]
 801d962:	2300      	movs	r3, #0
 801d964:	4630      	mov	r0, r6
 801d966:	4639      	mov	r1, r7
 801d968:	f7e3 f8d0 	bl	8000b0c <__aeabi_dcmplt>
 801d96c:	b150      	cbz	r0, 801d984 <_dtoa_r+0x184>
 801d96e:	9800      	ldr	r0, [sp, #0]
 801d970:	f7e2 fdf0 	bl	8000554 <__aeabi_i2d>
 801d974:	4632      	mov	r2, r6
 801d976:	463b      	mov	r3, r7
 801d978:	f7e3 f8be 	bl	8000af8 <__aeabi_dcmpeq>
 801d97c:	b910      	cbnz	r0, 801d984 <_dtoa_r+0x184>
 801d97e:	9b00      	ldr	r3, [sp, #0]
 801d980:	3b01      	subs	r3, #1
 801d982:	9300      	str	r3, [sp, #0]
 801d984:	9b00      	ldr	r3, [sp, #0]
 801d986:	2b16      	cmp	r3, #22
 801d988:	d85a      	bhi.n	801da40 <_dtoa_r+0x240>
 801d98a:	9a00      	ldr	r2, [sp, #0]
 801d98c:	4b57      	ldr	r3, [pc, #348]	; (801daec <_dtoa_r+0x2ec>)
 801d98e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d992:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d996:	ec51 0b19 	vmov	r0, r1, d9
 801d99a:	f7e3 f8b7 	bl	8000b0c <__aeabi_dcmplt>
 801d99e:	2800      	cmp	r0, #0
 801d9a0:	d050      	beq.n	801da44 <_dtoa_r+0x244>
 801d9a2:	9b00      	ldr	r3, [sp, #0]
 801d9a4:	3b01      	subs	r3, #1
 801d9a6:	9300      	str	r3, [sp, #0]
 801d9a8:	2300      	movs	r3, #0
 801d9aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801d9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9ae:	1b5d      	subs	r5, r3, r5
 801d9b0:	1e6b      	subs	r3, r5, #1
 801d9b2:	9305      	str	r3, [sp, #20]
 801d9b4:	bf45      	ittet	mi
 801d9b6:	f1c5 0301 	rsbmi	r3, r5, #1
 801d9ba:	9304      	strmi	r3, [sp, #16]
 801d9bc:	2300      	movpl	r3, #0
 801d9be:	2300      	movmi	r3, #0
 801d9c0:	bf4c      	ite	mi
 801d9c2:	9305      	strmi	r3, [sp, #20]
 801d9c4:	9304      	strpl	r3, [sp, #16]
 801d9c6:	9b00      	ldr	r3, [sp, #0]
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	db3d      	blt.n	801da48 <_dtoa_r+0x248>
 801d9cc:	9b05      	ldr	r3, [sp, #20]
 801d9ce:	9a00      	ldr	r2, [sp, #0]
 801d9d0:	920a      	str	r2, [sp, #40]	; 0x28
 801d9d2:	4413      	add	r3, r2
 801d9d4:	9305      	str	r3, [sp, #20]
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	9307      	str	r3, [sp, #28]
 801d9da:	9b06      	ldr	r3, [sp, #24]
 801d9dc:	2b09      	cmp	r3, #9
 801d9de:	f200 8089 	bhi.w	801daf4 <_dtoa_r+0x2f4>
 801d9e2:	2b05      	cmp	r3, #5
 801d9e4:	bfc4      	itt	gt
 801d9e6:	3b04      	subgt	r3, #4
 801d9e8:	9306      	strgt	r3, [sp, #24]
 801d9ea:	9b06      	ldr	r3, [sp, #24]
 801d9ec:	f1a3 0302 	sub.w	r3, r3, #2
 801d9f0:	bfcc      	ite	gt
 801d9f2:	2500      	movgt	r5, #0
 801d9f4:	2501      	movle	r5, #1
 801d9f6:	2b03      	cmp	r3, #3
 801d9f8:	f200 8087 	bhi.w	801db0a <_dtoa_r+0x30a>
 801d9fc:	e8df f003 	tbb	[pc, r3]
 801da00:	59383a2d 	.word	0x59383a2d
 801da04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801da08:	441d      	add	r5, r3
 801da0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801da0e:	2b20      	cmp	r3, #32
 801da10:	bfc1      	itttt	gt
 801da12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801da16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801da1a:	fa0b f303 	lslgt.w	r3, fp, r3
 801da1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801da22:	bfda      	itte	le
 801da24:	f1c3 0320 	rsble	r3, r3, #32
 801da28:	fa06 f003 	lslle.w	r0, r6, r3
 801da2c:	4318      	orrgt	r0, r3
 801da2e:	f7e2 fd81 	bl	8000534 <__aeabi_ui2d>
 801da32:	2301      	movs	r3, #1
 801da34:	4606      	mov	r6, r0
 801da36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801da3a:	3d01      	subs	r5, #1
 801da3c:	930e      	str	r3, [sp, #56]	; 0x38
 801da3e:	e76a      	b.n	801d916 <_dtoa_r+0x116>
 801da40:	2301      	movs	r3, #1
 801da42:	e7b2      	b.n	801d9aa <_dtoa_r+0x1aa>
 801da44:	900b      	str	r0, [sp, #44]	; 0x2c
 801da46:	e7b1      	b.n	801d9ac <_dtoa_r+0x1ac>
 801da48:	9b04      	ldr	r3, [sp, #16]
 801da4a:	9a00      	ldr	r2, [sp, #0]
 801da4c:	1a9b      	subs	r3, r3, r2
 801da4e:	9304      	str	r3, [sp, #16]
 801da50:	4253      	negs	r3, r2
 801da52:	9307      	str	r3, [sp, #28]
 801da54:	2300      	movs	r3, #0
 801da56:	930a      	str	r3, [sp, #40]	; 0x28
 801da58:	e7bf      	b.n	801d9da <_dtoa_r+0x1da>
 801da5a:	2300      	movs	r3, #0
 801da5c:	9308      	str	r3, [sp, #32]
 801da5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da60:	2b00      	cmp	r3, #0
 801da62:	dc55      	bgt.n	801db10 <_dtoa_r+0x310>
 801da64:	2301      	movs	r3, #1
 801da66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801da6a:	461a      	mov	r2, r3
 801da6c:	9209      	str	r2, [sp, #36]	; 0x24
 801da6e:	e00c      	b.n	801da8a <_dtoa_r+0x28a>
 801da70:	2301      	movs	r3, #1
 801da72:	e7f3      	b.n	801da5c <_dtoa_r+0x25c>
 801da74:	2300      	movs	r3, #0
 801da76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da78:	9308      	str	r3, [sp, #32]
 801da7a:	9b00      	ldr	r3, [sp, #0]
 801da7c:	4413      	add	r3, r2
 801da7e:	9302      	str	r3, [sp, #8]
 801da80:	3301      	adds	r3, #1
 801da82:	2b01      	cmp	r3, #1
 801da84:	9303      	str	r3, [sp, #12]
 801da86:	bfb8      	it	lt
 801da88:	2301      	movlt	r3, #1
 801da8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801da8c:	2200      	movs	r2, #0
 801da8e:	6042      	str	r2, [r0, #4]
 801da90:	2204      	movs	r2, #4
 801da92:	f102 0614 	add.w	r6, r2, #20
 801da96:	429e      	cmp	r6, r3
 801da98:	6841      	ldr	r1, [r0, #4]
 801da9a:	d93d      	bls.n	801db18 <_dtoa_r+0x318>
 801da9c:	4620      	mov	r0, r4
 801da9e:	f001 fa5d 	bl	801ef5c <_Balloc>
 801daa2:	9001      	str	r0, [sp, #4]
 801daa4:	2800      	cmp	r0, #0
 801daa6:	d13b      	bne.n	801db20 <_dtoa_r+0x320>
 801daa8:	4b11      	ldr	r3, [pc, #68]	; (801daf0 <_dtoa_r+0x2f0>)
 801daaa:	4602      	mov	r2, r0
 801daac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801dab0:	e6c0      	b.n	801d834 <_dtoa_r+0x34>
 801dab2:	2301      	movs	r3, #1
 801dab4:	e7df      	b.n	801da76 <_dtoa_r+0x276>
 801dab6:	bf00      	nop
 801dab8:	636f4361 	.word	0x636f4361
 801dabc:	3fd287a7 	.word	0x3fd287a7
 801dac0:	8b60c8b3 	.word	0x8b60c8b3
 801dac4:	3fc68a28 	.word	0x3fc68a28
 801dac8:	509f79fb 	.word	0x509f79fb
 801dacc:	3fd34413 	.word	0x3fd34413
 801dad0:	08022018 	.word	0x08022018
 801dad4:	080221d6 	.word	0x080221d6
 801dad8:	7ff00000 	.word	0x7ff00000
 801dadc:	080221d2 	.word	0x080221d2
 801dae0:	080221c9 	.word	0x080221c9
 801dae4:	08021f99 	.word	0x08021f99
 801dae8:	3ff80000 	.word	0x3ff80000
 801daec:	080223a8 	.word	0x080223a8
 801daf0:	08022231 	.word	0x08022231
 801daf4:	2501      	movs	r5, #1
 801daf6:	2300      	movs	r3, #0
 801daf8:	9306      	str	r3, [sp, #24]
 801dafa:	9508      	str	r5, [sp, #32]
 801dafc:	f04f 33ff 	mov.w	r3, #4294967295
 801db00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801db04:	2200      	movs	r2, #0
 801db06:	2312      	movs	r3, #18
 801db08:	e7b0      	b.n	801da6c <_dtoa_r+0x26c>
 801db0a:	2301      	movs	r3, #1
 801db0c:	9308      	str	r3, [sp, #32]
 801db0e:	e7f5      	b.n	801dafc <_dtoa_r+0x2fc>
 801db10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801db16:	e7b8      	b.n	801da8a <_dtoa_r+0x28a>
 801db18:	3101      	adds	r1, #1
 801db1a:	6041      	str	r1, [r0, #4]
 801db1c:	0052      	lsls	r2, r2, #1
 801db1e:	e7b8      	b.n	801da92 <_dtoa_r+0x292>
 801db20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801db22:	9a01      	ldr	r2, [sp, #4]
 801db24:	601a      	str	r2, [r3, #0]
 801db26:	9b03      	ldr	r3, [sp, #12]
 801db28:	2b0e      	cmp	r3, #14
 801db2a:	f200 809d 	bhi.w	801dc68 <_dtoa_r+0x468>
 801db2e:	2d00      	cmp	r5, #0
 801db30:	f000 809a 	beq.w	801dc68 <_dtoa_r+0x468>
 801db34:	9b00      	ldr	r3, [sp, #0]
 801db36:	2b00      	cmp	r3, #0
 801db38:	dd32      	ble.n	801dba0 <_dtoa_r+0x3a0>
 801db3a:	4ab7      	ldr	r2, [pc, #732]	; (801de18 <_dtoa_r+0x618>)
 801db3c:	f003 030f 	and.w	r3, r3, #15
 801db40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801db44:	e9d3 8900 	ldrd	r8, r9, [r3]
 801db48:	9b00      	ldr	r3, [sp, #0]
 801db4a:	05d8      	lsls	r0, r3, #23
 801db4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801db50:	d516      	bpl.n	801db80 <_dtoa_r+0x380>
 801db52:	4bb2      	ldr	r3, [pc, #712]	; (801de1c <_dtoa_r+0x61c>)
 801db54:	ec51 0b19 	vmov	r0, r1, d9
 801db58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801db5c:	f7e2 fe8e 	bl	800087c <__aeabi_ddiv>
 801db60:	f007 070f 	and.w	r7, r7, #15
 801db64:	4682      	mov	sl, r0
 801db66:	468b      	mov	fp, r1
 801db68:	2503      	movs	r5, #3
 801db6a:	4eac      	ldr	r6, [pc, #688]	; (801de1c <_dtoa_r+0x61c>)
 801db6c:	b957      	cbnz	r7, 801db84 <_dtoa_r+0x384>
 801db6e:	4642      	mov	r2, r8
 801db70:	464b      	mov	r3, r9
 801db72:	4650      	mov	r0, sl
 801db74:	4659      	mov	r1, fp
 801db76:	f7e2 fe81 	bl	800087c <__aeabi_ddiv>
 801db7a:	4682      	mov	sl, r0
 801db7c:	468b      	mov	fp, r1
 801db7e:	e028      	b.n	801dbd2 <_dtoa_r+0x3d2>
 801db80:	2502      	movs	r5, #2
 801db82:	e7f2      	b.n	801db6a <_dtoa_r+0x36a>
 801db84:	07f9      	lsls	r1, r7, #31
 801db86:	d508      	bpl.n	801db9a <_dtoa_r+0x39a>
 801db88:	4640      	mov	r0, r8
 801db8a:	4649      	mov	r1, r9
 801db8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801db90:	f7e2 fd4a 	bl	8000628 <__aeabi_dmul>
 801db94:	3501      	adds	r5, #1
 801db96:	4680      	mov	r8, r0
 801db98:	4689      	mov	r9, r1
 801db9a:	107f      	asrs	r7, r7, #1
 801db9c:	3608      	adds	r6, #8
 801db9e:	e7e5      	b.n	801db6c <_dtoa_r+0x36c>
 801dba0:	f000 809b 	beq.w	801dcda <_dtoa_r+0x4da>
 801dba4:	9b00      	ldr	r3, [sp, #0]
 801dba6:	4f9d      	ldr	r7, [pc, #628]	; (801de1c <_dtoa_r+0x61c>)
 801dba8:	425e      	negs	r6, r3
 801dbaa:	4b9b      	ldr	r3, [pc, #620]	; (801de18 <_dtoa_r+0x618>)
 801dbac:	f006 020f 	and.w	r2, r6, #15
 801dbb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbb8:	ec51 0b19 	vmov	r0, r1, d9
 801dbbc:	f7e2 fd34 	bl	8000628 <__aeabi_dmul>
 801dbc0:	1136      	asrs	r6, r6, #4
 801dbc2:	4682      	mov	sl, r0
 801dbc4:	468b      	mov	fp, r1
 801dbc6:	2300      	movs	r3, #0
 801dbc8:	2502      	movs	r5, #2
 801dbca:	2e00      	cmp	r6, #0
 801dbcc:	d17a      	bne.n	801dcc4 <_dtoa_r+0x4c4>
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d1d3      	bne.n	801db7a <_dtoa_r+0x37a>
 801dbd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	f000 8082 	beq.w	801dcde <_dtoa_r+0x4de>
 801dbda:	4b91      	ldr	r3, [pc, #580]	; (801de20 <_dtoa_r+0x620>)
 801dbdc:	2200      	movs	r2, #0
 801dbde:	4650      	mov	r0, sl
 801dbe0:	4659      	mov	r1, fp
 801dbe2:	f7e2 ff93 	bl	8000b0c <__aeabi_dcmplt>
 801dbe6:	2800      	cmp	r0, #0
 801dbe8:	d079      	beq.n	801dcde <_dtoa_r+0x4de>
 801dbea:	9b03      	ldr	r3, [sp, #12]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d076      	beq.n	801dcde <_dtoa_r+0x4de>
 801dbf0:	9b02      	ldr	r3, [sp, #8]
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	dd36      	ble.n	801dc64 <_dtoa_r+0x464>
 801dbf6:	9b00      	ldr	r3, [sp, #0]
 801dbf8:	4650      	mov	r0, sl
 801dbfa:	4659      	mov	r1, fp
 801dbfc:	1e5f      	subs	r7, r3, #1
 801dbfe:	2200      	movs	r2, #0
 801dc00:	4b88      	ldr	r3, [pc, #544]	; (801de24 <_dtoa_r+0x624>)
 801dc02:	f7e2 fd11 	bl	8000628 <__aeabi_dmul>
 801dc06:	9e02      	ldr	r6, [sp, #8]
 801dc08:	4682      	mov	sl, r0
 801dc0a:	468b      	mov	fp, r1
 801dc0c:	3501      	adds	r5, #1
 801dc0e:	4628      	mov	r0, r5
 801dc10:	f7e2 fca0 	bl	8000554 <__aeabi_i2d>
 801dc14:	4652      	mov	r2, sl
 801dc16:	465b      	mov	r3, fp
 801dc18:	f7e2 fd06 	bl	8000628 <__aeabi_dmul>
 801dc1c:	4b82      	ldr	r3, [pc, #520]	; (801de28 <_dtoa_r+0x628>)
 801dc1e:	2200      	movs	r2, #0
 801dc20:	f7e2 fb4c 	bl	80002bc <__adddf3>
 801dc24:	46d0      	mov	r8, sl
 801dc26:	46d9      	mov	r9, fp
 801dc28:	4682      	mov	sl, r0
 801dc2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801dc2e:	2e00      	cmp	r6, #0
 801dc30:	d158      	bne.n	801dce4 <_dtoa_r+0x4e4>
 801dc32:	4b7e      	ldr	r3, [pc, #504]	; (801de2c <_dtoa_r+0x62c>)
 801dc34:	2200      	movs	r2, #0
 801dc36:	4640      	mov	r0, r8
 801dc38:	4649      	mov	r1, r9
 801dc3a:	f7e2 fb3d 	bl	80002b8 <__aeabi_dsub>
 801dc3e:	4652      	mov	r2, sl
 801dc40:	465b      	mov	r3, fp
 801dc42:	4680      	mov	r8, r0
 801dc44:	4689      	mov	r9, r1
 801dc46:	f7e2 ff7f 	bl	8000b48 <__aeabi_dcmpgt>
 801dc4a:	2800      	cmp	r0, #0
 801dc4c:	f040 8295 	bne.w	801e17a <_dtoa_r+0x97a>
 801dc50:	4652      	mov	r2, sl
 801dc52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801dc56:	4640      	mov	r0, r8
 801dc58:	4649      	mov	r1, r9
 801dc5a:	f7e2 ff57 	bl	8000b0c <__aeabi_dcmplt>
 801dc5e:	2800      	cmp	r0, #0
 801dc60:	f040 8289 	bne.w	801e176 <_dtoa_r+0x976>
 801dc64:	ec5b ab19 	vmov	sl, fp, d9
 801dc68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	f2c0 8148 	blt.w	801df00 <_dtoa_r+0x700>
 801dc70:	9a00      	ldr	r2, [sp, #0]
 801dc72:	2a0e      	cmp	r2, #14
 801dc74:	f300 8144 	bgt.w	801df00 <_dtoa_r+0x700>
 801dc78:	4b67      	ldr	r3, [pc, #412]	; (801de18 <_dtoa_r+0x618>)
 801dc7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dc7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	f280 80d5 	bge.w	801de34 <_dtoa_r+0x634>
 801dc8a:	9b03      	ldr	r3, [sp, #12]
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	f300 80d1 	bgt.w	801de34 <_dtoa_r+0x634>
 801dc92:	f040 826f 	bne.w	801e174 <_dtoa_r+0x974>
 801dc96:	4b65      	ldr	r3, [pc, #404]	; (801de2c <_dtoa_r+0x62c>)
 801dc98:	2200      	movs	r2, #0
 801dc9a:	4640      	mov	r0, r8
 801dc9c:	4649      	mov	r1, r9
 801dc9e:	f7e2 fcc3 	bl	8000628 <__aeabi_dmul>
 801dca2:	4652      	mov	r2, sl
 801dca4:	465b      	mov	r3, fp
 801dca6:	f7e2 ff45 	bl	8000b34 <__aeabi_dcmpge>
 801dcaa:	9e03      	ldr	r6, [sp, #12]
 801dcac:	4637      	mov	r7, r6
 801dcae:	2800      	cmp	r0, #0
 801dcb0:	f040 8245 	bne.w	801e13e <_dtoa_r+0x93e>
 801dcb4:	9d01      	ldr	r5, [sp, #4]
 801dcb6:	2331      	movs	r3, #49	; 0x31
 801dcb8:	f805 3b01 	strb.w	r3, [r5], #1
 801dcbc:	9b00      	ldr	r3, [sp, #0]
 801dcbe:	3301      	adds	r3, #1
 801dcc0:	9300      	str	r3, [sp, #0]
 801dcc2:	e240      	b.n	801e146 <_dtoa_r+0x946>
 801dcc4:	07f2      	lsls	r2, r6, #31
 801dcc6:	d505      	bpl.n	801dcd4 <_dtoa_r+0x4d4>
 801dcc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dccc:	f7e2 fcac 	bl	8000628 <__aeabi_dmul>
 801dcd0:	3501      	adds	r5, #1
 801dcd2:	2301      	movs	r3, #1
 801dcd4:	1076      	asrs	r6, r6, #1
 801dcd6:	3708      	adds	r7, #8
 801dcd8:	e777      	b.n	801dbca <_dtoa_r+0x3ca>
 801dcda:	2502      	movs	r5, #2
 801dcdc:	e779      	b.n	801dbd2 <_dtoa_r+0x3d2>
 801dcde:	9f00      	ldr	r7, [sp, #0]
 801dce0:	9e03      	ldr	r6, [sp, #12]
 801dce2:	e794      	b.n	801dc0e <_dtoa_r+0x40e>
 801dce4:	9901      	ldr	r1, [sp, #4]
 801dce6:	4b4c      	ldr	r3, [pc, #304]	; (801de18 <_dtoa_r+0x618>)
 801dce8:	4431      	add	r1, r6
 801dcea:	910d      	str	r1, [sp, #52]	; 0x34
 801dcec:	9908      	ldr	r1, [sp, #32]
 801dcee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801dcf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dcf6:	2900      	cmp	r1, #0
 801dcf8:	d043      	beq.n	801dd82 <_dtoa_r+0x582>
 801dcfa:	494d      	ldr	r1, [pc, #308]	; (801de30 <_dtoa_r+0x630>)
 801dcfc:	2000      	movs	r0, #0
 801dcfe:	f7e2 fdbd 	bl	800087c <__aeabi_ddiv>
 801dd02:	4652      	mov	r2, sl
 801dd04:	465b      	mov	r3, fp
 801dd06:	f7e2 fad7 	bl	80002b8 <__aeabi_dsub>
 801dd0a:	9d01      	ldr	r5, [sp, #4]
 801dd0c:	4682      	mov	sl, r0
 801dd0e:	468b      	mov	fp, r1
 801dd10:	4649      	mov	r1, r9
 801dd12:	4640      	mov	r0, r8
 801dd14:	f7e2 ff38 	bl	8000b88 <__aeabi_d2iz>
 801dd18:	4606      	mov	r6, r0
 801dd1a:	f7e2 fc1b 	bl	8000554 <__aeabi_i2d>
 801dd1e:	4602      	mov	r2, r0
 801dd20:	460b      	mov	r3, r1
 801dd22:	4640      	mov	r0, r8
 801dd24:	4649      	mov	r1, r9
 801dd26:	f7e2 fac7 	bl	80002b8 <__aeabi_dsub>
 801dd2a:	3630      	adds	r6, #48	; 0x30
 801dd2c:	f805 6b01 	strb.w	r6, [r5], #1
 801dd30:	4652      	mov	r2, sl
 801dd32:	465b      	mov	r3, fp
 801dd34:	4680      	mov	r8, r0
 801dd36:	4689      	mov	r9, r1
 801dd38:	f7e2 fee8 	bl	8000b0c <__aeabi_dcmplt>
 801dd3c:	2800      	cmp	r0, #0
 801dd3e:	d163      	bne.n	801de08 <_dtoa_r+0x608>
 801dd40:	4642      	mov	r2, r8
 801dd42:	464b      	mov	r3, r9
 801dd44:	4936      	ldr	r1, [pc, #216]	; (801de20 <_dtoa_r+0x620>)
 801dd46:	2000      	movs	r0, #0
 801dd48:	f7e2 fab6 	bl	80002b8 <__aeabi_dsub>
 801dd4c:	4652      	mov	r2, sl
 801dd4e:	465b      	mov	r3, fp
 801dd50:	f7e2 fedc 	bl	8000b0c <__aeabi_dcmplt>
 801dd54:	2800      	cmp	r0, #0
 801dd56:	f040 80b5 	bne.w	801dec4 <_dtoa_r+0x6c4>
 801dd5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd5c:	429d      	cmp	r5, r3
 801dd5e:	d081      	beq.n	801dc64 <_dtoa_r+0x464>
 801dd60:	4b30      	ldr	r3, [pc, #192]	; (801de24 <_dtoa_r+0x624>)
 801dd62:	2200      	movs	r2, #0
 801dd64:	4650      	mov	r0, sl
 801dd66:	4659      	mov	r1, fp
 801dd68:	f7e2 fc5e 	bl	8000628 <__aeabi_dmul>
 801dd6c:	4b2d      	ldr	r3, [pc, #180]	; (801de24 <_dtoa_r+0x624>)
 801dd6e:	4682      	mov	sl, r0
 801dd70:	468b      	mov	fp, r1
 801dd72:	4640      	mov	r0, r8
 801dd74:	4649      	mov	r1, r9
 801dd76:	2200      	movs	r2, #0
 801dd78:	f7e2 fc56 	bl	8000628 <__aeabi_dmul>
 801dd7c:	4680      	mov	r8, r0
 801dd7e:	4689      	mov	r9, r1
 801dd80:	e7c6      	b.n	801dd10 <_dtoa_r+0x510>
 801dd82:	4650      	mov	r0, sl
 801dd84:	4659      	mov	r1, fp
 801dd86:	f7e2 fc4f 	bl	8000628 <__aeabi_dmul>
 801dd8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd8c:	9d01      	ldr	r5, [sp, #4]
 801dd8e:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd90:	4682      	mov	sl, r0
 801dd92:	468b      	mov	fp, r1
 801dd94:	4649      	mov	r1, r9
 801dd96:	4640      	mov	r0, r8
 801dd98:	f7e2 fef6 	bl	8000b88 <__aeabi_d2iz>
 801dd9c:	4606      	mov	r6, r0
 801dd9e:	f7e2 fbd9 	bl	8000554 <__aeabi_i2d>
 801dda2:	3630      	adds	r6, #48	; 0x30
 801dda4:	4602      	mov	r2, r0
 801dda6:	460b      	mov	r3, r1
 801dda8:	4640      	mov	r0, r8
 801ddaa:	4649      	mov	r1, r9
 801ddac:	f7e2 fa84 	bl	80002b8 <__aeabi_dsub>
 801ddb0:	f805 6b01 	strb.w	r6, [r5], #1
 801ddb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ddb6:	429d      	cmp	r5, r3
 801ddb8:	4680      	mov	r8, r0
 801ddba:	4689      	mov	r9, r1
 801ddbc:	f04f 0200 	mov.w	r2, #0
 801ddc0:	d124      	bne.n	801de0c <_dtoa_r+0x60c>
 801ddc2:	4b1b      	ldr	r3, [pc, #108]	; (801de30 <_dtoa_r+0x630>)
 801ddc4:	4650      	mov	r0, sl
 801ddc6:	4659      	mov	r1, fp
 801ddc8:	f7e2 fa78 	bl	80002bc <__adddf3>
 801ddcc:	4602      	mov	r2, r0
 801ddce:	460b      	mov	r3, r1
 801ddd0:	4640      	mov	r0, r8
 801ddd2:	4649      	mov	r1, r9
 801ddd4:	f7e2 feb8 	bl	8000b48 <__aeabi_dcmpgt>
 801ddd8:	2800      	cmp	r0, #0
 801ddda:	d173      	bne.n	801dec4 <_dtoa_r+0x6c4>
 801dddc:	4652      	mov	r2, sl
 801ddde:	465b      	mov	r3, fp
 801dde0:	4913      	ldr	r1, [pc, #76]	; (801de30 <_dtoa_r+0x630>)
 801dde2:	2000      	movs	r0, #0
 801dde4:	f7e2 fa68 	bl	80002b8 <__aeabi_dsub>
 801dde8:	4602      	mov	r2, r0
 801ddea:	460b      	mov	r3, r1
 801ddec:	4640      	mov	r0, r8
 801ddee:	4649      	mov	r1, r9
 801ddf0:	f7e2 fe8c 	bl	8000b0c <__aeabi_dcmplt>
 801ddf4:	2800      	cmp	r0, #0
 801ddf6:	f43f af35 	beq.w	801dc64 <_dtoa_r+0x464>
 801ddfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ddfc:	1e6b      	subs	r3, r5, #1
 801ddfe:	930f      	str	r3, [sp, #60]	; 0x3c
 801de00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801de04:	2b30      	cmp	r3, #48	; 0x30
 801de06:	d0f8      	beq.n	801ddfa <_dtoa_r+0x5fa>
 801de08:	9700      	str	r7, [sp, #0]
 801de0a:	e049      	b.n	801dea0 <_dtoa_r+0x6a0>
 801de0c:	4b05      	ldr	r3, [pc, #20]	; (801de24 <_dtoa_r+0x624>)
 801de0e:	f7e2 fc0b 	bl	8000628 <__aeabi_dmul>
 801de12:	4680      	mov	r8, r0
 801de14:	4689      	mov	r9, r1
 801de16:	e7bd      	b.n	801dd94 <_dtoa_r+0x594>
 801de18:	080223a8 	.word	0x080223a8
 801de1c:	08022380 	.word	0x08022380
 801de20:	3ff00000 	.word	0x3ff00000
 801de24:	40240000 	.word	0x40240000
 801de28:	401c0000 	.word	0x401c0000
 801de2c:	40140000 	.word	0x40140000
 801de30:	3fe00000 	.word	0x3fe00000
 801de34:	9d01      	ldr	r5, [sp, #4]
 801de36:	4656      	mov	r6, sl
 801de38:	465f      	mov	r7, fp
 801de3a:	4642      	mov	r2, r8
 801de3c:	464b      	mov	r3, r9
 801de3e:	4630      	mov	r0, r6
 801de40:	4639      	mov	r1, r7
 801de42:	f7e2 fd1b 	bl	800087c <__aeabi_ddiv>
 801de46:	f7e2 fe9f 	bl	8000b88 <__aeabi_d2iz>
 801de4a:	4682      	mov	sl, r0
 801de4c:	f7e2 fb82 	bl	8000554 <__aeabi_i2d>
 801de50:	4642      	mov	r2, r8
 801de52:	464b      	mov	r3, r9
 801de54:	f7e2 fbe8 	bl	8000628 <__aeabi_dmul>
 801de58:	4602      	mov	r2, r0
 801de5a:	460b      	mov	r3, r1
 801de5c:	4630      	mov	r0, r6
 801de5e:	4639      	mov	r1, r7
 801de60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801de64:	f7e2 fa28 	bl	80002b8 <__aeabi_dsub>
 801de68:	f805 6b01 	strb.w	r6, [r5], #1
 801de6c:	9e01      	ldr	r6, [sp, #4]
 801de6e:	9f03      	ldr	r7, [sp, #12]
 801de70:	1bae      	subs	r6, r5, r6
 801de72:	42b7      	cmp	r7, r6
 801de74:	4602      	mov	r2, r0
 801de76:	460b      	mov	r3, r1
 801de78:	d135      	bne.n	801dee6 <_dtoa_r+0x6e6>
 801de7a:	f7e2 fa1f 	bl	80002bc <__adddf3>
 801de7e:	4642      	mov	r2, r8
 801de80:	464b      	mov	r3, r9
 801de82:	4606      	mov	r6, r0
 801de84:	460f      	mov	r7, r1
 801de86:	f7e2 fe5f 	bl	8000b48 <__aeabi_dcmpgt>
 801de8a:	b9d0      	cbnz	r0, 801dec2 <_dtoa_r+0x6c2>
 801de8c:	4642      	mov	r2, r8
 801de8e:	464b      	mov	r3, r9
 801de90:	4630      	mov	r0, r6
 801de92:	4639      	mov	r1, r7
 801de94:	f7e2 fe30 	bl	8000af8 <__aeabi_dcmpeq>
 801de98:	b110      	cbz	r0, 801dea0 <_dtoa_r+0x6a0>
 801de9a:	f01a 0f01 	tst.w	sl, #1
 801de9e:	d110      	bne.n	801dec2 <_dtoa_r+0x6c2>
 801dea0:	4620      	mov	r0, r4
 801dea2:	ee18 1a10 	vmov	r1, s16
 801dea6:	f001 f899 	bl	801efdc <_Bfree>
 801deaa:	2300      	movs	r3, #0
 801deac:	9800      	ldr	r0, [sp, #0]
 801deae:	702b      	strb	r3, [r5, #0]
 801deb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801deb2:	3001      	adds	r0, #1
 801deb4:	6018      	str	r0, [r3, #0]
 801deb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801deb8:	2b00      	cmp	r3, #0
 801deba:	f43f acf1 	beq.w	801d8a0 <_dtoa_r+0xa0>
 801debe:	601d      	str	r5, [r3, #0]
 801dec0:	e4ee      	b.n	801d8a0 <_dtoa_r+0xa0>
 801dec2:	9f00      	ldr	r7, [sp, #0]
 801dec4:	462b      	mov	r3, r5
 801dec6:	461d      	mov	r5, r3
 801dec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801decc:	2a39      	cmp	r2, #57	; 0x39
 801dece:	d106      	bne.n	801dede <_dtoa_r+0x6de>
 801ded0:	9a01      	ldr	r2, [sp, #4]
 801ded2:	429a      	cmp	r2, r3
 801ded4:	d1f7      	bne.n	801dec6 <_dtoa_r+0x6c6>
 801ded6:	9901      	ldr	r1, [sp, #4]
 801ded8:	2230      	movs	r2, #48	; 0x30
 801deda:	3701      	adds	r7, #1
 801dedc:	700a      	strb	r2, [r1, #0]
 801dede:	781a      	ldrb	r2, [r3, #0]
 801dee0:	3201      	adds	r2, #1
 801dee2:	701a      	strb	r2, [r3, #0]
 801dee4:	e790      	b.n	801de08 <_dtoa_r+0x608>
 801dee6:	4ba6      	ldr	r3, [pc, #664]	; (801e180 <_dtoa_r+0x980>)
 801dee8:	2200      	movs	r2, #0
 801deea:	f7e2 fb9d 	bl	8000628 <__aeabi_dmul>
 801deee:	2200      	movs	r2, #0
 801def0:	2300      	movs	r3, #0
 801def2:	4606      	mov	r6, r0
 801def4:	460f      	mov	r7, r1
 801def6:	f7e2 fdff 	bl	8000af8 <__aeabi_dcmpeq>
 801defa:	2800      	cmp	r0, #0
 801defc:	d09d      	beq.n	801de3a <_dtoa_r+0x63a>
 801defe:	e7cf      	b.n	801dea0 <_dtoa_r+0x6a0>
 801df00:	9a08      	ldr	r2, [sp, #32]
 801df02:	2a00      	cmp	r2, #0
 801df04:	f000 80d7 	beq.w	801e0b6 <_dtoa_r+0x8b6>
 801df08:	9a06      	ldr	r2, [sp, #24]
 801df0a:	2a01      	cmp	r2, #1
 801df0c:	f300 80ba 	bgt.w	801e084 <_dtoa_r+0x884>
 801df10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801df12:	2a00      	cmp	r2, #0
 801df14:	f000 80b2 	beq.w	801e07c <_dtoa_r+0x87c>
 801df18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801df1c:	9e07      	ldr	r6, [sp, #28]
 801df1e:	9d04      	ldr	r5, [sp, #16]
 801df20:	9a04      	ldr	r2, [sp, #16]
 801df22:	441a      	add	r2, r3
 801df24:	9204      	str	r2, [sp, #16]
 801df26:	9a05      	ldr	r2, [sp, #20]
 801df28:	2101      	movs	r1, #1
 801df2a:	441a      	add	r2, r3
 801df2c:	4620      	mov	r0, r4
 801df2e:	9205      	str	r2, [sp, #20]
 801df30:	f001 f956 	bl	801f1e0 <__i2b>
 801df34:	4607      	mov	r7, r0
 801df36:	2d00      	cmp	r5, #0
 801df38:	dd0c      	ble.n	801df54 <_dtoa_r+0x754>
 801df3a:	9b05      	ldr	r3, [sp, #20]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	dd09      	ble.n	801df54 <_dtoa_r+0x754>
 801df40:	42ab      	cmp	r3, r5
 801df42:	9a04      	ldr	r2, [sp, #16]
 801df44:	bfa8      	it	ge
 801df46:	462b      	movge	r3, r5
 801df48:	1ad2      	subs	r2, r2, r3
 801df4a:	9204      	str	r2, [sp, #16]
 801df4c:	9a05      	ldr	r2, [sp, #20]
 801df4e:	1aed      	subs	r5, r5, r3
 801df50:	1ad3      	subs	r3, r2, r3
 801df52:	9305      	str	r3, [sp, #20]
 801df54:	9b07      	ldr	r3, [sp, #28]
 801df56:	b31b      	cbz	r3, 801dfa0 <_dtoa_r+0x7a0>
 801df58:	9b08      	ldr	r3, [sp, #32]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	f000 80af 	beq.w	801e0be <_dtoa_r+0x8be>
 801df60:	2e00      	cmp	r6, #0
 801df62:	dd13      	ble.n	801df8c <_dtoa_r+0x78c>
 801df64:	4639      	mov	r1, r7
 801df66:	4632      	mov	r2, r6
 801df68:	4620      	mov	r0, r4
 801df6a:	f001 f9f9 	bl	801f360 <__pow5mult>
 801df6e:	ee18 2a10 	vmov	r2, s16
 801df72:	4601      	mov	r1, r0
 801df74:	4607      	mov	r7, r0
 801df76:	4620      	mov	r0, r4
 801df78:	f001 f948 	bl	801f20c <__multiply>
 801df7c:	ee18 1a10 	vmov	r1, s16
 801df80:	4680      	mov	r8, r0
 801df82:	4620      	mov	r0, r4
 801df84:	f001 f82a 	bl	801efdc <_Bfree>
 801df88:	ee08 8a10 	vmov	s16, r8
 801df8c:	9b07      	ldr	r3, [sp, #28]
 801df8e:	1b9a      	subs	r2, r3, r6
 801df90:	d006      	beq.n	801dfa0 <_dtoa_r+0x7a0>
 801df92:	ee18 1a10 	vmov	r1, s16
 801df96:	4620      	mov	r0, r4
 801df98:	f001 f9e2 	bl	801f360 <__pow5mult>
 801df9c:	ee08 0a10 	vmov	s16, r0
 801dfa0:	2101      	movs	r1, #1
 801dfa2:	4620      	mov	r0, r4
 801dfa4:	f001 f91c 	bl	801f1e0 <__i2b>
 801dfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	4606      	mov	r6, r0
 801dfae:	f340 8088 	ble.w	801e0c2 <_dtoa_r+0x8c2>
 801dfb2:	461a      	mov	r2, r3
 801dfb4:	4601      	mov	r1, r0
 801dfb6:	4620      	mov	r0, r4
 801dfb8:	f001 f9d2 	bl	801f360 <__pow5mult>
 801dfbc:	9b06      	ldr	r3, [sp, #24]
 801dfbe:	2b01      	cmp	r3, #1
 801dfc0:	4606      	mov	r6, r0
 801dfc2:	f340 8081 	ble.w	801e0c8 <_dtoa_r+0x8c8>
 801dfc6:	f04f 0800 	mov.w	r8, #0
 801dfca:	6933      	ldr	r3, [r6, #16]
 801dfcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801dfd0:	6918      	ldr	r0, [r3, #16]
 801dfd2:	f001 f8b5 	bl	801f140 <__hi0bits>
 801dfd6:	f1c0 0020 	rsb	r0, r0, #32
 801dfda:	9b05      	ldr	r3, [sp, #20]
 801dfdc:	4418      	add	r0, r3
 801dfde:	f010 001f 	ands.w	r0, r0, #31
 801dfe2:	f000 8092 	beq.w	801e10a <_dtoa_r+0x90a>
 801dfe6:	f1c0 0320 	rsb	r3, r0, #32
 801dfea:	2b04      	cmp	r3, #4
 801dfec:	f340 808a 	ble.w	801e104 <_dtoa_r+0x904>
 801dff0:	f1c0 001c 	rsb	r0, r0, #28
 801dff4:	9b04      	ldr	r3, [sp, #16]
 801dff6:	4403      	add	r3, r0
 801dff8:	9304      	str	r3, [sp, #16]
 801dffa:	9b05      	ldr	r3, [sp, #20]
 801dffc:	4403      	add	r3, r0
 801dffe:	4405      	add	r5, r0
 801e000:	9305      	str	r3, [sp, #20]
 801e002:	9b04      	ldr	r3, [sp, #16]
 801e004:	2b00      	cmp	r3, #0
 801e006:	dd07      	ble.n	801e018 <_dtoa_r+0x818>
 801e008:	ee18 1a10 	vmov	r1, s16
 801e00c:	461a      	mov	r2, r3
 801e00e:	4620      	mov	r0, r4
 801e010:	f001 fa00 	bl	801f414 <__lshift>
 801e014:	ee08 0a10 	vmov	s16, r0
 801e018:	9b05      	ldr	r3, [sp, #20]
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	dd05      	ble.n	801e02a <_dtoa_r+0x82a>
 801e01e:	4631      	mov	r1, r6
 801e020:	461a      	mov	r2, r3
 801e022:	4620      	mov	r0, r4
 801e024:	f001 f9f6 	bl	801f414 <__lshift>
 801e028:	4606      	mov	r6, r0
 801e02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d06e      	beq.n	801e10e <_dtoa_r+0x90e>
 801e030:	ee18 0a10 	vmov	r0, s16
 801e034:	4631      	mov	r1, r6
 801e036:	f001 fa5d 	bl	801f4f4 <__mcmp>
 801e03a:	2800      	cmp	r0, #0
 801e03c:	da67      	bge.n	801e10e <_dtoa_r+0x90e>
 801e03e:	9b00      	ldr	r3, [sp, #0]
 801e040:	3b01      	subs	r3, #1
 801e042:	ee18 1a10 	vmov	r1, s16
 801e046:	9300      	str	r3, [sp, #0]
 801e048:	220a      	movs	r2, #10
 801e04a:	2300      	movs	r3, #0
 801e04c:	4620      	mov	r0, r4
 801e04e:	f000 ffe7 	bl	801f020 <__multadd>
 801e052:	9b08      	ldr	r3, [sp, #32]
 801e054:	ee08 0a10 	vmov	s16, r0
 801e058:	2b00      	cmp	r3, #0
 801e05a:	f000 81b1 	beq.w	801e3c0 <_dtoa_r+0xbc0>
 801e05e:	2300      	movs	r3, #0
 801e060:	4639      	mov	r1, r7
 801e062:	220a      	movs	r2, #10
 801e064:	4620      	mov	r0, r4
 801e066:	f000 ffdb 	bl	801f020 <__multadd>
 801e06a:	9b02      	ldr	r3, [sp, #8]
 801e06c:	2b00      	cmp	r3, #0
 801e06e:	4607      	mov	r7, r0
 801e070:	f300 808e 	bgt.w	801e190 <_dtoa_r+0x990>
 801e074:	9b06      	ldr	r3, [sp, #24]
 801e076:	2b02      	cmp	r3, #2
 801e078:	dc51      	bgt.n	801e11e <_dtoa_r+0x91e>
 801e07a:	e089      	b.n	801e190 <_dtoa_r+0x990>
 801e07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e07e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e082:	e74b      	b.n	801df1c <_dtoa_r+0x71c>
 801e084:	9b03      	ldr	r3, [sp, #12]
 801e086:	1e5e      	subs	r6, r3, #1
 801e088:	9b07      	ldr	r3, [sp, #28]
 801e08a:	42b3      	cmp	r3, r6
 801e08c:	bfbf      	itttt	lt
 801e08e:	9b07      	ldrlt	r3, [sp, #28]
 801e090:	9607      	strlt	r6, [sp, #28]
 801e092:	1af2      	sublt	r2, r6, r3
 801e094:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801e096:	bfb6      	itet	lt
 801e098:	189b      	addlt	r3, r3, r2
 801e09a:	1b9e      	subge	r6, r3, r6
 801e09c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801e09e:	9b03      	ldr	r3, [sp, #12]
 801e0a0:	bfb8      	it	lt
 801e0a2:	2600      	movlt	r6, #0
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	bfb7      	itett	lt
 801e0a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801e0ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801e0b0:	1a9d      	sublt	r5, r3, r2
 801e0b2:	2300      	movlt	r3, #0
 801e0b4:	e734      	b.n	801df20 <_dtoa_r+0x720>
 801e0b6:	9e07      	ldr	r6, [sp, #28]
 801e0b8:	9d04      	ldr	r5, [sp, #16]
 801e0ba:	9f08      	ldr	r7, [sp, #32]
 801e0bc:	e73b      	b.n	801df36 <_dtoa_r+0x736>
 801e0be:	9a07      	ldr	r2, [sp, #28]
 801e0c0:	e767      	b.n	801df92 <_dtoa_r+0x792>
 801e0c2:	9b06      	ldr	r3, [sp, #24]
 801e0c4:	2b01      	cmp	r3, #1
 801e0c6:	dc18      	bgt.n	801e0fa <_dtoa_r+0x8fa>
 801e0c8:	f1ba 0f00 	cmp.w	sl, #0
 801e0cc:	d115      	bne.n	801e0fa <_dtoa_r+0x8fa>
 801e0ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e0d2:	b993      	cbnz	r3, 801e0fa <_dtoa_r+0x8fa>
 801e0d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e0d8:	0d1b      	lsrs	r3, r3, #20
 801e0da:	051b      	lsls	r3, r3, #20
 801e0dc:	b183      	cbz	r3, 801e100 <_dtoa_r+0x900>
 801e0de:	9b04      	ldr	r3, [sp, #16]
 801e0e0:	3301      	adds	r3, #1
 801e0e2:	9304      	str	r3, [sp, #16]
 801e0e4:	9b05      	ldr	r3, [sp, #20]
 801e0e6:	3301      	adds	r3, #1
 801e0e8:	9305      	str	r3, [sp, #20]
 801e0ea:	f04f 0801 	mov.w	r8, #1
 801e0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	f47f af6a 	bne.w	801dfca <_dtoa_r+0x7ca>
 801e0f6:	2001      	movs	r0, #1
 801e0f8:	e76f      	b.n	801dfda <_dtoa_r+0x7da>
 801e0fa:	f04f 0800 	mov.w	r8, #0
 801e0fe:	e7f6      	b.n	801e0ee <_dtoa_r+0x8ee>
 801e100:	4698      	mov	r8, r3
 801e102:	e7f4      	b.n	801e0ee <_dtoa_r+0x8ee>
 801e104:	f43f af7d 	beq.w	801e002 <_dtoa_r+0x802>
 801e108:	4618      	mov	r0, r3
 801e10a:	301c      	adds	r0, #28
 801e10c:	e772      	b.n	801dff4 <_dtoa_r+0x7f4>
 801e10e:	9b03      	ldr	r3, [sp, #12]
 801e110:	2b00      	cmp	r3, #0
 801e112:	dc37      	bgt.n	801e184 <_dtoa_r+0x984>
 801e114:	9b06      	ldr	r3, [sp, #24]
 801e116:	2b02      	cmp	r3, #2
 801e118:	dd34      	ble.n	801e184 <_dtoa_r+0x984>
 801e11a:	9b03      	ldr	r3, [sp, #12]
 801e11c:	9302      	str	r3, [sp, #8]
 801e11e:	9b02      	ldr	r3, [sp, #8]
 801e120:	b96b      	cbnz	r3, 801e13e <_dtoa_r+0x93e>
 801e122:	4631      	mov	r1, r6
 801e124:	2205      	movs	r2, #5
 801e126:	4620      	mov	r0, r4
 801e128:	f000 ff7a 	bl	801f020 <__multadd>
 801e12c:	4601      	mov	r1, r0
 801e12e:	4606      	mov	r6, r0
 801e130:	ee18 0a10 	vmov	r0, s16
 801e134:	f001 f9de 	bl	801f4f4 <__mcmp>
 801e138:	2800      	cmp	r0, #0
 801e13a:	f73f adbb 	bgt.w	801dcb4 <_dtoa_r+0x4b4>
 801e13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e140:	9d01      	ldr	r5, [sp, #4]
 801e142:	43db      	mvns	r3, r3
 801e144:	9300      	str	r3, [sp, #0]
 801e146:	f04f 0800 	mov.w	r8, #0
 801e14a:	4631      	mov	r1, r6
 801e14c:	4620      	mov	r0, r4
 801e14e:	f000 ff45 	bl	801efdc <_Bfree>
 801e152:	2f00      	cmp	r7, #0
 801e154:	f43f aea4 	beq.w	801dea0 <_dtoa_r+0x6a0>
 801e158:	f1b8 0f00 	cmp.w	r8, #0
 801e15c:	d005      	beq.n	801e16a <_dtoa_r+0x96a>
 801e15e:	45b8      	cmp	r8, r7
 801e160:	d003      	beq.n	801e16a <_dtoa_r+0x96a>
 801e162:	4641      	mov	r1, r8
 801e164:	4620      	mov	r0, r4
 801e166:	f000 ff39 	bl	801efdc <_Bfree>
 801e16a:	4639      	mov	r1, r7
 801e16c:	4620      	mov	r0, r4
 801e16e:	f000 ff35 	bl	801efdc <_Bfree>
 801e172:	e695      	b.n	801dea0 <_dtoa_r+0x6a0>
 801e174:	2600      	movs	r6, #0
 801e176:	4637      	mov	r7, r6
 801e178:	e7e1      	b.n	801e13e <_dtoa_r+0x93e>
 801e17a:	9700      	str	r7, [sp, #0]
 801e17c:	4637      	mov	r7, r6
 801e17e:	e599      	b.n	801dcb4 <_dtoa_r+0x4b4>
 801e180:	40240000 	.word	0x40240000
 801e184:	9b08      	ldr	r3, [sp, #32]
 801e186:	2b00      	cmp	r3, #0
 801e188:	f000 80ca 	beq.w	801e320 <_dtoa_r+0xb20>
 801e18c:	9b03      	ldr	r3, [sp, #12]
 801e18e:	9302      	str	r3, [sp, #8]
 801e190:	2d00      	cmp	r5, #0
 801e192:	dd05      	ble.n	801e1a0 <_dtoa_r+0x9a0>
 801e194:	4639      	mov	r1, r7
 801e196:	462a      	mov	r2, r5
 801e198:	4620      	mov	r0, r4
 801e19a:	f001 f93b 	bl	801f414 <__lshift>
 801e19e:	4607      	mov	r7, r0
 801e1a0:	f1b8 0f00 	cmp.w	r8, #0
 801e1a4:	d05b      	beq.n	801e25e <_dtoa_r+0xa5e>
 801e1a6:	6879      	ldr	r1, [r7, #4]
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	f000 fed7 	bl	801ef5c <_Balloc>
 801e1ae:	4605      	mov	r5, r0
 801e1b0:	b928      	cbnz	r0, 801e1be <_dtoa_r+0x9be>
 801e1b2:	4b87      	ldr	r3, [pc, #540]	; (801e3d0 <_dtoa_r+0xbd0>)
 801e1b4:	4602      	mov	r2, r0
 801e1b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e1ba:	f7ff bb3b 	b.w	801d834 <_dtoa_r+0x34>
 801e1be:	693a      	ldr	r2, [r7, #16]
 801e1c0:	3202      	adds	r2, #2
 801e1c2:	0092      	lsls	r2, r2, #2
 801e1c4:	f107 010c 	add.w	r1, r7, #12
 801e1c8:	300c      	adds	r0, #12
 801e1ca:	f7fd f9e7 	bl	801b59c <memcpy>
 801e1ce:	2201      	movs	r2, #1
 801e1d0:	4629      	mov	r1, r5
 801e1d2:	4620      	mov	r0, r4
 801e1d4:	f001 f91e 	bl	801f414 <__lshift>
 801e1d8:	9b01      	ldr	r3, [sp, #4]
 801e1da:	f103 0901 	add.w	r9, r3, #1
 801e1de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e1e2:	4413      	add	r3, r2
 801e1e4:	9305      	str	r3, [sp, #20]
 801e1e6:	f00a 0301 	and.w	r3, sl, #1
 801e1ea:	46b8      	mov	r8, r7
 801e1ec:	9304      	str	r3, [sp, #16]
 801e1ee:	4607      	mov	r7, r0
 801e1f0:	4631      	mov	r1, r6
 801e1f2:	ee18 0a10 	vmov	r0, s16
 801e1f6:	f7ff fa75 	bl	801d6e4 <quorem>
 801e1fa:	4641      	mov	r1, r8
 801e1fc:	9002      	str	r0, [sp, #8]
 801e1fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e202:	ee18 0a10 	vmov	r0, s16
 801e206:	f001 f975 	bl	801f4f4 <__mcmp>
 801e20a:	463a      	mov	r2, r7
 801e20c:	9003      	str	r0, [sp, #12]
 801e20e:	4631      	mov	r1, r6
 801e210:	4620      	mov	r0, r4
 801e212:	f001 f98b 	bl	801f52c <__mdiff>
 801e216:	68c2      	ldr	r2, [r0, #12]
 801e218:	f109 3bff 	add.w	fp, r9, #4294967295
 801e21c:	4605      	mov	r5, r0
 801e21e:	bb02      	cbnz	r2, 801e262 <_dtoa_r+0xa62>
 801e220:	4601      	mov	r1, r0
 801e222:	ee18 0a10 	vmov	r0, s16
 801e226:	f001 f965 	bl	801f4f4 <__mcmp>
 801e22a:	4602      	mov	r2, r0
 801e22c:	4629      	mov	r1, r5
 801e22e:	4620      	mov	r0, r4
 801e230:	9207      	str	r2, [sp, #28]
 801e232:	f000 fed3 	bl	801efdc <_Bfree>
 801e236:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e23a:	ea43 0102 	orr.w	r1, r3, r2
 801e23e:	9b04      	ldr	r3, [sp, #16]
 801e240:	430b      	orrs	r3, r1
 801e242:	464d      	mov	r5, r9
 801e244:	d10f      	bne.n	801e266 <_dtoa_r+0xa66>
 801e246:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e24a:	d02a      	beq.n	801e2a2 <_dtoa_r+0xaa2>
 801e24c:	9b03      	ldr	r3, [sp, #12]
 801e24e:	2b00      	cmp	r3, #0
 801e250:	dd02      	ble.n	801e258 <_dtoa_r+0xa58>
 801e252:	9b02      	ldr	r3, [sp, #8]
 801e254:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801e258:	f88b a000 	strb.w	sl, [fp]
 801e25c:	e775      	b.n	801e14a <_dtoa_r+0x94a>
 801e25e:	4638      	mov	r0, r7
 801e260:	e7ba      	b.n	801e1d8 <_dtoa_r+0x9d8>
 801e262:	2201      	movs	r2, #1
 801e264:	e7e2      	b.n	801e22c <_dtoa_r+0xa2c>
 801e266:	9b03      	ldr	r3, [sp, #12]
 801e268:	2b00      	cmp	r3, #0
 801e26a:	db04      	blt.n	801e276 <_dtoa_r+0xa76>
 801e26c:	9906      	ldr	r1, [sp, #24]
 801e26e:	430b      	orrs	r3, r1
 801e270:	9904      	ldr	r1, [sp, #16]
 801e272:	430b      	orrs	r3, r1
 801e274:	d122      	bne.n	801e2bc <_dtoa_r+0xabc>
 801e276:	2a00      	cmp	r2, #0
 801e278:	ddee      	ble.n	801e258 <_dtoa_r+0xa58>
 801e27a:	ee18 1a10 	vmov	r1, s16
 801e27e:	2201      	movs	r2, #1
 801e280:	4620      	mov	r0, r4
 801e282:	f001 f8c7 	bl	801f414 <__lshift>
 801e286:	4631      	mov	r1, r6
 801e288:	ee08 0a10 	vmov	s16, r0
 801e28c:	f001 f932 	bl	801f4f4 <__mcmp>
 801e290:	2800      	cmp	r0, #0
 801e292:	dc03      	bgt.n	801e29c <_dtoa_r+0xa9c>
 801e294:	d1e0      	bne.n	801e258 <_dtoa_r+0xa58>
 801e296:	f01a 0f01 	tst.w	sl, #1
 801e29a:	d0dd      	beq.n	801e258 <_dtoa_r+0xa58>
 801e29c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e2a0:	d1d7      	bne.n	801e252 <_dtoa_r+0xa52>
 801e2a2:	2339      	movs	r3, #57	; 0x39
 801e2a4:	f88b 3000 	strb.w	r3, [fp]
 801e2a8:	462b      	mov	r3, r5
 801e2aa:	461d      	mov	r5, r3
 801e2ac:	3b01      	subs	r3, #1
 801e2ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e2b2:	2a39      	cmp	r2, #57	; 0x39
 801e2b4:	d071      	beq.n	801e39a <_dtoa_r+0xb9a>
 801e2b6:	3201      	adds	r2, #1
 801e2b8:	701a      	strb	r2, [r3, #0]
 801e2ba:	e746      	b.n	801e14a <_dtoa_r+0x94a>
 801e2bc:	2a00      	cmp	r2, #0
 801e2be:	dd07      	ble.n	801e2d0 <_dtoa_r+0xad0>
 801e2c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e2c4:	d0ed      	beq.n	801e2a2 <_dtoa_r+0xaa2>
 801e2c6:	f10a 0301 	add.w	r3, sl, #1
 801e2ca:	f88b 3000 	strb.w	r3, [fp]
 801e2ce:	e73c      	b.n	801e14a <_dtoa_r+0x94a>
 801e2d0:	9b05      	ldr	r3, [sp, #20]
 801e2d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801e2d6:	4599      	cmp	r9, r3
 801e2d8:	d047      	beq.n	801e36a <_dtoa_r+0xb6a>
 801e2da:	ee18 1a10 	vmov	r1, s16
 801e2de:	2300      	movs	r3, #0
 801e2e0:	220a      	movs	r2, #10
 801e2e2:	4620      	mov	r0, r4
 801e2e4:	f000 fe9c 	bl	801f020 <__multadd>
 801e2e8:	45b8      	cmp	r8, r7
 801e2ea:	ee08 0a10 	vmov	s16, r0
 801e2ee:	f04f 0300 	mov.w	r3, #0
 801e2f2:	f04f 020a 	mov.w	r2, #10
 801e2f6:	4641      	mov	r1, r8
 801e2f8:	4620      	mov	r0, r4
 801e2fa:	d106      	bne.n	801e30a <_dtoa_r+0xb0a>
 801e2fc:	f000 fe90 	bl	801f020 <__multadd>
 801e300:	4680      	mov	r8, r0
 801e302:	4607      	mov	r7, r0
 801e304:	f109 0901 	add.w	r9, r9, #1
 801e308:	e772      	b.n	801e1f0 <_dtoa_r+0x9f0>
 801e30a:	f000 fe89 	bl	801f020 <__multadd>
 801e30e:	4639      	mov	r1, r7
 801e310:	4680      	mov	r8, r0
 801e312:	2300      	movs	r3, #0
 801e314:	220a      	movs	r2, #10
 801e316:	4620      	mov	r0, r4
 801e318:	f000 fe82 	bl	801f020 <__multadd>
 801e31c:	4607      	mov	r7, r0
 801e31e:	e7f1      	b.n	801e304 <_dtoa_r+0xb04>
 801e320:	9b03      	ldr	r3, [sp, #12]
 801e322:	9302      	str	r3, [sp, #8]
 801e324:	9d01      	ldr	r5, [sp, #4]
 801e326:	ee18 0a10 	vmov	r0, s16
 801e32a:	4631      	mov	r1, r6
 801e32c:	f7ff f9da 	bl	801d6e4 <quorem>
 801e330:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e334:	9b01      	ldr	r3, [sp, #4]
 801e336:	f805 ab01 	strb.w	sl, [r5], #1
 801e33a:	1aea      	subs	r2, r5, r3
 801e33c:	9b02      	ldr	r3, [sp, #8]
 801e33e:	4293      	cmp	r3, r2
 801e340:	dd09      	ble.n	801e356 <_dtoa_r+0xb56>
 801e342:	ee18 1a10 	vmov	r1, s16
 801e346:	2300      	movs	r3, #0
 801e348:	220a      	movs	r2, #10
 801e34a:	4620      	mov	r0, r4
 801e34c:	f000 fe68 	bl	801f020 <__multadd>
 801e350:	ee08 0a10 	vmov	s16, r0
 801e354:	e7e7      	b.n	801e326 <_dtoa_r+0xb26>
 801e356:	9b02      	ldr	r3, [sp, #8]
 801e358:	2b00      	cmp	r3, #0
 801e35a:	bfc8      	it	gt
 801e35c:	461d      	movgt	r5, r3
 801e35e:	9b01      	ldr	r3, [sp, #4]
 801e360:	bfd8      	it	le
 801e362:	2501      	movle	r5, #1
 801e364:	441d      	add	r5, r3
 801e366:	f04f 0800 	mov.w	r8, #0
 801e36a:	ee18 1a10 	vmov	r1, s16
 801e36e:	2201      	movs	r2, #1
 801e370:	4620      	mov	r0, r4
 801e372:	f001 f84f 	bl	801f414 <__lshift>
 801e376:	4631      	mov	r1, r6
 801e378:	ee08 0a10 	vmov	s16, r0
 801e37c:	f001 f8ba 	bl	801f4f4 <__mcmp>
 801e380:	2800      	cmp	r0, #0
 801e382:	dc91      	bgt.n	801e2a8 <_dtoa_r+0xaa8>
 801e384:	d102      	bne.n	801e38c <_dtoa_r+0xb8c>
 801e386:	f01a 0f01 	tst.w	sl, #1
 801e38a:	d18d      	bne.n	801e2a8 <_dtoa_r+0xaa8>
 801e38c:	462b      	mov	r3, r5
 801e38e:	461d      	mov	r5, r3
 801e390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e394:	2a30      	cmp	r2, #48	; 0x30
 801e396:	d0fa      	beq.n	801e38e <_dtoa_r+0xb8e>
 801e398:	e6d7      	b.n	801e14a <_dtoa_r+0x94a>
 801e39a:	9a01      	ldr	r2, [sp, #4]
 801e39c:	429a      	cmp	r2, r3
 801e39e:	d184      	bne.n	801e2aa <_dtoa_r+0xaaa>
 801e3a0:	9b00      	ldr	r3, [sp, #0]
 801e3a2:	3301      	adds	r3, #1
 801e3a4:	9300      	str	r3, [sp, #0]
 801e3a6:	2331      	movs	r3, #49	; 0x31
 801e3a8:	7013      	strb	r3, [r2, #0]
 801e3aa:	e6ce      	b.n	801e14a <_dtoa_r+0x94a>
 801e3ac:	4b09      	ldr	r3, [pc, #36]	; (801e3d4 <_dtoa_r+0xbd4>)
 801e3ae:	f7ff ba95 	b.w	801d8dc <_dtoa_r+0xdc>
 801e3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	f47f aa6e 	bne.w	801d896 <_dtoa_r+0x96>
 801e3ba:	4b07      	ldr	r3, [pc, #28]	; (801e3d8 <_dtoa_r+0xbd8>)
 801e3bc:	f7ff ba8e 	b.w	801d8dc <_dtoa_r+0xdc>
 801e3c0:	9b02      	ldr	r3, [sp, #8]
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	dcae      	bgt.n	801e324 <_dtoa_r+0xb24>
 801e3c6:	9b06      	ldr	r3, [sp, #24]
 801e3c8:	2b02      	cmp	r3, #2
 801e3ca:	f73f aea8 	bgt.w	801e11e <_dtoa_r+0x91e>
 801e3ce:	e7a9      	b.n	801e324 <_dtoa_r+0xb24>
 801e3d0:	08022231 	.word	0x08022231
 801e3d4:	08021f98 	.word	0x08021f98
 801e3d8:	080221c9 	.word	0x080221c9

0801e3dc <__sflush_r>:
 801e3dc:	898a      	ldrh	r2, [r1, #12]
 801e3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3e2:	4605      	mov	r5, r0
 801e3e4:	0710      	lsls	r0, r2, #28
 801e3e6:	460c      	mov	r4, r1
 801e3e8:	d458      	bmi.n	801e49c <__sflush_r+0xc0>
 801e3ea:	684b      	ldr	r3, [r1, #4]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	dc05      	bgt.n	801e3fc <__sflush_r+0x20>
 801e3f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	dc02      	bgt.n	801e3fc <__sflush_r+0x20>
 801e3f6:	2000      	movs	r0, #0
 801e3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e3fe:	2e00      	cmp	r6, #0
 801e400:	d0f9      	beq.n	801e3f6 <__sflush_r+0x1a>
 801e402:	2300      	movs	r3, #0
 801e404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e408:	682f      	ldr	r7, [r5, #0]
 801e40a:	602b      	str	r3, [r5, #0]
 801e40c:	d032      	beq.n	801e474 <__sflush_r+0x98>
 801e40e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e410:	89a3      	ldrh	r3, [r4, #12]
 801e412:	075a      	lsls	r2, r3, #29
 801e414:	d505      	bpl.n	801e422 <__sflush_r+0x46>
 801e416:	6863      	ldr	r3, [r4, #4]
 801e418:	1ac0      	subs	r0, r0, r3
 801e41a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e41c:	b10b      	cbz	r3, 801e422 <__sflush_r+0x46>
 801e41e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e420:	1ac0      	subs	r0, r0, r3
 801e422:	2300      	movs	r3, #0
 801e424:	4602      	mov	r2, r0
 801e426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e428:	6a21      	ldr	r1, [r4, #32]
 801e42a:	4628      	mov	r0, r5
 801e42c:	47b0      	blx	r6
 801e42e:	1c43      	adds	r3, r0, #1
 801e430:	89a3      	ldrh	r3, [r4, #12]
 801e432:	d106      	bne.n	801e442 <__sflush_r+0x66>
 801e434:	6829      	ldr	r1, [r5, #0]
 801e436:	291d      	cmp	r1, #29
 801e438:	d82c      	bhi.n	801e494 <__sflush_r+0xb8>
 801e43a:	4a2a      	ldr	r2, [pc, #168]	; (801e4e4 <__sflush_r+0x108>)
 801e43c:	40ca      	lsrs	r2, r1
 801e43e:	07d6      	lsls	r6, r2, #31
 801e440:	d528      	bpl.n	801e494 <__sflush_r+0xb8>
 801e442:	2200      	movs	r2, #0
 801e444:	6062      	str	r2, [r4, #4]
 801e446:	04d9      	lsls	r1, r3, #19
 801e448:	6922      	ldr	r2, [r4, #16]
 801e44a:	6022      	str	r2, [r4, #0]
 801e44c:	d504      	bpl.n	801e458 <__sflush_r+0x7c>
 801e44e:	1c42      	adds	r2, r0, #1
 801e450:	d101      	bne.n	801e456 <__sflush_r+0x7a>
 801e452:	682b      	ldr	r3, [r5, #0]
 801e454:	b903      	cbnz	r3, 801e458 <__sflush_r+0x7c>
 801e456:	6560      	str	r0, [r4, #84]	; 0x54
 801e458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e45a:	602f      	str	r7, [r5, #0]
 801e45c:	2900      	cmp	r1, #0
 801e45e:	d0ca      	beq.n	801e3f6 <__sflush_r+0x1a>
 801e460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e464:	4299      	cmp	r1, r3
 801e466:	d002      	beq.n	801e46e <__sflush_r+0x92>
 801e468:	4628      	mov	r0, r5
 801e46a:	f7fd f8c7 	bl	801b5fc <_free_r>
 801e46e:	2000      	movs	r0, #0
 801e470:	6360      	str	r0, [r4, #52]	; 0x34
 801e472:	e7c1      	b.n	801e3f8 <__sflush_r+0x1c>
 801e474:	6a21      	ldr	r1, [r4, #32]
 801e476:	2301      	movs	r3, #1
 801e478:	4628      	mov	r0, r5
 801e47a:	47b0      	blx	r6
 801e47c:	1c41      	adds	r1, r0, #1
 801e47e:	d1c7      	bne.n	801e410 <__sflush_r+0x34>
 801e480:	682b      	ldr	r3, [r5, #0]
 801e482:	2b00      	cmp	r3, #0
 801e484:	d0c4      	beq.n	801e410 <__sflush_r+0x34>
 801e486:	2b1d      	cmp	r3, #29
 801e488:	d001      	beq.n	801e48e <__sflush_r+0xb2>
 801e48a:	2b16      	cmp	r3, #22
 801e48c:	d101      	bne.n	801e492 <__sflush_r+0xb6>
 801e48e:	602f      	str	r7, [r5, #0]
 801e490:	e7b1      	b.n	801e3f6 <__sflush_r+0x1a>
 801e492:	89a3      	ldrh	r3, [r4, #12]
 801e494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e498:	81a3      	strh	r3, [r4, #12]
 801e49a:	e7ad      	b.n	801e3f8 <__sflush_r+0x1c>
 801e49c:	690f      	ldr	r7, [r1, #16]
 801e49e:	2f00      	cmp	r7, #0
 801e4a0:	d0a9      	beq.n	801e3f6 <__sflush_r+0x1a>
 801e4a2:	0793      	lsls	r3, r2, #30
 801e4a4:	680e      	ldr	r6, [r1, #0]
 801e4a6:	bf08      	it	eq
 801e4a8:	694b      	ldreq	r3, [r1, #20]
 801e4aa:	600f      	str	r7, [r1, #0]
 801e4ac:	bf18      	it	ne
 801e4ae:	2300      	movne	r3, #0
 801e4b0:	eba6 0807 	sub.w	r8, r6, r7
 801e4b4:	608b      	str	r3, [r1, #8]
 801e4b6:	f1b8 0f00 	cmp.w	r8, #0
 801e4ba:	dd9c      	ble.n	801e3f6 <__sflush_r+0x1a>
 801e4bc:	6a21      	ldr	r1, [r4, #32]
 801e4be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e4c0:	4643      	mov	r3, r8
 801e4c2:	463a      	mov	r2, r7
 801e4c4:	4628      	mov	r0, r5
 801e4c6:	47b0      	blx	r6
 801e4c8:	2800      	cmp	r0, #0
 801e4ca:	dc06      	bgt.n	801e4da <__sflush_r+0xfe>
 801e4cc:	89a3      	ldrh	r3, [r4, #12]
 801e4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e4d2:	81a3      	strh	r3, [r4, #12]
 801e4d4:	f04f 30ff 	mov.w	r0, #4294967295
 801e4d8:	e78e      	b.n	801e3f8 <__sflush_r+0x1c>
 801e4da:	4407      	add	r7, r0
 801e4dc:	eba8 0800 	sub.w	r8, r8, r0
 801e4e0:	e7e9      	b.n	801e4b6 <__sflush_r+0xda>
 801e4e2:	bf00      	nop
 801e4e4:	20400001 	.word	0x20400001

0801e4e8 <_fflush_r>:
 801e4e8:	b538      	push	{r3, r4, r5, lr}
 801e4ea:	690b      	ldr	r3, [r1, #16]
 801e4ec:	4605      	mov	r5, r0
 801e4ee:	460c      	mov	r4, r1
 801e4f0:	b913      	cbnz	r3, 801e4f8 <_fflush_r+0x10>
 801e4f2:	2500      	movs	r5, #0
 801e4f4:	4628      	mov	r0, r5
 801e4f6:	bd38      	pop	{r3, r4, r5, pc}
 801e4f8:	b118      	cbz	r0, 801e502 <_fflush_r+0x1a>
 801e4fa:	6983      	ldr	r3, [r0, #24]
 801e4fc:	b90b      	cbnz	r3, 801e502 <_fflush_r+0x1a>
 801e4fe:	f000 f887 	bl	801e610 <__sinit>
 801e502:	4b14      	ldr	r3, [pc, #80]	; (801e554 <_fflush_r+0x6c>)
 801e504:	429c      	cmp	r4, r3
 801e506:	d11b      	bne.n	801e540 <_fflush_r+0x58>
 801e508:	686c      	ldr	r4, [r5, #4]
 801e50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d0ef      	beq.n	801e4f2 <_fflush_r+0xa>
 801e512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e514:	07d0      	lsls	r0, r2, #31
 801e516:	d404      	bmi.n	801e522 <_fflush_r+0x3a>
 801e518:	0599      	lsls	r1, r3, #22
 801e51a:	d402      	bmi.n	801e522 <_fflush_r+0x3a>
 801e51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e51e:	f7fd f832 	bl	801b586 <__retarget_lock_acquire_recursive>
 801e522:	4628      	mov	r0, r5
 801e524:	4621      	mov	r1, r4
 801e526:	f7ff ff59 	bl	801e3dc <__sflush_r>
 801e52a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e52c:	07da      	lsls	r2, r3, #31
 801e52e:	4605      	mov	r5, r0
 801e530:	d4e0      	bmi.n	801e4f4 <_fflush_r+0xc>
 801e532:	89a3      	ldrh	r3, [r4, #12]
 801e534:	059b      	lsls	r3, r3, #22
 801e536:	d4dd      	bmi.n	801e4f4 <_fflush_r+0xc>
 801e538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e53a:	f7fd f825 	bl	801b588 <__retarget_lock_release_recursive>
 801e53e:	e7d9      	b.n	801e4f4 <_fflush_r+0xc>
 801e540:	4b05      	ldr	r3, [pc, #20]	; (801e558 <_fflush_r+0x70>)
 801e542:	429c      	cmp	r4, r3
 801e544:	d101      	bne.n	801e54a <_fflush_r+0x62>
 801e546:	68ac      	ldr	r4, [r5, #8]
 801e548:	e7df      	b.n	801e50a <_fflush_r+0x22>
 801e54a:	4b04      	ldr	r3, [pc, #16]	; (801e55c <_fflush_r+0x74>)
 801e54c:	429c      	cmp	r4, r3
 801e54e:	bf08      	it	eq
 801e550:	68ec      	ldreq	r4, [r5, #12]
 801e552:	e7da      	b.n	801e50a <_fflush_r+0x22>
 801e554:	08022264 	.word	0x08022264
 801e558:	08022284 	.word	0x08022284
 801e55c:	08022244 	.word	0x08022244

0801e560 <std>:
 801e560:	2300      	movs	r3, #0
 801e562:	b510      	push	{r4, lr}
 801e564:	4604      	mov	r4, r0
 801e566:	e9c0 3300 	strd	r3, r3, [r0]
 801e56a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e56e:	6083      	str	r3, [r0, #8]
 801e570:	8181      	strh	r1, [r0, #12]
 801e572:	6643      	str	r3, [r0, #100]	; 0x64
 801e574:	81c2      	strh	r2, [r0, #14]
 801e576:	6183      	str	r3, [r0, #24]
 801e578:	4619      	mov	r1, r3
 801e57a:	2208      	movs	r2, #8
 801e57c:	305c      	adds	r0, #92	; 0x5c
 801e57e:	f7fd f835 	bl	801b5ec <memset>
 801e582:	4b05      	ldr	r3, [pc, #20]	; (801e598 <std+0x38>)
 801e584:	6263      	str	r3, [r4, #36]	; 0x24
 801e586:	4b05      	ldr	r3, [pc, #20]	; (801e59c <std+0x3c>)
 801e588:	62a3      	str	r3, [r4, #40]	; 0x28
 801e58a:	4b05      	ldr	r3, [pc, #20]	; (801e5a0 <std+0x40>)
 801e58c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e58e:	4b05      	ldr	r3, [pc, #20]	; (801e5a4 <std+0x44>)
 801e590:	6224      	str	r4, [r4, #32]
 801e592:	6323      	str	r3, [r4, #48]	; 0x30
 801e594:	bd10      	pop	{r4, pc}
 801e596:	bf00      	nop
 801e598:	0801fe89 	.word	0x0801fe89
 801e59c:	0801feab 	.word	0x0801feab
 801e5a0:	0801fee3 	.word	0x0801fee3
 801e5a4:	0801ff07 	.word	0x0801ff07

0801e5a8 <_cleanup_r>:
 801e5a8:	4901      	ldr	r1, [pc, #4]	; (801e5b0 <_cleanup_r+0x8>)
 801e5aa:	f000 b8c1 	b.w	801e730 <_fwalk_reent>
 801e5ae:	bf00      	nop
 801e5b0:	0801e4e9 	.word	0x0801e4e9

0801e5b4 <__sfmoreglue>:
 801e5b4:	b570      	push	{r4, r5, r6, lr}
 801e5b6:	2268      	movs	r2, #104	; 0x68
 801e5b8:	1e4d      	subs	r5, r1, #1
 801e5ba:	4355      	muls	r5, r2
 801e5bc:	460e      	mov	r6, r1
 801e5be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e5c2:	f7fd f887 	bl	801b6d4 <_malloc_r>
 801e5c6:	4604      	mov	r4, r0
 801e5c8:	b140      	cbz	r0, 801e5dc <__sfmoreglue+0x28>
 801e5ca:	2100      	movs	r1, #0
 801e5cc:	e9c0 1600 	strd	r1, r6, [r0]
 801e5d0:	300c      	adds	r0, #12
 801e5d2:	60a0      	str	r0, [r4, #8]
 801e5d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e5d8:	f7fd f808 	bl	801b5ec <memset>
 801e5dc:	4620      	mov	r0, r4
 801e5de:	bd70      	pop	{r4, r5, r6, pc}

0801e5e0 <__sfp_lock_acquire>:
 801e5e0:	4801      	ldr	r0, [pc, #4]	; (801e5e8 <__sfp_lock_acquire+0x8>)
 801e5e2:	f7fc bfd0 	b.w	801b586 <__retarget_lock_acquire_recursive>
 801e5e6:	bf00      	nop
 801e5e8:	20003611 	.word	0x20003611

0801e5ec <__sfp_lock_release>:
 801e5ec:	4801      	ldr	r0, [pc, #4]	; (801e5f4 <__sfp_lock_release+0x8>)
 801e5ee:	f7fc bfcb 	b.w	801b588 <__retarget_lock_release_recursive>
 801e5f2:	bf00      	nop
 801e5f4:	20003611 	.word	0x20003611

0801e5f8 <__sinit_lock_acquire>:
 801e5f8:	4801      	ldr	r0, [pc, #4]	; (801e600 <__sinit_lock_acquire+0x8>)
 801e5fa:	f7fc bfc4 	b.w	801b586 <__retarget_lock_acquire_recursive>
 801e5fe:	bf00      	nop
 801e600:	20003612 	.word	0x20003612

0801e604 <__sinit_lock_release>:
 801e604:	4801      	ldr	r0, [pc, #4]	; (801e60c <__sinit_lock_release+0x8>)
 801e606:	f7fc bfbf 	b.w	801b588 <__retarget_lock_release_recursive>
 801e60a:	bf00      	nop
 801e60c:	20003612 	.word	0x20003612

0801e610 <__sinit>:
 801e610:	b510      	push	{r4, lr}
 801e612:	4604      	mov	r4, r0
 801e614:	f7ff fff0 	bl	801e5f8 <__sinit_lock_acquire>
 801e618:	69a3      	ldr	r3, [r4, #24]
 801e61a:	b11b      	cbz	r3, 801e624 <__sinit+0x14>
 801e61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e620:	f7ff bff0 	b.w	801e604 <__sinit_lock_release>
 801e624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e628:	6523      	str	r3, [r4, #80]	; 0x50
 801e62a:	4b13      	ldr	r3, [pc, #76]	; (801e678 <__sinit+0x68>)
 801e62c:	4a13      	ldr	r2, [pc, #76]	; (801e67c <__sinit+0x6c>)
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	62a2      	str	r2, [r4, #40]	; 0x28
 801e632:	42a3      	cmp	r3, r4
 801e634:	bf04      	itt	eq
 801e636:	2301      	moveq	r3, #1
 801e638:	61a3      	streq	r3, [r4, #24]
 801e63a:	4620      	mov	r0, r4
 801e63c:	f000 f820 	bl	801e680 <__sfp>
 801e640:	6060      	str	r0, [r4, #4]
 801e642:	4620      	mov	r0, r4
 801e644:	f000 f81c 	bl	801e680 <__sfp>
 801e648:	60a0      	str	r0, [r4, #8]
 801e64a:	4620      	mov	r0, r4
 801e64c:	f000 f818 	bl	801e680 <__sfp>
 801e650:	2200      	movs	r2, #0
 801e652:	60e0      	str	r0, [r4, #12]
 801e654:	2104      	movs	r1, #4
 801e656:	6860      	ldr	r0, [r4, #4]
 801e658:	f7ff ff82 	bl	801e560 <std>
 801e65c:	68a0      	ldr	r0, [r4, #8]
 801e65e:	2201      	movs	r2, #1
 801e660:	2109      	movs	r1, #9
 801e662:	f7ff ff7d 	bl	801e560 <std>
 801e666:	68e0      	ldr	r0, [r4, #12]
 801e668:	2202      	movs	r2, #2
 801e66a:	2112      	movs	r1, #18
 801e66c:	f7ff ff78 	bl	801e560 <std>
 801e670:	2301      	movs	r3, #1
 801e672:	61a3      	str	r3, [r4, #24]
 801e674:	e7d2      	b.n	801e61c <__sinit+0xc>
 801e676:	bf00      	nop
 801e678:	08021f84 	.word	0x08021f84
 801e67c:	0801e5a9 	.word	0x0801e5a9

0801e680 <__sfp>:
 801e680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e682:	4607      	mov	r7, r0
 801e684:	f7ff ffac 	bl	801e5e0 <__sfp_lock_acquire>
 801e688:	4b1e      	ldr	r3, [pc, #120]	; (801e704 <__sfp+0x84>)
 801e68a:	681e      	ldr	r6, [r3, #0]
 801e68c:	69b3      	ldr	r3, [r6, #24]
 801e68e:	b913      	cbnz	r3, 801e696 <__sfp+0x16>
 801e690:	4630      	mov	r0, r6
 801e692:	f7ff ffbd 	bl	801e610 <__sinit>
 801e696:	3648      	adds	r6, #72	; 0x48
 801e698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e69c:	3b01      	subs	r3, #1
 801e69e:	d503      	bpl.n	801e6a8 <__sfp+0x28>
 801e6a0:	6833      	ldr	r3, [r6, #0]
 801e6a2:	b30b      	cbz	r3, 801e6e8 <__sfp+0x68>
 801e6a4:	6836      	ldr	r6, [r6, #0]
 801e6a6:	e7f7      	b.n	801e698 <__sfp+0x18>
 801e6a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e6ac:	b9d5      	cbnz	r5, 801e6e4 <__sfp+0x64>
 801e6ae:	4b16      	ldr	r3, [pc, #88]	; (801e708 <__sfp+0x88>)
 801e6b0:	60e3      	str	r3, [r4, #12]
 801e6b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e6b6:	6665      	str	r5, [r4, #100]	; 0x64
 801e6b8:	f7fc ff64 	bl	801b584 <__retarget_lock_init_recursive>
 801e6bc:	f7ff ff96 	bl	801e5ec <__sfp_lock_release>
 801e6c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e6c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e6c8:	6025      	str	r5, [r4, #0]
 801e6ca:	61a5      	str	r5, [r4, #24]
 801e6cc:	2208      	movs	r2, #8
 801e6ce:	4629      	mov	r1, r5
 801e6d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e6d4:	f7fc ff8a 	bl	801b5ec <memset>
 801e6d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e6dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e6e0:	4620      	mov	r0, r4
 801e6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e6e4:	3468      	adds	r4, #104	; 0x68
 801e6e6:	e7d9      	b.n	801e69c <__sfp+0x1c>
 801e6e8:	2104      	movs	r1, #4
 801e6ea:	4638      	mov	r0, r7
 801e6ec:	f7ff ff62 	bl	801e5b4 <__sfmoreglue>
 801e6f0:	4604      	mov	r4, r0
 801e6f2:	6030      	str	r0, [r6, #0]
 801e6f4:	2800      	cmp	r0, #0
 801e6f6:	d1d5      	bne.n	801e6a4 <__sfp+0x24>
 801e6f8:	f7ff ff78 	bl	801e5ec <__sfp_lock_release>
 801e6fc:	230c      	movs	r3, #12
 801e6fe:	603b      	str	r3, [r7, #0]
 801e700:	e7ee      	b.n	801e6e0 <__sfp+0x60>
 801e702:	bf00      	nop
 801e704:	08021f84 	.word	0x08021f84
 801e708:	ffff0001 	.word	0xffff0001

0801e70c <fiprintf>:
 801e70c:	b40e      	push	{r1, r2, r3}
 801e70e:	b503      	push	{r0, r1, lr}
 801e710:	4601      	mov	r1, r0
 801e712:	ab03      	add	r3, sp, #12
 801e714:	4805      	ldr	r0, [pc, #20]	; (801e72c <fiprintf+0x20>)
 801e716:	f853 2b04 	ldr.w	r2, [r3], #4
 801e71a:	6800      	ldr	r0, [r0, #0]
 801e71c:	9301      	str	r3, [sp, #4]
 801e71e:	f001 fa79 	bl	801fc14 <_vfiprintf_r>
 801e722:	b002      	add	sp, #8
 801e724:	f85d eb04 	ldr.w	lr, [sp], #4
 801e728:	b003      	add	sp, #12
 801e72a:	4770      	bx	lr
 801e72c:	20000144 	.word	0x20000144

0801e730 <_fwalk_reent>:
 801e730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e734:	4606      	mov	r6, r0
 801e736:	4688      	mov	r8, r1
 801e738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e73c:	2700      	movs	r7, #0
 801e73e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e742:	f1b9 0901 	subs.w	r9, r9, #1
 801e746:	d505      	bpl.n	801e754 <_fwalk_reent+0x24>
 801e748:	6824      	ldr	r4, [r4, #0]
 801e74a:	2c00      	cmp	r4, #0
 801e74c:	d1f7      	bne.n	801e73e <_fwalk_reent+0xe>
 801e74e:	4638      	mov	r0, r7
 801e750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e754:	89ab      	ldrh	r3, [r5, #12]
 801e756:	2b01      	cmp	r3, #1
 801e758:	d907      	bls.n	801e76a <_fwalk_reent+0x3a>
 801e75a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e75e:	3301      	adds	r3, #1
 801e760:	d003      	beq.n	801e76a <_fwalk_reent+0x3a>
 801e762:	4629      	mov	r1, r5
 801e764:	4630      	mov	r0, r6
 801e766:	47c0      	blx	r8
 801e768:	4307      	orrs	r7, r0
 801e76a:	3568      	adds	r5, #104	; 0x68
 801e76c:	e7e9      	b.n	801e742 <_fwalk_reent+0x12>

0801e76e <rshift>:
 801e76e:	6903      	ldr	r3, [r0, #16]
 801e770:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e778:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e77c:	f100 0414 	add.w	r4, r0, #20
 801e780:	dd45      	ble.n	801e80e <rshift+0xa0>
 801e782:	f011 011f 	ands.w	r1, r1, #31
 801e786:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e78a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e78e:	d10c      	bne.n	801e7aa <rshift+0x3c>
 801e790:	f100 0710 	add.w	r7, r0, #16
 801e794:	4629      	mov	r1, r5
 801e796:	42b1      	cmp	r1, r6
 801e798:	d334      	bcc.n	801e804 <rshift+0x96>
 801e79a:	1a9b      	subs	r3, r3, r2
 801e79c:	009b      	lsls	r3, r3, #2
 801e79e:	1eea      	subs	r2, r5, #3
 801e7a0:	4296      	cmp	r6, r2
 801e7a2:	bf38      	it	cc
 801e7a4:	2300      	movcc	r3, #0
 801e7a6:	4423      	add	r3, r4
 801e7a8:	e015      	b.n	801e7d6 <rshift+0x68>
 801e7aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e7ae:	f1c1 0820 	rsb	r8, r1, #32
 801e7b2:	40cf      	lsrs	r7, r1
 801e7b4:	f105 0e04 	add.w	lr, r5, #4
 801e7b8:	46a1      	mov	r9, r4
 801e7ba:	4576      	cmp	r6, lr
 801e7bc:	46f4      	mov	ip, lr
 801e7be:	d815      	bhi.n	801e7ec <rshift+0x7e>
 801e7c0:	1a9a      	subs	r2, r3, r2
 801e7c2:	0092      	lsls	r2, r2, #2
 801e7c4:	3a04      	subs	r2, #4
 801e7c6:	3501      	adds	r5, #1
 801e7c8:	42ae      	cmp	r6, r5
 801e7ca:	bf38      	it	cc
 801e7cc:	2200      	movcc	r2, #0
 801e7ce:	18a3      	adds	r3, r4, r2
 801e7d0:	50a7      	str	r7, [r4, r2]
 801e7d2:	b107      	cbz	r7, 801e7d6 <rshift+0x68>
 801e7d4:	3304      	adds	r3, #4
 801e7d6:	1b1a      	subs	r2, r3, r4
 801e7d8:	42a3      	cmp	r3, r4
 801e7da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e7de:	bf08      	it	eq
 801e7e0:	2300      	moveq	r3, #0
 801e7e2:	6102      	str	r2, [r0, #16]
 801e7e4:	bf08      	it	eq
 801e7e6:	6143      	streq	r3, [r0, #20]
 801e7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7ec:	f8dc c000 	ldr.w	ip, [ip]
 801e7f0:	fa0c fc08 	lsl.w	ip, ip, r8
 801e7f4:	ea4c 0707 	orr.w	r7, ip, r7
 801e7f8:	f849 7b04 	str.w	r7, [r9], #4
 801e7fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e800:	40cf      	lsrs	r7, r1
 801e802:	e7da      	b.n	801e7ba <rshift+0x4c>
 801e804:	f851 cb04 	ldr.w	ip, [r1], #4
 801e808:	f847 cf04 	str.w	ip, [r7, #4]!
 801e80c:	e7c3      	b.n	801e796 <rshift+0x28>
 801e80e:	4623      	mov	r3, r4
 801e810:	e7e1      	b.n	801e7d6 <rshift+0x68>

0801e812 <__hexdig_fun>:
 801e812:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e816:	2b09      	cmp	r3, #9
 801e818:	d802      	bhi.n	801e820 <__hexdig_fun+0xe>
 801e81a:	3820      	subs	r0, #32
 801e81c:	b2c0      	uxtb	r0, r0
 801e81e:	4770      	bx	lr
 801e820:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e824:	2b05      	cmp	r3, #5
 801e826:	d801      	bhi.n	801e82c <__hexdig_fun+0x1a>
 801e828:	3847      	subs	r0, #71	; 0x47
 801e82a:	e7f7      	b.n	801e81c <__hexdig_fun+0xa>
 801e82c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e830:	2b05      	cmp	r3, #5
 801e832:	d801      	bhi.n	801e838 <__hexdig_fun+0x26>
 801e834:	3827      	subs	r0, #39	; 0x27
 801e836:	e7f1      	b.n	801e81c <__hexdig_fun+0xa>
 801e838:	2000      	movs	r0, #0
 801e83a:	4770      	bx	lr

0801e83c <__gethex>:
 801e83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e840:	ed2d 8b02 	vpush	{d8}
 801e844:	b089      	sub	sp, #36	; 0x24
 801e846:	ee08 0a10 	vmov	s16, r0
 801e84a:	9304      	str	r3, [sp, #16]
 801e84c:	4bb4      	ldr	r3, [pc, #720]	; (801eb20 <__gethex+0x2e4>)
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	9301      	str	r3, [sp, #4]
 801e852:	4618      	mov	r0, r3
 801e854:	468b      	mov	fp, r1
 801e856:	4690      	mov	r8, r2
 801e858:	f7e1 fccc 	bl	80001f4 <strlen>
 801e85c:	9b01      	ldr	r3, [sp, #4]
 801e85e:	f8db 2000 	ldr.w	r2, [fp]
 801e862:	4403      	add	r3, r0
 801e864:	4682      	mov	sl, r0
 801e866:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e86a:	9305      	str	r3, [sp, #20]
 801e86c:	1c93      	adds	r3, r2, #2
 801e86e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e872:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e876:	32fe      	adds	r2, #254	; 0xfe
 801e878:	18d1      	adds	r1, r2, r3
 801e87a:	461f      	mov	r7, r3
 801e87c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e880:	9100      	str	r1, [sp, #0]
 801e882:	2830      	cmp	r0, #48	; 0x30
 801e884:	d0f8      	beq.n	801e878 <__gethex+0x3c>
 801e886:	f7ff ffc4 	bl	801e812 <__hexdig_fun>
 801e88a:	4604      	mov	r4, r0
 801e88c:	2800      	cmp	r0, #0
 801e88e:	d13a      	bne.n	801e906 <__gethex+0xca>
 801e890:	9901      	ldr	r1, [sp, #4]
 801e892:	4652      	mov	r2, sl
 801e894:	4638      	mov	r0, r7
 801e896:	f001 fb3a 	bl	801ff0e <strncmp>
 801e89a:	4605      	mov	r5, r0
 801e89c:	2800      	cmp	r0, #0
 801e89e:	d168      	bne.n	801e972 <__gethex+0x136>
 801e8a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e8a4:	eb07 060a 	add.w	r6, r7, sl
 801e8a8:	f7ff ffb3 	bl	801e812 <__hexdig_fun>
 801e8ac:	2800      	cmp	r0, #0
 801e8ae:	d062      	beq.n	801e976 <__gethex+0x13a>
 801e8b0:	4633      	mov	r3, r6
 801e8b2:	7818      	ldrb	r0, [r3, #0]
 801e8b4:	2830      	cmp	r0, #48	; 0x30
 801e8b6:	461f      	mov	r7, r3
 801e8b8:	f103 0301 	add.w	r3, r3, #1
 801e8bc:	d0f9      	beq.n	801e8b2 <__gethex+0x76>
 801e8be:	f7ff ffa8 	bl	801e812 <__hexdig_fun>
 801e8c2:	2301      	movs	r3, #1
 801e8c4:	fab0 f480 	clz	r4, r0
 801e8c8:	0964      	lsrs	r4, r4, #5
 801e8ca:	4635      	mov	r5, r6
 801e8cc:	9300      	str	r3, [sp, #0]
 801e8ce:	463a      	mov	r2, r7
 801e8d0:	4616      	mov	r6, r2
 801e8d2:	3201      	adds	r2, #1
 801e8d4:	7830      	ldrb	r0, [r6, #0]
 801e8d6:	f7ff ff9c 	bl	801e812 <__hexdig_fun>
 801e8da:	2800      	cmp	r0, #0
 801e8dc:	d1f8      	bne.n	801e8d0 <__gethex+0x94>
 801e8de:	9901      	ldr	r1, [sp, #4]
 801e8e0:	4652      	mov	r2, sl
 801e8e2:	4630      	mov	r0, r6
 801e8e4:	f001 fb13 	bl	801ff0e <strncmp>
 801e8e8:	b980      	cbnz	r0, 801e90c <__gethex+0xd0>
 801e8ea:	b94d      	cbnz	r5, 801e900 <__gethex+0xc4>
 801e8ec:	eb06 050a 	add.w	r5, r6, sl
 801e8f0:	462a      	mov	r2, r5
 801e8f2:	4616      	mov	r6, r2
 801e8f4:	3201      	adds	r2, #1
 801e8f6:	7830      	ldrb	r0, [r6, #0]
 801e8f8:	f7ff ff8b 	bl	801e812 <__hexdig_fun>
 801e8fc:	2800      	cmp	r0, #0
 801e8fe:	d1f8      	bne.n	801e8f2 <__gethex+0xb6>
 801e900:	1bad      	subs	r5, r5, r6
 801e902:	00ad      	lsls	r5, r5, #2
 801e904:	e004      	b.n	801e910 <__gethex+0xd4>
 801e906:	2400      	movs	r4, #0
 801e908:	4625      	mov	r5, r4
 801e90a:	e7e0      	b.n	801e8ce <__gethex+0x92>
 801e90c:	2d00      	cmp	r5, #0
 801e90e:	d1f7      	bne.n	801e900 <__gethex+0xc4>
 801e910:	7833      	ldrb	r3, [r6, #0]
 801e912:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e916:	2b50      	cmp	r3, #80	; 0x50
 801e918:	d13b      	bne.n	801e992 <__gethex+0x156>
 801e91a:	7873      	ldrb	r3, [r6, #1]
 801e91c:	2b2b      	cmp	r3, #43	; 0x2b
 801e91e:	d02c      	beq.n	801e97a <__gethex+0x13e>
 801e920:	2b2d      	cmp	r3, #45	; 0x2d
 801e922:	d02e      	beq.n	801e982 <__gethex+0x146>
 801e924:	1c71      	adds	r1, r6, #1
 801e926:	f04f 0900 	mov.w	r9, #0
 801e92a:	7808      	ldrb	r0, [r1, #0]
 801e92c:	f7ff ff71 	bl	801e812 <__hexdig_fun>
 801e930:	1e43      	subs	r3, r0, #1
 801e932:	b2db      	uxtb	r3, r3
 801e934:	2b18      	cmp	r3, #24
 801e936:	d82c      	bhi.n	801e992 <__gethex+0x156>
 801e938:	f1a0 0210 	sub.w	r2, r0, #16
 801e93c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e940:	f7ff ff67 	bl	801e812 <__hexdig_fun>
 801e944:	1e43      	subs	r3, r0, #1
 801e946:	b2db      	uxtb	r3, r3
 801e948:	2b18      	cmp	r3, #24
 801e94a:	d91d      	bls.n	801e988 <__gethex+0x14c>
 801e94c:	f1b9 0f00 	cmp.w	r9, #0
 801e950:	d000      	beq.n	801e954 <__gethex+0x118>
 801e952:	4252      	negs	r2, r2
 801e954:	4415      	add	r5, r2
 801e956:	f8cb 1000 	str.w	r1, [fp]
 801e95a:	b1e4      	cbz	r4, 801e996 <__gethex+0x15a>
 801e95c:	9b00      	ldr	r3, [sp, #0]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	bf14      	ite	ne
 801e962:	2700      	movne	r7, #0
 801e964:	2706      	moveq	r7, #6
 801e966:	4638      	mov	r0, r7
 801e968:	b009      	add	sp, #36	; 0x24
 801e96a:	ecbd 8b02 	vpop	{d8}
 801e96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e972:	463e      	mov	r6, r7
 801e974:	4625      	mov	r5, r4
 801e976:	2401      	movs	r4, #1
 801e978:	e7ca      	b.n	801e910 <__gethex+0xd4>
 801e97a:	f04f 0900 	mov.w	r9, #0
 801e97e:	1cb1      	adds	r1, r6, #2
 801e980:	e7d3      	b.n	801e92a <__gethex+0xee>
 801e982:	f04f 0901 	mov.w	r9, #1
 801e986:	e7fa      	b.n	801e97e <__gethex+0x142>
 801e988:	230a      	movs	r3, #10
 801e98a:	fb03 0202 	mla	r2, r3, r2, r0
 801e98e:	3a10      	subs	r2, #16
 801e990:	e7d4      	b.n	801e93c <__gethex+0x100>
 801e992:	4631      	mov	r1, r6
 801e994:	e7df      	b.n	801e956 <__gethex+0x11a>
 801e996:	1bf3      	subs	r3, r6, r7
 801e998:	3b01      	subs	r3, #1
 801e99a:	4621      	mov	r1, r4
 801e99c:	2b07      	cmp	r3, #7
 801e99e:	dc0b      	bgt.n	801e9b8 <__gethex+0x17c>
 801e9a0:	ee18 0a10 	vmov	r0, s16
 801e9a4:	f000 fada 	bl	801ef5c <_Balloc>
 801e9a8:	4604      	mov	r4, r0
 801e9aa:	b940      	cbnz	r0, 801e9be <__gethex+0x182>
 801e9ac:	4b5d      	ldr	r3, [pc, #372]	; (801eb24 <__gethex+0x2e8>)
 801e9ae:	4602      	mov	r2, r0
 801e9b0:	21de      	movs	r1, #222	; 0xde
 801e9b2:	485d      	ldr	r0, [pc, #372]	; (801eb28 <__gethex+0x2ec>)
 801e9b4:	f7fe fe78 	bl	801d6a8 <__assert_func>
 801e9b8:	3101      	adds	r1, #1
 801e9ba:	105b      	asrs	r3, r3, #1
 801e9bc:	e7ee      	b.n	801e99c <__gethex+0x160>
 801e9be:	f100 0914 	add.w	r9, r0, #20
 801e9c2:	f04f 0b00 	mov.w	fp, #0
 801e9c6:	f1ca 0301 	rsb	r3, sl, #1
 801e9ca:	f8cd 9008 	str.w	r9, [sp, #8]
 801e9ce:	f8cd b000 	str.w	fp, [sp]
 801e9d2:	9306      	str	r3, [sp, #24]
 801e9d4:	42b7      	cmp	r7, r6
 801e9d6:	d340      	bcc.n	801ea5a <__gethex+0x21e>
 801e9d8:	9802      	ldr	r0, [sp, #8]
 801e9da:	9b00      	ldr	r3, [sp, #0]
 801e9dc:	f840 3b04 	str.w	r3, [r0], #4
 801e9e0:	eba0 0009 	sub.w	r0, r0, r9
 801e9e4:	1080      	asrs	r0, r0, #2
 801e9e6:	0146      	lsls	r6, r0, #5
 801e9e8:	6120      	str	r0, [r4, #16]
 801e9ea:	4618      	mov	r0, r3
 801e9ec:	f000 fba8 	bl	801f140 <__hi0bits>
 801e9f0:	1a30      	subs	r0, r6, r0
 801e9f2:	f8d8 6000 	ldr.w	r6, [r8]
 801e9f6:	42b0      	cmp	r0, r6
 801e9f8:	dd63      	ble.n	801eac2 <__gethex+0x286>
 801e9fa:	1b87      	subs	r7, r0, r6
 801e9fc:	4639      	mov	r1, r7
 801e9fe:	4620      	mov	r0, r4
 801ea00:	f000 ff4c 	bl	801f89c <__any_on>
 801ea04:	4682      	mov	sl, r0
 801ea06:	b1a8      	cbz	r0, 801ea34 <__gethex+0x1f8>
 801ea08:	1e7b      	subs	r3, r7, #1
 801ea0a:	1159      	asrs	r1, r3, #5
 801ea0c:	f003 021f 	and.w	r2, r3, #31
 801ea10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ea14:	f04f 0a01 	mov.w	sl, #1
 801ea18:	fa0a f202 	lsl.w	r2, sl, r2
 801ea1c:	420a      	tst	r2, r1
 801ea1e:	d009      	beq.n	801ea34 <__gethex+0x1f8>
 801ea20:	4553      	cmp	r3, sl
 801ea22:	dd05      	ble.n	801ea30 <__gethex+0x1f4>
 801ea24:	1eb9      	subs	r1, r7, #2
 801ea26:	4620      	mov	r0, r4
 801ea28:	f000 ff38 	bl	801f89c <__any_on>
 801ea2c:	2800      	cmp	r0, #0
 801ea2e:	d145      	bne.n	801eabc <__gethex+0x280>
 801ea30:	f04f 0a02 	mov.w	sl, #2
 801ea34:	4639      	mov	r1, r7
 801ea36:	4620      	mov	r0, r4
 801ea38:	f7ff fe99 	bl	801e76e <rshift>
 801ea3c:	443d      	add	r5, r7
 801ea3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ea42:	42ab      	cmp	r3, r5
 801ea44:	da4c      	bge.n	801eae0 <__gethex+0x2a4>
 801ea46:	ee18 0a10 	vmov	r0, s16
 801ea4a:	4621      	mov	r1, r4
 801ea4c:	f000 fac6 	bl	801efdc <_Bfree>
 801ea50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea52:	2300      	movs	r3, #0
 801ea54:	6013      	str	r3, [r2, #0]
 801ea56:	27a3      	movs	r7, #163	; 0xa3
 801ea58:	e785      	b.n	801e966 <__gethex+0x12a>
 801ea5a:	1e73      	subs	r3, r6, #1
 801ea5c:	9a05      	ldr	r2, [sp, #20]
 801ea5e:	9303      	str	r3, [sp, #12]
 801ea60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ea64:	4293      	cmp	r3, r2
 801ea66:	d019      	beq.n	801ea9c <__gethex+0x260>
 801ea68:	f1bb 0f20 	cmp.w	fp, #32
 801ea6c:	d107      	bne.n	801ea7e <__gethex+0x242>
 801ea6e:	9b02      	ldr	r3, [sp, #8]
 801ea70:	9a00      	ldr	r2, [sp, #0]
 801ea72:	f843 2b04 	str.w	r2, [r3], #4
 801ea76:	9302      	str	r3, [sp, #8]
 801ea78:	2300      	movs	r3, #0
 801ea7a:	9300      	str	r3, [sp, #0]
 801ea7c:	469b      	mov	fp, r3
 801ea7e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ea82:	f7ff fec6 	bl	801e812 <__hexdig_fun>
 801ea86:	9b00      	ldr	r3, [sp, #0]
 801ea88:	f000 000f 	and.w	r0, r0, #15
 801ea8c:	fa00 f00b 	lsl.w	r0, r0, fp
 801ea90:	4303      	orrs	r3, r0
 801ea92:	9300      	str	r3, [sp, #0]
 801ea94:	f10b 0b04 	add.w	fp, fp, #4
 801ea98:	9b03      	ldr	r3, [sp, #12]
 801ea9a:	e00d      	b.n	801eab8 <__gethex+0x27c>
 801ea9c:	9b03      	ldr	r3, [sp, #12]
 801ea9e:	9a06      	ldr	r2, [sp, #24]
 801eaa0:	4413      	add	r3, r2
 801eaa2:	42bb      	cmp	r3, r7
 801eaa4:	d3e0      	bcc.n	801ea68 <__gethex+0x22c>
 801eaa6:	4618      	mov	r0, r3
 801eaa8:	9901      	ldr	r1, [sp, #4]
 801eaaa:	9307      	str	r3, [sp, #28]
 801eaac:	4652      	mov	r2, sl
 801eaae:	f001 fa2e 	bl	801ff0e <strncmp>
 801eab2:	9b07      	ldr	r3, [sp, #28]
 801eab4:	2800      	cmp	r0, #0
 801eab6:	d1d7      	bne.n	801ea68 <__gethex+0x22c>
 801eab8:	461e      	mov	r6, r3
 801eaba:	e78b      	b.n	801e9d4 <__gethex+0x198>
 801eabc:	f04f 0a03 	mov.w	sl, #3
 801eac0:	e7b8      	b.n	801ea34 <__gethex+0x1f8>
 801eac2:	da0a      	bge.n	801eada <__gethex+0x29e>
 801eac4:	1a37      	subs	r7, r6, r0
 801eac6:	4621      	mov	r1, r4
 801eac8:	ee18 0a10 	vmov	r0, s16
 801eacc:	463a      	mov	r2, r7
 801eace:	f000 fca1 	bl	801f414 <__lshift>
 801ead2:	1bed      	subs	r5, r5, r7
 801ead4:	4604      	mov	r4, r0
 801ead6:	f100 0914 	add.w	r9, r0, #20
 801eada:	f04f 0a00 	mov.w	sl, #0
 801eade:	e7ae      	b.n	801ea3e <__gethex+0x202>
 801eae0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801eae4:	42a8      	cmp	r0, r5
 801eae6:	dd72      	ble.n	801ebce <__gethex+0x392>
 801eae8:	1b45      	subs	r5, r0, r5
 801eaea:	42ae      	cmp	r6, r5
 801eaec:	dc36      	bgt.n	801eb5c <__gethex+0x320>
 801eaee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eaf2:	2b02      	cmp	r3, #2
 801eaf4:	d02a      	beq.n	801eb4c <__gethex+0x310>
 801eaf6:	2b03      	cmp	r3, #3
 801eaf8:	d02c      	beq.n	801eb54 <__gethex+0x318>
 801eafa:	2b01      	cmp	r3, #1
 801eafc:	d11c      	bne.n	801eb38 <__gethex+0x2fc>
 801eafe:	42ae      	cmp	r6, r5
 801eb00:	d11a      	bne.n	801eb38 <__gethex+0x2fc>
 801eb02:	2e01      	cmp	r6, #1
 801eb04:	d112      	bne.n	801eb2c <__gethex+0x2f0>
 801eb06:	9a04      	ldr	r2, [sp, #16]
 801eb08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801eb0c:	6013      	str	r3, [r2, #0]
 801eb0e:	2301      	movs	r3, #1
 801eb10:	6123      	str	r3, [r4, #16]
 801eb12:	f8c9 3000 	str.w	r3, [r9]
 801eb16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801eb18:	2762      	movs	r7, #98	; 0x62
 801eb1a:	601c      	str	r4, [r3, #0]
 801eb1c:	e723      	b.n	801e966 <__gethex+0x12a>
 801eb1e:	bf00      	nop
 801eb20:	0802230c 	.word	0x0802230c
 801eb24:	08022231 	.word	0x08022231
 801eb28:	080222a4 	.word	0x080222a4
 801eb2c:	1e71      	subs	r1, r6, #1
 801eb2e:	4620      	mov	r0, r4
 801eb30:	f000 feb4 	bl	801f89c <__any_on>
 801eb34:	2800      	cmp	r0, #0
 801eb36:	d1e6      	bne.n	801eb06 <__gethex+0x2ca>
 801eb38:	ee18 0a10 	vmov	r0, s16
 801eb3c:	4621      	mov	r1, r4
 801eb3e:	f000 fa4d 	bl	801efdc <_Bfree>
 801eb42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eb44:	2300      	movs	r3, #0
 801eb46:	6013      	str	r3, [r2, #0]
 801eb48:	2750      	movs	r7, #80	; 0x50
 801eb4a:	e70c      	b.n	801e966 <__gethex+0x12a>
 801eb4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	d1f2      	bne.n	801eb38 <__gethex+0x2fc>
 801eb52:	e7d8      	b.n	801eb06 <__gethex+0x2ca>
 801eb54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	d1d5      	bne.n	801eb06 <__gethex+0x2ca>
 801eb5a:	e7ed      	b.n	801eb38 <__gethex+0x2fc>
 801eb5c:	1e6f      	subs	r7, r5, #1
 801eb5e:	f1ba 0f00 	cmp.w	sl, #0
 801eb62:	d131      	bne.n	801ebc8 <__gethex+0x38c>
 801eb64:	b127      	cbz	r7, 801eb70 <__gethex+0x334>
 801eb66:	4639      	mov	r1, r7
 801eb68:	4620      	mov	r0, r4
 801eb6a:	f000 fe97 	bl	801f89c <__any_on>
 801eb6e:	4682      	mov	sl, r0
 801eb70:	117b      	asrs	r3, r7, #5
 801eb72:	2101      	movs	r1, #1
 801eb74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801eb78:	f007 071f 	and.w	r7, r7, #31
 801eb7c:	fa01 f707 	lsl.w	r7, r1, r7
 801eb80:	421f      	tst	r7, r3
 801eb82:	4629      	mov	r1, r5
 801eb84:	4620      	mov	r0, r4
 801eb86:	bf18      	it	ne
 801eb88:	f04a 0a02 	orrne.w	sl, sl, #2
 801eb8c:	1b76      	subs	r6, r6, r5
 801eb8e:	f7ff fdee 	bl	801e76e <rshift>
 801eb92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801eb96:	2702      	movs	r7, #2
 801eb98:	f1ba 0f00 	cmp.w	sl, #0
 801eb9c:	d048      	beq.n	801ec30 <__gethex+0x3f4>
 801eb9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801eba2:	2b02      	cmp	r3, #2
 801eba4:	d015      	beq.n	801ebd2 <__gethex+0x396>
 801eba6:	2b03      	cmp	r3, #3
 801eba8:	d017      	beq.n	801ebda <__gethex+0x39e>
 801ebaa:	2b01      	cmp	r3, #1
 801ebac:	d109      	bne.n	801ebc2 <__gethex+0x386>
 801ebae:	f01a 0f02 	tst.w	sl, #2
 801ebb2:	d006      	beq.n	801ebc2 <__gethex+0x386>
 801ebb4:	f8d9 0000 	ldr.w	r0, [r9]
 801ebb8:	ea4a 0a00 	orr.w	sl, sl, r0
 801ebbc:	f01a 0f01 	tst.w	sl, #1
 801ebc0:	d10e      	bne.n	801ebe0 <__gethex+0x3a4>
 801ebc2:	f047 0710 	orr.w	r7, r7, #16
 801ebc6:	e033      	b.n	801ec30 <__gethex+0x3f4>
 801ebc8:	f04f 0a01 	mov.w	sl, #1
 801ebcc:	e7d0      	b.n	801eb70 <__gethex+0x334>
 801ebce:	2701      	movs	r7, #1
 801ebd0:	e7e2      	b.n	801eb98 <__gethex+0x35c>
 801ebd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ebd4:	f1c3 0301 	rsb	r3, r3, #1
 801ebd8:	9315      	str	r3, [sp, #84]	; 0x54
 801ebda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d0f0      	beq.n	801ebc2 <__gethex+0x386>
 801ebe0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ebe4:	f104 0314 	add.w	r3, r4, #20
 801ebe8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801ebec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ebf0:	f04f 0c00 	mov.w	ip, #0
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ebfa:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ebfe:	d01c      	beq.n	801ec3a <__gethex+0x3fe>
 801ec00:	3201      	adds	r2, #1
 801ec02:	6002      	str	r2, [r0, #0]
 801ec04:	2f02      	cmp	r7, #2
 801ec06:	f104 0314 	add.w	r3, r4, #20
 801ec0a:	d13f      	bne.n	801ec8c <__gethex+0x450>
 801ec0c:	f8d8 2000 	ldr.w	r2, [r8]
 801ec10:	3a01      	subs	r2, #1
 801ec12:	42b2      	cmp	r2, r6
 801ec14:	d10a      	bne.n	801ec2c <__gethex+0x3f0>
 801ec16:	1171      	asrs	r1, r6, #5
 801ec18:	2201      	movs	r2, #1
 801ec1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ec1e:	f006 061f 	and.w	r6, r6, #31
 801ec22:	fa02 f606 	lsl.w	r6, r2, r6
 801ec26:	421e      	tst	r6, r3
 801ec28:	bf18      	it	ne
 801ec2a:	4617      	movne	r7, r2
 801ec2c:	f047 0720 	orr.w	r7, r7, #32
 801ec30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ec32:	601c      	str	r4, [r3, #0]
 801ec34:	9b04      	ldr	r3, [sp, #16]
 801ec36:	601d      	str	r5, [r3, #0]
 801ec38:	e695      	b.n	801e966 <__gethex+0x12a>
 801ec3a:	4299      	cmp	r1, r3
 801ec3c:	f843 cc04 	str.w	ip, [r3, #-4]
 801ec40:	d8d8      	bhi.n	801ebf4 <__gethex+0x3b8>
 801ec42:	68a3      	ldr	r3, [r4, #8]
 801ec44:	459b      	cmp	fp, r3
 801ec46:	db19      	blt.n	801ec7c <__gethex+0x440>
 801ec48:	6861      	ldr	r1, [r4, #4]
 801ec4a:	ee18 0a10 	vmov	r0, s16
 801ec4e:	3101      	adds	r1, #1
 801ec50:	f000 f984 	bl	801ef5c <_Balloc>
 801ec54:	4681      	mov	r9, r0
 801ec56:	b918      	cbnz	r0, 801ec60 <__gethex+0x424>
 801ec58:	4b1a      	ldr	r3, [pc, #104]	; (801ecc4 <__gethex+0x488>)
 801ec5a:	4602      	mov	r2, r0
 801ec5c:	2184      	movs	r1, #132	; 0x84
 801ec5e:	e6a8      	b.n	801e9b2 <__gethex+0x176>
 801ec60:	6922      	ldr	r2, [r4, #16]
 801ec62:	3202      	adds	r2, #2
 801ec64:	f104 010c 	add.w	r1, r4, #12
 801ec68:	0092      	lsls	r2, r2, #2
 801ec6a:	300c      	adds	r0, #12
 801ec6c:	f7fc fc96 	bl	801b59c <memcpy>
 801ec70:	4621      	mov	r1, r4
 801ec72:	ee18 0a10 	vmov	r0, s16
 801ec76:	f000 f9b1 	bl	801efdc <_Bfree>
 801ec7a:	464c      	mov	r4, r9
 801ec7c:	6923      	ldr	r3, [r4, #16]
 801ec7e:	1c5a      	adds	r2, r3, #1
 801ec80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ec84:	6122      	str	r2, [r4, #16]
 801ec86:	2201      	movs	r2, #1
 801ec88:	615a      	str	r2, [r3, #20]
 801ec8a:	e7bb      	b.n	801ec04 <__gethex+0x3c8>
 801ec8c:	6922      	ldr	r2, [r4, #16]
 801ec8e:	455a      	cmp	r2, fp
 801ec90:	dd0b      	ble.n	801ecaa <__gethex+0x46e>
 801ec92:	2101      	movs	r1, #1
 801ec94:	4620      	mov	r0, r4
 801ec96:	f7ff fd6a 	bl	801e76e <rshift>
 801ec9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ec9e:	3501      	adds	r5, #1
 801eca0:	42ab      	cmp	r3, r5
 801eca2:	f6ff aed0 	blt.w	801ea46 <__gethex+0x20a>
 801eca6:	2701      	movs	r7, #1
 801eca8:	e7c0      	b.n	801ec2c <__gethex+0x3f0>
 801ecaa:	f016 061f 	ands.w	r6, r6, #31
 801ecae:	d0fa      	beq.n	801eca6 <__gethex+0x46a>
 801ecb0:	4453      	add	r3, sl
 801ecb2:	f1c6 0620 	rsb	r6, r6, #32
 801ecb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801ecba:	f000 fa41 	bl	801f140 <__hi0bits>
 801ecbe:	42b0      	cmp	r0, r6
 801ecc0:	dbe7      	blt.n	801ec92 <__gethex+0x456>
 801ecc2:	e7f0      	b.n	801eca6 <__gethex+0x46a>
 801ecc4:	08022231 	.word	0x08022231

0801ecc8 <L_shift>:
 801ecc8:	f1c2 0208 	rsb	r2, r2, #8
 801eccc:	0092      	lsls	r2, r2, #2
 801ecce:	b570      	push	{r4, r5, r6, lr}
 801ecd0:	f1c2 0620 	rsb	r6, r2, #32
 801ecd4:	6843      	ldr	r3, [r0, #4]
 801ecd6:	6804      	ldr	r4, [r0, #0]
 801ecd8:	fa03 f506 	lsl.w	r5, r3, r6
 801ecdc:	432c      	orrs	r4, r5
 801ecde:	40d3      	lsrs	r3, r2
 801ece0:	6004      	str	r4, [r0, #0]
 801ece2:	f840 3f04 	str.w	r3, [r0, #4]!
 801ece6:	4288      	cmp	r0, r1
 801ece8:	d3f4      	bcc.n	801ecd4 <L_shift+0xc>
 801ecea:	bd70      	pop	{r4, r5, r6, pc}

0801ecec <__match>:
 801ecec:	b530      	push	{r4, r5, lr}
 801ecee:	6803      	ldr	r3, [r0, #0]
 801ecf0:	3301      	adds	r3, #1
 801ecf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ecf6:	b914      	cbnz	r4, 801ecfe <__match+0x12>
 801ecf8:	6003      	str	r3, [r0, #0]
 801ecfa:	2001      	movs	r0, #1
 801ecfc:	bd30      	pop	{r4, r5, pc}
 801ecfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ed02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ed06:	2d19      	cmp	r5, #25
 801ed08:	bf98      	it	ls
 801ed0a:	3220      	addls	r2, #32
 801ed0c:	42a2      	cmp	r2, r4
 801ed0e:	d0f0      	beq.n	801ecf2 <__match+0x6>
 801ed10:	2000      	movs	r0, #0
 801ed12:	e7f3      	b.n	801ecfc <__match+0x10>

0801ed14 <__hexnan>:
 801ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed18:	680b      	ldr	r3, [r1, #0]
 801ed1a:	115e      	asrs	r6, r3, #5
 801ed1c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ed20:	f013 031f 	ands.w	r3, r3, #31
 801ed24:	b087      	sub	sp, #28
 801ed26:	bf18      	it	ne
 801ed28:	3604      	addne	r6, #4
 801ed2a:	2500      	movs	r5, #0
 801ed2c:	1f37      	subs	r7, r6, #4
 801ed2e:	4690      	mov	r8, r2
 801ed30:	6802      	ldr	r2, [r0, #0]
 801ed32:	9301      	str	r3, [sp, #4]
 801ed34:	4682      	mov	sl, r0
 801ed36:	f846 5c04 	str.w	r5, [r6, #-4]
 801ed3a:	46b9      	mov	r9, r7
 801ed3c:	463c      	mov	r4, r7
 801ed3e:	9502      	str	r5, [sp, #8]
 801ed40:	46ab      	mov	fp, r5
 801ed42:	7851      	ldrb	r1, [r2, #1]
 801ed44:	1c53      	adds	r3, r2, #1
 801ed46:	9303      	str	r3, [sp, #12]
 801ed48:	b341      	cbz	r1, 801ed9c <__hexnan+0x88>
 801ed4a:	4608      	mov	r0, r1
 801ed4c:	9205      	str	r2, [sp, #20]
 801ed4e:	9104      	str	r1, [sp, #16]
 801ed50:	f7ff fd5f 	bl	801e812 <__hexdig_fun>
 801ed54:	2800      	cmp	r0, #0
 801ed56:	d14f      	bne.n	801edf8 <__hexnan+0xe4>
 801ed58:	9904      	ldr	r1, [sp, #16]
 801ed5a:	9a05      	ldr	r2, [sp, #20]
 801ed5c:	2920      	cmp	r1, #32
 801ed5e:	d818      	bhi.n	801ed92 <__hexnan+0x7e>
 801ed60:	9b02      	ldr	r3, [sp, #8]
 801ed62:	459b      	cmp	fp, r3
 801ed64:	dd13      	ble.n	801ed8e <__hexnan+0x7a>
 801ed66:	454c      	cmp	r4, r9
 801ed68:	d206      	bcs.n	801ed78 <__hexnan+0x64>
 801ed6a:	2d07      	cmp	r5, #7
 801ed6c:	dc04      	bgt.n	801ed78 <__hexnan+0x64>
 801ed6e:	462a      	mov	r2, r5
 801ed70:	4649      	mov	r1, r9
 801ed72:	4620      	mov	r0, r4
 801ed74:	f7ff ffa8 	bl	801ecc8 <L_shift>
 801ed78:	4544      	cmp	r4, r8
 801ed7a:	d950      	bls.n	801ee1e <__hexnan+0x10a>
 801ed7c:	2300      	movs	r3, #0
 801ed7e:	f1a4 0904 	sub.w	r9, r4, #4
 801ed82:	f844 3c04 	str.w	r3, [r4, #-4]
 801ed86:	f8cd b008 	str.w	fp, [sp, #8]
 801ed8a:	464c      	mov	r4, r9
 801ed8c:	461d      	mov	r5, r3
 801ed8e:	9a03      	ldr	r2, [sp, #12]
 801ed90:	e7d7      	b.n	801ed42 <__hexnan+0x2e>
 801ed92:	2929      	cmp	r1, #41	; 0x29
 801ed94:	d156      	bne.n	801ee44 <__hexnan+0x130>
 801ed96:	3202      	adds	r2, #2
 801ed98:	f8ca 2000 	str.w	r2, [sl]
 801ed9c:	f1bb 0f00 	cmp.w	fp, #0
 801eda0:	d050      	beq.n	801ee44 <__hexnan+0x130>
 801eda2:	454c      	cmp	r4, r9
 801eda4:	d206      	bcs.n	801edb4 <__hexnan+0xa0>
 801eda6:	2d07      	cmp	r5, #7
 801eda8:	dc04      	bgt.n	801edb4 <__hexnan+0xa0>
 801edaa:	462a      	mov	r2, r5
 801edac:	4649      	mov	r1, r9
 801edae:	4620      	mov	r0, r4
 801edb0:	f7ff ff8a 	bl	801ecc8 <L_shift>
 801edb4:	4544      	cmp	r4, r8
 801edb6:	d934      	bls.n	801ee22 <__hexnan+0x10e>
 801edb8:	f1a8 0204 	sub.w	r2, r8, #4
 801edbc:	4623      	mov	r3, r4
 801edbe:	f853 1b04 	ldr.w	r1, [r3], #4
 801edc2:	f842 1f04 	str.w	r1, [r2, #4]!
 801edc6:	429f      	cmp	r7, r3
 801edc8:	d2f9      	bcs.n	801edbe <__hexnan+0xaa>
 801edca:	1b3b      	subs	r3, r7, r4
 801edcc:	f023 0303 	bic.w	r3, r3, #3
 801edd0:	3304      	adds	r3, #4
 801edd2:	3401      	adds	r4, #1
 801edd4:	3e03      	subs	r6, #3
 801edd6:	42b4      	cmp	r4, r6
 801edd8:	bf88      	it	hi
 801edda:	2304      	movhi	r3, #4
 801eddc:	4443      	add	r3, r8
 801edde:	2200      	movs	r2, #0
 801ede0:	f843 2b04 	str.w	r2, [r3], #4
 801ede4:	429f      	cmp	r7, r3
 801ede6:	d2fb      	bcs.n	801ede0 <__hexnan+0xcc>
 801ede8:	683b      	ldr	r3, [r7, #0]
 801edea:	b91b      	cbnz	r3, 801edf4 <__hexnan+0xe0>
 801edec:	4547      	cmp	r7, r8
 801edee:	d127      	bne.n	801ee40 <__hexnan+0x12c>
 801edf0:	2301      	movs	r3, #1
 801edf2:	603b      	str	r3, [r7, #0]
 801edf4:	2005      	movs	r0, #5
 801edf6:	e026      	b.n	801ee46 <__hexnan+0x132>
 801edf8:	3501      	adds	r5, #1
 801edfa:	2d08      	cmp	r5, #8
 801edfc:	f10b 0b01 	add.w	fp, fp, #1
 801ee00:	dd06      	ble.n	801ee10 <__hexnan+0xfc>
 801ee02:	4544      	cmp	r4, r8
 801ee04:	d9c3      	bls.n	801ed8e <__hexnan+0x7a>
 801ee06:	2300      	movs	r3, #0
 801ee08:	f844 3c04 	str.w	r3, [r4, #-4]
 801ee0c:	2501      	movs	r5, #1
 801ee0e:	3c04      	subs	r4, #4
 801ee10:	6822      	ldr	r2, [r4, #0]
 801ee12:	f000 000f 	and.w	r0, r0, #15
 801ee16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ee1a:	6022      	str	r2, [r4, #0]
 801ee1c:	e7b7      	b.n	801ed8e <__hexnan+0x7a>
 801ee1e:	2508      	movs	r5, #8
 801ee20:	e7b5      	b.n	801ed8e <__hexnan+0x7a>
 801ee22:	9b01      	ldr	r3, [sp, #4]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d0df      	beq.n	801ede8 <__hexnan+0xd4>
 801ee28:	f04f 32ff 	mov.w	r2, #4294967295
 801ee2c:	f1c3 0320 	rsb	r3, r3, #32
 801ee30:	fa22 f303 	lsr.w	r3, r2, r3
 801ee34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ee38:	401a      	ands	r2, r3
 801ee3a:	f846 2c04 	str.w	r2, [r6, #-4]
 801ee3e:	e7d3      	b.n	801ede8 <__hexnan+0xd4>
 801ee40:	3f04      	subs	r7, #4
 801ee42:	e7d1      	b.n	801ede8 <__hexnan+0xd4>
 801ee44:	2004      	movs	r0, #4
 801ee46:	b007      	add	sp, #28
 801ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ee4c <_localeconv_r>:
 801ee4c:	4800      	ldr	r0, [pc, #0]	; (801ee50 <_localeconv_r+0x4>)
 801ee4e:	4770      	bx	lr
 801ee50:	2000029c 	.word	0x2000029c

0801ee54 <__swhatbuf_r>:
 801ee54:	b570      	push	{r4, r5, r6, lr}
 801ee56:	460e      	mov	r6, r1
 801ee58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee5c:	2900      	cmp	r1, #0
 801ee5e:	b096      	sub	sp, #88	; 0x58
 801ee60:	4614      	mov	r4, r2
 801ee62:	461d      	mov	r5, r3
 801ee64:	da08      	bge.n	801ee78 <__swhatbuf_r+0x24>
 801ee66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ee6a:	2200      	movs	r2, #0
 801ee6c:	602a      	str	r2, [r5, #0]
 801ee6e:	061a      	lsls	r2, r3, #24
 801ee70:	d410      	bmi.n	801ee94 <__swhatbuf_r+0x40>
 801ee72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ee76:	e00e      	b.n	801ee96 <__swhatbuf_r+0x42>
 801ee78:	466a      	mov	r2, sp
 801ee7a:	f001 f893 	bl	801ffa4 <_fstat_r>
 801ee7e:	2800      	cmp	r0, #0
 801ee80:	dbf1      	blt.n	801ee66 <__swhatbuf_r+0x12>
 801ee82:	9a01      	ldr	r2, [sp, #4]
 801ee84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ee88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ee8c:	425a      	negs	r2, r3
 801ee8e:	415a      	adcs	r2, r3
 801ee90:	602a      	str	r2, [r5, #0]
 801ee92:	e7ee      	b.n	801ee72 <__swhatbuf_r+0x1e>
 801ee94:	2340      	movs	r3, #64	; 0x40
 801ee96:	2000      	movs	r0, #0
 801ee98:	6023      	str	r3, [r4, #0]
 801ee9a:	b016      	add	sp, #88	; 0x58
 801ee9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801eea0 <__smakebuf_r>:
 801eea0:	898b      	ldrh	r3, [r1, #12]
 801eea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eea4:	079d      	lsls	r5, r3, #30
 801eea6:	4606      	mov	r6, r0
 801eea8:	460c      	mov	r4, r1
 801eeaa:	d507      	bpl.n	801eebc <__smakebuf_r+0x1c>
 801eeac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eeb0:	6023      	str	r3, [r4, #0]
 801eeb2:	6123      	str	r3, [r4, #16]
 801eeb4:	2301      	movs	r3, #1
 801eeb6:	6163      	str	r3, [r4, #20]
 801eeb8:	b002      	add	sp, #8
 801eeba:	bd70      	pop	{r4, r5, r6, pc}
 801eebc:	ab01      	add	r3, sp, #4
 801eebe:	466a      	mov	r2, sp
 801eec0:	f7ff ffc8 	bl	801ee54 <__swhatbuf_r>
 801eec4:	9900      	ldr	r1, [sp, #0]
 801eec6:	4605      	mov	r5, r0
 801eec8:	4630      	mov	r0, r6
 801eeca:	f7fc fc03 	bl	801b6d4 <_malloc_r>
 801eece:	b948      	cbnz	r0, 801eee4 <__smakebuf_r+0x44>
 801eed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eed4:	059a      	lsls	r2, r3, #22
 801eed6:	d4ef      	bmi.n	801eeb8 <__smakebuf_r+0x18>
 801eed8:	f023 0303 	bic.w	r3, r3, #3
 801eedc:	f043 0302 	orr.w	r3, r3, #2
 801eee0:	81a3      	strh	r3, [r4, #12]
 801eee2:	e7e3      	b.n	801eeac <__smakebuf_r+0xc>
 801eee4:	4b0d      	ldr	r3, [pc, #52]	; (801ef1c <__smakebuf_r+0x7c>)
 801eee6:	62b3      	str	r3, [r6, #40]	; 0x28
 801eee8:	89a3      	ldrh	r3, [r4, #12]
 801eeea:	6020      	str	r0, [r4, #0]
 801eeec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eef0:	81a3      	strh	r3, [r4, #12]
 801eef2:	9b00      	ldr	r3, [sp, #0]
 801eef4:	6163      	str	r3, [r4, #20]
 801eef6:	9b01      	ldr	r3, [sp, #4]
 801eef8:	6120      	str	r0, [r4, #16]
 801eefa:	b15b      	cbz	r3, 801ef14 <__smakebuf_r+0x74>
 801eefc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ef00:	4630      	mov	r0, r6
 801ef02:	f001 f861 	bl	801ffc8 <_isatty_r>
 801ef06:	b128      	cbz	r0, 801ef14 <__smakebuf_r+0x74>
 801ef08:	89a3      	ldrh	r3, [r4, #12]
 801ef0a:	f023 0303 	bic.w	r3, r3, #3
 801ef0e:	f043 0301 	orr.w	r3, r3, #1
 801ef12:	81a3      	strh	r3, [r4, #12]
 801ef14:	89a0      	ldrh	r0, [r4, #12]
 801ef16:	4305      	orrs	r5, r0
 801ef18:	81a5      	strh	r5, [r4, #12]
 801ef1a:	e7cd      	b.n	801eeb8 <__smakebuf_r+0x18>
 801ef1c:	0801e5a9 	.word	0x0801e5a9

0801ef20 <__ascii_mbtowc>:
 801ef20:	b082      	sub	sp, #8
 801ef22:	b901      	cbnz	r1, 801ef26 <__ascii_mbtowc+0x6>
 801ef24:	a901      	add	r1, sp, #4
 801ef26:	b142      	cbz	r2, 801ef3a <__ascii_mbtowc+0x1a>
 801ef28:	b14b      	cbz	r3, 801ef3e <__ascii_mbtowc+0x1e>
 801ef2a:	7813      	ldrb	r3, [r2, #0]
 801ef2c:	600b      	str	r3, [r1, #0]
 801ef2e:	7812      	ldrb	r2, [r2, #0]
 801ef30:	1e10      	subs	r0, r2, #0
 801ef32:	bf18      	it	ne
 801ef34:	2001      	movne	r0, #1
 801ef36:	b002      	add	sp, #8
 801ef38:	4770      	bx	lr
 801ef3a:	4610      	mov	r0, r2
 801ef3c:	e7fb      	b.n	801ef36 <__ascii_mbtowc+0x16>
 801ef3e:	f06f 0001 	mvn.w	r0, #1
 801ef42:	e7f8      	b.n	801ef36 <__ascii_mbtowc+0x16>

0801ef44 <__malloc_lock>:
 801ef44:	4801      	ldr	r0, [pc, #4]	; (801ef4c <__malloc_lock+0x8>)
 801ef46:	f7fc bb1e 	b.w	801b586 <__retarget_lock_acquire_recursive>
 801ef4a:	bf00      	nop
 801ef4c:	20003610 	.word	0x20003610

0801ef50 <__malloc_unlock>:
 801ef50:	4801      	ldr	r0, [pc, #4]	; (801ef58 <__malloc_unlock+0x8>)
 801ef52:	f7fc bb19 	b.w	801b588 <__retarget_lock_release_recursive>
 801ef56:	bf00      	nop
 801ef58:	20003610 	.word	0x20003610

0801ef5c <_Balloc>:
 801ef5c:	b570      	push	{r4, r5, r6, lr}
 801ef5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ef60:	4604      	mov	r4, r0
 801ef62:	460d      	mov	r5, r1
 801ef64:	b976      	cbnz	r6, 801ef84 <_Balloc+0x28>
 801ef66:	2010      	movs	r0, #16
 801ef68:	f7fc fb10 	bl	801b58c <malloc>
 801ef6c:	4602      	mov	r2, r0
 801ef6e:	6260      	str	r0, [r4, #36]	; 0x24
 801ef70:	b920      	cbnz	r0, 801ef7c <_Balloc+0x20>
 801ef72:	4b18      	ldr	r3, [pc, #96]	; (801efd4 <_Balloc+0x78>)
 801ef74:	4818      	ldr	r0, [pc, #96]	; (801efd8 <_Balloc+0x7c>)
 801ef76:	2166      	movs	r1, #102	; 0x66
 801ef78:	f7fe fb96 	bl	801d6a8 <__assert_func>
 801ef7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ef80:	6006      	str	r6, [r0, #0]
 801ef82:	60c6      	str	r6, [r0, #12]
 801ef84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ef86:	68f3      	ldr	r3, [r6, #12]
 801ef88:	b183      	cbz	r3, 801efac <_Balloc+0x50>
 801ef8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ef8c:	68db      	ldr	r3, [r3, #12]
 801ef8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ef92:	b9b8      	cbnz	r0, 801efc4 <_Balloc+0x68>
 801ef94:	2101      	movs	r1, #1
 801ef96:	fa01 f605 	lsl.w	r6, r1, r5
 801ef9a:	1d72      	adds	r2, r6, #5
 801ef9c:	0092      	lsls	r2, r2, #2
 801ef9e:	4620      	mov	r0, r4
 801efa0:	f000 fc9d 	bl	801f8de <_calloc_r>
 801efa4:	b160      	cbz	r0, 801efc0 <_Balloc+0x64>
 801efa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801efaa:	e00e      	b.n	801efca <_Balloc+0x6e>
 801efac:	2221      	movs	r2, #33	; 0x21
 801efae:	2104      	movs	r1, #4
 801efb0:	4620      	mov	r0, r4
 801efb2:	f000 fc94 	bl	801f8de <_calloc_r>
 801efb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801efb8:	60f0      	str	r0, [r6, #12]
 801efba:	68db      	ldr	r3, [r3, #12]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d1e4      	bne.n	801ef8a <_Balloc+0x2e>
 801efc0:	2000      	movs	r0, #0
 801efc2:	bd70      	pop	{r4, r5, r6, pc}
 801efc4:	6802      	ldr	r2, [r0, #0]
 801efc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801efca:	2300      	movs	r3, #0
 801efcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801efd0:	e7f7      	b.n	801efc2 <_Balloc+0x66>
 801efd2:	bf00      	nop
 801efd4:	08022018 	.word	0x08022018
 801efd8:	08022320 	.word	0x08022320

0801efdc <_Bfree>:
 801efdc:	b570      	push	{r4, r5, r6, lr}
 801efde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801efe0:	4605      	mov	r5, r0
 801efe2:	460c      	mov	r4, r1
 801efe4:	b976      	cbnz	r6, 801f004 <_Bfree+0x28>
 801efe6:	2010      	movs	r0, #16
 801efe8:	f7fc fad0 	bl	801b58c <malloc>
 801efec:	4602      	mov	r2, r0
 801efee:	6268      	str	r0, [r5, #36]	; 0x24
 801eff0:	b920      	cbnz	r0, 801effc <_Bfree+0x20>
 801eff2:	4b09      	ldr	r3, [pc, #36]	; (801f018 <_Bfree+0x3c>)
 801eff4:	4809      	ldr	r0, [pc, #36]	; (801f01c <_Bfree+0x40>)
 801eff6:	218a      	movs	r1, #138	; 0x8a
 801eff8:	f7fe fb56 	bl	801d6a8 <__assert_func>
 801effc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f000:	6006      	str	r6, [r0, #0]
 801f002:	60c6      	str	r6, [r0, #12]
 801f004:	b13c      	cbz	r4, 801f016 <_Bfree+0x3a>
 801f006:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f008:	6862      	ldr	r2, [r4, #4]
 801f00a:	68db      	ldr	r3, [r3, #12]
 801f00c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f010:	6021      	str	r1, [r4, #0]
 801f012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f016:	bd70      	pop	{r4, r5, r6, pc}
 801f018:	08022018 	.word	0x08022018
 801f01c:	08022320 	.word	0x08022320

0801f020 <__multadd>:
 801f020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f024:	690d      	ldr	r5, [r1, #16]
 801f026:	4607      	mov	r7, r0
 801f028:	460c      	mov	r4, r1
 801f02a:	461e      	mov	r6, r3
 801f02c:	f101 0c14 	add.w	ip, r1, #20
 801f030:	2000      	movs	r0, #0
 801f032:	f8dc 3000 	ldr.w	r3, [ip]
 801f036:	b299      	uxth	r1, r3
 801f038:	fb02 6101 	mla	r1, r2, r1, r6
 801f03c:	0c1e      	lsrs	r6, r3, #16
 801f03e:	0c0b      	lsrs	r3, r1, #16
 801f040:	fb02 3306 	mla	r3, r2, r6, r3
 801f044:	b289      	uxth	r1, r1
 801f046:	3001      	adds	r0, #1
 801f048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f04c:	4285      	cmp	r5, r0
 801f04e:	f84c 1b04 	str.w	r1, [ip], #4
 801f052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f056:	dcec      	bgt.n	801f032 <__multadd+0x12>
 801f058:	b30e      	cbz	r6, 801f09e <__multadd+0x7e>
 801f05a:	68a3      	ldr	r3, [r4, #8]
 801f05c:	42ab      	cmp	r3, r5
 801f05e:	dc19      	bgt.n	801f094 <__multadd+0x74>
 801f060:	6861      	ldr	r1, [r4, #4]
 801f062:	4638      	mov	r0, r7
 801f064:	3101      	adds	r1, #1
 801f066:	f7ff ff79 	bl	801ef5c <_Balloc>
 801f06a:	4680      	mov	r8, r0
 801f06c:	b928      	cbnz	r0, 801f07a <__multadd+0x5a>
 801f06e:	4602      	mov	r2, r0
 801f070:	4b0c      	ldr	r3, [pc, #48]	; (801f0a4 <__multadd+0x84>)
 801f072:	480d      	ldr	r0, [pc, #52]	; (801f0a8 <__multadd+0x88>)
 801f074:	21b5      	movs	r1, #181	; 0xb5
 801f076:	f7fe fb17 	bl	801d6a8 <__assert_func>
 801f07a:	6922      	ldr	r2, [r4, #16]
 801f07c:	3202      	adds	r2, #2
 801f07e:	f104 010c 	add.w	r1, r4, #12
 801f082:	0092      	lsls	r2, r2, #2
 801f084:	300c      	adds	r0, #12
 801f086:	f7fc fa89 	bl	801b59c <memcpy>
 801f08a:	4621      	mov	r1, r4
 801f08c:	4638      	mov	r0, r7
 801f08e:	f7ff ffa5 	bl	801efdc <_Bfree>
 801f092:	4644      	mov	r4, r8
 801f094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f098:	3501      	adds	r5, #1
 801f09a:	615e      	str	r6, [r3, #20]
 801f09c:	6125      	str	r5, [r4, #16]
 801f09e:	4620      	mov	r0, r4
 801f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0a4:	08022231 	.word	0x08022231
 801f0a8:	08022320 	.word	0x08022320

0801f0ac <__s2b>:
 801f0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f0b0:	460c      	mov	r4, r1
 801f0b2:	4615      	mov	r5, r2
 801f0b4:	461f      	mov	r7, r3
 801f0b6:	2209      	movs	r2, #9
 801f0b8:	3308      	adds	r3, #8
 801f0ba:	4606      	mov	r6, r0
 801f0bc:	fb93 f3f2 	sdiv	r3, r3, r2
 801f0c0:	2100      	movs	r1, #0
 801f0c2:	2201      	movs	r2, #1
 801f0c4:	429a      	cmp	r2, r3
 801f0c6:	db09      	blt.n	801f0dc <__s2b+0x30>
 801f0c8:	4630      	mov	r0, r6
 801f0ca:	f7ff ff47 	bl	801ef5c <_Balloc>
 801f0ce:	b940      	cbnz	r0, 801f0e2 <__s2b+0x36>
 801f0d0:	4602      	mov	r2, r0
 801f0d2:	4b19      	ldr	r3, [pc, #100]	; (801f138 <__s2b+0x8c>)
 801f0d4:	4819      	ldr	r0, [pc, #100]	; (801f13c <__s2b+0x90>)
 801f0d6:	21ce      	movs	r1, #206	; 0xce
 801f0d8:	f7fe fae6 	bl	801d6a8 <__assert_func>
 801f0dc:	0052      	lsls	r2, r2, #1
 801f0de:	3101      	adds	r1, #1
 801f0e0:	e7f0      	b.n	801f0c4 <__s2b+0x18>
 801f0e2:	9b08      	ldr	r3, [sp, #32]
 801f0e4:	6143      	str	r3, [r0, #20]
 801f0e6:	2d09      	cmp	r5, #9
 801f0e8:	f04f 0301 	mov.w	r3, #1
 801f0ec:	6103      	str	r3, [r0, #16]
 801f0ee:	dd16      	ble.n	801f11e <__s2b+0x72>
 801f0f0:	f104 0909 	add.w	r9, r4, #9
 801f0f4:	46c8      	mov	r8, r9
 801f0f6:	442c      	add	r4, r5
 801f0f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f0fc:	4601      	mov	r1, r0
 801f0fe:	3b30      	subs	r3, #48	; 0x30
 801f100:	220a      	movs	r2, #10
 801f102:	4630      	mov	r0, r6
 801f104:	f7ff ff8c 	bl	801f020 <__multadd>
 801f108:	45a0      	cmp	r8, r4
 801f10a:	d1f5      	bne.n	801f0f8 <__s2b+0x4c>
 801f10c:	f1a5 0408 	sub.w	r4, r5, #8
 801f110:	444c      	add	r4, r9
 801f112:	1b2d      	subs	r5, r5, r4
 801f114:	1963      	adds	r3, r4, r5
 801f116:	42bb      	cmp	r3, r7
 801f118:	db04      	blt.n	801f124 <__s2b+0x78>
 801f11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f11e:	340a      	adds	r4, #10
 801f120:	2509      	movs	r5, #9
 801f122:	e7f6      	b.n	801f112 <__s2b+0x66>
 801f124:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f128:	4601      	mov	r1, r0
 801f12a:	3b30      	subs	r3, #48	; 0x30
 801f12c:	220a      	movs	r2, #10
 801f12e:	4630      	mov	r0, r6
 801f130:	f7ff ff76 	bl	801f020 <__multadd>
 801f134:	e7ee      	b.n	801f114 <__s2b+0x68>
 801f136:	bf00      	nop
 801f138:	08022231 	.word	0x08022231
 801f13c:	08022320 	.word	0x08022320

0801f140 <__hi0bits>:
 801f140:	0c03      	lsrs	r3, r0, #16
 801f142:	041b      	lsls	r3, r3, #16
 801f144:	b9d3      	cbnz	r3, 801f17c <__hi0bits+0x3c>
 801f146:	0400      	lsls	r0, r0, #16
 801f148:	2310      	movs	r3, #16
 801f14a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f14e:	bf04      	itt	eq
 801f150:	0200      	lsleq	r0, r0, #8
 801f152:	3308      	addeq	r3, #8
 801f154:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f158:	bf04      	itt	eq
 801f15a:	0100      	lsleq	r0, r0, #4
 801f15c:	3304      	addeq	r3, #4
 801f15e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f162:	bf04      	itt	eq
 801f164:	0080      	lsleq	r0, r0, #2
 801f166:	3302      	addeq	r3, #2
 801f168:	2800      	cmp	r0, #0
 801f16a:	db05      	blt.n	801f178 <__hi0bits+0x38>
 801f16c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f170:	f103 0301 	add.w	r3, r3, #1
 801f174:	bf08      	it	eq
 801f176:	2320      	moveq	r3, #32
 801f178:	4618      	mov	r0, r3
 801f17a:	4770      	bx	lr
 801f17c:	2300      	movs	r3, #0
 801f17e:	e7e4      	b.n	801f14a <__hi0bits+0xa>

0801f180 <__lo0bits>:
 801f180:	6803      	ldr	r3, [r0, #0]
 801f182:	f013 0207 	ands.w	r2, r3, #7
 801f186:	4601      	mov	r1, r0
 801f188:	d00b      	beq.n	801f1a2 <__lo0bits+0x22>
 801f18a:	07da      	lsls	r2, r3, #31
 801f18c:	d423      	bmi.n	801f1d6 <__lo0bits+0x56>
 801f18e:	0798      	lsls	r0, r3, #30
 801f190:	bf49      	itett	mi
 801f192:	085b      	lsrmi	r3, r3, #1
 801f194:	089b      	lsrpl	r3, r3, #2
 801f196:	2001      	movmi	r0, #1
 801f198:	600b      	strmi	r3, [r1, #0]
 801f19a:	bf5c      	itt	pl
 801f19c:	600b      	strpl	r3, [r1, #0]
 801f19e:	2002      	movpl	r0, #2
 801f1a0:	4770      	bx	lr
 801f1a2:	b298      	uxth	r0, r3
 801f1a4:	b9a8      	cbnz	r0, 801f1d2 <__lo0bits+0x52>
 801f1a6:	0c1b      	lsrs	r3, r3, #16
 801f1a8:	2010      	movs	r0, #16
 801f1aa:	b2da      	uxtb	r2, r3
 801f1ac:	b90a      	cbnz	r2, 801f1b2 <__lo0bits+0x32>
 801f1ae:	3008      	adds	r0, #8
 801f1b0:	0a1b      	lsrs	r3, r3, #8
 801f1b2:	071a      	lsls	r2, r3, #28
 801f1b4:	bf04      	itt	eq
 801f1b6:	091b      	lsreq	r3, r3, #4
 801f1b8:	3004      	addeq	r0, #4
 801f1ba:	079a      	lsls	r2, r3, #30
 801f1bc:	bf04      	itt	eq
 801f1be:	089b      	lsreq	r3, r3, #2
 801f1c0:	3002      	addeq	r0, #2
 801f1c2:	07da      	lsls	r2, r3, #31
 801f1c4:	d403      	bmi.n	801f1ce <__lo0bits+0x4e>
 801f1c6:	085b      	lsrs	r3, r3, #1
 801f1c8:	f100 0001 	add.w	r0, r0, #1
 801f1cc:	d005      	beq.n	801f1da <__lo0bits+0x5a>
 801f1ce:	600b      	str	r3, [r1, #0]
 801f1d0:	4770      	bx	lr
 801f1d2:	4610      	mov	r0, r2
 801f1d4:	e7e9      	b.n	801f1aa <__lo0bits+0x2a>
 801f1d6:	2000      	movs	r0, #0
 801f1d8:	4770      	bx	lr
 801f1da:	2020      	movs	r0, #32
 801f1dc:	4770      	bx	lr
	...

0801f1e0 <__i2b>:
 801f1e0:	b510      	push	{r4, lr}
 801f1e2:	460c      	mov	r4, r1
 801f1e4:	2101      	movs	r1, #1
 801f1e6:	f7ff feb9 	bl	801ef5c <_Balloc>
 801f1ea:	4602      	mov	r2, r0
 801f1ec:	b928      	cbnz	r0, 801f1fa <__i2b+0x1a>
 801f1ee:	4b05      	ldr	r3, [pc, #20]	; (801f204 <__i2b+0x24>)
 801f1f0:	4805      	ldr	r0, [pc, #20]	; (801f208 <__i2b+0x28>)
 801f1f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f1f6:	f7fe fa57 	bl	801d6a8 <__assert_func>
 801f1fa:	2301      	movs	r3, #1
 801f1fc:	6144      	str	r4, [r0, #20]
 801f1fe:	6103      	str	r3, [r0, #16]
 801f200:	bd10      	pop	{r4, pc}
 801f202:	bf00      	nop
 801f204:	08022231 	.word	0x08022231
 801f208:	08022320 	.word	0x08022320

0801f20c <__multiply>:
 801f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f210:	4691      	mov	r9, r2
 801f212:	690a      	ldr	r2, [r1, #16]
 801f214:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f218:	429a      	cmp	r2, r3
 801f21a:	bfb8      	it	lt
 801f21c:	460b      	movlt	r3, r1
 801f21e:	460c      	mov	r4, r1
 801f220:	bfbc      	itt	lt
 801f222:	464c      	movlt	r4, r9
 801f224:	4699      	movlt	r9, r3
 801f226:	6927      	ldr	r7, [r4, #16]
 801f228:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f22c:	68a3      	ldr	r3, [r4, #8]
 801f22e:	6861      	ldr	r1, [r4, #4]
 801f230:	eb07 060a 	add.w	r6, r7, sl
 801f234:	42b3      	cmp	r3, r6
 801f236:	b085      	sub	sp, #20
 801f238:	bfb8      	it	lt
 801f23a:	3101      	addlt	r1, #1
 801f23c:	f7ff fe8e 	bl	801ef5c <_Balloc>
 801f240:	b930      	cbnz	r0, 801f250 <__multiply+0x44>
 801f242:	4602      	mov	r2, r0
 801f244:	4b44      	ldr	r3, [pc, #272]	; (801f358 <__multiply+0x14c>)
 801f246:	4845      	ldr	r0, [pc, #276]	; (801f35c <__multiply+0x150>)
 801f248:	f240 115d 	movw	r1, #349	; 0x15d
 801f24c:	f7fe fa2c 	bl	801d6a8 <__assert_func>
 801f250:	f100 0514 	add.w	r5, r0, #20
 801f254:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f258:	462b      	mov	r3, r5
 801f25a:	2200      	movs	r2, #0
 801f25c:	4543      	cmp	r3, r8
 801f25e:	d321      	bcc.n	801f2a4 <__multiply+0x98>
 801f260:	f104 0314 	add.w	r3, r4, #20
 801f264:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f268:	f109 0314 	add.w	r3, r9, #20
 801f26c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f270:	9202      	str	r2, [sp, #8]
 801f272:	1b3a      	subs	r2, r7, r4
 801f274:	3a15      	subs	r2, #21
 801f276:	f022 0203 	bic.w	r2, r2, #3
 801f27a:	3204      	adds	r2, #4
 801f27c:	f104 0115 	add.w	r1, r4, #21
 801f280:	428f      	cmp	r7, r1
 801f282:	bf38      	it	cc
 801f284:	2204      	movcc	r2, #4
 801f286:	9201      	str	r2, [sp, #4]
 801f288:	9a02      	ldr	r2, [sp, #8]
 801f28a:	9303      	str	r3, [sp, #12]
 801f28c:	429a      	cmp	r2, r3
 801f28e:	d80c      	bhi.n	801f2aa <__multiply+0x9e>
 801f290:	2e00      	cmp	r6, #0
 801f292:	dd03      	ble.n	801f29c <__multiply+0x90>
 801f294:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d05a      	beq.n	801f352 <__multiply+0x146>
 801f29c:	6106      	str	r6, [r0, #16]
 801f29e:	b005      	add	sp, #20
 801f2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2a4:	f843 2b04 	str.w	r2, [r3], #4
 801f2a8:	e7d8      	b.n	801f25c <__multiply+0x50>
 801f2aa:	f8b3 a000 	ldrh.w	sl, [r3]
 801f2ae:	f1ba 0f00 	cmp.w	sl, #0
 801f2b2:	d024      	beq.n	801f2fe <__multiply+0xf2>
 801f2b4:	f104 0e14 	add.w	lr, r4, #20
 801f2b8:	46a9      	mov	r9, r5
 801f2ba:	f04f 0c00 	mov.w	ip, #0
 801f2be:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f2c2:	f8d9 1000 	ldr.w	r1, [r9]
 801f2c6:	fa1f fb82 	uxth.w	fp, r2
 801f2ca:	b289      	uxth	r1, r1
 801f2cc:	fb0a 110b 	mla	r1, sl, fp, r1
 801f2d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f2d4:	f8d9 2000 	ldr.w	r2, [r9]
 801f2d8:	4461      	add	r1, ip
 801f2da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f2de:	fb0a c20b 	mla	r2, sl, fp, ip
 801f2e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f2e6:	b289      	uxth	r1, r1
 801f2e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f2ec:	4577      	cmp	r7, lr
 801f2ee:	f849 1b04 	str.w	r1, [r9], #4
 801f2f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f2f6:	d8e2      	bhi.n	801f2be <__multiply+0xb2>
 801f2f8:	9a01      	ldr	r2, [sp, #4]
 801f2fa:	f845 c002 	str.w	ip, [r5, r2]
 801f2fe:	9a03      	ldr	r2, [sp, #12]
 801f300:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f304:	3304      	adds	r3, #4
 801f306:	f1b9 0f00 	cmp.w	r9, #0
 801f30a:	d020      	beq.n	801f34e <__multiply+0x142>
 801f30c:	6829      	ldr	r1, [r5, #0]
 801f30e:	f104 0c14 	add.w	ip, r4, #20
 801f312:	46ae      	mov	lr, r5
 801f314:	f04f 0a00 	mov.w	sl, #0
 801f318:	f8bc b000 	ldrh.w	fp, [ip]
 801f31c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f320:	fb09 220b 	mla	r2, r9, fp, r2
 801f324:	4492      	add	sl, r2
 801f326:	b289      	uxth	r1, r1
 801f328:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801f32c:	f84e 1b04 	str.w	r1, [lr], #4
 801f330:	f85c 2b04 	ldr.w	r2, [ip], #4
 801f334:	f8be 1000 	ldrh.w	r1, [lr]
 801f338:	0c12      	lsrs	r2, r2, #16
 801f33a:	fb09 1102 	mla	r1, r9, r2, r1
 801f33e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801f342:	4567      	cmp	r7, ip
 801f344:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f348:	d8e6      	bhi.n	801f318 <__multiply+0x10c>
 801f34a:	9a01      	ldr	r2, [sp, #4]
 801f34c:	50a9      	str	r1, [r5, r2]
 801f34e:	3504      	adds	r5, #4
 801f350:	e79a      	b.n	801f288 <__multiply+0x7c>
 801f352:	3e01      	subs	r6, #1
 801f354:	e79c      	b.n	801f290 <__multiply+0x84>
 801f356:	bf00      	nop
 801f358:	08022231 	.word	0x08022231
 801f35c:	08022320 	.word	0x08022320

0801f360 <__pow5mult>:
 801f360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f364:	4615      	mov	r5, r2
 801f366:	f012 0203 	ands.w	r2, r2, #3
 801f36a:	4606      	mov	r6, r0
 801f36c:	460f      	mov	r7, r1
 801f36e:	d007      	beq.n	801f380 <__pow5mult+0x20>
 801f370:	4c25      	ldr	r4, [pc, #148]	; (801f408 <__pow5mult+0xa8>)
 801f372:	3a01      	subs	r2, #1
 801f374:	2300      	movs	r3, #0
 801f376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f37a:	f7ff fe51 	bl	801f020 <__multadd>
 801f37e:	4607      	mov	r7, r0
 801f380:	10ad      	asrs	r5, r5, #2
 801f382:	d03d      	beq.n	801f400 <__pow5mult+0xa0>
 801f384:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f386:	b97c      	cbnz	r4, 801f3a8 <__pow5mult+0x48>
 801f388:	2010      	movs	r0, #16
 801f38a:	f7fc f8ff 	bl	801b58c <malloc>
 801f38e:	4602      	mov	r2, r0
 801f390:	6270      	str	r0, [r6, #36]	; 0x24
 801f392:	b928      	cbnz	r0, 801f3a0 <__pow5mult+0x40>
 801f394:	4b1d      	ldr	r3, [pc, #116]	; (801f40c <__pow5mult+0xac>)
 801f396:	481e      	ldr	r0, [pc, #120]	; (801f410 <__pow5mult+0xb0>)
 801f398:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f39c:	f7fe f984 	bl	801d6a8 <__assert_func>
 801f3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f3a4:	6004      	str	r4, [r0, #0]
 801f3a6:	60c4      	str	r4, [r0, #12]
 801f3a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f3b0:	b94c      	cbnz	r4, 801f3c6 <__pow5mult+0x66>
 801f3b2:	f240 2171 	movw	r1, #625	; 0x271
 801f3b6:	4630      	mov	r0, r6
 801f3b8:	f7ff ff12 	bl	801f1e0 <__i2b>
 801f3bc:	2300      	movs	r3, #0
 801f3be:	f8c8 0008 	str.w	r0, [r8, #8]
 801f3c2:	4604      	mov	r4, r0
 801f3c4:	6003      	str	r3, [r0, #0]
 801f3c6:	f04f 0900 	mov.w	r9, #0
 801f3ca:	07eb      	lsls	r3, r5, #31
 801f3cc:	d50a      	bpl.n	801f3e4 <__pow5mult+0x84>
 801f3ce:	4639      	mov	r1, r7
 801f3d0:	4622      	mov	r2, r4
 801f3d2:	4630      	mov	r0, r6
 801f3d4:	f7ff ff1a 	bl	801f20c <__multiply>
 801f3d8:	4639      	mov	r1, r7
 801f3da:	4680      	mov	r8, r0
 801f3dc:	4630      	mov	r0, r6
 801f3de:	f7ff fdfd 	bl	801efdc <_Bfree>
 801f3e2:	4647      	mov	r7, r8
 801f3e4:	106d      	asrs	r5, r5, #1
 801f3e6:	d00b      	beq.n	801f400 <__pow5mult+0xa0>
 801f3e8:	6820      	ldr	r0, [r4, #0]
 801f3ea:	b938      	cbnz	r0, 801f3fc <__pow5mult+0x9c>
 801f3ec:	4622      	mov	r2, r4
 801f3ee:	4621      	mov	r1, r4
 801f3f0:	4630      	mov	r0, r6
 801f3f2:	f7ff ff0b 	bl	801f20c <__multiply>
 801f3f6:	6020      	str	r0, [r4, #0]
 801f3f8:	f8c0 9000 	str.w	r9, [r0]
 801f3fc:	4604      	mov	r4, r0
 801f3fe:	e7e4      	b.n	801f3ca <__pow5mult+0x6a>
 801f400:	4638      	mov	r0, r7
 801f402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f406:	bf00      	nop
 801f408:	08022470 	.word	0x08022470
 801f40c:	08022018 	.word	0x08022018
 801f410:	08022320 	.word	0x08022320

0801f414 <__lshift>:
 801f414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f418:	460c      	mov	r4, r1
 801f41a:	6849      	ldr	r1, [r1, #4]
 801f41c:	6923      	ldr	r3, [r4, #16]
 801f41e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f422:	68a3      	ldr	r3, [r4, #8]
 801f424:	4607      	mov	r7, r0
 801f426:	4691      	mov	r9, r2
 801f428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f42c:	f108 0601 	add.w	r6, r8, #1
 801f430:	42b3      	cmp	r3, r6
 801f432:	db0b      	blt.n	801f44c <__lshift+0x38>
 801f434:	4638      	mov	r0, r7
 801f436:	f7ff fd91 	bl	801ef5c <_Balloc>
 801f43a:	4605      	mov	r5, r0
 801f43c:	b948      	cbnz	r0, 801f452 <__lshift+0x3e>
 801f43e:	4602      	mov	r2, r0
 801f440:	4b2a      	ldr	r3, [pc, #168]	; (801f4ec <__lshift+0xd8>)
 801f442:	482b      	ldr	r0, [pc, #172]	; (801f4f0 <__lshift+0xdc>)
 801f444:	f240 11d9 	movw	r1, #473	; 0x1d9
 801f448:	f7fe f92e 	bl	801d6a8 <__assert_func>
 801f44c:	3101      	adds	r1, #1
 801f44e:	005b      	lsls	r3, r3, #1
 801f450:	e7ee      	b.n	801f430 <__lshift+0x1c>
 801f452:	2300      	movs	r3, #0
 801f454:	f100 0114 	add.w	r1, r0, #20
 801f458:	f100 0210 	add.w	r2, r0, #16
 801f45c:	4618      	mov	r0, r3
 801f45e:	4553      	cmp	r3, sl
 801f460:	db37      	blt.n	801f4d2 <__lshift+0xbe>
 801f462:	6920      	ldr	r0, [r4, #16]
 801f464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f468:	f104 0314 	add.w	r3, r4, #20
 801f46c:	f019 091f 	ands.w	r9, r9, #31
 801f470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f474:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f478:	d02f      	beq.n	801f4da <__lshift+0xc6>
 801f47a:	f1c9 0e20 	rsb	lr, r9, #32
 801f47e:	468a      	mov	sl, r1
 801f480:	f04f 0c00 	mov.w	ip, #0
 801f484:	681a      	ldr	r2, [r3, #0]
 801f486:	fa02 f209 	lsl.w	r2, r2, r9
 801f48a:	ea42 020c 	orr.w	r2, r2, ip
 801f48e:	f84a 2b04 	str.w	r2, [sl], #4
 801f492:	f853 2b04 	ldr.w	r2, [r3], #4
 801f496:	4298      	cmp	r0, r3
 801f498:	fa22 fc0e 	lsr.w	ip, r2, lr
 801f49c:	d8f2      	bhi.n	801f484 <__lshift+0x70>
 801f49e:	1b03      	subs	r3, r0, r4
 801f4a0:	3b15      	subs	r3, #21
 801f4a2:	f023 0303 	bic.w	r3, r3, #3
 801f4a6:	3304      	adds	r3, #4
 801f4a8:	f104 0215 	add.w	r2, r4, #21
 801f4ac:	4290      	cmp	r0, r2
 801f4ae:	bf38      	it	cc
 801f4b0:	2304      	movcc	r3, #4
 801f4b2:	f841 c003 	str.w	ip, [r1, r3]
 801f4b6:	f1bc 0f00 	cmp.w	ip, #0
 801f4ba:	d001      	beq.n	801f4c0 <__lshift+0xac>
 801f4bc:	f108 0602 	add.w	r6, r8, #2
 801f4c0:	3e01      	subs	r6, #1
 801f4c2:	4638      	mov	r0, r7
 801f4c4:	612e      	str	r6, [r5, #16]
 801f4c6:	4621      	mov	r1, r4
 801f4c8:	f7ff fd88 	bl	801efdc <_Bfree>
 801f4cc:	4628      	mov	r0, r5
 801f4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4d2:	f842 0f04 	str.w	r0, [r2, #4]!
 801f4d6:	3301      	adds	r3, #1
 801f4d8:	e7c1      	b.n	801f45e <__lshift+0x4a>
 801f4da:	3904      	subs	r1, #4
 801f4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 801f4e0:	f841 2f04 	str.w	r2, [r1, #4]!
 801f4e4:	4298      	cmp	r0, r3
 801f4e6:	d8f9      	bhi.n	801f4dc <__lshift+0xc8>
 801f4e8:	e7ea      	b.n	801f4c0 <__lshift+0xac>
 801f4ea:	bf00      	nop
 801f4ec:	08022231 	.word	0x08022231
 801f4f0:	08022320 	.word	0x08022320

0801f4f4 <__mcmp>:
 801f4f4:	b530      	push	{r4, r5, lr}
 801f4f6:	6902      	ldr	r2, [r0, #16]
 801f4f8:	690c      	ldr	r4, [r1, #16]
 801f4fa:	1b12      	subs	r2, r2, r4
 801f4fc:	d10e      	bne.n	801f51c <__mcmp+0x28>
 801f4fe:	f100 0314 	add.w	r3, r0, #20
 801f502:	3114      	adds	r1, #20
 801f504:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f508:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f50c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f510:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f514:	42a5      	cmp	r5, r4
 801f516:	d003      	beq.n	801f520 <__mcmp+0x2c>
 801f518:	d305      	bcc.n	801f526 <__mcmp+0x32>
 801f51a:	2201      	movs	r2, #1
 801f51c:	4610      	mov	r0, r2
 801f51e:	bd30      	pop	{r4, r5, pc}
 801f520:	4283      	cmp	r3, r0
 801f522:	d3f3      	bcc.n	801f50c <__mcmp+0x18>
 801f524:	e7fa      	b.n	801f51c <__mcmp+0x28>
 801f526:	f04f 32ff 	mov.w	r2, #4294967295
 801f52a:	e7f7      	b.n	801f51c <__mcmp+0x28>

0801f52c <__mdiff>:
 801f52c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f530:	460c      	mov	r4, r1
 801f532:	4606      	mov	r6, r0
 801f534:	4611      	mov	r1, r2
 801f536:	4620      	mov	r0, r4
 801f538:	4690      	mov	r8, r2
 801f53a:	f7ff ffdb 	bl	801f4f4 <__mcmp>
 801f53e:	1e05      	subs	r5, r0, #0
 801f540:	d110      	bne.n	801f564 <__mdiff+0x38>
 801f542:	4629      	mov	r1, r5
 801f544:	4630      	mov	r0, r6
 801f546:	f7ff fd09 	bl	801ef5c <_Balloc>
 801f54a:	b930      	cbnz	r0, 801f55a <__mdiff+0x2e>
 801f54c:	4b3a      	ldr	r3, [pc, #232]	; (801f638 <__mdiff+0x10c>)
 801f54e:	4602      	mov	r2, r0
 801f550:	f240 2132 	movw	r1, #562	; 0x232
 801f554:	4839      	ldr	r0, [pc, #228]	; (801f63c <__mdiff+0x110>)
 801f556:	f7fe f8a7 	bl	801d6a8 <__assert_func>
 801f55a:	2301      	movs	r3, #1
 801f55c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f564:	bfa4      	itt	ge
 801f566:	4643      	movge	r3, r8
 801f568:	46a0      	movge	r8, r4
 801f56a:	4630      	mov	r0, r6
 801f56c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f570:	bfa6      	itte	ge
 801f572:	461c      	movge	r4, r3
 801f574:	2500      	movge	r5, #0
 801f576:	2501      	movlt	r5, #1
 801f578:	f7ff fcf0 	bl	801ef5c <_Balloc>
 801f57c:	b920      	cbnz	r0, 801f588 <__mdiff+0x5c>
 801f57e:	4b2e      	ldr	r3, [pc, #184]	; (801f638 <__mdiff+0x10c>)
 801f580:	4602      	mov	r2, r0
 801f582:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f586:	e7e5      	b.n	801f554 <__mdiff+0x28>
 801f588:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f58c:	6926      	ldr	r6, [r4, #16]
 801f58e:	60c5      	str	r5, [r0, #12]
 801f590:	f104 0914 	add.w	r9, r4, #20
 801f594:	f108 0514 	add.w	r5, r8, #20
 801f598:	f100 0e14 	add.w	lr, r0, #20
 801f59c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f5a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f5a4:	f108 0210 	add.w	r2, r8, #16
 801f5a8:	46f2      	mov	sl, lr
 801f5aa:	2100      	movs	r1, #0
 801f5ac:	f859 3b04 	ldr.w	r3, [r9], #4
 801f5b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f5b4:	fa1f f883 	uxth.w	r8, r3
 801f5b8:	fa11 f18b 	uxtah	r1, r1, fp
 801f5bc:	0c1b      	lsrs	r3, r3, #16
 801f5be:	eba1 0808 	sub.w	r8, r1, r8
 801f5c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f5c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f5ca:	fa1f f888 	uxth.w	r8, r8
 801f5ce:	1419      	asrs	r1, r3, #16
 801f5d0:	454e      	cmp	r6, r9
 801f5d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f5d6:	f84a 3b04 	str.w	r3, [sl], #4
 801f5da:	d8e7      	bhi.n	801f5ac <__mdiff+0x80>
 801f5dc:	1b33      	subs	r3, r6, r4
 801f5de:	3b15      	subs	r3, #21
 801f5e0:	f023 0303 	bic.w	r3, r3, #3
 801f5e4:	3304      	adds	r3, #4
 801f5e6:	3415      	adds	r4, #21
 801f5e8:	42a6      	cmp	r6, r4
 801f5ea:	bf38      	it	cc
 801f5ec:	2304      	movcc	r3, #4
 801f5ee:	441d      	add	r5, r3
 801f5f0:	4473      	add	r3, lr
 801f5f2:	469e      	mov	lr, r3
 801f5f4:	462e      	mov	r6, r5
 801f5f6:	4566      	cmp	r6, ip
 801f5f8:	d30e      	bcc.n	801f618 <__mdiff+0xec>
 801f5fa:	f10c 0203 	add.w	r2, ip, #3
 801f5fe:	1b52      	subs	r2, r2, r5
 801f600:	f022 0203 	bic.w	r2, r2, #3
 801f604:	3d03      	subs	r5, #3
 801f606:	45ac      	cmp	ip, r5
 801f608:	bf38      	it	cc
 801f60a:	2200      	movcc	r2, #0
 801f60c:	441a      	add	r2, r3
 801f60e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f612:	b17b      	cbz	r3, 801f634 <__mdiff+0x108>
 801f614:	6107      	str	r7, [r0, #16]
 801f616:	e7a3      	b.n	801f560 <__mdiff+0x34>
 801f618:	f856 8b04 	ldr.w	r8, [r6], #4
 801f61c:	fa11 f288 	uxtah	r2, r1, r8
 801f620:	1414      	asrs	r4, r2, #16
 801f622:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f626:	b292      	uxth	r2, r2
 801f628:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f62c:	f84e 2b04 	str.w	r2, [lr], #4
 801f630:	1421      	asrs	r1, r4, #16
 801f632:	e7e0      	b.n	801f5f6 <__mdiff+0xca>
 801f634:	3f01      	subs	r7, #1
 801f636:	e7ea      	b.n	801f60e <__mdiff+0xe2>
 801f638:	08022231 	.word	0x08022231
 801f63c:	08022320 	.word	0x08022320

0801f640 <__ulp>:
 801f640:	b082      	sub	sp, #8
 801f642:	ed8d 0b00 	vstr	d0, [sp]
 801f646:	9b01      	ldr	r3, [sp, #4]
 801f648:	4912      	ldr	r1, [pc, #72]	; (801f694 <__ulp+0x54>)
 801f64a:	4019      	ands	r1, r3
 801f64c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f650:	2900      	cmp	r1, #0
 801f652:	dd05      	ble.n	801f660 <__ulp+0x20>
 801f654:	2200      	movs	r2, #0
 801f656:	460b      	mov	r3, r1
 801f658:	ec43 2b10 	vmov	d0, r2, r3
 801f65c:	b002      	add	sp, #8
 801f65e:	4770      	bx	lr
 801f660:	4249      	negs	r1, r1
 801f662:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f666:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f66a:	f04f 0200 	mov.w	r2, #0
 801f66e:	f04f 0300 	mov.w	r3, #0
 801f672:	da04      	bge.n	801f67e <__ulp+0x3e>
 801f674:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f678:	fa41 f300 	asr.w	r3, r1, r0
 801f67c:	e7ec      	b.n	801f658 <__ulp+0x18>
 801f67e:	f1a0 0114 	sub.w	r1, r0, #20
 801f682:	291e      	cmp	r1, #30
 801f684:	bfda      	itte	le
 801f686:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f68a:	fa20 f101 	lsrle.w	r1, r0, r1
 801f68e:	2101      	movgt	r1, #1
 801f690:	460a      	mov	r2, r1
 801f692:	e7e1      	b.n	801f658 <__ulp+0x18>
 801f694:	7ff00000 	.word	0x7ff00000

0801f698 <__b2d>:
 801f698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f69a:	6905      	ldr	r5, [r0, #16]
 801f69c:	f100 0714 	add.w	r7, r0, #20
 801f6a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f6a4:	1f2e      	subs	r6, r5, #4
 801f6a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f6aa:	4620      	mov	r0, r4
 801f6ac:	f7ff fd48 	bl	801f140 <__hi0bits>
 801f6b0:	f1c0 0320 	rsb	r3, r0, #32
 801f6b4:	280a      	cmp	r0, #10
 801f6b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f734 <__b2d+0x9c>
 801f6ba:	600b      	str	r3, [r1, #0]
 801f6bc:	dc14      	bgt.n	801f6e8 <__b2d+0x50>
 801f6be:	f1c0 0e0b 	rsb	lr, r0, #11
 801f6c2:	fa24 f10e 	lsr.w	r1, r4, lr
 801f6c6:	42b7      	cmp	r7, r6
 801f6c8:	ea41 030c 	orr.w	r3, r1, ip
 801f6cc:	bf34      	ite	cc
 801f6ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f6d2:	2100      	movcs	r1, #0
 801f6d4:	3015      	adds	r0, #21
 801f6d6:	fa04 f000 	lsl.w	r0, r4, r0
 801f6da:	fa21 f10e 	lsr.w	r1, r1, lr
 801f6de:	ea40 0201 	orr.w	r2, r0, r1
 801f6e2:	ec43 2b10 	vmov	d0, r2, r3
 801f6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6e8:	42b7      	cmp	r7, r6
 801f6ea:	bf3a      	itte	cc
 801f6ec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f6f0:	f1a5 0608 	subcc.w	r6, r5, #8
 801f6f4:	2100      	movcs	r1, #0
 801f6f6:	380b      	subs	r0, #11
 801f6f8:	d017      	beq.n	801f72a <__b2d+0x92>
 801f6fa:	f1c0 0c20 	rsb	ip, r0, #32
 801f6fe:	fa04 f500 	lsl.w	r5, r4, r0
 801f702:	42be      	cmp	r6, r7
 801f704:	fa21 f40c 	lsr.w	r4, r1, ip
 801f708:	ea45 0504 	orr.w	r5, r5, r4
 801f70c:	bf8c      	ite	hi
 801f70e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f712:	2400      	movls	r4, #0
 801f714:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f718:	fa01 f000 	lsl.w	r0, r1, r0
 801f71c:	fa24 f40c 	lsr.w	r4, r4, ip
 801f720:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f724:	ea40 0204 	orr.w	r2, r0, r4
 801f728:	e7db      	b.n	801f6e2 <__b2d+0x4a>
 801f72a:	ea44 030c 	orr.w	r3, r4, ip
 801f72e:	460a      	mov	r2, r1
 801f730:	e7d7      	b.n	801f6e2 <__b2d+0x4a>
 801f732:	bf00      	nop
 801f734:	3ff00000 	.word	0x3ff00000

0801f738 <__d2b>:
 801f738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f73c:	4689      	mov	r9, r1
 801f73e:	2101      	movs	r1, #1
 801f740:	ec57 6b10 	vmov	r6, r7, d0
 801f744:	4690      	mov	r8, r2
 801f746:	f7ff fc09 	bl	801ef5c <_Balloc>
 801f74a:	4604      	mov	r4, r0
 801f74c:	b930      	cbnz	r0, 801f75c <__d2b+0x24>
 801f74e:	4602      	mov	r2, r0
 801f750:	4b25      	ldr	r3, [pc, #148]	; (801f7e8 <__d2b+0xb0>)
 801f752:	4826      	ldr	r0, [pc, #152]	; (801f7ec <__d2b+0xb4>)
 801f754:	f240 310a 	movw	r1, #778	; 0x30a
 801f758:	f7fd ffa6 	bl	801d6a8 <__assert_func>
 801f75c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f764:	bb35      	cbnz	r5, 801f7b4 <__d2b+0x7c>
 801f766:	2e00      	cmp	r6, #0
 801f768:	9301      	str	r3, [sp, #4]
 801f76a:	d028      	beq.n	801f7be <__d2b+0x86>
 801f76c:	4668      	mov	r0, sp
 801f76e:	9600      	str	r6, [sp, #0]
 801f770:	f7ff fd06 	bl	801f180 <__lo0bits>
 801f774:	9900      	ldr	r1, [sp, #0]
 801f776:	b300      	cbz	r0, 801f7ba <__d2b+0x82>
 801f778:	9a01      	ldr	r2, [sp, #4]
 801f77a:	f1c0 0320 	rsb	r3, r0, #32
 801f77e:	fa02 f303 	lsl.w	r3, r2, r3
 801f782:	430b      	orrs	r3, r1
 801f784:	40c2      	lsrs	r2, r0
 801f786:	6163      	str	r3, [r4, #20]
 801f788:	9201      	str	r2, [sp, #4]
 801f78a:	9b01      	ldr	r3, [sp, #4]
 801f78c:	61a3      	str	r3, [r4, #24]
 801f78e:	2b00      	cmp	r3, #0
 801f790:	bf14      	ite	ne
 801f792:	2202      	movne	r2, #2
 801f794:	2201      	moveq	r2, #1
 801f796:	6122      	str	r2, [r4, #16]
 801f798:	b1d5      	cbz	r5, 801f7d0 <__d2b+0x98>
 801f79a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f79e:	4405      	add	r5, r0
 801f7a0:	f8c9 5000 	str.w	r5, [r9]
 801f7a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f7a8:	f8c8 0000 	str.w	r0, [r8]
 801f7ac:	4620      	mov	r0, r4
 801f7ae:	b003      	add	sp, #12
 801f7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f7b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f7b8:	e7d5      	b.n	801f766 <__d2b+0x2e>
 801f7ba:	6161      	str	r1, [r4, #20]
 801f7bc:	e7e5      	b.n	801f78a <__d2b+0x52>
 801f7be:	a801      	add	r0, sp, #4
 801f7c0:	f7ff fcde 	bl	801f180 <__lo0bits>
 801f7c4:	9b01      	ldr	r3, [sp, #4]
 801f7c6:	6163      	str	r3, [r4, #20]
 801f7c8:	2201      	movs	r2, #1
 801f7ca:	6122      	str	r2, [r4, #16]
 801f7cc:	3020      	adds	r0, #32
 801f7ce:	e7e3      	b.n	801f798 <__d2b+0x60>
 801f7d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f7d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f7d8:	f8c9 0000 	str.w	r0, [r9]
 801f7dc:	6918      	ldr	r0, [r3, #16]
 801f7de:	f7ff fcaf 	bl	801f140 <__hi0bits>
 801f7e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f7e6:	e7df      	b.n	801f7a8 <__d2b+0x70>
 801f7e8:	08022231 	.word	0x08022231
 801f7ec:	08022320 	.word	0x08022320

0801f7f0 <__ratio>:
 801f7f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f4:	4688      	mov	r8, r1
 801f7f6:	4669      	mov	r1, sp
 801f7f8:	4681      	mov	r9, r0
 801f7fa:	f7ff ff4d 	bl	801f698 <__b2d>
 801f7fe:	a901      	add	r1, sp, #4
 801f800:	4640      	mov	r0, r8
 801f802:	ec55 4b10 	vmov	r4, r5, d0
 801f806:	f7ff ff47 	bl	801f698 <__b2d>
 801f80a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f80e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801f812:	eba3 0c02 	sub.w	ip, r3, r2
 801f816:	e9dd 3200 	ldrd	r3, r2, [sp]
 801f81a:	1a9b      	subs	r3, r3, r2
 801f81c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801f820:	ec51 0b10 	vmov	r0, r1, d0
 801f824:	2b00      	cmp	r3, #0
 801f826:	bfd6      	itet	le
 801f828:	460a      	movle	r2, r1
 801f82a:	462a      	movgt	r2, r5
 801f82c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f830:	468b      	mov	fp, r1
 801f832:	462f      	mov	r7, r5
 801f834:	bfd4      	ite	le
 801f836:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801f83a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f83e:	4620      	mov	r0, r4
 801f840:	ee10 2a10 	vmov	r2, s0
 801f844:	465b      	mov	r3, fp
 801f846:	4639      	mov	r1, r7
 801f848:	f7e1 f818 	bl	800087c <__aeabi_ddiv>
 801f84c:	ec41 0b10 	vmov	d0, r0, r1
 801f850:	b003      	add	sp, #12
 801f852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f856 <__copybits>:
 801f856:	3901      	subs	r1, #1
 801f858:	b570      	push	{r4, r5, r6, lr}
 801f85a:	1149      	asrs	r1, r1, #5
 801f85c:	6914      	ldr	r4, [r2, #16]
 801f85e:	3101      	adds	r1, #1
 801f860:	f102 0314 	add.w	r3, r2, #20
 801f864:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f868:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f86c:	1f05      	subs	r5, r0, #4
 801f86e:	42a3      	cmp	r3, r4
 801f870:	d30c      	bcc.n	801f88c <__copybits+0x36>
 801f872:	1aa3      	subs	r3, r4, r2
 801f874:	3b11      	subs	r3, #17
 801f876:	f023 0303 	bic.w	r3, r3, #3
 801f87a:	3211      	adds	r2, #17
 801f87c:	42a2      	cmp	r2, r4
 801f87e:	bf88      	it	hi
 801f880:	2300      	movhi	r3, #0
 801f882:	4418      	add	r0, r3
 801f884:	2300      	movs	r3, #0
 801f886:	4288      	cmp	r0, r1
 801f888:	d305      	bcc.n	801f896 <__copybits+0x40>
 801f88a:	bd70      	pop	{r4, r5, r6, pc}
 801f88c:	f853 6b04 	ldr.w	r6, [r3], #4
 801f890:	f845 6f04 	str.w	r6, [r5, #4]!
 801f894:	e7eb      	b.n	801f86e <__copybits+0x18>
 801f896:	f840 3b04 	str.w	r3, [r0], #4
 801f89a:	e7f4      	b.n	801f886 <__copybits+0x30>

0801f89c <__any_on>:
 801f89c:	f100 0214 	add.w	r2, r0, #20
 801f8a0:	6900      	ldr	r0, [r0, #16]
 801f8a2:	114b      	asrs	r3, r1, #5
 801f8a4:	4298      	cmp	r0, r3
 801f8a6:	b510      	push	{r4, lr}
 801f8a8:	db11      	blt.n	801f8ce <__any_on+0x32>
 801f8aa:	dd0a      	ble.n	801f8c2 <__any_on+0x26>
 801f8ac:	f011 011f 	ands.w	r1, r1, #31
 801f8b0:	d007      	beq.n	801f8c2 <__any_on+0x26>
 801f8b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f8b6:	fa24 f001 	lsr.w	r0, r4, r1
 801f8ba:	fa00 f101 	lsl.w	r1, r0, r1
 801f8be:	428c      	cmp	r4, r1
 801f8c0:	d10b      	bne.n	801f8da <__any_on+0x3e>
 801f8c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f8c6:	4293      	cmp	r3, r2
 801f8c8:	d803      	bhi.n	801f8d2 <__any_on+0x36>
 801f8ca:	2000      	movs	r0, #0
 801f8cc:	bd10      	pop	{r4, pc}
 801f8ce:	4603      	mov	r3, r0
 801f8d0:	e7f7      	b.n	801f8c2 <__any_on+0x26>
 801f8d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f8d6:	2900      	cmp	r1, #0
 801f8d8:	d0f5      	beq.n	801f8c6 <__any_on+0x2a>
 801f8da:	2001      	movs	r0, #1
 801f8dc:	e7f6      	b.n	801f8cc <__any_on+0x30>

0801f8de <_calloc_r>:
 801f8de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f8e0:	fba1 2402 	umull	r2, r4, r1, r2
 801f8e4:	b94c      	cbnz	r4, 801f8fa <_calloc_r+0x1c>
 801f8e6:	4611      	mov	r1, r2
 801f8e8:	9201      	str	r2, [sp, #4]
 801f8ea:	f7fb fef3 	bl	801b6d4 <_malloc_r>
 801f8ee:	9a01      	ldr	r2, [sp, #4]
 801f8f0:	4605      	mov	r5, r0
 801f8f2:	b930      	cbnz	r0, 801f902 <_calloc_r+0x24>
 801f8f4:	4628      	mov	r0, r5
 801f8f6:	b003      	add	sp, #12
 801f8f8:	bd30      	pop	{r4, r5, pc}
 801f8fa:	220c      	movs	r2, #12
 801f8fc:	6002      	str	r2, [r0, #0]
 801f8fe:	2500      	movs	r5, #0
 801f900:	e7f8      	b.n	801f8f4 <_calloc_r+0x16>
 801f902:	4621      	mov	r1, r4
 801f904:	f7fb fe72 	bl	801b5ec <memset>
 801f908:	e7f4      	b.n	801f8f4 <_calloc_r+0x16>

0801f90a <__ssputs_r>:
 801f90a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f90e:	688e      	ldr	r6, [r1, #8]
 801f910:	429e      	cmp	r6, r3
 801f912:	4682      	mov	sl, r0
 801f914:	460c      	mov	r4, r1
 801f916:	4690      	mov	r8, r2
 801f918:	461f      	mov	r7, r3
 801f91a:	d838      	bhi.n	801f98e <__ssputs_r+0x84>
 801f91c:	898a      	ldrh	r2, [r1, #12]
 801f91e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f922:	d032      	beq.n	801f98a <__ssputs_r+0x80>
 801f924:	6825      	ldr	r5, [r4, #0]
 801f926:	6909      	ldr	r1, [r1, #16]
 801f928:	eba5 0901 	sub.w	r9, r5, r1
 801f92c:	6965      	ldr	r5, [r4, #20]
 801f92e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f936:	3301      	adds	r3, #1
 801f938:	444b      	add	r3, r9
 801f93a:	106d      	asrs	r5, r5, #1
 801f93c:	429d      	cmp	r5, r3
 801f93e:	bf38      	it	cc
 801f940:	461d      	movcc	r5, r3
 801f942:	0553      	lsls	r3, r2, #21
 801f944:	d531      	bpl.n	801f9aa <__ssputs_r+0xa0>
 801f946:	4629      	mov	r1, r5
 801f948:	f7fb fec4 	bl	801b6d4 <_malloc_r>
 801f94c:	4606      	mov	r6, r0
 801f94e:	b950      	cbnz	r0, 801f966 <__ssputs_r+0x5c>
 801f950:	230c      	movs	r3, #12
 801f952:	f8ca 3000 	str.w	r3, [sl]
 801f956:	89a3      	ldrh	r3, [r4, #12]
 801f958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f95c:	81a3      	strh	r3, [r4, #12]
 801f95e:	f04f 30ff 	mov.w	r0, #4294967295
 801f962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f966:	6921      	ldr	r1, [r4, #16]
 801f968:	464a      	mov	r2, r9
 801f96a:	f7fb fe17 	bl	801b59c <memcpy>
 801f96e:	89a3      	ldrh	r3, [r4, #12]
 801f970:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f978:	81a3      	strh	r3, [r4, #12]
 801f97a:	6126      	str	r6, [r4, #16]
 801f97c:	6165      	str	r5, [r4, #20]
 801f97e:	444e      	add	r6, r9
 801f980:	eba5 0509 	sub.w	r5, r5, r9
 801f984:	6026      	str	r6, [r4, #0]
 801f986:	60a5      	str	r5, [r4, #8]
 801f988:	463e      	mov	r6, r7
 801f98a:	42be      	cmp	r6, r7
 801f98c:	d900      	bls.n	801f990 <__ssputs_r+0x86>
 801f98e:	463e      	mov	r6, r7
 801f990:	6820      	ldr	r0, [r4, #0]
 801f992:	4632      	mov	r2, r6
 801f994:	4641      	mov	r1, r8
 801f996:	f7fb fe0f 	bl	801b5b8 <memmove>
 801f99a:	68a3      	ldr	r3, [r4, #8]
 801f99c:	1b9b      	subs	r3, r3, r6
 801f99e:	60a3      	str	r3, [r4, #8]
 801f9a0:	6823      	ldr	r3, [r4, #0]
 801f9a2:	4433      	add	r3, r6
 801f9a4:	6023      	str	r3, [r4, #0]
 801f9a6:	2000      	movs	r0, #0
 801f9a8:	e7db      	b.n	801f962 <__ssputs_r+0x58>
 801f9aa:	462a      	mov	r2, r5
 801f9ac:	f000 fb2e 	bl	802000c <_realloc_r>
 801f9b0:	4606      	mov	r6, r0
 801f9b2:	2800      	cmp	r0, #0
 801f9b4:	d1e1      	bne.n	801f97a <__ssputs_r+0x70>
 801f9b6:	6921      	ldr	r1, [r4, #16]
 801f9b8:	4650      	mov	r0, sl
 801f9ba:	f7fb fe1f 	bl	801b5fc <_free_r>
 801f9be:	e7c7      	b.n	801f950 <__ssputs_r+0x46>

0801f9c0 <_svfiprintf_r>:
 801f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9c4:	4698      	mov	r8, r3
 801f9c6:	898b      	ldrh	r3, [r1, #12]
 801f9c8:	061b      	lsls	r3, r3, #24
 801f9ca:	b09d      	sub	sp, #116	; 0x74
 801f9cc:	4607      	mov	r7, r0
 801f9ce:	460d      	mov	r5, r1
 801f9d0:	4614      	mov	r4, r2
 801f9d2:	d50e      	bpl.n	801f9f2 <_svfiprintf_r+0x32>
 801f9d4:	690b      	ldr	r3, [r1, #16]
 801f9d6:	b963      	cbnz	r3, 801f9f2 <_svfiprintf_r+0x32>
 801f9d8:	2140      	movs	r1, #64	; 0x40
 801f9da:	f7fb fe7b 	bl	801b6d4 <_malloc_r>
 801f9de:	6028      	str	r0, [r5, #0]
 801f9e0:	6128      	str	r0, [r5, #16]
 801f9e2:	b920      	cbnz	r0, 801f9ee <_svfiprintf_r+0x2e>
 801f9e4:	230c      	movs	r3, #12
 801f9e6:	603b      	str	r3, [r7, #0]
 801f9e8:	f04f 30ff 	mov.w	r0, #4294967295
 801f9ec:	e0d1      	b.n	801fb92 <_svfiprintf_r+0x1d2>
 801f9ee:	2340      	movs	r3, #64	; 0x40
 801f9f0:	616b      	str	r3, [r5, #20]
 801f9f2:	2300      	movs	r3, #0
 801f9f4:	9309      	str	r3, [sp, #36]	; 0x24
 801f9f6:	2320      	movs	r3, #32
 801f9f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f9fc:	f8cd 800c 	str.w	r8, [sp, #12]
 801fa00:	2330      	movs	r3, #48	; 0x30
 801fa02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801fbac <_svfiprintf_r+0x1ec>
 801fa06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fa0a:	f04f 0901 	mov.w	r9, #1
 801fa0e:	4623      	mov	r3, r4
 801fa10:	469a      	mov	sl, r3
 801fa12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa16:	b10a      	cbz	r2, 801fa1c <_svfiprintf_r+0x5c>
 801fa18:	2a25      	cmp	r2, #37	; 0x25
 801fa1a:	d1f9      	bne.n	801fa10 <_svfiprintf_r+0x50>
 801fa1c:	ebba 0b04 	subs.w	fp, sl, r4
 801fa20:	d00b      	beq.n	801fa3a <_svfiprintf_r+0x7a>
 801fa22:	465b      	mov	r3, fp
 801fa24:	4622      	mov	r2, r4
 801fa26:	4629      	mov	r1, r5
 801fa28:	4638      	mov	r0, r7
 801fa2a:	f7ff ff6e 	bl	801f90a <__ssputs_r>
 801fa2e:	3001      	adds	r0, #1
 801fa30:	f000 80aa 	beq.w	801fb88 <_svfiprintf_r+0x1c8>
 801fa34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa36:	445a      	add	r2, fp
 801fa38:	9209      	str	r2, [sp, #36]	; 0x24
 801fa3a:	f89a 3000 	ldrb.w	r3, [sl]
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	f000 80a2 	beq.w	801fb88 <_svfiprintf_r+0x1c8>
 801fa44:	2300      	movs	r3, #0
 801fa46:	f04f 32ff 	mov.w	r2, #4294967295
 801fa4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fa4e:	f10a 0a01 	add.w	sl, sl, #1
 801fa52:	9304      	str	r3, [sp, #16]
 801fa54:	9307      	str	r3, [sp, #28]
 801fa56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fa5a:	931a      	str	r3, [sp, #104]	; 0x68
 801fa5c:	4654      	mov	r4, sl
 801fa5e:	2205      	movs	r2, #5
 801fa60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa64:	4851      	ldr	r0, [pc, #324]	; (801fbac <_svfiprintf_r+0x1ec>)
 801fa66:	f7e0 fbd3 	bl	8000210 <memchr>
 801fa6a:	9a04      	ldr	r2, [sp, #16]
 801fa6c:	b9d8      	cbnz	r0, 801faa6 <_svfiprintf_r+0xe6>
 801fa6e:	06d0      	lsls	r0, r2, #27
 801fa70:	bf44      	itt	mi
 801fa72:	2320      	movmi	r3, #32
 801fa74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fa78:	0711      	lsls	r1, r2, #28
 801fa7a:	bf44      	itt	mi
 801fa7c:	232b      	movmi	r3, #43	; 0x2b
 801fa7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fa82:	f89a 3000 	ldrb.w	r3, [sl]
 801fa86:	2b2a      	cmp	r3, #42	; 0x2a
 801fa88:	d015      	beq.n	801fab6 <_svfiprintf_r+0xf6>
 801fa8a:	9a07      	ldr	r2, [sp, #28]
 801fa8c:	4654      	mov	r4, sl
 801fa8e:	2000      	movs	r0, #0
 801fa90:	f04f 0c0a 	mov.w	ip, #10
 801fa94:	4621      	mov	r1, r4
 801fa96:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fa9a:	3b30      	subs	r3, #48	; 0x30
 801fa9c:	2b09      	cmp	r3, #9
 801fa9e:	d94e      	bls.n	801fb3e <_svfiprintf_r+0x17e>
 801faa0:	b1b0      	cbz	r0, 801fad0 <_svfiprintf_r+0x110>
 801faa2:	9207      	str	r2, [sp, #28]
 801faa4:	e014      	b.n	801fad0 <_svfiprintf_r+0x110>
 801faa6:	eba0 0308 	sub.w	r3, r0, r8
 801faaa:	fa09 f303 	lsl.w	r3, r9, r3
 801faae:	4313      	orrs	r3, r2
 801fab0:	9304      	str	r3, [sp, #16]
 801fab2:	46a2      	mov	sl, r4
 801fab4:	e7d2      	b.n	801fa5c <_svfiprintf_r+0x9c>
 801fab6:	9b03      	ldr	r3, [sp, #12]
 801fab8:	1d19      	adds	r1, r3, #4
 801faba:	681b      	ldr	r3, [r3, #0]
 801fabc:	9103      	str	r1, [sp, #12]
 801fabe:	2b00      	cmp	r3, #0
 801fac0:	bfbb      	ittet	lt
 801fac2:	425b      	neglt	r3, r3
 801fac4:	f042 0202 	orrlt.w	r2, r2, #2
 801fac8:	9307      	strge	r3, [sp, #28]
 801faca:	9307      	strlt	r3, [sp, #28]
 801facc:	bfb8      	it	lt
 801face:	9204      	strlt	r2, [sp, #16]
 801fad0:	7823      	ldrb	r3, [r4, #0]
 801fad2:	2b2e      	cmp	r3, #46	; 0x2e
 801fad4:	d10c      	bne.n	801faf0 <_svfiprintf_r+0x130>
 801fad6:	7863      	ldrb	r3, [r4, #1]
 801fad8:	2b2a      	cmp	r3, #42	; 0x2a
 801fada:	d135      	bne.n	801fb48 <_svfiprintf_r+0x188>
 801fadc:	9b03      	ldr	r3, [sp, #12]
 801fade:	1d1a      	adds	r2, r3, #4
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	9203      	str	r2, [sp, #12]
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	bfb8      	it	lt
 801fae8:	f04f 33ff 	movlt.w	r3, #4294967295
 801faec:	3402      	adds	r4, #2
 801faee:	9305      	str	r3, [sp, #20]
 801faf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801fbbc <_svfiprintf_r+0x1fc>
 801faf4:	7821      	ldrb	r1, [r4, #0]
 801faf6:	2203      	movs	r2, #3
 801faf8:	4650      	mov	r0, sl
 801fafa:	f7e0 fb89 	bl	8000210 <memchr>
 801fafe:	b140      	cbz	r0, 801fb12 <_svfiprintf_r+0x152>
 801fb00:	2340      	movs	r3, #64	; 0x40
 801fb02:	eba0 000a 	sub.w	r0, r0, sl
 801fb06:	fa03 f000 	lsl.w	r0, r3, r0
 801fb0a:	9b04      	ldr	r3, [sp, #16]
 801fb0c:	4303      	orrs	r3, r0
 801fb0e:	3401      	adds	r4, #1
 801fb10:	9304      	str	r3, [sp, #16]
 801fb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb16:	4826      	ldr	r0, [pc, #152]	; (801fbb0 <_svfiprintf_r+0x1f0>)
 801fb18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fb1c:	2206      	movs	r2, #6
 801fb1e:	f7e0 fb77 	bl	8000210 <memchr>
 801fb22:	2800      	cmp	r0, #0
 801fb24:	d038      	beq.n	801fb98 <_svfiprintf_r+0x1d8>
 801fb26:	4b23      	ldr	r3, [pc, #140]	; (801fbb4 <_svfiprintf_r+0x1f4>)
 801fb28:	bb1b      	cbnz	r3, 801fb72 <_svfiprintf_r+0x1b2>
 801fb2a:	9b03      	ldr	r3, [sp, #12]
 801fb2c:	3307      	adds	r3, #7
 801fb2e:	f023 0307 	bic.w	r3, r3, #7
 801fb32:	3308      	adds	r3, #8
 801fb34:	9303      	str	r3, [sp, #12]
 801fb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb38:	4433      	add	r3, r6
 801fb3a:	9309      	str	r3, [sp, #36]	; 0x24
 801fb3c:	e767      	b.n	801fa0e <_svfiprintf_r+0x4e>
 801fb3e:	fb0c 3202 	mla	r2, ip, r2, r3
 801fb42:	460c      	mov	r4, r1
 801fb44:	2001      	movs	r0, #1
 801fb46:	e7a5      	b.n	801fa94 <_svfiprintf_r+0xd4>
 801fb48:	2300      	movs	r3, #0
 801fb4a:	3401      	adds	r4, #1
 801fb4c:	9305      	str	r3, [sp, #20]
 801fb4e:	4619      	mov	r1, r3
 801fb50:	f04f 0c0a 	mov.w	ip, #10
 801fb54:	4620      	mov	r0, r4
 801fb56:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fb5a:	3a30      	subs	r2, #48	; 0x30
 801fb5c:	2a09      	cmp	r2, #9
 801fb5e:	d903      	bls.n	801fb68 <_svfiprintf_r+0x1a8>
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d0c5      	beq.n	801faf0 <_svfiprintf_r+0x130>
 801fb64:	9105      	str	r1, [sp, #20]
 801fb66:	e7c3      	b.n	801faf0 <_svfiprintf_r+0x130>
 801fb68:	fb0c 2101 	mla	r1, ip, r1, r2
 801fb6c:	4604      	mov	r4, r0
 801fb6e:	2301      	movs	r3, #1
 801fb70:	e7f0      	b.n	801fb54 <_svfiprintf_r+0x194>
 801fb72:	ab03      	add	r3, sp, #12
 801fb74:	9300      	str	r3, [sp, #0]
 801fb76:	462a      	mov	r2, r5
 801fb78:	4b0f      	ldr	r3, [pc, #60]	; (801fbb8 <_svfiprintf_r+0x1f8>)
 801fb7a:	a904      	add	r1, sp, #16
 801fb7c:	4638      	mov	r0, r7
 801fb7e:	f7fb febd 	bl	801b8fc <_printf_float>
 801fb82:	1c42      	adds	r2, r0, #1
 801fb84:	4606      	mov	r6, r0
 801fb86:	d1d6      	bne.n	801fb36 <_svfiprintf_r+0x176>
 801fb88:	89ab      	ldrh	r3, [r5, #12]
 801fb8a:	065b      	lsls	r3, r3, #25
 801fb8c:	f53f af2c 	bmi.w	801f9e8 <_svfiprintf_r+0x28>
 801fb90:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fb92:	b01d      	add	sp, #116	; 0x74
 801fb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb98:	ab03      	add	r3, sp, #12
 801fb9a:	9300      	str	r3, [sp, #0]
 801fb9c:	462a      	mov	r2, r5
 801fb9e:	4b06      	ldr	r3, [pc, #24]	; (801fbb8 <_svfiprintf_r+0x1f8>)
 801fba0:	a904      	add	r1, sp, #16
 801fba2:	4638      	mov	r0, r7
 801fba4:	f7fc f94e 	bl	801be44 <_printf_i>
 801fba8:	e7eb      	b.n	801fb82 <_svfiprintf_r+0x1c2>
 801fbaa:	bf00      	nop
 801fbac:	0802247c 	.word	0x0802247c
 801fbb0:	08022486 	.word	0x08022486
 801fbb4:	0801b8fd 	.word	0x0801b8fd
 801fbb8:	0801f90b 	.word	0x0801f90b
 801fbbc:	08022482 	.word	0x08022482

0801fbc0 <__sfputc_r>:
 801fbc0:	6893      	ldr	r3, [r2, #8]
 801fbc2:	3b01      	subs	r3, #1
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	b410      	push	{r4}
 801fbc8:	6093      	str	r3, [r2, #8]
 801fbca:	da08      	bge.n	801fbde <__sfputc_r+0x1e>
 801fbcc:	6994      	ldr	r4, [r2, #24]
 801fbce:	42a3      	cmp	r3, r4
 801fbd0:	db01      	blt.n	801fbd6 <__sfputc_r+0x16>
 801fbd2:	290a      	cmp	r1, #10
 801fbd4:	d103      	bne.n	801fbde <__sfputc_r+0x1e>
 801fbd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fbda:	f7fd bca5 	b.w	801d528 <__swbuf_r>
 801fbde:	6813      	ldr	r3, [r2, #0]
 801fbe0:	1c58      	adds	r0, r3, #1
 801fbe2:	6010      	str	r0, [r2, #0]
 801fbe4:	7019      	strb	r1, [r3, #0]
 801fbe6:	4608      	mov	r0, r1
 801fbe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fbec:	4770      	bx	lr

0801fbee <__sfputs_r>:
 801fbee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbf0:	4606      	mov	r6, r0
 801fbf2:	460f      	mov	r7, r1
 801fbf4:	4614      	mov	r4, r2
 801fbf6:	18d5      	adds	r5, r2, r3
 801fbf8:	42ac      	cmp	r4, r5
 801fbfa:	d101      	bne.n	801fc00 <__sfputs_r+0x12>
 801fbfc:	2000      	movs	r0, #0
 801fbfe:	e007      	b.n	801fc10 <__sfputs_r+0x22>
 801fc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc04:	463a      	mov	r2, r7
 801fc06:	4630      	mov	r0, r6
 801fc08:	f7ff ffda 	bl	801fbc0 <__sfputc_r>
 801fc0c:	1c43      	adds	r3, r0, #1
 801fc0e:	d1f3      	bne.n	801fbf8 <__sfputs_r+0xa>
 801fc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fc14 <_vfiprintf_r>:
 801fc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc18:	460d      	mov	r5, r1
 801fc1a:	b09d      	sub	sp, #116	; 0x74
 801fc1c:	4614      	mov	r4, r2
 801fc1e:	4698      	mov	r8, r3
 801fc20:	4606      	mov	r6, r0
 801fc22:	b118      	cbz	r0, 801fc2c <_vfiprintf_r+0x18>
 801fc24:	6983      	ldr	r3, [r0, #24]
 801fc26:	b90b      	cbnz	r3, 801fc2c <_vfiprintf_r+0x18>
 801fc28:	f7fe fcf2 	bl	801e610 <__sinit>
 801fc2c:	4b89      	ldr	r3, [pc, #548]	; (801fe54 <_vfiprintf_r+0x240>)
 801fc2e:	429d      	cmp	r5, r3
 801fc30:	d11b      	bne.n	801fc6a <_vfiprintf_r+0x56>
 801fc32:	6875      	ldr	r5, [r6, #4]
 801fc34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fc36:	07d9      	lsls	r1, r3, #31
 801fc38:	d405      	bmi.n	801fc46 <_vfiprintf_r+0x32>
 801fc3a:	89ab      	ldrh	r3, [r5, #12]
 801fc3c:	059a      	lsls	r2, r3, #22
 801fc3e:	d402      	bmi.n	801fc46 <_vfiprintf_r+0x32>
 801fc40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fc42:	f7fb fca0 	bl	801b586 <__retarget_lock_acquire_recursive>
 801fc46:	89ab      	ldrh	r3, [r5, #12]
 801fc48:	071b      	lsls	r3, r3, #28
 801fc4a:	d501      	bpl.n	801fc50 <_vfiprintf_r+0x3c>
 801fc4c:	692b      	ldr	r3, [r5, #16]
 801fc4e:	b9eb      	cbnz	r3, 801fc8c <_vfiprintf_r+0x78>
 801fc50:	4629      	mov	r1, r5
 801fc52:	4630      	mov	r0, r6
 801fc54:	f7fd fcba 	bl	801d5cc <__swsetup_r>
 801fc58:	b1c0      	cbz	r0, 801fc8c <_vfiprintf_r+0x78>
 801fc5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fc5c:	07dc      	lsls	r4, r3, #31
 801fc5e:	d50e      	bpl.n	801fc7e <_vfiprintf_r+0x6a>
 801fc60:	f04f 30ff 	mov.w	r0, #4294967295
 801fc64:	b01d      	add	sp, #116	; 0x74
 801fc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc6a:	4b7b      	ldr	r3, [pc, #492]	; (801fe58 <_vfiprintf_r+0x244>)
 801fc6c:	429d      	cmp	r5, r3
 801fc6e:	d101      	bne.n	801fc74 <_vfiprintf_r+0x60>
 801fc70:	68b5      	ldr	r5, [r6, #8]
 801fc72:	e7df      	b.n	801fc34 <_vfiprintf_r+0x20>
 801fc74:	4b79      	ldr	r3, [pc, #484]	; (801fe5c <_vfiprintf_r+0x248>)
 801fc76:	429d      	cmp	r5, r3
 801fc78:	bf08      	it	eq
 801fc7a:	68f5      	ldreq	r5, [r6, #12]
 801fc7c:	e7da      	b.n	801fc34 <_vfiprintf_r+0x20>
 801fc7e:	89ab      	ldrh	r3, [r5, #12]
 801fc80:	0598      	lsls	r0, r3, #22
 801fc82:	d4ed      	bmi.n	801fc60 <_vfiprintf_r+0x4c>
 801fc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fc86:	f7fb fc7f 	bl	801b588 <__retarget_lock_release_recursive>
 801fc8a:	e7e9      	b.n	801fc60 <_vfiprintf_r+0x4c>
 801fc8c:	2300      	movs	r3, #0
 801fc8e:	9309      	str	r3, [sp, #36]	; 0x24
 801fc90:	2320      	movs	r3, #32
 801fc92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fc96:	f8cd 800c 	str.w	r8, [sp, #12]
 801fc9a:	2330      	movs	r3, #48	; 0x30
 801fc9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fe60 <_vfiprintf_r+0x24c>
 801fca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fca4:	f04f 0901 	mov.w	r9, #1
 801fca8:	4623      	mov	r3, r4
 801fcaa:	469a      	mov	sl, r3
 801fcac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fcb0:	b10a      	cbz	r2, 801fcb6 <_vfiprintf_r+0xa2>
 801fcb2:	2a25      	cmp	r2, #37	; 0x25
 801fcb4:	d1f9      	bne.n	801fcaa <_vfiprintf_r+0x96>
 801fcb6:	ebba 0b04 	subs.w	fp, sl, r4
 801fcba:	d00b      	beq.n	801fcd4 <_vfiprintf_r+0xc0>
 801fcbc:	465b      	mov	r3, fp
 801fcbe:	4622      	mov	r2, r4
 801fcc0:	4629      	mov	r1, r5
 801fcc2:	4630      	mov	r0, r6
 801fcc4:	f7ff ff93 	bl	801fbee <__sfputs_r>
 801fcc8:	3001      	adds	r0, #1
 801fcca:	f000 80aa 	beq.w	801fe22 <_vfiprintf_r+0x20e>
 801fcce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fcd0:	445a      	add	r2, fp
 801fcd2:	9209      	str	r2, [sp, #36]	; 0x24
 801fcd4:	f89a 3000 	ldrb.w	r3, [sl]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	f000 80a2 	beq.w	801fe22 <_vfiprintf_r+0x20e>
 801fcde:	2300      	movs	r3, #0
 801fce0:	f04f 32ff 	mov.w	r2, #4294967295
 801fce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fce8:	f10a 0a01 	add.w	sl, sl, #1
 801fcec:	9304      	str	r3, [sp, #16]
 801fcee:	9307      	str	r3, [sp, #28]
 801fcf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fcf4:	931a      	str	r3, [sp, #104]	; 0x68
 801fcf6:	4654      	mov	r4, sl
 801fcf8:	2205      	movs	r2, #5
 801fcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fcfe:	4858      	ldr	r0, [pc, #352]	; (801fe60 <_vfiprintf_r+0x24c>)
 801fd00:	f7e0 fa86 	bl	8000210 <memchr>
 801fd04:	9a04      	ldr	r2, [sp, #16]
 801fd06:	b9d8      	cbnz	r0, 801fd40 <_vfiprintf_r+0x12c>
 801fd08:	06d1      	lsls	r1, r2, #27
 801fd0a:	bf44      	itt	mi
 801fd0c:	2320      	movmi	r3, #32
 801fd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd12:	0713      	lsls	r3, r2, #28
 801fd14:	bf44      	itt	mi
 801fd16:	232b      	movmi	r3, #43	; 0x2b
 801fd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fd1c:	f89a 3000 	ldrb.w	r3, [sl]
 801fd20:	2b2a      	cmp	r3, #42	; 0x2a
 801fd22:	d015      	beq.n	801fd50 <_vfiprintf_r+0x13c>
 801fd24:	9a07      	ldr	r2, [sp, #28]
 801fd26:	4654      	mov	r4, sl
 801fd28:	2000      	movs	r0, #0
 801fd2a:	f04f 0c0a 	mov.w	ip, #10
 801fd2e:	4621      	mov	r1, r4
 801fd30:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fd34:	3b30      	subs	r3, #48	; 0x30
 801fd36:	2b09      	cmp	r3, #9
 801fd38:	d94e      	bls.n	801fdd8 <_vfiprintf_r+0x1c4>
 801fd3a:	b1b0      	cbz	r0, 801fd6a <_vfiprintf_r+0x156>
 801fd3c:	9207      	str	r2, [sp, #28]
 801fd3e:	e014      	b.n	801fd6a <_vfiprintf_r+0x156>
 801fd40:	eba0 0308 	sub.w	r3, r0, r8
 801fd44:	fa09 f303 	lsl.w	r3, r9, r3
 801fd48:	4313      	orrs	r3, r2
 801fd4a:	9304      	str	r3, [sp, #16]
 801fd4c:	46a2      	mov	sl, r4
 801fd4e:	e7d2      	b.n	801fcf6 <_vfiprintf_r+0xe2>
 801fd50:	9b03      	ldr	r3, [sp, #12]
 801fd52:	1d19      	adds	r1, r3, #4
 801fd54:	681b      	ldr	r3, [r3, #0]
 801fd56:	9103      	str	r1, [sp, #12]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	bfbb      	ittet	lt
 801fd5c:	425b      	neglt	r3, r3
 801fd5e:	f042 0202 	orrlt.w	r2, r2, #2
 801fd62:	9307      	strge	r3, [sp, #28]
 801fd64:	9307      	strlt	r3, [sp, #28]
 801fd66:	bfb8      	it	lt
 801fd68:	9204      	strlt	r2, [sp, #16]
 801fd6a:	7823      	ldrb	r3, [r4, #0]
 801fd6c:	2b2e      	cmp	r3, #46	; 0x2e
 801fd6e:	d10c      	bne.n	801fd8a <_vfiprintf_r+0x176>
 801fd70:	7863      	ldrb	r3, [r4, #1]
 801fd72:	2b2a      	cmp	r3, #42	; 0x2a
 801fd74:	d135      	bne.n	801fde2 <_vfiprintf_r+0x1ce>
 801fd76:	9b03      	ldr	r3, [sp, #12]
 801fd78:	1d1a      	adds	r2, r3, #4
 801fd7a:	681b      	ldr	r3, [r3, #0]
 801fd7c:	9203      	str	r2, [sp, #12]
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	bfb8      	it	lt
 801fd82:	f04f 33ff 	movlt.w	r3, #4294967295
 801fd86:	3402      	adds	r4, #2
 801fd88:	9305      	str	r3, [sp, #20]
 801fd8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fe70 <_vfiprintf_r+0x25c>
 801fd8e:	7821      	ldrb	r1, [r4, #0]
 801fd90:	2203      	movs	r2, #3
 801fd92:	4650      	mov	r0, sl
 801fd94:	f7e0 fa3c 	bl	8000210 <memchr>
 801fd98:	b140      	cbz	r0, 801fdac <_vfiprintf_r+0x198>
 801fd9a:	2340      	movs	r3, #64	; 0x40
 801fd9c:	eba0 000a 	sub.w	r0, r0, sl
 801fda0:	fa03 f000 	lsl.w	r0, r3, r0
 801fda4:	9b04      	ldr	r3, [sp, #16]
 801fda6:	4303      	orrs	r3, r0
 801fda8:	3401      	adds	r4, #1
 801fdaa:	9304      	str	r3, [sp, #16]
 801fdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fdb0:	482c      	ldr	r0, [pc, #176]	; (801fe64 <_vfiprintf_r+0x250>)
 801fdb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fdb6:	2206      	movs	r2, #6
 801fdb8:	f7e0 fa2a 	bl	8000210 <memchr>
 801fdbc:	2800      	cmp	r0, #0
 801fdbe:	d03f      	beq.n	801fe40 <_vfiprintf_r+0x22c>
 801fdc0:	4b29      	ldr	r3, [pc, #164]	; (801fe68 <_vfiprintf_r+0x254>)
 801fdc2:	bb1b      	cbnz	r3, 801fe0c <_vfiprintf_r+0x1f8>
 801fdc4:	9b03      	ldr	r3, [sp, #12]
 801fdc6:	3307      	adds	r3, #7
 801fdc8:	f023 0307 	bic.w	r3, r3, #7
 801fdcc:	3308      	adds	r3, #8
 801fdce:	9303      	str	r3, [sp, #12]
 801fdd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdd2:	443b      	add	r3, r7
 801fdd4:	9309      	str	r3, [sp, #36]	; 0x24
 801fdd6:	e767      	b.n	801fca8 <_vfiprintf_r+0x94>
 801fdd8:	fb0c 3202 	mla	r2, ip, r2, r3
 801fddc:	460c      	mov	r4, r1
 801fdde:	2001      	movs	r0, #1
 801fde0:	e7a5      	b.n	801fd2e <_vfiprintf_r+0x11a>
 801fde2:	2300      	movs	r3, #0
 801fde4:	3401      	adds	r4, #1
 801fde6:	9305      	str	r3, [sp, #20]
 801fde8:	4619      	mov	r1, r3
 801fdea:	f04f 0c0a 	mov.w	ip, #10
 801fdee:	4620      	mov	r0, r4
 801fdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fdf4:	3a30      	subs	r2, #48	; 0x30
 801fdf6:	2a09      	cmp	r2, #9
 801fdf8:	d903      	bls.n	801fe02 <_vfiprintf_r+0x1ee>
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	d0c5      	beq.n	801fd8a <_vfiprintf_r+0x176>
 801fdfe:	9105      	str	r1, [sp, #20]
 801fe00:	e7c3      	b.n	801fd8a <_vfiprintf_r+0x176>
 801fe02:	fb0c 2101 	mla	r1, ip, r1, r2
 801fe06:	4604      	mov	r4, r0
 801fe08:	2301      	movs	r3, #1
 801fe0a:	e7f0      	b.n	801fdee <_vfiprintf_r+0x1da>
 801fe0c:	ab03      	add	r3, sp, #12
 801fe0e:	9300      	str	r3, [sp, #0]
 801fe10:	462a      	mov	r2, r5
 801fe12:	4b16      	ldr	r3, [pc, #88]	; (801fe6c <_vfiprintf_r+0x258>)
 801fe14:	a904      	add	r1, sp, #16
 801fe16:	4630      	mov	r0, r6
 801fe18:	f7fb fd70 	bl	801b8fc <_printf_float>
 801fe1c:	4607      	mov	r7, r0
 801fe1e:	1c78      	adds	r0, r7, #1
 801fe20:	d1d6      	bne.n	801fdd0 <_vfiprintf_r+0x1bc>
 801fe22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fe24:	07d9      	lsls	r1, r3, #31
 801fe26:	d405      	bmi.n	801fe34 <_vfiprintf_r+0x220>
 801fe28:	89ab      	ldrh	r3, [r5, #12]
 801fe2a:	059a      	lsls	r2, r3, #22
 801fe2c:	d402      	bmi.n	801fe34 <_vfiprintf_r+0x220>
 801fe2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fe30:	f7fb fbaa 	bl	801b588 <__retarget_lock_release_recursive>
 801fe34:	89ab      	ldrh	r3, [r5, #12]
 801fe36:	065b      	lsls	r3, r3, #25
 801fe38:	f53f af12 	bmi.w	801fc60 <_vfiprintf_r+0x4c>
 801fe3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fe3e:	e711      	b.n	801fc64 <_vfiprintf_r+0x50>
 801fe40:	ab03      	add	r3, sp, #12
 801fe42:	9300      	str	r3, [sp, #0]
 801fe44:	462a      	mov	r2, r5
 801fe46:	4b09      	ldr	r3, [pc, #36]	; (801fe6c <_vfiprintf_r+0x258>)
 801fe48:	a904      	add	r1, sp, #16
 801fe4a:	4630      	mov	r0, r6
 801fe4c:	f7fb fffa 	bl	801be44 <_printf_i>
 801fe50:	e7e4      	b.n	801fe1c <_vfiprintf_r+0x208>
 801fe52:	bf00      	nop
 801fe54:	08022264 	.word	0x08022264
 801fe58:	08022284 	.word	0x08022284
 801fe5c:	08022244 	.word	0x08022244
 801fe60:	0802247c 	.word	0x0802247c
 801fe64:	08022486 	.word	0x08022486
 801fe68:	0801b8fd 	.word	0x0801b8fd
 801fe6c:	0801fbef 	.word	0x0801fbef
 801fe70:	08022482 	.word	0x08022482
 801fe74:	00000000 	.word	0x00000000

0801fe78 <nan>:
 801fe78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801fe80 <nan+0x8>
 801fe7c:	4770      	bx	lr
 801fe7e:	bf00      	nop
 801fe80:	00000000 	.word	0x00000000
 801fe84:	7ff80000 	.word	0x7ff80000

0801fe88 <__sread>:
 801fe88:	b510      	push	{r4, lr}
 801fe8a:	460c      	mov	r4, r1
 801fe8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe90:	f000 f8ec 	bl	802006c <_read_r>
 801fe94:	2800      	cmp	r0, #0
 801fe96:	bfab      	itete	ge
 801fe98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fe9a:	89a3      	ldrhlt	r3, [r4, #12]
 801fe9c:	181b      	addge	r3, r3, r0
 801fe9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fea2:	bfac      	ite	ge
 801fea4:	6563      	strge	r3, [r4, #84]	; 0x54
 801fea6:	81a3      	strhlt	r3, [r4, #12]
 801fea8:	bd10      	pop	{r4, pc}

0801feaa <__swrite>:
 801feaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801feae:	461f      	mov	r7, r3
 801feb0:	898b      	ldrh	r3, [r1, #12]
 801feb2:	05db      	lsls	r3, r3, #23
 801feb4:	4605      	mov	r5, r0
 801feb6:	460c      	mov	r4, r1
 801feb8:	4616      	mov	r6, r2
 801feba:	d505      	bpl.n	801fec8 <__swrite+0x1e>
 801febc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fec0:	2302      	movs	r3, #2
 801fec2:	2200      	movs	r2, #0
 801fec4:	f000 f890 	bl	801ffe8 <_lseek_r>
 801fec8:	89a3      	ldrh	r3, [r4, #12]
 801feca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fed2:	81a3      	strh	r3, [r4, #12]
 801fed4:	4632      	mov	r2, r6
 801fed6:	463b      	mov	r3, r7
 801fed8:	4628      	mov	r0, r5
 801feda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fede:	f000 b837 	b.w	801ff50 <_write_r>

0801fee2 <__sseek>:
 801fee2:	b510      	push	{r4, lr}
 801fee4:	460c      	mov	r4, r1
 801fee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801feea:	f000 f87d 	bl	801ffe8 <_lseek_r>
 801feee:	1c43      	adds	r3, r0, #1
 801fef0:	89a3      	ldrh	r3, [r4, #12]
 801fef2:	bf15      	itete	ne
 801fef4:	6560      	strne	r0, [r4, #84]	; 0x54
 801fef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fefa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fefe:	81a3      	strheq	r3, [r4, #12]
 801ff00:	bf18      	it	ne
 801ff02:	81a3      	strhne	r3, [r4, #12]
 801ff04:	bd10      	pop	{r4, pc}

0801ff06 <__sclose>:
 801ff06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ff0a:	f000 b83b 	b.w	801ff84 <_close_r>

0801ff0e <strncmp>:
 801ff0e:	b510      	push	{r4, lr}
 801ff10:	b17a      	cbz	r2, 801ff32 <strncmp+0x24>
 801ff12:	4603      	mov	r3, r0
 801ff14:	3901      	subs	r1, #1
 801ff16:	1884      	adds	r4, r0, r2
 801ff18:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ff1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ff20:	4290      	cmp	r0, r2
 801ff22:	d101      	bne.n	801ff28 <strncmp+0x1a>
 801ff24:	42a3      	cmp	r3, r4
 801ff26:	d101      	bne.n	801ff2c <strncmp+0x1e>
 801ff28:	1a80      	subs	r0, r0, r2
 801ff2a:	bd10      	pop	{r4, pc}
 801ff2c:	2800      	cmp	r0, #0
 801ff2e:	d1f3      	bne.n	801ff18 <strncmp+0xa>
 801ff30:	e7fa      	b.n	801ff28 <strncmp+0x1a>
 801ff32:	4610      	mov	r0, r2
 801ff34:	e7f9      	b.n	801ff2a <strncmp+0x1c>

0801ff36 <__ascii_wctomb>:
 801ff36:	b149      	cbz	r1, 801ff4c <__ascii_wctomb+0x16>
 801ff38:	2aff      	cmp	r2, #255	; 0xff
 801ff3a:	bf85      	ittet	hi
 801ff3c:	238a      	movhi	r3, #138	; 0x8a
 801ff3e:	6003      	strhi	r3, [r0, #0]
 801ff40:	700a      	strbls	r2, [r1, #0]
 801ff42:	f04f 30ff 	movhi.w	r0, #4294967295
 801ff46:	bf98      	it	ls
 801ff48:	2001      	movls	r0, #1
 801ff4a:	4770      	bx	lr
 801ff4c:	4608      	mov	r0, r1
 801ff4e:	4770      	bx	lr

0801ff50 <_write_r>:
 801ff50:	b538      	push	{r3, r4, r5, lr}
 801ff52:	4d07      	ldr	r5, [pc, #28]	; (801ff70 <_write_r+0x20>)
 801ff54:	4604      	mov	r4, r0
 801ff56:	4608      	mov	r0, r1
 801ff58:	4611      	mov	r1, r2
 801ff5a:	2200      	movs	r2, #0
 801ff5c:	602a      	str	r2, [r5, #0]
 801ff5e:	461a      	mov	r2, r3
 801ff60:	f7e3 fcd1 	bl	8003906 <_write>
 801ff64:	1c43      	adds	r3, r0, #1
 801ff66:	d102      	bne.n	801ff6e <_write_r+0x1e>
 801ff68:	682b      	ldr	r3, [r5, #0]
 801ff6a:	b103      	cbz	r3, 801ff6e <_write_r+0x1e>
 801ff6c:	6023      	str	r3, [r4, #0]
 801ff6e:	bd38      	pop	{r3, r4, r5, pc}
 801ff70:	2000361c 	.word	0x2000361c

0801ff74 <abort>:
 801ff74:	b508      	push	{r3, lr}
 801ff76:	2006      	movs	r0, #6
 801ff78:	f000 f8b2 	bl	80200e0 <raise>
 801ff7c:	2001      	movs	r0, #1
 801ff7e:	f7e3 fc9b 	bl	80038b8 <_exit>
	...

0801ff84 <_close_r>:
 801ff84:	b538      	push	{r3, r4, r5, lr}
 801ff86:	4d06      	ldr	r5, [pc, #24]	; (801ffa0 <_close_r+0x1c>)
 801ff88:	2300      	movs	r3, #0
 801ff8a:	4604      	mov	r4, r0
 801ff8c:	4608      	mov	r0, r1
 801ff8e:	602b      	str	r3, [r5, #0]
 801ff90:	f7e3 fcd5 	bl	800393e <_close>
 801ff94:	1c43      	adds	r3, r0, #1
 801ff96:	d102      	bne.n	801ff9e <_close_r+0x1a>
 801ff98:	682b      	ldr	r3, [r5, #0]
 801ff9a:	b103      	cbz	r3, 801ff9e <_close_r+0x1a>
 801ff9c:	6023      	str	r3, [r4, #0]
 801ff9e:	bd38      	pop	{r3, r4, r5, pc}
 801ffa0:	2000361c 	.word	0x2000361c

0801ffa4 <_fstat_r>:
 801ffa4:	b538      	push	{r3, r4, r5, lr}
 801ffa6:	4d07      	ldr	r5, [pc, #28]	; (801ffc4 <_fstat_r+0x20>)
 801ffa8:	2300      	movs	r3, #0
 801ffaa:	4604      	mov	r4, r0
 801ffac:	4608      	mov	r0, r1
 801ffae:	4611      	mov	r1, r2
 801ffb0:	602b      	str	r3, [r5, #0]
 801ffb2:	f7e3 fcd0 	bl	8003956 <_fstat>
 801ffb6:	1c43      	adds	r3, r0, #1
 801ffb8:	d102      	bne.n	801ffc0 <_fstat_r+0x1c>
 801ffba:	682b      	ldr	r3, [r5, #0]
 801ffbc:	b103      	cbz	r3, 801ffc0 <_fstat_r+0x1c>
 801ffbe:	6023      	str	r3, [r4, #0]
 801ffc0:	bd38      	pop	{r3, r4, r5, pc}
 801ffc2:	bf00      	nop
 801ffc4:	2000361c 	.word	0x2000361c

0801ffc8 <_isatty_r>:
 801ffc8:	b538      	push	{r3, r4, r5, lr}
 801ffca:	4d06      	ldr	r5, [pc, #24]	; (801ffe4 <_isatty_r+0x1c>)
 801ffcc:	2300      	movs	r3, #0
 801ffce:	4604      	mov	r4, r0
 801ffd0:	4608      	mov	r0, r1
 801ffd2:	602b      	str	r3, [r5, #0]
 801ffd4:	f7e3 fccf 	bl	8003976 <_isatty>
 801ffd8:	1c43      	adds	r3, r0, #1
 801ffda:	d102      	bne.n	801ffe2 <_isatty_r+0x1a>
 801ffdc:	682b      	ldr	r3, [r5, #0]
 801ffde:	b103      	cbz	r3, 801ffe2 <_isatty_r+0x1a>
 801ffe0:	6023      	str	r3, [r4, #0]
 801ffe2:	bd38      	pop	{r3, r4, r5, pc}
 801ffe4:	2000361c 	.word	0x2000361c

0801ffe8 <_lseek_r>:
 801ffe8:	b538      	push	{r3, r4, r5, lr}
 801ffea:	4d07      	ldr	r5, [pc, #28]	; (8020008 <_lseek_r+0x20>)
 801ffec:	4604      	mov	r4, r0
 801ffee:	4608      	mov	r0, r1
 801fff0:	4611      	mov	r1, r2
 801fff2:	2200      	movs	r2, #0
 801fff4:	602a      	str	r2, [r5, #0]
 801fff6:	461a      	mov	r2, r3
 801fff8:	f7e3 fcc8 	bl	800398c <_lseek>
 801fffc:	1c43      	adds	r3, r0, #1
 801fffe:	d102      	bne.n	8020006 <_lseek_r+0x1e>
 8020000:	682b      	ldr	r3, [r5, #0]
 8020002:	b103      	cbz	r3, 8020006 <_lseek_r+0x1e>
 8020004:	6023      	str	r3, [r4, #0]
 8020006:	bd38      	pop	{r3, r4, r5, pc}
 8020008:	2000361c 	.word	0x2000361c

0802000c <_realloc_r>:
 802000c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020010:	4680      	mov	r8, r0
 8020012:	4614      	mov	r4, r2
 8020014:	460e      	mov	r6, r1
 8020016:	b921      	cbnz	r1, 8020022 <_realloc_r+0x16>
 8020018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802001c:	4611      	mov	r1, r2
 802001e:	f7fb bb59 	b.w	801b6d4 <_malloc_r>
 8020022:	b92a      	cbnz	r2, 8020030 <_realloc_r+0x24>
 8020024:	f7fb faea 	bl	801b5fc <_free_r>
 8020028:	4625      	mov	r5, r4
 802002a:	4628      	mov	r0, r5
 802002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020030:	f000 f872 	bl	8020118 <_malloc_usable_size_r>
 8020034:	4284      	cmp	r4, r0
 8020036:	4607      	mov	r7, r0
 8020038:	d802      	bhi.n	8020040 <_realloc_r+0x34>
 802003a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802003e:	d812      	bhi.n	8020066 <_realloc_r+0x5a>
 8020040:	4621      	mov	r1, r4
 8020042:	4640      	mov	r0, r8
 8020044:	f7fb fb46 	bl	801b6d4 <_malloc_r>
 8020048:	4605      	mov	r5, r0
 802004a:	2800      	cmp	r0, #0
 802004c:	d0ed      	beq.n	802002a <_realloc_r+0x1e>
 802004e:	42bc      	cmp	r4, r7
 8020050:	4622      	mov	r2, r4
 8020052:	4631      	mov	r1, r6
 8020054:	bf28      	it	cs
 8020056:	463a      	movcs	r2, r7
 8020058:	f7fb faa0 	bl	801b59c <memcpy>
 802005c:	4631      	mov	r1, r6
 802005e:	4640      	mov	r0, r8
 8020060:	f7fb facc 	bl	801b5fc <_free_r>
 8020064:	e7e1      	b.n	802002a <_realloc_r+0x1e>
 8020066:	4635      	mov	r5, r6
 8020068:	e7df      	b.n	802002a <_realloc_r+0x1e>
	...

0802006c <_read_r>:
 802006c:	b538      	push	{r3, r4, r5, lr}
 802006e:	4d07      	ldr	r5, [pc, #28]	; (802008c <_read_r+0x20>)
 8020070:	4604      	mov	r4, r0
 8020072:	4608      	mov	r0, r1
 8020074:	4611      	mov	r1, r2
 8020076:	2200      	movs	r2, #0
 8020078:	602a      	str	r2, [r5, #0]
 802007a:	461a      	mov	r2, r3
 802007c:	f7e3 fc26 	bl	80038cc <_read>
 8020080:	1c43      	adds	r3, r0, #1
 8020082:	d102      	bne.n	802008a <_read_r+0x1e>
 8020084:	682b      	ldr	r3, [r5, #0]
 8020086:	b103      	cbz	r3, 802008a <_read_r+0x1e>
 8020088:	6023      	str	r3, [r4, #0]
 802008a:	bd38      	pop	{r3, r4, r5, pc}
 802008c:	2000361c 	.word	0x2000361c

08020090 <_raise_r>:
 8020090:	291f      	cmp	r1, #31
 8020092:	b538      	push	{r3, r4, r5, lr}
 8020094:	4604      	mov	r4, r0
 8020096:	460d      	mov	r5, r1
 8020098:	d904      	bls.n	80200a4 <_raise_r+0x14>
 802009a:	2316      	movs	r3, #22
 802009c:	6003      	str	r3, [r0, #0]
 802009e:	f04f 30ff 	mov.w	r0, #4294967295
 80200a2:	bd38      	pop	{r3, r4, r5, pc}
 80200a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80200a6:	b112      	cbz	r2, 80200ae <_raise_r+0x1e>
 80200a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80200ac:	b94b      	cbnz	r3, 80200c2 <_raise_r+0x32>
 80200ae:	4620      	mov	r0, r4
 80200b0:	f000 f830 	bl	8020114 <_getpid_r>
 80200b4:	462a      	mov	r2, r5
 80200b6:	4601      	mov	r1, r0
 80200b8:	4620      	mov	r0, r4
 80200ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80200be:	f000 b817 	b.w	80200f0 <_kill_r>
 80200c2:	2b01      	cmp	r3, #1
 80200c4:	d00a      	beq.n	80200dc <_raise_r+0x4c>
 80200c6:	1c59      	adds	r1, r3, #1
 80200c8:	d103      	bne.n	80200d2 <_raise_r+0x42>
 80200ca:	2316      	movs	r3, #22
 80200cc:	6003      	str	r3, [r0, #0]
 80200ce:	2001      	movs	r0, #1
 80200d0:	e7e7      	b.n	80200a2 <_raise_r+0x12>
 80200d2:	2400      	movs	r4, #0
 80200d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80200d8:	4628      	mov	r0, r5
 80200da:	4798      	blx	r3
 80200dc:	2000      	movs	r0, #0
 80200de:	e7e0      	b.n	80200a2 <_raise_r+0x12>

080200e0 <raise>:
 80200e0:	4b02      	ldr	r3, [pc, #8]	; (80200ec <raise+0xc>)
 80200e2:	4601      	mov	r1, r0
 80200e4:	6818      	ldr	r0, [r3, #0]
 80200e6:	f7ff bfd3 	b.w	8020090 <_raise_r>
 80200ea:	bf00      	nop
 80200ec:	20000144 	.word	0x20000144

080200f0 <_kill_r>:
 80200f0:	b538      	push	{r3, r4, r5, lr}
 80200f2:	4d07      	ldr	r5, [pc, #28]	; (8020110 <_kill_r+0x20>)
 80200f4:	2300      	movs	r3, #0
 80200f6:	4604      	mov	r4, r0
 80200f8:	4608      	mov	r0, r1
 80200fa:	4611      	mov	r1, r2
 80200fc:	602b      	str	r3, [r5, #0]
 80200fe:	f7e3 fbcb 	bl	8003898 <_kill>
 8020102:	1c43      	adds	r3, r0, #1
 8020104:	d102      	bne.n	802010c <_kill_r+0x1c>
 8020106:	682b      	ldr	r3, [r5, #0]
 8020108:	b103      	cbz	r3, 802010c <_kill_r+0x1c>
 802010a:	6023      	str	r3, [r4, #0]
 802010c:	bd38      	pop	{r3, r4, r5, pc}
 802010e:	bf00      	nop
 8020110:	2000361c 	.word	0x2000361c

08020114 <_getpid_r>:
 8020114:	f7e3 bbb8 	b.w	8003888 <_getpid>

08020118 <_malloc_usable_size_r>:
 8020118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802011c:	1f18      	subs	r0, r3, #4
 802011e:	2b00      	cmp	r3, #0
 8020120:	bfbc      	itt	lt
 8020122:	580b      	ldrlt	r3, [r1, r0]
 8020124:	18c0      	addlt	r0, r0, r3
 8020126:	4770      	bx	lr

08020128 <_init>:
 8020128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802012a:	bf00      	nop
 802012c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802012e:	bc08      	pop	{r3}
 8020130:	469e      	mov	lr, r3
 8020132:	4770      	bx	lr

08020134 <_fini>:
 8020134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020136:	bf00      	nop
 8020138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802013a:	bc08      	pop	{r3}
 802013c:	469e      	mov	lr, r3
 802013e:	4770      	bx	lr
