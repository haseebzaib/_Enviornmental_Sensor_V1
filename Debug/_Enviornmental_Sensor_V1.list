
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000000  20000000  080258ec  00000000  2**0
                  ALLOC
  2 .text         00022060  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000036dc  08022200  08022200  00023200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080258dc  080258dc  00027304  2**0
                  CONTENTS
  5 .ARM          00000008  080258dc  080258dc  000268dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080258e4  080258e4  00027304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080258e4  080258e4  000268e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080258e8  080258e8  000268e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000304  20000000  080258ec  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000034ac  20000304  08025bf0  00027304  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200037b0  08025bf0  000277b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00027304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037915  00000000  00000000  00027334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a5f  00000000  00000000  0005ec49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003018  00000000  00000000  000676a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002503  00000000  00000000  0006a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026549  00000000  00000000  0006cbc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044fa7  00000000  00000000  0009310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4f8a  00000000  00000000  000d80b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018d03d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de84  00000000  00000000  0018d080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  0019af04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000304 	.word	0x20000304
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080221e8 	.word	0x080221e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000308 	.word	0x20000308
 80001dc:	080221e8 	.word	0x080221e8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e03d      	b.n	80010a4 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d21b      	bcs.n	8001068 <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	041b      	lsls	r3, r3, #16
 800103e:	43db      	mvns	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	4002      	ands	r2, r0
 800104c:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	89fa      	ldrh	r2, [r7, #14]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4403      	add	r3, r0
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e01a      	b.n	800109e <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	43db      	mvns	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	440b      	add	r3, r1
 8001080:	4002      	ands	r2, r0
 8001082:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4403      	add	r3, r0
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010aa:	d3bd      	bcc.n	8001028 <setSoftPWM+0x14>
		}
	}

}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <toggle_blue_led+0x34>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <toggle_blue_led+0x34>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	801a      	strh	r2, [r3, #0]
 80010d0:	e003      	b.n	80010da <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <toggle_blue_led+0x34>)
 80010d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d8:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <toggle_blue_led+0x34>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <toggle_blue_led+0x38>)
 80010e2:	4619      	mov	r1, r3
 80010e4:	2008      	movs	r0, #8
 80010e6:	f7ff ff95 	bl	8001014 <setSoftPWM>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200012ca 	.word	0x200012ca
 80010f4:	20000324 	.word	0x20000324

080010f8 <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <pir_interrupt+0x2c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001102:	2101      	movs	r1, #1
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <pir_interrupt+0x30>)
 8001106:	f004 ffcb 	bl	80060a0 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <pir_interrupt+0x34>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 8001116:	e002      	b.n	800111e <pir_interrupt+0x26>
		pir_motion_flag = 0;
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <pir_interrupt+0x34>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001589 	.word	0x20001589
 8001128:	40020000 	.word	0x40020000
 800112c:	20001588 	.word	0x20001588

08001130 <timer_interrupt>:

void timer_interrupt() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <timer_interrupt+0x2c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a08      	ldr	r2, [pc, #32]	@ (800115c <timer_interrupt+0x2c>)
 800113c:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <timer_interrupt+0x2c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001146:	d302      	bcc.n	800114e <timer_interrupt+0x1e>
		time_keep = 0;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <timer_interrupt+0x2c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 800114e:	f002 ffdb 	bl	8004108 <HAL_GetTick>
 8001152:	4603      	mov	r3, r0
 8001154:	4a02      	ldr	r2, [pc, #8]	@ (8001160 <timer_interrupt+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000157c 	.word	0x2000157c
 8001160:	200017c0 	.word	0x200017c0

08001164 <power_off_detect>:

void power_off_detect() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 8001168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <power_off_detect+0x2c>)
 800116e:	f004 ff97 	bl	80060a0 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <power_off_detect+0x26>
		_RunTime_Packet.pwr_off_det = 1;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <power_off_detect+0x30>)
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2108      	movs	r1, #8
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <power_off_detect+0x34>)
 8001186:	f004 ffa3 	bl	80060d0 <HAL_GPIO_WritePin>
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	20001530 	.word	0x20001530
 8001198:	40020400 	.word	0x40020400

0800119c <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_DMA_Init+0x3c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2044      	movs	r0, #68	@ 0x44
 80011c4:	f003 fd83 	bl	8004cce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011c8:	2044      	movs	r0, #68	@ 0x44
 80011ca:	f003 fd9c 	bl	8004d06 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <pwr_off_detected>:

static void pwr_off_detected() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <pwr_off_detected+0x3c>)
 80011e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <pwr_off_detected+0x3c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		GREEN_LED_PWM(disable_led);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <pwr_off_detected+0x40>)
 80011f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34
		RED_LED_PWM(disable_led);
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <pwr_off_detected+0x40>)
 80011fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38
		BLUE_LED_PWM(0);
 8001202:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <pwr_off_detected+0x44>)
 8001204:	2100      	movs	r1, #0
 8001206:	2008      	movs	r0, #8
 8001208:	f7ff ff04 	bl	8001014 <setSoftPWM>
		HAL_Delay(3500);
 800120c:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001210:	f002 ff86 	bl	8004120 <HAL_Delay>

	}
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20001530 	.word	0x20001530
 800121c:	40000400 	.word	0x40000400
 8001220:	20000324 	.word	0x20000324

08001224 <clock_speed_high>:
}

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
//	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f01d fd5a 	bl	801ecec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <clock_speed_high+0xd4>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a29      	ldr	r2, [pc, #164]	@ (80012f8 <clock_speed_high+0xd4>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <clock_speed_high+0xd4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <clock_speed_high+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001270:	4a22      	ldr	r2, [pc, #136]	@ (80012fc <clock_speed_high+0xd8>)
 8001272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <clock_speed_high+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8001284:	2305      	movs	r3, #5
 8001286:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128e:	2301      	movs	r3, #1
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001292:	2302      	movs	r3, #2
 8001294:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001296:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800129c:	2319      	movs	r3, #25
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80012a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fc34 	bl	8008b20 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <clock_speed_high+0x9e>
		Error_Handler();
 80012be:	f002 f9d9 	bl	8003674 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c6:	2302      	movs	r3, #2
 80012c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2102      	movs	r1, #2
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fe96 	bl	8009010 <HAL_RCC_ClockConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <clock_speed_high+0xca>
		Error_Handler();
 80012ea:	f002 f9c3 	bl	8003674 <Error_Handler>
	}

}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <load_param+0xa4>)
 8001308:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8b3 325f 	ldrh.w	r3, [r3, #607]	@ 0x25f
 8001310:	b29b      	uxth	r3, r3
 8001312:	f44f 52c2 	mov.w	r2, #6208	@ 0x1840
 8001316:	4293      	cmp	r3, r2
 8001318:	d118      	bne.n	800134c <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800131a:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <load_param+0xa8>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f240 2361 	movw	r3, #609	@ 0x261
 8001326:	461a      	mov	r2, r3
 8001328:	f01d fdf7 	bl	801ef1a <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 800132c:	491f      	ldr	r1, [pc, #124]	@ (80013ac <load_param+0xac>)
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <load_param+0xa8>)
 8001330:	f01d fd4e 	bl	801edd0 <strstr>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800133a:	f001 f89b 	bl	8002474 <ver_GetUid>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <load_param+0xb0>)
 8001344:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <load_param+0xa8>)
 8001346:	f01d fb87 	bl	801ea58 <siprintf>
 800134a:	e010      	b.n	800136e <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 800134c:	4a16      	ldr	r2, [pc, #88]	@ (80013a8 <load_param+0xa8>)
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <load_param+0xb4>)
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f240 2361 	movw	r3, #609	@ 0x261
 8001358:	461a      	mov	r2, r3
 800135a:	f01d fdde 	bl	801ef1a <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800135e:	f001 f889 	bl	8002474 <ver_GetUid>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <load_param+0xb0>)
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <load_param+0xa8>)
 800136a:	f01d fb75 	bl	801ea58 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 800136e:	4912      	ldr	r1, [pc, #72]	@ (80013b8 <load_param+0xb8>)
 8001370:	4812      	ldr	r0, [pc, #72]	@ (80013bc <load_param+0xbc>)
 8001372:	f01d fd2d 	bl	801edd0 <strstr>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <load_param+0xc0>)
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 8001384:	e00a      	b.n	800139c <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 8001386:	490f      	ldr	r1, [pc, #60]	@ (80013c4 <load_param+0xc4>)
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <load_param+0xbc>)
 800138a:	f01d fd21 	bl	801edd0 <strstr>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <load_param+0xc0>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08060000 	.word	0x08060000
 80013a8:	200012cc 	.word	0x200012cc
 80013ac:	08022200 	.word	0x08022200
 80013b0:	08022208 	.word	0x08022208
 80013b4:	08024d48 	.word	0x08024d48
 80013b8:	0802220c 	.word	0x0802220c
 80013bc:	20001330 	.word	0x20001330
 80013c0:	20001530 	.word	0x20001530
 80013c4:	08022214 	.word	0x08022214

080013c8 <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ce:	b672      	cpsid	i
}
 80013d0:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <store_param+0xc0>)
 80013d4:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 80013d6:	f004 f95b 	bl	8005690 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <store_param+0xc4>)
 80013dc:	2201      	movs	r2, #1
 80013de:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <store_param+0xc4>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <store_param+0xc4>)
 80013e8:	2210      	movs	r2, #16
 80013ea:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <store_param+0xc4>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <store_param+0xc4>)
 80013f4:	2240      	movs	r2, #64	@ 0x40
 80013f6:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80013f8:	4b24      	ldr	r3, [pc, #144]	@ (800148c <store_param+0xc4>)
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <store_param+0xc4>)
 8001400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001404:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001406:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <store_param+0xc8>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <store_param+0xc8>)
 800140e:	2202      	movs	r2, #2
 8001410:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <store_param+0xc8>)
 8001414:	2207      	movs	r2, #7
 8001416:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 8001418:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <store_param+0xc8>)
 800141a:	2201      	movs	r2, #1
 800141c:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	481b      	ldr	r0, [pc, #108]	@ (8001490 <store_param+0xc8>)
 8001424:	f004 fab2 	bl	800598c <HAL_FLASHEx_Erase>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <store_param+0x6e>
		return HAL_FLASH_GetError();
 800142e:	f004 f961 	bl	80056f4 <HAL_FLASH_GetError>
 8001432:	4603      	mov	r3, r0
 8001434:	e024      	b.n	8001480 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <store_param+0xcc>)
 8001438:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <store_param+0xd0>)
 800143c:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 800143e:	e016      	b.n	800146e <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001440:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	68f9      	ldr	r1, [r7, #12]
 8001448:	2002      	movs	r0, #2
 800144a:	f004 f8cd 	bl	80055e8 <HAL_FLASH_Program>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <store_param+0x9a>

		{
			WrAdr += 4;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3304      	adds	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3304      	adds	r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e005      	b.n	800146e <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 8001462:	f004 f937 	bl	80056d4 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 8001466:	f004 f945 	bl	80056f4 <HAL_FLASH_GetError>
 800146a:	4603      	mov	r3, r0
 800146c:	e008      	b.n	8001480 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3e4      	bcc.n	8001440 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 8001476:	f004 f92d 	bl	80056d4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800147a:	b662      	cpsie	i
}
 800147c:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 800147e:	2300      	movs	r3, #0

}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200012cc 	.word	0x200012cc
 800148c:	40023c00 	.word	0x40023c00
 8001490:	200017dc 	.word	0x200017dc
 8001494:	08060261 	.word	0x08060261
 8001498:	08060000 	.word	0x08060000

0800149c <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if (save_param) {
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <save_data+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <save_data+0x52>
		if (start_timer) {
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <save_data+0x5c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80014b0:	4812      	ldr	r0, [pc, #72]	@ (80014fc <save_data+0x60>)
 80014b2:	f009 ff13 	bl	800b2dc <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <save_data+0x60>)
 80014b8:	f009 feae 	bl	800b218 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <save_data+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <save_data+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <save_data+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014d0:	d30d      	bcc.n	80014ee <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 80014d2:	480a      	ldr	r0, [pc, #40]	@ (80014fc <save_data+0x60>)
 80014d4:	f009 ff02 	bl	800b2dc <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 80014d8:	f7ff ff76 	bl	80013c8 <store_param>
			time_keep = 0;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <save_data+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
			save_param = 0;
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <save_data+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <save_data+0x5c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001579 	.word	0x20001579
 80014f8:	2000157a 	.word	0x2000157a
 80014fc:	20001984 	.word	0x20001984
 8001500:	2000157c 	.word	0x2000157c

08001504 <init_scd30_i2c>:
	}
	//error = scd4x_stop_periodic_measurement();
}

#elif use_scd30
static void init_scd30_i2c() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0



	int16_t error = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	80fb      	strh	r3, [r7, #6]
	sensirion_i2c_hal_init();
 800150e:	f013 fd29 	bl	8014f64 <sensirion_i2c_hal_init>


	scd4x_wake_up();
 8001512:	f013 fbaf 	bl	8014c74 <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001516:	f013 fb39 	bl	8014b8c <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 800151a:	f013 fb5f 	bl	8014bdc <scd4x_reinit>
	scd4x_power_down();
 800151e:	f013 fb83 	bl	8014c28 <scd4x_power_down>


	init_driver(SCD30_I2C_ADDR_61);
 8001522:	2061      	movs	r0, #97	@ 0x61
 8001524:	f012 feb0 	bl	8014288 <init_driver>
	scd30_stop_periodic_measurement();
 8001528:	f012 ff52 	bl	80143d0 <scd30_stop_periodic_measurement>
scd30_set_measurement_interval(2);
 800152c:	2002      	movs	r0, #2
 800152e:	f012 ff7d 	bl	801442c <scd30_set_measurement_interval>
//uint16_t inter;
//scd30_get_measurement_interval(&inter);
	//   scd30_soft_reset();
	uint8_t major = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	717b      	strb	r3, [r7, #5]
	uint8_t minor = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	713b      	strb	r3, [r7, #4]
	error = scd30_read_firmware_version(&major, &minor);
 800153a:	1d3a      	adds	r2, r7, #4
 800153c:	1d7b      	adds	r3, r7, #5
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f013 faa5 	bl	8014a90 <scd30_read_firmware_version>
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <get_scd30_measurement>:

void get_scd30_measurement() {
 8001554:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001558:	b09e      	sub	sp, #120	@ 0x78
 800155a:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 800155c:	2300      	movs	r3, #0
 800155e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 8001562:	2000      	movs	r0, #0
 8001564:	f012 fefc 	bl	8014360 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001574:	e081      	b.n	800167a <get_scd30_measurement+0x126>
		run_console_co2 = 1;
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <get_scd30_measurement+0x14c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
	  if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 800157c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001580:	4848      	ldr	r0, [pc, #288]	@ (80016a4 <get_scd30_measurement+0x150>)
 8001582:	f004 fd8d 	bl	80060a0 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <get_scd30_measurement+0x3e>
		{
		sensirion_i2c_hal_sleep_usec(1500000);
 800158c:	4846      	ldr	r0, [pc, #280]	@ (80016a8 <get_scd30_measurement+0x154>)
 800158e:	f013 fd5f 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
		}
		console_process();
 8001592:	f010 fe69 	bl	8012268 <console_process>
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 8001596:	4a45      	ldr	r2, [pc, #276]	@ (80016ac <get_scd30_measurement+0x158>)
 8001598:	4945      	ldr	r1, [pc, #276]	@ (80016b0 <get_scd30_measurement+0x15c>)
 800159a:	4846      	ldr	r0, [pc, #280]	@ (80016b4 <get_scd30_measurement+0x160>)
 800159c:	f012 fec0 	bl	8014320 <scd30_blocking_read_measurement_data>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 80015a6:	4b44      	ldr	r3, [pc, #272]	@ (80016b8 <get_scd30_measurement+0x164>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d05c      	beq.n	8001668 <get_scd30_measurement+0x114>
			char buf[100];
			if (error) {
 80015ae:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <get_scd30_measurement+0x8a>
				sprintf(buf,
 80015b6:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 80015ba:	463b      	mov	r3, r7
 80015bc:	493f      	ldr	r1, [pc, #252]	@ (80016bc <get_scd30_measurement+0x168>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f01d fa4a 	bl	801ea58 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015c4:	463b      	mov	r3, r7
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe6a 	bl	80002a0 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4639      	mov	r1, r7
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	483a      	ldr	r0, [pc, #232]	@ (80016c0 <get_scd30_measurement+0x16c>)
 80015d8:	f00a fe36 	bl	800c248 <HAL_UART_Transmit>
 80015dc:	e044      	b.n	8001668 <get_scd30_measurement+0x114>
			} else if (_RunTime_Packet.co2 == 0) {
 80015de:	4b35      	ldr	r3, [pc, #212]	@ (80016b4 <get_scd30_measurement+0x160>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d111      	bne.n	8001612 <get_scd30_measurement+0xbe>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 80015ee:	463b      	mov	r3, r7
 80015f0:	4934      	ldr	r1, [pc, #208]	@ (80016c4 <get_scd30_measurement+0x170>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f01d fa30 	bl	801ea58 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80015f8:	463b      	mov	r3, r7
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe50 	bl	80002a0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	4639      	mov	r1, r7
 8001606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160a:	482d      	ldr	r0, [pc, #180]	@ (80016c0 <get_scd30_measurement+0x16c>)
 800160c:	f00a fe1c 	bl	800c248 <HAL_UART_Transmit>
 8001610:	e02a      	b.n	8001668 <get_scd30_measurement+0x114>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001614:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ffae 	bl	8000578 <__aeabi_f2d>
 800161c:	4680      	mov	r8, r0
 800161e:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001620:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001622:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffa7 	bl	8000578 <__aeabi_f2d>
 800162a:	4604      	mov	r4, r0
 800162c:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <get_scd30_measurement+0x160>)
 8001630:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa0 	bl	8000578 <__aeabi_f2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4638      	mov	r0, r7
 800163e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001642:	e9cd 4500 	strd	r4, r5, [sp]
 8001646:	4642      	mov	r2, r8
 8001648:	464b      	mov	r3, r9
 800164a:	491f      	ldr	r1, [pc, #124]	@ (80016c8 <get_scd30_measurement+0x174>)
 800164c:	f01d fa04 	bl	801ea58 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001650:	463b      	mov	r3, r7
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fe24 	bl	80002a0 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	4639      	mov	r1, r7
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <get_scd30_measurement+0x16c>)
 8001664:	f00a fdf0 	bl	800c248 <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 8001668:	f000 fd3a 	bl	80020e0 <led_awake_routine1>
		console_process();
 800166c:	f010 fdfc 	bl	8012268 <console_process>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 8001670:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001674:	3301      	adds	r3, #1
 8001676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800167a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <get_scd30_measurement+0x178>)
 8001682:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8001686:	b29b      	uxth	r3, r3
 8001688:	429a      	cmp	r2, r3
 800168a:	f4ff af74 	bcc.w	8001576 <get_scd30_measurement+0x22>
	}
	run_console_co2 = 0;
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <get_scd30_measurement+0x14c>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]

}
 8001694:	bf00      	nop
 8001696:	3768      	adds	r7, #104	@ 0x68
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800169e:	bf00      	nop
 80016a0:	20000320 	.word	0x20000320
 80016a4:	40020000 	.word	0x40020000
 80016a8:	0016e360 	.word	0x0016e360
 80016ac:	20001538 	.word	0x20001538
 80016b0:	20001534 	.word	0x20001534
 80016b4:	20001530 	.word	0x20001530
 80016b8:	20001578 	.word	0x20001578
 80016bc:	0802221c 	.word	0x0802221c
 80016c0:	20001a74 	.word	0x20001a74
 80016c4:	08022254 	.word	0x08022254
 80016c8:	08022278 	.word	0x08022278
 80016cc:	200012cc 	.word	0x200012cc

080016d0 <get_scd30_measurement_>:

void get_scd30_measurement_()
{
 80016d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d4:	b09e      	sub	sp, #120	@ 0x78
 80016d6:	af04      	add	r7, sp, #16
	int16_t error = NO_ERROR;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	scd30_start_periodic_measurement(0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f012 fe3e 	bl	8014360 <scd30_start_periodic_measurement>

	uint8_t repetition = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80016f0:	e06f      	b.n	80017d2 <get_scd30_measurement_+0x102>
		//sensirion_i2c_hal_sleep_usec(1500000);
		error = scd30_blocking_read_measurement_data(&_RunTime_Packet.co2,
 80016f2:	4a3f      	ldr	r2, [pc, #252]	@ (80017f0 <get_scd30_measurement_+0x120>)
 80016f4:	493f      	ldr	r1, [pc, #252]	@ (80017f4 <get_scd30_measurement_+0x124>)
 80016f6:	4840      	ldr	r0, [pc, #256]	@ (80017f8 <get_scd30_measurement_+0x128>)
 80016f8:	f012 fe12 	bl	8014320 <scd30_blocking_read_measurement_data>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);

		if (debug_scd_pm) {
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <get_scd30_measurement_+0x12c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d05c      	beq.n	80017c4 <get_scd30_measurement_+0xf4>
			char buf[100];
			if (error) {
 800170a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800170e:	2b00      	cmp	r3, #0
 8001710:	d013      	beq.n	800173a <get_scd30_measurement_+0x6a>
				sprintf(buf,
 8001712:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 8001716:	463b      	mov	r3, r7
 8001718:	4939      	ldr	r1, [pc, #228]	@ (8001800 <get_scd30_measurement_+0x130>)
 800171a:	4618      	mov	r0, r3
 800171c:	f01d f99c 	bl	801ea58 <siprintf>
						"error executing blocking_read_measurement_data(): %i\n",
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001720:	463b      	mov	r3, r7
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fdbc 	bl	80002a0 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	b29a      	uxth	r2, r3
 800172c:	4639      	mov	r1, r7
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	4834      	ldr	r0, [pc, #208]	@ (8001804 <get_scd30_measurement_+0x134>)
 8001734:	f00a fd88 	bl	800c248 <HAL_UART_Transmit>
 8001738:	e044      	b.n	80017c4 <get_scd30_measurement_+0xf4>
			} else if (_RunTime_Packet.co2 == 0) {
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d111      	bne.n	800176e <get_scd30_measurement_+0x9e>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 800174a:	463b      	mov	r3, r7
 800174c:	492e      	ldr	r1, [pc, #184]	@ (8001808 <get_scd30_measurement_+0x138>)
 800174e:	4618      	mov	r0, r3
 8001750:	f01d f982 	bl	801ea58 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001754:	463b      	mov	r3, r7
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fda2 	bl	80002a0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	4639      	mov	r1, r7
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	4827      	ldr	r0, [pc, #156]	@ (8001804 <get_scd30_measurement_+0x134>)
 8001768:	f00a fd6e 	bl	800c248 <HAL_UART_Transmit>
 800176c:	e02a      	b.n	80017c4 <get_scd30_measurement_+0xf4>
			} else {

				sprintf(buf,
						"Co2: %.2f , Temperature: %.2f C, Humidity: %.2f  \r\n",
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <get_scd30_measurement_+0x128>)
 8001770:	681b      	ldr	r3, [r3, #0]
				sprintf(buf,
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ff00 	bl	8000578 <__aeabi_f2d>
 8001778:	4680      	mov	r8, r0
 800177a:	4689      	mov	r9, r1
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 800177c:	4b1e      	ldr	r3, [pc, #120]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800177e:	685b      	ldr	r3, [r3, #4]
				sprintf(buf,
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fef9 	bl	8000578 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
						_RunTime_Packet.humidity);
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <get_scd30_measurement_+0x128>)
 800178c:	689b      	ldr	r3, [r3, #8]
				sprintf(buf,
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fef2 	bl	8000578 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4638      	mov	r0, r7
 800179a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800179e:	e9cd 4500 	strd	r4, r5, [sp]
 80017a2:	4642      	mov	r2, r8
 80017a4:	464b      	mov	r3, r9
 80017a6:	4919      	ldr	r1, [pc, #100]	@ (800180c <get_scd30_measurement_+0x13c>)
 80017a8:	f01d f956 	bl	801ea58 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80017ac:	463b      	mov	r3, r7
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fd76 	bl	80002a0 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	4639      	mov	r1, r7
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	4811      	ldr	r0, [pc, #68]	@ (8001804 <get_scd30_measurement_+0x134>)
 80017c0:	f00a fd42 	bl	800c248 <HAL_UART_Transmit>
			}
		}

		led_awake_routine1();
 80017c4:	f000 fc8c 	bl	80020e0 <led_awake_routine1>
	for (repetition = 0; repetition < _Flash_Packet.co2_samples; repetition++) {
 80017c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017cc:	3301      	adds	r3, #1
 80017ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <get_scd30_measurement_+0x140>)
 80017da:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80017de:	b29b      	uxth	r3, r3
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d386      	bcc.n	80016f2 <get_scd30_measurement_+0x22>

	}
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3768      	adds	r7, #104	@ 0x68
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	20001538 	.word	0x20001538
 80017f4:	20001534 	.word	0x20001534
 80017f8:	20001530 	.word	0x20001530
 80017fc:	20001578 	.word	0x20001578
 8001800:	0802221c 	.word	0x0802221c
 8001804:	20001a74 	.word	0x20001a74
 8001808:	08022254 	.word	0x08022254
 800180c:	08022278 	.word	0x08022278
 8001810:	200012cc 	.word	0x200012cc

08001814 <init_sps30>:

#endif

static void init_sps30() {
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	@ 0x30
 8001818:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800181a:	480b      	ldr	r0, [pc, #44]	@ (8001848 <init_sps30+0x34>)
 800181c:	f014 f81c 	bl	8015858 <sensirion_sleep_usec>

	sensirion_uart_open();
 8001820:	f013 ff64 	bl	80156ec <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f014 f935 	bl	8015a96 <sps30_read_version>
 800182c:	4603      	mov	r3, r0
 800182e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f014 f823 	bl	8015880 <sps30_get_serial>
 800183a:	4603      	mov	r3, r0
 800183c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	@ 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	000f4240 	.word	0x000f4240

0800184c <get_sps30_measurement>:
void get_sps30_measurement() {
 800184c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001850:	b0a0      	sub	sp, #128	@ 0x80
 8001852:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 8001854:	f014 f840 	bl	80158d8 <sps30_start_measurement>
 8001858:	4603      	mov	r3, r0
 800185a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 800185e:	483a      	ldr	r0, [pc, #232]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001860:	f014 f866 	bl	8015930 <sps30_read_measurement>
 8001864:	4603      	mov	r3, r0
 8001866:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <get_sps30_measurement+0xfc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a37      	ldr	r2, [pc, #220]	@ (800194c <get_sps30_measurement+0x100>)
 8001870:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a35      	ldr	r2, [pc, #212]	@ (800194c <get_sps30_measurement+0x100>)
 8001878:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <get_sps30_measurement+0xfc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4a33      	ldr	r2, [pc, #204]	@ (800194c <get_sps30_measurement+0x100>)
 8001880:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 8001882:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	4a31      	ldr	r2, [pc, #196]	@ (800194c <get_sps30_measurement+0x100>)
 8001888:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 800188a:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800188e:	2b00      	cmp	r3, #0
 8001890:	db54      	blt.n	800193c <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001892:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <get_sps30_measurement+0x104>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d050      	beq.n	800193c <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800189a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800189e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d113      	bne.n	80018d4 <get_sps30_measurement+0x88>
				sprintf(buffer,
 80018ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	463b      	mov	r3, r7
 80018b4:	4927      	ldr	r1, [pc, #156]	@ (8001954 <get_sps30_measurement+0x108>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f01d f8ce 	bl	801ea58 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80018bc:	463b      	mov	r3, r7
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fcee 	bl	80002a0 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4639      	mov	r1, r7
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	4822      	ldr	r0, [pc, #136]	@ (8001958 <get_sps30_measurement+0x10c>)
 80018d0:	f00a fcba 	bl	800c248 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe4d 	bl	8000578 <__aeabi_f2d>
 80018de:	4682      	mov	sl, r0
 80018e0:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018e2:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018e4:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe46 	bl	8000578 <__aeabi_f2d>
 80018ec:	4604      	mov	r4, r0
 80018ee:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <get_sps30_measurement+0xfc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe3f 	bl	8000578 <__aeabi_f2d>
 80018fa:	4680      	mov	r8, r0
 80018fc:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <get_sps30_measurement+0xfc>)
 8001900:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe38 	bl	8000578 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4638      	mov	r0, r7
 800190e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001912:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001916:	e9cd 4500 	strd	r4, r5, [sp]
 800191a:	4652      	mov	r2, sl
 800191c:	465b      	mov	r3, fp
 800191e:	490f      	ldr	r1, [pc, #60]	@ (800195c <get_sps30_measurement+0x110>)
 8001920:	f01d f89a 	bl	801ea58 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 8001924:	463b      	mov	r3, r7
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fcba 	bl	80002a0 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	4639      	mov	r1, r7
 8001932:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <get_sps30_measurement+0x10c>)
 8001938:	f00a fc86 	bl	800c248 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 800193c:	bf00      	nop
 800193e:	3768      	adds	r7, #104	@ 0x68
 8001940:	46bd      	mov	sp, r7
 8001942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001946:	bf00      	nop
 8001948:	20001798 	.word	0x20001798
 800194c:	20001530 	.word	0x20001530
 8001950:	20001578 	.word	0x20001578
 8001954:	080222ac 	.word	0x080222ac
 8001958:	20001a74 	.word	0x20001a74
 800195c:	080222e0 	.word	0x080222e0

08001960 <check_peripheral_error>:
static void check_peripheral_error() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 8001966:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <check_peripheral_error+0xac>)
 8001968:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <check_peripheral_error+0x1c>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 8001970:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <check_peripheral_error+0xac>)
 8001972:	2200      	movs	r2, #0
 8001974:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		console_uart_init();
 8001978:	f010 fc8e 	bl	8012298 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 800197c:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <check_peripheral_error+0xac>)
 800197e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001982:	2b00      	cmp	r3, #0
 8001984:	d015      	beq.n	80019b2 <check_peripheral_error+0x52>
		_RunTime_Packet.sps30_uart_error = 0;
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <check_peripheral_error+0xac>)
 8001988:	2200      	movs	r2, #0
 800198a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		disable_5v();
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001994:	481e      	ldr	r0, [pc, #120]	@ (8001a10 <check_peripheral_error+0xb0>)
 8001996:	f004 fb9b 	bl	80060d0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800199a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800199e:	f002 fbbf 	bl	8004120 <HAL_Delay>
		enable_5v();
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a8:	4819      	ldr	r0, [pc, #100]	@ (8001a10 <check_peripheral_error+0xb0>)
 80019aa:	f004 fb91 	bl	80060d0 <HAL_GPIO_WritePin>
		init_sps30();
 80019ae:	f7ff ff31 	bl	8001814 <init_sps30>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
	}
#elif use_scd30
	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	2205      	movs	r2, #5
 80019b8:	21c2      	movs	r1, #194	@ 0xc2
 80019ba:	4816      	ldr	r0, [pc, #88]	@ (8001a14 <check_peripheral_error+0xb4>)
 80019bc:	f005 f85e 	bl	8006a7c <HAL_I2C_IsDeviceReady>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <check_peripheral_error+0x9a>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <check_peripheral_error+0xb8>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <check_peripheral_error+0x90>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4912      	ldr	r1, [pc, #72]	@ (8001a1c <check_peripheral_error+0xbc>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f01d f840 	bl	801ea58 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc60 	bl	80002a0 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	1d39      	adds	r1, r7, #4
 80019e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ea:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <check_peripheral_error+0xc0>)
 80019ec:	f00a fc2c 	bl	800c248 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <check_peripheral_error+0xac>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	{
		_RunTime_Packet.scd4x_i2c_error = 0;
	}
#endif

}
 80019f8:	e003      	b.n	8001a02 <check_peripheral_error+0xa2>
		_RunTime_Packet.scd4x_i2c_error = 0;
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <check_peripheral_error+0xac>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8001a02:	bf00      	nop
 8001a04:	3738      	adds	r7, #56	@ 0x38
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20001530 	.word	0x20001530
 8001a10:	40020400 	.word	0x40020400
 8001a14:	20001838 	.word	0x20001838
 8001a18:	20001578 	.word	0x20001578
 8001a1c:	08022318 	.word	0x08022318
 8001a20:	20001a74 	.word	0x20001a74

08001a24 <sensor_calibration>:
static void sensor_calibration() {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <sensor_calibration+0x28>)
 8001a2a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00a      	beq.n	8001a48 <sensor_calibration+0x24>
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <sensor_calibration+0x28>)
 8001a34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <sensor_calibration+0x28>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		sps30_start_manual_fan_cleaning();
 8001a44:	f014 f813 	bl	8015a6e <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20001530 	.word	0x20001530

08001a50 <sleep>:
static void sleep() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 8001a54:	4b32      	ldr	r3, [pc, #200]	@ (8001b20 <sleep+0xd0>)
 8001a56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a5a:	635a      	str	r2, [r3, #52]	@ 0x34
	RED_LED_PWM(disable_led);
 8001a5c:	4b30      	ldr	r3, [pc, #192]	@ (8001b20 <sleep+0xd0>)
 8001a5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a62:	639a      	str	r2, [r3, #56]	@ 0x38
	BLUE_LED_PWM(disable_led);
 8001a64:	4a2f      	ldr	r2, [pc, #188]	@ (8001b24 <sleep+0xd4>)
 8001a66:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a6a:	2008      	movs	r0, #8
 8001a6c:	f7ff fad2 	bl	8001014 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 8001a70:	482d      	ldr	r0, [pc, #180]	@ (8001b28 <sleep+0xd8>)
 8001a72:	f002 fc00 	bl	8004276 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 8001a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7a:	220b      	movs	r2, #11
 8001a7c:	492b      	ldr	r1, [pc, #172]	@ (8001b2c <sleep+0xdc>)
 8001a7e:	482c      	ldr	r0, [pc, #176]	@ (8001b30 <sleep+0xe0>)
 8001a80:	f00a fbe2 	bl	800c248 <HAL_UART_Transmit>
	disable_5v();
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a8a:	482a      	ldr	r0, [pc, #168]	@ (8001b34 <sleep+0xe4>)
 8001a8c:	f004 fb20 	bl	80060d0 <HAL_GPIO_WritePin>
	disable_motion();
 8001a90:	2201      	movs	r2, #1
 8001a92:	2102      	movs	r1, #2
 8001a94:	4828      	ldr	r0, [pc, #160]	@ (8001b38 <sleep+0xe8>)
 8001a96:	f004 fb1b 	bl	80060d0 <HAL_GPIO_WritePin>
	scd4x_power_down();
#elif use_scd30
//	scd4x_stop_periodic_measurement();
//	scd4x_power_down();
	//check_peripheral_error() ;
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8001a9a:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <sleep+0xec>)
 8001a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <sleep+0x62>
	scd30_stop_periodic_measurement();
 8001aa4:	f012 fc94 	bl	80143d0 <scd30_stop_periodic_measurement>
	scd30_activate_auto_calibration(0);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f012 fdb9 	bl	8014620 <scd30_activate_auto_calibration>
	scd30_soft_reset();
 8001aae:	f013 f83d 	bl	8014b2c <scd30_soft_reset>
	}
#endif
	console_uart_deinit();
 8001ab2:	f010 fbe5 	bl	8012280 <console_uart_deinit>
	sensirion_i2c_hal_free();
 8001ab6:	f013 fa87 	bl	8014fc8 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 8001aba:	f013 fe57 	bl	801576c <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 8001abe:	f01b f923 	bl	801cd08 <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 8001ac2:	481f      	ldr	r0, [pc, #124]	@ (8001b40 <sleep+0xf0>)
 8001ac4:	f009 faf9 	bl	800b0ba <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001ac8:	481e      	ldr	r0, [pc, #120]	@ (8001b44 <sleep+0xf4>)
 8001aca:	f009 faf6 	bl	800b0ba <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001ace:	481e      	ldr	r0, [pc, #120]	@ (8001b48 <sleep+0xf8>)
 8001ad0:	f009 faf3 	bl	800b0ba <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001ad4:	481d      	ldr	r0, [pc, #116]	@ (8001b4c <sleep+0xfc>)
 8001ad6:	f003 f9f1 	bl	8004ebc <HAL_DMA_DeInit>
	HAL_SuspendTick();
 8001ada:	f002 fb45 	bl	8004168 <HAL_SuspendTick>
	gpio_disable();
 8001ade:	f001 fce7 	bl	80034b0 <gpio_disable>
//	   __HAL_RCC_GPIOD_CLK_DISABLE();
//	   __HAL_RCC_GPIOE_CLK_DISABLE();
//	   __HAL_RCC_GPIOH_CLK_DISABLE();

	   /* FLASH Deep Power Down Mode enabled */
	   HAL_PWREx_EnableFlashPowerDown();
 8001ae2:	f007 f805 	bl	8008af0 <HAL_PWREx_EnableFlashPowerDown>

	//HAL_RCC_DeInit();
	//clock_speed_slow();


	Rtc_Alarm_watchdog();
 8001ae6:	f012 f889 	bl	8013bfc <Rtc_Alarm_watchdog>
	do {
	HAL_IWDG_Refresh(&hiwdg);
 8001aea:	4819      	ldr	r0, [pc, #100]	@ (8001b50 <sleep+0x100>)
 8001aec:	f005 fcbc 	bl	8007468 <HAL_IWDG_Refresh>
	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001af0:	2101      	movs	r1, #1
 8001af2:	2001      	movs	r0, #1
 8001af4:	f006 ffcc 	bl	8008a90 <HAL_PWR_EnterSTOPMode>
	//HAL_IWDG_Refresh(&hiwdg);
	Rtc_Alarm_watchdog();
 8001af8:	f012 f880 	bl	8013bfc <Rtc_Alarm_watchdog>
	}while(set_alarm_Time == 0 && _RunTime_Packet.pwr_off_det == 0 && _RunTime_Packet.usb_detection == 0);
 8001afc:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <sleep+0x104>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <sleep+0xc8>
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <sleep+0xec>)
 8001b06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d104      	bne.n	8001b18 <sleep+0xc8>
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <sleep+0xec>)
 8001b10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0e8      	beq.n	8001aea <sleep+0x9a>

	Rtc_Alarm_watchdog_disable();
 8001b18:	f012 f85e 	bl	8013bd8 <Rtc_Alarm_watchdog_disable>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40000400 	.word	0x40000400
 8001b24:	20000324 	.word	0x20000324
 8001b28:	200017f0 	.word	0x200017f0
 8001b2c:	08022340 	.word	0x08022340
 8001b30:	20001a74 	.word	0x20001a74
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	20001530 	.word	0x20001530
 8001b40:	2000193c 	.word	0x2000193c
 8001b44:	20001984 	.word	0x20001984
 8001b48:	200019cc 	.word	0x200019cc
 8001b4c:	20001a14 	.word	0x20001a14
 8001b50:	2000188c 	.word	0x2000188c
 8001b54:	20000029 	.word	0x20000029

08001b58 <wakeup>:
static void wakeup() {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_RCC_DeInit();
 8001b5c:	f007 fd26 	bl	80095ac <HAL_RCC_DeInit>
	clock_speed_high();
 8001b60:	f7ff fb60 	bl	8001224 <clock_speed_high>

	HAL_PWREx_DisableFlashPowerDown();
 8001b64:	f006 ffd0 	bl	8008b08 <HAL_PWREx_DisableFlashPowerDown>
	HAL_ResumeTick();
 8001b68:	f002 fb0e 	bl	8004188 <HAL_ResumeTick>
	gpio_enable();
 8001b6c:	f001 fcd6 	bl	800351c <gpio_enable>

	enable_5v();
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b76:	4838      	ldr	r0, [pc, #224]	@ (8001c58 <wakeup+0x100>)
 8001b78:	f004 faaa 	bl	80060d0 <HAL_GPIO_WritePin>
	enable_motion();
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2102      	movs	r1, #2
 8001b80:	4836      	ldr	r0, [pc, #216]	@ (8001c5c <wakeup+0x104>)
 8001b82:	f004 faa5 	bl	80060d0 <HAL_GPIO_WritePin>
	console_uart_init();
 8001b86:	f010 fb87 	bl	8012298 <console_uart_init>

	MX_DMA_Init();
 8001b8a:	f7ff fb07 	bl	800119c <MX_DMA_Init>
	MX_TIM1_Init();
 8001b8e:	f001 f8f7 	bl	8002d80 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001b92:	f001 f945 	bl	8002e20 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001b96:	f001 f991 	bl	8002ebc <MX_TIM3_Init>

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 8001b9a:	f7ff fcb3 	bl	8001504 <init_scd30_i2c>
#endif

	if (Mount_SD("/") == FR_OK) {
 8001b9e:	4830      	ldr	r0, [pc, #192]	@ (8001c60 <wakeup+0x108>)
 8001ba0:	f01a fa38 	bl	801c014 <Mount_SD>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <wakeup+0x5e>
		Unmount_SD("/");
 8001baa:	482d      	ldr	r0, [pc, #180]	@ (8001c60 <wakeup+0x108>)
 8001bac:	f01a fa5e 	bl	801c06c <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001bb0:	f01b f8bc 	bl	801cd2c <MX_USB_DEVICE_Init>
 8001bb4:	e002      	b.n	8001bbc <wakeup+0x64>
	} else {
		datawritten = 2;
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <wakeup+0x10c>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bc0:	4826      	ldr	r0, [pc, #152]	@ (8001c5c <wakeup+0x104>)
 8001bc2:	f004 fa6d 	bl	80060a0 <HAL_GPIO_ReadPin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <wakeup+0x7a>
		init_sps30();
 8001bcc:	f7ff fe22 	bl	8001814 <init_sps30>
 8001bd0:	e00f      	b.n	8001bf2 <wakeup+0x9a>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001bd2:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <wakeup+0x110>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_start_timer = 1;
 8001bda:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <wakeup+0x110>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <wakeup+0x114>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001be8:	f002 fa8e 	bl	8004108 <HAL_GetTick>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a20      	ldr	r2, [pc, #128]	@ (8001c70 <wakeup+0x118>)
 8001bf0:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001bf2:	4820      	ldr	r0, [pc, #128]	@ (8001c74 <wakeup+0x11c>)
 8001bf4:	f009 fab6 	bl	800b164 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001bf8:	491f      	ldr	r1, [pc, #124]	@ (8001c78 <wakeup+0x120>)
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001c7c <wakeup+0x124>)
 8001c00:	481f      	ldr	r0, [pc, #124]	@ (8001c80 <wakeup+0x128>)
 8001c02:	f003 f9b9 	bl	8004f78 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001c06:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <wakeup+0x11c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <wakeup+0x11c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c14:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001c16:	4a18      	ldr	r2, [pc, #96]	@ (8001c78 <wakeup+0x120>)
 8001c18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c1c:	2008      	movs	r0, #8
 8001c1e:	f7ff f9f9 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001c22:	2100      	movs	r1, #0
 8001c24:	4817      	ldr	r0, [pc, #92]	@ (8001c84 <wakeup+0x12c>)
 8001c26:	f009 fbe1 	bl	800b3ec <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001c2a:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <wakeup+0x130>)
 8001c2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c30:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001c32:	2104      	movs	r1, #4
 8001c34:	4813      	ldr	r0, [pc, #76]	@ (8001c84 <wakeup+0x12c>)
 8001c36:	f009 fbd9 	bl	800b3ec <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <wakeup+0x130>)
 8001c3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38

	pwr_off_detected();
 8001c42:	f7ff facb 	bl	80011dc <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4a:	220a      	movs	r2, #10
 8001c4c:	490f      	ldr	r1, [pc, #60]	@ (8001c8c <wakeup+0x134>)
 8001c4e:	4810      	ldr	r0, [pc, #64]	@ (8001c90 <wakeup+0x138>)
 8001c50:	f00a fafa 	bl	800c248 <HAL_UART_Transmit>
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	0802234c 	.word	0x0802234c
 8001c64:	20002328 	.word	0x20002328
 8001c68:	20001530 	.word	0x20001530
 8001c6c:	20001584 	.word	0x20001584
 8001c70:	200017c8 	.word	0x200017c8
 8001c74:	2000193c 	.word	0x2000193c
 8001c78:	20000324 	.word	0x20000324
 8001c7c:	40020418 	.word	0x40020418
 8001c80:	20001a14 	.word	0x20001a14
 8001c84:	200019cc 	.word	0x200019cc
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	08022350 	.word	0x08022350
 8001c90:	20001a74 	.word	0x20001a74

08001c94 <green_led_blink>:

static void green_led_blink() {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001c98:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <green_led_blink+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001c9e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001ca2:	f002 fa3d 	bl	8004120 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <green_led_blink+0x4c>)
 8001ca8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cac:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cae:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cb2:	f002 fa35 	bl	8004120 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <green_led_blink+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001cbc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cc0:	f002 fa2e 	bl	8004120 <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <green_led_blink+0x4c>)
 8001cc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001cca:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(800);
 8001ccc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001cd0:	f002 fa26 	bl	8004120 <HAL_Delay>

	GREEN_LED_PWM(0);
 8001cd4:	4b02      	ldr	r3, [pc, #8]	@ (8001ce0 <green_led_blink+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <led_awake_routine>:

static void led_awake_routine() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001ce8:	4ba6      	ldr	r3, [pc, #664]	@ (8001f84 <led_awake_routine+0x2a0>)
 8001cea:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 8195 	bne.w	800201e <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001cf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cf8:	48a3      	ldr	r0, [pc, #652]	@ (8001f88 <led_awake_routine+0x2a4>)
 8001cfa:	f004 f9d1 	bl	80060a0 <HAL_GPIO_ReadPin>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d025      	beq.n	8001d50 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d04:	4b9f      	ldr	r3, [pc, #636]	@ (8001f84 <led_awake_routine+0x2a0>)
 8001d06:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d0a:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001f8c <led_awake_routine+0x2a8>
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	db0d      	blt.n	8001d34 <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001d18:	4b9d      	ldr	r3, [pc, #628]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d1e:	4b9c      	ldr	r3, [pc, #624]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001d20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d24:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d26:	4a9b      	ldr	r2, [pc, #620]	@ (8001f94 <led_awake_routine+0x2b0>)
 8001d28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d2c:	2008      	movs	r0, #8
 8001d2e:	f7ff f971 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001d32:	e196      	b.n	8002062 <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001d34:	4b96      	ldr	r3, [pc, #600]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001d36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d3a:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8001d3c:	4b94      	ldr	r3, [pc, #592]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001d3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d42:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8001d44:	4a93      	ldr	r2, [pc, #588]	@ (8001f94 <led_awake_routine+0x2b0>)
 8001d46:	2100      	movs	r1, #0
 8001d48:	2008      	movs	r0, #8
 8001d4a:	f7ff f963 	bl	8001014 <setSoftPWM>
}
 8001d4e:	e188      	b.n	8002062 <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001d50:	4a90      	ldr	r2, [pc, #576]	@ (8001f94 <led_awake_routine+0x2b0>)
 8001d52:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d56:	2008      	movs	r0, #8
 8001d58:	f7ff f95c 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001d5c:	4b89      	ldr	r3, [pc, #548]	@ (8001f84 <led_awake_routine+0x2a0>)
 8001d5e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d62:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001f8c <led_awake_routine+0x2a8>
 8001d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6e:	db38      	blt.n	8001de2 <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001d70:	4b87      	ldr	r3, [pc, #540]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001d72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d76:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001d78:	4a86      	ldr	r2, [pc, #536]	@ (8001f94 <led_awake_routine+0x2b0>)
 8001d7a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d7e:	2008      	movs	r0, #8
 8001d80:	f7ff f948 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001d84:	4b84      	ldr	r3, [pc, #528]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001d8c:	4b83      	ldr	r3, [pc, #524]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	3305      	adds	r3, #5
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	4b80      	ldr	r3, [pc, #512]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e008      	b.n	8001db2 <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001da0:	4b7e      	ldr	r3, [pc, #504]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b05      	subs	r3, #5
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	4b7b      	ldr	r3, [pc, #492]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001db0:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001db2:	4b7a      	ldr	r3, [pc, #488]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dbc:	dd03      	ble.n	8001dc6 <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001dbe:	4b76      	ldr	r3, [pc, #472]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e007      	b.n	8001dd6 <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001dc6:	4b75      	ldr	r3, [pc, #468]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dc02      	bgt.n	8001dd6 <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001dd0:	4b71      	ldr	r3, [pc, #452]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001dd6:	4b71      	ldr	r3, [pc, #452]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001dd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001dde:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001de0:	e13f      	b.n	8002062 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001de2:	4b68      	ldr	r3, [pc, #416]	@ (8001f84 <led_awake_routine+0x2a0>)
 8001de4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de8:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df4:	dd42      	ble.n	8001e7c <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001df6:	4b63      	ldr	r3, [pc, #396]	@ (8001f84 <led_awake_routine+0x2a0>)
 8001df8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dfc:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001f8c <led_awake_routine+0x2a8>
 8001e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d838      	bhi.n	8001e7c <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001e0a:	4b61      	ldr	r3, [pc, #388]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001e0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e10:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8001e12:	4a60      	ldr	r2, [pc, #384]	@ (8001f94 <led_awake_routine+0x2b0>)
 8001e14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e18:	2008      	movs	r0, #8
 8001e1a:	f7ff f8fb 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001e1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001e26:	4b5d      	ldr	r3, [pc, #372]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3305      	adds	r3, #5
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	4b59      	ldr	r3, [pc, #356]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	e008      	b.n	8001e4c <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001e3a:	4b58      	ldr	r3, [pc, #352]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b05      	subs	r3, #5
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	4b54      	ldr	r3, [pc, #336]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001e4a:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001e4c:	4b53      	ldr	r3, [pc, #332]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e56:	dd03      	ble.n	8001e60 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001e58:	4b4f      	ldr	r3, [pc, #316]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e007      	b.n	8001e70 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001e60:	4b4e      	ldr	r3, [pc, #312]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	dc02      	bgt.n	8001e70 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e70:	4b4a      	ldr	r3, [pc, #296]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001e72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e76:	4b46      	ldr	r3, [pc, #280]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e7a:	e0f2      	b.n	8002062 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001e7c:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <led_awake_routine+0x2a0>)
 8001e7e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e82:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001fa0 <led_awake_routine+0x2bc>
 8001e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	f340 808d 	ble.w	8001fac <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001e92:	4b3c      	ldr	r3, [pc, #240]	@ (8001f84 <led_awake_routine+0x2a0>)
 8001e94:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e98:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	f200 8082 	bhi.w	8001fac <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <led_awake_routine+0x2c0>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d003      	beq.n	8001ebc <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <led_awake_routine+0x2c0>)
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	4b37      	ldr	r3, [pc, #220]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001eba:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001ebc:	4a35      	ldr	r2, [pc, #212]	@ (8001f94 <led_awake_routine+0x2b0>)
 8001ebe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ec2:	2008      	movs	r0, #8
 8001ec4:	f7ff f8a6 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001ec8:	4b33      	ldr	r3, [pc, #204]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001ed0:	4b32      	ldr	r3, [pc, #200]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3305      	adds	r3, #5
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	b21a      	sxth	r2, r3
 8001ede:	4b2f      	ldr	r3, [pc, #188]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001ee0:	801a      	strh	r2, [r3, #0]
 8001ee2:	e008      	b.n	8001ef6 <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b05      	subs	r3, #5
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001ef4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001ef6:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f00:	dd03      	ble.n	8001f0a <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001f02:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e007      	b.n	8001f1a <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001f0a:	4b24      	ldr	r3, [pc, #144]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	dc02      	bgt.n	8001f1a <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001f14:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <led_awake_routine+0x2b4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <led_awake_routine+0x2c0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001f22:	4b21      	ldr	r3, [pc, #132]	@ (8001fa8 <led_awake_routine+0x2c4>)
 8001f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3305      	adds	r3, #5
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	b21a      	sxth	r2, r3
 8001f30:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <led_awake_routine+0x2c4>)
 8001f32:	801a      	strh	r2, [r3, #0]
 8001f34:	e008      	b.n	8001f48 <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <led_awake_routine+0x2c4>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b05      	subs	r3, #5
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b21a      	sxth	r2, r3
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <led_awake_routine+0x2c4>)
 8001f46:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001f48:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <led_awake_routine+0x2c4>)
 8001f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f52:	dd03      	ble.n	8001f5c <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001f54:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <led_awake_routine+0x2c0>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e007      	b.n	8001f6c <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <led_awake_routine+0x2c4>)
 8001f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	dc02      	bgt.n	8001f6c <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001f66:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <led_awake_routine+0x2c0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <led_awake_routine+0x2b8>)
 8001f6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f72:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001f74:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <led_awake_routine+0x2c4>)
 8001f78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <led_awake_routine+0x2ac>)
 8001f7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f80:	e06f      	b.n	8002062 <led_awake_routine+0x37e>
 8001f82:	bf00      	nop
 8001f84:	20001530 	.word	0x20001530
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40833333 	.word	0x40833333
 8001f90:	40000400 	.word	0x40000400
 8001f94:	20000324 	.word	0x20000324
 8001f98:	200012c4 	.word	0x200012c4
 8001f9c:	200012c6 	.word	0x200012c6
 8001fa0:	40533333 	.word	0x40533333
 8001fa4:	200012c5 	.word	0x200012c5
 8001fa8:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 8001fac:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <led_awake_routine+0x384>)
 8001fae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fb2:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800206c <led_awake_routine+0x388>)
 8001fb6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fba:	2008      	movs	r0, #8
 8001fbc:	f7ff f82a 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <led_awake_routine+0x38c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <led_awake_routine+0x390>)
 8001fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3305      	adds	r3, #5
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <led_awake_routine+0x390>)
 8001fd8:	801a      	strh	r2, [r3, #0]
 8001fda:	e008      	b.n	8001fee <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8001fdc:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <led_awake_routine+0x390>)
 8001fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b05      	subs	r3, #5
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <led_awake_routine+0x390>)
 8001fec:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <led_awake_routine+0x390>)
 8001ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ff8:	dd03      	ble.n	8002002 <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <led_awake_routine+0x38c>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	e007      	b.n	8002012 <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8002002:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <led_awake_routine+0x390>)
 8002004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002008:	2b00      	cmp	r3, #0
 800200a:	dc02      	bgt.n	8002012 <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 800200c:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <led_awake_routine+0x38c>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <led_awake_routine+0x390>)
 8002014:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <led_awake_routine+0x384>)
 800201a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800201c:	e021      	b.n	8002062 <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <led_awake_routine+0x384>)
 8002020:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002024:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8002026:	4a11      	ldr	r2, [pc, #68]	@ (800206c <led_awake_routine+0x388>)
 8002028:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800202c:	2008      	movs	r0, #8
 800202e:	f7fe fff1 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <led_awake_routine+0x390>)
 8002034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800203c:	d004      	beq.n	8002048 <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <led_awake_routine+0x390>)
 8002040:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	e002      	b.n	800204e <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 8002048:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <led_awake_routine+0x390>)
 800204a:	2200      	movs	r2, #0
 800204c:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <led_awake_routine+0x390>)
 8002050:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <led_awake_routine+0x384>)
 8002056:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8002058:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800205c:	f002 f860 	bl	8004120 <HAL_Delay>
}
 8002060:	e7ff      	b.n	8002062 <led_awake_routine+0x37e>
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40000400 	.word	0x40000400
 800206c:	20000324 	.word	0x20000324
 8002070:	200012c5 	.word	0x200012c5
 8002074:	200012c8 	.word	0x200012c8

08002078 <blink_red>:

void blink_red() {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <blink_red+0x60>)
 800207e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002082:	635a      	str	r2, [r3, #52]	@ 0x34
	BLUE_LED_PWM(disable_led);
 8002084:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <blink_red+0x64>)
 8002086:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800208a:	2008      	movs	r0, #8
 800208c:	f7fe ffc2 	bl	8001014 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <blink_red+0x60>)
 8002092:	2200      	movs	r2, #0
 8002094:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 8002096:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800209a:	f002 f841 	bl	8004120 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <blink_red+0x60>)
 80020a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020a4:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020aa:	f002 f839 	bl	8004120 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <blink_red+0x60>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020b8:	f002 f832 	bl	8004120 <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <blink_red+0x60>)
 80020be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020c2:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_Delay(1000);
 80020c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020c8:	f002 f82a 	bl	8004120 <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 80020cc:	4b02      	ldr	r3, [pc, #8]	@ (80020d8 <blink_red+0x60>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40000400 	.word	0x40000400
 80020dc:	20000324 	.word	0x20000324

080020e0 <led_awake_routine1>:

static void led_awake_routine1() {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 80020e4:	4ba6      	ldr	r3, [pc, #664]	@ (8002380 <led_awake_routine1+0x2a0>)
 80020e6:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 8195 	bne.w	800241a <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 80020f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020f4:	48a3      	ldr	r0, [pc, #652]	@ (8002384 <led_awake_routine1+0x2a4>)
 80020f6:	f003 ffd3 	bl	80060a0 <HAL_GPIO_ReadPin>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d025      	beq.n	800214c <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002100:	4b9f      	ldr	r3, [pc, #636]	@ (8002380 <led_awake_routine1+0x2a0>)
 8002102:	edd3 7a08 	vldr	s15, [r3, #32]
 8002106:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8002388 <led_awake_routine1+0x2a8>
 800210a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002112:	db0d      	blt.n	8002130 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 8002114:	4b9d      	ldr	r3, [pc, #628]	@ (800238c <led_awake_routine1+0x2ac>)
 8002116:	2200      	movs	r2, #0
 8002118:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 800211a:	4b9c      	ldr	r3, [pc, #624]	@ (800238c <led_awake_routine1+0x2ac>)
 800211c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002120:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002122:	4a9b      	ldr	r2, [pc, #620]	@ (8002390 <led_awake_routine1+0x2b0>)
 8002124:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002128:	2008      	movs	r0, #8
 800212a:	f7fe ff73 	bl	8001014 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 800212e:	e196      	b.n	800245e <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002130:	4b96      	ldr	r3, [pc, #600]	@ (800238c <led_awake_routine1+0x2ac>)
 8002132:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002136:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(disable_led);
 8002138:	4b94      	ldr	r3, [pc, #592]	@ (800238c <led_awake_routine1+0x2ac>)
 800213a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800213e:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(0);
 8002140:	4a93      	ldr	r2, [pc, #588]	@ (8002390 <led_awake_routine1+0x2b0>)
 8002142:	2100      	movs	r1, #0
 8002144:	2008      	movs	r0, #8
 8002146:	f7fe ff65 	bl	8001014 <setSoftPWM>
}
 800214a:	e188      	b.n	800245e <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 800214c:	4a90      	ldr	r2, [pc, #576]	@ (8002390 <led_awake_routine1+0x2b0>)
 800214e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002152:	2008      	movs	r0, #8
 8002154:	f7fe ff5e 	bl	8001014 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8002158:	4b89      	ldr	r3, [pc, #548]	@ (8002380 <led_awake_routine1+0x2a0>)
 800215a:	edd3 7a08 	vldr	s15, [r3, #32]
 800215e:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8002388 <led_awake_routine1+0x2a8>
 8002162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	db38      	blt.n	80021de <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 800216c:	4b87      	ldr	r3, [pc, #540]	@ (800238c <led_awake_routine1+0x2ac>)
 800216e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002172:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 8002174:	4a86      	ldr	r2, [pc, #536]	@ (8002390 <led_awake_routine1+0x2b0>)
 8002176:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800217a:	2008      	movs	r0, #8
 800217c:	f7fe ff4a 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002180:	4b84      	ldr	r3, [pc, #528]	@ (8002394 <led_awake_routine1+0x2b4>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <led_awake_routine1+0xbc>
					green_led_pwm_val += 40;
 8002188:	4b83      	ldr	r3, [pc, #524]	@ (8002398 <led_awake_routine1+0x2b8>)
 800218a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218e:	b29b      	uxth	r3, r3
 8002190:	3328      	adds	r3, #40	@ 0x28
 8002192:	b29b      	uxth	r3, r3
 8002194:	b21a      	sxth	r2, r3
 8002196:	4b80      	ldr	r3, [pc, #512]	@ (8002398 <led_awake_routine1+0x2b8>)
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	e008      	b.n	80021ae <led_awake_routine1+0xce>
					green_led_pwm_val -= 40;
 800219c:	4b7e      	ldr	r3, [pc, #504]	@ (8002398 <led_awake_routine1+0x2b8>)
 800219e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b28      	subs	r3, #40	@ 0x28
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002398 <led_awake_routine1+0x2b8>)
 80021ac:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80021ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002398 <led_awake_routine1+0x2b8>)
 80021b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021b8:	dd03      	ble.n	80021c2 <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 80021ba:	4b76      	ldr	r3, [pc, #472]	@ (8002394 <led_awake_routine1+0x2b4>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e007      	b.n	80021d2 <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 80021c2:	4b75      	ldr	r3, [pc, #468]	@ (8002398 <led_awake_routine1+0x2b8>)
 80021c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	dc02      	bgt.n	80021d2 <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 80021cc:	4b71      	ldr	r3, [pc, #452]	@ (8002394 <led_awake_routine1+0x2b4>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80021d2:	4b71      	ldr	r3, [pc, #452]	@ (8002398 <led_awake_routine1+0x2b8>)
 80021d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021d8:	4b6c      	ldr	r3, [pc, #432]	@ (800238c <led_awake_routine1+0x2ac>)
 80021da:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021dc:	e13f      	b.n	800245e <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 80021de:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <led_awake_routine1+0x2a0>)
 80021e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80021e4:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80021e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	dd42      	ble.n	8002278 <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 80021f2:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <led_awake_routine1+0x2a0>)
 80021f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80021f8:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002388 <led_awake_routine1+0x2a8>
 80021fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	d838      	bhi.n	8002278 <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 8002206:	4b61      	ldr	r3, [pc, #388]	@ (800238c <led_awake_routine1+0x2ac>)
 8002208:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800220c:	639a      	str	r2, [r3, #56]	@ 0x38
				BLUE_LED_PWM(disable_led);
 800220e:	4a60      	ldr	r2, [pc, #384]	@ (8002390 <led_awake_routine1+0x2b0>)
 8002210:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002214:	2008      	movs	r0, #8
 8002216:	f7fe fefd 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 800221a:	4b5e      	ldr	r3, [pc, #376]	@ (8002394 <led_awake_routine1+0x2b4>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <led_awake_routine1+0x156>
					green_led_pwm_val += 40;
 8002222:	4b5d      	ldr	r3, [pc, #372]	@ (8002398 <led_awake_routine1+0x2b8>)
 8002224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002228:	b29b      	uxth	r3, r3
 800222a:	3328      	adds	r3, #40	@ 0x28
 800222c:	b29b      	uxth	r3, r3
 800222e:	b21a      	sxth	r2, r3
 8002230:	4b59      	ldr	r3, [pc, #356]	@ (8002398 <led_awake_routine1+0x2b8>)
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	e008      	b.n	8002248 <led_awake_routine1+0x168>
					green_led_pwm_val -= 40;
 8002236:	4b58      	ldr	r3, [pc, #352]	@ (8002398 <led_awake_routine1+0x2b8>)
 8002238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b28      	subs	r3, #40	@ 0x28
 8002240:	b29b      	uxth	r3, r3
 8002242:	b21a      	sxth	r2, r3
 8002244:	4b54      	ldr	r3, [pc, #336]	@ (8002398 <led_awake_routine1+0x2b8>)
 8002246:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8002248:	4b53      	ldr	r3, [pc, #332]	@ (8002398 <led_awake_routine1+0x2b8>)
 800224a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002252:	dd03      	ble.n	800225c <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 8002254:	4b4f      	ldr	r3, [pc, #316]	@ (8002394 <led_awake_routine1+0x2b4>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e007      	b.n	800226c <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 800225c:	4b4e      	ldr	r3, [pc, #312]	@ (8002398 <led_awake_routine1+0x2b8>)
 800225e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002262:	2b00      	cmp	r3, #0
 8002264:	dc02      	bgt.n	800226c <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 8002266:	4b4b      	ldr	r3, [pc, #300]	@ (8002394 <led_awake_routine1+0x2b4>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800226c:	4b4a      	ldr	r3, [pc, #296]	@ (8002398 <led_awake_routine1+0x2b8>)
 800226e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002272:	4b46      	ldr	r3, [pc, #280]	@ (800238c <led_awake_routine1+0x2ac>)
 8002274:	635a      	str	r2, [r3, #52]	@ 0x34
 8002276:	e0f2      	b.n	800245e <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8002278:	4b41      	ldr	r3, [pc, #260]	@ (8002380 <led_awake_routine1+0x2a0>)
 800227a:	edd3 7a08 	vldr	s15, [r3, #32]
 800227e:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800239c <led_awake_routine1+0x2bc>
 8002282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	f340 808d 	ble.w	80023a8 <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 800228e:	4b3c      	ldr	r3, [pc, #240]	@ (8002380 <led_awake_routine1+0x2a0>)
 8002290:	edd3 7a08 	vldr	s15, [r3, #32]
 8002294:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8002298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	f200 8082 	bhi.w	80023a8 <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 80022a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <led_awake_routine1+0x2b4>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b3d      	ldr	r3, [pc, #244]	@ (80023a0 <led_awake_routine1+0x2c0>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d003      	beq.n	80022b8 <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 80022b0:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <led_awake_routine1+0x2c0>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b37      	ldr	r3, [pc, #220]	@ (8002394 <led_awake_routine1+0x2b4>)
 80022b6:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 80022b8:	4a35      	ldr	r2, [pc, #212]	@ (8002390 <led_awake_routine1+0x2b0>)
 80022ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022be:	2008      	movs	r0, #8
 80022c0:	f7fe fea8 	bl	8001014 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80022c4:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <led_awake_routine1+0x2b4>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <led_awake_routine1+0x200>
					green_led_pwm_val += 40;
 80022cc:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <led_awake_routine1+0x2b8>)
 80022ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3328      	adds	r3, #40	@ 0x28
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b21a      	sxth	r2, r3
 80022da:	4b2f      	ldr	r3, [pc, #188]	@ (8002398 <led_awake_routine1+0x2b8>)
 80022dc:	801a      	strh	r2, [r3, #0]
 80022de:	e008      	b.n	80022f2 <led_awake_routine1+0x212>
					green_led_pwm_val -= 40;
 80022e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <led_awake_routine1+0x2b8>)
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b28      	subs	r3, #40	@ 0x28
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <led_awake_routine1+0x2b8>)
 80022f0:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80022f2:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <led_awake_routine1+0x2b8>)
 80022f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022fc:	dd03      	ble.n	8002306 <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 80022fe:	4b25      	ldr	r3, [pc, #148]	@ (8002394 <led_awake_routine1+0x2b4>)
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e007      	b.n	8002316 <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 8002306:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <led_awake_routine1+0x2b8>)
 8002308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230c:	2b00      	cmp	r3, #0
 800230e:	dc02      	bgt.n	8002316 <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 8002310:	4b20      	ldr	r3, [pc, #128]	@ (8002394 <led_awake_routine1+0x2b4>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8002316:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <led_awake_routine1+0x2c0>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <led_awake_routine1+0x252>
					red_led_pwm_val += 40;
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <led_awake_routine1+0x2c4>)
 8002320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002324:	b29b      	uxth	r3, r3
 8002326:	3328      	adds	r3, #40	@ 0x28
 8002328:	b29b      	uxth	r3, r3
 800232a:	b21a      	sxth	r2, r3
 800232c:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <led_awake_routine1+0x2c4>)
 800232e:	801a      	strh	r2, [r3, #0]
 8002330:	e008      	b.n	8002344 <led_awake_routine1+0x264>
					red_led_pwm_val -= 40;
 8002332:	4b1c      	ldr	r3, [pc, #112]	@ (80023a4 <led_awake_routine1+0x2c4>)
 8002334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b28      	subs	r3, #40	@ 0x28
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21a      	sxth	r2, r3
 8002340:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <led_awake_routine1+0x2c4>)
 8002342:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002344:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <led_awake_routine1+0x2c4>)
 8002346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800234e:	dd03      	ble.n	8002358 <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <led_awake_routine1+0x2c0>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e007      	b.n	8002368 <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <led_awake_routine1+0x2c4>)
 800235a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	dc02      	bgt.n	8002368 <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 8002362:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <led_awake_routine1+0x2c0>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <led_awake_routine1+0x2b8>)
 800236a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800236e:	4b07      	ldr	r3, [pc, #28]	@ (800238c <led_awake_routine1+0x2ac>)
 8002370:	635a      	str	r2, [r3, #52]	@ 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002372:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <led_awake_routine1+0x2c4>)
 8002374:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002378:	4b04      	ldr	r3, [pc, #16]	@ (800238c <led_awake_routine1+0x2ac>)
 800237a:	639a      	str	r2, [r3, #56]	@ 0x38
 800237c:	e06f      	b.n	800245e <led_awake_routine1+0x37e>
 800237e:	bf00      	nop
 8002380:	20001530 	.word	0x20001530
 8002384:	40020000 	.word	0x40020000
 8002388:	40833333 	.word	0x40833333
 800238c:	40000400 	.word	0x40000400
 8002390:	20000324 	.word	0x20000324
 8002394:	200012c4 	.word	0x200012c4
 8002398:	200012c6 	.word	0x200012c6
 800239c:	40533333 	.word	0x40533333
 80023a0:	200012c5 	.word	0x200012c5
 80023a4:	200012c8 	.word	0x200012c8
				GREEN_LED_PWM(disable_led);
 80023a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002464 <led_awake_routine1+0x384>)
 80023aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023ae:	635a      	str	r2, [r3, #52]	@ 0x34
				BLUE_LED_PWM(disable_led);
 80023b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002468 <led_awake_routine1+0x388>)
 80023b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023b6:	2008      	movs	r0, #8
 80023b8:	f7fe fe2c 	bl	8001014 <setSoftPWM>
				if (!red_led_pwm_flag) {
 80023bc:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <led_awake_routine1+0x38c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <led_awake_routine1+0x2f8>
					red_led_pwm_val += 40;
 80023c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <led_awake_routine1+0x390>)
 80023c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3328      	adds	r3, #40	@ 0x28
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <led_awake_routine1+0x390>)
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	e008      	b.n	80023ea <led_awake_routine1+0x30a>
					red_led_pwm_val -= 40;
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <led_awake_routine1+0x390>)
 80023da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b28      	subs	r3, #40	@ 0x28
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	b21a      	sxth	r2, r3
 80023e6:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <led_awake_routine1+0x390>)
 80023e8:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 80023ea:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <led_awake_routine1+0x390>)
 80023ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023f4:	dd03      	ble.n	80023fe <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <led_awake_routine1+0x38c>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e007      	b.n	800240e <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 80023fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <led_awake_routine1+0x390>)
 8002400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002404:	2b00      	cmp	r3, #0
 8002406:	dc02      	bgt.n	800240e <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 8002408:	4b18      	ldr	r3, [pc, #96]	@ (800246c <led_awake_routine1+0x38c>)
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 800240e:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <led_awake_routine1+0x390>)
 8002410:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <led_awake_routine1+0x384>)
 8002416:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002418:	e021      	b.n	800245e <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <led_awake_routine1+0x384>)
 800241c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002420:	635a      	str	r2, [r3, #52]	@ 0x34
		BLUE_LED_PWM(disable_led);
 8002422:	4a11      	ldr	r2, [pc, #68]	@ (8002468 <led_awake_routine1+0x388>)
 8002424:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002428:	2008      	movs	r0, #8
 800242a:	f7fe fdf3 	bl	8001014 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <led_awake_routine1+0x390>)
 8002430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002438:	d004      	beq.n	8002444 <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <led_awake_routine1+0x390>)
 800243c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002440:	801a      	strh	r2, [r3, #0]
 8002442:	e002      	b.n	800244a <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 8002444:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <led_awake_routine1+0x390>)
 8002446:	2200      	movs	r2, #0
 8002448:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 800244a:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <led_awake_routine1+0x390>)
 800244c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <led_awake_routine1+0x384>)
 8002452:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(300);
 8002454:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002458:	f001 fe62 	bl	8004120 <HAL_Delay>
}
 800245c:	e7ff      	b.n	800245e <led_awake_routine1+0x37e>
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40000400 	.word	0x40000400
 8002468:	20000324 	.word	0x20000324
 800246c:	200012c5 	.word	0x200012c5
 8002470:	200012c8 	.word	0x200012c8

08002474 <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 800247a:	f001 fea1 	bl	80041c0 <HAL_GetUIDw1>
 800247e:	4603      	mov	r3, r0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8002484:	f001 fe9c 	bl	80041c0 <HAL_GetUIDw1>
 8002488:	4603      	mov	r3, r0
 800248a:	4a1d      	ldr	r2, [pc, #116]	@ (8002500 <ver_GetUid+0x8c>)
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002490:	4c1c      	ldr	r4, [pc, #112]	@ (8002504 <ver_GetUid+0x90>)
 8002492:	f001 fea1 	bl	80041d8 <HAL_GetUIDw2>
 8002496:	4603      	mov	r3, r0
 8002498:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b23      	cmp	r3, #35	@ 0x23
 800249e:	d909      	bls.n	80024b4 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b3d      	cmp	r3, #61	@ 0x3d
 80024a4:	bf28      	it	cs
 80024a6:	233d      	movcs	r3, #61	@ 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	333d      	adds	r3, #61	@ 0x3d
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <ver_GetUid+0x8c>)
 80024b0:	71da      	strb	r2, [r3, #7]
 80024b2:	e00b      	b.n	80024cc <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b09      	cmp	r3, #9
 80024b8:	d901      	bls.n	80024be <ver_GetUid+0x4a>
 80024ba:	2241      	movs	r2, #65	@ 0x41
 80024bc:	e000      	b.n	80024c0 <ver_GetUid+0x4c>
 80024be:	2230      	movs	r2, #48	@ 0x30
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <ver_GetUid+0x8c>)
 80024ca:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 80024cc:	f001 fe6c 	bl	80041a8 <HAL_GetUIDw0>
 80024d0:	4603      	mov	r3, r0
 80024d2:	0c1b      	lsrs	r3, r3, #16
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4619      	mov	r1, r3
 80024d8:	480b      	ldr	r0, [pc, #44]	@ (8002508 <ver_GetUid+0x94>)
 80024da:	f011 fda3 	bl	8014024 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 80024de:	f001 fe63 	bl	80041a8 <HAL_GetUIDw0>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	4808      	ldr	r0, [pc, #32]	@ (800250c <ver_GetUid+0x98>)
 80024ea:	f011 fd9b 	bl	8014024 <CharToHexasc>
	sUid[12] = 0;
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <ver_GetUid+0x8c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 80024f4:	4b02      	ldr	r3, [pc, #8]	@ (8002500 <ver_GetUid+0x8c>)
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd90      	pop	{r4, r7, pc}
 80024fe:	bf00      	nop
 8002500:	200017cc 	.word	0x200017cc
 8002504:	200017cf 	.word	0x200017cf
 8002508:	200017d4 	.word	0x200017d4
 800250c:	200017d6 	.word	0x200017d6

08002510 <run_console_from_scd30>:

void run_console_from_scd30()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0


	if(run_console_co2)
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <run_console_from_scd30+0x18>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <run_console_from_scd30+0x10>
	{
		console_process();
 800251c:	f00f fea4 	bl	8012268 <console_process>
	}
	led_awake_routine1();
 8002520:	f7ff fdde 	bl	80020e0 <led_awake_routine1>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000320 	.word	0x20000320

0800252c <app_main>:

void app_main() {
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 8002532:	2248      	movs	r2, #72	@ 0x48
 8002534:	2100      	movs	r1, #0
 8002536:	489e      	ldr	r0, [pc, #632]	@ (80027b0 <app_main+0x284>)
 8002538:	f01c fbd8 	bl	801ecec <memset>

	load_param();
 800253c:	f7fe fee0 	bl	8001300 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8002540:	489c      	ldr	r0, [pc, #624]	@ (80027b4 <app_main+0x288>)
 8002542:	f008 fe0f 	bl	800b164 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8002546:	499c      	ldr	r1, [pc, #624]	@ (80027b8 <app_main+0x28c>)
 8002548:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254c:	4a9b      	ldr	r2, [pc, #620]	@ (80027bc <app_main+0x290>)
 800254e:	489c      	ldr	r0, [pc, #624]	@ (80027c0 <app_main+0x294>)
 8002550:	f002 fd12 	bl	8004f78 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002554:	4b97      	ldr	r3, [pc, #604]	@ (80027b4 <app_main+0x288>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	4b96      	ldr	r3, [pc, #600]	@ (80027b4 <app_main+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002562:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8002564:	4a94      	ldr	r2, [pc, #592]	@ (80027b8 <app_main+0x28c>)
 8002566:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800256a:	2008      	movs	r0, #8
 800256c:	f7fe fd52 	bl	8001014 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8002570:	2100      	movs	r1, #0
 8002572:	4894      	ldr	r0, [pc, #592]	@ (80027c4 <app_main+0x298>)
 8002574:	f008 ff3a 	bl	800b3ec <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8002578:	4b93      	ldr	r3, [pc, #588]	@ (80027c8 <app_main+0x29c>)
 800257a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800257e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8002580:	2104      	movs	r1, #4
 8002582:	4890      	ldr	r0, [pc, #576]	@ (80027c4 <app_main+0x298>)
 8002584:	f008 ff32 	bl	800b3ec <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8002588:	4b8f      	ldr	r3, [pc, #572]	@ (80027c8 <app_main+0x29c>)
 800258a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800258e:	639a      	str	r2, [r3, #56]	@ 0x38

	if (Mount_SD("/") == FR_OK) {
 8002590:	488e      	ldr	r0, [pc, #568]	@ (80027cc <app_main+0x2a0>)
 8002592:	f019 fd3f 	bl	801c014 <Mount_SD>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <app_main+0x7c>

		Unmount_SD("/");
 800259c:	488b      	ldr	r0, [pc, #556]	@ (80027cc <app_main+0x2a0>)
 800259e:	f019 fd65 	bl	801c06c <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 80025a2:	f01a fbc3 	bl	801cd2c <MX_USB_DEVICE_Init>
 80025a6:	e002      	b.n	80025ae <app_main+0x82>

	} else {
		datawritten = 2;
 80025a8:	4b89      	ldr	r3, [pc, #548]	@ (80027d0 <app_main+0x2a4>)
 80025aa:	2202      	movs	r2, #2
 80025ac:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 80025ae:	f001 fdab 	bl	8004108 <HAL_GetTick>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a87      	ldr	r2, [pc, #540]	@ (80027d4 <app_main+0x2a8>)
 80025b6:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80025b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025bc:	4886      	ldr	r0, [pc, #536]	@ (80027d8 <app_main+0x2ac>)
 80025be:	f003 fd6f 	bl	80060a0 <HAL_GPIO_ReadPin>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <app_main+0xa2>
		init_sps30();
 80025c8:	f7ff f924 	bl	8001814 <init_sps30>
 80025cc:	e016      	b.n	80025fc <app_main+0xd0>
	} else {
		_RunTime_Packet.usb_detection = 0;
 80025ce:	4b78      	ldr	r3, [pc, #480]	@ (80027b0 <app_main+0x284>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		_RunTime_Packet.usb_first_start = 1;
 80025d6:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <app_main+0x284>)
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		_RunTime_Packet.usb_active_disable_pm = 1;
 80025de:	4b74      	ldr	r3, [pc, #464]	@ (80027b0 <app_main+0x284>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		_RunTime_Packet.usb_start_timer = 1;
 80025e6:	4b72      	ldr	r3, [pc, #456]	@ (80027b0 <app_main+0x284>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		usb_time_keep = 0;
 80025ee:	4b7b      	ldr	r3, [pc, #492]	@ (80027dc <app_main+0x2b0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
		_RunTime_Packet.showPrompt = 1;
 80025f4:	4b6e      	ldr	r3, [pc, #440]	@ (80027b0 <app_main+0x284>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	//init_sps30();

#ifdef use_scd40x
	init_scd4x_i2c();
#elif use_scd30
	init_scd30_i2c();
 80025fc:	f7fe ff82 	bl	8001504 <init_scd30_i2c>
#endif
	console_init();
 8002600:	f00f fe7e 	bl	8012300 <console_init>
	Rtc_set_alarm();
 8002604:	f011 fb7c 	bl	8013d00 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	4619      	mov	r1, r3
 8002610:	4873      	ldr	r0, [pc, #460]	@ (80027e0 <app_main+0x2b4>)
 8002612:	f007 fa98 	bl	8009b46 <HAL_RTC_GetDate>
	_RunTime_Packet.prev_year = sDate.Year;
 8002616:	7ffb      	ldrb	r3, [r7, #31]
 8002618:	461a      	mov	r2, r3
 800261a:	4b65      	ldr	r3, [pc, #404]	@ (80027b0 <app_main+0x284>)
 800261c:	855a      	strh	r2, [r3, #42]	@ 0x2a
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	 if ((HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE) || (strcmp(_Flash_Packet.filename_with_format,"default") == 0)) //we save this value and dont change it untill and untless RTC data is not lost
 800261e:	2101      	movs	r1, #1
 8002620:	486f      	ldr	r0, [pc, #444]	@ (80027e0 <app_main+0x2b4>)
 8002622:	f007 fd41 	bl	800a0a8 <HAL_RTCEx_BKUPRead>
 8002626:	4603      	mov	r3, r0
 8002628:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 800262c:	4293      	cmp	r3, r2
 800262e:	d106      	bne.n	800263e <app_main+0x112>
 8002630:	496c      	ldr	r1, [pc, #432]	@ (80027e4 <app_main+0x2b8>)
 8002632:	486d      	ldr	r0, [pc, #436]	@ (80027e8 <app_main+0x2bc>)
 8002634:	f7fd fdd4 	bl	80001e0 <strcmp>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d112      	bne.n	8002664 <app_main+0x138>
	    {

		   HAL_PWR_EnableBkUpAccess();
 800263e:	f006 f9ff 	bl	8008a40 <HAL_PWR_EnableBkUpAccess>
		   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 8002642:	f64b 62be 	movw	r2, #48830	@ 0xbebe
 8002646:	2101      	movs	r1, #1
 8002648:	4865      	ldr	r0, [pc, #404]	@ (80027e0 <app_main+0x2b4>)
 800264a:	f007 fd13 	bl	800a074 <HAL_RTCEx_BKUPWrite>
		   HAL_PWR_DisableBkUpAccess();
 800264e:	f006 fa0b 	bl	8008a68 <HAL_PWR_DisableBkUpAccess>


		_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 8002652:	4966      	ldr	r1, [pc, #408]	@ (80027ec <app_main+0x2c0>)
 8002654:	4866      	ldr	r0, [pc, #408]	@ (80027f0 <app_main+0x2c4>)
 8002656:	f01a fad3 	bl	801cc00 <createfile>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	4b54      	ldr	r3, [pc, #336]	@ (80027b0 <app_main+0x284>)
 8002660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 8002664:	f7ff fb16 	bl	8001c94 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 8002668:	23c8      	movs	r3, #200	@ 0xc8
 800266a:	2215      	movs	r2, #21
 800266c:	4961      	ldr	r1, [pc, #388]	@ (80027f4 <app_main+0x2c8>)
 800266e:	4862      	ldr	r0, [pc, #392]	@ (80027f8 <app_main+0x2cc>)
 8002670:	f009 fdea 	bl	800c248 <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 8002674:	f001 fd48 	bl	8004108 <HAL_GetTick>
 8002678:	4603      	mov	r3, r0
 800267a:	4a60      	ldr	r2, [pc, #384]	@ (80027fc <app_main+0x2d0>)
 800267c:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 800267e:	f001 fd43 	bl	8004108 <HAL_GetTick>
 8002682:	4603      	mov	r3, r0
 8002684:	4a5e      	ldr	r2, [pc, #376]	@ (8002800 <app_main+0x2d4>)
 8002686:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 8002688:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <app_main+0x2d8>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 800268e:	f7fe fda5 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002692:	e179      	b.n	8002988 <app_main+0x45c>
		{
			pwr_off_detected();
 8002694:	f7fe fda2 	bl	80011dc <pwr_off_detected>
//
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}
			adc_Measure(&_RunTime_Packet.battery_voltage);
 8002698:	485b      	ldr	r0, [pc, #364]	@ (8002808 <app_main+0x2dc>)
 800269a:	f011 fd59 	bl	8014150 <adc_Measure>
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 800269e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026a2:	484d      	ldr	r0, [pc, #308]	@ (80027d8 <app_main+0x2ac>)
 80026a4:	f003 fcfc 	bl	80060a0 <HAL_GPIO_ReadPin>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <app_main+0x18c>
					{
				prev_sleep_time = HAL_GetTick();
 80026ae:	f001 fd2b 	bl	8004108 <HAL_GetTick>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a51      	ldr	r2, [pc, #324]	@ (80027fc <app_main+0x2d0>)
 80026b6:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	2200      	movs	r2, #0
 80026be:	4619      	mov	r1, r3
 80026c0:	4847      	ldr	r0, [pc, #284]	@ (80027e0 <app_main+0x2b4>)
 80026c2:	f007 f95e 	bl	8009982 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	4619      	mov	r1, r3
 80026cc:	4844      	ldr	r0, [pc, #272]	@ (80027e0 <app_main+0x2b4>)
 80026ce:	f007 fa3a 	bl	8009b46 <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 80026d2:	79ba      	ldrb	r2, [r7, #6]
 80026d4:	4b36      	ldr	r3, [pc, #216]	@ (80027b0 <app_main+0x284>)
 80026d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			_RunTime_Packet.month = sDate.Month;
 80026da:	797a      	ldrb	r2, [r7, #5]
 80026dc:	4b34      	ldr	r3, [pc, #208]	@ (80027b0 <app_main+0x284>)
 80026de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			_RunTime_Packet.year = sDate.Year;
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	4b32      	ldr	r3, [pc, #200]	@ (80027b0 <app_main+0x284>)
 80026e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

			if (_RunTime_Packet.prev_year != sDate.Year) {
 80026ea:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <app_main+0x284>)
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ee:	79fa      	ldrb	r2, [r7, #7]
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <app_main+0x1d8>
				_RunTime_Packet.year_changed = 1; //this for year now
 80026f4:	4b2e      	ldr	r3, [pc, #184]	@ (80027b0 <app_main+0x284>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				_RunTime_Packet.prev_year = sDate.Year;
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	461a      	mov	r2, r3
 8002700:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <app_main+0x284>)
 8002702:	855a      	strh	r2, [r3, #42]	@ 0x2a
			}

			check_peripheral_error();
 8002704:	f7ff f92c 	bl	8001960 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 8002708:	4b29      	ldr	r3, [pc, #164]	@ (80027b0 <app_main+0x284>)
 800270a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <app_main+0x1f0>
					|| _RunTime_Packet.usb_first_start) {
 8002712:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <app_main+0x284>)
 8002714:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002718:	2b00      	cmp	r3, #0
 800271a:	d045      	beq.n	80027a8 <app_main+0x27c>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 800271c:	4b24      	ldr	r3, [pc, #144]	@ (80027b0 <app_main+0x284>)
 800271e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <app_main+0x202>
				{

					start_usb_timer = 1;
 8002726:	4b39      	ldr	r3, [pc, #228]	@ (800280c <app_main+0x2e0>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e003      	b.n	8002736 <app_main+0x20a>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <app_main+0x284>)
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 8002736:	f001 fce7 	bl	8004108 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <app_main+0x2a8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	1ad2      	subs	r2, r2, r3
 8002742:	4b33      	ldr	r3, [pc, #204]	@ (8002810 <app_main+0x2e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d329      	bcc.n	800279e <app_main+0x272>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 800274a:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <app_main+0x284>)
 800274c:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d10d      	bne.n	8002772 <app_main+0x246>
							&& _RunTime_Packet.usb_first_start) {
 8002756:	4b16      	ldr	r3, [pc, #88]	@ (80027b0 <app_main+0x284>)
 8002758:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <app_main+0x246>
						_RunTime_Packet.sd_file_creation = createfile(
 8002760:	4922      	ldr	r1, [pc, #136]	@ (80027ec <app_main+0x2c0>)
 8002762:	4823      	ldr	r0, [pc, #140]	@ (80027f0 <app_main+0x2c4>)
 8002764:	f01a fa4c 	bl	801cc00 <createfile>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <app_main+0x284>)
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 8002772:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <app_main+0x284>)
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
					_RunTime_Packet.usb_detection = 0;
 800277a:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <app_main+0x284>)
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
					_RunTime_Packet.usb_active_disable_pm = 0;
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <app_main+0x284>)
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
					start_usb_timer = 0;
 800278a:	4b20      	ldr	r3, [pc, #128]	@ (800280c <app_main+0x2e0>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002790:	f7ff f840 	bl	8001814 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 8002794:	f001 fcb8 	bl	8004108 <HAL_GetTick>
 8002798:	4603      	mov	r3, r0
 800279a:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <app_main+0x2d4>)
 800279c:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 800279e:	f001 fcb3 	bl	8004108 <HAL_GetTick>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4a15      	ldr	r2, [pc, #84]	@ (80027fc <app_main+0x2d0>)
 80027a6:	6013      	str	r3, [r2, #0]
			}

			console_process();
 80027a8:	f00f fd5e 	bl	8012268 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80027ac:	e046      	b.n	800283c <app_main+0x310>
 80027ae:	bf00      	nop
 80027b0:	20001530 	.word	0x20001530
 80027b4:	2000193c 	.word	0x2000193c
 80027b8:	20000324 	.word	0x20000324
 80027bc:	40020418 	.word	0x40020418
 80027c0:	20001a14 	.word	0x20001a14
 80027c4:	200019cc 	.word	0x200019cc
 80027c8:	40000400 	.word	0x40000400
 80027cc:	0802234c 	.word	0x0802234c
 80027d0:	20002328 	.word	0x20002328
 80027d4:	200017c8 	.word	0x200017c8
 80027d8:	40020000 	.word	0x40020000
 80027dc:	20001584 	.word	0x20001584
 80027e0:	20001898 	.word	0x20001898
 80027e4:	0802235c 	.word	0x0802235c
 80027e8:	20001461 	.word	0x20001461
 80027ec:	20001330 	.word	0x20001330
 80027f0:	200012cc 	.word	0x200012cc
 80027f4:	08022364 	.word	0x08022364
 80027f8:	20001a74 	.word	0x20001a74
 80027fc:	200017c0 	.word	0x200017c0
 8002800:	200017c4 	.word	0x200017c4
 8002804:	2000000c 	.word	0x2000000c
 8002808:	20001550 	.word	0x20001550
 800280c:	20001580 	.word	0x20001580
 8002810:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002814:	f00f fd28 	bl	8012268 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002818:	4b90      	ldr	r3, [pc, #576]	@ (8002a5c <app_main+0x530>)
 800281a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <app_main+0x2fa>
#ifdef use_scd40x
					get_scd4x_measurement();
#elif use_scd30
					get_scd30_measurement();
 8002822:	f7fe fe97 	bl	8001554 <get_scd30_measurement>
#endif

				}

				get_sps30_measurement();
 8002826:	f7ff f811 	bl	800184c <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 800282a:	488d      	ldr	r0, [pc, #564]	@ (8002a60 <app_main+0x534>)
 800282c:	f011 fc90 	bl	8014150 <adc_Measure>
				led_awake_routine1();
 8002830:	f7ff fc56 	bl	80020e0 <led_awake_routine1>
				pwr_off_detected();
 8002834:	f7fe fcd2 	bl	80011dc <pwr_off_detected>
				check_peripheral_error();
 8002838:	f7ff f892 	bl	8001960 <check_peripheral_error>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 800283c:	f001 fc64 	bl	8004108 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	4b88      	ldr	r3, [pc, #544]	@ (8002a64 <app_main+0x538>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1ad2      	subs	r2, r2, r3
 8002848:	4b87      	ldr	r3, [pc, #540]	@ (8002a68 <app_main+0x53c>)
 800284a:	681b      	ldr	r3, [r3, #0]
					&& !_RunTime_Packet.usb_first_start)
 800284c:	429a      	cmp	r2, r3
 800284e:	d809      	bhi.n	8002864 <app_main+0x338>
					&& !_RunTime_Packet.usb_detection
 8002850:	4b82      	ldr	r3, [pc, #520]	@ (8002a5c <app_main+0x530>)
 8002852:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002856:	2b00      	cmp	r3, #0
 8002858:	d104      	bne.n	8002864 <app_main+0x338>
					&& !_RunTime_Packet.usb_first_start)
 800285a:	4b80      	ldr	r3, [pc, #512]	@ (8002a5c <app_main+0x530>)
 800285c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0d7      	beq.n	8002814 <app_main+0x2e8>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 8002864:	f7ff f8de 	bl	8001a24 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 8002868:	4b80      	ldr	r3, [pc, #512]	@ (8002a6c <app_main+0x540>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d016      	beq.n	800289e <app_main+0x372>
 8002870:	4b7a      	ldr	r3, [pc, #488]	@ (8002a5c <app_main+0x530>)
 8002872:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002876:	2b00      	cmp	r3, #0
 8002878:	d111      	bne.n	800289e <app_main+0x372>
					&& !_RunTime_Packet.usb_first_start
 800287a:	4b78      	ldr	r3, [pc, #480]	@ (8002a5c <app_main+0x530>)
 800287c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10c      	bne.n	800289e <app_main+0x372>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 8002884:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002888:	4879      	ldr	r0, [pc, #484]	@ (8002a70 <app_main+0x544>)
 800288a:	f003 fc09 	bl	80060a0 <HAL_GPIO_ReadPin>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <app_main+0x372>
				scd4x_stop_periodic_measurement();
#elif use_scd30
				//scd30_stop_periodic_measurement();
#endif

				sps30_stop_measurement();
 8002894:	f013 f838 	bl	8015908 <sps30_stop_measurement>
				stop_measurement = 0;
 8002898:	4b74      	ldr	r3, [pc, #464]	@ (8002a6c <app_main+0x540>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 800289e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028a2:	4873      	ldr	r0, [pc, #460]	@ (8002a70 <app_main+0x544>)
 80028a4:	f003 fbfc 	bl	80060a0 <HAL_GPIO_ReadPin>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d050      	beq.n	8002950 <app_main+0x424>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 80028ae:	4b71      	ldr	r3, [pc, #452]	@ (8002a74 <app_main+0x548>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d04c      	beq.n	8002950 <app_main+0x424>
 80028b6:	4b69      	ldr	r3, [pc, #420]	@ (8002a5c <app_main+0x530>)
 80028b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d147      	bne.n	8002950 <app_main+0x424>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.year_changed
 80028c0:	4b66      	ldr	r3, [pc, #408]	@ (8002a5c <app_main+0x530>)
 80028c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <app_main+0x3be>
						|| _RunTime_Packet.filename_changed
 80028ca:	4b64      	ldr	r3, [pc, #400]	@ (8002a5c <app_main+0x530>)
 80028cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <app_main+0x3be>
						|| _RunTime_Packet.fileformat_changed
 80028d4:	4b61      	ldr	r3, [pc, #388]	@ (8002a5c <app_main+0x530>)
 80028d6:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <app_main+0x3be>
						|| _RunTime_Packet.sd_file_creation == -1) {
 80028de:	4b5f      	ldr	r3, [pc, #380]	@ (8002a5c <app_main+0x530>)
 80028e0:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d114      	bne.n	8002914 <app_main+0x3e8>
					_RunTime_Packet.year_changed = 0;
 80028ea:	4b5c      	ldr	r3, [pc, #368]	@ (8002a5c <app_main+0x530>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
					_RunTime_Packet.filename_changed = 0;
 80028f2:	4b5a      	ldr	r3, [pc, #360]	@ (8002a5c <app_main+0x530>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
					_RunTime_Packet.fileformat_changed = 0;
 80028fa:	4b58      	ldr	r3, [pc, #352]	@ (8002a5c <app_main+0x530>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
					_RunTime_Packet.sd_file_creation = createfile(
 8002902:	495d      	ldr	r1, [pc, #372]	@ (8002a78 <app_main+0x54c>)
 8002904:	485d      	ldr	r0, [pc, #372]	@ (8002a7c <app_main+0x550>)
 8002906:	f01a f97b 	bl	801cc00 <createfile>
 800290a:	4603      	mov	r3, r0
 800290c:	461a      	mov	r2, r3
 800290e:	4b53      	ldr	r3, [pc, #332]	@ (8002a5c <app_main+0x530>)
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				if (filesaving_process()) {
 8002914:	f01a f94a 	bl	801cbac <filesaving_process>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <app_main+0x41a>
					HAL_Delay(1500);
 800291e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002922:	f001 fbfd 	bl	8004120 <HAL_Delay>
					if (filesaving_process()) {
 8002926:	f01a f941 	bl	801cbac <filesaving_process>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <app_main+0x41a>
						HAL_Delay(1500);
 8002930:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002934:	f001 fbf4 	bl	8004120 <HAL_Delay>
						if (filesaving_process()) {
 8002938:	f01a f938 	bl	801cbac <filesaving_process>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <app_main+0x41a>
							HAL_NVIC_SystemReset();
 8002942:	f002 f9fc 	bl	8004d3e <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 8002946:	f001 fbdf 	bl	8004108 <HAL_GetTick>
 800294a:	4603      	mov	r3, r0
 800294c:	4a45      	ldr	r2, [pc, #276]	@ (8002a64 <app_main+0x538>)
 800294e:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 8002950:	f011 f9d6 	bl	8013d00 <Rtc_set_alarm>

		//	adc_Measure(&_RunTime_Packet.battery_voltage);
			led_awake_routine();
 8002954:	f7ff f9c6 	bl	8001ce4 <led_awake_routine>
			save_data();
 8002958:	f7fe fda0 	bl	800149c <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 800295c:	2101      	movs	r1, #1
 800295e:	4844      	ldr	r0, [pc, #272]	@ (8002a70 <app_main+0x544>)
 8002960:	f003 fb9e 	bl	80060a0 <HAL_GPIO_ReadPin>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <app_main+0x44c>
				_RunTime_Packet.motion_detection = 1;
 800296a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a5c <app_main+0x530>)
 800296c:	2201      	movs	r2, #1
 800296e:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002970:	4b43      	ldr	r3, [pc, #268]	@ (8002a80 <app_main+0x554>)
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e005      	b.n	8002984 <app_main+0x458>
			} else {
				_RunTime_Packet.motion_detection = 0;
 8002978:	4b38      	ldr	r3, [pc, #224]	@ (8002a5c <app_main+0x530>)
 800297a:	2200      	movs	r2, #0
 800297c:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 800297e:	4b40      	ldr	r3, [pc, #256]	@ (8002a80 <app_main+0x554>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002984:	f7fe fc2a 	bl	80011dc <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 8002988:	f001 fbbe 	bl	8004108 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <app_main+0x558>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	4b3c      	ldr	r3, [pc, #240]	@ (8002a88 <app_main+0x55c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	f67f ae7b 	bls.w	8002694 <app_main+0x168>
		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		//_RunTime_Packet.day_changed ||
		if (_RunTime_Packet.year_changed || _RunTime_Packet.filename_changed
 800299e:	4b2f      	ldr	r3, [pc, #188]	@ (8002a5c <app_main+0x530>)
 80029a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10f      	bne.n	80029c8 <app_main+0x49c>
 80029a8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a5c <app_main+0x530>)
 80029aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <app_main+0x49c>
				|| _RunTime_Packet.fileformat_changed
 80029b2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a5c <app_main+0x530>)
 80029b4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <app_main+0x49c>
				|| _RunTime_Packet.sd_file_creation == -1) {
 80029bc:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <app_main+0x530>)
 80029be:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d11b      	bne.n	8002a00 <app_main+0x4d4>

			_RunTime_Packet.year_changed = 0;
 80029c8:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <app_main+0x530>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			_RunTime_Packet.filename_changed = 0;
 80029d0:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <app_main+0x530>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			_RunTime_Packet.fileformat_changed = 0;
 80029d8:	4b20      	ldr	r3, [pc, #128]	@ (8002a5c <app_main+0x530>)
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			_RunTime_Packet.sd_file_creation = createfile(
 80029e0:	4925      	ldr	r1, [pc, #148]	@ (8002a78 <app_main+0x54c>)
 80029e2:	4826      	ldr	r0, [pc, #152]	@ (8002a7c <app_main+0x550>)
 80029e4:	f01a f90c 	bl	801cc00 <createfile>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <app_main+0x530>)
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);


			/*be sure to save data before going to sleep*/
			while(save_param)
 80029f2:	e001      	b.n	80029f8 <app_main+0x4cc>
			{
				save_data();
 80029f4:	f7fe fd52 	bl	800149c <save_data>
			while(save_param)
 80029f8:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <app_main+0x560>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f9      	bne.n	80029f4 <app_main+0x4c8>
			}
		}
		if (filesaving_process()) {
 8002a00:	f01a f8d4 	bl	801cbac <filesaving_process>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <app_main+0x506>
			HAL_Delay(1500);
 8002a0a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a0e:	f001 fb87 	bl	8004120 <HAL_Delay>
			if (filesaving_process()) {
 8002a12:	f01a f8cb 	bl	801cbac <filesaving_process>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <app_main+0x506>
				HAL_Delay(1500);
 8002a1c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a20:	f001 fb7e 	bl	8004120 <HAL_Delay>
				if (filesaving_process()) {
 8002a24:	f01a f8c2 	bl	801cbac <filesaving_process>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <app_main+0x506>
					HAL_NVIC_SystemReset();
 8002a2e:	f002 f986 	bl	8004d3e <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 8002a32:	f001 fb69 	bl	8004108 <HAL_GetTick>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <app_main+0x558>)
 8002a3a:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin) ) {
 8002a3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a40:	480b      	ldr	r0, [pc, #44]	@ (8002a70 <app_main+0x544>)
 8002a42:	f003 fb2d 	bl	80060a0 <HAL_GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <app_main+0x528>

			sleep();
 8002a4c:	f7ff f800 	bl	8001a50 <sleep>
			wakeup();
 8002a50:	f7ff f882 	bl	8001b58 <wakeup>

		}
		pwr_off_detected();
 8002a54:	f7fe fbc2 	bl	80011dc <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 8002a58:	e60c      	b.n	8002674 <app_main+0x148>
 8002a5a:	bf00      	nop
 8002a5c:	20001530 	.word	0x20001530
 8002a60:	20001550 	.word	0x20001550
 8002a64:	200017c4 	.word	0x200017c4
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	2000000c 	.word	0x2000000c
 8002a70:	40020000 	.word	0x40020000
 8002a74:	20000029 	.word	0x20000029
 8002a78:	20001330 	.word	0x20001330
 8002a7c:	200012cc 	.word	0x200012cc
 8002a80:	20001589 	.word	0x20001589
 8002a84:	200017c0 	.word	0x200017c0
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	20001579 	.word	0x20001579

08002a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a94:	f001 fad2 	bl	800403c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a98:	f000 f822 	bl	8002ae0 <SystemClock_Config>
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
#endif
  HAL_Delay(1000);
 8002a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aa0:	f001 fb3e 	bl	8004120 <HAL_Delay>
  MX_GPIO_Init();
 8002aa4:	f000 fb00 	bl	80030a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002aa8:	f000 fade 	bl	8003068 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002aac:	f000 f948 	bl	8002d40 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002ab0:	f000 fa86 	bl	8002fc0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002ab4:	f000 f91e 	bl	8002cf4 <MX_RTC_Init>
  MX_I2C1_Init();
 8002ab8:	f000 f8d4 	bl	8002c64 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002abc:	f000 f9b0 	bl	8002e20 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002ac0:	f000 faa8 	bl	8003014 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002ac4:	f000 f87c 	bl	8002bc0 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002ac8:	f010 fefc 	bl	80138c4 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002acc:	f000 f958 	bl	8002d80 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002ad0:	f000 f9f4 	bl	8002ebc <MX_TIM3_Init>
  MX_IWDG_Init();
 8002ad4:	f000 f8f4 	bl	8002cc0 <MX_IWDG_Init>

  app_main(); //keep mx_usb_device_init off here
 8002ad8:	f7ff fd28 	bl	800252c <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <main+0x4c>

08002ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b094      	sub	sp, #80	@ 0x50
 8002ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae6:	f107 0320 	add.w	r3, r7, #32
 8002aea:	2230      	movs	r2, #48	@ 0x30
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f01c f8fc 	bl	801ecec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <SystemClock_Config+0xd8>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb8 <SystemClock_Config+0xd8>)
 8002b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b14:	4b28      	ldr	r3, [pc, #160]	@ (8002bb8 <SystemClock_Config+0xd8>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	4b25      	ldr	r3, [pc, #148]	@ (8002bbc <SystemClock_Config+0xdc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b2c:	4a23      	ldr	r2, [pc, #140]	@ (8002bbc <SystemClock_Config+0xdc>)
 8002b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b21      	ldr	r3, [pc, #132]	@ (8002bbc <SystemClock_Config+0xdc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8002b40:	230d      	movs	r3, #13
 8002b42:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b52:	2302      	movs	r3, #2
 8002b54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b5c:	2319      	movs	r3, #25
 8002b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b60:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b66:	2304      	movs	r3, #4
 8002b68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b6a:	2307      	movs	r3, #7
 8002b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b6e:	f107 0320 	add.w	r3, r7, #32
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 ffd4 	bl	8008b20 <HAL_RCC_OscConfig>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002b7e:	f000 fd79 	bl	8003674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b82:	230f      	movs	r3, #15
 8002b84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b86:	2302      	movs	r3, #2
 8002b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b98:	f107 030c 	add.w	r3, r7, #12
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f006 fa36 	bl	8009010 <HAL_RCC_ClockConfig>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002baa:	f000 fd63 	bl	8003674 <Error_Handler>
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3750      	adds	r7, #80	@ 0x50
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40007000 	.word	0x40007000

08002bc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bd2:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002bd4:	4a21      	ldr	r2, [pc, #132]	@ (8002c5c <MX_ADC1_Init+0x9c>)
 8002bd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002bda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002bde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002be0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002be6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bec:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bf2:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bfa:	4b17      	ldr	r3, [pc, #92]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c00:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002c02:	4a17      	ldr	r2, [pc, #92]	@ (8002c60 <MX_ADC1_Init+0xa0>)
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c06:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c0c:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c12:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c20:	480d      	ldr	r0, [pc, #52]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002c22:	f001 fae5 	bl	80041f0 <HAL_ADC_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c2c:	f000 fd22 	bl	8003674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c30:	230a      	movs	r3, #10
 8002c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c34:	2301      	movs	r3, #1
 8002c36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <MX_ADC1_Init+0x98>)
 8002c42:	f001 fccb 	bl	80045dc <HAL_ADC_ConfigChannel>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c4c:	f000 fd12 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200017f0 	.word	0x200017f0
 8002c5c:	40012000 	.word	0x40012000
 8002c60:	0f000001 	.word	0x0f000001

08002c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c68:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c6a:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <MX_I2C1_Init+0x54>)
 8002c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c70:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <MX_I2C1_Init+0x58>)
 8002c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c8e:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c94:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ca0:	4804      	ldr	r0, [pc, #16]	@ (8002cb4 <MX_I2C1_Init+0x50>)
 8002ca2:	f003 fa47 	bl	8006134 <HAL_I2C_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cac:	f000 fce2 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20001838 	.word	0x20001838
 8002cb8:	40005400 	.word	0x40005400
 8002cbc:	000186a0 	.word	0x000186a0

08002cc0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
  //32sec watchdog period set
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002cc4:	4b09      	ldr	r3, [pc, #36]	@ (8002cec <MX_IWDG_Init+0x2c>)
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <MX_IWDG_Init+0x30>)
 8002cc8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002cca:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <MX_IWDG_Init+0x2c>)
 8002ccc:	2206      	movs	r2, #6
 8002cce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <MX_IWDG_Init+0x2c>)
 8002cd2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002cd6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002cd8:	4804      	ldr	r0, [pc, #16]	@ (8002cec <MX_IWDG_Init+0x2c>)
 8002cda:	f004 fb83 	bl	80073e4 <HAL_IWDG_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002ce4:	f000 fcc6 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000188c 	.word	0x2000188c
 8002cf0:	40003000 	.word	0x40003000

08002cf4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <MX_RTC_Init+0x44>)
 8002cfa:	4a10      	ldr	r2, [pc, #64]	@ (8002d3c <MX_RTC_Init+0x48>)
 8002cfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <MX_RTC_Init+0x44>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <MX_RTC_Init+0x44>)
 8002d06:	227f      	movs	r2, #127	@ 0x7f
 8002d08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <MX_RTC_Init+0x44>)
 8002d0c:	22ff      	movs	r2, #255	@ 0xff
 8002d0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <MX_RTC_Init+0x44>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d16:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <MX_RTC_Init+0x44>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <MX_RTC_Init+0x44>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <MX_RTC_Init+0x44>)
 8002d24:	f006 fd10 	bl	8009748 <HAL_RTC_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002d2e:	f000 fca1 	bl	8003674 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20001898 	.word	0x20001898
 8002d3c:	40002800 	.word	0x40002800

08002d40 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <MX_SDIO_SD_Init+0x38>)
 8002d46:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <MX_SDIO_SD_Init+0x3c>)
 8002d48:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <MX_SDIO_SD_Init+0x38>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <MX_SDIO_SD_Init+0x38>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <MX_SDIO_SD_Init+0x38>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <MX_SDIO_SD_Init+0x38>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002d62:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <MX_SDIO_SD_Init+0x38>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002d68:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <MX_SDIO_SD_Init+0x38>)
 8002d6a:	2205      	movs	r2, #5
 8002d6c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	200018b8 	.word	0x200018b8
 8002d7c:	40012c00 	.word	0x40012c00

08002d80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d94:	463b      	mov	r3, r7
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e1c <MX_TIM1_Init+0x9c>)
 8002da0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002da2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002dae:	4b1a      	ldr	r3, [pc, #104]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002db0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002db4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db6:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dbc:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dc8:	4813      	ldr	r0, [pc, #76]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002dca:	f008 f927 	bl	800b01c <HAL_TIM_Base_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002dd4:	f000 fc4e 	bl	8003674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	4619      	mov	r1, r3
 8002de4:	480c      	ldr	r0, [pc, #48]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002de6:	f008 fd63 	bl	800b8b0 <HAL_TIM_ConfigClockSource>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002df0:	f000 fc40 	bl	8003674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002df4:	2320      	movs	r3, #32
 8002df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dfc:	463b      	mov	r3, r7
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4805      	ldr	r0, [pc, #20]	@ (8002e18 <MX_TIM1_Init+0x98>)
 8002e02:	f009 f91d 	bl	800c040 <HAL_TIMEx_MasterConfigSynchronization>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e0c:	f000 fc32 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e10:	bf00      	nop
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000193c 	.word	0x2000193c
 8002e1c:	40010000 	.word	0x40010000

08002e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e26:	f107 0308 	add.w	r3, r7, #8
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e34:	463b      	mov	r3, r7
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002e3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002e44:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002e46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002e52:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002e54:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8002e58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e60:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002e62:	2280      	movs	r2, #128	@ 0x80
 8002e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e66:	4814      	ldr	r0, [pc, #80]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002e68:	f008 f8d8 	bl	800b01c <HAL_TIM_Base_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e72:	f000 fbff 	bl	8003674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e7c:	f107 0308 	add.w	r3, r7, #8
 8002e80:	4619      	mov	r1, r3
 8002e82:	480d      	ldr	r0, [pc, #52]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002e84:	f008 fd14 	bl	800b8b0 <HAL_TIM_ConfigClockSource>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e8e:	f000 fbf1 	bl	8003674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4806      	ldr	r0, [pc, #24]	@ (8002eb8 <MX_TIM2_Init+0x98>)
 8002ea0:	f009 f8ce 	bl	800c040 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002eaa:	f000 fbe3 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20001984 	.word	0x20001984

08002ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08e      	sub	sp, #56	@ 0x38
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed0:	f107 0320 	add.w	r3, r7, #32
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	615a      	str	r2, [r3, #20]
 8002eea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eec:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002eee:	4a33      	ldr	r2, [pc, #204]	@ (8002fbc <MX_TIM3_Init+0x100>)
 8002ef0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ef2:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002efe:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f06:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f0e:	2280      	movs	r2, #128	@ 0x80
 8002f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f12:	4829      	ldr	r0, [pc, #164]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f14:	f008 f882 	bl	800b01c <HAL_TIM_Base_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002f1e:	f000 fba9 	bl	8003674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4822      	ldr	r0, [pc, #136]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f30:	f008 fcbe 	bl	800b8b0 <HAL_TIM_ConfigClockSource>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f3a:	f000 fb9b 	bl	8003674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f3e:	481e      	ldr	r0, [pc, #120]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f40:	f008 f9fb 	bl	800b33a <HAL_TIM_PWM_Init>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f4a:	f000 fb93 	bl	8003674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f56:	f107 0320 	add.w	r3, r7, #32
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4816      	ldr	r0, [pc, #88]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f5e:	f009 f86f 	bl	800c040 <HAL_TIMEx_MasterConfigSynchronization>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f68:	f000 fb84 	bl	8003674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f6c:	2360      	movs	r3, #96	@ 0x60
 8002f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	2200      	movs	r2, #0
 8002f80:	4619      	mov	r1, r3
 8002f82:	480d      	ldr	r0, [pc, #52]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f84:	f008 fbd2 	bl	800b72c <HAL_TIM_PWM_ConfigChannel>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f8e:	f000 fb71 	bl	8003674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	2204      	movs	r2, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	4807      	ldr	r0, [pc, #28]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002f9a:	f008 fbc7 	bl	800b72c <HAL_TIM_PWM_ConfigChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002fa4:	f000 fb66 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fa8:	4803      	ldr	r0, [pc, #12]	@ (8002fb8 <MX_TIM3_Init+0xfc>)
 8002faa:	f000 fd83 	bl	8003ab4 <HAL_TIM_MspPostInit>

}
 8002fae:	bf00      	nop
 8002fb0:	3738      	adds	r7, #56	@ 0x38
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200019cc 	.word	0x200019cc
 8002fbc:	40000400 	.word	0x40000400

08002fc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fc4:	4b11      	ldr	r3, [pc, #68]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002fc6:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <MX_USART1_UART_Init+0x50>)
 8002fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fde:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fe4:	4b09      	ldr	r3, [pc, #36]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002fe6:	220c      	movs	r2, #12
 8002fe8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fea:	4b08      	ldr	r3, [pc, #32]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ff6:	4805      	ldr	r0, [pc, #20]	@ (800300c <MX_USART1_UART_Init+0x4c>)
 8002ff8:	f009 f8a4 	bl	800c144 <HAL_UART_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003002:	f000 fb37 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20001a74 	.word	0x20001a74
 8003010:	40011000 	.word	0x40011000

08003014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 800301a:	4a12      	ldr	r2, [pc, #72]	@ (8003064 <MX_USART2_UART_Init+0x50>)
 800301c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800301e:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 8003020:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003026:	4b0e      	ldr	r3, [pc, #56]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003032:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 800303a:	220c      	movs	r2, #12
 800303c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800304a:	4805      	ldr	r0, [pc, #20]	@ (8003060 <MX_USART2_UART_Init+0x4c>)
 800304c:	f009 f87a 	bl	800c144 <HAL_UART_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003056:	f000 fb0d 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20001abc 	.word	0x20001abc
 8003064:	40004400 	.word	0x40004400

08003068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <MX_DMA_Init+0x3c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a0b      	ldr	r2, [pc, #44]	@ (80030a4 <MX_DMA_Init+0x3c>)
 8003078:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <MX_DMA_Init+0x3c>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	2100      	movs	r1, #0
 800308e:	2044      	movs	r0, #68	@ 0x44
 8003090:	f001 fe1d 	bl	8004cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003094:	2044      	movs	r0, #68	@ 0x44
 8003096:	f001 fe36 	bl	8004d06 <HAL_NVIC_EnableIRQ>

}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800

080030a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	@ 0x28
 80030ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ae:	f107 0314 	add.w	r3, r7, #20
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	4b71      	ldr	r3, [pc, #452]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	4a70      	ldr	r2, [pc, #448]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	4a69      	ldr	r2, [pc, #420]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 80030e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ea:	4b67      	ldr	r3, [pc, #412]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	4a62      	ldr	r2, [pc, #392]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6313      	str	r3, [r2, #48]	@ 0x30
 8003106:	4b60      	ldr	r3, [pc, #384]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	4b5c      	ldr	r3, [pc, #368]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	4a5b      	ldr	r2, [pc, #364]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6313      	str	r3, [r2, #48]	@ 0x30
 8003122:	4b59      	ldr	r3, [pc, #356]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	4b55      	ldr	r3, [pc, #340]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	4a54      	ldr	r2, [pc, #336]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 8003138:	f043 0308 	orr.w	r3, r3, #8
 800313c:	6313      	str	r3, [r2, #48]	@ 0x30
 800313e:	4b52      	ldr	r3, [pc, #328]	@ (8003288 <MX_GPIO_Init+0x1e0>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 800314a:	2200      	movs	r2, #0
 800314c:	2102      	movs	r1, #2
 800314e:	484f      	ldr	r0, [pc, #316]	@ (800328c <MX_GPIO_Init+0x1e4>)
 8003150:	f002 ffbe 	bl	80060d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8003154:	2201      	movs	r2, #1
 8003156:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800315a:	484d      	ldr	r0, [pc, #308]	@ (8003290 <MX_GPIO_Init+0x1e8>)
 800315c:	f002 ffb8 	bl	80060d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8003160:	2200      	movs	r2, #0
 8003162:	2108      	movs	r1, #8
 8003164:	484a      	ldr	r0, [pc, #296]	@ (8003290 <MX_GPIO_Init+0x1e8>)
 8003166:	f002 ffb3 	bl	80060d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800316a:	f642 63fe 	movw	r3, #12030	@ 0x2efe
 800316e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003170:	2303      	movs	r3, #3
 8003172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4845      	ldr	r0, [pc, #276]	@ (8003294 <MX_GPIO_Init+0x1ec>)
 8003180:	f002 fd26 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003184:	2301      	movs	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	4619      	mov	r1, r3
 8003196:	483d      	ldr	r0, [pc, #244]	@ (800328c <MX_GPIO_Init+0x1e4>)
 8003198:	f002 fd1a 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 800319c:	2302      	movs	r3, #2
 800319e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a8:	2302      	movs	r3, #2
 80031aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4836      	ldr	r0, [pc, #216]	@ (800328c <MX_GPIO_Init+0x1e4>)
 80031b4:	f002 fd0c 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80031b8:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 80031bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031be:	2303      	movs	r3, #3
 80031c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	482f      	ldr	r0, [pc, #188]	@ (800328c <MX_GPIO_Init+0x1e4>)
 80031ce:	f002 fcff 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80031d2:	f247 4307 	movw	r3, #29703	@ 0x7407
 80031d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031d8:	2303      	movs	r3, #3
 80031da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	4619      	mov	r1, r3
 80031e6:	482a      	ldr	r0, [pc, #168]	@ (8003290 <MX_GPIO_Init+0x1e8>)
 80031e8:	f002 fcf2 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 80031ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031fa:	2302      	movs	r3, #2
 80031fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	4619      	mov	r1, r3
 8003204:	4822      	ldr	r0, [pc, #136]	@ (8003290 <MX_GPIO_Init+0x1e8>)
 8003206:	f002 fce3 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800320a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800320e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003210:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003216:	2302      	movs	r3, #2
 8003218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800321a:	f107 0314 	add.w	r3, r7, #20
 800321e:	4619      	mov	r1, r3
 8003220:	481a      	ldr	r0, [pc, #104]	@ (800328c <MX_GPIO_Init+0x1e4>)
 8003222:	f002 fcd5 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 8003226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800322a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800322c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	4619      	mov	r1, r3
 800323c:	4813      	ldr	r0, [pc, #76]	@ (800328c <MX_GPIO_Init+0x1e4>)
 800323e:	f002 fcc7 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8003242:	2308      	movs	r3, #8
 8003244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003246:	2301      	movs	r3, #1
 8003248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324e:	2300      	movs	r3, #0
 8003250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4619      	mov	r1, r3
 8003258:	480d      	ldr	r0, [pc, #52]	@ (8003290 <MX_GPIO_Init+0x1e8>)
 800325a:	f002 fcb9 	bl	8005bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	2100      	movs	r1, #0
 8003262:	2017      	movs	r0, #23
 8003264:	f001 fd33 	bl	8004cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003268:	2017      	movs	r0, #23
 800326a:	f001 fd4c 	bl	8004d06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2100      	movs	r1, #0
 8003272:	2028      	movs	r0, #40	@ 0x28
 8003274:	f001 fd2b 	bl	8004cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003278:	2028      	movs	r0, #40	@ 0x28
 800327a:	f001 fd44 	bl	8004d06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800327e:	bf00      	nop
 8003280:	3728      	adds	r7, #40	@ 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	40020000 	.word	0x40020000
 8003290:	40020400 	.word	0x40020400
 8003294:	40020800 	.word	0x40020800

08003298 <gpio_analog>:

/* USER CODE BEGIN 4 */

void gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b48      	ldr	r3, [pc, #288]	@ (80033d4 <gpio_analog+0x13c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	4a47      	ldr	r2, [pc, #284]	@ (80033d4 <gpio_analog+0x13c>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032be:	4b45      	ldr	r3, [pc, #276]	@ (80033d4 <gpio_analog+0x13c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b41      	ldr	r3, [pc, #260]	@ (80033d4 <gpio_analog+0x13c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	4a40      	ldr	r2, [pc, #256]	@ (80033d4 <gpio_analog+0x13c>)
 80032d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032da:	4b3e      	ldr	r3, [pc, #248]	@ (80033d4 <gpio_analog+0x13c>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	4b3a      	ldr	r3, [pc, #232]	@ (80033d4 <gpio_analog+0x13c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	4a39      	ldr	r2, [pc, #228]	@ (80033d4 <gpio_analog+0x13c>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f6:	4b37      	ldr	r3, [pc, #220]	@ (80033d4 <gpio_analog+0x13c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	4b33      	ldr	r3, [pc, #204]	@ (80033d4 <gpio_analog+0x13c>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	4a32      	ldr	r2, [pc, #200]	@ (80033d4 <gpio_analog+0x13c>)
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	6313      	str	r3, [r2, #48]	@ 0x30
 8003312:	4b30      	ldr	r3, [pc, #192]	@ (80033d4 <gpio_analog+0x13c>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	4b2c      	ldr	r3, [pc, #176]	@ (80033d4 <gpio_analog+0x13c>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <gpio_analog+0x13c>)
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	6313      	str	r3, [r2, #48]	@ 0x30
 800332e:	4b29      	ldr	r3, [pc, #164]	@ (80033d4 <gpio_analog+0x13c>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800333a:	2308      	movs	r3, #8
 800333c:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800333e:	2303      	movs	r3, #3
 8003340:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	4821      	ldr	r0, [pc, #132]	@ (80033d8 <gpio_analog+0x140>)
 8003352:	f002 fc3d 	bl	8005bd0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = EN_5V_Pin;
 8003356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800335a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335c:	2303      	movs	r3, #3
 800335e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003364:	2300      	movs	r3, #0
 8003366:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	4619      	mov	r1, r3
 800336e:	481a      	ldr	r0, [pc, #104]	@ (80033d8 <gpio_analog+0x140>)
 8003370:	f002 fc2e 	bl	8005bd0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : OUT_MOTION_Pin */
	  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8003374:	2301      	movs	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003378:	2303      	movs	r3, #3
 800337a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003380:	2300      	movs	r3, #0
 8003382:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	4619      	mov	r1, r3
 800338a:	4814      	ldr	r0, [pc, #80]	@ (80033dc <gpio_analog+0x144>)
 800338c:	f002 fc20 	bl	8005bd0 <HAL_GPIO_Init>

	  /*Configure GPIO pin : EN_MOTION_Pin */
	  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8003390:	2302      	movs	r3, #2
 8003392:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003394:	2303      	movs	r3, #3
 8003396:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4619      	mov	r1, r3
 80033a6:	480d      	ldr	r0, [pc, #52]	@ (80033dc <gpio_analog+0x144>)
 80033a8:	f002 fc12 	bl	8005bd0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80033ac:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80033b0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033b2:	2303      	movs	r3, #3
 80033b4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033be:	f107 0314 	add.w	r3, r7, #20
 80033c2:	4619      	mov	r1, r3
 80033c4:	4805      	ldr	r0, [pc, #20]	@ (80033dc <gpio_analog+0x144>)
 80033c6:	f002 fc03 	bl	8005bd0 <HAL_GPIO_Init>

}
 80033ca:	bf00      	nop
 80033cc:	3728      	adds	r7, #40	@ 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020400 	.word	0x40020400
 80033dc:	40020000 	.word	0x40020000

080033e0 <i2c1_gpio_analog>:
void i2c1_gpio_analog()
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80033f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033f8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fa:	2303      	movs	r3, #3
 80033fc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4803      	ldr	r0, [pc, #12]	@ (8003418 <i2c1_gpio_analog+0x38>)
 800340c:	f002 fbe0 	bl	8005bd0 <HAL_GPIO_Init>


}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40020400 	.word	0x40020400

0800341c <uart_gpio_analog>:
void uart_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003430:	23c0      	movs	r3, #192	@ 0xc0
 8003432:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003434:	2303      	movs	r3, #3
 8003436:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4619      	mov	r1, r3
 8003444:	4809      	ldr	r0, [pc, #36]	@ (800346c <uart_gpio_analog+0x50>)
 8003446:	f002 fbc3 	bl	8005bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 800344a:	230c      	movs	r3, #12
 800344c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800344e:	2303      	movs	r3, #3
 8003450:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4804      	ldr	r0, [pc, #16]	@ (8003470 <uart_gpio_analog+0x54>)
 8003460:	f002 fbb6 	bl	8005bd0 <HAL_GPIO_Init>
}
 8003464:	bf00      	nop
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40020400 	.word	0x40020400
 8003470:	40020000 	.word	0x40020000

08003474 <timer_gpio_analog>:
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}
void timer_gpio_analog()
{  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003488:	2330      	movs	r3, #48	@ 0x30
 800348a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800348c:	2303      	movs	r3, #3
 800348e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	4619      	mov	r1, r3
 800349c:	4803      	ldr	r0, [pc, #12]	@ (80034ac <timer_gpio_analog+0x38>)
 800349e:	f002 fb97 	bl	8005bd0 <HAL_GPIO_Init>

}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40020400 	.word	0x40020400

080034b0 <gpio_disable>:



void gpio_disable()
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
	i2c1_gpio_analog();
 80034b6:	f7ff ff93 	bl	80033e0 <i2c1_gpio_analog>
	 uart_gpio_analog();
 80034ba:	f7ff ffaf 	bl	800341c <uart_gpio_analog>
	// usb_gpio_analog();
	 timer_gpio_analog();
 80034be:	f7ff ffd9 	bl	8003474 <timer_gpio_analog>
	 gpio_analog();
 80034c2:	f7ff fee9 	bl	8003298 <gpio_analog>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80034d4:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80034d8:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034da:	2303      	movs	r3, #3
 80034dc:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	480a      	ldr	r0, [pc, #40]	@ (8003514 <gpio_disable+0x64>)
 80034ec:	f002 fb70 	bl	8005bd0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034f0:	2304      	movs	r3, #4
 80034f2:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034f4:	2303      	movs	r3, #3
 80034f6:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	4619      	mov	r1, r3
 8003504:	4804      	ldr	r0, [pc, #16]	@ (8003518 <gpio_disable+0x68>)
 8003506:	f002 fb63 	bl	8005bd0 <HAL_GPIO_Init>

}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40020800 	.word	0x40020800
 8003518:	40020c00 	.word	0x40020c00

0800351c <gpio_enable>:
void gpio_enable()
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8003522:	f7ff fdc1 	bl	80030a8 <MX_GPIO_Init>

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003534:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003538:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003542:	2303      	movs	r3, #3
 8003544:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003546:	230c      	movs	r3, #12
 8003548:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	4619      	mov	r1, r3
 800354e:	480b      	ldr	r0, [pc, #44]	@ (800357c <gpio_enable+0x60>)
 8003550:	f002 fb3e 	bl	8005bd0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003554:	2304      	movs	r3, #4
 8003556:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003564:	230c      	movs	r3, #12
 8003566:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	4619      	mov	r1, r3
 800356c:	4804      	ldr	r0, [pc, #16]	@ (8003580 <gpio_enable+0x64>)
 800356e:	f002 fb2f 	bl	8005bd0 <HAL_GPIO_Init>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40020800 	.word	0x40020800
 8003580:	40020c00 	.word	0x40020c00

08003584 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003594:	d101      	bne.n	800359a <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 8003596:	f7fd fdcb 	bl	8001130 <timer_interrupt>
}

}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80035b4:	f7fd fda0 	bl	80010f8 <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035be:	d118      	bne.n	80035f2 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        _RunTime_Packet.showPrompt = 1;
 80035c0:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <HAL_GPIO_EXTI_Callback+0x64>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        _RunTime_Packet.usb_detection = 1;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <HAL_GPIO_EXTI_Callback+0x64>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        _RunTime_Packet.usb_start_timer = 1;
 80035d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <HAL_GPIO_EXTI_Callback+0x64>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        usb_time_keep = 0;
 80035d8:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <HAL_GPIO_EXTI_Callback+0x68>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 80035de:	f000 fd93 	bl	8004108 <HAL_GetTick>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <HAL_GPIO_EXTI_Callback+0x6c>)
 80035e6:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 80035e8:	f000 fd8e 	bl	8004108 <HAL_GetTick>
 80035ec:	4603      	mov	r3, r0
 80035ee:	4a09      	ldr	r2, [pc, #36]	@ (8003614 <HAL_GPIO_EXTI_Callback+0x70>)
 80035f0:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035f8:	d101      	bne.n	80035fe <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	power_off_detect();
 80035fa:	f7fd fdb3 	bl	8001164 <power_off_detect>
    }
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20001530 	.word	0x20001530
 800360c:	20001584 	.word	0x20001584
 8003610:	200017c8 	.word	0x200017c8
 8003614:	200017c0 	.word	0x200017c0

08003618 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003620:	f010 face 	bl	8013bc0 <RtcInt>
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_UART_ErrorCallback>:



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <HAL_UART_ErrorCallback+0x40>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d106      	bne.n	800364a <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	43d2      	mvns	r2, r2
 8003646:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8003648:	e009      	b.n	800365e <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a08      	ldr	r2, [pc, #32]	@ (8003670 <HAL_UART_ErrorCallback+0x44>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d105      	bne.n	800365e <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	43d2      	mvns	r2, r2
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20001a74 	.word	0x20001a74
 8003670:	20001abc 	.word	0x20001abc

08003674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003678:	b672      	cpsid	i
}
 800367a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 800367c:	f001 fb5f 	bl	8004d3e <HAL_NVIC_SystemReset>
  while (1)
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <Error_Handler+0xc>

08003684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	4b10      	ldr	r3, [pc, #64]	@ (80036d0 <HAL_MspInit+0x4c>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	4a0f      	ldr	r2, [pc, #60]	@ (80036d0 <HAL_MspInit+0x4c>)
 8003694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003698:	6453      	str	r3, [r2, #68]	@ 0x44
 800369a:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <HAL_MspInit+0x4c>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_MspInit+0x4c>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	4a08      	ldr	r2, [pc, #32]	@ (80036d0 <HAL_MspInit+0x4c>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b6:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_MspInit+0x4c>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800

080036d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	@ 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a17      	ldr	r2, [pc, #92]	@ (8003750 <HAL_ADC_MspInit+0x7c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d127      	bne.n	8003746 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	4b16      	ldr	r3, [pc, #88]	@ (8003754 <HAL_ADC_MspInit+0x80>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	4a15      	ldr	r2, [pc, #84]	@ (8003754 <HAL_ADC_MspInit+0x80>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003704:	6453      	str	r3, [r2, #68]	@ 0x44
 8003706:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <HAL_ADC_MspInit+0x80>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <HAL_ADC_MspInit+0x80>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	4a0e      	ldr	r2, [pc, #56]	@ (8003754 <HAL_ADC_MspInit+0x80>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6313      	str	r3, [r2, #48]	@ 0x30
 8003722:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <HAL_ADC_MspInit+0x80>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 800372e:	2301      	movs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003732:	2303      	movs	r3, #3
 8003734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800373a:	f107 0314 	add.w	r3, r7, #20
 800373e:	4619      	mov	r1, r3
 8003740:	4805      	ldr	r0, [pc, #20]	@ (8003758 <HAL_ADC_MspInit+0x84>)
 8003742:	f002 fa45 	bl	8005bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003746:	bf00      	nop
 8003748:	3728      	adds	r7, #40	@ 0x28
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40012000 	.word	0x40012000
 8003754:	40023800 	.word	0x40023800
 8003758:	40020800 	.word	0x40020800

0800375c <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a08      	ldr	r2, [pc, #32]	@ (800378c <HAL_ADC_MspDeInit+0x30>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d109      	bne.n	8003782 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800376e:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <HAL_ADC_MspDeInit+0x34>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	4a07      	ldr	r2, [pc, #28]	@ (8003790 <HAL_ADC_MspDeInit+0x34>)
 8003774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003778:	6453      	str	r3, [r2, #68]	@ 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 800377a:	2101      	movs	r1, #1
 800377c:	4805      	ldr	r0, [pc, #20]	@ (8003794 <HAL_ADC_MspDeInit+0x38>)
 800377e:	f002 fbab 	bl	8005ed8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40012000 	.word	0x40012000
 8003790:	40023800 	.word	0x40023800
 8003794:	40020800 	.word	0x40020800

08003798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	@ 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a19      	ldr	r2, [pc, #100]	@ (800381c <HAL_I2C_MspInit+0x84>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d12c      	bne.n	8003814 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	4b18      	ldr	r3, [pc, #96]	@ (8003820 <HAL_I2C_MspInit+0x88>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	4a17      	ldr	r2, [pc, #92]	@ (8003820 <HAL_I2C_MspInit+0x88>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <HAL_I2C_MspInit+0x88>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 80037d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037dc:	2312      	movs	r3, #18
 80037de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e4:	2303      	movs	r3, #3
 80037e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80037e8:	2304      	movs	r3, #4
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4619      	mov	r1, r3
 80037f2:	480c      	ldr	r0, [pc, #48]	@ (8003824 <HAL_I2C_MspInit+0x8c>)
 80037f4:	f002 f9ec 	bl	8005bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <HAL_I2C_MspInit+0x88>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	4a07      	ldr	r2, [pc, #28]	@ (8003820 <HAL_I2C_MspInit+0x88>)
 8003802:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003806:	6413      	str	r3, [r2, #64]	@ 0x40
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_I2C_MspInit+0x88>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003814:	bf00      	nop
 8003816:	3728      	adds	r7, #40	@ 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40005400 	.word	0x40005400
 8003820:	40023800 	.word	0x40023800
 8003824:	40020400 	.word	0x40020400

08003828 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0b      	ldr	r2, [pc, #44]	@ (8003864 <HAL_I2C_MspDeInit+0x3c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d10f      	bne.n	800385a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800383a:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_I2C_MspDeInit+0x40>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383e:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <HAL_I2C_MspDeInit+0x40>)
 8003840:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003844:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8003846:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800384a:	4808      	ldr	r0, [pc, #32]	@ (800386c <HAL_I2C_MspDeInit+0x44>)
 800384c:	f002 fb44 	bl	8005ed8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003854:	4805      	ldr	r0, [pc, #20]	@ (800386c <HAL_I2C_MspDeInit+0x44>)
 8003856:	f002 fb3f 	bl	8005ed8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40005400 	.word	0x40005400
 8003868:	40023800 	.word	0x40023800
 800386c:	40020400 	.word	0x40020400

08003870 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a10      	ldr	r2, [pc, #64]	@ (80038d0 <HAL_RTC_MspInit+0x60>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d119      	bne.n	80038c6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003892:	2302      	movs	r3, #2
 8003894:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003896:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800389a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	4618      	mov	r0, r3
 80038a2:	f005 fd95 	bl	80093d0 <HAL_RCCEx_PeriphCLKConfig>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80038ac:	f7ff fee2 	bl	8003674 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038b0:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <HAL_RTC_MspInit+0x64>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2100      	movs	r1, #0
 80038ba:	2029      	movs	r0, #41	@ 0x29
 80038bc:	f001 fa07 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80038c0:	2029      	movs	r0, #41	@ 0x29
 80038c2:	f001 fa20 	bl	8004d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038c6:	bf00      	nop
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40002800 	.word	0x40002800
 80038d4:	42470e3c 	.word	0x42470e3c

080038d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a28      	ldr	r2, [pc, #160]	@ (8003998 <HAL_SD_MspInit+0xc0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d14a      	bne.n	8003990 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <HAL_SD_MspInit+0xc4>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	4a26      	ldr	r2, [pc, #152]	@ (800399c <HAL_SD_MspInit+0xc4>)
 8003904:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003908:	6453      	str	r3, [r2, #68]	@ 0x44
 800390a:	4b24      	ldr	r3, [pc, #144]	@ (800399c <HAL_SD_MspInit+0xc4>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	4b20      	ldr	r3, [pc, #128]	@ (800399c <HAL_SD_MspInit+0xc4>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391e:	4a1f      	ldr	r2, [pc, #124]	@ (800399c <HAL_SD_MspInit+0xc4>)
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	6313      	str	r3, [r2, #48]	@ 0x30
 8003926:	4b1d      	ldr	r3, [pc, #116]	@ (800399c <HAL_SD_MspInit+0xc4>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	4b19      	ldr	r3, [pc, #100]	@ (800399c <HAL_SD_MspInit+0xc4>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	4a18      	ldr	r2, [pc, #96]	@ (800399c <HAL_SD_MspInit+0xc4>)
 800393c:	f043 0308 	orr.w	r3, r3, #8
 8003940:	6313      	str	r3, [r2, #48]	@ 0x30
 8003942:	4b16      	ldr	r3, [pc, #88]	@ (800399c <HAL_SD_MspInit+0xc4>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800394e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8003952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395c:	2303      	movs	r3, #3
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003960:	230c      	movs	r3, #12
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	4619      	mov	r1, r3
 800396a:	480d      	ldr	r0, [pc, #52]	@ (80039a0 <HAL_SD_MspInit+0xc8>)
 800396c:	f002 f930 	bl	8005bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003970:	2304      	movs	r3, #4
 8003972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397c:	2303      	movs	r3, #3
 800397e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003980:	230c      	movs	r3, #12
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	4619      	mov	r1, r3
 800398a:	4806      	ldr	r0, [pc, #24]	@ (80039a4 <HAL_SD_MspInit+0xcc>)
 800398c:	f002 f920 	bl	8005bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003990:	bf00      	nop
 8003992:	3728      	adds	r7, #40	@ 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40023800 	.word	0x40023800
 80039a0:	40020800 	.word	0x40020800
 80039a4:	40020c00 	.word	0x40020c00

080039a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a3a      	ldr	r2, [pc, #232]	@ (8003aa0 <HAL_TIM_Base_MspInit+0xf8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d13f      	bne.n	8003a3a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	4b39      	ldr	r3, [pc, #228]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	4a38      	ldr	r2, [pc, #224]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ca:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80039d6:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 80039d8:	4a34      	ldr	r2, [pc, #208]	@ (8003aac <HAL_TIM_Base_MspInit+0x104>)
 80039da:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80039dc:	4b32      	ldr	r3, [pc, #200]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 80039de:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80039e2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039e4:	4b30      	ldr	r3, [pc, #192]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 80039e6:	2240      	movs	r2, #64	@ 0x40
 80039e8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ea:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80039f0:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 80039f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039f8:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 80039fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a00:	4b29      	ldr	r3, [pc, #164]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 8003a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a06:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8003a08:	4b27      	ldr	r3, [pc, #156]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 8003a0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a0e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003a10:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a16:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003a1c:	4822      	ldr	r0, [pc, #136]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 8003a1e:	f001 f99f 	bl	8004d60 <HAL_DMA_Init>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003a28:	f7ff fe24 	bl	8003674 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 8003a30:	621a      	str	r2, [r3, #32]
 8003a32:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x100>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a38:	e02e      	b.n	8003a98 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a42:	d116      	bne.n	8003a72 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	4b16      	ldr	r3, [pc, #88]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	4a15      	ldr	r2, [pc, #84]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a54:	4b13      	ldr	r3, [pc, #76]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a60:	2200      	movs	r2, #0
 8003a62:	2100      	movs	r1, #0
 8003a64:	201c      	movs	r0, #28
 8003a66:	f001 f932 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a6a:	201c      	movs	r0, #28
 8003a6c:	f001 f94b 	bl	8004d06 <HAL_NVIC_EnableIRQ>
}
 8003a70:	e012      	b.n	8003a98 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab0 <HAL_TIM_Base_MspInit+0x108>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10d      	bne.n	8003a98 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	4b08      	ldr	r3, [pc, #32]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	4a07      	ldr	r2, [pc, #28]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <HAL_TIM_Base_MspInit+0xfc>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	20001a14 	.word	0x20001a14
 8003aac:	40026488 	.word	0x40026488
 8003ab0:	40000400 	.word	0x40000400

08003ab4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a12      	ldr	r2, [pc, #72]	@ (8003b1c <HAL_TIM_MspPostInit+0x68>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d11d      	bne.n	8003b12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_TIM_MspPostInit+0x6c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	4a10      	ldr	r2, [pc, #64]	@ (8003b20 <HAL_TIM_MspPostInit+0x6c>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_TIM_MspPostInit+0x6c>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003af2:	2330      	movs	r3, #48	@ 0x30
 8003af4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b02:	2302      	movs	r3, #2
 8003b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b06:	f107 030c 	add.w	r3, r7, #12
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4805      	ldr	r0, [pc, #20]	@ (8003b24 <HAL_TIM_MspPostInit+0x70>)
 8003b0e:	f002 f85f 	bl	8005bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b12:	bf00      	nop
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40020400 	.word	0x40020400

08003b28 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_TIM_Base_MspDeInit+0x68>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10b      	bne.n	8003b52 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 8003b3a:	4b16      	ldr	r3, [pc, #88]	@ (8003b94 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	4a15      	ldr	r2, [pc, #84]	@ (8003b94 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6453      	str	r3, [r2, #68]	@ 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f9b6 	bl	8004ebc <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003b50:	e019      	b.n	8003b86 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5a:	d109      	bne.n	8003b70 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	4a0c      	ldr	r2, [pc, #48]	@ (8003b94 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8003b68:	201c      	movs	r0, #28
 8003b6a:	f001 f8da 	bl	8004d22 <HAL_NVIC_DisableIRQ>
}
 8003b6e:	e00a      	b.n	8003b86 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a08      	ldr	r2, [pc, #32]	@ (8003b98 <HAL_TIM_Base_MspDeInit+0x70>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d105      	bne.n	8003b86 <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	4a05      	ldr	r2, [pc, #20]	@ (8003b94 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003b80:	f023 0302 	bic.w	r3, r3, #2
 8003b84:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40000400 	.word	0x40000400

08003b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	@ 0x30
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba4:	f107 031c 	add.w	r3, r7, #28
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca4 <HAL_UART_MspInit+0x108>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d134      	bne.n	8003c28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	4b39      	ldr	r3, [pc, #228]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	4a38      	ldr	r2, [pc, #224]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003bc8:	f043 0310 	orr.w	r3, r3, #16
 8003bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bce:	4b36      	ldr	r3, [pc, #216]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	4b32      	ldr	r3, [pc, #200]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	4a31      	ldr	r2, [pc, #196]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bea:	4b2f      	ldr	r3, [pc, #188]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003bf6:	23c0      	movs	r3, #192	@ 0xc0
 8003bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c02:	2303      	movs	r3, #3
 8003c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c06:	2307      	movs	r3, #7
 8003c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4826      	ldr	r0, [pc, #152]	@ (8003cac <HAL_UART_MspInit+0x110>)
 8003c12:	f001 ffdd 	bl	8005bd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	2025      	movs	r0, #37	@ 0x25
 8003c1c:	f001 f857 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c20:	2025      	movs	r0, #37	@ 0x25
 8003c22:	f001 f870 	bl	8004d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c26:	e038      	b.n	8003c9a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a20      	ldr	r2, [pc, #128]	@ (8003cb0 <HAL_UART_MspInit+0x114>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d133      	bne.n	8003c9a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c42:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <HAL_UART_MspInit+0x10c>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c76:	2303      	movs	r3, #3
 8003c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c7a:	2307      	movs	r3, #7
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	4619      	mov	r1, r3
 8003c84:	480b      	ldr	r0, [pc, #44]	@ (8003cb4 <HAL_UART_MspInit+0x118>)
 8003c86:	f001 ffa3 	bl	8005bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	2026      	movs	r0, #38	@ 0x26
 8003c90:	f001 f81d 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c94:	2026      	movs	r0, #38	@ 0x26
 8003c96:	f001 f836 	bl	8004d06 <HAL_NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3730      	adds	r7, #48	@ 0x30
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40011000 	.word	0x40011000
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40004400 	.word	0x40004400
 8003cb4:	40020000 	.word	0x40020000

08003cb8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	@ (8003d14 <HAL_UART_MspDeInit+0x5c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003cca:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <HAL_UART_MspDeInit+0x60>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	4a12      	ldr	r2, [pc, #72]	@ (8003d18 <HAL_UART_MspDeInit+0x60>)
 8003cd0:	f023 0310 	bic.w	r3, r3, #16
 8003cd4:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8003cd6:	21c0      	movs	r1, #192	@ 0xc0
 8003cd8:	4810      	ldr	r0, [pc, #64]	@ (8003d1c <HAL_UART_MspDeInit+0x64>)
 8003cda:	f002 f8fd 	bl	8005ed8 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003cde:	2025      	movs	r0, #37	@ 0x25
 8003ce0:	f001 f81f 	bl	8004d22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003ce4:	e011      	b.n	8003d0a <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <HAL_UART_MspDeInit+0x68>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d10c      	bne.n	8003d0a <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003cf0:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_UART_MspDeInit+0x60>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf4:	4a08      	ldr	r2, [pc, #32]	@ (8003d18 <HAL_UART_MspDeInit+0x60>)
 8003cf6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003cfa:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 8003cfc:	210c      	movs	r1, #12
 8003cfe:	4809      	ldr	r0, [pc, #36]	@ (8003d24 <HAL_UART_MspDeInit+0x6c>)
 8003d00:	f002 f8ea 	bl	8005ed8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003d04:	2026      	movs	r0, #38	@ 0x26
 8003d06:	f001 f80c 	bl	8004d22 <HAL_NVIC_DisableIRQ>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40011000 	.word	0x40011000
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40020400 	.word	0x40020400
 8003d20:	40004400 	.word	0x40004400
 8003d24:	40020000 	.word	0x40020000

08003d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d2c:	f001 f807 	bl	8004d3e <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d30:	bf00      	nop
 8003d32:	e7fd      	b.n	8003d30 <NMI_Handler+0x8>

08003d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d38:	f001 f801 	bl	8004d3e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <HardFault_Handler+0x8>

08003d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d44:	f000 fffb 	bl	8004d3e <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <MemManage_Handler+0x8>

08003d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d50:	f000 fff5 	bl	8004d3e <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d54:	bf00      	nop
 8003d56:	e7fd      	b.n	8003d54 <BusFault_Handler+0x8>

08003d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d5c:	f000 ffef 	bl	8004d3e <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <UsageFault_Handler+0x8>

08003d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d68:	f000 ffe9 	bl	8004d3e <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d74:	f000 ffe3 	bl	8004d3e <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d78:	bf00      	nop
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003d80:	f000 ffdd 	bl	8004d3e <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d84:	bf00      	nop
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 8003d8c:	4803      	ldr	r0, [pc, #12]	@ (8003d9c <SysTick_Handler+0x14>)
 8003d8e:	f003 fb6b 	bl	8007468 <HAL_IWDG_Refresh>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d92:	f000 f9a5 	bl	80040e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	2000188c 	.word	0x2000188c

08003da0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 8003da4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003da8:	f002 f9ac 	bl	8006104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003db4:	4802      	ldr	r0, [pc, #8]	@ (8003dc0 <TIM2_IRQHandler+0x10>)
 8003db6:	f007 fbc9 	bl	800b54c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20001984 	.word	0x20001984

08003dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dc8:	4802      	ldr	r0, [pc, #8]	@ (8003dd4 <USART1_IRQHandler+0x10>)
 8003dca:	f008 fb4b 	bl	800c464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20001a74 	.word	0x20001a74

08003dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ddc:	4802      	ldr	r0, [pc, #8]	@ (8003de8 <USART2_IRQHandler+0x10>)
 8003dde:	f008 fb41 	bl	800c464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20001abc 	.word	0x20001abc

08003dec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 8003df0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003df4:	f002 f986 	bl	8006104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003e00:	4802      	ldr	r0, [pc, #8]	@ (8003e0c <RTC_Alarm_IRQHandler+0x10>)
 8003e02:	f006 f833 	bl	8009e6c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20001898 	.word	0x20001898

08003e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e14:	4802      	ldr	r0, [pc, #8]	@ (8003e20 <OTG_FS_IRQHandler+0x10>)
 8003e16:	f003 fcd9 	bl	80077cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20002908 	.word	0x20002908

08003e24 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003e28:	4802      	ldr	r0, [pc, #8]	@ (8003e34 <DMA2_Stream5_IRQHandler+0x10>)
 8003e2a:	f001 f973 	bl	8005114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20001a14 	.word	0x20001a14

08003e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return 1;
 8003e3c:	2301      	movs	r3, #1
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <_kill>:

int _kill(int pid, int sig)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e52:	f01b f82d 	bl	801eeb0 <__errno>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2216      	movs	r2, #22
 8003e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_exit>:

void _exit (int status)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e70:	f04f 31ff 	mov.w	r1, #4294967295
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ffe7 	bl	8003e48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <_exit+0x12>

08003e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e00a      	b.n	8003ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e90:	f3af 8000 	nop.w
 8003e94:	4601      	mov	r1, r0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	60ba      	str	r2, [r7, #8]
 8003e9c:	b2ca      	uxtb	r2, r1
 8003e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	dbf0      	blt.n	8003e90 <_read+0x12>
  }

  return len;
 8003eae:	687b      	ldr	r3, [r7, #4]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e009      	b.n	8003ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	60ba      	str	r2, [r7, #8]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3301      	adds	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	dbf1      	blt.n	8003eca <_write+0x12>
  }
  return len;
 8003ee6:	687b      	ldr	r3, [r7, #4]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_close>:

int _close(int file)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f18:	605a      	str	r2, [r3, #4]
  return 0;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <_isatty>:

int _isatty(int file)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f30:	2301      	movs	r3, #1
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b085      	sub	sp, #20
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f60:	4a14      	ldr	r2, [pc, #80]	@ (8003fb4 <_sbrk+0x5c>)
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <_sbrk+0x60>)
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f6c:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <_sbrk+0x64>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d102      	bne.n	8003f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f74:	4b11      	ldr	r3, [pc, #68]	@ (8003fbc <_sbrk+0x64>)
 8003f76:	4a12      	ldr	r2, [pc, #72]	@ (8003fc0 <_sbrk+0x68>)
 8003f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f7a:	4b10      	ldr	r3, [pc, #64]	@ (8003fbc <_sbrk+0x64>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d207      	bcs.n	8003f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f88:	f01a ff92 	bl	801eeb0 <__errno>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	220c      	movs	r2, #12
 8003f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295
 8003f96:	e009      	b.n	8003fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f98:	4b08      	ldr	r3, [pc, #32]	@ (8003fbc <_sbrk+0x64>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f9e:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <_sbrk+0x64>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	4a05      	ldr	r2, [pc, #20]	@ (8003fbc <_sbrk+0x64>)
 8003fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20018000 	.word	0x20018000
 8003fb8:	00000400 	.word	0x00000400
 8003fbc:	20001b04 	.word	0x20001b04
 8003fc0:	200037b0 	.word	0x200037b0

08003fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc8:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <SystemInit+0x20>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	4a05      	ldr	r2, [pc, #20]	@ (8003fe4 <SystemInit+0x20>)
 8003fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fec:	480d      	ldr	r0, [pc, #52]	@ (8004024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003fee:	490e      	ldr	r1, [pc, #56]	@ (8004028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ff0:	4a0e      	ldr	r2, [pc, #56]	@ (800402c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ff4:	e002      	b.n	8003ffc <LoopCopyDataInit>

08003ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ffa:	3304      	adds	r3, #4

08003ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004000:	d3f9      	bcc.n	8003ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004002:	4a0b      	ldr	r2, [pc, #44]	@ (8004030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004004:	4c0b      	ldr	r4, [pc, #44]	@ (8004034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004008:	e001      	b.n	800400e <LoopFillZerobss>

0800400a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800400a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800400c:	3204      	adds	r2, #4

0800400e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800400e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004010:	d3fb      	bcc.n	800400a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004012:	f7ff ffd7 	bl	8003fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004016:	f01a ff51 	bl	801eebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800401a:	f7fe fd39 	bl	8002a90 <main>
  bx  lr    
 800401e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004020:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004028:	20000304 	.word	0x20000304
  ldr r2, =_sidata
 800402c:	080258ec 	.word	0x080258ec
  ldr r2, =_sbss
 8004030:	20000304 	.word	0x20000304
  ldr r4, =_ebss
 8004034:	200037b0 	.word	0x200037b0

08004038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004038:	e7fe      	b.n	8004038 <ADC_IRQHandler>
	...

0800403c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004040:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0d      	ldr	r2, [pc, #52]	@ (800407c <HAL_Init+0x40>)
 8004046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800404a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <HAL_Init+0x40>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <HAL_Init+0x40>)
 8004052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004058:	4b08      	ldr	r3, [pc, #32]	@ (800407c <HAL_Init+0x40>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a07      	ldr	r2, [pc, #28]	@ (800407c <HAL_Init+0x40>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004064:	2003      	movs	r0, #3
 8004066:	f000 fe27 	bl	8004cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800406a:	200f      	movs	r0, #15
 800406c:	f000 f808 	bl	8004080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004070:	f7ff fb08 	bl	8003684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00

08004080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004088:	4b12      	ldr	r3, [pc, #72]	@ (80040d4 <HAL_InitTick+0x54>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_InitTick+0x58>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	4619      	mov	r1, r3
 8004092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004096:	fbb3 f3f1 	udiv	r3, r3, r1
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fe51 	bl	8004d46 <HAL_SYSTICK_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e00e      	b.n	80040cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b0f      	cmp	r3, #15
 80040b2:	d80a      	bhi.n	80040ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040b4:	2200      	movs	r2, #0
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295
 80040bc:	f000 fe07 	bl	8004cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040c0:	4a06      	ldr	r2, [pc, #24]	@ (80040dc <HAL_InitTick+0x5c>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000010 	.word	0x20000010
 80040d8:	20000018 	.word	0x20000018
 80040dc:	20000014 	.word	0x20000014

080040e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040e4:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <HAL_IncTick+0x20>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_IncTick+0x24>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4413      	add	r3, r2
 80040f0:	4a04      	ldr	r2, [pc, #16]	@ (8004104 <HAL_IncTick+0x24>)
 80040f2:	6013      	str	r3, [r2, #0]
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000018 	.word	0x20000018
 8004104:	20001b08 	.word	0x20001b08

08004108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return uwTick;
 800410c:	4b03      	ldr	r3, [pc, #12]	@ (800411c <HAL_GetTick+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20001b08 	.word	0x20001b08

08004120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004128:	f7ff ffee 	bl	8004108 <HAL_GetTick>
 800412c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d005      	beq.n	8004146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800413a:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <HAL_Delay+0x44>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004146:	bf00      	nop
 8004148:	f7ff ffde 	bl	8004108 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	429a      	cmp	r2, r3
 8004156:	d8f7      	bhi.n	8004148 <HAL_Delay+0x28>
  {
  }
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000018 	.word	0x20000018

08004168 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <HAL_SuspendTick+0x1c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a04      	ldr	r2, [pc, #16]	@ (8004184 <HAL_SuspendTick+0x1c>)
 8004172:	f023 0302 	bic.w	r3, r3, #2
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	e000e010 	.word	0xe000e010

08004188 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_ResumeTick+0x1c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a04      	ldr	r2, [pc, #16]	@ (80041a4 <HAL_ResumeTick+0x1c>)
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	e000e010 	.word	0xe000e010

080041a8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80041ac:	4b03      	ldr	r3, [pc, #12]	@ (80041bc <HAL_GetUIDw0+0x14>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	1fff7a10 	.word	0x1fff7a10

080041c0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80041c4:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <HAL_GetUIDw1+0x14>)
 80041c6:	681b      	ldr	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	1fff7a14 	.word	0x1fff7a14

080041d8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_GetUIDw2+0x14>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	1fff7a18 	.word	0x1fff7a18

080041f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e033      	b.n	800426e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fa60 	bl	80036d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d118      	bne.n	8004260 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004236:	f023 0302 	bic.w	r3, r3, #2
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 faec 	bl	8004820 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	641a      	str	r2, [r3, #64]	@ 0x40
 800425e:	e001      	b.n	8004264 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e022      	b.n	80042d2 <HAL_ADC_DeInit+0x5c>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	f043 0202 	orr.w	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	609a      	str	r2, [r3, #8]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <HAL_ADC_DeInit+0x52>

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff fa50 	bl	800375c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_Start+0x1a>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e097      	b.n	8004426 <HAL_ADC_Start+0x14a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d018      	beq.n	800433e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800431c:	4b45      	ldr	r3, [pc, #276]	@ (8004434 <HAL_ADC_Start+0x158>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a45      	ldr	r2, [pc, #276]	@ (8004438 <HAL_ADC_Start+0x15c>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0c9a      	lsrs	r2, r3, #18
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004330:	e002      	b.n	8004338 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3b01      	subs	r3, #1
 8004336:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f9      	bne.n	8004332 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d15f      	bne.n	800440c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004376:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438a:	d106      	bne.n	800439a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004390:	f023 0206 	bic.w	r2, r3, #6
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	645a      	str	r2, [r3, #68]	@ 0x44
 8004398:	e002      	b.n	80043a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043a8:	4b24      	ldr	r3, [pc, #144]	@ (800443c <HAL_ADC_Start+0x160>)
 80043aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80043b4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d129      	bne.n	8004424 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	e020      	b.n	8004424 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a16      	ldr	r2, [pc, #88]	@ (8004440 <HAL_ADC_Start+0x164>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d11b      	bne.n	8004424 <HAL_ADC_Start+0x148>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d114      	bne.n	8004424 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004408:	609a      	str	r2, [r3, #8]
 800440a:	e00b      	b.n	8004424 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	f043 0210 	orr.w	r2, r3, #16
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441c:	f043 0201 	orr.w	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000010 	.word	0x20000010
 8004438:	431bde83 	.word	0x431bde83
 800443c:	40012300 	.word	0x40012300
 8004440:	40012000 	.word	0x40012000

08004444 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_ADC_Stop+0x16>
 8004456:	2302      	movs	r3, #2
 8004458:	e021      	b.n	800449e <HAL_ADC_Stop+0x5a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d109      	bne.n	8004494 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c6:	d113      	bne.n	80044f0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d6:	d10b      	bne.n	80044f0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e063      	b.n	80045b8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f0:	f7ff fe0a 	bl	8004108 <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80044f6:	e021      	b.n	800453c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d01d      	beq.n	800453c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_ADC_PollForConversion+0x6c>
 8004506:	f7ff fdff 	bl	8004108 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d212      	bcs.n	800453c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b02      	cmp	r3, #2
 8004522:	d00b      	beq.n	800453c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e03d      	b.n	80045b8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d1d6      	bne.n	80044f8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f06f 0212 	mvn.w	r2, #18
 8004552:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d123      	bne.n	80045b6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004572:	2b00      	cmp	r3, #0
 8004574:	d11f      	bne.n	80045b6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004580:	2b00      	cmp	r3, #0
 8004582:	d006      	beq.n	8004592 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800458e:	2b00      	cmp	r3, #0
 8004590:	d111      	bne.n	80045b6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x1c>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e105      	b.n	8004804 <HAL_ADC_ConfigChannel+0x228>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b09      	cmp	r3, #9
 8004606:	d925      	bls.n	8004654 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68d9      	ldr	r1, [r3, #12]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	3b1e      	subs	r3, #30
 800461e:	2207      	movs	r2, #7
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43da      	mvns	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	400a      	ands	r2, r1
 800462c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68d9      	ldr	r1, [r3, #12]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	4618      	mov	r0, r3
 8004640:	4603      	mov	r3, r0
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4403      	add	r3, r0
 8004646:	3b1e      	subs	r3, #30
 8004648:	409a      	lsls	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	e022      	b.n	800469a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6919      	ldr	r1, [r3, #16]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	2207      	movs	r2, #7
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43da      	mvns	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	400a      	ands	r2, r1
 8004676:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6919      	ldr	r1, [r3, #16]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	4618      	mov	r0, r3
 800468a:	4603      	mov	r3, r0
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4403      	add	r3, r0
 8004690:	409a      	lsls	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b06      	cmp	r3, #6
 80046a0:	d824      	bhi.n	80046ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	3b05      	subs	r3, #5
 80046b4:	221f      	movs	r2, #31
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43da      	mvns	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	400a      	ands	r2, r1
 80046c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	4618      	mov	r0, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	3b05      	subs	r3, #5
 80046de:	fa00 f203 	lsl.w	r2, r0, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80046ea:	e04c      	b.n	8004786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	d824      	bhi.n	800473e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	3b23      	subs	r3, #35	@ 0x23
 8004706:	221f      	movs	r2, #31
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43da      	mvns	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	400a      	ands	r2, r1
 8004714:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	4618      	mov	r0, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	3b23      	subs	r3, #35	@ 0x23
 8004730:	fa00 f203 	lsl.w	r2, r0, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
 800473c:	e023      	b.n	8004786 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	3b41      	subs	r3, #65	@ 0x41
 8004750:	221f      	movs	r2, #31
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43da      	mvns	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	400a      	ands	r2, r1
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	4618      	mov	r0, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	3b41      	subs	r3, #65	@ 0x41
 800477a:	fa00 f203 	lsl.w	r2, r0, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004786:	4b22      	ldr	r3, [pc, #136]	@ (8004810 <HAL_ADC_ConfigChannel+0x234>)
 8004788:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a21      	ldr	r2, [pc, #132]	@ (8004814 <HAL_ADC_ConfigChannel+0x238>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d109      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x1cc>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b12      	cmp	r3, #18
 800479a:	d105      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a19      	ldr	r2, [pc, #100]	@ (8004814 <HAL_ADC_ConfigChannel+0x238>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d123      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x21e>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d003      	beq.n	80047c2 <HAL_ADC_ConfigChannel+0x1e6>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b11      	cmp	r3, #17
 80047c0:	d11b      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d111      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047d6:	4b10      	ldr	r3, [pc, #64]	@ (8004818 <HAL_ADC_ConfigChannel+0x23c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a10      	ldr	r2, [pc, #64]	@ (800481c <HAL_ADC_ConfigChannel+0x240>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	0c9a      	lsrs	r2, r3, #18
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047ec:	e002      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f9      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40012300 	.word	0x40012300
 8004814:	40012000 	.word	0x40012000
 8004818:	20000010 	.word	0x20000010
 800481c:	431bde83 	.word	0x431bde83

08004820 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004828:	4b79      	ldr	r3, [pc, #484]	@ (8004a10 <ADC_Init+0x1f0>)
 800482a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	431a      	orrs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004854:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	021a      	lsls	r2, r3, #8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6859      	ldr	r1, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800489a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6899      	ldr	r1, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	4a58      	ldr	r2, [pc, #352]	@ (8004a14 <ADC_Init+0x1f4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d022      	beq.n	80048fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6899      	ldr	r1, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80048e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6899      	ldr	r1, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	e00f      	b.n	800491e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800490c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800491c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0202 	bic.w	r2, r2, #2
 800492c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6899      	ldr	r1, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7e1b      	ldrb	r3, [r3, #24]
 8004938:	005a      	lsls	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01b      	beq.n	8004984 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800495a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800496a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	3b01      	subs	r3, #1
 8004978:	035a      	lsls	r2, r3, #13
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	e007      	b.n	8004994 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004992:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80049a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	051a      	lsls	r2, r3, #20
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80049c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6899      	ldr	r1, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80049d6:	025a      	lsls	r2, r3, #9
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6899      	ldr	r1, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	029a      	lsls	r2, r3, #10
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40012300 	.word	0x40012300
 8004a14:	0f000001 	.word	0x0f000001

08004a18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e031      	b.n	8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a38:	4b19      	ldr	r3, [pc, #100]	@ (8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f023 021f 	bic.w	r2, r3, #31
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]

  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	605a      	str	r2, [r3, #4]

  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40012300 	.word	0x40012300

08004aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ad6:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	60d3      	str	r3, [r2, #12]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af0:	4b04      	ldr	r3, [pc, #16]	@ (8004b04 <__NVIC_GetPriorityGrouping+0x18>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	f003 0307 	and.w	r3, r3, #7
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	db0b      	blt.n	8004b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	f003 021f 	and.w	r2, r3, #31
 8004b20:	4907      	ldr	r1, [pc, #28]	@ (8004b40 <__NVIC_EnableIRQ+0x38>)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2001      	movs	r0, #1
 8004b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000e100 	.word	0xe000e100

08004b44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	db12      	blt.n	8004b7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	f003 021f 	and.w	r2, r3, #31
 8004b5c:	490a      	ldr	r1, [pc, #40]	@ (8004b88 <__NVIC_DisableIRQ+0x44>)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2001      	movs	r0, #1
 8004b66:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6a:	3320      	adds	r3, #32
 8004b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b70:	f3bf 8f4f 	dsb	sy
}
 8004b74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b76:	f3bf 8f6f 	isb	sy
}
 8004b7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	db0a      	blt.n	8004bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	490c      	ldr	r1, [pc, #48]	@ (8004bd8 <__NVIC_SetPriority+0x4c>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	0112      	lsls	r2, r2, #4
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb4:	e00a      	b.n	8004bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4908      	ldr	r1, [pc, #32]	@ (8004bdc <__NVIC_SetPriority+0x50>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	0112      	lsls	r2, r2, #4
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	440b      	add	r3, r1
 8004bca:	761a      	strb	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000e100 	.word	0xe000e100
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f1c3 0307 	rsb	r3, r3, #7
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	bf28      	it	cs
 8004bfe:	2304      	movcs	r3, #4
 8004c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d902      	bls.n	8004c10 <NVIC_EncodePriority+0x30>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3b03      	subs	r3, #3
 8004c0e:	e000      	b.n	8004c12 <NVIC_EncodePriority+0x32>
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	401a      	ands	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c28:	f04f 31ff 	mov.w	r1, #4294967295
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	43d9      	mvns	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	4313      	orrs	r3, r2
         );
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3724      	adds	r7, #36	@ 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004c4c:	f3bf 8f4f 	dsb	sy
}
 8004c50:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <__NVIC_SystemReset+0x24>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004c5a:	4904      	ldr	r1, [pc, #16]	@ (8004c6c <__NVIC_SystemReset+0x24>)
 8004c5c:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <__NVIC_SystemReset+0x28>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c62:	f3bf 8f4f 	dsb	sy
}
 8004c66:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <__NVIC_SystemReset+0x20>
 8004c6c:	e000ed00 	.word	0xe000ed00
 8004c70:	05fa0004 	.word	0x05fa0004

08004c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c84:	d301      	bcc.n	8004c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00f      	b.n	8004caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <SysTick_Config+0x40>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c92:	210f      	movs	r1, #15
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	f7ff ff78 	bl	8004b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <SysTick_Config+0x40>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca2:	4b04      	ldr	r3, [pc, #16]	@ (8004cb4 <SysTick_Config+0x40>)
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	e000e010 	.word	0xe000e010

08004cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff feef 	bl	8004aa4 <__NVIC_SetPriorityGrouping>
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
 8004cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce0:	f7ff ff04 	bl	8004aec <__NVIC_GetPriorityGrouping>
 8004ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f7ff ff78 	bl	8004be0 <NVIC_EncodePriority>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff ff47 	bl	8004b8c <__NVIC_SetPriority>
}
 8004cfe:	bf00      	nop
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fef7 	bl	8004b08 <__NVIC_EnableIRQ>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff07 	bl	8004b44 <__NVIC_DisableIRQ>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004d42:	f7ff ff81 	bl	8004c48 <__NVIC_SystemReset>

08004d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ff90 	bl	8004c74 <SysTick_Config>
 8004d54:	4603      	mov	r3, r0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d6c:	f7ff f9cc 	bl	8004108 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e099      	b.n	8004eb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d9c:	e00f      	b.n	8004dbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d9e:	f7ff f9b3 	bl	8004108 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d908      	bls.n	8004dbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e078      	b.n	8004eb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e8      	bne.n	8004d9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4b38      	ldr	r3, [pc, #224]	@ (8004eb8 <HAL_DMA_Init+0x158>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d107      	bne.n	8004e28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e20:	4313      	orrs	r3, r2
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d117      	bne.n	8004e82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fb43 	bl	80054f0 <DMA_CheckFifoParam>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2240      	movs	r2, #64	@ 0x40
 8004e74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e016      	b.n	8004eb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fafa 	bl	8005484 <DMA_CalcBaseAndBitshift>
 8004e90:	4603      	mov	r3, r0
 8004e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	223f      	movs	r2, #63	@ 0x3f
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	f010803f 	.word	0xf010803f

08004ebc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e050      	b.n	8004f70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d101      	bne.n	8004ede <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
 8004edc:	e048      	b.n	8004f70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2221      	movs	r2, #33	@ 0x21
 8004f1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fab0 	bl	8005484 <DMA_CalcBaseAndBitshift>
 8004f24:	4603      	mov	r3, r0
 8004f26:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f50:	223f      	movs	r2, #63	@ 0x3f
 8004f52:	409a      	lsls	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_DMA_Start+0x20>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e026      	b.n	8004fe6 <HAL_DMA_Start+0x6e>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d115      	bne.n	8004fd8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fa31 	bl	8005428 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e005      	b.n	8004fe4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ffc:	f7ff f884 	bl	8004108 <HAL_GetTick>
 8005000:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d008      	beq.n	8005020 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2280      	movs	r2, #128	@ 0x80
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e052      	b.n	80050c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0216 	bic.w	r2, r2, #22
 800502e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800503e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <HAL_DMA_Abort+0x62>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0208 	bic.w	r2, r2, #8
 800505e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005070:	e013      	b.n	800509a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005072:	f7ff f849 	bl	8004108 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b05      	cmp	r3, #5
 800507e:	d90c      	bls.n	800509a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2203      	movs	r2, #3
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e015      	b.n	80050c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e4      	bne.n	8005072 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ac:	223f      	movs	r2, #63	@ 0x3f
 80050ae:	409a      	lsls	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d004      	beq.n	80050ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2280      	movs	r2, #128	@ 0x80
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e00c      	b.n	8005106 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2205      	movs	r2, #5
 80050f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005120:	4b8e      	ldr	r3, [pc, #568]	@ (800535c <HAL_DMA_IRQHandler+0x248>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a8e      	ldr	r2, [pc, #568]	@ (8005360 <HAL_DMA_IRQHandler+0x24c>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	0a9b      	lsrs	r3, r3, #10
 800512c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800513e:	2208      	movs	r2, #8
 8005140:	409a      	lsls	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01a      	beq.n	8005180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0204 	bic.w	r2, r2, #4
 8005166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516c:	2208      	movs	r2, #8
 800516e:	409a      	lsls	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005178:	f043 0201 	orr.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005184:	2201      	movs	r2, #1
 8005186:	409a      	lsls	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d012      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a2:	2201      	movs	r2, #1
 80051a4:	409a      	lsls	r2, r3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ae:	f043 0202 	orr.w	r2, r3, #2
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	2204      	movs	r2, #4
 80051bc:	409a      	lsls	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d012      	beq.n	80051ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d8:	2204      	movs	r2, #4
 80051da:	409a      	lsls	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e4:	f043 0204 	orr.w	r2, r3, #4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	2210      	movs	r2, #16
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d043      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b00      	cmp	r3, #0
 8005208:	d03c      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520e:	2210      	movs	r2, #16
 8005210:	409a      	lsls	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d018      	beq.n	8005256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d108      	bne.n	8005244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d024      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	4798      	blx	r3
 8005242:	e01f      	b.n	8005284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01b      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
 8005254:	e016      	b.n	8005284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d107      	bne.n	8005274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0208 	bic.w	r2, r2, #8
 8005272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005288:	2220      	movs	r2, #32
 800528a:	409a      	lsls	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 808f 	beq.w	80053b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8087 	beq.w	80053b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052aa:	2220      	movs	r2, #32
 80052ac:	409a      	lsls	r2, r3
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d136      	bne.n	800532c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0216 	bic.w	r2, r2, #22
 80052cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695a      	ldr	r2, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <HAL_DMA_IRQHandler+0x1da>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0208 	bic.w	r2, r2, #8
 80052fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005302:	223f      	movs	r2, #63	@ 0x3f
 8005304:	409a      	lsls	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531e:	2b00      	cmp	r3, #0
 8005320:	d07e      	beq.n	8005420 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
        }
        return;
 800532a:	e079      	b.n	8005420 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01d      	beq.n	8005376 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10d      	bne.n	8005364 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534c:	2b00      	cmp	r3, #0
 800534e:	d031      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
 8005358:	e02c      	b.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
 800535a:	bf00      	nop
 800535c:	20000010 	.word	0x20000010
 8005360:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d023      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
 8005374:	e01e      	b.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10f      	bne.n	80053a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0210 	bic.w	r2, r2, #16
 8005392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d032      	beq.n	8005422 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d022      	beq.n	800540e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2205      	movs	r2, #5
 80053cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d307      	bcc.n	80053fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f2      	bne.n	80053e0 <HAL_DMA_IRQHandler+0x2cc>
 80053fa:	e000      	b.n	80053fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
 800541e:	e000      	b.n	8005422 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005420:	bf00      	nop
    }
  }
}
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005444:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	d108      	bne.n	8005468 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005466:	e007      	b.n	8005478 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	60da      	str	r2, [r3, #12]
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	3b10      	subs	r3, #16
 8005494:	4a14      	ldr	r2, [pc, #80]	@ (80054e8 <DMA_CalcBaseAndBitshift+0x64>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800549e:	4a13      	ldr	r2, [pc, #76]	@ (80054ec <DMA_CalcBaseAndBitshift+0x68>)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d909      	bls.n	80054c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80054c4:	e007      	b.n	80054d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	aaaaaaab 	.word	0xaaaaaaab
 80054ec:	08024fc4 	.word	0x08024fc4

080054f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11f      	bne.n	800554a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d856      	bhi.n	80055be <DMA_CheckFifoParam+0xce>
 8005510:	a201      	add	r2, pc, #4	@ (adr r2, 8005518 <DMA_CheckFifoParam+0x28>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	08005529 	.word	0x08005529
 800551c:	0800553b 	.word	0x0800553b
 8005520:	08005529 	.word	0x08005529
 8005524:	080055bf 	.word	0x080055bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d046      	beq.n	80055c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005538:	e043      	b.n	80055c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005542:	d140      	bne.n	80055c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005548:	e03d      	b.n	80055c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005552:	d121      	bne.n	8005598 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b03      	cmp	r3, #3
 8005558:	d837      	bhi.n	80055ca <DMA_CheckFifoParam+0xda>
 800555a:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <DMA_CheckFifoParam+0x70>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005571 	.word	0x08005571
 8005564:	08005577 	.word	0x08005577
 8005568:	08005571 	.word	0x08005571
 800556c:	08005589 	.word	0x08005589
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
      break;
 8005574:	e030      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d025      	beq.n	80055ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005586:	e022      	b.n	80055ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005590:	d11f      	bne.n	80055d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005596:	e01c      	b.n	80055d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d903      	bls.n	80055a6 <DMA_CheckFifoParam+0xb6>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d003      	beq.n	80055ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055a4:	e018      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
      break;
 80055aa:	e015      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00e      	beq.n	80055d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      break;
 80055bc:	e00b      	b.n	80055d6 <DMA_CheckFifoParam+0xe6>
      break;
 80055be:	bf00      	nop
 80055c0:	e00a      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
      break;
 80055c2:	bf00      	nop
 80055c4:	e008      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
      break;
 80055c6:	bf00      	nop
 80055c8:	e006      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
      break;
 80055ca:	bf00      	nop
 80055cc:	e004      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
      break;
 80055ce:	bf00      	nop
 80055d0:	e002      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80055d2:	bf00      	nop
 80055d4:	e000      	b.n	80055d8 <DMA_CheckFifoParam+0xe8>
      break;
 80055d6:	bf00      	nop
    }
  } 
  
  return status; 
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop

080055e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80055fa:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <HAL_FLASH_Program+0xa0>)
 80055fc:	7e1b      	ldrb	r3, [r3, #24]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_FLASH_Program+0x1e>
 8005602:	2302      	movs	r3, #2
 8005604:	e03b      	b.n	800567e <HAL_FLASH_Program+0x96>
 8005606:	4b20      	ldr	r3, [pc, #128]	@ (8005688 <HAL_FLASH_Program+0xa0>)
 8005608:	2201      	movs	r2, #1
 800560a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800560c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005610:	f000 f87c 	bl	800570c <FLASH_WaitForLastOperation>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d12b      	bne.n	8005676 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005624:	783b      	ldrb	r3, [r7, #0]
 8005626:	4619      	mov	r1, r3
 8005628:	68b8      	ldr	r0, [r7, #8]
 800562a:	f000 f927 	bl	800587c <FLASH_Program_Byte>
 800562e:	e016      	b.n	800565e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d105      	bne.n	8005642 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005636:	883b      	ldrh	r3, [r7, #0]
 8005638:	4619      	mov	r1, r3
 800563a:	68b8      	ldr	r0, [r7, #8]
 800563c:	f000 f8fa 	bl	8005834 <FLASH_Program_HalfWord>
 8005640:	e00d      	b.n	800565e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d105      	bne.n	8005654 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	4619      	mov	r1, r3
 800564c:	68b8      	ldr	r0, [r7, #8]
 800564e:	f000 f8cf 	bl	80057f0 <FLASH_Program_Word>
 8005652:	e004      	b.n	800565e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005658:	68b8      	ldr	r0, [r7, #8]
 800565a:	f000 f897 	bl	800578c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800565e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005662:	f000 f853 	bl	800570c <FLASH_WaitForLastOperation>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800566a:	4b08      	ldr	r3, [pc, #32]	@ (800568c <HAL_FLASH_Program+0xa4>)
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	4a07      	ldr	r2, [pc, #28]	@ (800568c <HAL_FLASH_Program+0xa4>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005676:	4b04      	ldr	r3, [pc, #16]	@ (8005688 <HAL_FLASH_Program+0xa0>)
 8005678:	2200      	movs	r2, #0
 800567a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800567c:	7dfb      	ldrb	r3, [r7, #23]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20001b0c 	.word	0x20001b0c
 800568c:	40023c00 	.word	0x40023c00

08005690 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800569a:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <HAL_FLASH_Unlock+0x38>)
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	da0b      	bge.n	80056ba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80056a2:	4b09      	ldr	r3, [pc, #36]	@ (80056c8 <HAL_FLASH_Unlock+0x38>)
 80056a4:	4a09      	ldr	r2, [pc, #36]	@ (80056cc <HAL_FLASH_Unlock+0x3c>)
 80056a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80056a8:	4b07      	ldr	r3, [pc, #28]	@ (80056c8 <HAL_FLASH_Unlock+0x38>)
 80056aa:	4a09      	ldr	r2, [pc, #36]	@ (80056d0 <HAL_FLASH_Unlock+0x40>)
 80056ac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_FLASH_Unlock+0x38>)
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da01      	bge.n	80056ba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80056ba:	79fb      	ldrb	r3, [r7, #7]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	40023c00 	.word	0x40023c00
 80056cc:	45670123 	.word	0x45670123
 80056d0:	cdef89ab 	.word	0xcdef89ab

080056d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <HAL_FLASH_Lock+0x1c>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	4a04      	ldr	r2, [pc, #16]	@ (80056f0 <HAL_FLASH_Lock+0x1c>)
 80056de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056e2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	40023c00 	.word	0x40023c00

080056f4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80056f8:	4b03      	ldr	r3, [pc, #12]	@ (8005708 <HAL_FLASH_GetError+0x14>)
 80056fa:	69db      	ldr	r3, [r3, #28]
}  
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20001b0c 	.word	0x20001b0c

0800570c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005718:	4b1a      	ldr	r3, [pc, #104]	@ (8005784 <FLASH_WaitForLastOperation+0x78>)
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800571e:	f7fe fcf3 	bl	8004108 <HAL_GetTick>
 8005722:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005724:	e010      	b.n	8005748 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d00c      	beq.n	8005748 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <FLASH_WaitForLastOperation+0x38>
 8005734:	f7fe fce8 	bl	8004108 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d201      	bcs.n	8005748 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e019      	b.n	800577c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005748:	4b0f      	ldr	r3, [pc, #60]	@ (8005788 <FLASH_WaitForLastOperation+0x7c>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e8      	bne.n	8005726 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005754:	4b0c      	ldr	r3, [pc, #48]	@ (8005788 <FLASH_WaitForLastOperation+0x7c>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005760:	4b09      	ldr	r3, [pc, #36]	@ (8005788 <FLASH_WaitForLastOperation+0x7c>)
 8005762:	2201      	movs	r2, #1
 8005764:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005766:	4b08      	ldr	r3, [pc, #32]	@ (8005788 <FLASH_WaitForLastOperation+0x7c>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005772:	f000 f8a5 	bl	80058c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
  
}  
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20001b0c 	.word	0x20001b0c
 8005788:	40023c00 	.word	0x40023c00

0800578c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005798:	4b14      	ldr	r3, [pc, #80]	@ (80057ec <FLASH_Program_DoubleWord+0x60>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	4a13      	ldr	r2, [pc, #76]	@ (80057ec <FLASH_Program_DoubleWord+0x60>)
 800579e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80057a4:	4b11      	ldr	r3, [pc, #68]	@ (80057ec <FLASH_Program_DoubleWord+0x60>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	4a10      	ldr	r2, [pc, #64]	@ (80057ec <FLASH_Program_DoubleWord+0x60>)
 80057aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80057ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057b0:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <FLASH_Program_DoubleWord+0x60>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	4a0d      	ldr	r2, [pc, #52]	@ (80057ec <FLASH_Program_DoubleWord+0x60>)
 80057b6:	f043 0301 	orr.w	r3, r3, #1
 80057ba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80057c2:	f3bf 8f6f 	isb	sy
}
 80057c6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80057c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057cc:	f04f 0200 	mov.w	r2, #0
 80057d0:	f04f 0300 	mov.w	r3, #0
 80057d4:	000a      	movs	r2, r1
 80057d6:	2300      	movs	r3, #0
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	3104      	adds	r1, #4
 80057dc:	4613      	mov	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	40023c00 	.word	0x40023c00

080057f0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <FLASH_Program_Word+0x40>)
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005830 <FLASH_Program_Word+0x40>)
 8005800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005804:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005806:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <FLASH_Program_Word+0x40>)
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	4a09      	ldr	r2, [pc, #36]	@ (8005830 <FLASH_Program_Word+0x40>)
 800580c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005810:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005812:	4b07      	ldr	r3, [pc, #28]	@ (8005830 <FLASH_Program_Word+0x40>)
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	4a06      	ldr	r2, [pc, #24]	@ (8005830 <FLASH_Program_Word+0x40>)
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	601a      	str	r2, [r3, #0]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40023c00 	.word	0x40023c00

08005834 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005840:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <FLASH_Program_HalfWord+0x44>)
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	4a0c      	ldr	r2, [pc, #48]	@ (8005878 <FLASH_Program_HalfWord+0x44>)
 8005846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800584a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800584c:	4b0a      	ldr	r3, [pc, #40]	@ (8005878 <FLASH_Program_HalfWord+0x44>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	4a09      	ldr	r2, [pc, #36]	@ (8005878 <FLASH_Program_HalfWord+0x44>)
 8005852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005856:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005858:	4b07      	ldr	r3, [pc, #28]	@ (8005878 <FLASH_Program_HalfWord+0x44>)
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	4a06      	ldr	r2, [pc, #24]	@ (8005878 <FLASH_Program_HalfWord+0x44>)
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	887a      	ldrh	r2, [r7, #2]
 8005868:	801a      	strh	r2, [r3, #0]
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40023c00 	.word	0x40023c00

0800587c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005888:	4b0c      	ldr	r3, [pc, #48]	@ (80058bc <FLASH_Program_Byte+0x40>)
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	4a0b      	ldr	r2, [pc, #44]	@ (80058bc <FLASH_Program_Byte+0x40>)
 800588e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005894:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <FLASH_Program_Byte+0x40>)
 8005896:	4a09      	ldr	r2, [pc, #36]	@ (80058bc <FLASH_Program_Byte+0x40>)
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800589c:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <FLASH_Program_Byte+0x40>)
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	4a06      	ldr	r2, [pc, #24]	@ (80058bc <FLASH_Program_Byte+0x40>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	78fa      	ldrb	r2, [r7, #3]
 80058ac:	701a      	strb	r2, [r3, #0]
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40023c00 	.word	0x40023c00

080058c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80058c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80058d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	f043 0310 	orr.w	r3, r3, #16
 80058d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 80058da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80058dc:	4b29      	ldr	r3, [pc, #164]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 80058de:	2210      	movs	r2, #16
 80058e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80058e2:	4b28      	ldr	r3, [pc, #160]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80058ee:	4b26      	ldr	r3, [pc, #152]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f043 0308 	orr.w	r3, r3, #8
 80058f6:	4a24      	ldr	r2, [pc, #144]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 80058f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80058fa:	4b22      	ldr	r3, [pc, #136]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 80058fc:	2220      	movs	r2, #32
 80058fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005900:	4b20      	ldr	r3, [pc, #128]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800590c:	4b1e      	ldr	r3, [pc, #120]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f043 0304 	orr.w	r3, r3, #4
 8005914:	4a1c      	ldr	r2, [pc, #112]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 8005916:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005918:	4b1a      	ldr	r3, [pc, #104]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 800591a:	2240      	movs	r2, #64	@ 0x40
 800591c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800591e:	4b19      	ldr	r3, [pc, #100]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800592a:	4b17      	ldr	r3, [pc, #92]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f043 0302 	orr.w	r3, r3, #2
 8005932:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 8005934:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005936:	4b13      	ldr	r3, [pc, #76]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 8005938:	2280      	movs	r2, #128	@ 0x80
 800593a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800593c:	4b11      	ldr	r3, [pc, #68]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005948:	4b0f      	ldr	r3, [pc, #60]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	4a0d      	ldr	r2, [pc, #52]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 8005952:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 8005956:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800595a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800595c:	4b09      	ldr	r3, [pc, #36]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005968:	4b07      	ldr	r3, [pc, #28]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f043 0320 	orr.w	r3, r3, #32
 8005970:	4a05      	ldr	r2, [pc, #20]	@ (8005988 <FLASH_SetErrorCode+0xc8>)
 8005972:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005974:	4b03      	ldr	r3, [pc, #12]	@ (8005984 <FLASH_SetErrorCode+0xc4>)
 8005976:	2202      	movs	r2, #2
 8005978:	60da      	str	r2, [r3, #12]
  }
}
 800597a:	bf00      	nop
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	40023c00 	.word	0x40023c00
 8005988:	20001b0c 	.word	0x20001b0c

0800598c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800599e:	4b31      	ldr	r3, [pc, #196]	@ (8005a64 <HAL_FLASHEx_Erase+0xd8>)
 80059a0:	7e1b      	ldrb	r3, [r3, #24]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_FLASHEx_Erase+0x1e>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e058      	b.n	8005a5c <HAL_FLASHEx_Erase+0xd0>
 80059aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005a64 <HAL_FLASHEx_Erase+0xd8>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059b4:	f7ff feaa 	bl	800570c <FLASH_WaitForLastOperation>
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d148      	bne.n	8005a54 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d115      	bne.n	80059fe <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f000 f844 	bl	8005a6c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059e8:	f7ff fe90 	bl	800570c <FLASH_WaitForLastOperation>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80059f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a68 <HAL_FLASHEx_Erase+0xdc>)
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <HAL_FLASHEx_Erase+0xdc>)
 80059f6:	f023 0304 	bic.w	r3, r3, #4
 80059fa:	6113      	str	r3, [r2, #16]
 80059fc:	e028      	b.n	8005a50 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	e01c      	b.n	8005a40 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	68b8      	ldr	r0, [r7, #8]
 8005a10:	f000 f850 	bl	8005ab4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a18:	f7ff fe78 	bl	800570c <FLASH_WaitForLastOperation>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005a20:	4b11      	ldr	r3, [pc, #68]	@ (8005a68 <HAL_FLASHEx_Erase+0xdc>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	4a10      	ldr	r2, [pc, #64]	@ (8005a68 <HAL_FLASHEx_Erase+0xdc>)
 8005a26:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005a2a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	601a      	str	r2, [r3, #0]
          break;
 8005a38:	e00a      	b.n	8005a50 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4413      	add	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3da      	bcc.n	8005a06 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005a50:	f000 f878 	bl	8005b44 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a54:	4b03      	ldr	r3, [pc, #12]	@ (8005a64 <HAL_FLASHEx_Erase+0xd8>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	761a      	strb	r2, [r3, #24]

  return status;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20001b0c 	.word	0x20001b0c
 8005a68:	40023c00 	.word	0x40023c00

08005a6c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	6039      	str	r1, [r7, #0]
 8005a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005a78:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <FLASH_MassErase+0x44>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab0 <FLASH_MassErase+0x44>)
 8005a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005a84:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <FLASH_MassErase+0x44>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	4a09      	ldr	r2, [pc, #36]	@ (8005ab0 <FLASH_MassErase+0x44>)
 8005a8a:	f043 0304 	orr.w	r3, r3, #4
 8005a8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005a90:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <FLASH_MassErase+0x44>)
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	4a05      	ldr	r2, [pc, #20]	@ (8005ab0 <FLASH_MassErase+0x44>)
 8005a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa0:	6113      	str	r3, [r2, #16]
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40023c00 	.word	0x40023c00

08005ab4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	e010      	b.n	8005af2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d103      	bne.n	8005ade <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005ad6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e009      	b.n	8005af2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d103      	bne.n	8005aec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e002      	b.n	8005af2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005aec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005af0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005af2:	4b13      	ldr	r3, [pc, #76]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	4a12      	ldr	r2, [pc, #72]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005afe:	4b10      	ldr	r3, [pc, #64]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	490f      	ldr	r1, [pc, #60]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005b10:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005b14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005b16:	4b0a      	ldr	r3, [pc, #40]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	4a07      	ldr	r2, [pc, #28]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005b22:	f043 0302 	orr.w	r3, r3, #2
 8005b26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005b28:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	4a04      	ldr	r2, [pc, #16]	@ (8005b40 <FLASH_Erase_Sector+0x8c>)
 8005b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b32:	6113      	str	r3, [r2, #16]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	40023c00 	.word	0x40023c00

08005b44 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005b48:	4b20      	ldr	r3, [pc, #128]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d017      	beq.n	8005b84 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005b54:	4b1d      	ldr	r3, [pc, #116]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b5a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b5e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005b60:	4b1a      	ldr	r3, [pc, #104]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4b17      	ldr	r3, [pc, #92]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a16      	ldr	r2, [pc, #88]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b76:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b78:	4b14      	ldr	r3, [pc, #80]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b82:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005b84:	4b11      	ldr	r3, [pc, #68]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d017      	beq.n	8005bc0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b90:	4b0e      	ldr	r3, [pc, #56]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0d      	ldr	r2, [pc, #52]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b9a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005ba2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	4b08      	ldr	r3, [pc, #32]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a07      	ldr	r2, [pc, #28]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005bae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bb2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bb4:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a04      	ldr	r2, [pc, #16]	@ (8005bcc <FLASH_FlushCaches+0x88>)
 8005bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bbe:	6013      	str	r3, [r2, #0]
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40023c00 	.word	0x40023c00

08005bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	@ 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	e159      	b.n	8005ea0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bec:	2201      	movs	r2, #1
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	f040 8148 	bne.w	8005e9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d005      	beq.n	8005c22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d130      	bne.n	8005c84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c58:	2201      	movs	r2, #1
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4013      	ands	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 0201 	and.w	r2, r3, #1
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d017      	beq.n	8005cc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d123      	bne.n	8005d14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	08da      	lsrs	r2, r3, #3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3208      	adds	r2, #8
 8005cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	220f      	movs	r2, #15
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	08da      	lsrs	r2, r3, #3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3208      	adds	r2, #8
 8005d0e:	69b9      	ldr	r1, [r7, #24]
 8005d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	2203      	movs	r2, #3
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	43db      	mvns	r3, r3
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f003 0203 	and.w	r2, r3, #3
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 80a2 	beq.w	8005e9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	4b57      	ldr	r3, [pc, #348]	@ (8005eb8 <HAL_GPIO_Init+0x2e8>)
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5e:	4a56      	ldr	r2, [pc, #344]	@ (8005eb8 <HAL_GPIO_Init+0x2e8>)
 8005d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d66:	4b54      	ldr	r3, [pc, #336]	@ (8005eb8 <HAL_GPIO_Init+0x2e8>)
 8005d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d72:	4a52      	ldr	r2, [pc, #328]	@ (8005ebc <HAL_GPIO_Init+0x2ec>)
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	3302      	adds	r3, #2
 8005d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	220f      	movs	r2, #15
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4013      	ands	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a49      	ldr	r2, [pc, #292]	@ (8005ec0 <HAL_GPIO_Init+0x2f0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d019      	beq.n	8005dd2 <HAL_GPIO_Init+0x202>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a48      	ldr	r2, [pc, #288]	@ (8005ec4 <HAL_GPIO_Init+0x2f4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_GPIO_Init+0x1fe>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a47      	ldr	r2, [pc, #284]	@ (8005ec8 <HAL_GPIO_Init+0x2f8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00d      	beq.n	8005dca <HAL_GPIO_Init+0x1fa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a46      	ldr	r2, [pc, #280]	@ (8005ecc <HAL_GPIO_Init+0x2fc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d007      	beq.n	8005dc6 <HAL_GPIO_Init+0x1f6>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a45      	ldr	r2, [pc, #276]	@ (8005ed0 <HAL_GPIO_Init+0x300>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_GPIO_Init+0x1f2>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	e008      	b.n	8005dd4 <HAL_GPIO_Init+0x204>
 8005dc2:	2307      	movs	r3, #7
 8005dc4:	e006      	b.n	8005dd4 <HAL_GPIO_Init+0x204>
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e004      	b.n	8005dd4 <HAL_GPIO_Init+0x204>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e002      	b.n	8005dd4 <HAL_GPIO_Init+0x204>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <HAL_GPIO_Init+0x204>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	f002 0203 	and.w	r2, r2, #3
 8005dda:	0092      	lsls	r2, r2, #2
 8005ddc:	4093      	lsls	r3, r2
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005de4:	4935      	ldr	r1, [pc, #212]	@ (8005ebc <HAL_GPIO_Init+0x2ec>)
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	089b      	lsrs	r3, r3, #2
 8005dea:	3302      	adds	r3, #2
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005df2:	4b38      	ldr	r3, [pc, #224]	@ (8005ed4 <HAL_GPIO_Init+0x304>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e16:	4a2f      	ldr	r2, [pc, #188]	@ (8005ed4 <HAL_GPIO_Init+0x304>)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ed4 <HAL_GPIO_Init+0x304>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	43db      	mvns	r3, r3
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e40:	4a24      	ldr	r2, [pc, #144]	@ (8005ed4 <HAL_GPIO_Init+0x304>)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e46:	4b23      	ldr	r3, [pc, #140]	@ (8005ed4 <HAL_GPIO_Init+0x304>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4013      	ands	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed4 <HAL_GPIO_Init+0x304>)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e70:	4b18      	ldr	r3, [pc, #96]	@ (8005ed4 <HAL_GPIO_Init+0x304>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e94:	4a0f      	ldr	r2, [pc, #60]	@ (8005ed4 <HAL_GPIO_Init+0x304>)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	61fb      	str	r3, [r7, #28]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b0f      	cmp	r3, #15
 8005ea4:	f67f aea2 	bls.w	8005bec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	3724      	adds	r7, #36	@ 0x24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40013800 	.word	0x40013800
 8005ec0:	40020000 	.word	0x40020000
 8005ec4:	40020400 	.word	0x40020400
 8005ec8:	40020800 	.word	0x40020800
 8005ecc:	40020c00 	.word	0x40020c00
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40013c00 	.word	0x40013c00

08005ed8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e0bb      	b.n	800606c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	4013      	ands	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	f040 80ab 	bne.w	8006066 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f10:	4a5c      	ldr	r2, [pc, #368]	@ (8006084 <HAL_GPIO_DeInit+0x1ac>)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	089b      	lsrs	r3, r3, #2
 8005f16:	3302      	adds	r3, #2
 8005f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f003 0303 	and.w	r3, r3, #3
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	220f      	movs	r2, #15
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a54      	ldr	r2, [pc, #336]	@ (8006088 <HAL_GPIO_DeInit+0x1b0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d019      	beq.n	8005f6e <HAL_GPIO_DeInit+0x96>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a53      	ldr	r2, [pc, #332]	@ (800608c <HAL_GPIO_DeInit+0x1b4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_GPIO_DeInit+0x92>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a52      	ldr	r2, [pc, #328]	@ (8006090 <HAL_GPIO_DeInit+0x1b8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00d      	beq.n	8005f66 <HAL_GPIO_DeInit+0x8e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a51      	ldr	r2, [pc, #324]	@ (8006094 <HAL_GPIO_DeInit+0x1bc>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d007      	beq.n	8005f62 <HAL_GPIO_DeInit+0x8a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a50      	ldr	r2, [pc, #320]	@ (8006098 <HAL_GPIO_DeInit+0x1c0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d101      	bne.n	8005f5e <HAL_GPIO_DeInit+0x86>
 8005f5a:	2304      	movs	r3, #4
 8005f5c:	e008      	b.n	8005f70 <HAL_GPIO_DeInit+0x98>
 8005f5e:	2307      	movs	r3, #7
 8005f60:	e006      	b.n	8005f70 <HAL_GPIO_DeInit+0x98>
 8005f62:	2303      	movs	r3, #3
 8005f64:	e004      	b.n	8005f70 <HAL_GPIO_DeInit+0x98>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e002      	b.n	8005f70 <HAL_GPIO_DeInit+0x98>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <HAL_GPIO_DeInit+0x98>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	f002 0203 	and.w	r2, r2, #3
 8005f76:	0092      	lsls	r2, r2, #2
 8005f78:	4093      	lsls	r3, r2
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d132      	bne.n	8005fe6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005f80:	4b46      	ldr	r3, [pc, #280]	@ (800609c <HAL_GPIO_DeInit+0x1c4>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	43db      	mvns	r3, r3
 8005f88:	4944      	ldr	r1, [pc, #272]	@ (800609c <HAL_GPIO_DeInit+0x1c4>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005f8e:	4b43      	ldr	r3, [pc, #268]	@ (800609c <HAL_GPIO_DeInit+0x1c4>)
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	4941      	ldr	r1, [pc, #260]	@ (800609c <HAL_GPIO_DeInit+0x1c4>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800609c <HAL_GPIO_DeInit+0x1c4>)
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	493d      	ldr	r1, [pc, #244]	@ (800609c <HAL_GPIO_DeInit+0x1c4>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005faa:	4b3c      	ldr	r3, [pc, #240]	@ (800609c <HAL_GPIO_DeInit+0x1c4>)
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	493a      	ldr	r1, [pc, #232]	@ (800609c <HAL_GPIO_DeInit+0x1c4>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8006084 <HAL_GPIO_DeInit+0x1ac>)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	089b      	lsrs	r3, r3, #2
 8005fce:	3302      	adds	r3, #2
 8005fd0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	482a      	ldr	r0, [pc, #168]	@ (8006084 <HAL_GPIO_DeInit+0x1ac>)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	400a      	ands	r2, r1
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	2103      	movs	r1, #3
 8005ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	08da      	lsrs	r2, r3, #3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3208      	adds	r2, #8
 8006004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	220f      	movs	r2, #15
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43db      	mvns	r3, r3
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	08d2      	lsrs	r2, r2, #3
 800601c:	4019      	ands	r1, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3208      	adds	r2, #8
 8006022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	2103      	movs	r1, #3
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	2101      	movs	r1, #1
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	fa01 f303 	lsl.w	r3, r1, r3
 8006048:	43db      	mvns	r3, r3
 800604a:	401a      	ands	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	2103      	movs	r1, #3
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	401a      	ands	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	3301      	adds	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	f67f af40 	bls.w	8005ef4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40013800 	.word	0x40013800
 8006088:	40020000 	.word	0x40020000
 800608c:	40020400 	.word	0x40020400
 8006090:	40020800 	.word	0x40020800
 8006094:	40020c00 	.word	0x40020c00
 8006098:	40021000 	.word	0x40021000
 800609c:	40013c00 	.word	0x40013c00

080060a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	887b      	ldrh	r3, [r7, #2]
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
 80060bc:	e001      	b.n	80060c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	807b      	strh	r3, [r7, #2]
 80060dc:	4613      	mov	r3, r2
 80060de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060e0:	787b      	ldrb	r3, [r7, #1]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060e6:	887a      	ldrh	r2, [r7, #2]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060ec:	e003      	b.n	80060f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060ee:	887b      	ldrh	r3, [r7, #2]
 80060f0:	041a      	lsls	r2, r3, #16
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	619a      	str	r2, [r3, #24]
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800610e:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	4013      	ands	r3, r2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d006      	beq.n	8006128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800611a:	4a05      	ldr	r2, [pc, #20]	@ (8006130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fd fa3e 	bl	80035a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	40013c00 	.word	0x40013c00

08006134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e12b      	b.n	800639e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fd fb1c 	bl	8003798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	@ 0x24
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006198:	f003 f8f2 	bl	8009380 <HAL_RCC_GetPCLK1Freq>
 800619c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4a81      	ldr	r2, [pc, #516]	@ (80063a8 <HAL_I2C_Init+0x274>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d807      	bhi.n	80061b8 <HAL_I2C_Init+0x84>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a80      	ldr	r2, [pc, #512]	@ (80063ac <HAL_I2C_Init+0x278>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	bf94      	ite	ls
 80061b0:	2301      	movls	r3, #1
 80061b2:	2300      	movhi	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e006      	b.n	80061c6 <HAL_I2C_Init+0x92>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a7d      	ldr	r2, [pc, #500]	@ (80063b0 <HAL_I2C_Init+0x27c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	bf94      	ite	ls
 80061c0:	2301      	movls	r3, #1
 80061c2:	2300      	movhi	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e0e7      	b.n	800639e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4a78      	ldr	r2, [pc, #480]	@ (80063b4 <HAL_I2C_Init+0x280>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	0c9b      	lsrs	r3, r3, #18
 80061d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4a6a      	ldr	r2, [pc, #424]	@ (80063a8 <HAL_I2C_Init+0x274>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d802      	bhi.n	8006208 <HAL_I2C_Init+0xd4>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	3301      	adds	r3, #1
 8006206:	e009      	b.n	800621c <HAL_I2C_Init+0xe8>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800620e:	fb02 f303 	mul.w	r3, r2, r3
 8006212:	4a69      	ldr	r2, [pc, #420]	@ (80063b8 <HAL_I2C_Init+0x284>)
 8006214:	fba2 2303 	umull	r2, r3, r2, r3
 8006218:	099b      	lsrs	r3, r3, #6
 800621a:	3301      	adds	r3, #1
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	430b      	orrs	r3, r1
 8006222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800622e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	495c      	ldr	r1, [pc, #368]	@ (80063a8 <HAL_I2C_Init+0x274>)
 8006238:	428b      	cmp	r3, r1
 800623a:	d819      	bhi.n	8006270 <HAL_I2C_Init+0x13c>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1e59      	subs	r1, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	fbb1 f3f3 	udiv	r3, r1, r3
 800624a:	1c59      	adds	r1, r3, #1
 800624c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006250:	400b      	ands	r3, r1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <HAL_I2C_Init+0x138>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1e59      	subs	r1, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	fbb1 f3f3 	udiv	r3, r1, r3
 8006264:	3301      	adds	r3, #1
 8006266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626a:	e051      	b.n	8006310 <HAL_I2C_Init+0x1dc>
 800626c:	2304      	movs	r3, #4
 800626e:	e04f      	b.n	8006310 <HAL_I2C_Init+0x1dc>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d111      	bne.n	800629c <HAL_I2C_Init+0x168>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1e58      	subs	r0, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	440b      	add	r3, r1
 8006286:	fbb0 f3f3 	udiv	r3, r0, r3
 800628a:	3301      	adds	r3, #1
 800628c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006290:	2b00      	cmp	r3, #0
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	e012      	b.n	80062c2 <HAL_I2C_Init+0x18e>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1e58      	subs	r0, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	0099      	lsls	r1, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80062b2:	3301      	adds	r3, #1
 80062b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_I2C_Init+0x196>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e022      	b.n	8006310 <HAL_I2C_Init+0x1dc>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10e      	bne.n	80062f0 <HAL_I2C_Init+0x1bc>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1e58      	subs	r0, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6859      	ldr	r1, [r3, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	440b      	add	r3, r1
 80062e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062e4:	3301      	adds	r3, #1
 80062e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ee:	e00f      	b.n	8006310 <HAL_I2C_Init+0x1dc>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1e58      	subs	r0, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	0099      	lsls	r1, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	fbb0 f3f3 	udiv	r3, r0, r3
 8006306:	3301      	adds	r3, #1
 8006308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	6809      	ldr	r1, [r1, #0]
 8006314:	4313      	orrs	r3, r2
 8006316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800633e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6911      	ldr	r1, [r2, #16]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68d2      	ldr	r2, [r2, #12]
 800634a:	4311      	orrs	r1, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	430b      	orrs	r3, r1
 8006352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695a      	ldr	r2, [r3, #20]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	000186a0 	.word	0x000186a0
 80063ac:	001e847f 	.word	0x001e847f
 80063b0:	003d08ff 	.word	0x003d08ff
 80063b4:	431bde83 	.word	0x431bde83
 80063b8:	10624dd3 	.word	0x10624dd3

080063bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e021      	b.n	8006412 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	@ 0x24
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fd fa1e 	bl	8003828 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	461a      	mov	r2, r3
 8006428:	460b      	mov	r3, r1
 800642a:	817b      	strh	r3, [r7, #10]
 800642c:	4613      	mov	r3, r2
 800642e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006430:	f7fd fe6a 	bl	8004108 <HAL_GetTick>
 8006434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b20      	cmp	r3, #32
 8006440:	f040 80e0 	bne.w	8006604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2319      	movs	r3, #25
 800644a:	2201      	movs	r2, #1
 800644c:	4970      	ldr	r1, [pc, #448]	@ (8006610 <HAL_I2C_Master_Transmit+0x1f4>)
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fd92 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
 800645c:	e0d3      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_I2C_Master_Transmit+0x50>
 8006468:	2302      	movs	r3, #2
 800646a:	e0cc      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d007      	beq.n	8006492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0201 	orr.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2221      	movs	r2, #33	@ 0x21
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2210      	movs	r2, #16
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	893a      	ldrh	r2, [r7, #8]
 80064c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a50      	ldr	r2, [pc, #320]	@ (8006614 <HAL_I2C_Master_Transmit+0x1f8>)
 80064d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064d4:	8979      	ldrh	r1, [r7, #10]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fbfc 	bl	8006cd8 <I2C_MasterRequestWrite>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e08d      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006500:	e066      	b.n	80065d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fe50 	bl	80071ac <I2C_WaitOnTXEFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00d      	beq.n	800652e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006516:	2b04      	cmp	r3, #4
 8006518:	d107      	bne.n	800652a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e06b      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	781a      	ldrb	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b04      	cmp	r3, #4
 800656a:	d11b      	bne.n	80065a4 <HAL_I2C_Master_Transmit+0x188>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d017      	beq.n	80065a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	6a39      	ldr	r1, [r7, #32]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fe47 	bl	800723c <I2C_WaitOnBTFFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00d      	beq.n	80065d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d107      	bne.n	80065cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e01a      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d194      	bne.n	8006502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	00100002 	.word	0x00100002
 8006614:	ffff0000 	.word	0xffff0000

08006618 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	@ 0x30
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	461a      	mov	r2, r3
 8006624:	460b      	mov	r3, r1
 8006626:	817b      	strh	r3, [r7, #10]
 8006628:	4613      	mov	r3, r2
 800662a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800662c:	f7fd fd6c 	bl	8004108 <HAL_GetTick>
 8006630:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b20      	cmp	r3, #32
 800663c:	f040 8217 	bne.w	8006a6e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2319      	movs	r3, #25
 8006646:	2201      	movs	r2, #1
 8006648:	497c      	ldr	r1, [pc, #496]	@ (800683c <HAL_I2C_Master_Receive+0x224>)
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fc94 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006656:	2302      	movs	r3, #2
 8006658:	e20a      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_I2C_Master_Receive+0x50>
 8006664:	2302      	movs	r3, #2
 8006666:	e203      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d007      	beq.n	800668e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800669c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2222      	movs	r2, #34	@ 0x22
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2210      	movs	r2, #16
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	893a      	ldrh	r2, [r7, #8]
 80066be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006840 <HAL_I2C_Master_Receive+0x228>)
 80066ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80066d0:	8979      	ldrh	r1, [r7, #10]
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fb80 	bl	8006ddc <I2C_MasterRequestRead>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e1c4      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d113      	bne.n	8006716 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ee:	2300      	movs	r3, #0
 80066f0:	623b      	str	r3, [r7, #32]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	623b      	str	r3, [r7, #32]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	623b      	str	r3, [r7, #32]
 8006702:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e198      	b.n	8006a48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671a:	2b01      	cmp	r3, #1
 800671c:	d11b      	bne.n	8006756 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800672c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e178      	b.n	8006a48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800675a:	2b02      	cmp	r3, #2
 800675c:	d11b      	bne.n	8006796 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800676c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800677c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800677e:	2300      	movs	r3, #0
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	e158      	b.n	8006a48 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067bc:	e144      	b.n	8006a48 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	f200 80f1 	bhi.w	80069aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d123      	bne.n	8006818 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fd79 	bl	80072cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e145      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006816:	e117      	b.n	8006a48 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800681c:	2b02      	cmp	r3, #2
 800681e:	d14e      	bne.n	80068be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	2200      	movs	r2, #0
 8006828:	4906      	ldr	r1, [pc, #24]	@ (8006844 <HAL_I2C_Master_Receive+0x22c>)
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fba4 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d008      	beq.n	8006848 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e11a      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
 800683a:	bf00      	nop
 800683c:	00100002 	.word	0x00100002
 8006840:	ffff0000 	.word	0xffff0000
 8006844:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691a      	ldr	r2, [r3, #16]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068bc:	e0c4      	b.n	8006a48 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	496c      	ldr	r1, [pc, #432]	@ (8006a78 <HAL_I2C_Master_Receive+0x460>)
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fb55 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0cb      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	2200      	movs	r2, #0
 8006922:	4955      	ldr	r1, [pc, #340]	@ (8006a78 <HAL_I2C_Master_Receive+0x460>)
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fb27 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e09d      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069a8:	e04e      	b.n	8006a48 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 fc8c 	bl	80072cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e058      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d124      	bne.n	8006a48 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d107      	bne.n	8006a16 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a14:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f47f aeb6 	bne.w	80067be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e000      	b.n	8006a70 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006a6e:	2302      	movs	r3, #2
  }
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3728      	adds	r7, #40	@ 0x28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	00010004 	.word	0x00010004

08006a7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	@ 0x28
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006a8c:	f7fd fb3c 	bl	8004108 <HAL_GetTick>
 8006a90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	f040 8111 	bne.w	8006cc6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	2319      	movs	r3, #25
 8006aaa:	2201      	movs	r2, #1
 8006aac:	4988      	ldr	r1, [pc, #544]	@ (8006cd0 <HAL_I2C_IsDeviceReady+0x254>)
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fa62 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
 8006abc:	e104      	b.n	8006cc8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_I2C_IsDeviceReady+0x50>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e0fd      	b.n	8006cc8 <HAL_I2C_IsDeviceReady+0x24c>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d007      	beq.n	8006af2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0201 	orr.w	r2, r2, #1
 8006af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2224      	movs	r2, #36	@ 0x24
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a70      	ldr	r2, [pc, #448]	@ (8006cd4 <HAL_I2C_IsDeviceReady+0x258>)
 8006b14:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 fa20 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00d      	beq.n	8006b5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b4c:	d103      	bne.n	8006b56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b54:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e0b6      	b.n	8006cc8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b5a:	897b      	ldrh	r3, [r7, #10]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006b6a:	f7fd facd 	bl	8004108 <HAL_GetTick>
 8006b6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	bf0c      	ite	eq
 8006b7e:	2301      	moveq	r3, #1
 8006b80:	2300      	movne	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b94:	bf0c      	ite	eq
 8006b96:	2301      	moveq	r3, #1
 8006b98:	2300      	movne	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006b9e:	e025      	b.n	8006bec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ba0:	f7fd fab2 	bl	8004108 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d302      	bcc.n	8006bb6 <HAL_I2C_IsDeviceReady+0x13a>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	22a0      	movs	r2, #160	@ 0xa0
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	bf0c      	ite	eq
 8006bcc:	2301      	moveq	r3, #1
 8006bce:	2300      	movne	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2ba0      	cmp	r3, #160	@ 0xa0
 8006bf6:	d005      	beq.n	8006c04 <HAL_I2C_IsDeviceReady+0x188>
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <HAL_I2C_IsDeviceReady+0x188>
 8006bfe:	7dbb      	ldrb	r3, [r7, #22]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0cd      	beq.n	8006ba0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d129      	bne.n	8006c6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	2319      	movs	r3, #25
 8006c46:	2201      	movs	r2, #1
 8006c48:	4921      	ldr	r1, [pc, #132]	@ (8006cd0 <HAL_I2C_IsDeviceReady+0x254>)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f994 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e036      	b.n	8006cc8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e02c      	b.n	8006cc8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2319      	movs	r3, #25
 8006c8e:	2201      	movs	r2, #1
 8006c90:	490f      	ldr	r1, [pc, #60]	@ (8006cd0 <HAL_I2C_IsDeviceReady+0x254>)
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f970 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e012      	b.n	8006cc8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	f4ff af32 	bcc.w	8006b16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
  }
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	00100002 	.word	0x00100002
 8006cd4:	ffff0000 	.word	0xffff0000

08006cd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d006      	beq.n	8006d02 <I2C_MasterRequestWrite+0x2a>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d003      	beq.n	8006d02 <I2C_MasterRequestWrite+0x2a>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d00:	d108      	bne.n	8006d14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e00b      	b.n	8006d2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d18:	2b12      	cmp	r3, #18
 8006d1a:	d107      	bne.n	8006d2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f91d 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00d      	beq.n	8006d60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d52:	d103      	bne.n	8006d5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e035      	b.n	8006dcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d68:	d108      	bne.n	8006d7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d78:	611a      	str	r2, [r3, #16]
 8006d7a:	e01b      	b.n	8006db4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d7c:	897b      	ldrh	r3, [r7, #10]
 8006d7e:	11db      	asrs	r3, r3, #7
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	f003 0306 	and.w	r3, r3, #6
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f063 030f 	orn	r3, r3, #15
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	490e      	ldr	r1, [pc, #56]	@ (8006dd4 <I2C_MasterRequestWrite+0xfc>)
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 f966 	bl	800706c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e010      	b.n	8006dcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006daa:	897b      	ldrh	r3, [r7, #10]
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4907      	ldr	r1, [pc, #28]	@ (8006dd8 <I2C_MasterRequestWrite+0x100>)
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f956 	bl	800706c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	00010008 	.word	0x00010008
 8006dd8:	00010002 	.word	0x00010002

08006ddc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	460b      	mov	r3, r1
 8006dea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e00:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d006      	beq.n	8006e16 <I2C_MasterRequestRead+0x3a>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d003      	beq.n	8006e16 <I2C_MasterRequestRead+0x3a>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e14:	d108      	bne.n	8006e28 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e00b      	b.n	8006e40 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2c:	2b11      	cmp	r3, #17
 8006e2e:	d107      	bne.n	8006e40 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 f893 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00d      	beq.n	8006e74 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e66:	d103      	bne.n	8006e70 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e079      	b.n	8006f68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e7c:	d108      	bne.n	8006e90 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e7e:	897b      	ldrh	r3, [r7, #10]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	611a      	str	r2, [r3, #16]
 8006e8e:	e05f      	b.n	8006f50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e90:	897b      	ldrh	r3, [r7, #10]
 8006e92:	11db      	asrs	r3, r3, #7
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	f003 0306 	and.w	r3, r3, #6
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f063 030f 	orn	r3, r3, #15
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4930      	ldr	r1, [pc, #192]	@ (8006f70 <I2C_MasterRequestRead+0x194>)
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f8dc 	bl	800706c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e054      	b.n	8006f68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ebe:	897b      	ldrh	r3, [r7, #10]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	4929      	ldr	r1, [pc, #164]	@ (8006f74 <I2C_MasterRequestRead+0x198>)
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f8cc 	bl	800706c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e044      	b.n	8006f68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f831 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00d      	beq.n	8006f38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f2a:	d103      	bne.n	8006f34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f32:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e017      	b.n	8006f68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f38:	897b      	ldrh	r3, [r7, #10]
 8006f3a:	11db      	asrs	r3, r3, #7
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0306 	and.w	r3, r3, #6
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f063 030e 	orn	r3, r3, #14
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4907      	ldr	r1, [pc, #28]	@ (8006f74 <I2C_MasterRequestRead+0x198>)
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f888 	bl	800706c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	00010008 	.word	0x00010008
 8006f74:	00010002 	.word	0x00010002

08006f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f88:	e048      	b.n	800701c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d044      	beq.n	800701c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f92:	f7fd f8b9 	bl	8004108 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d302      	bcc.n	8006fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d139      	bne.n	800701c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	0c1b      	lsrs	r3, r3, #16
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d10d      	bne.n	8006fce <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	43da      	mvns	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bf0c      	ite	eq
 8006fc4:	2301      	moveq	r3, #1
 8006fc6:	2300      	movne	r3, #0
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	e00c      	b.n	8006fe8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	43da      	mvns	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf0c      	ite	eq
 8006fe0:	2301      	moveq	r3, #1
 8006fe2:	2300      	movne	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d116      	bne.n	800701c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007008:	f043 0220 	orr.w	r2, r3, #32
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e023      	b.n	8007064 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	0c1b      	lsrs	r3, r3, #16
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d10d      	bne.n	8007042 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	43da      	mvns	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4013      	ands	r3, r2
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	bf0c      	ite	eq
 8007038:	2301      	moveq	r3, #1
 800703a:	2300      	movne	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	e00c      	b.n	800705c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	43da      	mvns	r2, r3
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	4013      	ands	r3, r2
 800704e:	b29b      	uxth	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	bf0c      	ite	eq
 8007054:	2301      	moveq	r3, #1
 8007056:	2300      	movne	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	429a      	cmp	r2, r3
 8007060:	d093      	beq.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800707a:	e071      	b.n	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800708a:	d123      	bne.n	80070d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800709a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80070a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c0:	f043 0204 	orr.w	r2, r3, #4
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e067      	b.n	80071a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070da:	d041      	beq.n	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070dc:	f7fd f814 	bl	8004108 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d302      	bcc.n	80070f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d136      	bne.n	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	0c1b      	lsrs	r3, r3, #16
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d10c      	bne.n	8007116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	43da      	mvns	r2, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4013      	ands	r3, r2
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	bf14      	ite	ne
 800710e:	2301      	movne	r3, #1
 8007110:	2300      	moveq	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	e00b      	b.n	800712e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	43da      	mvns	r2, r3
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	4013      	ands	r3, r2
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d016      	beq.n	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	f043 0220 	orr.w	r2, r3, #32
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e021      	b.n	80071a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	0c1b      	lsrs	r3, r3, #16
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b01      	cmp	r3, #1
 8007168:	d10c      	bne.n	8007184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	43da      	mvns	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4013      	ands	r3, r2
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	bf14      	ite	ne
 800717c:	2301      	movne	r3, #1
 800717e:	2300      	moveq	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	e00b      	b.n	800719c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	43da      	mvns	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4013      	ands	r3, r2
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2301      	movne	r3, #1
 8007198:	2300      	moveq	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	f47f af6d 	bne.w	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071b8:	e034      	b.n	8007224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f8e3 	bl	8007386 <I2C_IsAcknowledgeFailed>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e034      	b.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d028      	beq.n	8007224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d2:	f7fc ff99 	bl	8004108 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d302      	bcc.n	80071e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d11d      	bne.n	8007224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f2:	2b80      	cmp	r3, #128	@ 0x80
 80071f4:	d016      	beq.n	8007224 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007210:	f043 0220 	orr.w	r2, r3, #32
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e007      	b.n	8007234 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722e:	2b80      	cmp	r3, #128	@ 0x80
 8007230:	d1c3      	bne.n	80071ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007248:	e034      	b.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f89b 	bl	8007386 <I2C_IsAcknowledgeFailed>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e034      	b.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d028      	beq.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007262:	f7fc ff51 	bl	8004108 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	d302      	bcc.n	8007278 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11d      	bne.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	2b04      	cmp	r3, #4
 8007284:	d016      	beq.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2220      	movs	r2, #32
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a0:	f043 0220 	orr.w	r2, r3, #32
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e007      	b.n	80072c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d1c3      	bne.n	800724a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072d8:	e049      	b.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b10      	cmp	r3, #16
 80072e6:	d119      	bne.n	800731c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0210 	mvn.w	r2, #16
 80072f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e030      	b.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731c:	f7fc fef4 	bl	8004108 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	429a      	cmp	r2, r3
 800732a:	d302      	bcc.n	8007332 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d11d      	bne.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733c:	2b40      	cmp	r3, #64	@ 0x40
 800733e:	d016      	beq.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e007      	b.n	800737e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007378:	2b40      	cmp	r3, #64	@ 0x40
 800737a:	d1ae      	bne.n	80072da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739c:	d11b      	bne.n	80073d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	f043 0204 	orr.w	r2, r3, #4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e034      	b.n	8007460 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80073fe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007408:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6852      	ldr	r2, [r2, #4]
 8007412:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6892      	ldr	r2, [r2, #8]
 800741c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800741e:	f7fc fe73 	bl	8004108 <HAL_GetTick>
 8007422:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007424:	e00f      	b.n	8007446 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007426:	f7fc fe6f 	bl	8004108 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b31      	cmp	r3, #49	@ 0x31
 8007432:	d908      	bls.n	8007446 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e00c      	b.n	8007460 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e8      	bne.n	8007426 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800745c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007478:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af02      	add	r7, sp, #8
 800748e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e101      	b.n	800769e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f015 fe0d 	bl	801d0d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2203      	movs	r2, #3
 80074be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074c8:	d102      	bne.n	80074d0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f006 fd4e 	bl	800df76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	7c1a      	ldrb	r2, [r3, #16]
 80074e2:	f88d 2000 	strb.w	r2, [sp]
 80074e6:	3304      	adds	r3, #4
 80074e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074ea:	f006 fc2d 	bl	800dd48 <USB_CoreInit>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0ce      	b.n	800769e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f006 fd46 	bl	800df98 <USB_SetCurrentMode>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e0bf      	b.n	800769e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
 8007522:	e04a      	b.n	80075ba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007524:	7bfa      	ldrb	r2, [r7, #15]
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	3315      	adds	r3, #21
 8007534:	2201      	movs	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007538:	7bfa      	ldrb	r2, [r7, #15]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	3314      	adds	r3, #20
 8007548:	7bfa      	ldrb	r2, [r7, #15]
 800754a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800754c:	7bfa      	ldrb	r2, [r7, #15]
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	b298      	uxth	r0, r3
 8007552:	6879      	ldr	r1, [r7, #4]
 8007554:	4613      	mov	r3, r2
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	440b      	add	r3, r1
 800755e:	332e      	adds	r3, #46	@ 0x2e
 8007560:	4602      	mov	r2, r0
 8007562:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007564:	7bfa      	ldrb	r2, [r7, #15]
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	3318      	adds	r3, #24
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007578:	7bfa      	ldrb	r2, [r7, #15]
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	331c      	adds	r3, #28
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800758c:	7bfa      	ldrb	r2, [r7, #15]
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	3320      	adds	r3, #32
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80075a0:	7bfa      	ldrb	r2, [r7, #15]
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	4613      	mov	r3, r2
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	3324      	adds	r3, #36	@ 0x24
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	3301      	adds	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	7bfa      	ldrb	r2, [r7, #15]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d3af      	bcc.n	8007524 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075c4:	2300      	movs	r3, #0
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	e044      	b.n	8007654 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80075ca:	7bfa      	ldrb	r2, [r7, #15]
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	4613      	mov	r3, r2
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80075dc:	2200      	movs	r2, #0
 80075de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075e0:	7bfa      	ldrb	r2, [r7, #15]
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80075f2:	7bfa      	ldrb	r2, [r7, #15]
 80075f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075f6:	7bfa      	ldrb	r2, [r7, #15]
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800760c:	7bfa      	ldrb	r2, [r7, #15]
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4613      	mov	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007622:	7bfa      	ldrb	r2, [r7, #15]
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007638:	7bfa      	ldrb	r2, [r7, #15]
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	3301      	adds	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	791b      	ldrb	r3, [r3, #4]
 8007658:	7bfa      	ldrb	r2, [r7, #15]
 800765a:	429a      	cmp	r2, r3
 800765c:	d3b5      	bcc.n	80075ca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7c1a      	ldrb	r2, [r3, #16]
 8007666:	f88d 2000 	strb.w	r2, [sp]
 800766a:	3304      	adds	r3, #4
 800766c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800766e:	f006 fcdf 	bl	800e030 <USB_DevInit>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e00c      	b.n	800769e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f007 fd72 	bl	800f180 <USB_DevDisconnect>

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e015      	b.n	80076e4 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2203      	movs	r2, #3
 80076bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f007 fcc5 	bl	800f054 <USB_StopDevice>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e007      	b.n	80076e4 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f015 fd51 	bl	801d17c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_PCD_Start+0x1c>
 8007704:	2302      	movs	r3, #2
 8007706:	e022      	b.n	800774e <HAL_PCD_Start+0x62>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d009      	beq.n	8007730 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007720:	2b01      	cmp	r3, #1
 8007722:	d105      	bne.n	8007730 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007728:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4618      	mov	r0, r3
 8007736:	f006 fc0d 	bl	800df54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f007 fcfd 	bl	800f13e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_PCD_Stop+0x1c>
 800776e:	2302      	movs	r3, #2
 8007770:	e028      	b.n	80077c4 <HAL_PCD_Stop+0x6e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f006 fbf9 	bl	800df76 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f007 fcf9 	bl	800f180 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2110      	movs	r1, #16
 8007794:	4618      	mov	r0, r3
 8007796:	f006 fdaf 	bl	800e2f8 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d105      	bne.n	80077ba <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80077cc:	b590      	push	{r4, r7, lr}
 80077ce:	b08d      	sub	sp, #52	@ 0x34
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f007 fd80 	bl	800f2e8 <USB_GetMode>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 848c 	bne.w	8008108 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f007 fce4 	bl	800f1c2 <USB_ReadInterrupts>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8482 	beq.w	8008106 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	0a1b      	lsrs	r3, r3, #8
 800780c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f007 fcd1 	bl	800f1c2 <USB_ReadInterrupts>
 8007820:	4603      	mov	r3, r0
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	d107      	bne.n	800783a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695a      	ldr	r2, [r3, #20]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f002 0202 	and.w	r2, r2, #2
 8007838:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f007 fcbf 	bl	800f1c2 <USB_ReadInterrupts>
 8007844:	4603      	mov	r3, r0
 8007846:	f003 0310 	and.w	r3, r3, #16
 800784a:	2b10      	cmp	r3, #16
 800784c:	d161      	bne.n	8007912 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699a      	ldr	r2, [r3, #24]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0210 	bic.w	r2, r2, #16
 800785c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f003 020f 	and.w	r2, r3, #15
 800786a:	4613      	mov	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	3304      	adds	r3, #4
 800787c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	0c5b      	lsrs	r3, r3, #17
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	2b02      	cmp	r3, #2
 8007888:	d124      	bne.n	80078d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007890:	4013      	ands	r3, r2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d035      	beq.n	8007902 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	091b      	lsrs	r3, r3, #4
 800789e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80078a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	461a      	mov	r2, r3
 80078a8:	6a38      	ldr	r0, [r7, #32]
 80078aa:	f007 faa7 	bl	800edfc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	091b      	lsrs	r3, r3, #4
 80078b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ba:	441a      	add	r2, r3
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	695a      	ldr	r2, [r3, #20]
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	091b      	lsrs	r3, r3, #4
 80078c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078cc:	441a      	add	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	615a      	str	r2, [r3, #20]
 80078d2:	e016      	b.n	8007902 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	0c5b      	lsrs	r3, r3, #17
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	2b06      	cmp	r3, #6
 80078de:	d110      	bne.n	8007902 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078e6:	2208      	movs	r2, #8
 80078e8:	4619      	mov	r1, r3
 80078ea:	6a38      	ldr	r0, [r7, #32]
 80078ec:	f007 fa86 	bl	800edfc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	091b      	lsrs	r3, r3, #4
 80078f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078fc:	441a      	add	r2, r3
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	699a      	ldr	r2, [r3, #24]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 0210 	orr.w	r2, r2, #16
 8007910:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f007 fc53 	bl	800f1c2 <USB_ReadInterrupts>
 800791c:	4603      	mov	r3, r0
 800791e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007922:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007926:	f040 80a7 	bne.w	8007a78 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f007 fc58 	bl	800f1e8 <USB_ReadDevAllOutEpInterrupt>
 8007938:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800793a:	e099      	b.n	8007a70 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 808e 	beq.w	8007a64 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f007 fc7c 	bl	800f250 <USB_ReadDevOutEPInterrupt>
 8007958:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00c      	beq.n	800797e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007970:	461a      	mov	r2, r3
 8007972:	2301      	movs	r3, #1
 8007974:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007976:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fecf 	bl	800871c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f003 0308 	and.w	r3, r3, #8
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00c      	beq.n	80079a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007994:	461a      	mov	r2, r3
 8007996:	2308      	movs	r3, #8
 8007998:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800799a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 ffa5 	bl	80088ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d008      	beq.n	80079be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b8:	461a      	mov	r2, r3
 80079ba:	2310      	movs	r3, #16
 80079bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d030      	beq.n	8007a2a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d0:	2b80      	cmp	r3, #128	@ 0x80
 80079d2:	d109      	bne.n	80079e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	69fa      	ldr	r2, [r7, #28]
 80079de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80079e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80079e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ea:	4613      	mov	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	3304      	adds	r3, #4
 80079fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	78db      	ldrb	r3, [r3, #3]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d108      	bne.n	8007a18 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f015 fc84 	bl	801d320 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a24:	461a      	mov	r2, r3
 8007a26:	2302      	movs	r3, #2
 8007a28:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d008      	beq.n	8007a46 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a40:	461a      	mov	r2, r3
 8007a42:	2320      	movs	r3, #32
 8007a44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d009      	beq.n	8007a64 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a62:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a66:	3301      	adds	r3, #1
 8007a68:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f47f af62 	bne.w	800793c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f007 fba0 	bl	800f1c2 <USB_ReadInterrupts>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a8c:	f040 80db 	bne.w	8007c46 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f007 fbc1 	bl	800f21c <USB_ReadDevAllInEpInterrupt>
 8007a9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007aa0:	e0cd      	b.n	8007c3e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 80c2 	beq.w	8007c32 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f007 fbe7 	bl	800f28c <USB_ReadDevInEPInterrupt>
 8007abe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d057      	beq.n	8007b7a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	69f9      	ldr	r1, [r7, #28]
 8007ae6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007aea:	4013      	ands	r3, r2
 8007aec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007afa:	461a      	mov	r2, r3
 8007afc:	2301      	movs	r3, #1
 8007afe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	799b      	ldrb	r3, [r3, #6]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d132      	bne.n	8007b6e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	3320      	adds	r3, #32
 8007b18:	6819      	ldr	r1, [r3, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1e:	4613      	mov	r3, r2
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4403      	add	r3, r0
 8007b28:	331c      	adds	r3, #28
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4419      	add	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b32:	4613      	mov	r3, r2
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4403      	add	r3, r0
 8007b3c:	3320      	adds	r3, #32
 8007b3e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d113      	bne.n	8007b6e <HAL_PCD_IRQHandler+0x3a2>
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	3324      	adds	r3, #36	@ 0x24
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d108      	bne.n	8007b6e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b66:	461a      	mov	r2, r3
 8007b68:	2101      	movs	r1, #1
 8007b6a:	f007 fbef 	bl	800f34c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f015 fb4e 	bl	801d216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b90:	461a      	mov	r2, r3
 8007b92:	2308      	movs	r3, #8
 8007b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d008      	beq.n	8007bb2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bac:	461a      	mov	r2, r3
 8007bae:	2310      	movs	r3, #16
 8007bb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2340      	movs	r3, #64	@ 0x40
 8007bcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d023      	beq.n	8007c20 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007bd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bda:	6a38      	ldr	r0, [r7, #32]
 8007bdc:	f006 fb8c 	bl	800e2f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007be2:	4613      	mov	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	4413      	add	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	3310      	adds	r3, #16
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	4413      	add	r3, r2
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	78db      	ldrb	r3, [r3, #3]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d108      	bne.n	8007c0e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f015 fb9b 	bl	801d344 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007c2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fce8 	bl	8008602 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	3301      	adds	r3, #1
 8007c36:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f47f af2e 	bne.w	8007aa2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f007 fab9 	bl	800f1c2 <USB_ReadInterrupts>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c5a:	d122      	bne.n	8007ca2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
 8007c6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d108      	bne.n	8007c8c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007c82:	2100      	movs	r1, #0
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fecf 	bl	8008a28 <HAL_PCDEx_LPM_Callback>
 8007c8a:	e002      	b.n	8007c92 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f015 fb39 	bl	801d304 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695a      	ldr	r2, [r3, #20]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f007 fa8b 	bl	800f1c2 <USB_ReadInterrupts>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cb6:	d112      	bne.n	8007cde <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d102      	bne.n	8007cce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f015 faf5 	bl	801d2b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695a      	ldr	r2, [r3, #20]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007cdc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f007 fa6d 	bl	800f1c2 <USB_ReadInterrupts>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf2:	f040 80b7 	bne.w	8007e64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d04:	f023 0301 	bic.w	r3, r3, #1
 8007d08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2110      	movs	r1, #16
 8007d10:	4618      	mov	r0, r3
 8007d12:	f006 faf1 	bl	800e2f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d16:	2300      	movs	r3, #0
 8007d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d1a:	e046      	b.n	8007daa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d28:	461a      	mov	r2, r3
 8007d2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d74:	0151      	lsls	r1, r2, #5
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	440a      	add	r2, r1
 8007d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d94:	0151      	lsls	r1, r2, #5
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	440a      	add	r2, r1
 8007d9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007da2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	3301      	adds	r3, #1
 8007da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	791b      	ldrb	r3, [r3, #4]
 8007dae:	461a      	mov	r2, r3
 8007db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d3b2      	bcc.n	8007d1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007dc4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007dc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7bdb      	ldrb	r3, [r3, #15]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d016      	beq.n	8007e00 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007de2:	f043 030b 	orr.w	r3, r3, #11
 8007de6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df2:	69fa      	ldr	r2, [r7, #28]
 8007df4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007df8:	f043 030b 	orr.w	r3, r3, #11
 8007dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8007dfe:	e015      	b.n	8007e2c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	69fa      	ldr	r2, [r7, #28]
 8007e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007e12:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007e16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e26:	f043 030b 	orr.w	r3, r3, #11
 8007e2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f007 fa7c 	bl	800f34c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695a      	ldr	r2, [r3, #20]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f007 f9aa 	bl	800f1c2 <USB_ReadInterrupts>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e78:	d123      	bne.n	8007ec2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f007 fa40 	bl	800f304 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f006 faae 	bl	800e3ea <USB_GetDevSpeed>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	461a      	mov	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681c      	ldr	r4, [r3, #0]
 8007e9a:	f001 fa65 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 8007e9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f005 ffb2 	bl	800de10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f015 f9da 	bl	801d266 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695a      	ldr	r2, [r3, #20]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f007 f97b 	bl	800f1c2 <USB_ReadInterrupts>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d10a      	bne.n	8007eec <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f015 f9b7 	bl	801d24a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695a      	ldr	r2, [r3, #20]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f002 0208 	and.w	r2, r2, #8
 8007eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f007 f966 	bl	800f1c2 <USB_ReadInterrupts>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007efc:	2b80      	cmp	r3, #128	@ 0x80
 8007efe:	d123      	bne.n	8007f48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f10:	e014      	b.n	8007f3c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f16:	4613      	mov	r3, r2
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d105      	bne.n	8007f36 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fb08 	bl	8008546 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	3301      	adds	r3, #1
 8007f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	791b      	ldrb	r3, [r3, #4]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d3e4      	bcc.n	8007f12 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f007 f938 	bl	800f1c2 <USB_ReadInterrupts>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5c:	d13c      	bne.n	8007fd8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f5e:	2301      	movs	r3, #1
 8007f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f62:	e02b      	b.n	8007fbc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f78:	4613      	mov	r3, r2
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	440b      	add	r3, r1
 8007f82:	3318      	adds	r3, #24
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d115      	bne.n	8007fb6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007f8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da12      	bge.n	8007fb6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f94:	4613      	mov	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	3317      	adds	r3, #23
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fac8 	bl	8008546 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	3301      	adds	r3, #1
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	791b      	ldrb	r3, [r3, #4]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d3cd      	bcc.n	8007f64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	695a      	ldr	r2, [r3, #20]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f007 f8f0 	bl	800f1c2 <USB_ReadInterrupts>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fec:	d156      	bne.n	800809c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007fee:	2301      	movs	r3, #1
 8007ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ff2:	e045      	b.n	8008080 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008008:	4613      	mov	r3, r2
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d12e      	bne.n	800807a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800801c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800801e:	2b00      	cmp	r3, #0
 8008020:	da2b      	bge.n	800807a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800802e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008032:	429a      	cmp	r2, r3
 8008034:	d121      	bne.n	800807a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800803a:	4613      	mov	r3, r2
 800803c:	00db      	lsls	r3, r3, #3
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008048:	2201      	movs	r2, #1
 800804a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	69fa      	ldr	r2, [r7, #28]
 800806e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008076:	6053      	str	r3, [r2, #4]
            break;
 8008078:	e008      	b.n	800808c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	3301      	adds	r3, #1
 800807e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	791b      	ldrb	r3, [r3, #4]
 8008084:	461a      	mov	r2, r3
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	4293      	cmp	r3, r2
 800808a:	d3b3      	bcc.n	8007ff4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695a      	ldr	r2, [r3, #20]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800809a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f007 f88e 	bl	800f1c2 <USB_ReadInterrupts>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80080ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b0:	d10a      	bne.n	80080c8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f015 f958 	bl	801d368 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	695a      	ldr	r2, [r3, #20]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80080c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f007 f878 	bl	800f1c2 <USB_ReadInterrupts>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d115      	bne.n	8008108 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f015 f948 	bl	801d384 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6859      	ldr	r1, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	430a      	orrs	r2, r1
 8008102:	605a      	str	r2, [r3, #4]
 8008104:	e000      	b.n	8008108 <HAL_PCD_IRQHandler+0x93c>
      return;
 8008106:	bf00      	nop
    }
  }
}
 8008108:	3734      	adds	r7, #52	@ 0x34
 800810a:	46bd      	mov	sp, r7
 800810c:	bd90      	pop	{r4, r7, pc}

0800810e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_PCD_SetAddress+0x1a>
 8008124:	2302      	movs	r3, #2
 8008126:	e012      	b.n	800814e <HAL_PCD_SetAddress+0x40>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	4611      	mov	r1, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f006 ffd7 	bl	800f0f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	4608      	mov	r0, r1
 8008160:	4611      	mov	r1, r2
 8008162:	461a      	mov	r2, r3
 8008164:	4603      	mov	r3, r0
 8008166:	70fb      	strb	r3, [r7, #3]
 8008168:	460b      	mov	r3, r1
 800816a:	803b      	strh	r3, [r7, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008178:	2b00      	cmp	r3, #0
 800817a:	da0f      	bge.n	800819c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	f003 020f 	and.w	r2, r3, #15
 8008182:	4613      	mov	r3, r2
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	3310      	adds	r3, #16
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	3304      	adds	r3, #4
 8008192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2201      	movs	r2, #1
 8008198:	705a      	strb	r2, [r3, #1]
 800819a:	e00f      	b.n	80081bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	f003 020f 	and.w	r2, r3, #15
 80081a2:	4613      	mov	r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	3304      	adds	r3, #4
 80081b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80081c8:	883a      	ldrh	r2, [r7, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	78ba      	ldrb	r2, [r7, #2]
 80081d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80081e6:	78bb      	ldrb	r3, [r7, #2]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d102      	bne.n	80081f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <HAL_PCD_EP_Open+0xaa>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e00e      	b.n	800821e <HAL_PCD_EP_Open+0xc8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68f9      	ldr	r1, [r7, #12]
 800820e:	4618      	mov	r0, r3
 8008210:	f006 f910 	bl	800e434 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800821c:	7afb      	ldrb	r3, [r7, #11]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008236:	2b00      	cmp	r3, #0
 8008238:	da0f      	bge.n	800825a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	f003 020f 	and.w	r2, r3, #15
 8008240:	4613      	mov	r3, r2
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	3310      	adds	r3, #16
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	3304      	adds	r3, #4
 8008250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	705a      	strb	r2, [r3, #1]
 8008258:	e00f      	b.n	800827a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800825a:	78fb      	ldrb	r3, [r7, #3]
 800825c:	f003 020f 	and.w	r2, r3, #15
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	4413      	add	r3, r2
 8008270:	3304      	adds	r3, #4
 8008272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	b2da      	uxtb	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800828c:	2b01      	cmp	r3, #1
 800828e:	d101      	bne.n	8008294 <HAL_PCD_EP_Close+0x6e>
 8008290:	2302      	movs	r3, #2
 8008292:	e00e      	b.n	80082b2 <HAL_PCD_EP_Close+0x8c>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68f9      	ldr	r1, [r7, #12]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f006 f94e 	bl	800e544 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b086      	sub	sp, #24
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
 80082c6:	460b      	mov	r3, r1
 80082c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082ca:	7afb      	ldrb	r3, [r7, #11]
 80082cc:	f003 020f 	and.w	r2, r3, #15
 80082d0:	4613      	mov	r3, r2
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	3304      	adds	r3, #4
 80082e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2200      	movs	r2, #0
 80082f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2200      	movs	r2, #0
 80082fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	b2da      	uxtb	r2, r3
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	799b      	ldrb	r3, [r3, #6]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d102      	bne.n	8008316 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	799b      	ldrb	r3, [r3, #6]
 800831e:	461a      	mov	r2, r3
 8008320:	6979      	ldr	r1, [r7, #20]
 8008322:	f006 f9eb 	bl	800e6fc <USB_EPStartXfer>

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	f003 020f 	and.w	r2, r3, #15
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	4613      	mov	r3, r2
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	440b      	add	r3, r1
 800834e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008352:	681b      	ldr	r3, [r3, #0]
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	460b      	mov	r3, r1
 800836e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	f003 020f 	and.w	r2, r3, #15
 8008376:	4613      	mov	r3, r2
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	4413      	add	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	3310      	adds	r3, #16
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	3304      	adds	r3, #4
 8008386:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2200      	movs	r2, #0
 8008398:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2201      	movs	r2, #1
 800839e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	f003 030f 	and.w	r3, r3, #15
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	799b      	ldrb	r3, [r3, #6]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d102      	bne.n	80083ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6818      	ldr	r0, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	799b      	ldrb	r3, [r3, #6]
 80083c2:	461a      	mov	r2, r3
 80083c4:	6979      	ldr	r1, [r7, #20]
 80083c6:	f006 f999 	bl	800e6fc <USB_EPStartXfer>

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	7912      	ldrb	r2, [r2, #4]
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d901      	bls.n	80083f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e04f      	b.n	8008492 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	da0f      	bge.n	800841a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	f003 020f 	and.w	r2, r3, #15
 8008400:	4613      	mov	r3, r2
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	3310      	adds	r3, #16
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	3304      	adds	r3, #4
 8008410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2201      	movs	r2, #1
 8008416:	705a      	strb	r2, [r3, #1]
 8008418:	e00d      	b.n	8008436 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800841a:	78fa      	ldrb	r2, [r7, #3]
 800841c:	4613      	mov	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	4413      	add	r3, r2
 800842c:	3304      	adds	r3, #4
 800842e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	b2da      	uxtb	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <HAL_PCD_EP_SetStall+0x82>
 8008452:	2302      	movs	r3, #2
 8008454:	e01d      	b.n	8008492 <HAL_PCD_EP_SetStall+0xbe>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	4618      	mov	r0, r3
 8008466:	f006 fd21 	bl	800eeac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	2b00      	cmp	r3, #0
 8008472:	d109      	bne.n	8008488 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7999      	ldrb	r1, [r3, #6]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008482:	461a      	mov	r2, r3
 8008484:	f006 ff62 	bl	800f34c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	f003 030f 	and.w	r3, r3, #15
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	7912      	ldrb	r2, [r2, #4]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d901      	bls.n	80084b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e042      	b.n	800853e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80084b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	da0f      	bge.n	80084e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	f003 020f 	and.w	r2, r3, #15
 80084c6:	4613      	mov	r3, r2
 80084c8:	00db      	lsls	r3, r3, #3
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	3310      	adds	r3, #16
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	4413      	add	r3, r2
 80084d4:	3304      	adds	r3, #4
 80084d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	705a      	strb	r2, [r3, #1]
 80084de:	e00f      	b.n	8008500 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	f003 020f 	and.w	r2, r3, #15
 80084e6:	4613      	mov	r3, r2
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	4413      	add	r3, r2
 80084f6:	3304      	adds	r3, #4
 80084f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	b2da      	uxtb	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_PCD_EP_ClrStall+0x86>
 800851c:	2302      	movs	r3, #2
 800851e:	e00e      	b.n	800853e <HAL_PCD_EP_ClrStall+0xa4>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68f9      	ldr	r1, [r7, #12]
 800852e:	4618      	mov	r0, r3
 8008530:	f006 fd2a 	bl	800ef88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008556:	2b00      	cmp	r3, #0
 8008558:	da0c      	bge.n	8008574 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	f003 020f 	and.w	r2, r3, #15
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	3310      	adds	r3, #16
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	3304      	adds	r3, #4
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	e00c      	b.n	800858e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	f003 020f 	and.w	r2, r3, #15
 800857a:	4613      	mov	r3, r2
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	3304      	adds	r3, #4
 800858c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	4618      	mov	r0, r3
 8008596:	f006 fb49 	bl	800ec2c <USB_EPStopXfer>
 800859a:	4603      	mov	r3, r0
 800859c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800859e:	7afb      	ldrb	r3, [r7, #11]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d101      	bne.n	80085c2 <HAL_PCD_EP_Flush+0x1a>
 80085be:	2302      	movs	r3, #2
 80085c0:	e01b      	b.n	80085fa <HAL_PCD_EP_Flush+0x52>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80085ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	da09      	bge.n	80085e6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f005 fe8a 	bl	800e2f8 <USB_FlushTxFifo>
 80085e4:	e004      	b.n	80085f0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f005 feb6 	bl	800e35c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b08a      	sub	sp, #40	@ 0x28
 8008606:	af02      	add	r7, sp, #8
 8008608:	6078      	str	r0, [r7, #4]
 800860a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4613      	mov	r3, r2
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	3310      	adds	r3, #16
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	4413      	add	r3, r2
 8008626:	3304      	adds	r3, #4
 8008628:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	695a      	ldr	r2, [r3, #20]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	429a      	cmp	r2, r3
 8008634:	d901      	bls.n	800863a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e06b      	b.n	8008712 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	691a      	ldr	r2, [r3, #16]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	429a      	cmp	r2, r3
 800864e:	d902      	bls.n	8008656 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	3303      	adds	r3, #3
 800865a:	089b      	lsrs	r3, r3, #2
 800865c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800865e:	e02a      	b.n	80086b6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	691a      	ldr	r2, [r3, #16]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	69fa      	ldr	r2, [r7, #28]
 8008672:	429a      	cmp	r2, r3
 8008674:	d902      	bls.n	800867c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	3303      	adds	r3, #3
 8008680:	089b      	lsrs	r3, r3, #2
 8008682:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68d9      	ldr	r1, [r3, #12]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	b2da      	uxtb	r2, r3
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	4603      	mov	r3, r0
 8008698:	6978      	ldr	r0, [r7, #20]
 800869a:	f006 fb71 	bl	800ed80 <USB_WritePacket>

    ep->xfer_buff  += len;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	441a      	add	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	695a      	ldr	r2, [r3, #20]
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	441a      	add	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d809      	bhi.n	80086e0 <PCD_WriteEmptyTxFifo+0xde>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	695a      	ldr	r2, [r3, #20]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d203      	bcs.n	80086e0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1bf      	bne.n	8008660 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d811      	bhi.n	8008710 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	2201      	movs	r2, #1
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	43db      	mvns	r3, r3
 8008706:	6939      	ldr	r1, [r7, #16]
 8008708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800870c:	4013      	ands	r3, r2
 800870e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3720      	adds	r7, #32
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	333c      	adds	r3, #60	@ 0x3c
 8008734:	3304      	adds	r3, #4
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	799b      	ldrb	r3, [r3, #6]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d17b      	bne.n	800884a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f003 0308 	and.w	r3, r3, #8
 8008758:	2b00      	cmp	r3, #0
 800875a:	d015      	beq.n	8008788 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	4a61      	ldr	r2, [pc, #388]	@ (80088e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	f240 80b9 	bls.w	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 80b3 	beq.w	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800877e:	461a      	mov	r2, r3
 8008780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008784:	6093      	str	r3, [r2, #8]
 8008786:	e0a7      	b.n	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b00      	cmp	r3, #0
 8008790:	d009      	beq.n	80087a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	4413      	add	r3, r2
 800879a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800879e:	461a      	mov	r2, r3
 80087a0:	2320      	movs	r3, #32
 80087a2:	6093      	str	r3, [r2, #8]
 80087a4:	e098      	b.n	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f040 8093 	bne.w	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	4a4b      	ldr	r2, [pc, #300]	@ (80088e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d90f      	bls.n	80087da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00a      	beq.n	80087da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087d6:	6093      	str	r3, [r2, #8]
 80087d8:	e07e      	b.n	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4613      	mov	r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	4413      	add	r3, r2
 80087ec:	3304      	adds	r3, #4
 80087ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1a      	ldr	r2, [r3, #32]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	0159      	lsls	r1, r3, #5
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	440b      	add	r3, r1
 80087fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d114      	bne.n	800883c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008824:	461a      	mov	r2, r3
 8008826:	2101      	movs	r1, #1
 8008828:	f006 fd90 	bl	800f34c <USB_EP0_OutStart>
 800882c:	e006      	b.n	800883c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	441a      	add	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f014 fccc 	bl	801d1e0 <HAL_PCD_DataOutStageCallback>
 8008848:	e046      	b.n	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	4a26      	ldr	r2, [pc, #152]	@ (80088e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d124      	bne.n	800889c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008868:	461a      	mov	r2, r3
 800886a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800886e:	6093      	str	r3, [r2, #8]
 8008870:	e032      	b.n	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b00      	cmp	r3, #0
 800887a:	d008      	beq.n	800888e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008888:	461a      	mov	r2, r3
 800888a:	2320      	movs	r3, #32
 800888c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f014 fca3 	bl	801d1e0 <HAL_PCD_DataOutStageCallback>
 800889a:	e01d      	b.n	80088d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d114      	bne.n	80088cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	4613      	mov	r3, r2
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	4413      	add	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	440b      	add	r3, r1
 80088b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d108      	bne.n	80088cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088c4:	461a      	mov	r2, r3
 80088c6:	2100      	movs	r1, #0
 80088c8:	f006 fd40 	bl	800f34c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f014 fc84 	bl	801d1e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3720      	adds	r7, #32
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	4f54300a 	.word	0x4f54300a
 80088e8:	4f54310a 	.word	0x4f54310a

080088ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	333c      	adds	r3, #60	@ 0x3c
 8008904:	3304      	adds	r3, #4
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4a15      	ldr	r2, [pc, #84]	@ (8008974 <PCD_EP_OutSetupPacket_int+0x88>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d90e      	bls.n	8008940 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008928:	2b00      	cmp	r3, #0
 800892a:	d009      	beq.n	8008940 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008938:	461a      	mov	r2, r3
 800893a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800893e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f014 fc3b 	bl	801d1bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4a0a      	ldr	r2, [pc, #40]	@ (8008974 <PCD_EP_OutSetupPacket_int+0x88>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d90c      	bls.n	8008968 <PCD_EP_OutSetupPacket_int+0x7c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	799b      	ldrb	r3, [r3, #6]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d108      	bne.n	8008968 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008960:	461a      	mov	r2, r3
 8008962:	2101      	movs	r1, #1
 8008964:	f006 fcf2 	bl	800f34c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	4f54300a 	.word	0x4f54300a

08008978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
 8008984:	4613      	mov	r3, r2
 8008986:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d107      	bne.n	80089a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008996:	883b      	ldrh	r3, [r7, #0]
 8008998:	0419      	lsls	r1, r3, #16
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80089a4:	e028      	b.n	80089f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ac:	0c1b      	lsrs	r3, r3, #16
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4413      	add	r3, r2
 80089b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
 80089b8:	e00d      	b.n	80089d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	3340      	adds	r3, #64	@ 0x40
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	0c1b      	lsrs	r3, r3, #16
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4413      	add	r3, r2
 80089ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	3301      	adds	r3, #1
 80089d4:	73fb      	strb	r3, [r7, #15]
 80089d6:	7bfa      	ldrb	r2, [r7, #15]
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	3b01      	subs	r3, #1
 80089dc:	429a      	cmp	r2, r3
 80089de:	d3ec      	bcc.n	80089ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80089e0:	883b      	ldrh	r3, [r7, #0]
 80089e2:	0418      	lsls	r0, r3, #16
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6819      	ldr	r1, [r3, #0]
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	4302      	orrs	r2, r0
 80089f0:	3340      	adds	r3, #64	@ 0x40
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	440b      	add	r3, r1
 80089f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	887a      	ldrh	r2, [r7, #2]
 8008a18:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008a46:	4b06      	ldr	r3, [pc, #24]	@ (8008a60 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008a48:	2201      	movs	r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a4c:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a52:	687b      	ldr	r3, [r7, #4]
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	420e0020 	.word	0x420e0020
 8008a64:	40007000 	.word	0x40007000

08008a68 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008a6e:	4b06      	ldr	r3, [pc, #24]	@ (8008a88 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008a74:	4b05      	ldr	r3, [pc, #20]	@ (8008a8c <HAL_PWR_DisableBkUpAccess+0x24>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008a7a:	687b      	ldr	r3, [r7, #4]
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	420e0020 	.word	0x420e0020
 8008a8c:	40007000 	.word	0x40007000

08008a90 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8008a9c:	4b12      	ldr	r3, [pc, #72]	@ (8008ae8 <HAL_PWR_EnterSTOPMode+0x58>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f023 0203 	bic.w	r2, r3, #3
 8008aa4:	4910      	ldr	r1, [pc, #64]	@ (8008ae8 <HAL_PWR_EnterSTOPMode+0x58>)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008aac:	4b0f      	ldr	r3, [pc, #60]	@ (8008aec <HAL_PWR_EnterSTOPMode+0x5c>)
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8008aec <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ab2:	f043 0304 	orr.w	r3, r3, #4
 8008ab6:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8008abe:	bf30      	wfi
 8008ac0:	e005      	b.n	8008ace <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d001      	beq.n	8008acc <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8008ac8:	bf40      	sev
      __WFE();
 8008aca:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8008acc:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8008ace:	4b07      	ldr	r3, [pc, #28]	@ (8008aec <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	4a06      	ldr	r2, [pc, #24]	@ (8008aec <HAL_PWR_EnterSTOPMode+0x5c>)
 8008ad4:	f023 0304 	bic.w	r3, r3, #4
 8008ad8:	6113      	str	r3, [r2, #16]
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40007000 	.word	0x40007000
 8008aec:	e000ed00 	.word	0xe000ed00

08008af0 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8008af4:	4b03      	ldr	r3, [pc, #12]	@ (8008b04 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	601a      	str	r2, [r3, #0]
}
 8008afa:	bf00      	nop
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	420e0024 	.word	0x420e0024

08008b08 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8008b0c:	4b03      	ldr	r3, [pc, #12]	@ (8008b1c <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]
}
 8008b12:	bf00      	nop
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	420e0024 	.word	0x420e0024

08008b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e267      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d075      	beq.n	8008c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b3e:	4b88      	ldr	r3, [pc, #544]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 030c 	and.w	r3, r3, #12
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d00c      	beq.n	8008b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b4a:	4b85      	ldr	r3, [pc, #532]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d112      	bne.n	8008b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b56:	4b82      	ldr	r3, [pc, #520]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b62:	d10b      	bne.n	8008b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b64:	4b7e      	ldr	r3, [pc, #504]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d05b      	beq.n	8008c28 <HAL_RCC_OscConfig+0x108>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d157      	bne.n	8008c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e242      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b84:	d106      	bne.n	8008b94 <HAL_RCC_OscConfig+0x74>
 8008b86:	4b76      	ldr	r3, [pc, #472]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a75      	ldr	r2, [pc, #468]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	e01d      	b.n	8008bd0 <HAL_RCC_OscConfig+0xb0>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b9c:	d10c      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x98>
 8008b9e:	4b70      	ldr	r3, [pc, #448]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a6f      	ldr	r2, [pc, #444]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	4b6d      	ldr	r3, [pc, #436]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a6c      	ldr	r2, [pc, #432]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	e00b      	b.n	8008bd0 <HAL_RCC_OscConfig+0xb0>
 8008bb8:	4b69      	ldr	r3, [pc, #420]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a68      	ldr	r2, [pc, #416]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	4b66      	ldr	r3, [pc, #408]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a65      	ldr	r2, [pc, #404]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d013      	beq.n	8008c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bd8:	f7fb fa96 	bl	8004108 <HAL_GetTick>
 8008bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bde:	e008      	b.n	8008bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008be0:	f7fb fa92 	bl	8004108 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b64      	cmp	r3, #100	@ 0x64
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e207      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0f0      	beq.n	8008be0 <HAL_RCC_OscConfig+0xc0>
 8008bfe:	e014      	b.n	8008c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c00:	f7fb fa82 	bl	8004108 <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c06:	e008      	b.n	8008c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c08:	f7fb fa7e 	bl	8004108 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b64      	cmp	r3, #100	@ 0x64
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e1f3      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c1a:	4b51      	ldr	r3, [pc, #324]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1f0      	bne.n	8008c08 <HAL_RCC_OscConfig+0xe8>
 8008c26:	e000      	b.n	8008c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d063      	beq.n	8008cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c36:	4b4a      	ldr	r3, [pc, #296]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 030c 	and.w	r3, r3, #12
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00b      	beq.n	8008c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c42:	4b47      	ldr	r3, [pc, #284]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c4a:	2b08      	cmp	r3, #8
 8008c4c:	d11c      	bne.n	8008c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c4e:	4b44      	ldr	r3, [pc, #272]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d116      	bne.n	8008c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c5a:	4b41      	ldr	r3, [pc, #260]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <HAL_RCC_OscConfig+0x152>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d001      	beq.n	8008c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e1c7      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c72:	4b3b      	ldr	r3, [pc, #236]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	4937      	ldr	r1, [pc, #220]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c86:	e03a      	b.n	8008cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d020      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c90:	4b34      	ldr	r3, [pc, #208]	@ (8008d64 <HAL_RCC_OscConfig+0x244>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c96:	f7fb fa37 	bl	8004108 <HAL_GetTick>
 8008c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c9c:	e008      	b.n	8008cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c9e:	f7fb fa33 	bl	8004108 <HAL_GetTick>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d901      	bls.n	8008cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e1a8      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d0f0      	beq.n	8008c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cbc:	4b28      	ldr	r3, [pc, #160]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	4925      	ldr	r1, [pc, #148]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	600b      	str	r3, [r1, #0]
 8008cd0:	e015      	b.n	8008cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cd2:	4b24      	ldr	r3, [pc, #144]	@ (8008d64 <HAL_RCC_OscConfig+0x244>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd8:	f7fb fa16 	bl	8004108 <HAL_GetTick>
 8008cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cde:	e008      	b.n	8008cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ce0:	f7fb fa12 	bl	8004108 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e187      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1f0      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0308 	and.w	r3, r3, #8
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d036      	beq.n	8008d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d016      	beq.n	8008d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d12:	4b15      	ldr	r3, [pc, #84]	@ (8008d68 <HAL_RCC_OscConfig+0x248>)
 8008d14:	2201      	movs	r2, #1
 8008d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d18:	f7fb f9f6 	bl	8004108 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d20:	f7fb f9f2 	bl	8004108 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e167      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d32:	4b0b      	ldr	r3, [pc, #44]	@ (8008d60 <HAL_RCC_OscConfig+0x240>)
 8008d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0f0      	beq.n	8008d20 <HAL_RCC_OscConfig+0x200>
 8008d3e:	e01b      	b.n	8008d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d40:	4b09      	ldr	r3, [pc, #36]	@ (8008d68 <HAL_RCC_OscConfig+0x248>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d46:	f7fb f9df 	bl	8004108 <HAL_GetTick>
 8008d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d4c:	e00e      	b.n	8008d6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d4e:	f7fb f9db 	bl	8004108 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d907      	bls.n	8008d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e150      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
 8008d60:	40023800 	.word	0x40023800
 8008d64:	42470000 	.word	0x42470000
 8008d68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d6c:	4b88      	ldr	r3, [pc, #544]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1ea      	bne.n	8008d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 8097 	beq.w	8008eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d8a:	4b81      	ldr	r3, [pc, #516]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10f      	bne.n	8008db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d96:	2300      	movs	r3, #0
 8008d98:	60bb      	str	r3, [r7, #8]
 8008d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8008da6:	4b7a      	ldr	r3, [pc, #488]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dae:	60bb      	str	r3, [r7, #8]
 8008db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008db2:	2301      	movs	r3, #1
 8008db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008db6:	4b77      	ldr	r3, [pc, #476]	@ (8008f94 <HAL_RCC_OscConfig+0x474>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d118      	bne.n	8008df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dc2:	4b74      	ldr	r3, [pc, #464]	@ (8008f94 <HAL_RCC_OscConfig+0x474>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a73      	ldr	r2, [pc, #460]	@ (8008f94 <HAL_RCC_OscConfig+0x474>)
 8008dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dce:	f7fb f99b 	bl	8004108 <HAL_GetTick>
 8008dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dd4:	e008      	b.n	8008de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dd6:	f7fb f997 	bl	8004108 <HAL_GetTick>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d901      	bls.n	8008de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	e10c      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008de8:	4b6a      	ldr	r3, [pc, #424]	@ (8008f94 <HAL_RCC_OscConfig+0x474>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0f0      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d106      	bne.n	8008e0a <HAL_RCC_OscConfig+0x2ea>
 8008dfc:	4b64      	ldr	r3, [pc, #400]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e00:	4a63      	ldr	r2, [pc, #396]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e08:	e01c      	b.n	8008e44 <HAL_RCC_OscConfig+0x324>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	2b05      	cmp	r3, #5
 8008e10:	d10c      	bne.n	8008e2c <HAL_RCC_OscConfig+0x30c>
 8008e12:	4b5f      	ldr	r3, [pc, #380]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e16:	4a5e      	ldr	r2, [pc, #376]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e18:	f043 0304 	orr.w	r3, r3, #4
 8008e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e22:	4a5b      	ldr	r2, [pc, #364]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e24:	f043 0301 	orr.w	r3, r3, #1
 8008e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e2a:	e00b      	b.n	8008e44 <HAL_RCC_OscConfig+0x324>
 8008e2c:	4b58      	ldr	r3, [pc, #352]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e30:	4a57      	ldr	r2, [pc, #348]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e38:	4b55      	ldr	r3, [pc, #340]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e3c:	4a54      	ldr	r2, [pc, #336]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e3e:	f023 0304 	bic.w	r3, r3, #4
 8008e42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d015      	beq.n	8008e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e4c:	f7fb f95c 	bl	8004108 <HAL_GetTick>
 8008e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e52:	e00a      	b.n	8008e6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e54:	f7fb f958 	bl	8004108 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d901      	bls.n	8008e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e0cb      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e6a:	4b49      	ldr	r3, [pc, #292]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0ee      	beq.n	8008e54 <HAL_RCC_OscConfig+0x334>
 8008e76:	e014      	b.n	8008ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e78:	f7fb f946 	bl	8004108 <HAL_GetTick>
 8008e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e7e:	e00a      	b.n	8008e96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e80:	f7fb f942 	bl	8004108 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e0b5      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e96:	4b3e      	ldr	r3, [pc, #248]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1ee      	bne.n	8008e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d105      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ea8:	4b39      	ldr	r3, [pc, #228]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eac:	4a38      	ldr	r2, [pc, #224]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008eb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 80a1 	beq.w	8009000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ebe:	4b34      	ldr	r3, [pc, #208]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 030c 	and.w	r3, r3, #12
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d05c      	beq.n	8008f84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d141      	bne.n	8008f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ed2:	4b31      	ldr	r3, [pc, #196]	@ (8008f98 <HAL_RCC_OscConfig+0x478>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed8:	f7fb f916 	bl	8004108 <HAL_GetTick>
 8008edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ee0:	f7fb f912 	bl	8004108 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e087      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ef2:	4b27      	ldr	r3, [pc, #156]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1f0      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	69da      	ldr	r2, [r3, #28]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0c:	019b      	lsls	r3, r3, #6
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f14:	085b      	lsrs	r3, r3, #1
 8008f16:	3b01      	subs	r3, #1
 8008f18:	041b      	lsls	r3, r3, #16
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f20:	061b      	lsls	r3, r3, #24
 8008f22:	491b      	ldr	r1, [pc, #108]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f28:	4b1b      	ldr	r3, [pc, #108]	@ (8008f98 <HAL_RCC_OscConfig+0x478>)
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f2e:	f7fb f8eb 	bl	8004108 <HAL_GetTick>
 8008f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f34:	e008      	b.n	8008f48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f36:	f7fb f8e7 	bl	8004108 <HAL_GetTick>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d901      	bls.n	8008f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e05c      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f48:	4b11      	ldr	r3, [pc, #68]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d0f0      	beq.n	8008f36 <HAL_RCC_OscConfig+0x416>
 8008f54:	e054      	b.n	8009000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f56:	4b10      	ldr	r3, [pc, #64]	@ (8008f98 <HAL_RCC_OscConfig+0x478>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f5c:	f7fb f8d4 	bl	8004108 <HAL_GetTick>
 8008f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f62:	e008      	b.n	8008f76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f64:	f7fb f8d0 	bl	8004108 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d901      	bls.n	8008f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e045      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f76:	4b06      	ldr	r3, [pc, #24]	@ (8008f90 <HAL_RCC_OscConfig+0x470>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1f0      	bne.n	8008f64 <HAL_RCC_OscConfig+0x444>
 8008f82:	e03d      	b.n	8009000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d107      	bne.n	8008f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e038      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
 8008f90:	40023800 	.word	0x40023800
 8008f94:	40007000 	.word	0x40007000
 8008f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800900c <HAL_RCC_OscConfig+0x4ec>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d028      	beq.n	8008ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d121      	bne.n	8008ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d11a      	bne.n	8008ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fcc:	4013      	ands	r3, r2
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d111      	bne.n	8008ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	085b      	lsrs	r3, r3, #1
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d107      	bne.n	8008ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d001      	beq.n	8009000 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e000      	b.n	8009002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	40023800 	.word	0x40023800

08009010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e0cc      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009024:	4b68      	ldr	r3, [pc, #416]	@ (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	d90c      	bls.n	800904c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009032:	4b65      	ldr	r3, [pc, #404]	@ (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800903a:	4b63      	ldr	r3, [pc, #396]	@ (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d001      	beq.n	800904c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e0b8      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d020      	beq.n	800909a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009064:	4b59      	ldr	r3, [pc, #356]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	4a58      	ldr	r2, [pc, #352]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 800906a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800906e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d005      	beq.n	8009088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800907c:	4b53      	ldr	r3, [pc, #332]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	4a52      	ldr	r2, [pc, #328]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009088:	4b50      	ldr	r3, [pc, #320]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	494d      	ldr	r1, [pc, #308]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009096:	4313      	orrs	r3, r2
 8009098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d044      	beq.n	8009130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d107      	bne.n	80090be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ae:	4b47      	ldr	r3, [pc, #284]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d119      	bne.n	80090ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e07f      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d003      	beq.n	80090ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d107      	bne.n	80090de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ce:	4b3f      	ldr	r3, [pc, #252]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d109      	bne.n	80090ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e06f      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090de:	4b3b      	ldr	r3, [pc, #236]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e067      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090ee:	4b37      	ldr	r3, [pc, #220]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f023 0203 	bic.w	r2, r3, #3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	4934      	ldr	r1, [pc, #208]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009100:	f7fb f802 	bl	8004108 <HAL_GetTick>
 8009104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009106:	e00a      	b.n	800911e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009108:	f7fa fffe 	bl	8004108 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009116:	4293      	cmp	r3, r2
 8009118:	d901      	bls.n	800911e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e04f      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800911e:	4b2b      	ldr	r3, [pc, #172]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 020c 	and.w	r2, r3, #12
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	429a      	cmp	r2, r3
 800912e:	d1eb      	bne.n	8009108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009130:	4b25      	ldr	r3, [pc, #148]	@ (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0307 	and.w	r3, r3, #7
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d20c      	bcs.n	8009158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800913e:	4b22      	ldr	r3, [pc, #136]	@ (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009146:	4b20      	ldr	r3, [pc, #128]	@ (80091c8 <HAL_RCC_ClockConfig+0x1b8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d001      	beq.n	8009158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e032      	b.n	80091be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	d008      	beq.n	8009176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009164:	4b19      	ldr	r3, [pc, #100]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	4916      	ldr	r1, [pc, #88]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009172:	4313      	orrs	r3, r2
 8009174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d009      	beq.n	8009196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009182:	4b12      	ldr	r3, [pc, #72]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	490e      	ldr	r1, [pc, #56]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 8009192:	4313      	orrs	r3, r2
 8009194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009196:	f000 f821 	bl	80091dc <HAL_RCC_GetSysClockFreq>
 800919a:	4602      	mov	r2, r0
 800919c:	4b0b      	ldr	r3, [pc, #44]	@ (80091cc <HAL_RCC_ClockConfig+0x1bc>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	091b      	lsrs	r3, r3, #4
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	490a      	ldr	r1, [pc, #40]	@ (80091d0 <HAL_RCC_ClockConfig+0x1c0>)
 80091a8:	5ccb      	ldrb	r3, [r1, r3]
 80091aa:	fa22 f303 	lsr.w	r3, r2, r3
 80091ae:	4a09      	ldr	r2, [pc, #36]	@ (80091d4 <HAL_RCC_ClockConfig+0x1c4>)
 80091b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091b2:	4b09      	ldr	r3, [pc, #36]	@ (80091d8 <HAL_RCC_ClockConfig+0x1c8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fa ff62 	bl	8004080 <HAL_InitTick>

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	40023c00 	.word	0x40023c00
 80091cc:	40023800 	.word	0x40023800
 80091d0:	08024fac 	.word	0x08024fac
 80091d4:	20000010 	.word	0x20000010
 80091d8:	20000014 	.word	0x20000014

080091dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091e0:	b090      	sub	sp, #64	@ 0x40
 80091e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e8:	2300      	movs	r3, #0
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ec:	2300      	movs	r3, #0
 80091ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091f4:	4b59      	ldr	r3, [pc, #356]	@ (800935c <HAL_RCC_GetSysClockFreq+0x180>)
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f003 030c 	and.w	r3, r3, #12
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d00d      	beq.n	800921c <HAL_RCC_GetSysClockFreq+0x40>
 8009200:	2b08      	cmp	r3, #8
 8009202:	f200 80a1 	bhi.w	8009348 <HAL_RCC_GetSysClockFreq+0x16c>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <HAL_RCC_GetSysClockFreq+0x34>
 800920a:	2b04      	cmp	r3, #4
 800920c:	d003      	beq.n	8009216 <HAL_RCC_GetSysClockFreq+0x3a>
 800920e:	e09b      	b.n	8009348 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009210:	4b53      	ldr	r3, [pc, #332]	@ (8009360 <HAL_RCC_GetSysClockFreq+0x184>)
 8009212:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8009214:	e09b      	b.n	800934e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009216:	4b53      	ldr	r3, [pc, #332]	@ (8009364 <HAL_RCC_GetSysClockFreq+0x188>)
 8009218:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800921a:	e098      	b.n	800934e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800921c:	4b4f      	ldr	r3, [pc, #316]	@ (800935c <HAL_RCC_GetSysClockFreq+0x180>)
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009226:	4b4d      	ldr	r3, [pc, #308]	@ (800935c <HAL_RCC_GetSysClockFreq+0x180>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d028      	beq.n	8009284 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009232:	4b4a      	ldr	r3, [pc, #296]	@ (800935c <HAL_RCC_GetSysClockFreq+0x180>)
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	099b      	lsrs	r3, r3, #6
 8009238:	2200      	movs	r2, #0
 800923a:	623b      	str	r3, [r7, #32]
 800923c:	627a      	str	r2, [r7, #36]	@ 0x24
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009244:	2100      	movs	r1, #0
 8009246:	4b47      	ldr	r3, [pc, #284]	@ (8009364 <HAL_RCC_GetSysClockFreq+0x188>)
 8009248:	fb03 f201 	mul.w	r2, r3, r1
 800924c:	2300      	movs	r3, #0
 800924e:	fb00 f303 	mul.w	r3, r0, r3
 8009252:	4413      	add	r3, r2
 8009254:	4a43      	ldr	r2, [pc, #268]	@ (8009364 <HAL_RCC_GetSysClockFreq+0x188>)
 8009256:	fba0 1202 	umull	r1, r2, r0, r2
 800925a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800925c:	460a      	mov	r2, r1
 800925e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009262:	4413      	add	r3, r2
 8009264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009268:	2200      	movs	r2, #0
 800926a:	61bb      	str	r3, [r7, #24]
 800926c:	61fa      	str	r2, [r7, #28]
 800926e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009272:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009276:	f7f7 fd1f 	bl	8000cb8 <__aeabi_uldivmod>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4613      	mov	r3, r2
 8009280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009282:	e053      	b.n	800932c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009284:	4b35      	ldr	r3, [pc, #212]	@ (800935c <HAL_RCC_GetSysClockFreq+0x180>)
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	099b      	lsrs	r3, r3, #6
 800928a:	2200      	movs	r2, #0
 800928c:	613b      	str	r3, [r7, #16]
 800928e:	617a      	str	r2, [r7, #20]
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009296:	f04f 0b00 	mov.w	fp, #0
 800929a:	4652      	mov	r2, sl
 800929c:	465b      	mov	r3, fp
 800929e:	f04f 0000 	mov.w	r0, #0
 80092a2:	f04f 0100 	mov.w	r1, #0
 80092a6:	0159      	lsls	r1, r3, #5
 80092a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092ac:	0150      	lsls	r0, r2, #5
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	ebb2 080a 	subs.w	r8, r2, sl
 80092b6:	eb63 090b 	sbc.w	r9, r3, fp
 80092ba:	f04f 0200 	mov.w	r2, #0
 80092be:	f04f 0300 	mov.w	r3, #0
 80092c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80092c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80092ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80092ce:	ebb2 0408 	subs.w	r4, r2, r8
 80092d2:	eb63 0509 	sbc.w	r5, r3, r9
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	00eb      	lsls	r3, r5, #3
 80092e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092e4:	00e2      	lsls	r2, r4, #3
 80092e6:	4614      	mov	r4, r2
 80092e8:	461d      	mov	r5, r3
 80092ea:	eb14 030a 	adds.w	r3, r4, sl
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	eb45 030b 	adc.w	r3, r5, fp
 80092f4:	607b      	str	r3, [r7, #4]
 80092f6:	f04f 0200 	mov.w	r2, #0
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009302:	4629      	mov	r1, r5
 8009304:	028b      	lsls	r3, r1, #10
 8009306:	4621      	mov	r1, r4
 8009308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800930c:	4621      	mov	r1, r4
 800930e:	028a      	lsls	r2, r1, #10
 8009310:	4610      	mov	r0, r2
 8009312:	4619      	mov	r1, r3
 8009314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009316:	2200      	movs	r2, #0
 8009318:	60bb      	str	r3, [r7, #8]
 800931a:	60fa      	str	r2, [r7, #12]
 800931c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009320:	f7f7 fcca 	bl	8000cb8 <__aeabi_uldivmod>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4613      	mov	r3, r2
 800932a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800932c:	4b0b      	ldr	r3, [pc, #44]	@ (800935c <HAL_RCC_GetSysClockFreq+0x180>)
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	0c1b      	lsrs	r3, r3, #16
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	3301      	adds	r3, #1
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800933c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	fbb2 f3f3 	udiv	r3, r2, r3
 8009344:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009346:	e002      	b.n	800934e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009348:	4b05      	ldr	r3, [pc, #20]	@ (8009360 <HAL_RCC_GetSysClockFreq+0x184>)
 800934a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800934c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800934e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009350:	4618      	mov	r0, r3
 8009352:	3740      	adds	r7, #64	@ 0x40
 8009354:	46bd      	mov	sp, r7
 8009356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800
 8009360:	00f42400 	.word	0x00f42400
 8009364:	017d7840 	.word	0x017d7840

08009368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800936c:	4b03      	ldr	r3, [pc, #12]	@ (800937c <HAL_RCC_GetHCLKFreq+0x14>)
 800936e:	681b      	ldr	r3, [r3, #0]
}
 8009370:	4618      	mov	r0, r3
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20000010 	.word	0x20000010

08009380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009384:	f7ff fff0 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 8009388:	4602      	mov	r2, r0
 800938a:	4b05      	ldr	r3, [pc, #20]	@ (80093a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	0a9b      	lsrs	r3, r3, #10
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	4903      	ldr	r1, [pc, #12]	@ (80093a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009396:	5ccb      	ldrb	r3, [r1, r3]
 8009398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800939c:	4618      	mov	r0, r3
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	40023800 	.word	0x40023800
 80093a4:	08024fbc 	.word	0x08024fbc

080093a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093ac:	f7ff ffdc 	bl	8009368 <HAL_RCC_GetHCLKFreq>
 80093b0:	4602      	mov	r2, r0
 80093b2:	4b05      	ldr	r3, [pc, #20]	@ (80093c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	0b5b      	lsrs	r3, r3, #13
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	4903      	ldr	r1, [pc, #12]	@ (80093cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80093be:	5ccb      	ldrb	r3, [r1, r3]
 80093c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40023800 	.word	0x40023800
 80093cc:	08024fbc 	.word	0x08024fbc

080093d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d105      	bne.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d035      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80093f8:	4b67      	ldr	r3, [pc, #412]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80093fe:	f7fa fe83 	bl	8004108 <HAL_GetTick>
 8009402:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009404:	e008      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009406:	f7fa fe7f 	bl	8004108 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d901      	bls.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e0ba      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009418:	4b60      	ldr	r3, [pc, #384]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1f0      	bne.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	019a      	lsls	r2, r3, #6
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	071b      	lsls	r3, r3, #28
 8009430:	495a      	ldr	r1, [pc, #360]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009432:	4313      	orrs	r3, r2
 8009434:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009438:	4b57      	ldr	r3, [pc, #348]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800943a:	2201      	movs	r2, #1
 800943c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800943e:	f7fa fe63 	bl	8004108 <HAL_GetTick>
 8009442:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009444:	e008      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009446:	f7fa fe5f 	bl	8004108 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	d901      	bls.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e09a      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009458:	4b50      	ldr	r3, [pc, #320]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0f0      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0302 	and.w	r3, r3, #2
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 8083 	beq.w	8009578 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	4b49      	ldr	r3, [pc, #292]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947a:	4a48      	ldr	r2, [pc, #288]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800947c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009480:	6413      	str	r3, [r2, #64]	@ 0x40
 8009482:	4b46      	ldr	r3, [pc, #280]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800948e:	4b44      	ldr	r3, [pc, #272]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a43      	ldr	r2, [pc, #268]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009498:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800949a:	f7fa fe35 	bl	8004108 <HAL_GetTick>
 800949e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094a0:	e008      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094a2:	f7fa fe31 	bl	8004108 <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d901      	bls.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e06c      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094b4:	4b3a      	ldr	r3, [pc, #232]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d0f0      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80094c0:	4b36      	ldr	r3, [pc, #216]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d02f      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d028      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094de:	4b2f      	ldr	r3, [pc, #188]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80094e8:	4b2e      	ldr	r3, [pc, #184]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80094ee:	4b2d      	ldr	r3, [pc, #180]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80094f4:	4a29      	ldr	r2, [pc, #164]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80094fa:	4b28      	ldr	r3, [pc, #160]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80094fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b01      	cmp	r3, #1
 8009504:	d114      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009506:	f7fa fdff 	bl	8004108 <HAL_GetTick>
 800950a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800950c:	e00a      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800950e:	f7fa fdfb 	bl	8004108 <HAL_GetTick>
 8009512:	4602      	mov	r2, r0
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800951c:	4293      	cmp	r3, r2
 800951e:	d901      	bls.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e034      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009524:	4b1d      	ldr	r3, [pc, #116]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0ee      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800953c:	d10d      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800953e:	4b17      	ldr	r3, [pc, #92]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800954e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009552:	4912      	ldr	r1, [pc, #72]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009554:	4313      	orrs	r3, r2
 8009556:	608b      	str	r3, [r1, #8]
 8009558:	e005      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800955a:	4b10      	ldr	r3, [pc, #64]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	4a0f      	ldr	r2, [pc, #60]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009560:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009564:	6093      	str	r3, [r2, #8]
 8009566:	4b0d      	ldr	r3, [pc, #52]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009568:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009572:	490a      	ldr	r1, [pc, #40]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009574:	4313      	orrs	r3, r2
 8009576:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0308 	and.w	r3, r3, #8
 8009580:	2b00      	cmp	r3, #0
 8009582:	d003      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7c1a      	ldrb	r2, [r3, #16]
 8009588:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800958a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	42470068 	.word	0x42470068
 800959c:	40023800 	.word	0x40023800
 80095a0:	40007000 	.word	0x40007000
 80095a4:	42470e40 	.word	0x42470e40
 80095a8:	424711e0 	.word	0x424711e0

080095ac <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80095b2:	f7fa fda9 	bl	8004108 <HAL_GetTick>
 80095b6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80095b8:	4b5d      	ldr	r3, [pc, #372]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a5c      	ldr	r2, [pc, #368]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80095be:	f043 0301 	orr.w	r3, r3, #1
 80095c2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80095c4:	e008      	b.n	80095d8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095c6:	f7fa fd9f 	bl	8004108 <HAL_GetTick>
 80095ca:	4602      	mov	r2, r0
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d901      	bls.n	80095d8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e0a7      	b.n	8009728 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80095d8:	4b55      	ldr	r3, [pc, #340]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d0f0      	beq.n	80095c6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80095e4:	4b52      	ldr	r3, [pc, #328]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a51      	ldr	r2, [pc, #324]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80095ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80095f0:	f7fa fd8a 	bl	8004108 <HAL_GetTick>
 80095f4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80095f6:	4b4e      	ldr	r3, [pc, #312]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80095fc:	e00a      	b.n	8009614 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095fe:	f7fa fd83 	bl	8004108 <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800960c:	4293      	cmp	r3, r2
 800960e:	d901      	bls.n	8009614 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e089      	b.n	8009728 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8009614:	4b46      	ldr	r3, [pc, #280]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f003 030c 	and.w	r3, r3, #12
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1ee      	bne.n	80095fe <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009620:	f7fa fd72 	bl	8004108 <HAL_GetTick>
 8009624:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8009626:	4b42      	ldr	r3, [pc, #264]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a41      	ldr	r2, [pc, #260]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 800962c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8009630:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009632:	e008      	b.n	8009646 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009634:	f7fa fd68 	bl	8004108 <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b64      	cmp	r3, #100	@ 0x64
 8009640:	d901      	bls.n	8009646 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e070      	b.n	8009728 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009646:	4b3a      	ldr	r3, [pc, #232]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1f0      	bne.n	8009634 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009652:	f7fa fd59 	bl	8004108 <HAL_GetTick>
 8009656:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009658:	4b35      	ldr	r3, [pc, #212]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a34      	ldr	r2, [pc, #208]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 800965e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009662:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009664:	e008      	b.n	8009678 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009666:	f7fa fd4f 	bl	8004108 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b02      	cmp	r3, #2
 8009672:	d901      	bls.n	8009678 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e057      	b.n	8009728 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009678:	4b2d      	ldr	r3, [pc, #180]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1f0      	bne.n	8009666 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8009684:	f7fa fd40 	bl	8004108 <HAL_GetTick>
 8009688:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800968a:	4b29      	ldr	r3, [pc, #164]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a28      	ldr	r2, [pc, #160]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 8009690:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009694:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8009696:	e008      	b.n	80096aa <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009698:	f7fa fd36 	bl	8004108 <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e03e      	b.n	8009728 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80096aa:	4b21      	ldr	r3, [pc, #132]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1f0      	bne.n	8009698 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80096b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009734 <HAL_RCC_DeInit+0x188>)
 80096ba:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80096bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096be:	4a1e      	ldr	r2, [pc, #120]	@ (8009738 <HAL_RCC_DeInit+0x18c>)
 80096c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80096c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	4a19      	ldr	r2, [pc, #100]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096ca:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80096ce:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80096d0:	4b17      	ldr	r3, [pc, #92]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	4a16      	ldr	r2, [pc, #88]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096da:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80096dc:	4b14      	ldr	r3, [pc, #80]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	4a13      	ldr	r2, [pc, #76]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096e2:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 80096e6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80096e8:	4b11      	ldr	r3, [pc, #68]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	4a10      	ldr	r2, [pc, #64]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096f2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80096f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096f8:	4a0d      	ldr	r2, [pc, #52]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 80096fa:	f023 0301 	bic.w	r3, r3, #1
 80096fe:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8009700:	4b0b      	ldr	r3, [pc, #44]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 8009702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009704:	4a0a      	ldr	r2, [pc, #40]	@ (8009730 <HAL_RCC_DeInit+0x184>)
 8009706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800970a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800970c:	4b0b      	ldr	r3, [pc, #44]	@ (800973c <HAL_RCC_DeInit+0x190>)
 800970e:	4a0c      	ldr	r2, [pc, #48]	@ (8009740 <HAL_RCC_DeInit+0x194>)
 8009710:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8009712:	4b0c      	ldr	r3, [pc, #48]	@ (8009744 <HAL_RCC_DeInit+0x198>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f7fa fcb2 	bl	8004080 <HAL_InitTick>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8009726:	2300      	movs	r3, #0
  }
}
 8009728:	4618      	mov	r0, r3
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	40023800 	.word	0x40023800
 8009734:	04003010 	.word	0x04003010
 8009738:	20003000 	.word	0x20003000
 800973c:	20000010 	.word	0x20000010
 8009740:	00f42400 	.word	0x00f42400
 8009744:	20000014 	.word	0x20000014

08009748 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e073      	b.n	8009846 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	7f5b      	ldrb	r3, [r3, #29]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d105      	bne.n	8009774 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fa f87e 	bl	8003870 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b10      	cmp	r3, #16
 8009786:	d055      	beq.n	8009834 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	22ca      	movs	r2, #202	@ 0xca
 800978e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2253      	movs	r2, #83	@ 0x53
 8009796:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fbd3 	bl	8009f44 <RTC_EnterInitMode>
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d12c      	bne.n	8009802 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	6812      	ldr	r2, [r2, #0]
 80097b2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80097b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097ba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6899      	ldr	r1, [r3, #8]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	431a      	orrs	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	68d2      	ldr	r2, [r2, #12]
 80097e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6919      	ldr	r1, [r3, #16]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	041a      	lsls	r2, r3, #16
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	430a      	orrs	r2, r1
 80097f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fbda 	bl	8009fb2 <RTC_ExitInitMode>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d110      	bne.n	800982a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009816:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	22ff      	movs	r2, #255	@ 0xff
 8009830:	625a      	str	r2, [r3, #36]	@ 0x24
 8009832:	e001      	b.n	8009838 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009844:	7bfb      	ldrb	r3, [r7, #15]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800984e:	b590      	push	{r4, r7, lr}
 8009850:	b087      	sub	sp, #28
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	7f1b      	ldrb	r3, [r3, #28]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <HAL_RTC_SetTime+0x1c>
 8009866:	2302      	movs	r3, #2
 8009868:	e087      	b.n	800997a <HAL_RTC_SetTime+0x12c>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2202      	movs	r2, #2
 8009874:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d126      	bne.n	80098ca <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	d102      	bne.n	8009890 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2200      	movs	r2, #0
 800988e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 fbb1 	bl	8009ffc <RTC_ByteToBcd2>
 800989a:	4603      	mov	r3, r0
 800989c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	785b      	ldrb	r3, [r3, #1]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f000 fbaa 	bl	8009ffc <RTC_ByteToBcd2>
 80098a8:	4603      	mov	r3, r0
 80098aa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098ac:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	789b      	ldrb	r3, [r3, #2]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 fba2 	bl	8009ffc <RTC_ByteToBcd2>
 80098b8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098ba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	78db      	ldrb	r3, [r3, #3]
 80098c2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098c4:	4313      	orrs	r3, r2
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	e018      	b.n	80098fc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d102      	bne.n	80098de <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2200      	movs	r2, #0
 80098dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098ea:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098f0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	78db      	ldrb	r3, [r3, #3]
 80098f6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098f8:	4313      	orrs	r3, r2
 80098fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	22ca      	movs	r2, #202	@ 0xca
 8009902:	625a      	str	r2, [r3, #36]	@ 0x24
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2253      	movs	r2, #83	@ 0x53
 800990a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fb19 	bl	8009f44 <RTC_EnterInitMode>
 8009912:	4603      	mov	r3, r0
 8009914:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009916:	7cfb      	ldrb	r3, [r7, #19]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d120      	bne.n	800995e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009926:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800992a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800993a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6899      	ldr	r1, [r3, #8]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	431a      	orrs	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 fb2c 	bl	8009fb2 <RTC_ExitInitMode>
 800995a:	4603      	mov	r3, r0
 800995c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800995e:	7cfb      	ldrb	r3, [r7, #19]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2201      	movs	r2, #1
 8009968:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	22ff      	movs	r2, #255	@ 0xff
 8009970:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	771a      	strb	r2, [r3, #28]

  return status;
 8009978:	7cfb      	ldrb	r3, [r7, #19]
}
 800997a:	4618      	mov	r0, r3
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	bd90      	pop	{r4, r7, pc}

08009982 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80099b4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80099b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	0c1b      	lsrs	r3, r3, #16
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	0a1b      	lsrs	r3, r3, #8
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	0d9b      	lsrs	r3, r3, #22
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d11a      	bne.n	8009a34 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fb18 	bl	800a038 <RTC_Bcd2ToByte>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fb0f 	bl	800a038 <RTC_Bcd2ToByte>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	789b      	ldrb	r3, [r3, #2]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fb06 	bl	800a038 <RTC_Bcd2ToByte>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	461a      	mov	r2, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a3e:	b590      	push	{r4, r7, lr}
 8009a40:	b087      	sub	sp, #28
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	7f1b      	ldrb	r3, [r3, #28]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d101      	bne.n	8009a5a <HAL_RTC_SetDate+0x1c>
 8009a56:	2302      	movs	r3, #2
 8009a58:	e071      	b.n	8009b3e <HAL_RTC_SetDate+0x100>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2202      	movs	r2, #2
 8009a64:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10e      	bne.n	8009a8a <HAL_RTC_SetDate+0x4c>
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	f003 0310 	and.w	r3, r3, #16
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d008      	beq.n	8009a8a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	785b      	ldrb	r3, [r3, #1]
 8009a7c:	f023 0310 	bic.w	r3, r3, #16
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	330a      	adds	r3, #10
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d11c      	bne.n	8009aca <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	78db      	ldrb	r3, [r3, #3]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 fab1 	bl	8009ffc <RTC_ByteToBcd2>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f000 faaa 	bl	8009ffc <RTC_ByteToBcd2>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009aac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	789b      	ldrb	r3, [r3, #2]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 faa2 	bl	8009ffc <RTC_ByteToBcd2>
 8009ab8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009aba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e00e      	b.n	8009ae8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	78db      	ldrb	r3, [r3, #3]
 8009ace:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ad6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009adc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	22ca      	movs	r2, #202	@ 0xca
 8009aee:	625a      	str	r2, [r3, #36]	@ 0x24
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2253      	movs	r2, #83	@ 0x53
 8009af6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f000 fa23 	bl	8009f44 <RTC_EnterInitMode>
 8009afe:	4603      	mov	r3, r0
 8009b00:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009b02:	7cfb      	ldrb	r3, [r7, #19]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10c      	bne.n	8009b22 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b16:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 fa4a 	bl	8009fb2 <RTC_ExitInitMode>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b22:	7cfb      	ldrb	r3, [r7, #19]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	22ff      	movs	r2, #255	@ 0xff
 8009b34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	771a      	strb	r2, [r3, #28]

  return status;
 8009b3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd90      	pop	{r4, r7, pc}

08009b46 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b086      	sub	sp, #24
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60f8      	str	r0, [r7, #12]
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009b60:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b64:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	0c1b      	lsrs	r3, r3, #16
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	0a1b      	lsrs	r3, r3, #8
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	0b5b      	lsrs	r3, r3, #13
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 0307 	and.w	r3, r3, #7
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d11a      	bne.n	8009bda <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	78db      	ldrb	r3, [r3, #3]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fa45 	bl	800a038 <RTC_Bcd2ToByte>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fa3c 	bl	800a038 <RTC_Bcd2ToByte>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	789b      	ldrb	r3, [r3, #2]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fa33 	bl	800a038 <RTC_Bcd2ToByte>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b089      	sub	sp, #36	@ 0x24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009bf0:	4b9b      	ldr	r3, [pc, #620]	@ (8009e60 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a9b      	ldr	r2, [pc, #620]	@ (8009e64 <HAL_RTC_SetAlarm_IT+0x280>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	0adb      	lsrs	r3, r3, #11
 8009bfc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009c00:	fb02 f303 	mul.w	r3, r2, r3
 8009c04:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	7f1b      	ldrb	r3, [r3, #28]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d101      	bne.n	8009c1a <HAL_RTC_SetAlarm_IT+0x36>
 8009c16:	2302      	movs	r3, #2
 8009c18:	e11e      	b.n	8009e58 <HAL_RTC_SetAlarm_IT+0x274>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2202      	movs	r2, #2
 8009c24:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d137      	bne.n	8009c9c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 f9d9 	bl	8009ffc <RTC_ByteToBcd2>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	785b      	ldrb	r3, [r3, #1]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 f9d2 	bl	8009ffc <RTC_ByteToBcd2>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c5c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	789b      	ldrb	r3, [r3, #2]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f9ca 	bl	8009ffc <RTC_ByteToBcd2>
 8009c68:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c6a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	78db      	ldrb	r3, [r3, #3]
 8009c72:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c74:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 f9bc 	bl	8009ffc <RTC_ByteToBcd2>
 8009c84:	4603      	mov	r3, r0
 8009c86:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c88:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c96:	4313      	orrs	r3, r2
 8009c98:	61fb      	str	r3, [r7, #28]
 8009c9a:	e023      	b.n	8009ce4 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d102      	bne.n	8009cb0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2200      	movs	r2, #0
 8009cae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	785b      	ldrb	r3, [r3, #1]
 8009cba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cbc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cc2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	78db      	ldrb	r3, [r3, #3]
 8009cc8:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cd2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cd4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cda:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009cec:	4313      	orrs	r3, r2
 8009cee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	22ca      	movs	r2, #202	@ 0xca
 8009cf6:	625a      	str	r2, [r3, #36]	@ 0x24
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2253      	movs	r2, #83	@ 0x53
 8009cfe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d08:	d142      	bne.n	8009d90 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	689a      	ldr	r2, [r3, #8]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d18:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009d2a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10b      	bne.n	8009d50 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	22ff      	movs	r2, #255	@ 0xff
 8009d3e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2203      	movs	r2, #3
 8009d44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e083      	b.n	8009e58 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0e6      	beq.n	8009d2c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69fa      	ldr	r2, [r7, #28]
 8009d64:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d7c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689a      	ldr	r2, [r3, #8]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d8c:	609a      	str	r2, [r3, #8]
 8009d8e:	e04c      	b.n	8009e2a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	689a      	ldr	r2, [r3, #8]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009d9e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009db0:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009db2:	4b2b      	ldr	r3, [pc, #172]	@ (8009e60 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a2b      	ldr	r2, [pc, #172]	@ (8009e64 <HAL_RTC_SetAlarm_IT+0x280>)
 8009db8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbc:	0adb      	lsrs	r3, r3, #11
 8009dbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009dc2:	fb02 f303 	mul.w	r3, r2, r3
 8009dc6:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10b      	bne.n	8009dec <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	22ff      	movs	r2, #255	@ 0xff
 8009dda:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2203      	movs	r2, #3
 8009de0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e035      	b.n	8009e58 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0e6      	beq.n	8009dc8 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69fa      	ldr	r2, [r7, #28]
 8009e00:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e18:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689a      	ldr	r2, [r3, #8]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e28:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8009e68 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e34:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009e36:	4b0c      	ldr	r3, [pc, #48]	@ (8009e68 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8009e68 <HAL_RTC_SetAlarm_IT+0x284>)
 8009e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e40:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	22ff      	movs	r2, #255	@ 0xff
 8009e48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3724      	adds	r7, #36	@ 0x24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd90      	pop	{r4, r7, pc}
 8009e60:	20000010 	.word	0x20000010
 8009e64:	10624dd3 	.word	0x10624dd3
 8009e68:	40013c00 	.word	0x40013c00

08009e6c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009e74:	4b1f      	ldr	r3, [pc, #124]	@ (8009ef4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8009e76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009e7a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d012      	beq.n	8009eb0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009ea8:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7f9 fbb4 	bl	8003618 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d012      	beq.n	8009ee4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009edc:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f8fa 	bl	800a0d8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	775a      	strb	r2, [r3, #29]
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	40013c00 	.word	0x40013c00

08009ef8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a0d      	ldr	r2, [pc, #52]	@ (8009f40 <HAL_RTC_WaitForSynchro+0x48>)
 8009f0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f0c:	f7fa f8fc 	bl	8004108 <HAL_GetTick>
 8009f10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f12:	e009      	b.n	8009f28 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f14:	f7fa f8f8 	bl	8004108 <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f22:	d901      	bls.n	8009f28 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e007      	b.n	8009f38 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	f003 0320 	and.w	r3, r3, #32
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0ee      	beq.n	8009f14 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	00013f5f 	.word	0x00013f5f

08009f44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d122      	bne.n	8009fa8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009f70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f72:	f7fa f8c9 	bl	8004108 <HAL_GetTick>
 8009f76:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f78:	e00c      	b.n	8009f94 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f7a:	f7fa f8c5 	bl	8004108 <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f88:	d904      	bls.n	8009f94 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2204      	movs	r2, #4
 8009f8e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <RTC_EnterInitMode+0x64>
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d1e8      	bne.n	8009f7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fcc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f003 0320 	and.w	r3, r3, #32
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff ff8b 	bl	8009ef8 <HAL_RTC_WaitForSynchro>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2204      	movs	r2, #4
 8009fec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a00a:	e005      	b.n	800a018 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	3301      	adds	r3, #1
 800a010:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	3b0a      	subs	r3, #10
 800a016:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	2b09      	cmp	r3, #9
 800a01c:	d8f6      	bhi.n	800a00c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	b2db      	uxtb	r3, r3
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	b2da      	uxtb	r2, r3
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	4313      	orrs	r3, r2
 800a02a:	b2db      	uxtb	r3, r3
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	091b      	lsrs	r3, r3, #4
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	461a      	mov	r2, r3
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	f003 030f 	and.w	r3, r3, #15
 800a062:	b2db      	uxtb	r3, r3
 800a064:	4413      	add	r3, r2
 800a066:	b2db      	uxtb	r3, r3
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3350      	adds	r3, #80	@ 0x50
 800a08a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	4413      	add	r3, r2
 800a094:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	601a      	str	r2, [r3, #0]
}
 800a09c:	bf00      	nop
 800a09e:	371c      	adds	r7, #28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3350      	adds	r3, #80	@ 0x50
 800a0bc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e022      	b.n	800a144 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d105      	bne.n	800a116 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7f9 fbe1 	bl	80038d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2203      	movs	r2, #3
 800a11a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f814 	bl	800a14c <HAL_SD_InitCard>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e00a      	b.n	800a144 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a14c:	b5b0      	push	{r4, r5, r7, lr}
 800a14e:	b08e      	sub	sp, #56	@ 0x38
 800a150:	af04      	add	r7, sp, #16
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a154:	2300      	movs	r3, #0
 800a156:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a158:	2300      	movs	r3, #0
 800a15a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a15c:	2300      	movs	r3, #0
 800a15e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a164:	2300      	movs	r3, #0
 800a166:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a168:	2376      	movs	r3, #118	@ 0x76
 800a16a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681d      	ldr	r5, [r3, #0]
 800a170:	466c      	mov	r4, sp
 800a172:	f107 0314 	add.w	r3, r7, #20
 800a176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a17a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a17e:	f107 0308 	add.w	r3, r7, #8
 800a182:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a184:	4628      	mov	r0, r5
 800a186:	f003 f8ad 	bl	800d2e4 <SDIO_Init>
 800a18a:	4603      	mov	r3, r0
 800a18c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e04f      	b.n	800a23c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a19c:	4b29      	ldr	r3, [pc, #164]	@ (800a244 <HAL_SD_InitCard+0xf8>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f003 f8e5 	bl	800d376 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a1ac:	4b25      	ldr	r3, [pc, #148]	@ (800a244 <HAL_SD_InitCard+0xf8>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a1b2:	2002      	movs	r0, #2
 800a1b4:	f7f9 ffb4 	bl	8004120 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fe79 	bl	800aeb0 <SD_PowerON>
 800a1be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e02e      	b.n	800a23c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fd98 	bl	800ad14 <SD_InitCard>
 800a1e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00b      	beq.n	800a204 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e01b      	b.n	800a23c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a20c:	4618      	mov	r0, r3
 800a20e:	f003 f944 	bl	800d49a <SDMMC_CmdBlockLength>
 800a212:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00f      	beq.n	800a23a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a0a      	ldr	r2, [pc, #40]	@ (800a248 <HAL_SD_InitCard+0xfc>)
 800a220:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	431a      	orrs	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e000      	b.n	800a23c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3728      	adds	r7, #40	@ 0x28
 800a240:	46bd      	mov	sp, r7
 800a242:	bdb0      	pop	{r4, r5, r7, pc}
 800a244:	422580a0 	.word	0x422580a0
 800a248:	004005ff 	.word	0x004005ff

0800a24c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b092      	sub	sp, #72	@ 0x48
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a25a:	f7f9 ff55 	bl	8004108 <HAL_GetTick>
 800a25e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d107      	bne.n	800a27e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a272:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e1c5      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b01      	cmp	r3, #1
 800a288:	f040 81b8 	bne.w	800a5fc <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	441a      	add	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d907      	bls.n	800a2b0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e1ac      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d002      	beq.n	800a2ce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ca:	025b      	lsls	r3, r3, #9
 800a2cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	025b      	lsls	r3, r3, #9
 800a2d8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2da:	2390      	movs	r3, #144	@ 0x90
 800a2dc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f107 0214 	add.w	r2, r7, #20
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f003 f8a4 	bl	800d442 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d90a      	bls.n	800a316 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2202      	movs	r2, #2
 800a304:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a30c:	4618      	mov	r0, r3
 800a30e:	f003 f908 	bl	800d522 <SDMMC_CmdReadMultiBlock>
 800a312:	6478      	str	r0, [r7, #68]	@ 0x44
 800a314:	e009      	b.n	800a32a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a322:	4618      	mov	r0, r3
 800a324:	f003 f8db 	bl	800d4de <SDMMC_CmdReadSingleBlock>
 800a328:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a32a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d012      	beq.n	800a356 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a7e      	ldr	r2, [pc, #504]	@ (800a530 <HAL_SD_ReadBlocks+0x2e4>)
 800a336:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a33c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a33e:	431a      	orrs	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e159      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a35a:	e061      	b.n	800a420 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a362:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d03c      	beq.n	800a3e4 <HAL_SD_ReadBlocks+0x198>
 800a36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d039      	beq.n	800a3e4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800a370:	2300      	movs	r3, #0
 800a372:	643b      	str	r3, [r7, #64]	@ 0x40
 800a374:	e033      	b.n	800a3de <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f002 ffdd 	bl	800d33a <SDIO_ReadFIFO>
 800a380:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800a382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a384:	b2da      	uxtb	r2, r3
 800a386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a388:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38c:	3301      	adds	r3, #1
 800a38e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a392:	3b01      	subs	r3, #1
 800a394:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a398:	0a1b      	lsrs	r3, r3, #8
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a39e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ae:	0c1b      	lsrs	r3, r3, #16
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c4:	0e1b      	lsrs	r3, r3, #24
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800a3d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3da:	3301      	adds	r3, #1
 800a3dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e0:	2b07      	cmp	r3, #7
 800a3e2:	d9c8      	bls.n	800a376 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a3e4:	f7f9 fe90 	bl	8004108 <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d902      	bls.n	800a3fa <HAL_SD_ReadBlocks+0x1ae>
 800a3f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d112      	bne.n	800a420 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a4c      	ldr	r2, [pc, #304]	@ (800a530 <HAL_SD_ReadBlocks+0x2e4>)
 800a400:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a406:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e0f4      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a426:	f240 332a 	movw	r3, #810	@ 0x32a
 800a42a:	4013      	ands	r3, r2
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d095      	beq.n	800a35c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d022      	beq.n	800a484 <HAL_SD_ReadBlocks+0x238>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d91f      	bls.n	800a484 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d01b      	beq.n	800a484 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	f003 f8cd 	bl	800d5f0 <SDMMC_CmdStopTransfer>
 800a456:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d012      	beq.n	800a484 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a33      	ldr	r2, [pc, #204]	@ (800a530 <HAL_SD_ReadBlocks+0x2e4>)
 800a464:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a46a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a46c:	431a      	orrs	r2, r3
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e0c2      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a48a:	f003 0308 	and.w	r3, r3, #8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <HAL_SD_ReadBlocks+0x254>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d012      	beq.n	800a4c6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a22      	ldr	r2, [pc, #136]	@ (800a530 <HAL_SD_ReadBlocks+0x2e4>)
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ac:	f043 0208 	orr.w	r2, r3, #8
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e0a1      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d012      	beq.n	800a4fa <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a15      	ldr	r2, [pc, #84]	@ (800a530 <HAL_SD_ReadBlocks+0x2e4>)
 800a4da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e0:	f043 0202 	orr.w	r2, r3, #2
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e087      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a500:	f003 0320 	and.w	r3, r3, #32
 800a504:	2b00      	cmp	r3, #0
 800a506:	d064      	beq.n	800a5d2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a08      	ldr	r2, [pc, #32]	@ (800a530 <HAL_SD_ReadBlocks+0x2e4>)
 800a50e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a514:	f043 0220 	orr.w	r2, r3, #32
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e06d      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
 800a52e:	bf00      	nop
 800a530:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4618      	mov	r0, r3
 800a53a:	f002 fefe 	bl	800d33a <SDIO_ReadFIFO>
 800a53e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800a540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a542:	b2da      	uxtb	r2, r3
 800a544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a546:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54a:	3301      	adds	r3, #1
 800a54c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a550:	3b01      	subs	r3, #1
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a556:	0a1b      	lsrs	r3, r3, #8
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a560:	3301      	adds	r3, #1
 800a562:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a566:	3b01      	subs	r3, #1
 800a568:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800a56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56c:	0c1b      	lsrs	r3, r3, #16
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a572:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	3301      	adds	r3, #1
 800a578:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a57c:	3b01      	subs	r3, #1
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a582:	0e1b      	lsrs	r3, r3, #24
 800a584:	b2da      	uxtb	r2, r3
 800a586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a588:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800a58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a58c:	3301      	adds	r3, #1
 800a58e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800a590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a592:	3b01      	subs	r3, #1
 800a594:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a596:	f7f9 fdb7 	bl	8004108 <HAL_GetTick>
 800a59a:	4602      	mov	r2, r0
 800a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d902      	bls.n	800a5ac <HAL_SD_ReadBlocks+0x360>
 800a5a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d112      	bne.n	800a5d2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a18      	ldr	r2, [pc, #96]	@ (800a614 <HAL_SD_ReadBlocks+0x3c8>)
 800a5b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e01b      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <HAL_SD_ReadBlocks+0x39a>
 800a5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1a6      	bne.n	800a534 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a5ee:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e006      	b.n	800a60a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a600:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
  }
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3748      	adds	r7, #72	@ 0x48
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	004005ff 	.word	0x004005ff

0800a618 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b092      	sub	sp, #72	@ 0x48
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a626:	f7f9 fd6f 	bl	8004108 <HAL_GetTick>
 800a62a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d107      	bne.n	800a64a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e16d      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b01      	cmp	r3, #1
 800a654:	f040 8160 	bne.w	800a918 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a65e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	441a      	add	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a668:	429a      	cmp	r2, r3
 800a66a:	d907      	bls.n	800a67c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a670:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e154      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2203      	movs	r2, #3
 800a680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2200      	movs	r2, #0
 800a68a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a690:	2b01      	cmp	r3, #1
 800a692:	d002      	beq.n	800a69a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	025b      	lsls	r3, r3, #9
 800a698:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	025b      	lsls	r3, r3, #9
 800a6a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a6a6:	2390      	movs	r3, #144	@ 0x90
 800a6a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f107 0218 	add.w	r2, r7, #24
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f002 febe 	bl	800d442 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d90a      	bls.n	800a6e2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f002 ff66 	bl	800d5aa <SDMMC_CmdWriteMultiBlock>
 800a6de:	6478      	str	r0, [r7, #68]	@ 0x44
 800a6e0:	e009      	b.n	800a6f6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2210      	movs	r2, #16
 800a6e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f002 ff39 	bl	800d566 <SDMMC_CmdWriteSingleBlock>
 800a6f4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d012      	beq.n	800a722 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a8b      	ldr	r2, [pc, #556]	@ (800a930 <HAL_SD_WriteBlocks+0x318>)
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a70a:	431a      	orrs	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e101      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a726:	e065      	b.n	800a7f4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a72e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d040      	beq.n	800a7b8 <HAL_SD_WriteBlocks+0x1a0>
 800a736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d03d      	beq.n	800a7b8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800a73c:	2300      	movs	r3, #0
 800a73e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a740:	e037      	b.n	800a7b2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800a742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74a:	3301      	adds	r3, #1
 800a74c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a750:	3b01      	subs	r3, #1
 800a752:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800a754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	021a      	lsls	r2, r3, #8
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a762:	3301      	adds	r3, #1
 800a764:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a768:	3b01      	subs	r3, #1
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800a76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	041a      	lsls	r2, r3, #16
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	4313      	orrs	r3, r2
 800a776:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77a:	3301      	adds	r3, #1
 800a77c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a77e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a780:	3b01      	subs	r3, #1
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	061a      	lsls	r2, r3, #24
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800a790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a792:	3301      	adds	r3, #1
 800a794:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800a796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a798:	3b01      	subs	r3, #1
 800a79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f107 0214 	add.w	r2, r7, #20
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f002 fdd4 	bl	800d354 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800a7ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b4:	2b07      	cmp	r3, #7
 800a7b6:	d9c4      	bls.n	800a742 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800a7b8:	f7f9 fca6 	bl	8004108 <HAL_GetTick>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c0:	1ad3      	subs	r3, r2, r3
 800a7c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d902      	bls.n	800a7ce <HAL_SD_WriteBlocks+0x1b6>
 800a7c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d112      	bne.n	800a7f4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a57      	ldr	r2, [pc, #348]	@ (800a930 <HAL_SD_WriteBlocks+0x318>)
 800a7d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e098      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7fa:	f240 331a 	movw	r3, #794	@ 0x31a
 800a7fe:	4013      	ands	r3, r2
 800a800:	2b00      	cmp	r3, #0
 800a802:	d091      	beq.n	800a728 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a80a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d022      	beq.n	800a858 <HAL_SD_WriteBlocks+0x240>
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d91f      	bls.n	800a858 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d01b      	beq.n	800a858 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f002 fee3 	bl	800d5f0 <SDMMC_CmdStopTransfer>
 800a82a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800a82c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d012      	beq.n	800a858 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a3e      	ldr	r2, [pc, #248]	@ (800a930 <HAL_SD_WriteBlocks+0x318>)
 800a838:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a83e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a840:	431a      	orrs	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e066      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85e:	f003 0308 	and.w	r3, r3, #8
 800a862:	2b00      	cmp	r3, #0
 800a864:	d106      	bne.n	800a874 <HAL_SD_WriteBlocks+0x25c>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a86c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a870:	2b00      	cmp	r3, #0
 800a872:	d012      	beq.n	800a89a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a2d      	ldr	r2, [pc, #180]	@ (800a930 <HAL_SD_WriteBlocks+0x318>)
 800a87a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a880:	f043 0208 	orr.w	r2, r3, #8
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e045      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a0:	f003 0302 	and.w	r3, r3, #2
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d012      	beq.n	800a8ce <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a20      	ldr	r2, [pc, #128]	@ (800a930 <HAL_SD_WriteBlocks+0x318>)
 800a8ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8b4:	f043 0202 	orr.w	r2, r3, #2
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e02b      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d4:	f003 0310 	and.w	r3, r3, #16
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d012      	beq.n	800a902 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a13      	ldr	r2, [pc, #76]	@ (800a930 <HAL_SD_WriteBlocks+0x318>)
 800a8e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e8:	f043 0210 	orr.w	r2, r3, #16
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e011      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a90a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	e006      	b.n	800a926 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
  }
}
 800a926:	4618      	mov	r0, r3
 800a928:	3748      	adds	r7, #72	@ 0x48
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	004005ff 	.word	0x004005ff

0800a934 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a942:	0f9b      	lsrs	r3, r3, #30
 800a944:	b2da      	uxtb	r2, r3
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a94e:	0e9b      	lsrs	r3, r3, #26
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f003 030f 	and.w	r3, r3, #15
 800a956:	b2da      	uxtb	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a960:	0e1b      	lsrs	r3, r3, #24
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a972:	0c1b      	lsrs	r3, r3, #16
 800a974:	b2da      	uxtb	r2, r3
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a97e:	0a1b      	lsrs	r3, r3, #8
 800a980:	b2da      	uxtb	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a994:	0d1b      	lsrs	r3, r3, #20
 800a996:	b29a      	uxth	r2, r3
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9a0:	0c1b      	lsrs	r3, r3, #16
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	f003 030f 	and.w	r3, r3, #15
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9b2:	0bdb      	lsrs	r3, r3, #15
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9c4:	0b9b      	lsrs	r3, r3, #14
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9d6:	0b5b      	lsrs	r3, r3, #13
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9e8:	0b1b      	lsrs	r3, r3, #12
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d163      	bne.n	800aacc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa08:	009a      	lsls	r2, r3, #2
 800aa0a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa0e:	4013      	ands	r3, r2
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800aa14:	0f92      	lsrs	r2, r2, #30
 800aa16:	431a      	orrs	r2, r3
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa20:	0edb      	lsrs	r3, r3, #27
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0307 	and.w	r3, r3, #7
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa32:	0e1b      	lsrs	r3, r3, #24
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa44:	0d5b      	lsrs	r3, r3, #21
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	f003 0307 	and.w	r3, r3, #7
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa56:	0c9b      	lsrs	r3, r3, #18
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	f003 0307 	and.w	r3, r3, #7
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa68:	0bdb      	lsrs	r3, r3, #15
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f003 0307 	and.w	r3, r3, #7
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	7e1b      	ldrb	r3, [r3, #24]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	f003 0307 	and.w	r3, r3, #7
 800aa8a:	3302      	adds	r3, #2
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800aa96:	fb03 f202 	mul.w	r2, r3, r2
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	7a1b      	ldrb	r3, [r3, #8]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	f003 030f 	and.w	r3, r3, #15
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	409a      	lsls	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800aab8:	0a52      	lsrs	r2, r2, #9
 800aaba:	fb03 f202 	mul.w	r2, r3, r2
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aac8:	661a      	str	r2, [r3, #96]	@ 0x60
 800aaca:	e031      	b.n	800ab30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d11d      	bne.n	800ab10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aad8:	041b      	lsls	r3, r3, #16
 800aada:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aae2:	0c1b      	lsrs	r3, r3, #16
 800aae4:	431a      	orrs	r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	029a      	lsls	r2, r3, #10
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab04:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab0e:	e00f      	b.n	800ab30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a58      	ldr	r2, [pc, #352]	@ (800ac78 <HAL_SD_GetCardCSD+0x344>)
 800ab16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e09d      	b.n	800ac6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab34:	0b9b      	lsrs	r3, r3, #14
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab46:	09db      	lsrs	r3, r3, #7
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab68:	0fdb      	lsrs	r3, r3, #31
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab74:	0f5b      	lsrs	r3, r3, #29
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f003 0303 	and.w	r3, r3, #3
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab86:	0e9b      	lsrs	r3, r3, #26
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab98:	0d9b      	lsrs	r3, r3, #22
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	f003 030f 	and.w	r3, r3, #15
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abaa:	0d5b      	lsrs	r3, r3, #21
 800abac:	b2db      	uxtb	r3, r3
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abc6:	0c1b      	lsrs	r3, r3, #16
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abda:	0bdb      	lsrs	r3, r3, #15
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abee:	0b9b      	lsrs	r3, r3, #14
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac02:	0b5b      	lsrs	r3, r3, #13
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac16:	0b1b      	lsrs	r3, r3, #12
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2a:	0a9b      	lsrs	r3, r3, #10
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	f003 0303 	and.w	r3, r3, #3
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac52:	085b      	lsrs	r3, r3, #1
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac5a:	b2da      	uxtb	r2, r3
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	004005ff 	.word	0x004005ff

0800ac7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ace0:	f107 030c 	add.w	r3, r7, #12
 800ace4:	4619      	mov	r1, r3
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f970 	bl	800afcc <SD_SendStatus>
 800acec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	431a      	orrs	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	0a5b      	lsrs	r3, r3, #9
 800ad04:	f003 030f 	and.w	r3, r3, #15
 800ad08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad0a:	693b      	ldr	r3, [r7, #16]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad14:	b5b0      	push	{r4, r5, r7, lr}
 800ad16:	b094      	sub	sp, #80	@ 0x50
 800ad18:	af04      	add	r7, sp, #16
 800ad1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f002 fb34 	bl	800d392 <SDIO_GetPowerState>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d102      	bne.n	800ad36 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad30:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad34:	e0b8      	b.n	800aea8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d02f      	beq.n	800ad9e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f002 fd1b 	bl	800d77e <SDMMC_CmdSendCID>
 800ad48:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d001      	beq.n	800ad54 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad52:	e0a9      	b.n	800aea8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2100      	movs	r1, #0
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f002 fb5e 	bl	800d41c <SDIO_GetResponse>
 800ad60:	4602      	mov	r2, r0
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2104      	movs	r1, #4
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f002 fb55 	bl	800d41c <SDIO_GetResponse>
 800ad72:	4602      	mov	r2, r0
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2108      	movs	r1, #8
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f002 fb4c 	bl	800d41c <SDIO_GetResponse>
 800ad84:	4602      	mov	r2, r0
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	210c      	movs	r1, #12
 800ad90:	4618      	mov	r0, r3
 800ad92:	f002 fb43 	bl	800d41c <SDIO_GetResponse>
 800ad96:	4602      	mov	r2, r0
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d00d      	beq.n	800adc2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f107 020e 	add.w	r2, r7, #14
 800adae:	4611      	mov	r1, r2
 800adb0:	4618      	mov	r0, r3
 800adb2:	f002 fd21 	bl	800d7f8 <SDMMC_CmdSetRelAdd>
 800adb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <SD_InitCard+0xae>
    {
      return errorstate;
 800adbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc0:	e072      	b.n	800aea8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d036      	beq.n	800ae38 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adca:	89fb      	ldrh	r3, [r7, #14]
 800adcc:	461a      	mov	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adda:	041b      	lsls	r3, r3, #16
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f002 fceb 	bl	800d7ba <SDMMC_CmdSendCSD>
 800ade4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ade6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800adec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adee:	e05b      	b.n	800aea8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2100      	movs	r1, #0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f002 fb10 	bl	800d41c <SDIO_GetResponse>
 800adfc:	4602      	mov	r2, r0
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2104      	movs	r1, #4
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f002 fb07 	bl	800d41c <SDIO_GetResponse>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2108      	movs	r1, #8
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f002 fafe 	bl	800d41c <SDIO_GetResponse>
 800ae20:	4602      	mov	r2, r0
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	210c      	movs	r1, #12
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f002 faf5 	bl	800d41c <SDIO_GetResponse>
 800ae32:	4602      	mov	r2, r0
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2104      	movs	r1, #4
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f002 faec 	bl	800d41c <SDIO_GetResponse>
 800ae44:	4603      	mov	r3, r0
 800ae46:	0d1a      	lsrs	r2, r3, #20
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae4c:	f107 0310 	add.w	r3, r7, #16
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff fd6e 	bl	800a934 <HAL_SD_GetCardCSD>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae62:	e021      	b.n	800aea8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6819      	ldr	r1, [r3, #0]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae6c:	041b      	lsls	r3, r3, #16
 800ae6e:	2200      	movs	r2, #0
 800ae70:	461c      	mov	r4, r3
 800ae72:	4615      	mov	r5, r2
 800ae74:	4622      	mov	r2, r4
 800ae76:	462b      	mov	r3, r5
 800ae78:	4608      	mov	r0, r1
 800ae7a:	f002 fbdb 	bl	800d634 <SDMMC_CmdSelDesel>
 800ae7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <SD_InitCard+0x176>
  {
    return errorstate;
 800ae86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae88:	e00e      	b.n	800aea8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681d      	ldr	r5, [r3, #0]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	466c      	mov	r4, sp
 800ae92:	f103 0210 	add.w	r2, r3, #16
 800ae96:	ca07      	ldmia	r2, {r0, r1, r2}
 800ae98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aea0:	4628      	mov	r0, r5
 800aea2:	f002 fa1f 	bl	800d2e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3740      	adds	r7, #64	@ 0x40
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bdb0      	pop	{r4, r5, r7, pc}

0800aeb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	2300      	movs	r3, #0
 800aec2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f002 fbd6 	bl	800d67a <SDMMC_CmdGoIdleState>
 800aece:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <SD_PowerON+0x2a>
  {
    return errorstate;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	e072      	b.n	800afc0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4618      	mov	r0, r3
 800aee0:	f002 fbe9 	bl	800d6b6 <SDMMC_CmdOperCond>
 800aee4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00d      	beq.n	800af08 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f002 fbbf 	bl	800d67a <SDMMC_CmdGoIdleState>
 800aefc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d004      	beq.n	800af0e <SD_PowerON+0x5e>
    {
      return errorstate;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	e05b      	b.n	800afc0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af12:	2b01      	cmp	r3, #1
 800af14:	d137      	bne.n	800af86 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2100      	movs	r1, #0
 800af1c:	4618      	mov	r0, r3
 800af1e:	f002 fbe9 	bl	800d6f4 <SDMMC_CmdAppCommand>
 800af22:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d02d      	beq.n	800af86 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af2e:	e047      	b.n	800afc0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2100      	movs	r1, #0
 800af36:	4618      	mov	r0, r3
 800af38:	f002 fbdc 	bl	800d6f4 <SDMMC_CmdAppCommand>
 800af3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <SD_PowerON+0x98>
    {
      return errorstate;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	e03b      	b.n	800afc0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	491e      	ldr	r1, [pc, #120]	@ (800afc8 <SD_PowerON+0x118>)
 800af4e:	4618      	mov	r0, r3
 800af50:	f002 fbf2 	bl	800d738 <SDMMC_CmdAppOperCommand>
 800af54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af60:	e02e      	b.n	800afc0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2100      	movs	r1, #0
 800af68:	4618      	mov	r0, r3
 800af6a:	f002 fa57 	bl	800d41c <SDIO_GetResponse>
 800af6e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	0fdb      	lsrs	r3, r3, #31
 800af74:	2b01      	cmp	r3, #1
 800af76:	d101      	bne.n	800af7c <SD_PowerON+0xcc>
 800af78:	2301      	movs	r3, #1
 800af7a:	e000      	b.n	800af7e <SD_PowerON+0xce>
 800af7c:	2300      	movs	r3, #0
 800af7e:	613b      	str	r3, [r7, #16]

    count++;
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	3301      	adds	r3, #1
 800af84:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d802      	bhi.n	800af96 <SD_PowerON+0xe6>
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0cc      	beq.n	800af30 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d902      	bls.n	800afa6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afa4:	e00c      	b.n	800afc0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	645a      	str	r2, [r3, #68]	@ 0x44
 800afb6:	e002      	b.n	800afbe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3718      	adds	r7, #24
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	c1100000 	.word	0xc1100000

0800afcc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800afdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800afe0:	e018      	b.n	800b014 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afea:	041b      	lsls	r3, r3, #16
 800afec:	4619      	mov	r1, r3
 800afee:	4610      	mov	r0, r2
 800aff0:	f002 fc23 	bl	800d83a <SDMMC_CmdSendStatus>
 800aff4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <SD_SendStatus+0x34>
  {
    return errorstate;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	e009      	b.n	800b014 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f002 fa08 	bl	800d41c <SDIO_GetResponse>
 800b00c:	4602      	mov	r2, r0
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d101      	bne.n	800b02e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e041      	b.n	800b0b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d106      	bne.n	800b048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7f8 fcb0 	bl	80039a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2202      	movs	r2, #2
 800b04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3304      	adds	r3, #4
 800b058:	4619      	mov	r1, r3
 800b05a:	4610      	mov	r0, r2
 800b05c:	f000 fd18 	bl	800ba90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b082      	sub	sp, #8
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6a1a      	ldr	r2, [r3, #32]
 800b0d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10f      	bne.n	800b0fa <HAL_TIM_Base_DeInit+0x40>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6a1a      	ldr	r2, [r3, #32]
 800b0e0:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d107      	bne.n	800b0fa <HAL_TIM_Base_DeInit+0x40>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f022 0201 	bic.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7f8 fd14 	bl	8003b28 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b01      	cmp	r3, #1
 800b176:	d001      	beq.n	800b17c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e03c      	b.n	800b1f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a1e      	ldr	r2, [pc, #120]	@ (800b204 <HAL_TIM_Base_Start+0xa0>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d018      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x5c>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b196:	d013      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x5c>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a1a      	ldr	r2, [pc, #104]	@ (800b208 <HAL_TIM_Base_Start+0xa4>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d00e      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x5c>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a19      	ldr	r2, [pc, #100]	@ (800b20c <HAL_TIM_Base_Start+0xa8>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d009      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x5c>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a17      	ldr	r2, [pc, #92]	@ (800b210 <HAL_TIM_Base_Start+0xac>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d004      	beq.n	800b1c0 <HAL_TIM_Base_Start+0x5c>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a16      	ldr	r2, [pc, #88]	@ (800b214 <HAL_TIM_Base_Start+0xb0>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d111      	bne.n	800b1e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f003 0307 	and.w	r3, r3, #7
 800b1ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b06      	cmp	r3, #6
 800b1d0:	d010      	beq.n	800b1f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f042 0201 	orr.w	r2, r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1e2:	e007      	b.n	800b1f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f042 0201 	orr.w	r2, r2, #1
 800b1f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	40010000 	.word	0x40010000
 800b208:	40000400 	.word	0x40000400
 800b20c:	40000800 	.word	0x40000800
 800b210:	40000c00 	.word	0x40000c00
 800b214:	40014000 	.word	0x40014000

0800b218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d001      	beq.n	800b230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e044      	b.n	800b2ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68da      	ldr	r2, [r3, #12]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f042 0201 	orr.w	r2, r2, #1
 800b246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a1e      	ldr	r2, [pc, #120]	@ (800b2c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d018      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x6c>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b25a:	d013      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x6c>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a1a      	ldr	r2, [pc, #104]	@ (800b2cc <HAL_TIM_Base_Start_IT+0xb4>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d00e      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x6c>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a19      	ldr	r2, [pc, #100]	@ (800b2d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d009      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x6c>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a17      	ldr	r2, [pc, #92]	@ (800b2d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d004      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x6c>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a16      	ldr	r2, [pc, #88]	@ (800b2d8 <HAL_TIM_Base_Start_IT+0xc0>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d111      	bne.n	800b2a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	f003 0307 	and.w	r3, r3, #7
 800b28e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b06      	cmp	r3, #6
 800b294:	d010      	beq.n	800b2b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f042 0201 	orr.w	r2, r2, #1
 800b2a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a6:	e007      	b.n	800b2b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0201 	orr.w	r2, r2, #1
 800b2b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	40010000 	.word	0x40010000
 800b2cc:	40000400 	.word	0x40000400
 800b2d0:	40000800 	.word	0x40000800
 800b2d4:	40000c00 	.word	0x40000c00
 800b2d8:	40014000 	.word	0x40014000

0800b2dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68da      	ldr	r2, [r3, #12]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0201 	bic.w	r2, r2, #1
 800b2f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6a1a      	ldr	r2, [r3, #32]
 800b2fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b2fe:	4013      	ands	r3, r2
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10f      	bne.n	800b324 <HAL_TIM_Base_Stop_IT+0x48>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6a1a      	ldr	r2, [r3, #32]
 800b30a:	f240 4344 	movw	r3, #1092	@ 0x444
 800b30e:	4013      	ands	r3, r2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d107      	bne.n	800b324 <HAL_TIM_Base_Stop_IT+0x48>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f022 0201 	bic.w	r2, r2, #1
 800b322:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	370c      	adds	r7, #12
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b082      	sub	sp, #8
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d101      	bne.n	800b34c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e041      	b.n	800b3d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b00      	cmp	r3, #0
 800b356:	d106      	bne.n	800b366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f839 	bl	800b3d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2202      	movs	r2, #2
 800b36a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3304      	adds	r3, #4
 800b376:	4619      	mov	r1, r3
 800b378:	4610      	mov	r0, r2
 800b37a:	f000 fb89 	bl	800ba90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d109      	bne.n	800b410 <HAL_TIM_PWM_Start+0x24>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b01      	cmp	r3, #1
 800b406:	bf14      	ite	ne
 800b408:	2301      	movne	r3, #1
 800b40a:	2300      	moveq	r3, #0
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	e022      	b.n	800b456 <HAL_TIM_PWM_Start+0x6a>
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2b04      	cmp	r3, #4
 800b414:	d109      	bne.n	800b42a <HAL_TIM_PWM_Start+0x3e>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	2b01      	cmp	r3, #1
 800b420:	bf14      	ite	ne
 800b422:	2301      	movne	r3, #1
 800b424:	2300      	moveq	r3, #0
 800b426:	b2db      	uxtb	r3, r3
 800b428:	e015      	b.n	800b456 <HAL_TIM_PWM_Start+0x6a>
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	d109      	bne.n	800b444 <HAL_TIM_PWM_Start+0x58>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b01      	cmp	r3, #1
 800b43a:	bf14      	ite	ne
 800b43c:	2301      	movne	r3, #1
 800b43e:	2300      	moveq	r3, #0
 800b440:	b2db      	uxtb	r3, r3
 800b442:	e008      	b.n	800b456 <HAL_TIM_PWM_Start+0x6a>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	bf14      	ite	ne
 800b450:	2301      	movne	r3, #1
 800b452:	2300      	moveq	r3, #0
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e068      	b.n	800b530 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d104      	bne.n	800b46e <HAL_TIM_PWM_Start+0x82>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b46c:	e013      	b.n	800b496 <HAL_TIM_PWM_Start+0xaa>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b04      	cmp	r3, #4
 800b472:	d104      	bne.n	800b47e <HAL_TIM_PWM_Start+0x92>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b47c:	e00b      	b.n	800b496 <HAL_TIM_PWM_Start+0xaa>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b08      	cmp	r3, #8
 800b482:	d104      	bne.n	800b48e <HAL_TIM_PWM_Start+0xa2>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b48c:	e003      	b.n	800b496 <HAL_TIM_PWM_Start+0xaa>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2202      	movs	r2, #2
 800b492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2201      	movs	r2, #1
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 fda8 	bl	800bff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a23      	ldr	r2, [pc, #140]	@ (800b538 <HAL_TIM_PWM_Start+0x14c>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d107      	bne.n	800b4be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b4bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a1d      	ldr	r2, [pc, #116]	@ (800b538 <HAL_TIM_PWM_Start+0x14c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d018      	beq.n	800b4fa <HAL_TIM_PWM_Start+0x10e>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4d0:	d013      	beq.n	800b4fa <HAL_TIM_PWM_Start+0x10e>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a19      	ldr	r2, [pc, #100]	@ (800b53c <HAL_TIM_PWM_Start+0x150>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d00e      	beq.n	800b4fa <HAL_TIM_PWM_Start+0x10e>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a17      	ldr	r2, [pc, #92]	@ (800b540 <HAL_TIM_PWM_Start+0x154>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d009      	beq.n	800b4fa <HAL_TIM_PWM_Start+0x10e>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a16      	ldr	r2, [pc, #88]	@ (800b544 <HAL_TIM_PWM_Start+0x158>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d004      	beq.n	800b4fa <HAL_TIM_PWM_Start+0x10e>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a14      	ldr	r2, [pc, #80]	@ (800b548 <HAL_TIM_PWM_Start+0x15c>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d111      	bne.n	800b51e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f003 0307 	and.w	r3, r3, #7
 800b504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b06      	cmp	r3, #6
 800b50a:	d010      	beq.n	800b52e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f042 0201 	orr.w	r2, r2, #1
 800b51a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b51c:	e007      	b.n	800b52e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f042 0201 	orr.w	r2, r2, #1
 800b52c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	40010000 	.word	0x40010000
 800b53c:	40000400 	.word	0x40000400
 800b540:	40000800 	.word	0x40000800
 800b544:	40000c00 	.word	0x40000c00
 800b548:	40014000 	.word	0x40014000

0800b54c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d020      	beq.n	800b5b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f003 0302 	and.w	r3, r3, #2
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01b      	beq.n	800b5b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f06f 0202 	mvn.w	r2, #2
 800b580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	f003 0303 	and.w	r3, r3, #3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fa5b 	bl	800ba52 <HAL_TIM_IC_CaptureCallback>
 800b59c:	e005      	b.n	800b5aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa4d 	bl	800ba3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa5e 	bl	800ba66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d020      	beq.n	800b5fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f003 0304 	and.w	r3, r3, #4
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01b      	beq.n	800b5fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f06f 0204 	mvn.w	r2, #4
 800b5cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa35 	bl	800ba52 <HAL_TIM_IC_CaptureCallback>
 800b5e8:	e005      	b.n	800b5f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fa27 	bl	800ba3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fa38 	bl	800ba66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f003 0308 	and.w	r3, r3, #8
 800b602:	2b00      	cmp	r3, #0
 800b604:	d020      	beq.n	800b648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f003 0308 	and.w	r3, r3, #8
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d01b      	beq.n	800b648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f06f 0208 	mvn.w	r2, #8
 800b618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2204      	movs	r2, #4
 800b61e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	f003 0303 	and.w	r3, r3, #3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa0f 	bl	800ba52 <HAL_TIM_IC_CaptureCallback>
 800b634:	e005      	b.n	800b642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fa01 	bl	800ba3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 fa12 	bl	800ba66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	f003 0310 	and.w	r3, r3, #16
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d020      	beq.n	800b694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f003 0310 	and.w	r3, r3, #16
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d01b      	beq.n	800b694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f06f 0210 	mvn.w	r2, #16
 800b664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2208      	movs	r2, #8
 800b66a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	69db      	ldr	r3, [r3, #28]
 800b672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f9e9 	bl	800ba52 <HAL_TIM_IC_CaptureCallback>
 800b680:	e005      	b.n	800b68e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f9db 	bl	800ba3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f9ec 	bl	800ba66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	f003 0301 	and.w	r3, r3, #1
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00c      	beq.n	800b6b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f06f 0201 	mvn.w	r2, #1
 800b6b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7f7 ff66 	bl	8003584 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00c      	beq.n	800b6dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d007      	beq.n	800b6dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b6d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fd2a 	bl	800c130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00c      	beq.n	800b700 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d007      	beq.n	800b700 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f9bd 	bl	800ba7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f003 0320 	and.w	r3, r3, #32
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00c      	beq.n	800b724 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f003 0320 	and.w	r3, r3, #32
 800b710:	2b00      	cmp	r3, #0
 800b712:	d007      	beq.n	800b724 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f06f 0220 	mvn.w	r2, #32
 800b71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fcfc 	bl	800c11c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b724:	bf00      	nop
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b742:	2b01      	cmp	r3, #1
 800b744:	d101      	bne.n	800b74a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b746:	2302      	movs	r3, #2
 800b748:	e0ae      	b.n	800b8a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2201      	movs	r2, #1
 800b74e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b0c      	cmp	r3, #12
 800b756:	f200 809f 	bhi.w	800b898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b75a:	a201      	add	r2, pc, #4	@ (adr r2, 800b760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b760:	0800b795 	.word	0x0800b795
 800b764:	0800b899 	.word	0x0800b899
 800b768:	0800b899 	.word	0x0800b899
 800b76c:	0800b899 	.word	0x0800b899
 800b770:	0800b7d5 	.word	0x0800b7d5
 800b774:	0800b899 	.word	0x0800b899
 800b778:	0800b899 	.word	0x0800b899
 800b77c:	0800b899 	.word	0x0800b899
 800b780:	0800b817 	.word	0x0800b817
 800b784:	0800b899 	.word	0x0800b899
 800b788:	0800b899 	.word	0x0800b899
 800b78c:	0800b899 	.word	0x0800b899
 800b790:	0800b857 	.word	0x0800b857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 fa04 	bl	800bba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699a      	ldr	r2, [r3, #24]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f042 0208 	orr.w	r2, r2, #8
 800b7ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	699a      	ldr	r2, [r3, #24]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f022 0204 	bic.w	r2, r2, #4
 800b7be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6999      	ldr	r1, [r3, #24]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	691a      	ldr	r2, [r3, #16]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	619a      	str	r2, [r3, #24]
      break;
 800b7d2:	e064      	b.n	800b89e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68b9      	ldr	r1, [r7, #8]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 fa4a 	bl	800bc74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	699a      	ldr	r2, [r3, #24]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699a      	ldr	r2, [r3, #24]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6999      	ldr	r1, [r3, #24]
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	021a      	lsls	r2, r3, #8
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	430a      	orrs	r2, r1
 800b812:	619a      	str	r2, [r3, #24]
      break;
 800b814:	e043      	b.n	800b89e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68b9      	ldr	r1, [r7, #8]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 fa95 	bl	800bd4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	69da      	ldr	r2, [r3, #28]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f042 0208 	orr.w	r2, r2, #8
 800b830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69da      	ldr	r2, [r3, #28]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f022 0204 	bic.w	r2, r2, #4
 800b840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69d9      	ldr	r1, [r3, #28]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	691a      	ldr	r2, [r3, #16]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	61da      	str	r2, [r3, #28]
      break;
 800b854:	e023      	b.n	800b89e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68b9      	ldr	r1, [r7, #8]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 fadf 	bl	800be20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	69da      	ldr	r2, [r3, #28]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69da      	ldr	r2, [r3, #28]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69d9      	ldr	r1, [r3, #28]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	021a      	lsls	r2, r3, #8
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	430a      	orrs	r2, r1
 800b894:	61da      	str	r2, [r3, #28]
      break;
 800b896:	e002      	b.n	800b89e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	75fb      	strb	r3, [r7, #23]
      break;
 800b89c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d101      	bne.n	800b8cc <HAL_TIM_ConfigClockSource+0x1c>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	e0b4      	b.n	800ba36 <HAL_TIM_ConfigClockSource+0x186>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b8ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b904:	d03e      	beq.n	800b984 <HAL_TIM_ConfigClockSource+0xd4>
 800b906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b90a:	f200 8087 	bhi.w	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
 800b90e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b912:	f000 8086 	beq.w	800ba22 <HAL_TIM_ConfigClockSource+0x172>
 800b916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b91a:	d87f      	bhi.n	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
 800b91c:	2b70      	cmp	r3, #112	@ 0x70
 800b91e:	d01a      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0xa6>
 800b920:	2b70      	cmp	r3, #112	@ 0x70
 800b922:	d87b      	bhi.n	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
 800b924:	2b60      	cmp	r3, #96	@ 0x60
 800b926:	d050      	beq.n	800b9ca <HAL_TIM_ConfigClockSource+0x11a>
 800b928:	2b60      	cmp	r3, #96	@ 0x60
 800b92a:	d877      	bhi.n	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
 800b92c:	2b50      	cmp	r3, #80	@ 0x50
 800b92e:	d03c      	beq.n	800b9aa <HAL_TIM_ConfigClockSource+0xfa>
 800b930:	2b50      	cmp	r3, #80	@ 0x50
 800b932:	d873      	bhi.n	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
 800b934:	2b40      	cmp	r3, #64	@ 0x40
 800b936:	d058      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x13a>
 800b938:	2b40      	cmp	r3, #64	@ 0x40
 800b93a:	d86f      	bhi.n	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
 800b93c:	2b30      	cmp	r3, #48	@ 0x30
 800b93e:	d064      	beq.n	800ba0a <HAL_TIM_ConfigClockSource+0x15a>
 800b940:	2b30      	cmp	r3, #48	@ 0x30
 800b942:	d86b      	bhi.n	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
 800b944:	2b20      	cmp	r3, #32
 800b946:	d060      	beq.n	800ba0a <HAL_TIM_ConfigClockSource+0x15a>
 800b948:	2b20      	cmp	r3, #32
 800b94a:	d867      	bhi.n	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d05c      	beq.n	800ba0a <HAL_TIM_ConfigClockSource+0x15a>
 800b950:	2b10      	cmp	r3, #16
 800b952:	d05a      	beq.n	800ba0a <HAL_TIM_ConfigClockSource+0x15a>
 800b954:	e062      	b.n	800ba1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b966:	f000 fb25 	bl	800bfb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	609a      	str	r2, [r3, #8]
      break;
 800b982:	e04f      	b.n	800ba24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b994:	f000 fb0e 	bl	800bfb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689a      	ldr	r2, [r3, #8]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9a6:	609a      	str	r2, [r3, #8]
      break;
 800b9a8:	e03c      	b.n	800ba24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f000 fa82 	bl	800bec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2150      	movs	r1, #80	@ 0x50
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 fadb 	bl	800bf7e <TIM_ITRx_SetConfig>
      break;
 800b9c8:	e02c      	b.n	800ba24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	f000 faa1 	bl	800bf1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2160      	movs	r1, #96	@ 0x60
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 facb 	bl	800bf7e <TIM_ITRx_SetConfig>
      break;
 800b9e8:	e01c      	b.n	800ba24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	f000 fa62 	bl	800bec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2140      	movs	r1, #64	@ 0x40
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 fabb 	bl	800bf7e <TIM_ITRx_SetConfig>
      break;
 800ba08:	e00c      	b.n	800ba24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4619      	mov	r1, r3
 800ba14:	4610      	mov	r0, r2
 800ba16:	f000 fab2 	bl	800bf7e <TIM_ITRx_SetConfig>
      break;
 800ba1a:	e003      	b.n	800ba24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba20:	e000      	b.n	800ba24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ba22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba46:	bf00      	nop
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba5a:	bf00      	nop
 800ba5c:	370c      	adds	r7, #12
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b083      	sub	sp, #12
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba82:	bf00      	nop
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
	...

0800ba90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a3a      	ldr	r2, [pc, #232]	@ (800bb8c <TIM_Base_SetConfig+0xfc>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d00f      	beq.n	800bac8 <TIM_Base_SetConfig+0x38>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baae:	d00b      	beq.n	800bac8 <TIM_Base_SetConfig+0x38>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a37      	ldr	r2, [pc, #220]	@ (800bb90 <TIM_Base_SetConfig+0x100>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d007      	beq.n	800bac8 <TIM_Base_SetConfig+0x38>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a36      	ldr	r2, [pc, #216]	@ (800bb94 <TIM_Base_SetConfig+0x104>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d003      	beq.n	800bac8 <TIM_Base_SetConfig+0x38>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	4a35      	ldr	r2, [pc, #212]	@ (800bb98 <TIM_Base_SetConfig+0x108>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d108      	bne.n	800bada <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a2b      	ldr	r2, [pc, #172]	@ (800bb8c <TIM_Base_SetConfig+0xfc>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d01b      	beq.n	800bb1a <TIM_Base_SetConfig+0x8a>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bae8:	d017      	beq.n	800bb1a <TIM_Base_SetConfig+0x8a>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a28      	ldr	r2, [pc, #160]	@ (800bb90 <TIM_Base_SetConfig+0x100>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d013      	beq.n	800bb1a <TIM_Base_SetConfig+0x8a>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a27      	ldr	r2, [pc, #156]	@ (800bb94 <TIM_Base_SetConfig+0x104>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00f      	beq.n	800bb1a <TIM_Base_SetConfig+0x8a>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a26      	ldr	r2, [pc, #152]	@ (800bb98 <TIM_Base_SetConfig+0x108>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d00b      	beq.n	800bb1a <TIM_Base_SetConfig+0x8a>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a25      	ldr	r2, [pc, #148]	@ (800bb9c <TIM_Base_SetConfig+0x10c>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d007      	beq.n	800bb1a <TIM_Base_SetConfig+0x8a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a24      	ldr	r2, [pc, #144]	@ (800bba0 <TIM_Base_SetConfig+0x110>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d003      	beq.n	800bb1a <TIM_Base_SetConfig+0x8a>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a23      	ldr	r2, [pc, #140]	@ (800bba4 <TIM_Base_SetConfig+0x114>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d108      	bne.n	800bb2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	689a      	ldr	r2, [r3, #8]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a0e      	ldr	r2, [pc, #56]	@ (800bb8c <TIM_Base_SetConfig+0xfc>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d103      	bne.n	800bb60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	691a      	ldr	r2, [r3, #16]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d105      	bne.n	800bb7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f023 0201 	bic.w	r2, r3, #1
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	611a      	str	r2, [r3, #16]
  }
}
 800bb7e:	bf00      	nop
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr
 800bb8a:	bf00      	nop
 800bb8c:	40010000 	.word	0x40010000
 800bb90:	40000400 	.word	0x40000400
 800bb94:	40000800 	.word	0x40000800
 800bb98:	40000c00 	.word	0x40000c00
 800bb9c:	40014000 	.word	0x40014000
 800bba0:	40014400 	.word	0x40014400
 800bba4:	40014800 	.word	0x40014800

0800bba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a1b      	ldr	r3, [r3, #32]
 800bbbc:	f023 0201 	bic.w	r2, r3, #1
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f023 0302 	bic.w	r3, r3, #2
 800bbf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a1c      	ldr	r2, [pc, #112]	@ (800bc70 <TIM_OC1_SetConfig+0xc8>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d10c      	bne.n	800bc1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	f023 0308 	bic.w	r3, r3, #8
 800bc0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	697a      	ldr	r2, [r7, #20]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f023 0304 	bic.w	r3, r3, #4
 800bc1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a13      	ldr	r2, [pc, #76]	@ (800bc70 <TIM_OC1_SetConfig+0xc8>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d111      	bne.n	800bc4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	621a      	str	r2, [r3, #32]
}
 800bc64:	bf00      	nop
 800bc66:	371c      	adds	r7, #28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	40010000 	.word	0x40010000

0800bc74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a1b      	ldr	r3, [r3, #32]
 800bc88:	f023 0210 	bic.w	r2, r3, #16
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	021b      	lsls	r3, r3, #8
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	f023 0320 	bic.w	r3, r3, #32
 800bcbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	011b      	lsls	r3, r3, #4
 800bcc6:	697a      	ldr	r2, [r7, #20]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a1e      	ldr	r2, [pc, #120]	@ (800bd48 <TIM_OC2_SetConfig+0xd4>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d10d      	bne.n	800bcf0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	011b      	lsls	r3, r3, #4
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a15      	ldr	r2, [pc, #84]	@ (800bd48 <TIM_OC2_SetConfig+0xd4>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d113      	bne.n	800bd20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685a      	ldr	r2, [r3, #4]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	621a      	str	r2, [r3, #32]
}
 800bd3a:	bf00      	nop
 800bd3c:	371c      	adds	r7, #28
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	40010000 	.word	0x40010000

0800bd4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a1b      	ldr	r3, [r3, #32]
 800bd60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	69db      	ldr	r3, [r3, #28]
 800bd72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	021b      	lsls	r3, r3, #8
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a1d      	ldr	r2, [pc, #116]	@ (800be1c <TIM_OC3_SetConfig+0xd0>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d10d      	bne.n	800bdc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	021b      	lsls	r3, r3, #8
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bdc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a14      	ldr	r2, [pc, #80]	@ (800be1c <TIM_OC3_SetConfig+0xd0>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d113      	bne.n	800bdf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	011b      	lsls	r3, r3, #4
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	621a      	str	r2, [r3, #32]
}
 800be10:	bf00      	nop
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	40010000 	.word	0x40010000

0800be20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	021b      	lsls	r3, r3, #8
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	4313      	orrs	r3, r2
 800be62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	031b      	lsls	r3, r3, #12
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	4313      	orrs	r3, r2
 800be76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a10      	ldr	r2, [pc, #64]	@ (800bebc <TIM_OC4_SetConfig+0x9c>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d109      	bne.n	800be94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	019b      	lsls	r3, r3, #6
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	4313      	orrs	r3, r2
 800be92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	621a      	str	r2, [r3, #32]
}
 800beae:	bf00      	nop
 800beb0:	371c      	adds	r7, #28
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	40010000 	.word	0x40010000

0800bec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6a1b      	ldr	r3, [r3, #32]
 800bed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6a1b      	ldr	r3, [r3, #32]
 800bed6:	f023 0201 	bic.w	r2, r3, #1
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800beea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	011b      	lsls	r3, r3, #4
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	f023 030a 	bic.w	r3, r3, #10
 800befc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	621a      	str	r2, [r3, #32]
}
 800bf12:	bf00      	nop
 800bf14:	371c      	adds	r7, #28
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b087      	sub	sp, #28
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	60b9      	str	r1, [r7, #8]
 800bf28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	f023 0210 	bic.w	r2, r3, #16
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	031b      	lsls	r3, r3, #12
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	011b      	lsls	r3, r3, #4
 800bf60:	697a      	ldr	r2, [r7, #20]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	621a      	str	r2, [r3, #32]
}
 800bf72:	bf00      	nop
 800bf74:	371c      	adds	r7, #28
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b085      	sub	sp, #20
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	f043 0307 	orr.w	r3, r3, #7
 800bfa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	609a      	str	r2, [r3, #8]
}
 800bfa8:	bf00      	nop
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b087      	sub	sp, #28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	021a      	lsls	r2, r3, #8
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	431a      	orrs	r2, r3
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	609a      	str	r2, [r3, #8]
}
 800bfe8:	bf00      	nop
 800bfea:	371c      	adds	r7, #28
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	f003 031f 	and.w	r3, r3, #31
 800c006:	2201      	movs	r2, #1
 800c008:	fa02 f303 	lsl.w	r3, r2, r3
 800c00c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6a1a      	ldr	r2, [r3, #32]
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	43db      	mvns	r3, r3
 800c016:	401a      	ands	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6a1a      	ldr	r2, [r3, #32]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	f003 031f 	and.w	r3, r3, #31
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	fa01 f303 	lsl.w	r3, r1, r3
 800c02c:	431a      	orrs	r2, r3
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	621a      	str	r2, [r3, #32]
}
 800c032:	bf00      	nop
 800c034:	371c      	adds	r7, #28
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr
	...

0800c040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c054:	2302      	movs	r3, #2
 800c056:	e050      	b.n	800c0fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2202      	movs	r2, #2
 800c064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c07e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	4313      	orrs	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a1c      	ldr	r2, [pc, #112]	@ (800c108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d018      	beq.n	800c0ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0a4:	d013      	beq.n	800c0ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a18      	ldr	r2, [pc, #96]	@ (800c10c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d00e      	beq.n	800c0ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a16      	ldr	r2, [pc, #88]	@ (800c110 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d009      	beq.n	800c0ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a15      	ldr	r2, [pc, #84]	@ (800c114 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d004      	beq.n	800c0ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a13      	ldr	r2, [pc, #76]	@ (800c118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d10c      	bne.n	800c0e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	40010000 	.word	0x40010000
 800c10c:	40000400 	.word	0x40000400
 800c110:	40000800 	.word	0x40000800
 800c114:	40000c00 	.word	0x40000c00
 800c118:	40014000 	.word	0x40014000

0800c11c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	e042      	b.n	800c1dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7f7 fd16 	bl	8003b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2224      	movs	r2, #36	@ 0x24
 800c174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68da      	ldr	r2, [r3, #12]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fe37 	bl	800cdfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	691a      	ldr	r2, [r3, #16]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c19c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	695a      	ldr	r2, [r3, #20]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c1ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68da      	ldr	r2, [r3, #12]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c1bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2220      	movs	r2, #32
 800c1c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2220      	movs	r2, #32
 800c1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e024      	b.n	800c240 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2224      	movs	r2, #36	@ 0x24
 800c1fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68da      	ldr	r2, [r3, #12]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c20c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7f7 fd52 	bl	8003cb8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08a      	sub	sp, #40	@ 0x28
 800c24c:	af02      	add	r7, sp, #8
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	603b      	str	r3, [r7, #0]
 800c254:	4613      	mov	r3, r2
 800c256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c258:	2300      	movs	r3, #0
 800c25a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b20      	cmp	r3, #32
 800c266:	d175      	bne.n	800c354 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d002      	beq.n	800c274 <HAL_UART_Transmit+0x2c>
 800c26e:	88fb      	ldrh	r3, [r7, #6]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e06e      	b.n	800c356 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2221      	movs	r2, #33	@ 0x21
 800c282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c286:	f7f7 ff3f 	bl	8004108 <HAL_GetTick>
 800c28a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	88fa      	ldrh	r2, [r7, #6]
 800c290:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	88fa      	ldrh	r2, [r7, #6]
 800c296:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2a0:	d108      	bne.n	800c2b4 <HAL_UART_Transmit+0x6c>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d104      	bne.n	800c2b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	61bb      	str	r3, [r7, #24]
 800c2b2:	e003      	b.n	800c2bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c2bc:	e02e      	b.n	800c31c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	2180      	movs	r1, #128	@ 0x80
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 fb67 	bl	800c99c <UART_WaitOnFlagUntilTimeout>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d005      	beq.n	800c2e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e03a      	b.n	800c356 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10b      	bne.n	800c2fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	3302      	adds	r3, #2
 800c2fa:	61bb      	str	r3, [r7, #24]
 800c2fc:	e007      	b.n	800c30e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	781a      	ldrb	r2, [r3, #0]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	3301      	adds	r3, #1
 800c30c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c312:	b29b      	uxth	r3, r3
 800c314:	3b01      	subs	r3, #1
 800c316:	b29a      	uxth	r2, r3
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c320:	b29b      	uxth	r3, r3
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1cb      	bne.n	800c2be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	2200      	movs	r2, #0
 800c32e:	2140      	movs	r1, #64	@ 0x40
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 fb33 	bl	800c99c <UART_WaitOnFlagUntilTimeout>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2220      	movs	r2, #32
 800c340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c344:	2303      	movs	r3, #3
 800c346:	e006      	b.n	800c356 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2220      	movs	r2, #32
 800c34c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	e000      	b.n	800c356 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c354:	2302      	movs	r3, #2
  }
}
 800c356:	4618      	mov	r0, r3
 800c358:	3720      	adds	r7, #32
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b084      	sub	sp, #16
 800c362:	af00      	add	r7, sp, #0
 800c364:	60f8      	str	r0, [r7, #12]
 800c366:	60b9      	str	r1, [r7, #8]
 800c368:	4613      	mov	r3, r2
 800c36a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b20      	cmp	r3, #32
 800c376:	d112      	bne.n	800c39e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d002      	beq.n	800c384 <HAL_UART_Receive_IT+0x26>
 800c37e:	88fb      	ldrh	r3, [r7, #6]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	e00b      	b.n	800c3a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c38e:	88fb      	ldrh	r3, [r7, #6]
 800c390:	461a      	mov	r2, r3
 800c392:	68b9      	ldr	r1, [r7, #8]
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f000 fb5a 	bl	800ca4e <UART_Start_Receive_IT>
 800c39a:	4603      	mov	r3, r0
 800c39c:	e000      	b.n	800c3a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c39e:	2302      	movs	r3, #2
  }
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08c      	sub	sp, #48	@ 0x30
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b20      	cmp	r3, #32
 800c3c0:	d14a      	bne.n	800c458 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800c3c8:	88fb      	ldrh	r3, [r7, #6]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e043      	b.n	800c45a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800c3de:	88fb      	ldrh	r3, [r7, #6]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	68b9      	ldr	r1, [r7, #8]
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 fb32 	bl	800ca4e <UART_Start_Receive_IT>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c3f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d12c      	bne.n	800c452 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d125      	bne.n	800c44c <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c400:	2300      	movs	r3, #0
 800c402:	613b      	str	r3, [r7, #16]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	613b      	str	r3, [r7, #16]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	613b      	str	r3, [r7, #16]
 800c414:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	330c      	adds	r3, #12
 800c41c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	e853 3f00 	ldrex	r3, [r3]
 800c424:	617b      	str	r3, [r7, #20]
   return(result);
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f043 0310 	orr.w	r3, r3, #16
 800c42c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	330c      	adds	r3, #12
 800c434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c436:	627a      	str	r2, [r7, #36]	@ 0x24
 800c438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6a39      	ldr	r1, [r7, #32]
 800c43c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c43e:	e841 2300 	strex	r3, r2, [r1]
 800c442:	61fb      	str	r3, [r7, #28]
   return(result);
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1e5      	bne.n	800c416 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 800c44a:	e002      	b.n	800c452 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c456:	e000      	b.n	800c45a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800c458:	2302      	movs	r3, #2
  }
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3730      	adds	r7, #48	@ 0x30
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
	...

0800c464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b0ba      	sub	sp, #232	@ 0xe8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c48a:	2300      	movs	r3, #0
 800c48c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c490:	2300      	movs	r3, #0
 800c492:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c49a:	f003 030f 	and.w	r3, r3, #15
 800c49e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c4a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10f      	bne.n	800c4ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4ae:	f003 0320 	and.w	r3, r3, #32
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d009      	beq.n	800c4ca <HAL_UART_IRQHandler+0x66>
 800c4b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ba:	f003 0320 	and.w	r3, r3, #32
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fbdc 	bl	800cc80 <UART_Receive_IT>
      return;
 800c4c8:	e25b      	b.n	800c982 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c4ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f000 80de 	beq.w	800c690 <HAL_UART_IRQHandler+0x22c>
 800c4d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d106      	bne.n	800c4ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 80d1 	beq.w	800c690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00b      	beq.n	800c512 <HAL_UART_IRQHandler+0xae>
 800c4fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c502:	2b00      	cmp	r3, #0
 800c504:	d005      	beq.n	800c512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c50a:	f043 0201 	orr.w	r2, r3, #1
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c516:	f003 0304 	and.w	r3, r3, #4
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00b      	beq.n	800c536 <HAL_UART_IRQHandler+0xd2>
 800c51e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	2b00      	cmp	r3, #0
 800c528:	d005      	beq.n	800c536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c52e:	f043 0202 	orr.w	r2, r3, #2
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c53a:	f003 0302 	and.w	r3, r3, #2
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00b      	beq.n	800c55a <HAL_UART_IRQHandler+0xf6>
 800c542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c546:	f003 0301 	and.w	r3, r3, #1
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d005      	beq.n	800c55a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c552:	f043 0204 	orr.w	r2, r3, #4
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c55e:	f003 0308 	and.w	r3, r3, #8
 800c562:	2b00      	cmp	r3, #0
 800c564:	d011      	beq.n	800c58a <HAL_UART_IRQHandler+0x126>
 800c566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d005      	beq.n	800c58a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c582:	f043 0208 	orr.w	r2, r3, #8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f000 81f2 	beq.w	800c978 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c598:	f003 0320 	and.w	r3, r3, #32
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <HAL_UART_IRQHandler+0x14e>
 800c5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5a4:	f003 0320 	and.w	r3, r3, #32
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f000 fb67 	bl	800cc80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5bc:	2b40      	cmp	r3, #64	@ 0x40
 800c5be:	bf0c      	ite	eq
 800c5c0:	2301      	moveq	r3, #1
 800c5c2:	2300      	movne	r3, #0
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ce:	f003 0308 	and.w	r3, r3, #8
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d103      	bne.n	800c5de <HAL_UART_IRQHandler+0x17a>
 800c5d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d04f      	beq.n	800c67e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fa6f 	bl	800cac2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	695b      	ldr	r3, [r3, #20]
 800c5ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ee:	2b40      	cmp	r3, #64	@ 0x40
 800c5f0:	d141      	bne.n	800c676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3314      	adds	r3, #20
 800c5f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c600:	e853 3f00 	ldrex	r3, [r3]
 800c604:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c608:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c60c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3314      	adds	r3, #20
 800c61a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c61e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c62a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c62e:	e841 2300 	strex	r3, r2, [r1]
 800c632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1d9      	bne.n	800c5f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c642:	2b00      	cmp	r3, #0
 800c644:	d013      	beq.n	800c66e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c64a:	4a7e      	ldr	r2, [pc, #504]	@ (800c844 <HAL_UART_IRQHandler+0x3e0>)
 800c64c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c652:	4618      	mov	r0, r3
 800c654:	f7f8 fd3b 	bl	80050ce <HAL_DMA_Abort_IT>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d016      	beq.n	800c68c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c668:	4610      	mov	r0, r2
 800c66a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c66c:	e00e      	b.n	800c68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7f6 ffdc 	bl	800362c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c674:	e00a      	b.n	800c68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7f6 ffd8 	bl	800362c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c67c:	e006      	b.n	800c68c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7f6 ffd4 	bl	800362c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c68a:	e175      	b.n	800c978 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c68c:	bf00      	nop
    return;
 800c68e:	e173      	b.n	800c978 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c694:	2b01      	cmp	r3, #1
 800c696:	f040 814f 	bne.w	800c938 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c69e:	f003 0310 	and.w	r3, r3, #16
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 8148 	beq.w	800c938 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6ac:	f003 0310 	and.w	r3, r3, #16
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f000 8141 	beq.w	800c938 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60bb      	str	r3, [r7, #8]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60bb      	str	r3, [r7, #8]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	60bb      	str	r3, [r7, #8]
 800c6ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	695b      	ldr	r3, [r3, #20]
 800c6d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6d6:	2b40      	cmp	r3, #64	@ 0x40
 800c6d8:	f040 80b6 	bne.w	800c848 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f000 8145 	beq.w	800c97c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c6f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	f080 813e 	bcs.w	800c97c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c706:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c712:	f000 8088 	beq.w	800c826 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	330c      	adds	r3, #12
 800c71c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c724:	e853 3f00 	ldrex	r3, [r3]
 800c728:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c72c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	330c      	adds	r3, #12
 800c73e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c742:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c746:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c74e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c752:	e841 2300 	strex	r3, r2, [r1]
 800c756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c75a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1d9      	bne.n	800c716 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	3314      	adds	r3, #20
 800c768:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c76c:	e853 3f00 	ldrex	r3, [r3]
 800c770:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c772:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c774:	f023 0301 	bic.w	r3, r3, #1
 800c778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	3314      	adds	r3, #20
 800c782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c786:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c78a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c78c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c78e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c792:	e841 2300 	strex	r3, r2, [r1]
 800c796:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1e1      	bne.n	800c762 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3314      	adds	r3, #20
 800c7a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7a8:	e853 3f00 	ldrex	r3, [r3]
 800c7ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	3314      	adds	r3, #20
 800c7be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e3      	bne.n	800c79e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2220      	movs	r2, #32
 800c7da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	330c      	adds	r3, #12
 800c7ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7ee:	e853 3f00 	ldrex	r3, [r3]
 800c7f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c7f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7f6:	f023 0310 	bic.w	r3, r3, #16
 800c7fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	330c      	adds	r3, #12
 800c804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c808:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c80a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c80e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c810:	e841 2300 	strex	r3, r2, [r1]
 800c814:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1e3      	bne.n	800c7e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c820:	4618      	mov	r0, r3
 800c822:	f7f8 fbe4 	bl	8004fee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2202      	movs	r2, #2
 800c82a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c834:	b29b      	uxth	r3, r3
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	b29b      	uxth	r3, r3
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f008 ffbf 	bl	80157c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c842:	e09b      	b.n	800c97c <HAL_UART_IRQHandler+0x518>
 800c844:	0800cb89 	.word	0x0800cb89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c850:	b29b      	uxth	r3, r3
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f000 808e 	beq.w	800c980 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f000 8089 	beq.w	800c980 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	330c      	adds	r3, #12
 800c874:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c878:	e853 3f00 	ldrex	r3, [r3]
 800c87c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c880:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c884:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	330c      	adds	r3, #12
 800c88e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c892:	647a      	str	r2, [r7, #68]	@ 0x44
 800c894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c89a:	e841 2300 	strex	r3, r2, [r1]
 800c89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1e3      	bne.n	800c86e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	3314      	adds	r3, #20
 800c8ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	623b      	str	r3, [r7, #32]
   return(result);
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	f023 0301 	bic.w	r3, r3, #1
 800c8bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	3314      	adds	r3, #20
 800c8c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1e3      	bne.n	800c8a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	330c      	adds	r3, #12
 800c8f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	e853 3f00 	ldrex	r3, [r3]
 800c8fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f023 0310 	bic.w	r3, r3, #16
 800c902:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	330c      	adds	r3, #12
 800c90c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c910:	61fa      	str	r2, [r7, #28]
 800c912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c914:	69b9      	ldr	r1, [r7, #24]
 800c916:	69fa      	ldr	r2, [r7, #28]
 800c918:	e841 2300 	strex	r3, r2, [r1]
 800c91c:	617b      	str	r3, [r7, #20]
   return(result);
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e3      	bne.n	800c8ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2202      	movs	r2, #2
 800c928:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c92a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c92e:	4619      	mov	r1, r3
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f008 ff45 	bl	80157c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c936:	e023      	b.n	800c980 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c93c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c940:	2b00      	cmp	r3, #0
 800c942:	d009      	beq.n	800c958 <HAL_UART_IRQHandler+0x4f4>
 800c944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d003      	beq.n	800c958 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f92d 	bl	800cbb0 <UART_Transmit_IT>
    return;
 800c956:	e014      	b.n	800c982 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c95c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00e      	beq.n	800c982 <HAL_UART_IRQHandler+0x51e>
 800c964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d008      	beq.n	800c982 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f96d 	bl	800cc50 <UART_EndTransmit_IT>
    return;
 800c976:	e004      	b.n	800c982 <HAL_UART_IRQHandler+0x51e>
    return;
 800c978:	bf00      	nop
 800c97a:	e002      	b.n	800c982 <HAL_UART_IRQHandler+0x51e>
      return;
 800c97c:	bf00      	nop
 800c97e:	e000      	b.n	800c982 <HAL_UART_IRQHandler+0x51e>
      return;
 800c980:	bf00      	nop
  }
}
 800c982:	37e8      	adds	r7, #232	@ 0xe8
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	603b      	str	r3, [r7, #0]
 800c9a8:	4613      	mov	r3, r2
 800c9aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9ac:	e03b      	b.n	800ca26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b4:	d037      	beq.n	800ca26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9b6:	f7f7 fba7 	bl	8004108 <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	6a3a      	ldr	r2, [r7, #32]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d302      	bcc.n	800c9cc <UART_WaitOnFlagUntilTimeout+0x30>
 800c9c6:	6a3b      	ldr	r3, [r7, #32]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e03a      	b.n	800ca46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d023      	beq.n	800ca26 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	2b80      	cmp	r3, #128	@ 0x80
 800c9e2:	d020      	beq.n	800ca26 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	2b40      	cmp	r3, #64	@ 0x40
 800c9e8:	d01d      	beq.n	800ca26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 0308 	and.w	r3, r3, #8
 800c9f4:	2b08      	cmp	r3, #8
 800c9f6:	d116      	bne.n	800ca26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	617b      	str	r3, [r7, #20]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f000 f857 	bl	800cac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2208      	movs	r2, #8
 800ca18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e00f      	b.n	800ca46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	bf0c      	ite	eq
 800ca36:	2301      	moveq	r3, #1
 800ca38:	2300      	movne	r3, #0
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	79fb      	ldrb	r3, [r7, #7]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d0b4      	beq.n	800c9ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca4e:	b480      	push	{r7}
 800ca50:	b085      	sub	sp, #20
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	60f8      	str	r0, [r7, #12]
 800ca56:	60b9      	str	r1, [r7, #8]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	88fa      	ldrh	r2, [r7, #6]
 800ca66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	88fa      	ldrh	r2, [r7, #6]
 800ca6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2222      	movs	r2, #34	@ 0x22
 800ca78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d007      	beq.n	800ca94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68da      	ldr	r2, [r3, #12]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	695a      	ldr	r2, [r3, #20]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f042 0201 	orr.w	r2, r2, #1
 800caa2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68da      	ldr	r2, [r3, #12]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f042 0220 	orr.w	r2, r2, #32
 800cab2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b095      	sub	sp, #84	@ 0x54
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	330c      	adds	r3, #12
 800cad0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad4:	e853 3f00 	ldrex	r3, [r3]
 800cad8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cadc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	330c      	adds	r3, #12
 800cae8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800caea:	643a      	str	r2, [r7, #64]	@ 0x40
 800caec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800caf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800caf2:	e841 2300 	strex	r3, r2, [r1]
 800caf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800caf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1e5      	bne.n	800caca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3314      	adds	r3, #20
 800cb04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	e853 3f00 	ldrex	r3, [r3]
 800cb0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	f023 0301 	bic.w	r3, r3, #1
 800cb14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3314      	adds	r3, #20
 800cb1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb26:	e841 2300 	strex	r3, r2, [r1]
 800cb2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1e5      	bne.n	800cafe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d119      	bne.n	800cb6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	330c      	adds	r3, #12
 800cb40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	e853 3f00 	ldrex	r3, [r3]
 800cb48:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	f023 0310 	bic.w	r3, r3, #16
 800cb50:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	330c      	adds	r3, #12
 800cb58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb5a:	61ba      	str	r2, [r7, #24]
 800cb5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	6979      	ldr	r1, [r7, #20]
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	e841 2300 	strex	r3, r2, [r1]
 800cb66:	613b      	str	r3, [r7, #16]
   return(result);
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1e5      	bne.n	800cb3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cb7c:	bf00      	nop
 800cb7e:	3754      	adds	r7, #84	@ 0x54
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7f6 fd42 	bl	800362c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cba8:	bf00      	nop
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b21      	cmp	r3, #33	@ 0x21
 800cbc2:	d13e      	bne.n	800cc42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbcc:	d114      	bne.n	800cbf8 <UART_Transmit_IT+0x48>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d110      	bne.n	800cbf8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	881b      	ldrh	r3, [r3, #0]
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	1c9a      	adds	r2, r3, #2
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	621a      	str	r2, [r3, #32]
 800cbf6:	e008      	b.n	800cc0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a1b      	ldr	r3, [r3, #32]
 800cbfc:	1c59      	adds	r1, r3, #1
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	6211      	str	r1, [r2, #32]
 800cc02:	781a      	ldrb	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	3b01      	subs	r3, #1
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	4619      	mov	r1, r3
 800cc18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10f      	bne.n	800cc3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68da      	ldr	r2, [r3, #12]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68da      	ldr	r2, [r3, #12]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e000      	b.n	800cc44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cc42:	2302      	movs	r3, #2
  }
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68da      	ldr	r2, [r3, #12]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cc66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2220      	movs	r2, #32
 800cc6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff fe89 	bl	800c988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b08c      	sub	sp, #48	@ 0x30
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b22      	cmp	r3, #34	@ 0x22
 800cc92:	f040 80ae 	bne.w	800cdf2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc9e:	d117      	bne.n	800ccd0 <UART_Receive_IT+0x50>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d113      	bne.n	800ccd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccc8:	1c9a      	adds	r2, r3, #2
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	629a      	str	r2, [r3, #40]	@ 0x28
 800ccce:	e026      	b.n	800cd1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce2:	d007      	beq.n	800ccf4 <UART_Receive_IT+0x74>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10a      	bne.n	800cd02 <UART_Receive_IT+0x82>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d106      	bne.n	800cd02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfe:	701a      	strb	r2, [r3, #0]
 800cd00:	e008      	b.n	800cd14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd0e:	b2da      	uxtb	r2, r3
 800cd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd18:	1c5a      	adds	r2, r3, #1
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	3b01      	subs	r3, #1
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d15d      	bne.n	800cdee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68da      	ldr	r2, [r3, #12]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0220 	bic.w	r2, r2, #32
 800cd40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	695a      	ldr	r2, [r3, #20]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f022 0201 	bic.w	r2, r2, #1
 800cd60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2220      	movs	r2, #32
 800cd66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d135      	bne.n	800cde4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	330c      	adds	r3, #12
 800cd84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	e853 3f00 	ldrex	r3, [r3]
 800cd8c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	f023 0310 	bic.w	r3, r3, #16
 800cd94:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	330c      	adds	r3, #12
 800cd9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd9e:	623a      	str	r2, [r7, #32]
 800cda0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda2:	69f9      	ldr	r1, [r7, #28]
 800cda4:	6a3a      	ldr	r2, [r7, #32]
 800cda6:	e841 2300 	strex	r3, r2, [r1]
 800cdaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1e5      	bne.n	800cd7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 0310 	and.w	r3, r3, #16
 800cdbc:	2b10      	cmp	r3, #16
 800cdbe:	d10a      	bne.n	800cdd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60fb      	str	r3, [r7, #12]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	60fb      	str	r3, [r7, #12]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cdda:	4619      	mov	r1, r3
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f008 fcef 	bl	80157c0 <HAL_UARTEx_RxEventCallback>
 800cde2:	e002      	b.n	800cdea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f002 fb41 	bl	800f46c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	e002      	b.n	800cdf4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	e000      	b.n	800cdf4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cdf2:	2302      	movs	r3, #2
  }
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3730      	adds	r7, #48	@ 0x30
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce00:	b0c0      	sub	sp, #256	@ 0x100
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ce14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce18:	68d9      	ldr	r1, [r3, #12]
 800ce1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	ea40 0301 	orr.w	r3, r0, r1
 800ce24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ce26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce2a:	689a      	ldr	r2, [r3, #8]
 800ce2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	431a      	orrs	r2, r3
 800ce34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce38:	695b      	ldr	r3, [r3, #20]
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce40:	69db      	ldr	r3, [r3, #28]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ce48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ce54:	f021 010c 	bic.w	r1, r1, #12
 800ce58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce62:	430b      	orrs	r3, r1
 800ce64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ce66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ce72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce76:	6999      	ldr	r1, [r3, #24]
 800ce78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	ea40 0301 	orr.w	r3, r0, r1
 800ce82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ce84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	4b8f      	ldr	r3, [pc, #572]	@ (800d0c8 <UART_SetConfig+0x2cc>)
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d005      	beq.n	800ce9c <UART_SetConfig+0xa0>
 800ce90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	4b8d      	ldr	r3, [pc, #564]	@ (800d0cc <UART_SetConfig+0x2d0>)
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d104      	bne.n	800cea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ce9c:	f7fc fa84 	bl	80093a8 <HAL_RCC_GetPCLK2Freq>
 800cea0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cea4:	e003      	b.n	800ceae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cea6:	f7fc fa6b 	bl	8009380 <HAL_RCC_GetPCLK1Freq>
 800ceaa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ceb2:	69db      	ldr	r3, [r3, #28]
 800ceb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ceb8:	f040 810c 	bne.w	800d0d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cec0:	2200      	movs	r2, #0
 800cec2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cec6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ceca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cece:	4622      	mov	r2, r4
 800ced0:	462b      	mov	r3, r5
 800ced2:	1891      	adds	r1, r2, r2
 800ced4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ced6:	415b      	adcs	r3, r3
 800ced8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ceda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cede:	4621      	mov	r1, r4
 800cee0:	eb12 0801 	adds.w	r8, r2, r1
 800cee4:	4629      	mov	r1, r5
 800cee6:	eb43 0901 	adc.w	r9, r3, r1
 800ceea:	f04f 0200 	mov.w	r2, #0
 800ceee:	f04f 0300 	mov.w	r3, #0
 800cef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cefa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cefe:	4690      	mov	r8, r2
 800cf00:	4699      	mov	r9, r3
 800cf02:	4623      	mov	r3, r4
 800cf04:	eb18 0303 	adds.w	r3, r8, r3
 800cf08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cf0c:	462b      	mov	r3, r5
 800cf0e:	eb49 0303 	adc.w	r3, r9, r3
 800cf12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cf26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	18db      	adds	r3, r3, r3
 800cf2e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf30:	4613      	mov	r3, r2
 800cf32:	eb42 0303 	adc.w	r3, r2, r3
 800cf36:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cf3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cf40:	f7f3 feba 	bl	8000cb8 <__aeabi_uldivmod>
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	4b61      	ldr	r3, [pc, #388]	@ (800d0d0 <UART_SetConfig+0x2d4>)
 800cf4a:	fba3 2302 	umull	r2, r3, r3, r2
 800cf4e:	095b      	lsrs	r3, r3, #5
 800cf50:	011c      	lsls	r4, r3, #4
 800cf52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf56:	2200      	movs	r2, #0
 800cf58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cf60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cf64:	4642      	mov	r2, r8
 800cf66:	464b      	mov	r3, r9
 800cf68:	1891      	adds	r1, r2, r2
 800cf6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cf6c:	415b      	adcs	r3, r3
 800cf6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cf74:	4641      	mov	r1, r8
 800cf76:	eb12 0a01 	adds.w	sl, r2, r1
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	eb43 0b01 	adc.w	fp, r3, r1
 800cf80:	f04f 0200 	mov.w	r2, #0
 800cf84:	f04f 0300 	mov.w	r3, #0
 800cf88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cf8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cf90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf94:	4692      	mov	sl, r2
 800cf96:	469b      	mov	fp, r3
 800cf98:	4643      	mov	r3, r8
 800cf9a:	eb1a 0303 	adds.w	r3, sl, r3
 800cf9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cfa2:	464b      	mov	r3, r9
 800cfa4:	eb4b 0303 	adc.w	r3, fp, r3
 800cfa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cfb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cfbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	18db      	adds	r3, r3, r3
 800cfc4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	eb42 0303 	adc.w	r3, r2, r3
 800cfcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cfd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cfd6:	f7f3 fe6f 	bl	8000cb8 <__aeabi_uldivmod>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	460b      	mov	r3, r1
 800cfde:	4611      	mov	r1, r2
 800cfe0:	4b3b      	ldr	r3, [pc, #236]	@ (800d0d0 <UART_SetConfig+0x2d4>)
 800cfe2:	fba3 2301 	umull	r2, r3, r3, r1
 800cfe6:	095b      	lsrs	r3, r3, #5
 800cfe8:	2264      	movs	r2, #100	@ 0x64
 800cfea:	fb02 f303 	mul.w	r3, r2, r3
 800cfee:	1acb      	subs	r3, r1, r3
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cff6:	4b36      	ldr	r3, [pc, #216]	@ (800d0d0 <UART_SetConfig+0x2d4>)
 800cff8:	fba3 2302 	umull	r2, r3, r3, r2
 800cffc:	095b      	lsrs	r3, r3, #5
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d004:	441c      	add	r4, r3
 800d006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d010:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d018:	4642      	mov	r2, r8
 800d01a:	464b      	mov	r3, r9
 800d01c:	1891      	adds	r1, r2, r2
 800d01e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d020:	415b      	adcs	r3, r3
 800d022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d028:	4641      	mov	r1, r8
 800d02a:	1851      	adds	r1, r2, r1
 800d02c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d02e:	4649      	mov	r1, r9
 800d030:	414b      	adcs	r3, r1
 800d032:	637b      	str	r3, [r7, #52]	@ 0x34
 800d034:	f04f 0200 	mov.w	r2, #0
 800d038:	f04f 0300 	mov.w	r3, #0
 800d03c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d040:	4659      	mov	r1, fp
 800d042:	00cb      	lsls	r3, r1, #3
 800d044:	4651      	mov	r1, sl
 800d046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d04a:	4651      	mov	r1, sl
 800d04c:	00ca      	lsls	r2, r1, #3
 800d04e:	4610      	mov	r0, r2
 800d050:	4619      	mov	r1, r3
 800d052:	4603      	mov	r3, r0
 800d054:	4642      	mov	r2, r8
 800d056:	189b      	adds	r3, r3, r2
 800d058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d05c:	464b      	mov	r3, r9
 800d05e:	460a      	mov	r2, r1
 800d060:	eb42 0303 	adc.w	r3, r2, r3
 800d064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d074:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d07c:	460b      	mov	r3, r1
 800d07e:	18db      	adds	r3, r3, r3
 800d080:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d082:	4613      	mov	r3, r2
 800d084:	eb42 0303 	adc.w	r3, r2, r3
 800d088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d08a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d08e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d092:	f7f3 fe11 	bl	8000cb8 <__aeabi_uldivmod>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d0 <UART_SetConfig+0x2d4>)
 800d09c:	fba3 1302 	umull	r1, r3, r3, r2
 800d0a0:	095b      	lsrs	r3, r3, #5
 800d0a2:	2164      	movs	r1, #100	@ 0x64
 800d0a4:	fb01 f303 	mul.w	r3, r1, r3
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	00db      	lsls	r3, r3, #3
 800d0ac:	3332      	adds	r3, #50	@ 0x32
 800d0ae:	4a08      	ldr	r2, [pc, #32]	@ (800d0d0 <UART_SetConfig+0x2d4>)
 800d0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0b4:	095b      	lsrs	r3, r3, #5
 800d0b6:	f003 0207 	and.w	r2, r3, #7
 800d0ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4422      	add	r2, r4
 800d0c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d0c4:	e106      	b.n	800d2d4 <UART_SetConfig+0x4d8>
 800d0c6:	bf00      	nop
 800d0c8:	40011000 	.word	0x40011000
 800d0cc:	40011400 	.word	0x40011400
 800d0d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d0d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d0e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d0e6:	4642      	mov	r2, r8
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	1891      	adds	r1, r2, r2
 800d0ec:	6239      	str	r1, [r7, #32]
 800d0ee:	415b      	adcs	r3, r3
 800d0f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d0f6:	4641      	mov	r1, r8
 800d0f8:	1854      	adds	r4, r2, r1
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	eb43 0501 	adc.w	r5, r3, r1
 800d100:	f04f 0200 	mov.w	r2, #0
 800d104:	f04f 0300 	mov.w	r3, #0
 800d108:	00eb      	lsls	r3, r5, #3
 800d10a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d10e:	00e2      	lsls	r2, r4, #3
 800d110:	4614      	mov	r4, r2
 800d112:	461d      	mov	r5, r3
 800d114:	4643      	mov	r3, r8
 800d116:	18e3      	adds	r3, r4, r3
 800d118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d11c:	464b      	mov	r3, r9
 800d11e:	eb45 0303 	adc.w	r3, r5, r3
 800d122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d132:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d136:	f04f 0200 	mov.w	r2, #0
 800d13a:	f04f 0300 	mov.w	r3, #0
 800d13e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d142:	4629      	mov	r1, r5
 800d144:	008b      	lsls	r3, r1, #2
 800d146:	4621      	mov	r1, r4
 800d148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d14c:	4621      	mov	r1, r4
 800d14e:	008a      	lsls	r2, r1, #2
 800d150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d154:	f7f3 fdb0 	bl	8000cb8 <__aeabi_uldivmod>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	4b60      	ldr	r3, [pc, #384]	@ (800d2e0 <UART_SetConfig+0x4e4>)
 800d15e:	fba3 2302 	umull	r2, r3, r3, r2
 800d162:	095b      	lsrs	r3, r3, #5
 800d164:	011c      	lsls	r4, r3, #4
 800d166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d16a:	2200      	movs	r2, #0
 800d16c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d170:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d178:	4642      	mov	r2, r8
 800d17a:	464b      	mov	r3, r9
 800d17c:	1891      	adds	r1, r2, r2
 800d17e:	61b9      	str	r1, [r7, #24]
 800d180:	415b      	adcs	r3, r3
 800d182:	61fb      	str	r3, [r7, #28]
 800d184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d188:	4641      	mov	r1, r8
 800d18a:	1851      	adds	r1, r2, r1
 800d18c:	6139      	str	r1, [r7, #16]
 800d18e:	4649      	mov	r1, r9
 800d190:	414b      	adcs	r3, r1
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	f04f 0200 	mov.w	r2, #0
 800d198:	f04f 0300 	mov.w	r3, #0
 800d19c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d1a0:	4659      	mov	r1, fp
 800d1a2:	00cb      	lsls	r3, r1, #3
 800d1a4:	4651      	mov	r1, sl
 800d1a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1aa:	4651      	mov	r1, sl
 800d1ac:	00ca      	lsls	r2, r1, #3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	4642      	mov	r2, r8
 800d1b6:	189b      	adds	r3, r3, r2
 800d1b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d1bc:	464b      	mov	r3, r9
 800d1be:	460a      	mov	r2, r1
 800d1c0:	eb42 0303 	adc.w	r3, r2, r3
 800d1c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d1d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d1d4:	f04f 0200 	mov.w	r2, #0
 800d1d8:	f04f 0300 	mov.w	r3, #0
 800d1dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	008b      	lsls	r3, r1, #2
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1ea:	4641      	mov	r1, r8
 800d1ec:	008a      	lsls	r2, r1, #2
 800d1ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d1f2:	f7f3 fd61 	bl	8000cb8 <__aeabi_uldivmod>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	4b38      	ldr	r3, [pc, #224]	@ (800d2e0 <UART_SetConfig+0x4e4>)
 800d1fe:	fba3 2301 	umull	r2, r3, r3, r1
 800d202:	095b      	lsrs	r3, r3, #5
 800d204:	2264      	movs	r2, #100	@ 0x64
 800d206:	fb02 f303 	mul.w	r3, r2, r3
 800d20a:	1acb      	subs	r3, r1, r3
 800d20c:	011b      	lsls	r3, r3, #4
 800d20e:	3332      	adds	r3, #50	@ 0x32
 800d210:	4a33      	ldr	r2, [pc, #204]	@ (800d2e0 <UART_SetConfig+0x4e4>)
 800d212:	fba2 2303 	umull	r2, r3, r2, r3
 800d216:	095b      	lsrs	r3, r3, #5
 800d218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d21c:	441c      	add	r4, r3
 800d21e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d222:	2200      	movs	r2, #0
 800d224:	673b      	str	r3, [r7, #112]	@ 0x70
 800d226:	677a      	str	r2, [r7, #116]	@ 0x74
 800d228:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d22c:	4642      	mov	r2, r8
 800d22e:	464b      	mov	r3, r9
 800d230:	1891      	adds	r1, r2, r2
 800d232:	60b9      	str	r1, [r7, #8]
 800d234:	415b      	adcs	r3, r3
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d23c:	4641      	mov	r1, r8
 800d23e:	1851      	adds	r1, r2, r1
 800d240:	6039      	str	r1, [r7, #0]
 800d242:	4649      	mov	r1, r9
 800d244:	414b      	adcs	r3, r1
 800d246:	607b      	str	r3, [r7, #4]
 800d248:	f04f 0200 	mov.w	r2, #0
 800d24c:	f04f 0300 	mov.w	r3, #0
 800d250:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d254:	4659      	mov	r1, fp
 800d256:	00cb      	lsls	r3, r1, #3
 800d258:	4651      	mov	r1, sl
 800d25a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d25e:	4651      	mov	r1, sl
 800d260:	00ca      	lsls	r2, r1, #3
 800d262:	4610      	mov	r0, r2
 800d264:	4619      	mov	r1, r3
 800d266:	4603      	mov	r3, r0
 800d268:	4642      	mov	r2, r8
 800d26a:	189b      	adds	r3, r3, r2
 800d26c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d26e:	464b      	mov	r3, r9
 800d270:	460a      	mov	r2, r1
 800d272:	eb42 0303 	adc.w	r3, r2, r3
 800d276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	663b      	str	r3, [r7, #96]	@ 0x60
 800d282:	667a      	str	r2, [r7, #100]	@ 0x64
 800d284:	f04f 0200 	mov.w	r2, #0
 800d288:	f04f 0300 	mov.w	r3, #0
 800d28c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d290:	4649      	mov	r1, r9
 800d292:	008b      	lsls	r3, r1, #2
 800d294:	4641      	mov	r1, r8
 800d296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d29a:	4641      	mov	r1, r8
 800d29c:	008a      	lsls	r2, r1, #2
 800d29e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d2a2:	f7f3 fd09 	bl	8000cb8 <__aeabi_uldivmod>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d2e0 <UART_SetConfig+0x4e4>)
 800d2ac:	fba3 1302 	umull	r1, r3, r3, r2
 800d2b0:	095b      	lsrs	r3, r3, #5
 800d2b2:	2164      	movs	r1, #100	@ 0x64
 800d2b4:	fb01 f303 	mul.w	r3, r1, r3
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	011b      	lsls	r3, r3, #4
 800d2bc:	3332      	adds	r3, #50	@ 0x32
 800d2be:	4a08      	ldr	r2, [pc, #32]	@ (800d2e0 <UART_SetConfig+0x4e4>)
 800d2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c4:	095b      	lsrs	r3, r3, #5
 800d2c6:	f003 020f 	and.w	r2, r3, #15
 800d2ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4422      	add	r2, r4
 800d2d2:	609a      	str	r2, [r3, #8]
}
 800d2d4:	bf00      	nop
 800d2d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2e0:	51eb851f 	.word	0x51eb851f

0800d2e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	b480      	push	{r7}
 800d2e8:	b085      	sub	sp, #20
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	f107 001c 	add.w	r0, r7, #28
 800d2f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d2fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d2fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d302:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d306:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d30a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d30e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	4313      	orrs	r3, r2
 800d314:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d31e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	431a      	orrs	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	b004      	add	sp, #16
 800d338:	4770      	bx	lr

0800d33a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d33a:	b480      	push	{r7}
 800d33c:	b083      	sub	sp, #12
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d348:	4618      	mov	r0, r3
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2203      	movs	r2, #3
 800d382:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	370c      	adds	r7, #12
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr

0800d392 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d392:	b480      	push	{r7}
 800d394:	b083      	sub	sp, #12
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f003 0303 	and.w	r3, r3, #3
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b085      	sub	sp, #20
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d3d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d3d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d3da:	68fa      	ldr	r2, [r7, #12]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d3e8:	f023 030f 	bic.w	r3, r3, #15
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	431a      	orrs	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d3f4:	2300      	movs	r3, #0
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3714      	adds	r7, #20
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	b2db      	uxtb	r3, r3
}
 800d410:	4618      	mov	r0, r3
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	3314      	adds	r3, #20
 800d42a:	461a      	mov	r2, r3
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	4413      	add	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
}  
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d442:	b480      	push	{r7}
 800d444:	b085      	sub	sp, #20
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	685a      	ldr	r2, [r3, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d468:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d46e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d474:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	4313      	orrs	r3, r2
 800d47a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d480:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	431a      	orrs	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d48c:	2300      	movs	r3, #0

}
 800d48e:	4618      	mov	r0, r3
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b088      	sub	sp, #32
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d4a8:	2310      	movs	r3, #16
 800d4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4ac:	2340      	movs	r3, #64	@ 0x40
 800d4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4ba:	f107 0308 	add.w	r3, r7, #8
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f7ff ff74 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d4c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4ca:	2110      	movs	r1, #16
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 f9d7 	bl	800d880 <SDMMC_GetCmdResp1>
 800d4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d4:	69fb      	ldr	r3, [r7, #28]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3720      	adds	r7, #32
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b088      	sub	sp, #32
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
 800d4e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d4ec:	2311      	movs	r3, #17
 800d4ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4f0:	2340      	movs	r3, #64	@ 0x40
 800d4f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4fe:	f107 0308 	add.w	r3, r7, #8
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff ff52 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d50a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d50e:	2111      	movs	r1, #17
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f9b5 	bl	800d880 <SDMMC_GetCmdResp1>
 800d516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d518:	69fb      	ldr	r3, [r7, #28]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3720      	adds	r7, #32
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b088      	sub	sp, #32
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d530:	2312      	movs	r3, #18
 800d532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d534:	2340      	movs	r3, #64	@ 0x40
 800d536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d538:	2300      	movs	r3, #0
 800d53a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d53c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d540:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d542:	f107 0308 	add.w	r3, r7, #8
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff ff30 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d54e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d552:	2112      	movs	r1, #18
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 f993 	bl	800d880 <SDMMC_GetCmdResp1>
 800d55a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d55c:	69fb      	ldr	r3, [r7, #28]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3720      	adds	r7, #32
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b088      	sub	sp, #32
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
 800d56e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d574:	2318      	movs	r3, #24
 800d576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d578:	2340      	movs	r3, #64	@ 0x40
 800d57a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d57c:	2300      	movs	r3, #0
 800d57e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d584:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d586:	f107 0308 	add.w	r3, r7, #8
 800d58a:	4619      	mov	r1, r3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7ff ff0e 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d592:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d596:	2118      	movs	r1, #24
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f971 	bl	800d880 <SDMMC_GetCmdResp1>
 800d59e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5a0:	69fb      	ldr	r3, [r7, #28]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3720      	adds	r7, #32
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b088      	sub	sp, #32
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d5b8:	2319      	movs	r3, #25
 800d5ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5bc:	2340      	movs	r3, #64	@ 0x40
 800d5be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5ca:	f107 0308 	add.w	r3, r7, #8
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7ff feec 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d5d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5da:	2119      	movs	r1, #25
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f94f 	bl	800d880 <SDMMC_GetCmdResp1>
 800d5e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5e4:	69fb      	ldr	r3, [r7, #28]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3720      	adds	r7, #32
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b088      	sub	sp, #32
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d5fc:	230c      	movs	r3, #12
 800d5fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d600:	2340      	movs	r3, #64	@ 0x40
 800d602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d604:	2300      	movs	r3, #0
 800d606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d60c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d60e:	f107 0308 	add.w	r3, r7, #8
 800d612:	4619      	mov	r1, r3
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff feca 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d61a:	4a05      	ldr	r2, [pc, #20]	@ (800d630 <SDMMC_CmdStopTransfer+0x40>)
 800d61c:	210c      	movs	r1, #12
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f92e 	bl	800d880 <SDMMC_GetCmdResp1>
 800d624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d626:	69fb      	ldr	r3, [r7, #28]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3720      	adds	r7, #32
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	05f5e100 	.word	0x05f5e100

0800d634 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08a      	sub	sp, #40	@ 0x28
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d644:	2307      	movs	r3, #7
 800d646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d648:	2340      	movs	r3, #64	@ 0x40
 800d64a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d64c:	2300      	movs	r3, #0
 800d64e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d654:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d656:	f107 0310 	add.w	r3, r7, #16
 800d65a:	4619      	mov	r1, r3
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	f7ff fea6 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d662:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d666:	2107      	movs	r1, #7
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 f909 	bl	800d880 <SDMMC_GetCmdResp1>
 800d66e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d672:	4618      	mov	r0, r3
 800d674:	3728      	adds	r7, #40	@ 0x28
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b088      	sub	sp, #32
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d682:	2300      	movs	r3, #0
 800d684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d686:	2300      	movs	r3, #0
 800d688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d68a:	2300      	movs	r3, #0
 800d68c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d68e:	2300      	movs	r3, #0
 800d690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d696:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d698:	f107 0308 	add.w	r3, r7, #8
 800d69c:	4619      	mov	r1, r3
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7ff fe85 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 fb23 	bl	800dcf0 <SDMMC_GetCmdError>
 800d6aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ac:	69fb      	ldr	r3, [r7, #28]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3720      	adds	r7, #32
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b088      	sub	sp, #32
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6be:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d6c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6c4:	2308      	movs	r3, #8
 800d6c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6c8:	2340      	movs	r3, #64	@ 0x40
 800d6ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6d6:	f107 0308 	add.w	r3, r7, #8
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7ff fe66 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fab6 	bl	800dc54 <SDMMC_GetCmdResp7>
 800d6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ea:	69fb      	ldr	r3, [r7, #28]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3720      	adds	r7, #32
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d702:	2337      	movs	r3, #55	@ 0x37
 800d704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d706:	2340      	movs	r3, #64	@ 0x40
 800d708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d70a:	2300      	movs	r3, #0
 800d70c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d70e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d712:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d714:	f107 0308 	add.w	r3, r7, #8
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fe47 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d720:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d724:	2137      	movs	r1, #55	@ 0x37
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f8aa 	bl	800d880 <SDMMC_GetCmdResp1>
 800d72c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d72e:	69fb      	ldr	r3, [r7, #28]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3720      	adds	r7, #32
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b088      	sub	sp, #32
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d748:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d74e:	2329      	movs	r3, #41	@ 0x29
 800d750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d752:	2340      	movs	r3, #64	@ 0x40
 800d754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d756:	2300      	movs	r3, #0
 800d758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d75a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d75e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d760:	f107 0308 	add.w	r3, r7, #8
 800d764:	4619      	mov	r1, r3
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff fe21 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f9bd 	bl	800daec <SDMMC_GetCmdResp3>
 800d772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d774:	69fb      	ldr	r3, [r7, #28]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3720      	adds	r7, #32
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b088      	sub	sp, #32
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d786:	2300      	movs	r3, #0
 800d788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d78a:	2302      	movs	r3, #2
 800d78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d78e:	23c0      	movs	r3, #192	@ 0xc0
 800d790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d792:	2300      	movs	r3, #0
 800d794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d79a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d79c:	f107 0308 	add.w	r3, r7, #8
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff fe03 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 f957 	bl	800da5c <SDMMC_GetCmdResp2>
 800d7ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7b0:	69fb      	ldr	r3, [r7, #28]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3720      	adds	r7, #32
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b088      	sub	sp, #32
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d7c8:	2309      	movs	r3, #9
 800d7ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d7cc:	23c0      	movs	r3, #192	@ 0xc0
 800d7ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7da:	f107 0308 	add.w	r3, r7, #8
 800d7de:	4619      	mov	r1, r3
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7ff fde4 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f938 	bl	800da5c <SDMMC_GetCmdResp2>
 800d7ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7ee:	69fb      	ldr	r3, [r7, #28]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3720      	adds	r7, #32
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b088      	sub	sp, #32
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d802:	2300      	movs	r3, #0
 800d804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d806:	2303      	movs	r3, #3
 800d808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d80a:	2340      	movs	r3, #64	@ 0x40
 800d80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d80e:	2300      	movs	r3, #0
 800d810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d816:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d818:	f107 0308 	add.w	r3, r7, #8
 800d81c:	4619      	mov	r1, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7ff fdc5 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	2103      	movs	r1, #3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f99d 	bl	800db68 <SDMMC_GetCmdResp6>
 800d82e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d830:	69fb      	ldr	r3, [r7, #28]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3720      	adds	r7, #32
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b088      	sub	sp, #32
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d848:	230d      	movs	r3, #13
 800d84a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d84c:	2340      	movs	r3, #64	@ 0x40
 800d84e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d850:	2300      	movs	r3, #0
 800d852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d858:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d85a:	f107 0308 	add.w	r3, r7, #8
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff fda4 	bl	800d3ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d86a:	210d      	movs	r1, #13
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f807 	bl	800d880 <SDMMC_GetCmdResp1>
 800d872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d874:	69fb      	ldr	r3, [r7, #28]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3720      	adds	r7, #32
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b088      	sub	sp, #32
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	460b      	mov	r3, r1
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d88e:	4b70      	ldr	r3, [pc, #448]	@ (800da50 <SDMMC_GetCmdResp1+0x1d0>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a70      	ldr	r2, [pc, #448]	@ (800da54 <SDMMC_GetCmdResp1+0x1d4>)
 800d894:	fba2 2303 	umull	r2, r3, r2, r3
 800d898:	0a5a      	lsrs	r2, r3, #9
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	fb02 f303 	mul.w	r3, r2, r3
 800d8a0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	1e5a      	subs	r2, r3, #1
 800d8a6:	61fa      	str	r2, [r7, #28]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d102      	bne.n	800d8b2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8b0:	e0c9      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8b6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d0ef      	beq.n	800d8a2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1ea      	bne.n	800d8a2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8d0:	f003 0304 	and.w	r3, r3, #4
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d004      	beq.n	800d8e2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2204      	movs	r2, #4
 800d8dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8de:	2304      	movs	r3, #4
 800d8e0:	e0b1      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8e6:	f003 0301 	and.w	r3, r3, #1
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d004      	beq.n	800d8f8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e0a6      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	22c5      	movs	r2, #197	@ 0xc5
 800d8fc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff fd7f 	bl	800d402 <SDIO_GetCommandResponse>
 800d904:	4603      	mov	r3, r0
 800d906:	461a      	mov	r2, r3
 800d908:	7afb      	ldrb	r3, [r7, #11]
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d001      	beq.n	800d912 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d90e:	2301      	movs	r3, #1
 800d910:	e099      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d912:	2100      	movs	r1, #0
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f7ff fd81 	bl	800d41c <SDIO_GetResponse>
 800d91a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d91c:	697a      	ldr	r2, [r7, #20]
 800d91e:	4b4e      	ldr	r3, [pc, #312]	@ (800da58 <SDMMC_GetCmdResp1+0x1d8>)
 800d920:	4013      	ands	r3, r2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d101      	bne.n	800d92a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d926:	2300      	movs	r3, #0
 800d928:	e08d      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	da02      	bge.n	800d936 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d934:	e087      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d940:	2340      	movs	r3, #64	@ 0x40
 800d942:	e080      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d001      	beq.n	800d952 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d94e:	2380      	movs	r3, #128	@ 0x80
 800d950:	e079      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d002      	beq.n	800d962 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d95c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d960:	e071      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d96c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d970:	e069      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d97c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d980:	e061      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d002      	beq.n	800d992 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d98c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d990:	e059      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d99c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d9a0:	e051      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d9ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d9b0:	e049      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d9bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d9c0:	e041      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d9cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9d0:	e039      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d9dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d9e0:	e031      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d9ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d9f0:	e029      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d9fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da00:	e021      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da10:	e019      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800da20:	e011      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800da2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800da30:	e009      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f003 0308 	and.w	r3, r3, #8
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800da3c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800da40:	e001      	b.n	800da46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800da46:	4618      	mov	r0, r3
 800da48:	3720      	adds	r7, #32
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20000010 	.word	0x20000010
 800da54:	10624dd3 	.word	0x10624dd3
 800da58:	fdffe008 	.word	0xfdffe008

0800da5c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da64:	4b1f      	ldr	r3, [pc, #124]	@ (800dae4 <SDMMC_GetCmdResp2+0x88>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a1f      	ldr	r2, [pc, #124]	@ (800dae8 <SDMMC_GetCmdResp2+0x8c>)
 800da6a:	fba2 2303 	umull	r2, r3, r2, r3
 800da6e:	0a5b      	lsrs	r3, r3, #9
 800da70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da74:	fb02 f303 	mul.w	r3, r2, r3
 800da78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	1e5a      	subs	r2, r3, #1
 800da7e:	60fa      	str	r2, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d102      	bne.n	800da8a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da88:	e026      	b.n	800dad8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da96:	2b00      	cmp	r3, #0
 800da98:	d0ef      	beq.n	800da7a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1ea      	bne.n	800da7a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daa8:	f003 0304 	and.w	r3, r3, #4
 800daac:	2b00      	cmp	r3, #0
 800daae:	d004      	beq.n	800daba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2204      	movs	r2, #4
 800dab4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dab6:	2304      	movs	r3, #4
 800dab8:	e00e      	b.n	800dad8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dabe:	f003 0301 	and.w	r3, r3, #1
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d004      	beq.n	800dad0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dacc:	2301      	movs	r3, #1
 800dace:	e003      	b.n	800dad8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	22c5      	movs	r2, #197	@ 0xc5
 800dad4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	20000010 	.word	0x20000010
 800dae8:	10624dd3 	.word	0x10624dd3

0800daec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800daf4:	4b1a      	ldr	r3, [pc, #104]	@ (800db60 <SDMMC_GetCmdResp3+0x74>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a1a      	ldr	r2, [pc, #104]	@ (800db64 <SDMMC_GetCmdResp3+0x78>)
 800dafa:	fba2 2303 	umull	r2, r3, r2, r3
 800dafe:	0a5b      	lsrs	r3, r3, #9
 800db00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db04:	fb02 f303 	mul.w	r3, r2, r3
 800db08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	1e5a      	subs	r2, r3, #1
 800db0e:	60fa      	str	r2, [r7, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d102      	bne.n	800db1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db18:	e01b      	b.n	800db52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db26:	2b00      	cmp	r3, #0
 800db28:	d0ef      	beq.n	800db0a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1ea      	bne.n	800db0a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db38:	f003 0304 	and.w	r3, r3, #4
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d004      	beq.n	800db4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2204      	movs	r2, #4
 800db44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db46:	2304      	movs	r3, #4
 800db48:	e003      	b.n	800db52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	22c5      	movs	r2, #197	@ 0xc5
 800db4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	3714      	adds	r7, #20
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	20000010 	.word	0x20000010
 800db64:	10624dd3 	.word	0x10624dd3

0800db68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	460b      	mov	r3, r1
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db76:	4b35      	ldr	r3, [pc, #212]	@ (800dc4c <SDMMC_GetCmdResp6+0xe4>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a35      	ldr	r2, [pc, #212]	@ (800dc50 <SDMMC_GetCmdResp6+0xe8>)
 800db7c:	fba2 2303 	umull	r2, r3, r2, r3
 800db80:	0a5b      	lsrs	r3, r3, #9
 800db82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db86:	fb02 f303 	mul.w	r3, r2, r3
 800db8a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	1e5a      	subs	r2, r3, #1
 800db90:	61fa      	str	r2, [r7, #28]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d102      	bne.n	800db9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db9a:	e052      	b.n	800dc42 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dba0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d0ef      	beq.n	800db8c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1ea      	bne.n	800db8c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbba:	f003 0304 	and.w	r3, r3, #4
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d004      	beq.n	800dbcc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2204      	movs	r2, #4
 800dbc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbc8:	2304      	movs	r3, #4
 800dbca:	e03a      	b.n	800dc42 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbd0:	f003 0301 	and.w	r3, r3, #1
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d004      	beq.n	800dbe2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e02f      	b.n	800dc42 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	f7ff fc0d 	bl	800d402 <SDIO_GetCommandResponse>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	461a      	mov	r2, r3
 800dbec:	7afb      	ldrb	r3, [r7, #11]
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d001      	beq.n	800dbf6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e025      	b.n	800dc42 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	22c5      	movs	r2, #197	@ 0xc5
 800dbfa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f7ff fc0c 	bl	800d41c <SDIO_GetResponse>
 800dc04:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d106      	bne.n	800dc1e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	0c1b      	lsrs	r3, r3, #16
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	e011      	b.n	800dc42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d002      	beq.n	800dc2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dc28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dc2c:	e009      	b.n	800dc42 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dc38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dc3c:	e001      	b.n	800dc42 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dc3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3720      	adds	r7, #32
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	20000010 	.word	0x20000010
 800dc50:	10624dd3 	.word	0x10624dd3

0800dc54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc5c:	4b22      	ldr	r3, [pc, #136]	@ (800dce8 <SDMMC_GetCmdResp7+0x94>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a22      	ldr	r2, [pc, #136]	@ (800dcec <SDMMC_GetCmdResp7+0x98>)
 800dc62:	fba2 2303 	umull	r2, r3, r2, r3
 800dc66:	0a5b      	lsrs	r3, r3, #9
 800dc68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc6c:	fb02 f303 	mul.w	r3, r2, r3
 800dc70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	1e5a      	subs	r2, r3, #1
 800dc76:	60fa      	str	r2, [r7, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d102      	bne.n	800dc82 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc80:	e02c      	b.n	800dcdc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d0ef      	beq.n	800dc72 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1ea      	bne.n	800dc72 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dca0:	f003 0304 	and.w	r3, r3, #4
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d004      	beq.n	800dcb2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2204      	movs	r2, #4
 800dcac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcae:	2304      	movs	r3, #4
 800dcb0:	e014      	b.n	800dcdc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcb6:	f003 0301 	and.w	r3, r3, #1
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d004      	beq.n	800dcc8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e009      	b.n	800dcdc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2240      	movs	r2, #64	@ 0x40
 800dcd8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dcda:	2300      	movs	r3, #0
  
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3714      	adds	r7, #20
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr
 800dce8:	20000010 	.word	0x20000010
 800dcec:	10624dd3 	.word	0x10624dd3

0800dcf0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b085      	sub	sp, #20
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcf8:	4b11      	ldr	r3, [pc, #68]	@ (800dd40 <SDMMC_GetCmdError+0x50>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a11      	ldr	r2, [pc, #68]	@ (800dd44 <SDMMC_GetCmdError+0x54>)
 800dcfe:	fba2 2303 	umull	r2, r3, r2, r3
 800dd02:	0a5b      	lsrs	r3, r3, #9
 800dd04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd08:	fb02 f303 	mul.w	r3, r2, r3
 800dd0c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	1e5a      	subs	r2, r3, #1
 800dd12:	60fa      	str	r2, [r7, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d102      	bne.n	800dd1e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd18:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd1c:	e009      	b.n	800dd32 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0f1      	beq.n	800dd0e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	22c5      	movs	r2, #197	@ 0xc5
 800dd2e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	20000010 	.word	0x20000010
 800dd44:	10624dd3 	.word	0x10624dd3

0800dd48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd48:	b084      	sub	sp, #16
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	f107 001c 	add.w	r0, r7, #28
 800dd56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d123      	bne.n	800ddaa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800dd76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d105      	bne.n	800dd9e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f001 fb32 	bl	800f408 <USB_CoreReset>
 800dda4:	4603      	mov	r3, r0
 800dda6:	73fb      	strb	r3, [r7, #15]
 800dda8:	e01b      	b.n	800dde2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f001 fb26 	bl	800f408 <USB_CoreReset>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ddc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d106      	bne.n	800ddd6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	639a      	str	r2, [r3, #56]	@ 0x38
 800ddd4:	e005      	b.n	800dde2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dde2:	7fbb      	ldrb	r3, [r7, #30]
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d10b      	bne.n	800de00 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f043 0206 	orr.w	r2, r3, #6
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	f043 0220 	orr.w	r2, r3, #32
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800de00:	7bfb      	ldrb	r3, [r7, #15]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de0c:	b004      	add	sp, #16
 800de0e:	4770      	bx	lr

0800de10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800de10:	b480      	push	{r7}
 800de12:	b087      	sub	sp, #28
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	4613      	mov	r3, r2
 800de1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800de1e:	79fb      	ldrb	r3, [r7, #7]
 800de20:	2b02      	cmp	r3, #2
 800de22:	d165      	bne.n	800def0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	4a41      	ldr	r2, [pc, #260]	@ (800df2c <USB_SetTurnaroundTime+0x11c>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d906      	bls.n	800de3a <USB_SetTurnaroundTime+0x2a>
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	4a40      	ldr	r2, [pc, #256]	@ (800df30 <USB_SetTurnaroundTime+0x120>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d202      	bcs.n	800de3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800de34:	230f      	movs	r3, #15
 800de36:	617b      	str	r3, [r7, #20]
 800de38:	e062      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	4a3c      	ldr	r2, [pc, #240]	@ (800df30 <USB_SetTurnaroundTime+0x120>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d306      	bcc.n	800de50 <USB_SetTurnaroundTime+0x40>
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	4a3b      	ldr	r2, [pc, #236]	@ (800df34 <USB_SetTurnaroundTime+0x124>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d202      	bcs.n	800de50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de4a:	230e      	movs	r3, #14
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	e057      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	4a38      	ldr	r2, [pc, #224]	@ (800df34 <USB_SetTurnaroundTime+0x124>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d306      	bcc.n	800de66 <USB_SetTurnaroundTime+0x56>
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	4a37      	ldr	r2, [pc, #220]	@ (800df38 <USB_SetTurnaroundTime+0x128>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d202      	bcs.n	800de66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de60:	230d      	movs	r3, #13
 800de62:	617b      	str	r3, [r7, #20]
 800de64:	e04c      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	4a33      	ldr	r2, [pc, #204]	@ (800df38 <USB_SetTurnaroundTime+0x128>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d306      	bcc.n	800de7c <USB_SetTurnaroundTime+0x6c>
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	4a32      	ldr	r2, [pc, #200]	@ (800df3c <USB_SetTurnaroundTime+0x12c>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d802      	bhi.n	800de7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de76:	230c      	movs	r3, #12
 800de78:	617b      	str	r3, [r7, #20]
 800de7a:	e041      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	4a2f      	ldr	r2, [pc, #188]	@ (800df3c <USB_SetTurnaroundTime+0x12c>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d906      	bls.n	800de92 <USB_SetTurnaroundTime+0x82>
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	4a2e      	ldr	r2, [pc, #184]	@ (800df40 <USB_SetTurnaroundTime+0x130>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d802      	bhi.n	800de92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de8c:	230b      	movs	r3, #11
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	e036      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	4a2a      	ldr	r2, [pc, #168]	@ (800df40 <USB_SetTurnaroundTime+0x130>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d906      	bls.n	800dea8 <USB_SetTurnaroundTime+0x98>
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	4a29      	ldr	r2, [pc, #164]	@ (800df44 <USB_SetTurnaroundTime+0x134>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d802      	bhi.n	800dea8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dea2:	230a      	movs	r3, #10
 800dea4:	617b      	str	r3, [r7, #20]
 800dea6:	e02b      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	4a26      	ldr	r2, [pc, #152]	@ (800df44 <USB_SetTurnaroundTime+0x134>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d906      	bls.n	800debe <USB_SetTurnaroundTime+0xae>
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	4a25      	ldr	r2, [pc, #148]	@ (800df48 <USB_SetTurnaroundTime+0x138>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d202      	bcs.n	800debe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800deb8:	2309      	movs	r3, #9
 800deba:	617b      	str	r3, [r7, #20]
 800debc:	e020      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	4a21      	ldr	r2, [pc, #132]	@ (800df48 <USB_SetTurnaroundTime+0x138>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d306      	bcc.n	800ded4 <USB_SetTurnaroundTime+0xc4>
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	4a20      	ldr	r2, [pc, #128]	@ (800df4c <USB_SetTurnaroundTime+0x13c>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d802      	bhi.n	800ded4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dece:	2308      	movs	r3, #8
 800ded0:	617b      	str	r3, [r7, #20]
 800ded2:	e015      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	4a1d      	ldr	r2, [pc, #116]	@ (800df4c <USB_SetTurnaroundTime+0x13c>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d906      	bls.n	800deea <USB_SetTurnaroundTime+0xda>
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	4a1c      	ldr	r2, [pc, #112]	@ (800df50 <USB_SetTurnaroundTime+0x140>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d202      	bcs.n	800deea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dee4:	2307      	movs	r3, #7
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	e00a      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800deea:	2306      	movs	r3, #6
 800deec:	617b      	str	r3, [r7, #20]
 800deee:	e007      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800def0:	79fb      	ldrb	r3, [r7, #7]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d102      	bne.n	800defc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800def6:	2309      	movs	r3, #9
 800def8:	617b      	str	r3, [r7, #20]
 800defa:	e001      	b.n	800df00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800defc:	2309      	movs	r3, #9
 800defe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	68da      	ldr	r2, [r3, #12]
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	029b      	lsls	r3, r3, #10
 800df14:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800df18:	431a      	orrs	r2, r3
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	00d8acbf 	.word	0x00d8acbf
 800df30:	00e4e1c0 	.word	0x00e4e1c0
 800df34:	00f42400 	.word	0x00f42400
 800df38:	01067380 	.word	0x01067380
 800df3c:	011a499f 	.word	0x011a499f
 800df40:	01312cff 	.word	0x01312cff
 800df44:	014ca43f 	.word	0x014ca43f
 800df48:	016e3600 	.word	0x016e3600
 800df4c:	01a6ab1f 	.word	0x01a6ab1f
 800df50:	01e84800 	.word	0x01e84800

0800df54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	f043 0201 	orr.w	r2, r3, #1
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df76:	b480      	push	{r7}
 800df78:	b083      	sub	sp, #12
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	f023 0201 	bic.w	r2, r3, #1
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dfb4:	78fb      	ldrb	r3, [r7, #3]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d115      	bne.n	800dfe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dfc6:	200a      	movs	r0, #10
 800dfc8:	f7f6 f8aa 	bl	8004120 <HAL_Delay>
      ms += 10U;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	330a      	adds	r3, #10
 800dfd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f001 f988 	bl	800f2e8 <USB_GetMode>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d01e      	beq.n	800e01c <USB_SetCurrentMode+0x84>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2bc7      	cmp	r3, #199	@ 0xc7
 800dfe2:	d9f0      	bls.n	800dfc6 <USB_SetCurrentMode+0x2e>
 800dfe4:	e01a      	b.n	800e01c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dfe6:	78fb      	ldrb	r3, [r7, #3]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d115      	bne.n	800e018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dff8:	200a      	movs	r0, #10
 800dffa:	f7f6 f891 	bl	8004120 <HAL_Delay>
      ms += 10U;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	330a      	adds	r3, #10
 800e002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f001 f96f 	bl	800f2e8 <USB_GetMode>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d005      	beq.n	800e01c <USB_SetCurrentMode+0x84>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2bc7      	cmp	r3, #199	@ 0xc7
 800e014:	d9f0      	bls.n	800dff8 <USB_SetCurrentMode+0x60>
 800e016:	e001      	b.n	800e01c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	e005      	b.n	800e028 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2bc8      	cmp	r3, #200	@ 0xc8
 800e020:	d101      	bne.n	800e026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e022:	2301      	movs	r3, #1
 800e024:	e000      	b.n	800e028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e026:	2300      	movs	r3, #0
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e030:	b084      	sub	sp, #16
 800e032:	b580      	push	{r7, lr}
 800e034:	b086      	sub	sp, #24
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e042:	2300      	movs	r3, #0
 800e044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e04a:	2300      	movs	r3, #0
 800e04c:	613b      	str	r3, [r7, #16]
 800e04e:	e009      	b.n	800e064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	3340      	adds	r3, #64	@ 0x40
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4413      	add	r3, r2
 800e05a:	2200      	movs	r2, #0
 800e05c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	3301      	adds	r3, #1
 800e062:	613b      	str	r3, [r7, #16]
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	2b0e      	cmp	r3, #14
 800e068:	d9f2      	bls.n	800e050 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e06a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d11c      	bne.n	800e0ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e080:	f043 0302 	orr.w	r3, r3, #2
 800e084:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e08a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e096:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	639a      	str	r2, [r3, #56]	@ 0x38
 800e0aa:	e00b      	b.n	800e0c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e0d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d10d      	bne.n	800e0f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d104      	bne.n	800e0ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f968 	bl	800e3b8 <USB_SetDevSpeed>
 800e0e8:	e008      	b.n	800e0fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e0ea:	2101      	movs	r1, #1
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 f963 	bl	800e3b8 <USB_SetDevSpeed>
 800e0f2:	e003      	b.n	800e0fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e0f4:	2103      	movs	r1, #3
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f95e 	bl	800e3b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e0fc:	2110      	movs	r1, #16
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 f8fa 	bl	800e2f8 <USB_FlushTxFifo>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d001      	beq.n	800e10e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 f924 	bl	800e35c <USB_FlushRxFifo>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800e11a:	2301      	movs	r3, #1
 800e11c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e124:	461a      	mov	r2, r3
 800e126:	2300      	movs	r3, #0
 800e128:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e130:	461a      	mov	r2, r3
 800e132:	2300      	movs	r3, #0
 800e134:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e13c:	461a      	mov	r2, r3
 800e13e:	2300      	movs	r3, #0
 800e140:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e142:	2300      	movs	r3, #0
 800e144:	613b      	str	r3, [r7, #16]
 800e146:	e043      	b.n	800e1d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	015a      	lsls	r2, r3, #5
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	4413      	add	r3, r2
 800e150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e15a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e15e:	d118      	bne.n	800e192 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10a      	bne.n	800e17c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	015a      	lsls	r2, r3, #5
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	4413      	add	r3, r2
 800e16e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e172:	461a      	mov	r2, r3
 800e174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e178:	6013      	str	r3, [r2, #0]
 800e17a:	e013      	b.n	800e1a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	015a      	lsls	r2, r3, #5
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	4413      	add	r3, r2
 800e184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e188:	461a      	mov	r2, r3
 800e18a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e18e:	6013      	str	r3, [r2, #0]
 800e190:	e008      	b.n	800e1a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	015a      	lsls	r2, r3, #5
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	4413      	add	r3, r2
 800e19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e19e:	461a      	mov	r2, r3
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	015a      	lsls	r2, r3, #5
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	4413      	add	r3, r2
 800e1ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	015a      	lsls	r2, r3, #5
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	4413      	add	r3, r2
 800e1be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e1c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	613b      	str	r3, [r7, #16]
 800e1d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d3b5      	bcc.n	800e148 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1dc:	2300      	movs	r3, #0
 800e1de:	613b      	str	r3, [r7, #16]
 800e1e0:	e043      	b.n	800e26a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	015a      	lsls	r2, r3, #5
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1f8:	d118      	bne.n	800e22c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d10a      	bne.n	800e216 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	015a      	lsls	r2, r3, #5
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	4413      	add	r3, r2
 800e208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e20c:	461a      	mov	r2, r3
 800e20e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e212:	6013      	str	r3, [r2, #0]
 800e214:	e013      	b.n	800e23e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e222:	461a      	mov	r2, r3
 800e224:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e228:	6013      	str	r3, [r2, #0]
 800e22a:	e008      	b.n	800e23e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	015a      	lsls	r2, r3, #5
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4413      	add	r3, r2
 800e234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e238:	461a      	mov	r2, r3
 800e23a:	2300      	movs	r3, #0
 800e23c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	015a      	lsls	r2, r3, #5
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	4413      	add	r3, r2
 800e246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e24a:	461a      	mov	r2, r3
 800e24c:	2300      	movs	r3, #0
 800e24e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	015a      	lsls	r2, r3, #5
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	4413      	add	r3, r2
 800e258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e25c:	461a      	mov	r2, r3
 800e25e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	3301      	adds	r3, #1
 800e268:	613b      	str	r3, [r7, #16]
 800e26a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e26e:	461a      	mov	r2, r3
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	4293      	cmp	r3, r2
 800e274:	d3b5      	bcc.n	800e1e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e288:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e296:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e298:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d105      	bne.n	800e2ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	699b      	ldr	r3, [r3, #24]
 800e2a4:	f043 0210 	orr.w	r2, r3, #16
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	699a      	ldr	r2, [r3, #24]
 800e2b0:	4b10      	ldr	r3, [pc, #64]	@ (800e2f4 <USB_DevInit+0x2c4>)
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e2b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d005      	beq.n	800e2cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	f043 0208 	orr.w	r2, r3, #8
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e2cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d107      	bne.n	800e2e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	699b      	ldr	r3, [r3, #24]
 800e2d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e2dc:	f043 0304 	orr.w	r3, r3, #4
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2f0:	b004      	add	sp, #16
 800e2f2:	4770      	bx	lr
 800e2f4:	803c3800 	.word	0x803c3800

0800e2f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e302:	2300      	movs	r3, #0
 800e304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	3301      	adds	r3, #1
 800e30a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e312:	d901      	bls.n	800e318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e314:	2303      	movs	r3, #3
 800e316:	e01b      	b.n	800e350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	691b      	ldr	r3, [r3, #16]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	daf2      	bge.n	800e306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e320:	2300      	movs	r3, #0
 800e322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	019b      	lsls	r3, r3, #6
 800e328:	f043 0220 	orr.w	r2, r3, #32
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	3301      	adds	r3, #1
 800e334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e33c:	d901      	bls.n	800e342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e33e:	2303      	movs	r3, #3
 800e340:	e006      	b.n	800e350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	f003 0320 	and.w	r3, r3, #32
 800e34a:	2b20      	cmp	r3, #32
 800e34c:	d0f0      	beq.n	800e330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e364:	2300      	movs	r3, #0
 800e366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	3301      	adds	r3, #1
 800e36c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e374:	d901      	bls.n	800e37a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e376:	2303      	movs	r3, #3
 800e378:	e018      	b.n	800e3ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	691b      	ldr	r3, [r3, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	daf2      	bge.n	800e368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e382:	2300      	movs	r3, #0
 800e384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2210      	movs	r2, #16
 800e38a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	3301      	adds	r3, #1
 800e390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e398:	d901      	bls.n	800e39e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e39a:	2303      	movs	r3, #3
 800e39c:	e006      	b.n	800e3ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	f003 0310 	and.w	r3, r3, #16
 800e3a6:	2b10      	cmp	r3, #16
 800e3a8:	d0f0      	beq.n	800e38c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	68f9      	ldr	r1, [r7, #12]
 800e3d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b087      	sub	sp, #28
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	f003 0306 	and.w	r3, r3, #6
 800e402:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d102      	bne.n	800e410 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e40a:	2300      	movs	r3, #0
 800e40c:	75fb      	strb	r3, [r7, #23]
 800e40e:	e00a      	b.n	800e426 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2b02      	cmp	r3, #2
 800e414:	d002      	beq.n	800e41c <USB_GetDevSpeed+0x32>
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2b06      	cmp	r3, #6
 800e41a:	d102      	bne.n	800e422 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e41c:	2302      	movs	r3, #2
 800e41e:	75fb      	strb	r3, [r7, #23]
 800e420:	e001      	b.n	800e426 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e422:	230f      	movs	r3, #15
 800e424:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e426:	7dfb      	ldrb	r3, [r7, #23]
}
 800e428:	4618      	mov	r0, r3
 800e42a:	371c      	adds	r7, #28
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	785b      	ldrb	r3, [r3, #1]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d13a      	bne.n	800e4c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e456:	69da      	ldr	r2, [r3, #28]
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	f003 030f 	and.w	r3, r3, #15
 800e460:	2101      	movs	r1, #1
 800e462:	fa01 f303 	lsl.w	r3, r1, r3
 800e466:	b29b      	uxth	r3, r3
 800e468:	68f9      	ldr	r1, [r7, #12]
 800e46a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e46e:	4313      	orrs	r3, r2
 800e470:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	015a      	lsls	r2, r3, #5
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	4413      	add	r3, r2
 800e47a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e484:	2b00      	cmp	r3, #0
 800e486:	d155      	bne.n	800e534 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	015a      	lsls	r2, r3, #5
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	4413      	add	r3, r2
 800e490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	791b      	ldrb	r3, [r3, #4]
 800e4a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	059b      	lsls	r3, r3, #22
 800e4aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	0151      	lsls	r1, r2, #5
 800e4b2:	68fa      	ldr	r2, [r7, #12]
 800e4b4:	440a      	add	r2, r1
 800e4b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e4be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4c2:	6013      	str	r3, [r2, #0]
 800e4c4:	e036      	b.n	800e534 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4cc:	69da      	ldr	r2, [r3, #28]
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	f003 030f 	and.w	r3, r3, #15
 800e4d6:	2101      	movs	r1, #1
 800e4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4dc:	041b      	lsls	r3, r3, #16
 800e4de:	68f9      	ldr	r1, [r7, #12]
 800e4e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	015a      	lsls	r2, r3, #5
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d11a      	bne.n	800e534 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	015a      	lsls	r2, r3, #5
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	4413      	add	r3, r2
 800e506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	791b      	ldrb	r3, [r3, #4]
 800e518:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e51a:	430b      	orrs	r3, r1
 800e51c:	4313      	orrs	r3, r2
 800e51e:	68ba      	ldr	r2, [r7, #8]
 800e520:	0151      	lsls	r1, r2, #5
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	440a      	add	r2, r1
 800e526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e52a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e52e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e532:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3714      	adds	r7, #20
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr
	...

0800e544 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e544:	b480      	push	{r7}
 800e546:	b085      	sub	sp, #20
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	785b      	ldrb	r3, [r3, #1]
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d161      	bne.n	800e624 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	015a      	lsls	r2, r3, #5
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	4413      	add	r3, r2
 800e568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e572:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e576:	d11f      	bne.n	800e5b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	015a      	lsls	r2, r3, #5
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	4413      	add	r3, r2
 800e580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	68ba      	ldr	r2, [r7, #8]
 800e588:	0151      	lsls	r1, r2, #5
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	440a      	add	r2, r1
 800e58e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e592:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e596:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	015a      	lsls	r2, r3, #5
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	4413      	add	r3, r2
 800e5a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68ba      	ldr	r2, [r7, #8]
 800e5a8:	0151      	lsls	r1, r2, #5
 800e5aa:	68fa      	ldr	r2, [r7, #12]
 800e5ac:	440a      	add	r2, r1
 800e5ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e5b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	f003 030f 	and.w	r3, r3, #15
 800e5c8:	2101      	movs	r1, #1
 800e5ca:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	43db      	mvns	r3, r3
 800e5d2:	68f9      	ldr	r1, [r7, #12]
 800e5d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5d8:	4013      	ands	r3, r2
 800e5da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5e2:	69da      	ldr	r2, [r3, #28]
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	f003 030f 	and.w	r3, r3, #15
 800e5ec:	2101      	movs	r1, #1
 800e5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	43db      	mvns	r3, r3
 800e5f6:	68f9      	ldr	r1, [r7, #12]
 800e5f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	0159      	lsls	r1, r3, #5
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	440b      	add	r3, r1
 800e616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e61a:	4619      	mov	r1, r3
 800e61c:	4b35      	ldr	r3, [pc, #212]	@ (800e6f4 <USB_DeactivateEndpoint+0x1b0>)
 800e61e:	4013      	ands	r3, r2
 800e620:	600b      	str	r3, [r1, #0]
 800e622:	e060      	b.n	800e6e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	015a      	lsls	r2, r3, #5
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	4413      	add	r3, r2
 800e62c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e636:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e63a:	d11f      	bne.n	800e67c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	015a      	lsls	r2, r3, #5
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	4413      	add	r3, r2
 800e644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	0151      	lsls	r1, r2, #5
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	440a      	add	r2, r1
 800e652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e656:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e65a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4413      	add	r3, r2
 800e664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	0151      	lsls	r1, r2, #5
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	440a      	add	r2, r1
 800e672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e676:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e67a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	f003 030f 	and.w	r3, r3, #15
 800e68c:	2101      	movs	r1, #1
 800e68e:	fa01 f303 	lsl.w	r3, r1, r3
 800e692:	041b      	lsls	r3, r3, #16
 800e694:	43db      	mvns	r3, r3
 800e696:	68f9      	ldr	r1, [r7, #12]
 800e698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e69c:	4013      	ands	r3, r2
 800e69e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6a6:	69da      	ldr	r2, [r3, #28]
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	f003 030f 	and.w	r3, r3, #15
 800e6b0:	2101      	movs	r1, #1
 800e6b2:	fa01 f303 	lsl.w	r3, r1, r3
 800e6b6:	041b      	lsls	r3, r3, #16
 800e6b8:	43db      	mvns	r3, r3
 800e6ba:	68f9      	ldr	r1, [r7, #12]
 800e6bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	015a      	lsls	r2, r3, #5
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	0159      	lsls	r1, r3, #5
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	440b      	add	r3, r1
 800e6da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6de:	4619      	mov	r1, r3
 800e6e0:	4b05      	ldr	r3, [pc, #20]	@ (800e6f8 <USB_DeactivateEndpoint+0x1b4>)
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3714      	adds	r7, #20
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr
 800e6f4:	ec337800 	.word	0xec337800
 800e6f8:	eff37800 	.word	0xeff37800

0800e6fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08a      	sub	sp, #40	@ 0x28
 800e700:	af02      	add	r7, sp, #8
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	4613      	mov	r3, r2
 800e708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	785b      	ldrb	r3, [r3, #1]
 800e718:	2b01      	cmp	r3, #1
 800e71a:	f040 817a 	bne.w	800ea12 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d132      	bne.n	800e78c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	015a      	lsls	r2, r3, #5
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	4413      	add	r3, r2
 800e72e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	69ba      	ldr	r2, [r7, #24]
 800e736:	0151      	lsls	r1, r2, #5
 800e738:	69fa      	ldr	r2, [r7, #28]
 800e73a:	440a      	add	r2, r1
 800e73c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e740:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e744:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	015a      	lsls	r2, r3, #5
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	4413      	add	r3, r2
 800e752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e756:	691b      	ldr	r3, [r3, #16]
 800e758:	69ba      	ldr	r2, [r7, #24]
 800e75a:	0151      	lsls	r1, r2, #5
 800e75c:	69fa      	ldr	r2, [r7, #28]
 800e75e:	440a      	add	r2, r1
 800e760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	015a      	lsls	r2, r3, #5
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	4413      	add	r3, r2
 800e772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e776:	691b      	ldr	r3, [r3, #16]
 800e778:	69ba      	ldr	r2, [r7, #24]
 800e77a:	0151      	lsls	r1, r2, #5
 800e77c:	69fa      	ldr	r2, [r7, #28]
 800e77e:	440a      	add	r2, r1
 800e780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e784:	0cdb      	lsrs	r3, r3, #19
 800e786:	04db      	lsls	r3, r3, #19
 800e788:	6113      	str	r3, [r2, #16]
 800e78a:	e092      	b.n	800e8b2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	015a      	lsls	r2, r3, #5
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	4413      	add	r3, r2
 800e794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e798:	691b      	ldr	r3, [r3, #16]
 800e79a:	69ba      	ldr	r2, [r7, #24]
 800e79c:	0151      	lsls	r1, r2, #5
 800e79e:	69fa      	ldr	r2, [r7, #28]
 800e7a0:	440a      	add	r2, r1
 800e7a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7a6:	0cdb      	lsrs	r3, r3, #19
 800e7a8:	04db      	lsls	r3, r3, #19
 800e7aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	015a      	lsls	r2, r3, #5
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	69ba      	ldr	r2, [r7, #24]
 800e7bc:	0151      	lsls	r1, r2, #5
 800e7be:	69fa      	ldr	r2, [r7, #28]
 800e7c0:	440a      	add	r2, r1
 800e7c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e7ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800e7ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d11a      	bne.n	800e80c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	691a      	ldr	r2, [r3, #16]
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d903      	bls.n	800e7ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	689a      	ldr	r2, [r3, #8]
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	015a      	lsls	r2, r3, #5
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7f6:	691b      	ldr	r3, [r3, #16]
 800e7f8:	69ba      	ldr	r2, [r7, #24]
 800e7fa:	0151      	lsls	r1, r2, #5
 800e7fc:	69fa      	ldr	r2, [r7, #28]
 800e7fe:	440a      	add	r2, r1
 800e800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e808:	6113      	str	r3, [r2, #16]
 800e80a:	e01b      	b.n	800e844 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	015a      	lsls	r2, r3, #5
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	4413      	add	r3, r2
 800e814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e818:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	6919      	ldr	r1, [r3, #16]
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	440b      	add	r3, r1
 800e824:	1e59      	subs	r1, r3, #1
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e82e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e830:	4ba2      	ldr	r3, [pc, #648]	@ (800eabc <USB_EPStartXfer+0x3c0>)
 800e832:	400b      	ands	r3, r1
 800e834:	69b9      	ldr	r1, [r7, #24]
 800e836:	0148      	lsls	r0, r1, #5
 800e838:	69f9      	ldr	r1, [r7, #28]
 800e83a:	4401      	add	r1, r0
 800e83c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e840:	4313      	orrs	r3, r2
 800e842:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	015a      	lsls	r2, r3, #5
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	4413      	add	r3, r2
 800e84c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e850:	691a      	ldr	r2, [r3, #16]
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e85a:	69b9      	ldr	r1, [r7, #24]
 800e85c:	0148      	lsls	r0, r1, #5
 800e85e:	69f9      	ldr	r1, [r7, #28]
 800e860:	4401      	add	r1, r0
 800e862:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e866:	4313      	orrs	r3, r2
 800e868:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	791b      	ldrb	r3, [r3, #4]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d11f      	bne.n	800e8b2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	015a      	lsls	r2, r3, #5
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	4413      	add	r3, r2
 800e87a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	69ba      	ldr	r2, [r7, #24]
 800e882:	0151      	lsls	r1, r2, #5
 800e884:	69fa      	ldr	r2, [r7, #28]
 800e886:	440a      	add	r2, r1
 800e888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e88c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e890:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	015a      	lsls	r2, r3, #5
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	4413      	add	r3, r2
 800e89a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e89e:	691b      	ldr	r3, [r3, #16]
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	0151      	lsls	r1, r2, #5
 800e8a4:	69fa      	ldr	r2, [r7, #28]
 800e8a6:	440a      	add	r2, r1
 800e8a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e8b2:	79fb      	ldrb	r3, [r7, #7]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d14b      	bne.n	800e950 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	69db      	ldr	r3, [r3, #28]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d009      	beq.n	800e8d4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	015a      	lsls	r2, r3, #5
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	69db      	ldr	r3, [r3, #28]
 800e8d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	791b      	ldrb	r3, [r3, #4]
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d128      	bne.n	800e92e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d110      	bne.n	800e90e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	015a      	lsls	r2, r3, #5
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	69ba      	ldr	r2, [r7, #24]
 800e8fc:	0151      	lsls	r1, r2, #5
 800e8fe:	69fa      	ldr	r2, [r7, #28]
 800e900:	440a      	add	r2, r1
 800e902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e906:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	e00f      	b.n	800e92e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	015a      	lsls	r2, r3, #5
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	4413      	add	r3, r2
 800e916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	69ba      	ldr	r2, [r7, #24]
 800e91e:	0151      	lsls	r1, r2, #5
 800e920:	69fa      	ldr	r2, [r7, #28]
 800e922:	440a      	add	r2, r1
 800e924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e92c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	015a      	lsls	r2, r3, #5
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	4413      	add	r3, r2
 800e936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	69ba      	ldr	r2, [r7, #24]
 800e93e:	0151      	lsls	r1, r2, #5
 800e940:	69fa      	ldr	r2, [r7, #28]
 800e942:	440a      	add	r2, r1
 800e944:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e948:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e94c:	6013      	str	r3, [r2, #0]
 800e94e:	e165      	b.n	800ec1c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	015a      	lsls	r2, r3, #5
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	4413      	add	r3, r2
 800e958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	69ba      	ldr	r2, [r7, #24]
 800e960:	0151      	lsls	r1, r2, #5
 800e962:	69fa      	ldr	r2, [r7, #28]
 800e964:	440a      	add	r2, r1
 800e966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e96a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e96e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	791b      	ldrb	r3, [r3, #4]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d015      	beq.n	800e9a4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	691b      	ldr	r3, [r3, #16]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 814d 	beq.w	800ec1c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	f003 030f 	and.w	r3, r3, #15
 800e992:	2101      	movs	r1, #1
 800e994:	fa01 f303 	lsl.w	r3, r1, r3
 800e998:	69f9      	ldr	r1, [r7, #28]
 800e99a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	634b      	str	r3, [r1, #52]	@ 0x34
 800e9a2:	e13b      	b.n	800ec1c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d110      	bne.n	800e9d6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69ba      	ldr	r2, [r7, #24]
 800e9c4:	0151      	lsls	r1, r2, #5
 800e9c6:	69fa      	ldr	r2, [r7, #28]
 800e9c8:	440a      	add	r2, r1
 800e9ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	e00f      	b.n	800e9f6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	015a      	lsls	r2, r3, #5
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	4413      	add	r3, r2
 800e9de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	69ba      	ldr	r2, [r7, #24]
 800e9e6:	0151      	lsls	r1, r2, #5
 800e9e8:	69fa      	ldr	r2, [r7, #28]
 800e9ea:	440a      	add	r2, r1
 800e9ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	68d9      	ldr	r1, [r3, #12]
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	781a      	ldrb	r2, [r3, #0]
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	691b      	ldr	r3, [r3, #16]
 800ea02:	b298      	uxth	r0, r3
 800ea04:	79fb      	ldrb	r3, [r7, #7]
 800ea06:	9300      	str	r3, [sp, #0]
 800ea08:	4603      	mov	r3, r0
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f000 f9b8 	bl	800ed80 <USB_WritePacket>
 800ea10:	e104      	b.n	800ec1c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	015a      	lsls	r2, r3, #5
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	4413      	add	r3, r2
 800ea1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	69ba      	ldr	r2, [r7, #24]
 800ea22:	0151      	lsls	r1, r2, #5
 800ea24:	69fa      	ldr	r2, [r7, #28]
 800ea26:	440a      	add	r2, r1
 800ea28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea2c:	0cdb      	lsrs	r3, r3, #19
 800ea2e:	04db      	lsls	r3, r3, #19
 800ea30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	015a      	lsls	r2, r3, #5
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	4413      	add	r3, r2
 800ea3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea3e:	691b      	ldr	r3, [r3, #16]
 800ea40:	69ba      	ldr	r2, [r7, #24]
 800ea42:	0151      	lsls	r1, r2, #5
 800ea44:	69fa      	ldr	r2, [r7, #28]
 800ea46:	440a      	add	r2, r1
 800ea48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea4c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ea50:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ea54:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d131      	bne.n	800eac0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d003      	beq.n	800ea6c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	689a      	ldr	r2, [r3, #8]
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	689a      	ldr	r2, [r3, #8]
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	015a      	lsls	r2, r3, #5
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea80:	691a      	ldr	r2, [r3, #16]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea8a:	69b9      	ldr	r1, [r7, #24]
 800ea8c:	0148      	lsls	r0, r1, #5
 800ea8e:	69f9      	ldr	r1, [r7, #28]
 800ea90:	4401      	add	r1, r0
 800ea92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea96:	4313      	orrs	r3, r2
 800ea98:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	015a      	lsls	r2, r3, #5
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	69ba      	ldr	r2, [r7, #24]
 800eaaa:	0151      	lsls	r1, r2, #5
 800eaac:	69fa      	ldr	r2, [r7, #28]
 800eaae:	440a      	add	r2, r1
 800eab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eab4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eab8:	6113      	str	r3, [r2, #16]
 800eaba:	e061      	b.n	800eb80 <USB_EPStartXfer+0x484>
 800eabc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	691b      	ldr	r3, [r3, #16]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d123      	bne.n	800eb10 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	015a      	lsls	r2, r3, #5
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	4413      	add	r3, r2
 800ead0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ead4:	691a      	ldr	r2, [r3, #16]
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eade:	69b9      	ldr	r1, [r7, #24]
 800eae0:	0148      	lsls	r0, r1, #5
 800eae2:	69f9      	ldr	r1, [r7, #28]
 800eae4:	4401      	add	r1, r0
 800eae6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eaea:	4313      	orrs	r3, r2
 800eaec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	015a      	lsls	r2, r3, #5
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eafa:	691b      	ldr	r3, [r3, #16]
 800eafc:	69ba      	ldr	r2, [r7, #24]
 800eafe:	0151      	lsls	r1, r2, #5
 800eb00:	69fa      	ldr	r2, [r7, #28]
 800eb02:	440a      	add	r2, r1
 800eb04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb0c:	6113      	str	r3, [r2, #16]
 800eb0e:	e037      	b.n	800eb80 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	691a      	ldr	r2, [r3, #16]
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	4413      	add	r3, r2
 800eb1a:	1e5a      	subs	r2, r3, #1
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	8afa      	ldrh	r2, [r7, #22]
 800eb2c:	fb03 f202 	mul.w	r2, r3, r2
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb34:	69bb      	ldr	r3, [r7, #24]
 800eb36:	015a      	lsls	r2, r3, #5
 800eb38:	69fb      	ldr	r3, [r7, #28]
 800eb3a:	4413      	add	r3, r2
 800eb3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb40:	691a      	ldr	r2, [r3, #16]
 800eb42:	8afb      	ldrh	r3, [r7, #22]
 800eb44:	04d9      	lsls	r1, r3, #19
 800eb46:	4b38      	ldr	r3, [pc, #224]	@ (800ec28 <USB_EPStartXfer+0x52c>)
 800eb48:	400b      	ands	r3, r1
 800eb4a:	69b9      	ldr	r1, [r7, #24]
 800eb4c:	0148      	lsls	r0, r1, #5
 800eb4e:	69f9      	ldr	r1, [r7, #28]
 800eb50:	4401      	add	r1, r0
 800eb52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb56:	4313      	orrs	r3, r2
 800eb58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	015a      	lsls	r2, r3, #5
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	4413      	add	r3, r2
 800eb62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb66:	691a      	ldr	r2, [r3, #16]
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	6a1b      	ldr	r3, [r3, #32]
 800eb6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb70:	69b9      	ldr	r1, [r7, #24]
 800eb72:	0148      	lsls	r0, r1, #5
 800eb74:	69f9      	ldr	r1, [r7, #28]
 800eb76:	4401      	add	r1, r0
 800eb78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eb80:	79fb      	ldrb	r3, [r7, #7]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d10d      	bne.n	800eba2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d009      	beq.n	800eba2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	68d9      	ldr	r1, [r3, #12]
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	015a      	lsls	r2, r3, #5
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	4413      	add	r3, r2
 800eb9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb9e:	460a      	mov	r2, r1
 800eba0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	791b      	ldrb	r3, [r3, #4]
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d128      	bne.n	800ebfc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d110      	bne.n	800ebdc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	015a      	lsls	r2, r3, #5
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	69ba      	ldr	r2, [r7, #24]
 800ebca:	0151      	lsls	r1, r2, #5
 800ebcc:	69fa      	ldr	r2, [r7, #28]
 800ebce:	440a      	add	r2, r1
 800ebd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ebd8:	6013      	str	r3, [r2, #0]
 800ebda:	e00f      	b.n	800ebfc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	015a      	lsls	r2, r3, #5
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	69ba      	ldr	r2, [r7, #24]
 800ebec:	0151      	lsls	r1, r2, #5
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	440a      	add	r2, r1
 800ebf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ebfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	015a      	lsls	r2, r3, #5
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	4413      	add	r3, r2
 800ec04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	69ba      	ldr	r2, [r7, #24]
 800ec0c:	0151      	lsls	r1, r2, #5
 800ec0e:	69fa      	ldr	r2, [r7, #28]
 800ec10:	440a      	add	r2, r1
 800ec12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ec1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3720      	adds	r7, #32
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	1ff80000 	.word	0x1ff80000

0800ec2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b087      	sub	sp, #28
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec36:	2300      	movs	r3, #0
 800ec38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	785b      	ldrb	r3, [r3, #1]
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d14a      	bne.n	800ece0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	015a      	lsls	r2, r3, #5
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	4413      	add	r3, r2
 800ec54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec62:	f040 8086 	bne.w	800ed72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	015a      	lsls	r2, r3, #5
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	7812      	ldrb	r2, [r2, #0]
 800ec7a:	0151      	lsls	r1, r2, #5
 800ec7c:	693a      	ldr	r2, [r7, #16]
 800ec7e:	440a      	add	r2, r1
 800ec80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	015a      	lsls	r2, r3, #5
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	4413      	add	r3, r2
 800ec94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	7812      	ldrb	r2, [r2, #0]
 800ec9e:	0151      	lsls	r1, r2, #5
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	440a      	add	r2, r1
 800eca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eca8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d902      	bls.n	800ecc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	75fb      	strb	r3, [r7, #23]
          break;
 800ecc2:	e056      	b.n	800ed72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	015a      	lsls	r2, r3, #5
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	4413      	add	r3, r2
 800ecce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecdc:	d0e7      	beq.n	800ecae <USB_EPStopXfer+0x82>
 800ecde:	e048      	b.n	800ed72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	015a      	lsls	r2, r3, #5
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	4413      	add	r3, r2
 800ecea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecf8:	d13b      	bne.n	800ed72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	015a      	lsls	r2, r3, #5
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	4413      	add	r3, r2
 800ed04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	683a      	ldr	r2, [r7, #0]
 800ed0c:	7812      	ldrb	r2, [r2, #0]
 800ed0e:	0151      	lsls	r1, r2, #5
 800ed10:	693a      	ldr	r2, [r7, #16]
 800ed12:	440a      	add	r2, r1
 800ed14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	015a      	lsls	r2, r3, #5
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	4413      	add	r3, r2
 800ed28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	7812      	ldrb	r2, [r2, #0]
 800ed32:	0151      	lsls	r1, r2, #5
 800ed34:	693a      	ldr	r2, [r7, #16]
 800ed36:	440a      	add	r2, r1
 800ed38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3301      	adds	r3, #1
 800ed46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d902      	bls.n	800ed58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ed52:	2301      	movs	r3, #1
 800ed54:	75fb      	strb	r3, [r7, #23]
          break;
 800ed56:	e00c      	b.n	800ed72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	015a      	lsls	r2, r3, #5
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	4413      	add	r3, r2
 800ed62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed70:	d0e7      	beq.n	800ed42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ed72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	371c      	adds	r7, #28
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b089      	sub	sp, #36	@ 0x24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	4611      	mov	r1, r2
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	460b      	mov	r3, r1
 800ed90:	71fb      	strb	r3, [r7, #7]
 800ed92:	4613      	mov	r3, r2
 800ed94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ed9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d123      	bne.n	800edee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800eda6:	88bb      	ldrh	r3, [r7, #4]
 800eda8:	3303      	adds	r3, #3
 800edaa:	089b      	lsrs	r3, r3, #2
 800edac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800edae:	2300      	movs	r3, #0
 800edb0:	61bb      	str	r3, [r7, #24]
 800edb2:	e018      	b.n	800ede6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800edb4:	79fb      	ldrb	r3, [r7, #7]
 800edb6:	031a      	lsls	r2, r3, #12
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	4413      	add	r3, r2
 800edbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edc0:	461a      	mov	r2, r3
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	3301      	adds	r3, #1
 800edcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	3301      	adds	r3, #1
 800edd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	3301      	adds	r3, #1
 800edd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	3301      	adds	r3, #1
 800edde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	3301      	adds	r3, #1
 800ede4:	61bb      	str	r3, [r7, #24]
 800ede6:	69ba      	ldr	r2, [r7, #24]
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	429a      	cmp	r2, r3
 800edec:	d3e2      	bcc.n	800edb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3724      	adds	r7, #36	@ 0x24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b08b      	sub	sp, #44	@ 0x2c
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	4613      	mov	r3, r2
 800ee08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ee12:	88fb      	ldrh	r3, [r7, #6]
 800ee14:	089b      	lsrs	r3, r3, #2
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ee1a:	88fb      	ldrh	r3, [r7, #6]
 800ee1c:	f003 0303 	and.w	r3, r3, #3
 800ee20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ee22:	2300      	movs	r3, #0
 800ee24:	623b      	str	r3, [r7, #32]
 800ee26:	e014      	b.n	800ee52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee32:	601a      	str	r2, [r3, #0]
    pDest++;
 800ee34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee36:	3301      	adds	r3, #1
 800ee38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee42:	3301      	adds	r3, #1
 800ee44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee48:	3301      	adds	r3, #1
 800ee4a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ee4c:	6a3b      	ldr	r3, [r7, #32]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	623b      	str	r3, [r7, #32]
 800ee52:	6a3a      	ldr	r2, [r7, #32]
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d3e6      	bcc.n	800ee28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee5a:	8bfb      	ldrh	r3, [r7, #30]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d01e      	beq.n	800ee9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee60:	2300      	movs	r3, #0
 800ee62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	f107 0310 	add.w	r3, r7, #16
 800ee70:	6812      	ldr	r2, [r2, #0]
 800ee72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee74:	693a      	ldr	r2, [r7, #16]
 800ee76:	6a3b      	ldr	r3, [r7, #32]
 800ee78:	b2db      	uxtb	r3, r3
 800ee7a:	00db      	lsls	r3, r3, #3
 800ee7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ee80:	b2da      	uxtb	r2, r3
 800ee82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee84:	701a      	strb	r2, [r3, #0]
      i++;
 800ee86:	6a3b      	ldr	r3, [r7, #32]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8e:	3301      	adds	r3, #1
 800ee90:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ee92:	8bfb      	ldrh	r3, [r7, #30]
 800ee94:	3b01      	subs	r3, #1
 800ee96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ee98:	8bfb      	ldrh	r3, [r7, #30]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d1ea      	bne.n	800ee74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	372c      	adds	r7, #44	@ 0x2c
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	785b      	ldrb	r3, [r3, #1]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d12c      	bne.n	800ef22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	015a      	lsls	r2, r3, #5
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	4413      	add	r3, r2
 800eed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	db12      	blt.n	800ef00 <USB_EPSetStall+0x54>
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00f      	beq.n	800ef00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	015a      	lsls	r2, r3, #5
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	4413      	add	r3, r2
 800eee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	68ba      	ldr	r2, [r7, #8]
 800eef0:	0151      	lsls	r1, r2, #5
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	440a      	add	r2, r1
 800eef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eefa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eefe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	015a      	lsls	r2, r3, #5
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	4413      	add	r3, r2
 800ef08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	0151      	lsls	r1, r2, #5
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	440a      	add	r2, r1
 800ef16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef1e:	6013      	str	r3, [r2, #0]
 800ef20:	e02b      	b.n	800ef7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	015a      	lsls	r2, r3, #5
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	4413      	add	r3, r2
 800ef2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	db12      	blt.n	800ef5a <USB_EPSetStall+0xae>
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00f      	beq.n	800ef5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	015a      	lsls	r2, r3, #5
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	4413      	add	r3, r2
 800ef42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	68ba      	ldr	r2, [r7, #8]
 800ef4a:	0151      	lsls	r1, r2, #5
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	440a      	add	r2, r1
 800ef50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	015a      	lsls	r2, r3, #5
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	4413      	add	r3, r2
 800ef62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	0151      	lsls	r1, r2, #5
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	440a      	add	r2, r1
 800ef70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3714      	adds	r7, #20
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b085      	sub	sp, #20
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	785b      	ldrb	r3, [r3, #1]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	d128      	bne.n	800eff6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	015a      	lsls	r2, r3, #5
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	4413      	add	r3, r2
 800efac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	0151      	lsls	r1, r2, #5
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	440a      	add	r2, r1
 800efba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	791b      	ldrb	r3, [r3, #4]
 800efc8:	2b03      	cmp	r3, #3
 800efca:	d003      	beq.n	800efd4 <USB_EPClearStall+0x4c>
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	791b      	ldrb	r3, [r3, #4]
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d138      	bne.n	800f046 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	015a      	lsls	r2, r3, #5
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	4413      	add	r3, r2
 800efdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	68ba      	ldr	r2, [r7, #8]
 800efe4:	0151      	lsls	r1, r2, #5
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	440a      	add	r2, r1
 800efea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eff2:	6013      	str	r3, [r2, #0]
 800eff4:	e027      	b.n	800f046 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	015a      	lsls	r2, r3, #5
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	4413      	add	r3, r2
 800effe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68ba      	ldr	r2, [r7, #8]
 800f006:	0151      	lsls	r1, r2, #5
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	440a      	add	r2, r1
 800f00c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f010:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f014:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	791b      	ldrb	r3, [r3, #4]
 800f01a:	2b03      	cmp	r3, #3
 800f01c:	d003      	beq.n	800f026 <USB_EPClearStall+0x9e>
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	791b      	ldrb	r3, [r3, #4]
 800f022:	2b02      	cmp	r3, #2
 800f024:	d10f      	bne.n	800f046 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	015a      	lsls	r2, r3, #5
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	4413      	add	r3, r2
 800f02e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	0151      	lsls	r1, r2, #5
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	440a      	add	r2, r1
 800f03c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f044:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3714      	adds	r7, #20
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr

0800f054 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b086      	sub	sp, #24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800f060:	2300      	movs	r3, #0
 800f062:	617b      	str	r3, [r7, #20]
 800f064:	e016      	b.n	800f094 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	015a      	lsls	r2, r3, #5
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	4413      	add	r3, r2
 800f06e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f072:	461a      	mov	r2, r3
 800f074:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f078:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	015a      	lsls	r2, r3, #5
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	4413      	add	r3, r2
 800f082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f086:	461a      	mov	r2, r3
 800f088:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f08c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	3301      	adds	r3, #1
 800f092:	617b      	str	r3, [r7, #20]
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	2b0e      	cmp	r3, #14
 800f098:	d9e5      	bls.n	800f066 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff f94c 	bl	800e35c <USB_FlushRxFifo>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f0c8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <USB_StopDevice+0x7e>
  {
    return ret;
 800f0ce:	7bfb      	ldrb	r3, [r7, #15]
 800f0d0:	e00b      	b.n	800f0ea <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800f0d2:	2110      	movs	r1, #16
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7ff f90f 	bl	800e2f8 <USB_FlushTxFifo>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <USB_StopDevice+0x94>
  {
    return ret;
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	e000      	b.n	800f0ea <USB_StopDevice+0x96>
  }

  return ret;
 800f0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3718      	adds	r7, #24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f0f2:	b480      	push	{r7}
 800f0f4:	b085      	sub	sp, #20
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f110:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f114:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	78fb      	ldrb	r3, [r7, #3]
 800f120:	011b      	lsls	r3, r3, #4
 800f122:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f126:	68f9      	ldr	r1, [r7, #12]
 800f128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f12c:	4313      	orrs	r3, r2
 800f12e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	3714      	adds	r7, #20
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr

0800f13e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f13e:	b480      	push	{r7}
 800f140:	b085      	sub	sp, #20
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f158:	f023 0303 	bic.w	r3, r3, #3
 800f15c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	68fa      	ldr	r2, [r7, #12]
 800f168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f16c:	f023 0302 	bic.w	r3, r3, #2
 800f170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f172:	2300      	movs	r3, #0
}
 800f174:	4618      	mov	r0, r3
 800f176:	3714      	adds	r7, #20
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f180:	b480      	push	{r7}
 800f182:	b085      	sub	sp, #20
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f19a:	f023 0303 	bic.w	r3, r3, #3
 800f19e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1ae:	f043 0302 	orr.w	r3, r3, #2
 800f1b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1b4:	2300      	movs	r3, #0
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3714      	adds	r7, #20
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr

0800f1c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f1c2:	b480      	push	{r7}
 800f1c4:	b085      	sub	sp, #20
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	695b      	ldr	r3, [r3, #20]
 800f1ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	4013      	ands	r3, r2
 800f1d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1da:	68fb      	ldr	r3, [r7, #12]
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3714      	adds	r7, #20
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1fa:	699b      	ldr	r3, [r3, #24]
 800f1fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f204:	69db      	ldr	r3, [r3, #28]
 800f206:	68ba      	ldr	r2, [r7, #8]
 800f208:	4013      	ands	r3, r2
 800f20a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	0c1b      	lsrs	r3, r3, #16
}
 800f210:	4618      	mov	r0, r3
 800f212:	3714      	adds	r7, #20
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr

0800f21c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b085      	sub	sp, #20
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f22e:	699b      	ldr	r3, [r3, #24]
 800f230:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f238:	69db      	ldr	r3, [r3, #28]
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	4013      	ands	r3, r2
 800f23e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	b29b      	uxth	r3, r3
}
 800f244:	4618      	mov	r0, r3
 800f246:	3714      	adds	r7, #20
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f260:	78fb      	ldrb	r3, [r7, #3]
 800f262:	015a      	lsls	r2, r3, #5
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	4413      	add	r3, r2
 800f268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f26c:	689b      	ldr	r3, [r3, #8]
 800f26e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	68ba      	ldr	r2, [r7, #8]
 800f27a:	4013      	ands	r3, r2
 800f27c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f27e:	68bb      	ldr	r3, [r7, #8]
}
 800f280:	4618      	mov	r0, r3
 800f282:	3714      	adds	r7, #20
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b087      	sub	sp, #28
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	460b      	mov	r3, r1
 800f296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2ae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2b0:	78fb      	ldrb	r3, [r7, #3]
 800f2b2:	f003 030f 	and.w	r3, r3, #15
 800f2b6:	68fa      	ldr	r2, [r7, #12]
 800f2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800f2bc:	01db      	lsls	r3, r3, #7
 800f2be:	b2db      	uxtb	r3, r3
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2c6:	78fb      	ldrb	r3, [r7, #3]
 800f2c8:	015a      	lsls	r2, r3, #5
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	693a      	ldr	r2, [r7, #16]
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2da:	68bb      	ldr	r3, [r7, #8]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	371c      	adds	r7, #28
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	695b      	ldr	r3, [r3, #20]
 800f2f4:	f003 0301 	and.w	r3, r3, #1
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f31e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800f322:	f023 0307 	bic.w	r3, r3, #7
 800f326:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f33a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f33c:	2300      	movs	r3, #0
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3714      	adds	r7, #20
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
	...

0800f34c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b087      	sub	sp, #28
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	460b      	mov	r3, r1
 800f356:	607a      	str	r2, [r7, #4]
 800f358:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	333c      	adds	r3, #60	@ 0x3c
 800f362:	3304      	adds	r3, #4
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	4a26      	ldr	r2, [pc, #152]	@ (800f404 <USB_EP0_OutStart+0xb8>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d90a      	bls.n	800f386 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f37c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f380:	d101      	bne.n	800f386 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f382:	2300      	movs	r3, #0
 800f384:	e037      	b.n	800f3f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f38c:	461a      	mov	r2, r3
 800f38e:	2300      	movs	r3, #0
 800f390:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f3a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	697a      	ldr	r2, [r7, #20]
 800f3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3b4:	f043 0318 	orr.w	r3, r3, #24
 800f3b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3c0:	691b      	ldr	r3, [r3, #16]
 800f3c2:	697a      	ldr	r2, [r7, #20]
 800f3c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f3cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f3ce:	7afb      	ldrb	r3, [r7, #11]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d10f      	bne.n	800f3f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3da:	461a      	mov	r2, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	697a      	ldr	r2, [r7, #20]
 800f3ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f3f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	371c      	adds	r7, #28
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	4f54300a 	.word	0x4f54300a

0800f408 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f408:	b480      	push	{r7}
 800f40a:	b085      	sub	sp, #20
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f410:	2300      	movs	r3, #0
 800f412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	3301      	adds	r3, #1
 800f418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f420:	d901      	bls.n	800f426 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f422:	2303      	movs	r3, #3
 800f424:	e01b      	b.n	800f45e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	daf2      	bge.n	800f414 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f42e:	2300      	movs	r3, #0
 800f430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	f043 0201 	orr.w	r2, r3, #1
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	3301      	adds	r3, #1
 800f442:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f44a:	d901      	bls.n	800f450 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f44c:	2303      	movs	r3, #3
 800f44e:	e006      	b.n	800f45e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d0f0      	beq.n	800f43e <USB_CoreReset+0x36>

  return HAL_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
	...

0800f46c <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4a13      	ldr	r2, [pc, #76]	@ (800f4c4 <HAL_UART_RxCpltCallback+0x58>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d11f      	bne.n	800f4bc <HAL_UART_RxCpltCallback+0x50>
 800f47c:	4b12      	ldr	r3, [pc, #72]	@ (800f4c8 <HAL_UART_RxCpltCallback+0x5c>)
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d01b      	beq.n	800f4bc <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800f484:	2201      	movs	r2, #1
 800f486:	4911      	ldr	r1, [pc, #68]	@ (800f4cc <HAL_UART_RxCpltCallback+0x60>)
 800f488:	480e      	ldr	r0, [pc, #56]	@ (800f4c4 <HAL_UART_RxCpltCallback+0x58>)
 800f48a:	f7fc ff68 	bl	800c35e <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800f48e:	4b10      	ldr	r3, [pc, #64]	@ (800f4d0 <HAL_UART_RxCpltCallback+0x64>)
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d10a      	bne.n	800f4ac <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800f496:	4b0d      	ldr	r3, [pc, #52]	@ (800f4cc <HAL_UART_RxCpltCallback+0x60>)
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800f49c:	4b0d      	ldr	r3, [pc, #52]	@ (800f4d4 <HAL_UART_RxCpltCallback+0x68>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	7bfa      	ldrb	r2, [r7, #15]
 800f4a2:	4611      	mov	r1, r2
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f003 f853 	bl	8012550 <embeddedCliReceiveChar>
 800f4aa:	e002      	b.n	800f4b2 <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800f4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f4d8 <HAL_UART_RxCpltCallback+0x6c>)
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800f4b2:	f7f4 fe29 	bl	8004108 <HAL_GetTick>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	4a08      	ldr	r2, [pc, #32]	@ (800f4dc <HAL_UART_RxCpltCallback+0x70>)
 800f4ba:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800f4bc:	bf00      	nop
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20001a74 	.word	0x20001a74
 800f4c8:	20001b39 	.word	0x20001b39
 800f4cc:	20001b38 	.word	0x20001b38
 800f4d0:	20001b3a 	.word	0x20001b3a
 800f4d4:	20001b2c 	.word	0x20001b2c
 800f4d8:	20001b3b 	.word	0x20001b3b
 800f4dc:	200017c0 	.word	0x200017c0

0800f4e0 <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800f4ec:	78fb      	ldrb	r3, [r7, #3]
 800f4ee:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800f4f0:	f107 010f 	add.w	r1, r7, #15
 800f4f4:	2364      	movs	r3, #100	@ 0x64
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	4803      	ldr	r0, [pc, #12]	@ (800f508 <writeCharToCli+0x28>)
 800f4fa:	f7fc fea5 	bl	800c248 <HAL_UART_Transmit>
}
 800f4fe:	bf00      	nop
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	20001a74 	.word	0x20001a74

0800f50c <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800f50c:	b40e      	push	{r1, r2, r3}
 800f50e:	b580      	push	{r7, lr}
 800f510:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800f514:	af00      	add	r7, sp, #0
 800f516:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f51a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f51e:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800f520:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f524:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f528:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f52c:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800f52e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f532:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f536:	f107 000c 	add.w	r0, r7, #12
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 800f540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f544:	f00f fb16 	bl	801eb74 <vsniprintf>
 800f548:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800f54c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f550:	2b00      	cmp	r3, #0
 800f552:	da08      	bge.n	800f566 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800f554:	4b0c      	ldr	r3, [pc, #48]	@ (800f588 <cli_printf+0x7c>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	221d      	movs	r2, #29
 800f55c:	2101      	movs	r1, #1
 800f55e:	480b      	ldr	r0, [pc, #44]	@ (800f58c <cli_printf+0x80>)
 800f560:	f00f f9fc 	bl	801e95c <fwrite>
 800f564:	e009      	b.n	800f57a <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800f566:	f107 020c 	add.w	r2, r7, #12
 800f56a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f56e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f572:	4611      	mov	r1, r2
 800f574:	6818      	ldr	r0, [r3, #0]
 800f576:	f003 f8d1 	bl	801271c <embeddedCliPrint>
}
 800f57a:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 800f57e:	46bd      	mov	sp, r7
 800f580:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f584:	b003      	add	sp, #12
 800f586:	4770      	bx	lr
 800f588:	20000148 	.word	0x20000148
 800f58c:	0802237c 	.word	0x0802237c

0800f590 <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800f590:	b580      	push	{r7, lr}
 800f592:	b088      	sub	sp, #32
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800f5a0:	f7f4 fdb2 	bl	8004108 <HAL_GetTick>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	4a5f      	ldr	r2, [pc, #380]	@ (800f724 <receiveString+0x194>)
 800f5a8:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800f5aa:	4b5f      	ldr	r3, [pc, #380]	@ (800f728 <receiveString+0x198>)
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f000 80a0 	beq.w	800f6f4 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800f5b4:	4b5d      	ldr	r3, [pc, #372]	@ (800f72c <receiveString+0x19c>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	2b0d      	cmp	r3, #13
 800f5ba:	d004      	beq.n	800f5c6 <receiveString+0x36>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	69fa      	ldr	r2, [r7, #28]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d164      	bne.n	800f690 <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800f5c6:	68ba      	ldr	r2, [r7, #8]
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800f5d0:	4b55      	ldr	r3, [pc, #340]	@ (800f728 <receiveString+0x198>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	61bb      	str	r3, [r7, #24]
 800f5da:	e052      	b.n	800f682 <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	617b      	str	r3, [r7, #20]
 800f5e0:	e00b      	b.n	800f5fa <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	441a      	add	r2, r3
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	68b9      	ldr	r1, [r7, #8]
 800f5ee:	440b      	add	r3, r1
 800f5f0:	7812      	ldrb	r2, [r2, #0]
 800f5f2:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	617b      	str	r3, [r7, #20]
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	68ba      	ldr	r2, [r7, #8]
 800f5fe:	4413      	add	r3, r2
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d1ed      	bne.n	800f5e2 <receiveString+0x52>
						}
						buffer[j] = '\0';
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	68ba      	ldr	r2, [r7, #8]
 800f60a:	4413      	add	r3, r2
 800f60c:	2200      	movs	r2, #0
 800f60e:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f610:	69bb      	ldr	r3, [r7, #24]
 800f612:	68ba      	ldr	r2, [r7, #8]
 800f614:	4413      	add	r3, r2
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2b60      	cmp	r3, #96	@ 0x60
 800f61a:	d905      	bls.n	800f628 <receiveString+0x98>
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	4413      	add	r3, r2
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	2b7a      	cmp	r3, #122	@ 0x7a
 800f626:	d929      	bls.n	800f67c <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	68ba      	ldr	r2, [r7, #8]
 800f62c:	4413      	add	r3, r2
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b40      	cmp	r3, #64	@ 0x40
 800f632:	d905      	bls.n	800f640 <receiveString+0xb0>
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	68ba      	ldr	r2, [r7, #8]
 800f638:	4413      	add	r3, r2
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2b5a      	cmp	r3, #90	@ 0x5a
 800f63e:	d91d      	bls.n	800f67c <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	68ba      	ldr	r2, [r7, #8]
 800f644:	4413      	add	r3, r2
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b5f      	cmp	r3, #95	@ 0x5f
 800f64a:	d017      	beq.n	800f67c <receiveString+0xec>
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	4413      	add	r3, r2
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	2b3a      	cmp	r3, #58	@ 0x3a
 800f656:	d011      	beq.n	800f67c <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	4413      	add	r3, r2
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	2b2f      	cmp	r3, #47	@ 0x2f
 800f662:	d905      	bls.n	800f670 <receiveString+0xe0>
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	68ba      	ldr	r2, [r7, #8]
 800f668:	4413      	add	r3, r2
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b39      	cmp	r3, #57	@ 0x39
 800f66e:	d905      	bls.n	800f67c <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	4413      	add	r3, r2
 800f676:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d1af      	bne.n	800f5dc <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	3301      	adds	r3, #1
 800f680:	61bb      	str	r3, [r7, #24]
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	4413      	add	r3, r2
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1c0      	bne.n	800f610 <receiveString+0x80>
					}
				}
				break;
 800f68e:	e044      	b.n	800f71a <receiveString+0x18a>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f690:	4b26      	ldr	r3, [pc, #152]	@ (800f72c <receiveString+0x19c>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b08      	cmp	r3, #8
 800f696:	d003      	beq.n	800f6a0 <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f698:	4b24      	ldr	r3, [pc, #144]	@ (800f72c <receiveString+0x19c>)
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f69e:	d117      	bne.n	800f6d0 <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2108      	movs	r1, #8
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2120      	movs	r1, #32
 800f6b0:	68f8      	ldr	r0, [r7, #12]
 800f6b2:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2108      	movs	r1, #8
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	4798      	blx	r3
					--index;
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f6c4:	68ba      	ldr	r2, [r7, #8]
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	701a      	strb	r2, [r3, #0]
 800f6ce:	e00e      	b.n	800f6ee <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	1c5a      	adds	r2, r3, #1
 800f6d4:	61fa      	str	r2, [r7, #28]
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	4413      	add	r3, r2
 800f6da:	4a14      	ldr	r2, [pc, #80]	@ (800f72c <receiveString+0x19c>)
 800f6dc:	7812      	ldrb	r2, [r2, #0]
 800f6de:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a11      	ldr	r2, [pc, #68]	@ (800f72c <receiveString+0x19c>)
 800f6e6:	7812      	ldrb	r2, [r2, #0]
 800f6e8:	4611      	mov	r1, r2
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f728 <receiveString+0x198>)
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	701a      	strb	r2, [r3, #0]
		}

		//incase no usb then also break it
		if ((HAL_GetTick() - prev_max_wait_time > max_wait_time) || !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 800f6f4:	f7f4 fd08 	bl	8004108 <HAL_GetTick>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	4b0a      	ldr	r3, [pc, #40]	@ (800f724 <receiveString+0x194>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	1ad2      	subs	r2, r2, r3
 800f700:	4b0b      	ldr	r3, [pc, #44]	@ (800f730 <receiveString+0x1a0>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	429a      	cmp	r2, r3
 800f706:	d808      	bhi.n	800f71a <receiveString+0x18a>
 800f708:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f70c:	4809      	ldr	r0, [pc, #36]	@ (800f734 <receiveString+0x1a4>)
 800f70e:	f7f6 fcc7 	bl	80060a0 <HAL_GPIO_ReadPin>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d000      	beq.n	800f71a <receiveString+0x18a>
		if (flag_cli) {
 800f718:	e747      	b.n	800f5aa <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
		}

	}
}
 800f71a:	bf00      	nop
 800f71c:	3720      	adds	r7, #32
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	20001b30 	.word	0x20001b30
 800f728:	20001b3b 	.word	0x20001b3b
 800f72c:	20001b38 	.word	0x20001b38
 800f730:	2000001c 	.word	0x2000001c
 800f734:	40020000 	.word	0x40020000

0800f738 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f744:	4903      	ldr	r1, [pc, #12]	@ (800f754 <onClearCLI+0x1c>)
 800f746:	68f8      	ldr	r0, [r7, #12]
 800f748:	f7ff fee0 	bl	800f50c <cli_printf>
}
 800f74c:	bf00      	nop
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	0802239c 	.word	0x0802239c

0800f758 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f758:	b580      	push	{r7, lr}
 800f75a:	b092      	sub	sp, #72	@ 0x48
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f764:	4b24      	ldr	r3, [pc, #144]	@ (800f7f8 <debug_scd4x_PM25+0xa0>)
 800f766:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f768:	4924      	ldr	r1, [pc, #144]	@ (800f7fc <debug_scd4x_PM25+0xa4>)
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f7ff fece 	bl	800f50c <cli_printf>

	cli_other = 1;
 800f770:	4b23      	ldr	r3, [pc, #140]	@ (800f800 <debug_scd4x_PM25+0xa8>)
 800f772:	2201      	movs	r2, #1
 800f774:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f776:	4b23      	ldr	r3, [pc, #140]	@ (800f804 <debug_scd4x_PM25+0xac>)
 800f778:	2200      	movs	r2, #0
 800f77a:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f77c:	f107 0310 	add.w	r3, r7, #16
 800f780:	2232      	movs	r2, #50	@ 0x32
 800f782:	4619      	mov	r1, r3
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f7ff ff03 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f78a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f78c:	f7f0 fd88 	bl	80002a0 <strlen>
 800f790:	4603      	mov	r3, r0
 800f792:	b29a      	uxth	r2, r3
 800f794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f798:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f79a:	481b      	ldr	r0, [pc, #108]	@ (800f808 <debug_scd4x_PM25+0xb0>)
 800f79c:	f7fc fd54 	bl	800c248 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f7a0:	f107 0310 	add.w	r3, r7, #16
 800f7a4:	2179      	movs	r1, #121	@ 0x79
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f00f faa8 	bl	801ecfc <strchr>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d007      	beq.n	800f7c2 <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f7b2:	4b16      	ldr	r3, [pc, #88]	@ (800f80c <debug_scd4x_PM25+0xb4>)
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f7b8:	4915      	ldr	r1, [pc, #84]	@ (800f810 <debug_scd4x_PM25+0xb8>)
 800f7ba:	68f8      	ldr	r0, [r7, #12]
 800f7bc:	f7ff fea6 	bl	800f50c <cli_printf>
 800f7c0:	e00f      	b.n	800f7e2 <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f7c2:	f107 0310 	add.w	r3, r7, #16
 800f7c6:	216e      	movs	r1, #110	@ 0x6e
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f00f fa97 	bl	801ecfc <strchr>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d006      	beq.n	800f7e2 <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f7d4:	4b0d      	ldr	r3, [pc, #52]	@ (800f80c <debug_scd4x_PM25+0xb4>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f7da:	490e      	ldr	r1, [pc, #56]	@ (800f814 <debug_scd4x_PM25+0xbc>)
 800f7dc:	68f8      	ldr	r0, [r7, #12]
 800f7de:	f7ff fe95 	bl	800f50c <cli_printf>
	}

	flag_cli = 0;
 800f7e2:	4b08      	ldr	r3, [pc, #32]	@ (800f804 <debug_scd4x_PM25+0xac>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f7e8:	4b05      	ldr	r3, [pc, #20]	@ (800f800 <debug_scd4x_PM25+0xa8>)
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	701a      	strb	r2, [r3, #0]
}
 800f7ee:	bf00      	nop
 800f7f0:	3748      	adds	r7, #72	@ 0x48
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	080223a4 	.word	0x080223a4
 800f7fc:	080223a8 	.word	0x080223a8
 800f800:	20001b3a 	.word	0x20001b3a
 800f804:	20001b3b 	.word	0x20001b3b
 800f808:	20001a74 	.word	0x20001a74
 800f80c:	20001578 	.word	0x20001578
 800f810:	080223dc 	.word	0x080223dc
 800f814:	080223ec 	.word	0x080223ec

0800f818 <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f824:	f7f2 fe26 	bl	8002474 <ver_GetUid>
 800f828:	4603      	mov	r3, r0
 800f82a:	461a      	mov	r2, r3
 800f82c:	4903      	ldr	r1, [pc, #12]	@ (800f83c <DeviceSignature+0x24>)
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f7ff fe6c 	bl	800f50c <cli_printf>
}
 800f834:	bf00      	nop
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	080223fc 	.word	0x080223fc

0800f840 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f840:	b580      	push	{r7, lr}
 800f842:	b092      	sub	sp, #72	@ 0x48
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f84c:	4b2d      	ldr	r3, [pc, #180]	@ (800f904 <SetID+0xc4>)
 800f84e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f850:	492d      	ldr	r1, [pc, #180]	@ (800f908 <SetID+0xc8>)
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f7ff fe5a 	bl	800f50c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f858:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f85a:	f7f0 fd21 	bl	80002a0 <strlen>
 800f85e:	4603      	mov	r3, r0
 800f860:	b29a      	uxth	r2, r3
 800f862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f866:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f868:	4828      	ldr	r0, [pc, #160]	@ (800f90c <SetID+0xcc>)
 800f86a:	f7fc fced 	bl	800c248 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f86e:	4928      	ldr	r1, [pc, #160]	@ (800f910 <SetID+0xd0>)
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f7ff fe4b 	bl	800f50c <cli_printf>
	cli_other = 1;
 800f876:	4b27      	ldr	r3, [pc, #156]	@ (800f914 <SetID+0xd4>)
 800f878:	2201      	movs	r2, #1
 800f87a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f87c:	4b26      	ldr	r3, [pc, #152]	@ (800f918 <SetID+0xd8>)
 800f87e:	2200      	movs	r2, #0
 800f880:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f882:	f107 0310 	add.w	r3, r7, #16
 800f886:	2232      	movs	r2, #50	@ 0x32
 800f888:	4619      	mov	r1, r3
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f7ff fe80 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f890:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f892:	f7f0 fd05 	bl	80002a0 <strlen>
 800f896:	4603      	mov	r3, r0
 800f898:	b29a      	uxth	r2, r3
 800f89a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f89e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f8a0:	481a      	ldr	r0, [pc, #104]	@ (800f90c <SetID+0xcc>)
 800f8a2:	f7fc fcd1 	bl	800c248 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f8a6:	f107 0310 	add.w	r3, r7, #16
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7f0 fcf8 	bl	80002a0 <strlen>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 30) {
 800f8b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8ba:	2b1d      	cmp	r3, #29
 800f8bc:	d814      	bhi.n	800f8e8 <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f8be:	7c3b      	ldrb	r3, [r7, #16]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d015      	beq.n	800f8f0 <SetID+0xb0>
			if (buffer !=  NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f8c4:	f107 0310 	add.w	r3, r7, #16
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4814      	ldr	r0, [pc, #80]	@ (800f91c <SetID+0xdc>)
 800f8cc:	f00f fb1d 	bl	801ef0a <strcpy>
				set_param_flags();
 800f8d0:	4b13      	ldr	r3, [pc, #76]	@ (800f920 <SetID+0xe0>)
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	701a      	strb	r2, [r3, #0]
 800f8d6:	4b13      	ldr	r3, [pc, #76]	@ (800f924 <SetID+0xe4>)
 800f8d8:	2201      	movs	r2, #1
 800f8da:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f8dc:	4a0f      	ldr	r2, [pc, #60]	@ (800f91c <SetID+0xdc>)
 800f8de:	4912      	ldr	r1, [pc, #72]	@ (800f928 <SetID+0xe8>)
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f7ff fe13 	bl	800f50c <cli_printf>
 800f8e6:	e003      	b.n	800f8f0 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f8e8:	4910      	ldr	r1, [pc, #64]	@ (800f92c <SetID+0xec>)
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f7ff fe0e 	bl	800f50c <cli_printf>
	}

	flag_cli = 0;
 800f8f0:	4b09      	ldr	r3, [pc, #36]	@ (800f918 <SetID+0xd8>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f8f6:	4b07      	ldr	r3, [pc, #28]	@ (800f914 <SetID+0xd4>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	701a      	strb	r2, [r3, #0]

}
 800f8fc:	bf00      	nop
 800f8fe:	3748      	adds	r7, #72	@ 0x48
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	080223a4 	.word	0x080223a4
 800f908:	08022418 	.word	0x08022418
 800f90c:	20001a74 	.word	0x20001a74
 800f910:	08022450 	.word	0x08022450
 800f914:	20001b3a 	.word	0x20001b3a
 800f918:	20001b3b 	.word	0x20001b3b
 800f91c:	20001399 	.word	0x20001399
 800f920:	20001579 	.word	0x20001579
 800f924:	2000157a 	.word	0x2000157a
 800f928:	08022478 	.word	0x08022478
 800f92c:	0802248c 	.word	0x0802248c

0800f930 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f930:	b580      	push	{r7, lr}
 800f932:	b092      	sub	sp, #72	@ 0x48
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f93c:	4b2d      	ldr	r3, [pc, #180]	@ (800f9f4 <SetLocation+0xc4>)
 800f93e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f940:	492d      	ldr	r1, [pc, #180]	@ (800f9f8 <SetLocation+0xc8>)
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f7ff fde2 	bl	800f50c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f948:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f94a:	f7f0 fca9 	bl	80002a0 <strlen>
 800f94e:	4603      	mov	r3, r0
 800f950:	b29a      	uxth	r2, r3
 800f952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f956:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f958:	4828      	ldr	r0, [pc, #160]	@ (800f9fc <SetLocation+0xcc>)
 800f95a:	f7fc fc75 	bl	800c248 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f95e:	4928      	ldr	r1, [pc, #160]	@ (800fa00 <SetLocation+0xd0>)
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f7ff fdd3 	bl	800f50c <cli_printf>
	cli_other = 1;
 800f966:	4b27      	ldr	r3, [pc, #156]	@ (800fa04 <SetLocation+0xd4>)
 800f968:	2201      	movs	r2, #1
 800f96a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f96c:	4b26      	ldr	r3, [pc, #152]	@ (800fa08 <SetLocation+0xd8>)
 800f96e:	2200      	movs	r2, #0
 800f970:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f972:	f107 0310 	add.w	r3, r7, #16
 800f976:	2232      	movs	r2, #50	@ 0x32
 800f978:	4619      	mov	r1, r3
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f7ff fe08 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f980:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f982:	f7f0 fc8d 	bl	80002a0 <strlen>
 800f986:	4603      	mov	r3, r0
 800f988:	b29a      	uxth	r2, r3
 800f98a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f98e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f990:	481a      	ldr	r0, [pc, #104]	@ (800f9fc <SetLocation+0xcc>)
 800f992:	f7fc fc59 	bl	800c248 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f996:	f107 0310 	add.w	r3, r7, #16
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7f0 fc80 	bl	80002a0 <strlen>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800f9a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f9aa:	2b0e      	cmp	r3, #14
 800f9ac:	d814      	bhi.n	800f9d8 <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f9ae:	7c3b      	ldrb	r3, [r7, #16]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d015      	beq.n	800f9e0 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f9b4:	f107 0310 	add.w	r3, r7, #16
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	4814      	ldr	r0, [pc, #80]	@ (800fa0c <SetLocation+0xdc>)
 800f9bc:	f00f faa5 	bl	801ef0a <strcpy>
				set_param_flags();
 800f9c0:	4b13      	ldr	r3, [pc, #76]	@ (800fa10 <SetLocation+0xe0>)
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	701a      	strb	r2, [r3, #0]
 800f9c6:	4b13      	ldr	r3, [pc, #76]	@ (800fa14 <SetLocation+0xe4>)
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800f9cc:	4a0f      	ldr	r2, [pc, #60]	@ (800fa0c <SetLocation+0xdc>)
 800f9ce:	4912      	ldr	r1, [pc, #72]	@ (800fa18 <SetLocation+0xe8>)
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f7ff fd9b 	bl	800f50c <cli_printf>
 800f9d6:	e003      	b.n	800f9e0 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800f9d8:	4910      	ldr	r1, [pc, #64]	@ (800fa1c <SetLocation+0xec>)
 800f9da:	68f8      	ldr	r0, [r7, #12]
 800f9dc:	f7ff fd96 	bl	800f50c <cli_printf>
	}

	flag_cli = 0;
 800f9e0:	4b09      	ldr	r3, [pc, #36]	@ (800fa08 <SetLocation+0xd8>)
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f9e6:	4b07      	ldr	r3, [pc, #28]	@ (800fa04 <SetLocation+0xd4>)
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	701a      	strb	r2, [r3, #0]

}
 800f9ec:	bf00      	nop
 800f9ee:	3748      	adds	r7, #72	@ 0x48
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	080223a4 	.word	0x080223a4
 800f9f8:	08022418 	.word	0x08022418
 800f9fc:	20001a74 	.word	0x20001a74
 800fa00:	0802249c 	.word	0x0802249c
 800fa04:	20001b3a 	.word	0x20001b3a
 800fa08:	20001b3b 	.word	0x20001b3b
 800fa0c:	200013cb 	.word	0x200013cb
 800fa10:	20001579 	.word	0x20001579
 800fa14:	2000157a 	.word	0x2000157a
 800fa18:	080224d0 	.word	0x080224d0
 800fa1c:	080224e8 	.word	0x080224e8

0800fa20 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b092      	sub	sp, #72	@ 0x48
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800fa2c:	4b2d      	ldr	r3, [pc, #180]	@ (800fae4 <Setgroup+0xc4>)
 800fa2e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fa30:	492d      	ldr	r1, [pc, #180]	@ (800fae8 <Setgroup+0xc8>)
 800fa32:	68f8      	ldr	r0, [r7, #12]
 800fa34:	f7ff fd6a 	bl	800f50c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa38:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa3a:	f7f0 fc31 	bl	80002a0 <strlen>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa48:	4828      	ldr	r0, [pc, #160]	@ (800faec <Setgroup+0xcc>)
 800fa4a:	f7fc fbfd 	bl	800c248 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800fa4e:	4928      	ldr	r1, [pc, #160]	@ (800faf0 <Setgroup+0xd0>)
 800fa50:	68f8      	ldr	r0, [r7, #12]
 800fa52:	f7ff fd5b 	bl	800f50c <cli_printf>
	cli_other = 1;
 800fa56:	4b27      	ldr	r3, [pc, #156]	@ (800faf4 <Setgroup+0xd4>)
 800fa58:	2201      	movs	r2, #1
 800fa5a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fa5c:	4b26      	ldr	r3, [pc, #152]	@ (800faf8 <Setgroup+0xd8>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fa62:	f107 0310 	add.w	r3, r7, #16
 800fa66:	2232      	movs	r2, #50	@ 0x32
 800fa68:	4619      	mov	r1, r3
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	f7ff fd90 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fa70:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa72:	f7f0 fc15 	bl	80002a0 <strlen>
 800fa76:	4603      	mov	r3, r0
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fa7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa80:	481a      	ldr	r0, [pc, #104]	@ (800faec <Setgroup+0xcc>)
 800fa82:	f7fc fbe1 	bl	800c248 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fa86:	f107 0310 	add.w	r3, r7, #16
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7f0 fc08 	bl	80002a0 <strlen>
 800fa90:	4603      	mov	r3, r0
 800fa92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	if (len < 15) {
 800fa96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa9a:	2b0e      	cmp	r3, #14
 800fa9c:	d814      	bhi.n	800fac8 <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800fa9e:	7c3b      	ldrb	r3, [r7, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d015      	beq.n	800fad0 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800faa4:	f107 0310 	add.w	r3, r7, #16
 800faa8:	4619      	mov	r1, r3
 800faaa:	4814      	ldr	r0, [pc, #80]	@ (800fafc <Setgroup+0xdc>)
 800faac:	f00f fa2d 	bl	801ef0a <strcpy>
				set_param_flags();
 800fab0:	4b13      	ldr	r3, [pc, #76]	@ (800fb00 <Setgroup+0xe0>)
 800fab2:	2201      	movs	r2, #1
 800fab4:	701a      	strb	r2, [r3, #0]
 800fab6:	4b13      	ldr	r3, [pc, #76]	@ (800fb04 <Setgroup+0xe4>)
 800fab8:	2201      	movs	r2, #1
 800faba:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800fabc:	4a0f      	ldr	r2, [pc, #60]	@ (800fafc <Setgroup+0xdc>)
 800fabe:	4912      	ldr	r1, [pc, #72]	@ (800fb08 <Setgroup+0xe8>)
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	f7ff fd23 	bl	800f50c <cli_printf>
 800fac6:	e003      	b.n	800fad0 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800fac8:	4910      	ldr	r1, [pc, #64]	@ (800fb0c <Setgroup+0xec>)
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f7ff fd1e 	bl	800f50c <cli_printf>
	}

	flag_cli = 0;
 800fad0:	4b09      	ldr	r3, [pc, #36]	@ (800faf8 <Setgroup+0xd8>)
 800fad2:	2200      	movs	r2, #0
 800fad4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fad6:	4b07      	ldr	r3, [pc, #28]	@ (800faf4 <Setgroup+0xd4>)
 800fad8:	2200      	movs	r2, #0
 800fada:	701a      	strb	r2, [r3, #0]

}
 800fadc:	bf00      	nop
 800fade:	3748      	adds	r7, #72	@ 0x48
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	080223a4 	.word	0x080223a4
 800fae8:	08022418 	.word	0x08022418
 800faec:	20001a74 	.word	0x20001a74
 800faf0:	08022554 	.word	0x08022554
 800faf4:	20001b3a 	.word	0x20001b3a
 800faf8:	20001b3b 	.word	0x20001b3b
 800fafc:	2000142f 	.word	0x2000142f
 800fb00:	20001579 	.word	0x20001579
 800fb04:	2000157a 	.word	0x2000157a
 800fb08:	08022584 	.word	0x08022584
 800fb0c:	08022598 	.word	0x08022598

0800fb10 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800fb1c:	4a04      	ldr	r2, [pc, #16]	@ (800fb30 <GetID+0x20>)
 800fb1e:	4905      	ldr	r1, [pc, #20]	@ (800fb34 <GetID+0x24>)
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f7ff fcf3 	bl	800f50c <cli_printf>
}
 800fb26:	bf00      	nop
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	20001399 	.word	0x20001399
 800fb34:	080225ac 	.word	0x080225ac

0800fb38 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800fb44:	4a04      	ldr	r2, [pc, #16]	@ (800fb58 <GetLocation+0x20>)
 800fb46:	4905      	ldr	r1, [pc, #20]	@ (800fb5c <GetLocation+0x24>)
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	f7ff fcdf 	bl	800f50c <cli_printf>

}
 800fb4e:	bf00      	nop
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	200013cb 	.word	0x200013cb
 800fb5c:	080225b4 	.word	0x080225b4

0800fb60 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800fb6c:	4a04      	ldr	r2, [pc, #16]	@ (800fb80 <Getgroup+0x20>)
 800fb6e:	4905      	ldr	r1, [pc, #20]	@ (800fb84 <Getgroup+0x24>)
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f7ff fccb 	bl	800f50c <cli_printf>

}
 800fb76:	bf00      	nop
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	2000142f 	.word	0x2000142f
 800fb84:	080225d0 	.word	0x080225d0

0800fb88 <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b09a      	sub	sp, #104	@ 0x68
 800fb8c:	af02      	add	r7, sp, #8
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fb94:	4b26      	ldr	r3, [pc, #152]	@ (800fc30 <SetDate+0xa8>)
 800fb96:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fb98:	4926      	ldr	r1, [pc, #152]	@ (800fc34 <SetDate+0xac>)
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f7ff fcb6 	bl	800f50c <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800fba0:	4b25      	ldr	r3, [pc, #148]	@ (800fc38 <SetDate+0xb0>)
 800fba2:	2201      	movs	r2, #1
 800fba4:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fba6:	4b25      	ldr	r3, [pc, #148]	@ (800fc3c <SetDate+0xb4>)
 800fba8:	2200      	movs	r2, #0
 800fbaa:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fbac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbb0:	2232      	movs	r2, #50	@ 0x32
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f7ff fceb 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fbba:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fbbc:	f7f0 fb70 	bl	80002a0 <strlen>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbc8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fbca:	481d      	ldr	r0, [pc, #116]	@ (800fc40 <SetDate+0xb8>)
 800fbcc:	f7fc fb3c 	bl	800c248 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fbd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d004      	beq.n	800fbe2 <SetDate+0x5a>
		Set_Date(buffer);
 800fbd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f004 f869 	bl	8013cb4 <Set_Date>
	}
	flag_cli = 0;
 800fbe2:	4b16      	ldr	r3, [pc, #88]	@ (800fc3c <SetDate+0xb4>)
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fbe8:	4b13      	ldr	r3, [pc, #76]	@ (800fc38 <SetDate+0xb0>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fbee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	4813      	ldr	r0, [pc, #76]	@ (800fc44 <SetDate+0xbc>)
 800fbf8:	f7f9 ffa5 	bl	8009b46 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fbfc:	f107 0310 	add.w	r3, r7, #16
 800fc00:	2200      	movs	r2, #0
 800fc02:	4619      	mov	r1, r3
 800fc04:	480f      	ldr	r0, [pc, #60]	@ (800fc44 <SetDate+0xbc>)
 800fc06:	f7f9 febc 	bl	8009982 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fc0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fc0e:	461a      	mov	r2, r3
 800fc10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fc14:	4619      	mov	r1, r3
			gDate.Year);
 800fc16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800fc1a:	9300      	str	r3, [sp, #0]
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	490a      	ldr	r1, [pc, #40]	@ (800fc48 <SetDate+0xc0>)
 800fc20:	68f8      	ldr	r0, [r7, #12]
 800fc22:	f7ff fc73 	bl	800f50c <cli_printf>

}
 800fc26:	bf00      	nop
 800fc28:	3760      	adds	r7, #96	@ 0x60
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	080223a4 	.word	0x080223a4
 800fc34:	080225dc 	.word	0x080225dc
 800fc38:	20001b3a 	.word	0x20001b3a
 800fc3c:	20001b3b 	.word	0x20001b3b
 800fc40:	20001a74 	.word	0x20001a74
 800fc44:	20001898 	.word	0x20001898
 800fc48:	08022618 	.word	0x08022618

0800fc4c <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b09a      	sub	sp, #104	@ 0x68
 800fc50:	af02      	add	r7, sp, #8
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fc58:	4b26      	ldr	r3, [pc, #152]	@ (800fcf4 <SetTime+0xa8>)
 800fc5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli,
 800fc5c:	4926      	ldr	r1, [pc, #152]	@ (800fcf8 <SetTime+0xac>)
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	f7ff fc54 	bl	800f50c <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800fc64:	4b25      	ldr	r3, [pc, #148]	@ (800fcfc <SetTime+0xb0>)
 800fc66:	2201      	movs	r2, #1
 800fc68:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fc6a:	4b25      	ldr	r3, [pc, #148]	@ (800fd00 <SetTime+0xb4>)
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fc70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc74:	2232      	movs	r2, #50	@ 0x32
 800fc76:	4619      	mov	r1, r3
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f7ff fc89 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fc7e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fc80:	f7f0 fb0e 	bl	80002a0 <strlen>
 800fc84:	4603      	mov	r3, r0
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fc8c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fc8e:	481d      	ldr	r0, [pc, #116]	@ (800fd04 <SetTime+0xb8>)
 800fc90:	f7fc fada 	bl	800c248 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800fc94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d004      	beq.n	800fca6 <SetTime+0x5a>
		Set_Time(buffer);
 800fc9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fca0:	4618      	mov	r0, r3
 800fca2:	f004 f8c5 	bl	8013e30 <Set_Time>
	}
	flag_cli = 0;
 800fca6:	4b16      	ldr	r3, [pc, #88]	@ (800fd00 <SetTime+0xb4>)
 800fca8:	2200      	movs	r2, #0
 800fcaa:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fcac:	4b13      	ldr	r3, [pc, #76]	@ (800fcfc <SetTime+0xb0>)
 800fcae:	2200      	movs	r2, #0
 800fcb0:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800fcb2:	4b15      	ldr	r3, [pc, #84]	@ (800fd08 <SetTime+0xbc>)
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fcb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	4812      	ldr	r0, [pc, #72]	@ (800fd0c <SetTime+0xc0>)
 800fcc2:	f7f9 ff40 	bl	8009b46 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fcc6:	f107 0310 	add.w	r3, r7, #16
 800fcca:	2200      	movs	r2, #0
 800fccc:	4619      	mov	r1, r3
 800fcce:	480f      	ldr	r0, [pc, #60]	@ (800fd0c <SetTime+0xc0>)
 800fcd0:	f7f9 fe57 	bl	8009982 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fcd4:	7c3b      	ldrb	r3, [r7, #16]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	7c7b      	ldrb	r3, [r7, #17]
 800fcda:	4619      	mov	r1, r3
			gTime.Seconds);
 800fcdc:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	460b      	mov	r3, r1
 800fce2:	490b      	ldr	r1, [pc, #44]	@ (800fd10 <SetTime+0xc4>)
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f7ff fc11 	bl	800f50c <cli_printf>

}
 800fcea:	bf00      	nop
 800fcec:	3760      	adds	r7, #96	@ 0x60
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	bf00      	nop
 800fcf4:	080223a4 	.word	0x080223a4
 800fcf8:	08022634 	.word	0x08022634
 800fcfc:	20001b3a 	.word	0x20001b3a
 800fd00:	20001b3b 	.word	0x20001b3b
 800fd04:	20001a74 	.word	0x20001a74
 800fd08:	20000029 	.word	0x20000029
 800fd0c:	20001898 	.word	0x20001898
 800fd10:	08022678 	.word	0x08022678

0800fd14 <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b08c      	sub	sp, #48	@ 0x30
 800fd18:	af02      	add	r7, sp, #8
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd24:	2200      	movs	r2, #0
 800fd26:	4619      	mov	r1, r3
 800fd28:	480f      	ldr	r0, [pc, #60]	@ (800fd68 <GetDate+0x54>)
 800fd2a:	f7f9 ff0c 	bl	8009b46 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd2e:	f107 0310 	add.w	r3, r7, #16
 800fd32:	2200      	movs	r2, #0
 800fd34:	4619      	mov	r1, r3
 800fd36:	480c      	ldr	r0, [pc, #48]	@ (800fd68 <GetDate+0x54>)
 800fd38:	f7f9 fe23 	bl	8009982 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800fd3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fd40:	461a      	mov	r2, r3
 800fd42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fd46:	4619      	mov	r1, r3
 800fd48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	460b      	mov	r3, r1
 800fd50:	4906      	ldr	r1, [pc, #24]	@ (800fd6c <GetDate+0x58>)
 800fd52:	68f8      	ldr	r0, [r7, #12]
 800fd54:	f7ff fbda 	bl	800f50c <cli_printf>
	HAL_Delay(100);
 800fd58:	2064      	movs	r0, #100	@ 0x64
 800fd5a:	f7f4 f9e1 	bl	8004120 <HAL_Delay>
}
 800fd5e:	bf00      	nop
 800fd60:	3728      	adds	r7, #40	@ 0x28
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	20001898 	.word	0x20001898
 800fd6c:	08022694 	.word	0x08022694

0800fd70 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b08c      	sub	sp, #48	@ 0x30
 800fd74:	af02      	add	r7, sp, #8
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800fd7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd80:	2200      	movs	r2, #0
 800fd82:	4619      	mov	r1, r3
 800fd84:	480d      	ldr	r0, [pc, #52]	@ (800fdbc <GetTime+0x4c>)
 800fd86:	f7f9 fede 	bl	8009b46 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800fd8a:	f107 0310 	add.w	r3, r7, #16
 800fd8e:	2200      	movs	r2, #0
 800fd90:	4619      	mov	r1, r3
 800fd92:	480a      	ldr	r0, [pc, #40]	@ (800fdbc <GetTime+0x4c>)
 800fd94:	f7f9 fdf5 	bl	8009982 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fd98:	7c3b      	ldrb	r3, [r7, #16]
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	7c7b      	ldrb	r3, [r7, #17]
 800fd9e:	4619      	mov	r1, r3
			gTime.Seconds);
 800fda0:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	460b      	mov	r3, r1
 800fda6:	4906      	ldr	r1, [pc, #24]	@ (800fdc0 <GetTime+0x50>)
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f7ff fbaf 	bl	800f50c <cli_printf>
	HAL_Delay(100);
 800fdae:	2064      	movs	r0, #100	@ 0x64
 800fdb0:	f7f4 f9b6 	bl	8004120 <HAL_Delay>
}
 800fdb4:	bf00      	nop
 800fdb6:	3728      	adds	r7, #40	@ 0x28
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	20001898 	.word	0x20001898
 800fdc0:	080226a4 	.word	0x080226a4

0800fdc4 <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b092      	sub	sp, #72	@ 0x48
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fdd0:	4b54      	ldr	r3, [pc, #336]	@ (800ff24 <SetInterval+0x160>)
 800fdd2:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fdd4:	4954      	ldr	r1, [pc, #336]	@ (800ff28 <SetInterval+0x164>)
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f7ff fb98 	bl	800f50c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fddc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fdde:	f7f0 fa5f 	bl	80002a0 <strlen>
 800fde2:	4603      	mov	r3, r0
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fdea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fdec:	484f      	ldr	r0, [pc, #316]	@ (800ff2c <SetInterval+0x168>)
 800fdee:	f7fc fa2b 	bl	800c248 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800fdf2:	494f      	ldr	r1, [pc, #316]	@ (800ff30 <SetInterval+0x16c>)
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f7ff fb89 	bl	800f50c <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800fdfa:	494e      	ldr	r1, [pc, #312]	@ (800ff34 <SetInterval+0x170>)
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f7ff fb85 	bl	800f50c <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800fe02:	494d      	ldr	r1, [pc, #308]	@ (800ff38 <SetInterval+0x174>)
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f7ff fb81 	bl	800f50c <cli_printf>
	cli_printf(cli,
 800fe0a:	494c      	ldr	r1, [pc, #304]	@ (800ff3c <SetInterval+0x178>)
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f7ff fb7d 	bl	800f50c <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800fe12:	4b4b      	ldr	r3, [pc, #300]	@ (800ff40 <SetInterval+0x17c>)
 800fe14:	2201      	movs	r2, #1
 800fe16:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fe18:	4b4a      	ldr	r3, [pc, #296]	@ (800ff44 <SetInterval+0x180>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fe1e:	f107 0310 	add.w	r3, r7, #16
 800fe22:	2232      	movs	r2, #50	@ 0x32
 800fe24:	4619      	mov	r1, r3
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f7ff fbb2 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe2c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe2e:	f7f0 fa37 	bl	80002a0 <strlen>
 800fe32:	4603      	mov	r3, r0
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe3c:	483b      	ldr	r0, [pc, #236]	@ (800ff2c <SetInterval+0x168>)
 800fe3e:	f7fc fa03 	bl	800c248 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fe42:	f107 0310 	add.w	r3, r7, #16
 800fe46:	2131      	movs	r1, #49	@ 0x31
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f00e ff57 	bl	801ecfc <strchr>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d015      	beq.n	800fe80 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800fe54:	4b3c      	ldr	r3, [pc, #240]	@ (800ff48 <SetInterval+0x184>)
 800fe56:	2200      	movs	r2, #0
 800fe58:	f042 0205 	orr.w	r2, r2, #5
 800fe5c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fe60:	2200      	movs	r2, #0
 800fe62:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800fe72:	4b36      	ldr	r3, [pc, #216]	@ (800ff4c <SetInterval+0x188>)
 800fe74:	2201      	movs	r2, #1
 800fe76:	701a      	strb	r2, [r3, #0]
 800fe78:	4b35      	ldr	r3, [pc, #212]	@ (800ff50 <SetInterval+0x18c>)
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	701a      	strb	r2, [r3, #0]
 800fe7e:	e03c      	b.n	800fefa <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800fe80:	f107 0310 	add.w	r3, r7, #16
 800fe84:	2132      	movs	r1, #50	@ 0x32
 800fe86:	4618      	mov	r0, r3
 800fe88:	f00e ff38 	bl	801ecfc <strchr>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d015      	beq.n	800febe <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800fe92:	4b2d      	ldr	r3, [pc, #180]	@ (800ff48 <SetInterval+0x184>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	f042 020f 	orr.w	r2, r2, #15
 800fe9a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fea4:	2200      	movs	r2, #0
 800fea6:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800feb0:	4b26      	ldr	r3, [pc, #152]	@ (800ff4c <SetInterval+0x188>)
 800feb2:	2201      	movs	r2, #1
 800feb4:	701a      	strb	r2, [r3, #0]
 800feb6:	4b26      	ldr	r3, [pc, #152]	@ (800ff50 <SetInterval+0x18c>)
 800feb8:	2201      	movs	r2, #1
 800feba:	701a      	strb	r2, [r3, #0]
 800febc:	e01d      	b.n	800fefa <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800febe:	f107 0310 	add.w	r3, r7, #16
 800fec2:	2133      	movs	r1, #51	@ 0x33
 800fec4:	4618      	mov	r0, r3
 800fec6:	f00e ff19 	bl	801ecfc <strchr>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d014      	beq.n	800fefa <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800fed0:	4b1d      	ldr	r3, [pc, #116]	@ (800ff48 <SetInterval+0x184>)
 800fed2:	2200      	movs	r2, #0
 800fed4:	f042 023c 	orr.w	r2, r2, #60	@ 0x3c
 800fed8:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800fedc:	2200      	movs	r2, #0
 800fede:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800fee8:	2200      	movs	r2, #0
 800feea:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
		set_param_flags();
 800feee:	4b17      	ldr	r3, [pc, #92]	@ (800ff4c <SetInterval+0x188>)
 800fef0:	2201      	movs	r2, #1
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	4b16      	ldr	r3, [pc, #88]	@ (800ff50 <SetInterval+0x18c>)
 800fef6:	2201      	movs	r2, #1
 800fef8:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800fefa:	4b12      	ldr	r3, [pc, #72]	@ (800ff44 <SetInterval+0x180>)
 800fefc:	2200      	movs	r2, #0
 800fefe:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ff00:	4b0f      	ldr	r3, [pc, #60]	@ (800ff40 <SetInterval+0x17c>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800ff06:	4b10      	ldr	r3, [pc, #64]	@ (800ff48 <SetInterval+0x184>)
 800ff08:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	4911      	ldr	r1, [pc, #68]	@ (800ff54 <SetInterval+0x190>)
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7ff fafb 	bl	800f50c <cli_printf>
	set_alarm_Time = 1;
 800ff16:	4b10      	ldr	r3, [pc, #64]	@ (800ff58 <SetInterval+0x194>)
 800ff18:	2201      	movs	r2, #1
 800ff1a:	701a      	strb	r2, [r3, #0]
}
 800ff1c:	bf00      	nop
 800ff1e:	3748      	adds	r7, #72	@ 0x48
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	080223a4 	.word	0x080223a4
 800ff28:	08022418 	.word	0x08022418
 800ff2c:	20001a74 	.word	0x20001a74
 800ff30:	080226b4 	.word	0x080226b4
 800ff34:	080226c8 	.word	0x080226c8
 800ff38:	080226dc 	.word	0x080226dc
 800ff3c:	080226f0 	.word	0x080226f0
 800ff40:	20001b3a 	.word	0x20001b3a
 800ff44:	20001b3b 	.word	0x20001b3b
 800ff48:	200012cc 	.word	0x200012cc
 800ff4c:	20001579 	.word	0x20001579
 800ff50:	2000157a 	.word	0x2000157a
 800ff54:	08022738 	.word	0x08022738
 800ff58:	20000029 	.word	0x20000029

0800ff5c <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	60b9      	str	r1, [r7, #8]
 800ff66:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800ff68:	4b05      	ldr	r3, [pc, #20]	@ (800ff80 <GetInterval+0x24>)
 800ff6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ff6e:	461a      	mov	r2, r3
 800ff70:	4904      	ldr	r1, [pc, #16]	@ (800ff84 <GetInterval+0x28>)
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f7ff faca 	bl	800f50c <cli_printf>

}
 800ff78:	bf00      	nop
 800ff7a:	3710      	adds	r7, #16
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	200012cc 	.word	0x200012cc
 800ff84:	08022754 	.word	0x08022754

0800ff88 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b09a      	sub	sp, #104	@ 0x68
 800ff8c:	af02      	add	r7, sp, #8
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800ff94:	4b40      	ldr	r3, [pc, #256]	@ (8010098 <SetFilename+0x110>)
 800ff96:	65fb      	str	r3, [r7, #92]	@ 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800ff98:	4940      	ldr	r1, [pc, #256]	@ (801009c <SetFilename+0x114>)
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f7ff fab6 	bl	800f50c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ffa0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ffa2:	f7f0 f97d 	bl	80002a0 <strlen>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffae:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800ffb0:	483b      	ldr	r0, [pc, #236]	@ (80100a0 <SetFilename+0x118>)
 800ffb2:	f7fc f949 	bl	800c248 <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800ffb6:	493b      	ldr	r1, [pc, #236]	@ (80100a4 <SetFilename+0x11c>)
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f7ff faa7 	bl	800f50c <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800ffbe:	493a      	ldr	r1, [pc, #232]	@ (80100a8 <SetFilename+0x120>)
 800ffc0:	68f8      	ldr	r0, [r7, #12]
 800ffc2:	f7ff faa3 	bl	800f50c <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 800ffc6:	4b39      	ldr	r3, [pc, #228]	@ (80100ac <SetFilename+0x124>)
 800ffc8:	2201      	movs	r2, #1
 800ffca:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ffcc:	4b38      	ldr	r3, [pc, #224]	@ (80100b0 <SetFilename+0x128>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800ffd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ffd6:	2232      	movs	r2, #50	@ 0x32
 800ffd8:	4619      	mov	r1, r3
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f7ff fad8 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ffe0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ffe2:	f7f0 f95d 	bl	80002a0 <strlen>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ffee:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fff0:	482b      	ldr	r0, [pc, #172]	@ (80100a0 <SetFilename+0x118>)
 800fff2:	f7fc f929 	bl	800c248 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800fff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7f0 f950 	bl	80002a0 <strlen>
 8010000:	4603      	mov	r3, r0
 8010002:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	if (len < 20) {
 8010006:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801000a:	2b13      	cmp	r3, #19
 801000c:	d836      	bhi.n	801007c <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 801000e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010012:	2b00      	cmp	r3, #0
 8010014:	d036      	beq.n	8010084 <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 8010016:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801001a:	4619      	mov	r1, r3
 801001c:	4825      	ldr	r0, [pc, #148]	@ (80100b4 <SetFilename+0x12c>)
 801001e:	f00e ff74 	bl	801ef0a <strcpy>
				set_param_flags();
 8010022:	4b25      	ldr	r3, [pc, #148]	@ (80100b8 <SetFilename+0x130>)
 8010024:	2201      	movs	r2, #1
 8010026:	701a      	strb	r2, [r3, #0]
 8010028:	4b24      	ldr	r3, [pc, #144]	@ (80100bc <SetFilename+0x134>)
 801002a:	2201      	movs	r2, #1
 801002c:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 801002e:	4b24      	ldr	r3, [pc, #144]	@ (80100c0 <SetFilename+0x138>)
 8010030:	2201      	movs	r2, #1
 8010032:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				cli_printf(cli, "Filename is set to: %s",
 8010036:	4a1f      	ldr	r2, [pc, #124]	@ (80100b4 <SetFilename+0x12c>)
 8010038:	4922      	ldr	r1, [pc, #136]	@ (80100c4 <SetFilename+0x13c>)
 801003a:	68f8      	ldr	r0, [r7, #12]
 801003c:	f7ff fa66 	bl	800f50c <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8010040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010044:	2200      	movs	r2, #0
 8010046:	4619      	mov	r1, r3
 8010048:	481f      	ldr	r0, [pc, #124]	@ (80100c8 <SetFilename+0x140>)
 801004a:	f7f9 fd7c 	bl	8009b46 <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801004e:	f107 0310 	add.w	r3, r7, #16
 8010052:	2200      	movs	r2, #0
 8010054:	4619      	mov	r1, r3
 8010056:	481c      	ldr	r0, [pc, #112]	@ (80100c8 <SetFilename+0x140>)
 8010058:	f7f9 fc93 	bl	8009982 <HAL_RTC_GetTime>


				sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 801005c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010060:	4619      	mov	r1, r3
 8010062:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010066:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801006a:	9201      	str	r2, [sp, #4]
 801006c:	9300      	str	r3, [sp, #0]
 801006e:	460b      	mov	r3, r1
 8010070:	4a10      	ldr	r2, [pc, #64]	@ (80100b4 <SetFilename+0x12c>)
 8010072:	4916      	ldr	r1, [pc, #88]	@ (80100cc <SetFilename+0x144>)
 8010074:	4816      	ldr	r0, [pc, #88]	@ (80100d0 <SetFilename+0x148>)
 8010076:	f00e fcef 	bl	801ea58 <siprintf>
 801007a:	e003      	b.n	8010084 <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 801007c:	4915      	ldr	r1, [pc, #84]	@ (80100d4 <SetFilename+0x14c>)
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f7ff fa44 	bl	800f50c <cli_printf>
	}

	flag_cli = 0;
 8010084:	4b0a      	ldr	r3, [pc, #40]	@ (80100b0 <SetFilename+0x128>)
 8010086:	2200      	movs	r2, #0
 8010088:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801008a:	4b08      	ldr	r3, [pc, #32]	@ (80100ac <SetFilename+0x124>)
 801008c:	2200      	movs	r2, #0
 801008e:	701a      	strb	r2, [r3, #0]

}
 8010090:	bf00      	nop
 8010092:	3760      	adds	r7, #96	@ 0x60
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	080223a4 	.word	0x080223a4
 801009c:	08022418 	.word	0x08022418
 80100a0:	20001a74 	.word	0x20001a74
 80100a4:	08022770 	.word	0x08022770
 80100a8:	080227e4 	.word	0x080227e4
 80100ac:	20001b3a 	.word	0x20001b3a
 80100b0:	20001b3b 	.word	0x20001b3b
 80100b4:	200012cc 	.word	0x200012cc
 80100b8:	20001579 	.word	0x20001579
 80100bc:	2000157a 	.word	0x2000157a
 80100c0:	20001530 	.word	0x20001530
 80100c4:	08022824 	.word	0x08022824
 80100c8:	20001898 	.word	0x20001898
 80100cc:	0802283c 	.word	0x0802283c
 80100d0:	200014c5 	.word	0x200014c5
 80100d4:	08022850 	.word	0x08022850

080100d8 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", _Flash_Packet.filename_ver_date);
 80100e4:	4a04      	ldr	r2, [pc, #16]	@ (80100f8 <GetFilename+0x20>)
 80100e6:	4905      	ldr	r1, [pc, #20]	@ (80100fc <GetFilename+0x24>)
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f7ff fa0f 	bl	800f50c <cli_printf>

}
 80100ee:	bf00      	nop
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	200014c5 	.word	0x200014c5
 80100fc:	08022824 	.word	0x08022824

08010100 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 8010100:	b580      	push	{r7, lr}
 8010102:	b092      	sub	sp, #72	@ 0x48
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 801010c:	4b41      	ldr	r3, [pc, #260]	@ (8010214 <SetFileformat+0x114>)
 801010e:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010110:	4941      	ldr	r1, [pc, #260]	@ (8010218 <SetFileformat+0x118>)
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f7ff f9fa 	bl	800f50c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010118:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801011a:	f7f0 f8c1 	bl	80002a0 <strlen>
 801011e:	4603      	mov	r3, r0
 8010120:	b29a      	uxth	r2, r3
 8010122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010128:	483c      	ldr	r0, [pc, #240]	@ (801021c <SetFileformat+0x11c>)
 801012a:	f7fc f88d 	bl	800c248 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 801012e:	493c      	ldr	r1, [pc, #240]	@ (8010220 <SetFileformat+0x120>)
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	f7ff f9eb 	bl	800f50c <cli_printf>
	cli_printf(cli, "1. (.csv)");
 8010136:	493b      	ldr	r1, [pc, #236]	@ (8010224 <SetFileformat+0x124>)
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f7ff f9e7 	bl	800f50c <cli_printf>
	cli_printf(cli, "2. (.json)");
 801013e:	493a      	ldr	r1, [pc, #232]	@ (8010228 <SetFileformat+0x128>)
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f7ff f9e3 	bl	800f50c <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 8010146:	4939      	ldr	r1, [pc, #228]	@ (801022c <SetFileformat+0x12c>)
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f7ff f9df 	bl	800f50c <cli_printf>

	cli_other = 1;
 801014e:	4b38      	ldr	r3, [pc, #224]	@ (8010230 <SetFileformat+0x130>)
 8010150:	2201      	movs	r2, #1
 8010152:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010154:	4b37      	ldr	r3, [pc, #220]	@ (8010234 <SetFileformat+0x134>)
 8010156:	2200      	movs	r2, #0
 8010158:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 801015a:	f107 0310 	add.w	r3, r7, #16
 801015e:	2232      	movs	r2, #50	@ 0x32
 8010160:	4619      	mov	r1, r3
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f7ff fa14 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010168:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801016a:	f7f0 f899 	bl	80002a0 <strlen>
 801016e:	4603      	mov	r3, r0
 8010170:	b29a      	uxth	r2, r3
 8010172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010176:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010178:	4828      	ldr	r0, [pc, #160]	@ (801021c <SetFileformat+0x11c>)
 801017a:	f7fc f865 	bl	800c248 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 801017e:	f107 0310 	add.w	r3, r7, #16
 8010182:	2131      	movs	r1, #49	@ 0x31
 8010184:	4618      	mov	r0, r3
 8010186:	f00e fdb9 	bl	801ecfc <strchr>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d014      	beq.n	80101ba <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 8010190:	4b29      	ldr	r3, [pc, #164]	@ (8010238 <SetFileformat+0x138>)
 8010192:	4a2a      	ldr	r2, [pc, #168]	@ (801023c <SetFileformat+0x13c>)
 8010194:	6810      	ldr	r0, [r2, #0]
 8010196:	6018      	str	r0, [r3, #0]
 8010198:	7912      	ldrb	r2, [r2, #4]
 801019a:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 801019c:	4b28      	ldr	r3, [pc, #160]	@ (8010240 <SetFileformat+0x140>)
 801019e:	2201      	movs	r2, #1
 80101a0:	701a      	strb	r2, [r3, #0]
 80101a2:	4b28      	ldr	r3, [pc, #160]	@ (8010244 <SetFileformat+0x144>)
 80101a4:	2201      	movs	r2, #1
 80101a6:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 80101a8:	4b27      	ldr	r3, [pc, #156]	@ (8010248 <SetFileformat+0x148>)
 80101aa:	2201      	movs	r2, #1
 80101ac:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 1;
 80101b0:	4b25      	ldr	r3, [pc, #148]	@ (8010248 <SetFileformat+0x148>)
 80101b2:	2201      	movs	r2, #1
 80101b4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80101b8:	e01c      	b.n	80101f4 <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 80101ba:	f107 0310 	add.w	r3, r7, #16
 80101be:	2132      	movs	r1, #50	@ 0x32
 80101c0:	4618      	mov	r0, r3
 80101c2:	f00e fd9b 	bl	801ecfc <strchr>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d013      	beq.n	80101f4 <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 80101cc:	4b1a      	ldr	r3, [pc, #104]	@ (8010238 <SetFileformat+0x138>)
 80101ce:	4a1f      	ldr	r2, [pc, #124]	@ (801024c <SetFileformat+0x14c>)
 80101d0:	6810      	ldr	r0, [r2, #0]
 80101d2:	6018      	str	r0, [r3, #0]
 80101d4:	8892      	ldrh	r2, [r2, #4]
 80101d6:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 80101d8:	4b19      	ldr	r3, [pc, #100]	@ (8010240 <SetFileformat+0x140>)
 80101da:	2201      	movs	r2, #1
 80101dc:	701a      	strb	r2, [r3, #0]
 80101de:	4b19      	ldr	r3, [pc, #100]	@ (8010244 <SetFileformat+0x144>)
 80101e0:	2201      	movs	r2, #1
 80101e2:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 80101e4:	4b18      	ldr	r3, [pc, #96]	@ (8010248 <SetFileformat+0x148>)
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		_RunTime_Packet.fileformat_selection = 0;
 80101ec:	4b16      	ldr	r3, [pc, #88]	@ (8010248 <SetFileformat+0x148>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	}

	flag_cli = 0;
 80101f4:	4b0f      	ldr	r3, [pc, #60]	@ (8010234 <SetFileformat+0x134>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80101fa:	4b0d      	ldr	r3, [pc, #52]	@ (8010230 <SetFileformat+0x130>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 8010200:	4a0d      	ldr	r2, [pc, #52]	@ (8010238 <SetFileformat+0x138>)
 8010202:	4913      	ldr	r1, [pc, #76]	@ (8010250 <SetFileformat+0x150>)
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f7ff f981 	bl	800f50c <cli_printf>

}
 801020a:	bf00      	nop
 801020c:	3748      	adds	r7, #72	@ 0x48
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
 8010212:	bf00      	nop
 8010214:	080223a4 	.word	0x080223a4
 8010218:	08022418 	.word	0x08022418
 801021c:	20001a74 	.word	0x20001a74
 8010220:	08022868 	.word	0x08022868
 8010224:	0802288c 	.word	0x0802288c
 8010228:	08022898 	.word	0x08022898
 801022c:	080228a4 	.word	0x080228a4
 8010230:	20001b3a 	.word	0x20001b3a
 8010234:	20001b3b 	.word	0x20001b3b
 8010238:	20001330 	.word	0x20001330
 801023c:	080228d4 	.word	0x080228d4
 8010240:	20001579 	.word	0x20001579
 8010244:	2000157a 	.word	0x2000157a
 8010248:	20001530 	.word	0x20001530
 801024c:	080228dc 	.word	0x080228dc
 8010250:	080228e4 	.word	0x080228e4

08010254 <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 8010260:	4a04      	ldr	r2, [pc, #16]	@ (8010274 <GetFileformat+0x20>)
 8010262:	4905      	ldr	r1, [pc, #20]	@ (8010278 <GetFileformat+0x24>)
 8010264:	68f8      	ldr	r0, [r7, #12]
 8010266:	f7ff f951 	bl	800f50c <cli_printf>

}
 801026a:	bf00      	nop
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	20001330 	.word	0x20001330
 8010278:	080228e4 	.word	0x080228e4

0801027c <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 801027c:	b580      	push	{r7, lr}
 801027e:	b096      	sub	sp, #88	@ 0x58
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 8010288:	4b48      	ldr	r3, [pc, #288]	@ (80103ac <fanclean+0x130>)
 801028a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int counter = 0;
 801028c:	2300      	movs	r3, #0
 801028e:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010290:	4b47      	ldr	r3, [pc, #284]	@ (80103b0 <fanclean+0x134>)
 8010292:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 8010294:	2300      	movs	r3, #0
 8010296:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_printf(cli,
 801029a:	4946      	ldr	r1, [pc, #280]	@ (80103b4 <fanclean+0x138>)
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f7ff f935 	bl	800f50c <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 80102a2:	4b45      	ldr	r3, [pc, #276]	@ (80103b8 <fanclean+0x13c>)
 80102a4:	2201      	movs	r2, #1
 80102a6:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80102a8:	4b44      	ldr	r3, [pc, #272]	@ (80103bc <fanclean+0x140>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 80102ae:	f107 0314 	add.w	r3, r7, #20
 80102b2:	2232      	movs	r2, #50	@ 0x32
 80102b4:	4619      	mov	r1, r3
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f7ff f96a 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80102bc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80102be:	f7ef ffef 	bl	80002a0 <strlen>
 80102c2:	4603      	mov	r3, r0
 80102c4:	b29a      	uxth	r2, r3
 80102c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80102ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80102cc:	483c      	ldr	r0, [pc, #240]	@ (80103c0 <fanclean+0x144>)
 80102ce:	f7fb ffbb 	bl	800c248 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 80102d2:	f107 0314 	add.w	r3, r7, #20
 80102d6:	216e      	movs	r1, #110	@ 0x6e
 80102d8:	4618      	mov	r0, r3
 80102da:	f00e fd0f 	bl	801ecfc <strchr>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d00f      	beq.n	8010304 <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 80102e4:	4b37      	ldr	r3, [pc, #220]	@ (80103c4 <fanclean+0x148>)
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
		_RunTime_Packet.PM_calibration = 1;
 80102ec:	4b36      	ldr	r3, [pc, #216]	@ (80103c8 <fanclean+0x14c>)
 80102ee:	2201      	movs	r2, #1
 80102f0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 80102f4:	4935      	ldr	r1, [pc, #212]	@ (80103cc <fanclean+0x150>)
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	f7ff f908 	bl	800f50c <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 80102fc:	2300      	movs	r3, #0
 80102fe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010302:	e00f      	b.n	8010324 <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 8010304:	f107 0314 	add.w	r3, r7, #20
 8010308:	2179      	movs	r1, #121	@ 0x79
 801030a:	4618      	mov	r0, r3
 801030c:	f00e fcf6 	bl	801ecfc <strchr>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d006      	beq.n	8010324 <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 8010316:	4b2c      	ldr	r3, [pc, #176]	@ (80103c8 <fanclean+0x14c>)
 8010318:	2200      	movs	r2, #0
 801031a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
		do_Calibration = 1;
 801031e:	2301      	movs	r3, #1
 8010320:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 8010324:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8010328:	2b01      	cmp	r3, #1
 801032a:	d135      	bne.n	8010398 <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801032c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801032e:	f7ef ffb7 	bl	80002a0 <strlen>
 8010332:	4603      	mov	r3, r0
 8010334:	b29a      	uxth	r2, r3
 8010336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801033a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801033c:	4820      	ldr	r0, [pc, #128]	@ (80103c0 <fanclean+0x144>)
 801033e:	f7fb ff83 	bl	800c248 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 8010342:	4923      	ldr	r1, [pc, #140]	@ (80103d0 <fanclean+0x154>)
 8010344:	68f8      	ldr	r0, [r7, #12]
 8010346:	f7ff f8e1 	bl	800f50c <cli_printf>
		while (counter < 8) {
 801034a:	e013      	b.n	8010374 <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 801034c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801034e:	f7ef ffa7 	bl	80002a0 <strlen>
 8010352:	4603      	mov	r3, r0
 8010354:	b29a      	uxth	r2, r3
 8010356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801035a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801035c:	4818      	ldr	r0, [pc, #96]	@ (80103c0 <fanclean+0x144>)
 801035e:	f7fb ff73 	bl	800c248 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 8010362:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8010366:	f7f3 fedb 	bl	8004120 <HAL_Delay>
			toggle_blue_led();
 801036a:	f7f0 fea7 	bl	80010bc <toggle_blue_led>
			counter++;
 801036e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010370:	3301      	adds	r3, #1
 8010372:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 8010374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010376:	2b07      	cmp	r3, #7
 8010378:	dde8      	ble.n	801034c <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801037a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801037c:	f7ef ff90 	bl	80002a0 <strlen>
 8010380:	4603      	mov	r3, r0
 8010382:	b29a      	uxth	r2, r3
 8010384:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010388:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801038a:	480d      	ldr	r0, [pc, #52]	@ (80103c0 <fanclean+0x144>)
 801038c:	f7fb ff5c 	bl	800c248 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 8010390:	4910      	ldr	r1, [pc, #64]	@ (80103d4 <fanclean+0x158>)
 8010392:	68f8      	ldr	r0, [r7, #12]
 8010394:	f7ff f8ba 	bl	800f50c <cli_printf>

	}

	flag_cli = 0;
 8010398:	4b08      	ldr	r3, [pc, #32]	@ (80103bc <fanclean+0x140>)
 801039a:	2200      	movs	r2, #0
 801039c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801039e:	4b06      	ldr	r3, [pc, #24]	@ (80103b8 <fanclean+0x13c>)
 80103a0:	2200      	movs	r2, #0
 80103a2:	701a      	strb	r2, [r3, #0]
}
 80103a4:	bf00      	nop
 80103a6:	3758      	adds	r7, #88	@ 0x58
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	080223a4 	.word	0x080223a4
 80103b0:	08022900 	.word	0x08022900
 80103b4:	0802290c 	.word	0x0802290c
 80103b8:	20001b3a 	.word	0x20001b3a
 80103bc:	20001b3b 	.word	0x20001b3b
 80103c0:	20001a74 	.word	0x20001a74
 80103c4:	200012cc 	.word	0x200012cc
 80103c8:	20001530 	.word	0x20001530
 80103cc:	08022948 	.word	0x08022948
 80103d0:	08022970 	.word	0x08022970
 80103d4:	080229a8 	.word	0x080229a8

080103d8 <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 80103d8:	b580      	push	{r7, lr}
 80103da:	b096      	sub	sp, #88	@ 0x58
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 80103e4:	4b55      	ldr	r3, [pc, #340]	@ (801053c <co2calibrate+0x164>)
 80103e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 80103e8:	2300      	movs	r3, #0
 80103ea:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 80103ec:	4b54      	ldr	r3, [pc, #336]	@ (8010540 <co2calibrate+0x168>)
 80103ee:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 80103f0:	2300      	movs	r3, #0
 80103f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

	cli_other = 1;
 80103f6:	4b53      	ldr	r3, [pc, #332]	@ (8010544 <co2calibrate+0x16c>)
 80103f8:	2201      	movs	r2, #1
 80103fa:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 80103fc:	4b52      	ldr	r3, [pc, #328]	@ (8010548 <co2calibrate+0x170>)
 80103fe:	2200      	movs	r2, #0
 8010400:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8010402:	f107 0310 	add.w	r3, r7, #16
 8010406:	2232      	movs	r2, #50	@ 0x32
 8010408:	2100      	movs	r1, #0
 801040a:	4618      	mov	r0, r3
 801040c:	f00e fc6e 	bl	801ecec <memset>
	cli_printf(cli,
 8010410:	494e      	ldr	r1, [pc, #312]	@ (801054c <co2calibrate+0x174>)
 8010412:	68f8      	ldr	r0, [r7, #12]
 8010414:	f7ff f87a 	bl	800f50c <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 8010418:	494d      	ldr	r1, [pc, #308]	@ (8010550 <co2calibrate+0x178>)
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	f7ff f876 	bl	800f50c <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 8010420:	f107 0310 	add.w	r3, r7, #16
 8010424:	2232      	movs	r2, #50	@ 0x32
 8010426:	4619      	mov	r1, r3
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f7ff f8b1 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801042e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010430:	f7ef ff36 	bl	80002a0 <strlen>
 8010434:	4603      	mov	r3, r0
 8010436:	b29a      	uxth	r2, r3
 8010438:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801043c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801043e:	4845      	ldr	r0, [pc, #276]	@ (8010554 <co2calibrate+0x17c>)
 8010440:	f7fb ff02 	bl	800c248 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010444:	7c3b      	ldrb	r3, [r7, #16]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d01e      	beq.n	8010488 <co2calibrate+0xb0>
		_RunTime_Packet.CO2_calibration = 1;
 801044a:	4b43      	ldr	r3, [pc, #268]	@ (8010558 <co2calibrate+0x180>)
 801044c:	2201      	movs	r2, #1
 801044e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

		val = atoi(buffer);
 8010452:	f107 0310 	add.w	r3, r7, #16
 8010456:	4618      	mov	r0, r3
 8010458:	f00d f9c6 	bl	801d7e8 <atoi>
 801045c:	4603      	mov	r3, r0
 801045e:	647b      	str	r3, [r7, #68]	@ 0x44

		if (val < 65535) {
 8010460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010462:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010466:	4293      	cmp	r3, r2
 8010468:	d803      	bhi.n	8010472 <co2calibrate+0x9a>
			_RunTime_Packet._target_co2_concentration = val;
 801046a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801046c:	b29a      	uxth	r2, r3
 801046e:	4b3a      	ldr	r3, [pc, #232]	@ (8010558 <co2calibrate+0x180>)
 8010470:	879a      	strh	r2, [r3, #60]	@ 0x3c
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 8010472:	4b39      	ldr	r3, [pc, #228]	@ (8010558 <co2calibrate+0x180>)
 8010474:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
		cli_printf(cli,
 8010476:	461a      	mov	r2, r3
 8010478:	4938      	ldr	r1, [pc, #224]	@ (801055c <co2calibrate+0x184>)
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f7ff f846 	bl	800f50c <cli_printf>
		do_Calibration = 1;
 8010480:	2301      	movs	r3, #1
 8010482:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8010486:	e00a      	b.n	801049e <co2calibrate+0xc6>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 8010488:	4935      	ldr	r1, [pc, #212]	@ (8010560 <co2calibrate+0x188>)
 801048a:	68f8      	ldr	r0, [r7, #12]
 801048c:	f7ff f83e 	bl	800f50c <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 8010490:	4b31      	ldr	r3, [pc, #196]	@ (8010558 <co2calibrate+0x180>)
 8010492:	2200      	movs	r2, #0
 8010494:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		do_Calibration = 0;
 8010498:	2300      	movs	r3, #0
 801049a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	}

	if (do_Calibration == 1) {
 801049e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	d13f      	bne.n	8010526 <co2calibrate+0x14e>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80104a6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80104a8:	f7ef fefa 	bl	80002a0 <strlen>
 80104ac:	4603      	mov	r3, r0
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80104b6:	4827      	ldr	r0, [pc, #156]	@ (8010554 <co2calibrate+0x17c>)
 80104b8:	f7fb fec6 	bl	800c248 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 80104bc:	4929      	ldr	r1, [pc, #164]	@ (8010564 <co2calibrate+0x18c>)
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f7ff f824 	bl	800f50c <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 80104c4:	4b24      	ldr	r3, [pc, #144]	@ (8010558 <co2calibrate+0x180>)
 80104c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d119      	bne.n	8010502 <co2calibrate+0x12a>
#ifdef use_scd40x
			scd4x_perform_forced_recalibration(
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
#elif use_scd30
		scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 80104ce:	4b22      	ldr	r3, [pc, #136]	@ (8010558 <co2calibrate+0x180>)
 80104d0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80104d2:	4618      	mov	r0, r3
 80104d4:	f004 f932 	bl	801473c <scd30_force_recalibration>
#endif
		}
		while (counter < 8) {
 80104d8:	e013      	b.n	8010502 <co2calibrate+0x12a>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 80104da:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80104dc:	f7ef fee0 	bl	80002a0 <strlen>
 80104e0:	4603      	mov	r3, r0
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104e8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80104ea:	481a      	ldr	r0, [pc, #104]	@ (8010554 <co2calibrate+0x17c>)
 80104ec:	f7fb feac 	bl	800c248 <HAL_UART_Transmit>
					1000);
			HAL_Delay(1000);
 80104f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80104f4:	f7f3 fe14 	bl	8004120 <HAL_Delay>
			toggle_blue_led();
 80104f8:	f7f0 fde0 	bl	80010bc <toggle_blue_led>
			counter++;
 80104fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104fe:	3301      	adds	r3, #1
 8010500:	657b      	str	r3, [r7, #84]	@ 0x54
		while (counter < 8) {
 8010502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010504:	2b07      	cmp	r3, #7
 8010506:	dde8      	ble.n	80104da <co2calibrate+0x102>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010508:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801050a:	f7ef fec9 	bl	80002a0 <strlen>
 801050e:	4603      	mov	r3, r0
 8010510:	b29a      	uxth	r2, r3
 8010512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010516:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010518:	480e      	ldr	r0, [pc, #56]	@ (8010554 <co2calibrate+0x17c>)
 801051a:	f7fb fe95 	bl	800c248 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 801051e:	4912      	ldr	r1, [pc, #72]	@ (8010568 <co2calibrate+0x190>)
 8010520:	68f8      	ldr	r0, [r7, #12]
 8010522:	f7fe fff3 	bl	800f50c <cli_printf>
	}

	flag_cli = 0;
 8010526:	4b08      	ldr	r3, [pc, #32]	@ (8010548 <co2calibrate+0x170>)
 8010528:	2200      	movs	r2, #0
 801052a:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 801052c:	4b05      	ldr	r3, [pc, #20]	@ (8010544 <co2calibrate+0x16c>)
 801052e:	2200      	movs	r2, #0
 8010530:	701a      	strb	r2, [r3, #0]
}
 8010532:	bf00      	nop
 8010534:	3758      	adds	r7, #88	@ 0x58
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	080223a4 	.word	0x080223a4
 8010540:	08022900 	.word	0x08022900
 8010544:	20001b3a 	.word	0x20001b3a
 8010548:	20001b3b 	.word	0x20001b3b
 801054c:	080229bc 	.word	0x080229bc
 8010550:	08022a00 	.word	0x08022a00
 8010554:	20001a74 	.word	0x20001a74
 8010558:	20001530 	.word	0x20001530
 801055c:	08022a54 	.word	0x08022a54
 8010560:	08022aa4 	.word	0x08022aa4
 8010564:	08022ac4 	.word	0x08022ac4
 8010568:	08022ae8 	.word	0x08022ae8

0801056c <statco2calibrate>:


void statco2calibrate(EmbeddedCli *cli, char *args, void *context)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b08a      	sub	sp, #40	@ 0x28
 8010570:	af00      	add	r7, sp, #0
 8010572:	60f8      	str	r0, [r7, #12]
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	607a      	str	r2, [r7, #4]

	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_force_recalibration_status(&calib_val);
 8010578:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801057c:	4618      	mov	r0, r3
 801057e:	f004 f91b 	bl	80147b8 <scd30_get_force_recalibration_status>
 8010582:	4603      	mov	r3, r0
 8010584:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 8010586:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801058a:	2b00      	cmp	r3, #0
 801058c:	d107      	bne.n	801059e <statco2calibrate+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 801058e:	f107 0310 	add.w	r3, r7, #16
 8010592:	4a0f      	ldr	r2, [pc, #60]	@ (80105d0 <statco2calibrate+0x64>)
 8010594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010598:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 801059c:	e007      	b.n	80105ae <statco2calibrate+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 801059e:	f107 0310 	add.w	r3, r7, #16
 80105a2:	4a0c      	ldr	r2, [pc, #48]	@ (80105d4 <statco2calibrate+0x68>)
 80105a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105a8:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80105ac:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 80105ae:	f107 0310 	add.w	r3, r7, #16
 80105b2:	461a      	mov	r2, r3
 80105b4:	4908      	ldr	r1, [pc, #32]	@ (80105d8 <statco2calibrate+0x6c>)
 80105b6:	68f8      	ldr	r0, [r7, #12]
 80105b8:	f7fe ffa8 	bl	800f50c <cli_printf>
	cli_printf(cli, "Calibration Value: %d",calib_val);
 80105bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105be:	461a      	mov	r2, r3
 80105c0:	4906      	ldr	r1, [pc, #24]	@ (80105dc <statco2calibrate+0x70>)
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7fe ffa2 	bl	800f50c <cli_printf>



}
 80105c8:	bf00      	nop
 80105ca:	3728      	adds	r7, #40	@ 0x28
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	08022b04 	.word	0x08022b04
 80105d4:	08022b0c 	.word	0x08022b0c
 80105d8:	08022b14 	.word	0x08022b14
 80105dc:	08022b2c 	.word	0x08022b2c

080105e0 <co2_auto_calibration>:


void co2_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b094      	sub	sp, #80	@ 0x50
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]

	uint16_t calib;
	const char *newLine = "\r\n";
 80105ec:	4b28      	ldr	r3, [pc, #160]	@ (8010690 <co2_auto_calibration+0xb0>)
 80105ee:	64bb      	str	r3, [r7, #72]	@ 0x48
		cli_printf(cli, "Enter \"y\" to enable auto calibration!");
 80105f0:	4928      	ldr	r1, [pc, #160]	@ (8010694 <co2_auto_calibration+0xb4>)
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f7fe ff8a 	bl	800f50c <cli_printf>
		cli_printf(cli, "Enter \"n\" to disable auto calibration!");
 80105f8:	4927      	ldr	r1, [pc, #156]	@ (8010698 <co2_auto_calibration+0xb8>)
 80105fa:	68f8      	ldr	r0, [r7, #12]
 80105fc:	f7fe ff86 	bl	800f50c <cli_printf>



		cli_other = 1;
 8010600:	4b26      	ldr	r3, [pc, #152]	@ (801069c <co2_auto_calibration+0xbc>)
 8010602:	2201      	movs	r2, #1
 8010604:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010606:	4b26      	ldr	r3, [pc, #152]	@ (80106a0 <co2_auto_calibration+0xc0>)
 8010608:	2200      	movs	r2, #0
 801060a:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		receiveString(cli, buffer, sizeof(buffer));
 801060c:	f107 0314 	add.w	r3, r7, #20
 8010610:	2232      	movs	r2, #50	@ 0x32
 8010612:	4619      	mov	r1, r3
 8010614:	68f8      	ldr	r0, [r7, #12]
 8010616:	f7fe ffbb 	bl	800f590 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801061a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801061c:	f7ef fe40 	bl	80002a0 <strlen>
 8010620:	4603      	mov	r3, r0
 8010622:	b29a      	uxth	r2, r3
 8010624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010628:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801062a:	481e      	ldr	r0, [pc, #120]	@ (80106a4 <co2_auto_calibration+0xc4>)
 801062c:	f7fb fe0c 	bl	800c248 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010630:	f107 0314 	add.w	r3, r7, #20
 8010634:	2179      	movs	r1, #121	@ 0x79
 8010636:	4618      	mov	r0, r3
 8010638:	f00e fb60 	bl	801ecfc <strchr>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d007      	beq.n	8010652 <co2_auto_calibration+0x72>
			calib = 1;
 8010642:	2301      	movs	r3, #1
 8010644:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

			cli_printf(cli, "Auto calibration enabled");
 8010648:	4917      	ldr	r1, [pc, #92]	@ (80106a8 <co2_auto_calibration+0xc8>)
 801064a:	68f8      	ldr	r0, [r7, #12]
 801064c:	f7fe ff5e 	bl	800f50c <cli_printf>
 8010650:	e00f      	b.n	8010672 <co2_auto_calibration+0x92>
		} else if (strstr(buffer, "n")) {
 8010652:	f107 0314 	add.w	r3, r7, #20
 8010656:	216e      	movs	r1, #110	@ 0x6e
 8010658:	4618      	mov	r0, r3
 801065a:	f00e fb4f 	bl	801ecfc <strchr>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d006      	beq.n	8010672 <co2_auto_calibration+0x92>
			calib = 0;
 8010664:	2300      	movs	r3, #0
 8010666:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			cli_printf(cli, "Auto calibration disabled");
 801066a:	4910      	ldr	r1, [pc, #64]	@ (80106ac <co2_auto_calibration+0xcc>)
 801066c:	68f8      	ldr	r0, [r7, #12]
 801066e:	f7fe ff4d 	bl	800f50c <cli_printf>
		}

		flag_cli = 0;
 8010672:	4b0b      	ldr	r3, [pc, #44]	@ (80106a0 <co2_auto_calibration+0xc0>)
 8010674:	2200      	movs	r2, #0
 8010676:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010678:	4b08      	ldr	r3, [pc, #32]	@ (801069c <co2_auto_calibration+0xbc>)
 801067a:	2200      	movs	r2, #0
 801067c:	701a      	strb	r2, [r3, #0]



	scd30_activate_auto_calibration(calib);
 801067e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010682:	4618      	mov	r0, r3
 8010684:	f003 ffcc 	bl	8014620 <scd30_activate_auto_calibration>
}
 8010688:	bf00      	nop
 801068a:	3750      	adds	r7, #80	@ 0x50
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	080223a4 	.word	0x080223a4
 8010694:	08022b44 	.word	0x08022b44
 8010698:	08022b6c 	.word	0x08022b6c
 801069c:	20001b3a 	.word	0x20001b3a
 80106a0:	20001b3b 	.word	0x20001b3b
 80106a4:	20001a74 	.word	0x20001a74
 80106a8:	08022b94 	.word	0x08022b94
 80106ac:	08022bb0 	.word	0x08022bb0

080106b0 <get_auto_calibration>:


void get_auto_calibration(EmbeddedCli *cli, char *args, void *context)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b08a      	sub	sp, #40	@ 0x28
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
	int16_t stat;
	char status[20];
	stat = scd30_get_auto_calibration_status(&calib_val);
 80106bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80106c0:	4618      	mov	r0, r3
 80106c2:	f003 ffeb 	bl	801469c <scd30_get_auto_calibration_status>
 80106c6:	4603      	mov	r3, r0
 80106c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

	switch(stat)
 80106ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d107      	bne.n	80106e2 <get_auto_calibration+0x32>
	{

	case 0:
	{
		strcpy(status,"Success");
 80106d2:	f107 0310 	add.w	r3, r7, #16
 80106d6:	4a0f      	ldr	r2, [pc, #60]	@ (8010714 <get_auto_calibration+0x64>)
 80106d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106dc:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80106e0:	e007      	b.n	80106f2 <get_auto_calibration+0x42>
	}
	default:
	{
		strcpy(status,"Error  ");
 80106e2:	f107 0310 	add.w	r3, r7, #16
 80106e6:	4a0c      	ldr	r2, [pc, #48]	@ (8010718 <get_auto_calibration+0x68>)
 80106e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106ec:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 80106f0:	bf00      	nop
	}
	}

	cli_printf(cli, "Calibration Status: %s",status);
 80106f2:	f107 0310 	add.w	r3, r7, #16
 80106f6:	461a      	mov	r2, r3
 80106f8:	4908      	ldr	r1, [pc, #32]	@ (801071c <get_auto_calibration+0x6c>)
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f7fe ff06 	bl	800f50c <cli_printf>
	cli_printf(cli, "Auto calibration active status: %d",calib_val);
 8010700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010702:	461a      	mov	r2, r3
 8010704:	4906      	ldr	r1, [pc, #24]	@ (8010720 <get_auto_calibration+0x70>)
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f7fe ff00 	bl	800f50c <cli_printf>
}
 801070c:	bf00      	nop
 801070e:	3728      	adds	r7, #40	@ 0x28
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	08022b04 	.word	0x08022b04
 8010718:	08022b0c 	.word	0x08022b0c
 801071c:	08022b14 	.word	0x08022b14
 8010720:	08022bcc 	.word	0x08022bcc

08010724 <set_co2_temp_offset>:

void set_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b096      	sub	sp, #88	@ 0x58
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010730:	4b53      	ldr	r3, [pc, #332]	@ (8010880 <set_co2_temp_offset+0x15c>)
 8010732:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010734:	2300      	movs	r3, #0
 8010736:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010738:	4b52      	ldr	r3, [pc, #328]	@ (8010884 <set_co2_temp_offset+0x160>)
 801073a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 801073c:	2300      	movs	r3, #0
 801073e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010742:	4b51      	ldr	r3, [pc, #324]	@ (8010888 <set_co2_temp_offset+0x164>)
 8010744:	2201      	movs	r2, #1
 8010746:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010748:	4b50      	ldr	r3, [pc, #320]	@ (801088c <set_co2_temp_offset+0x168>)
 801074a:	2200      	movs	r2, #0
 801074c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 801074e:	f107 0310 	add.w	r3, r7, #16
 8010752:	2232      	movs	r2, #50	@ 0x32
 8010754:	2100      	movs	r1, #0
 8010756:	4618      	mov	r0, r3
 8010758:	f00e fac8 	bl	801ecec <memset>
		cli_printf(cli,
 801075c:	494c      	ldr	r1, [pc, #304]	@ (8010890 <set_co2_temp_offset+0x16c>)
 801075e:	68f8      	ldr	r0, [r7, #12]
 8010760:	f7fe fed4 	bl	800f50c <cli_printf>
				"To calibrate Co2 sensor Temperature offset, please provide value.");
		cli_printf(cli,
 8010764:	494b      	ldr	r1, [pc, #300]	@ (8010894 <set_co2_temp_offset+0x170>)
 8010766:	68f8      	ldr	r0, [r7, #12]
 8010768:	f7fe fed0 	bl	800f50c <cli_printf>
				"If temperature offset is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 801076c:	f107 0310 	add.w	r3, r7, #16
 8010770:	2232      	movs	r2, #50	@ 0x32
 8010772:	4619      	mov	r1, r3
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f7fe ff0b 	bl	800f590 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801077a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801077c:	f7ef fd90 	bl	80002a0 <strlen>
 8010780:	4603      	mov	r3, r0
 8010782:	b29a      	uxth	r2, r3
 8010784:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010788:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801078a:	4843      	ldr	r0, [pc, #268]	@ (8010898 <set_co2_temp_offset+0x174>)
 801078c:	f7fb fd5c 	bl	800c248 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 8010790:	7c3b      	ldrb	r3, [r7, #16]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d01e      	beq.n	80107d4 <set_co2_temp_offset+0xb0>
			_RunTime_Packet.temp_offset = 1;
 8010796:	4b41      	ldr	r3, [pc, #260]	@ (801089c <set_co2_temp_offset+0x178>)
 8010798:	2201      	movs	r2, #1
 801079a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 801079e:	f107 0310 	add.w	r3, r7, #16
 80107a2:	4618      	mov	r0, r3
 80107a4:	f00d f820 	bl	801d7e8 <atoi>
 80107a8:	4603      	mov	r3, r0
 80107aa:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 80107ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d803      	bhi.n	80107be <set_co2_temp_offset+0x9a>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 80107b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	4b38      	ldr	r3, [pc, #224]	@ (801089c <set_co2_temp_offset+0x178>)
 80107bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor temperature offset is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 80107be:	4b37      	ldr	r3, [pc, #220]	@ (801089c <set_co2_temp_offset+0x178>)
 80107c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 80107c2:	461a      	mov	r2, r3
 80107c4:	4936      	ldr	r1, [pc, #216]	@ (80108a0 <set_co2_temp_offset+0x17c>)
 80107c6:	68f8      	ldr	r0, [r7, #12]
 80107c8:	f7fe fea0 	bl	800f50c <cli_printf>

			do_Calibration = 1;
 80107cc:	2301      	movs	r3, #1
 80107ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80107d2:	e006      	b.n	80107e2 <set_co2_temp_offset+0xbe>
		} else {
			cli_printf(cli, "Co2 sensor Temperature Offset aborted.");
 80107d4:	4933      	ldr	r1, [pc, #204]	@ (80108a4 <set_co2_temp_offset+0x180>)
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f7fe fe98 	bl	800f50c <cli_printf>
			do_Calibration = 0;
 80107dc:	2300      	movs	r3, #0
 80107de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80107e2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d13f      	bne.n	801086a <set_co2_temp_offset+0x146>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80107ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80107ec:	f7ef fd58 	bl	80002a0 <strlen>
 80107f0:	4603      	mov	r3, r0
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80107f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80107fa:	4827      	ldr	r0, [pc, #156]	@ (8010898 <set_co2_temp_offset+0x174>)
 80107fc:	f7fb fd24 	bl	800c248 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating temperature offset, please wait.");
 8010800:	4929      	ldr	r1, [pc, #164]	@ (80108a8 <set_co2_temp_offset+0x184>)
 8010802:	68f8      	ldr	r0, [r7, #12]
 8010804:	f7fe fe82 	bl	800f50c <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010808:	4b24      	ldr	r3, [pc, #144]	@ (801089c <set_co2_temp_offset+0x178>)
 801080a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801080e:	2b00      	cmp	r3, #0
 8010810:	d119      	bne.n	8010846 <set_co2_temp_offset+0x122>


				scd30_set_temperature_offset(_RunTime_Packet._tempOffset_co2_concentration);
 8010812:	4b22      	ldr	r3, [pc, #136]	@ (801089c <set_co2_temp_offset+0x178>)
 8010814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010816:	4618      	mov	r0, r3
 8010818:	f004 f81e 	bl	8014858 <scd30_set_temperature_offset>

			}
			while (counter < 8) {
 801081c:	e013      	b.n	8010846 <set_co2_temp_offset+0x122>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 801081e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010820:	f7ef fd3e 	bl	80002a0 <strlen>
 8010824:	4603      	mov	r3, r0
 8010826:	b29a      	uxth	r2, r3
 8010828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801082c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801082e:	481a      	ldr	r0, [pc, #104]	@ (8010898 <set_co2_temp_offset+0x174>)
 8010830:	f7fb fd0a 	bl	800c248 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010838:	f7f3 fc72 	bl	8004120 <HAL_Delay>
				toggle_blue_led();
 801083c:	f7f0 fc3e 	bl	80010bc <toggle_blue_led>
				counter++;
 8010840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010842:	3301      	adds	r3, #1
 8010844:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010848:	2b07      	cmp	r3, #7
 801084a:	dde8      	ble.n	801081e <set_co2_temp_offset+0xfa>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801084c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801084e:	f7ef fd27 	bl	80002a0 <strlen>
 8010852:	4603      	mov	r3, r0
 8010854:	b29a      	uxth	r2, r3
 8010856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801085a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801085c:	480e      	ldr	r0, [pc, #56]	@ (8010898 <set_co2_temp_offset+0x174>)
 801085e:	f7fb fcf3 	bl	800c248 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010862:	4912      	ldr	r1, [pc, #72]	@ (80108ac <set_co2_temp_offset+0x188>)
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f7fe fe51 	bl	800f50c <cli_printf>
		}

		flag_cli = 0;
 801086a:	4b08      	ldr	r3, [pc, #32]	@ (801088c <set_co2_temp_offset+0x168>)
 801086c:	2200      	movs	r2, #0
 801086e:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010870:	4b05      	ldr	r3, [pc, #20]	@ (8010888 <set_co2_temp_offset+0x164>)
 8010872:	2200      	movs	r2, #0
 8010874:	701a      	strb	r2, [r3, #0]
}
 8010876:	bf00      	nop
 8010878:	3758      	adds	r7, #88	@ 0x58
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	080223a4 	.word	0x080223a4
 8010884:	08022900 	.word	0x08022900
 8010888:	20001b3a 	.word	0x20001b3a
 801088c:	20001b3b 	.word	0x20001b3b
 8010890:	08022bf0 	.word	0x08022bf0
 8010894:	08022c34 	.word	0x08022c34
 8010898:	20001a74 	.word	0x20001a74
 801089c:	20001530 	.word	0x20001530
 80108a0:	08022c78 	.word	0x08022c78
 80108a4:	08022cbc 	.word	0x08022cbc
 80108a8:	08022ce4 	.word	0x08022ce4
 80108ac:	08022ae8 	.word	0x08022ae8

080108b0 <get_co2_temp_offset>:

void get_co2_temp_offset(EmbeddedCli *cli, char *args, void *context)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b08a      	sub	sp, #40	@ 0x28
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_temperature_offset(&calib_val);
 80108bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80108c0:	4618      	mov	r0, r3
 80108c2:	f004 f807 	bl	80148d4 <scd30_get_temperature_offset>
 80108c6:	4603      	mov	r3, r0
 80108c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 80108ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d107      	bne.n	80108e2 <get_co2_temp_offset+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 80108d2:	f107 0310 	add.w	r3, r7, #16
 80108d6:	4a0f      	ldr	r2, [pc, #60]	@ (8010914 <get_co2_temp_offset+0x64>)
 80108d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108dc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80108e0:	e007      	b.n	80108f2 <get_co2_temp_offset+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 80108e2:	f107 0310 	add.w	r3, r7, #16
 80108e6:	4a0c      	ldr	r2, [pc, #48]	@ (8010918 <get_co2_temp_offset+0x68>)
 80108e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108ec:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 80108f0:	bf00      	nop
		}
		}

		cli_printf(cli, "Temperature Offset Status: %s",status);
 80108f2:	f107 0310 	add.w	r3, r7, #16
 80108f6:	461a      	mov	r2, r3
 80108f8:	4908      	ldr	r1, [pc, #32]	@ (801091c <get_co2_temp_offset+0x6c>)
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	f7fe fe06 	bl	800f50c <cli_printf>
		cli_printf(cli, "Temperature Offset Value: %d",calib_val);
 8010900:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010902:	461a      	mov	r2, r3
 8010904:	4906      	ldr	r1, [pc, #24]	@ (8010920 <get_co2_temp_offset+0x70>)
 8010906:	68f8      	ldr	r0, [r7, #12]
 8010908:	f7fe fe00 	bl	800f50c <cli_printf>
}
 801090c:	bf00      	nop
 801090e:	3728      	adds	r7, #40	@ 0x28
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}
 8010914:	08022b04 	.word	0x08022b04
 8010918:	08022b0c 	.word	0x08022b0c
 801091c:	08022d18 	.word	0x08022d18
 8010920:	08022d38 	.word	0x08022d38

08010924 <set_co2_altitude_compensation>:

void set_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b096      	sub	sp, #88	@ 0x58
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010930:	4b53      	ldr	r3, [pc, #332]	@ (8010a80 <set_co2_altitude_compensation+0x15c>)
 8010932:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t val;
	int counter = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	657b      	str	r3, [r7, #84]	@ 0x54
	const char *dot = "........";
 8010938:	4b52      	ldr	r3, [pc, #328]	@ (8010a84 <set_co2_altitude_compensation+0x160>)
 801093a:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t do_Calibration = 0;
 801093c:	2300      	movs	r3, #0
 801093e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	cli_other = 1;
 8010942:	4b51      	ldr	r3, [pc, #324]	@ (8010a88 <set_co2_altitude_compensation+0x164>)
 8010944:	2201      	movs	r2, #1
 8010946:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010948:	4b50      	ldr	r3, [pc, #320]	@ (8010a8c <set_co2_altitude_compensation+0x168>)
 801094a:	2200      	movs	r2, #0
 801094c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 801094e:	f107 0310 	add.w	r3, r7, #16
 8010952:	2232      	movs	r2, #50	@ 0x32
 8010954:	2100      	movs	r1, #0
 8010956:	4618      	mov	r0, r3
 8010958:	f00e f9c8 	bl	801ecec <memset>
		cli_printf(cli,
 801095c:	494c      	ldr	r1, [pc, #304]	@ (8010a90 <set_co2_altitude_compensation+0x16c>)
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f7fe fdd4 	bl	800f50c <cli_printf>
				"To calibrate Co2 sensor Altitude compensation, please provide value.");
		cli_printf(cli,
 8010964:	494b      	ldr	r1, [pc, #300]	@ (8010a94 <set_co2_altitude_compensation+0x170>)
 8010966:	68f8      	ldr	r0, [r7, #12]
 8010968:	f7fe fdd0 	bl	800f50c <cli_printf>
				"If Altitude compensation is unknown then just press enter to cancel.");

		receiveString(cli, buffer, sizeof(buffer));
 801096c:	f107 0310 	add.w	r3, r7, #16
 8010970:	2232      	movs	r2, #50	@ 0x32
 8010972:	4619      	mov	r1, r3
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f7fe fe0b 	bl	800f590 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801097a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801097c:	f7ef fc90 	bl	80002a0 <strlen>
 8010980:	4603      	mov	r3, r0
 8010982:	b29a      	uxth	r2, r3
 8010984:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010988:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801098a:	4843      	ldr	r0, [pc, #268]	@ (8010a98 <set_co2_altitude_compensation+0x174>)
 801098c:	f7fb fc5c 	bl	800c248 <HAL_UART_Transmit>
				1000);

		if (buffer[0] != '\0') {
 8010990:	7c3b      	ldrb	r3, [r7, #16]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d01e      	beq.n	80109d4 <set_co2_altitude_compensation+0xb0>
			_RunTime_Packet.temp_offset = 1;
 8010996:	4b41      	ldr	r3, [pc, #260]	@ (8010a9c <set_co2_altitude_compensation+0x178>)
 8010998:	2201      	movs	r2, #1
 801099a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			val = atoi(buffer);
 801099e:	f107 0310 	add.w	r3, r7, #16
 80109a2:	4618      	mov	r0, r3
 80109a4:	f00c ff20 	bl	801d7e8 <atoi>
 80109a8:	4603      	mov	r3, r0
 80109aa:	647b      	str	r3, [r7, #68]	@ 0x44

			if (val < 65535) {
 80109ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d803      	bhi.n	80109be <set_co2_altitude_compensation+0x9a>
				_RunTime_Packet._tempOffset_co2_concentration = val;
 80109b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109b8:	b29a      	uxth	r2, r3
 80109ba:	4b38      	ldr	r3, [pc, #224]	@ (8010a9c <set_co2_altitude_compensation+0x178>)
 80109bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
			}

			cli_printf(cli,
					"Co2 sensor Altitude compensation is going to be Calibrated now : %d",
					_RunTime_Packet._tempOffset_co2_concentration);
 80109be:	4b37      	ldr	r3, [pc, #220]	@ (8010a9c <set_co2_altitude_compensation+0x178>)
 80109c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
			cli_printf(cli,
 80109c2:	461a      	mov	r2, r3
 80109c4:	4936      	ldr	r1, [pc, #216]	@ (8010aa0 <set_co2_altitude_compensation+0x17c>)
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f7fe fda0 	bl	800f50c <cli_printf>

			do_Calibration = 1;
 80109cc:	2301      	movs	r3, #1
 80109ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80109d2:	e006      	b.n	80109e2 <set_co2_altitude_compensation+0xbe>
		} else {
			cli_printf(cli, "Co2 sensor Altitude compensation aborted.");
 80109d4:	4933      	ldr	r1, [pc, #204]	@ (8010aa4 <set_co2_altitude_compensation+0x180>)
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f7fe fd98 	bl	800f50c <cli_printf>
			do_Calibration = 0;
 80109dc:	2300      	movs	r3, #0
 80109de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		}

		if (do_Calibration == 1) {
 80109e2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d13f      	bne.n	8010a6a <set_co2_altitude_compensation+0x146>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 80109ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80109ec:	f7ef fc58 	bl	80002a0 <strlen>
 80109f0:	4603      	mov	r3, r0
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80109f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80109fa:	4827      	ldr	r0, [pc, #156]	@ (8010a98 <set_co2_altitude_compensation+0x174>)
 80109fc:	f7fb fc24 	bl	800c248 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Co2 is calibrating Altitude compensation, please wait.");
 8010a00:	4929      	ldr	r1, [pc, #164]	@ (8010aa8 <set_co2_altitude_compensation+0x184>)
 8010a02:	68f8      	ldr	r0, [r7, #12]
 8010a04:	f7fe fd82 	bl	800f50c <cli_printf>
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010a08:	4b24      	ldr	r3, [pc, #144]	@ (8010a9c <set_co2_altitude_compensation+0x178>)
 8010a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d119      	bne.n	8010a46 <set_co2_altitude_compensation+0x122>


				scd30_set_altitude_compensation(_RunTime_Packet._tempOffset_co2_concentration);
 8010a12:	4b22      	ldr	r3, [pc, #136]	@ (8010a9c <set_co2_altitude_compensation+0x178>)
 8010a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010a16:	4618      	mov	r0, r3
 8010a18:	f003 fffc 	bl	8014a14 <scd30_set_altitude_compensation>

			}
			while (counter < 8) {
 8010a1c:	e013      	b.n	8010a46 <set_co2_altitude_compensation+0x122>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010a1e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8010a20:	f7ef fc3e 	bl	80002a0 <strlen>
 8010a24:	4603      	mov	r3, r0
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a2c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010a2e:	481a      	ldr	r0, [pc, #104]	@ (8010a98 <set_co2_altitude_compensation+0x174>)
 8010a30:	f7fb fc0a 	bl	800c248 <HAL_UART_Transmit>
						1000);
				HAL_Delay(1000);
 8010a34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010a38:	f7f3 fb72 	bl	8004120 <HAL_Delay>
				toggle_blue_led();
 8010a3c:	f7f0 fb3e 	bl	80010bc <toggle_blue_led>
				counter++;
 8010a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a42:	3301      	adds	r3, #1
 8010a44:	657b      	str	r3, [r7, #84]	@ 0x54
			while (counter < 8) {
 8010a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a48:	2b07      	cmp	r3, #7
 8010a4a:	dde8      	ble.n	8010a1e <set_co2_altitude_compensation+0xfa>
			}

			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010a4c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010a4e:	f7ef fc27 	bl	80002a0 <strlen>
 8010a52:	4603      	mov	r3, r0
 8010a54:	b29a      	uxth	r2, r3
 8010a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a5a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010a5c:	480e      	ldr	r0, [pc, #56]	@ (8010a98 <set_co2_altitude_compensation+0x174>)
 8010a5e:	f7fb fbf3 	bl	800c248 <HAL_UART_Transmit>
					1000);
			cli_printf(cli, "Sensor calibration done.");
 8010a62:	4912      	ldr	r1, [pc, #72]	@ (8010aac <set_co2_altitude_compensation+0x188>)
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f7fe fd51 	bl	800f50c <cli_printf>
		}

		flag_cli = 0;
 8010a6a:	4b08      	ldr	r3, [pc, #32]	@ (8010a8c <set_co2_altitude_compensation+0x168>)
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	701a      	strb	r2, [r3, #0]
		cli_other = 0;
 8010a70:	4b05      	ldr	r3, [pc, #20]	@ (8010a88 <set_co2_altitude_compensation+0x164>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	701a      	strb	r2, [r3, #0]
}
 8010a76:	bf00      	nop
 8010a78:	3758      	adds	r7, #88	@ 0x58
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	080223a4 	.word	0x080223a4
 8010a84:	08022900 	.word	0x08022900
 8010a88:	20001b3a 	.word	0x20001b3a
 8010a8c:	20001b3b 	.word	0x20001b3b
 8010a90:	08022d58 	.word	0x08022d58
 8010a94:	08022da0 	.word	0x08022da0
 8010a98:	20001a74 	.word	0x20001a74
 8010a9c:	20001530 	.word	0x20001530
 8010aa0:	08022de8 	.word	0x08022de8
 8010aa4:	08022e2c 	.word	0x08022e2c
 8010aa8:	08022e58 	.word	0x08022e58
 8010aac:	08022ae8 	.word	0x08022ae8

08010ab0 <get_co2_altitude_compensation>:

void get_co2_altitude_compensation(EmbeddedCli *cli, char *args, void *context)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b08a      	sub	sp, #40	@ 0x28
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
	uint16_t calib_val;
		int16_t stat;
		char status[20];
		stat = scd30_get_altitude_compensation(&calib_val);
 8010abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f003 ff57 	bl	8014974 <scd30_get_altitude_compensation>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	84fb      	strh	r3, [r7, #38]	@ 0x26

		switch(stat)
 8010aca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d107      	bne.n	8010ae2 <get_co2_altitude_compensation+0x32>
		{

		case 0:
		{
			strcpy(status,"Success");
 8010ad2:	f107 0310 	add.w	r3, r7, #16
 8010ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8010b14 <get_co2_altitude_compensation+0x64>)
 8010ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010adc:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010ae0:	e007      	b.n	8010af2 <get_co2_altitude_compensation+0x42>
		}
		default:
		{
			strcpy(status,"Error  ");
 8010ae2:	f107 0310 	add.w	r3, r7, #16
 8010ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8010b18 <get_co2_altitude_compensation+0x68>)
 8010ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010aec:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8010af0:	bf00      	nop
		}
		}

		cli_printf(cli, "Altitude_compensation Status: %s",status);
 8010af2:	f107 0310 	add.w	r3, r7, #16
 8010af6:	461a      	mov	r2, r3
 8010af8:	4908      	ldr	r1, [pc, #32]	@ (8010b1c <get_co2_altitude_compensation+0x6c>)
 8010afa:	68f8      	ldr	r0, [r7, #12]
 8010afc:	f7fe fd06 	bl	800f50c <cli_printf>
		cli_printf(cli, "Altitude_compensation Value: %d",calib_val);
 8010b00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b02:	461a      	mov	r2, r3
 8010b04:	4906      	ldr	r1, [pc, #24]	@ (8010b20 <get_co2_altitude_compensation+0x70>)
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f7fe fd00 	bl	800f50c <cli_printf>
}
 8010b0c:	bf00      	nop
 8010b0e:	3728      	adds	r7, #40	@ 0x28
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	08022b04 	.word	0x08022b04
 8010b18:	08022b0c 	.word	0x08022b0c
 8010b1c:	08022e90 	.word	0x08022e90
 8010b20:	08022eb4 	.word	0x08022eb4

08010b24 <run_co2_calibration_routine>:


void run_co2_calibration_routine(EmbeddedCli *cli, char *args, void *context)
{
 8010b24:	b590      	push	{r4, r7, lr}
 8010b26:	b0a7      	sub	sp, #156	@ 0x9c
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
	uint32_t maxTime = 120000;
 8010b30:	4bb1      	ldr	r3, [pc, #708]	@ (8010df8 <run_co2_calibration_routine+0x2d4>)
 8010b32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	uint32_t prev_maxTime =  HAL_GetTick();
 8010b36:	f7f3 fae7 	bl	8004108 <HAL_GetTick>
 8010b3a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	uint32_t cur_tick = 0;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const char *newLine = "\r\n";
 8010b44:	4bad      	ldr	r3, [pc, #692]	@ (8010dfc <run_co2_calibration_routine+0x2d8>)
 8010b46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	uint32_t val;
	int counter = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	const char *dot = "........";
 8010b50:	4bab      	ldr	r3, [pc, #684]	@ (8010e00 <run_co2_calibration_routine+0x2dc>)
 8010b52:	67fb      	str	r3, [r7, #124]	@ 0x7c
	char progressbar_buf[50] = "ProgressBar: ";
 8010b54:	4aab      	ldr	r2, [pc, #684]	@ (8010e04 <run_co2_calibration_routine+0x2e0>)
 8010b56:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010b5a:	4614      	mov	r4, r2
 8010b5c:	6820      	ldr	r0, [r4, #0]
 8010b5e:	6861      	ldr	r1, [r4, #4]
 8010b60:	68a2      	ldr	r2, [r4, #8]
 8010b62:	c307      	stmia	r3!, {r0, r1, r2}
 8010b64:	89a2      	ldrh	r2, [r4, #12]
 8010b66:	801a      	strh	r2, [r3, #0]
 8010b68:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 8010b6c:	2224      	movs	r2, #36	@ 0x24
 8010b6e:	2100      	movs	r1, #0
 8010b70:	4618      	mov	r0, r3
 8010b72:	f00e f8bb 	bl	801ecec <memset>
	uint8_t calib = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t do_Calibration = 0;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	cli_other = 1;
 8010b82:	4ba1      	ldr	r3, [pc, #644]	@ (8010e08 <run_co2_calibration_routine+0x2e4>)
 8010b84:	2201      	movs	r2, #1
 8010b86:	701a      	strb	r2, [r3, #0]
		flag_cli = 0;
 8010b88:	4ba0      	ldr	r3, [pc, #640]	@ (8010e0c <run_co2_calibration_routine+0x2e8>)
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	701a      	strb	r2, [r3, #0]
		char buffer[50];
		memset(buffer, '\0', sizeof(buffer));
 8010b8e:	f107 0310 	add.w	r3, r7, #16
 8010b92:	2232      	movs	r2, #50	@ 0x32
 8010b94:	2100      	movs	r1, #0
 8010b96:	4618      	mov	r0, r3
 8010b98:	f00e f8a8 	bl	801ecec <memset>

		     cli_printf(cli,"");
 8010b9c:	499c      	ldr	r1, [pc, #624]	@ (8010e10 <run_co2_calibration_routine+0x2ec>)
 8010b9e:	68f8      	ldr	r0, [r7, #12]
 8010ba0:	f7fe fcb4 	bl	800f50c <cli_printf>
				cli_printf(cli,"It takes about 2-3min to run complete routine. ");
 8010ba4:	499b      	ldr	r1, [pc, #620]	@ (8010e14 <run_co2_calibration_routine+0x2f0>)
 8010ba6:	68f8      	ldr	r0, [r7, #12]
 8010ba8:	f7fe fcb0 	bl	800f50c <cli_printf>
				cli_printf(cli,"once this routine is activated it cant be canceled. ");
 8010bac:	499a      	ldr	r1, [pc, #616]	@ (8010e18 <run_co2_calibration_routine+0x2f4>)
 8010bae:	68f8      	ldr	r0, [r7, #12]
 8010bb0:	f7fe fcac 	bl	800f50c <cli_printf>
				cli_printf(cli,"Do you want to run calibration routine y/n?. ");
 8010bb4:	4999      	ldr	r1, [pc, #612]	@ (8010e1c <run_co2_calibration_routine+0x2f8>)
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f7fe fca8 	bl	800f50c <cli_printf>

		receiveString(cli, buffer, sizeof(buffer));
 8010bbc:	f107 0310 	add.w	r3, r7, #16
 8010bc0:	2232      	movs	r2, #50	@ 0x32
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	f7fe fce3 	bl	800f590 <receiveString>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010bca:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010bce:	f7ef fb67 	bl	80002a0 <strlen>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	b29a      	uxth	r2, r3
 8010bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010bda:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010bde:	4890      	ldr	r0, [pc, #576]	@ (8010e20 <run_co2_calibration_routine+0x2fc>)
 8010be0:	f7fb fb32 	bl	800c248 <HAL_UART_Transmit>
				1000);

		if (strstr(buffer, "y")) {
 8010be4:	f107 0310 	add.w	r3, r7, #16
 8010be8:	2179      	movs	r1, #121	@ 0x79
 8010bea:	4618      	mov	r0, r3
 8010bec:	f00e f886 	bl	801ecfc <strchr>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d007      	beq.n	8010c06 <run_co2_calibration_routine+0xe2>
			calib = 1;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

			cli_printf(cli, "Calibration routine running");
 8010bfc:	4989      	ldr	r1, [pc, #548]	@ (8010e24 <run_co2_calibration_routine+0x300>)
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f7fe fc84 	bl	800f50c <cli_printf>
 8010c04:	e00f      	b.n	8010c26 <run_co2_calibration_routine+0x102>
		} else if (strstr(buffer, "n")) {
 8010c06:	f107 0310 	add.w	r3, r7, #16
 8010c0a:	216e      	movs	r1, #110	@ 0x6e
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f00e f875 	bl	801ecfc <strchr>
 8010c12:	4603      	mov	r3, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d006      	beq.n	8010c26 <run_co2_calibration_routine+0x102>
			calib = 0;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			cli_printf(cli, "Calibration routine aborted");
 8010c1e:	4982      	ldr	r1, [pc, #520]	@ (8010e28 <run_co2_calibration_routine+0x304>)
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7fe fc73 	bl	800f50c <cli_printf>
		}


		if(calib)
 8010c26:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	f000 8141 	beq.w	8010eb2 <run_co2_calibration_routine+0x38e>
		{
			if (!_RunTime_Packet.scd4x_i2c_error) {
 8010c30:	4b7e      	ldr	r3, [pc, #504]	@ (8010e2c <run_co2_calibration_routine+0x308>)
 8010c32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d102      	bne.n	8010c40 <run_co2_calibration_routine+0x11c>
				scd30_start_periodic_measurement(0);
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	f003 fb90 	bl	8014360 <scd30_start_periodic_measurement>
			}
			cli_printf(cli,"");
 8010c40:	4973      	ldr	r1, [pc, #460]	@ (8010e10 <run_co2_calibration_routine+0x2ec>)
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f7fe fc62 	bl	800f50c <cli_printf>
			cli_printf(cli,"GuideLines");
 8010c48:	4979      	ldr	r1, [pc, #484]	@ (8010e30 <run_co2_calibration_routine+0x30c>)
 8010c4a:	68f8      	ldr	r0, [r7, #12]
 8010c4c:	f7fe fc5e 	bl	800f50c <cli_printf>
			cli_printf(cli,"");
 8010c50:	496f      	ldr	r1, [pc, #444]	@ (8010e10 <run_co2_calibration_routine+0x2ec>)
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f7fe fc5a 	bl	800f50c <cli_printf>
			cli_printf(cli,"1)Donot remove USB, otherwise calibrations will be canceled. ");
 8010c58:	4976      	ldr	r1, [pc, #472]	@ (8010e34 <run_co2_calibration_routine+0x310>)
 8010c5a:	68f8      	ldr	r0, [r7, #12]
 8010c5c:	f7fe fc56 	bl	800f50c <cli_printf>
			cli_printf(cli,"2)Expose the sensor to a controlled environment with a known value of Co2. ");
 8010c60:	4975      	ldr	r1, [pc, #468]	@ (8010e38 <run_co2_calibration_routine+0x314>)
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f7fe fc52 	bl	800f50c <cli_printf>
			cli_printf(cli,"3)After 2min, apply known value of Co2. ");
 8010c68:	4974      	ldr	r1, [pc, #464]	@ (8010e3c <run_co2_calibration_routine+0x318>)
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f7fe fc4e 	bl	800f50c <cli_printf>
			cli_printf(cli,"4)Calibration routine finished. ");
 8010c70:	4973      	ldr	r1, [pc, #460]	@ (8010e40 <run_co2_calibration_routine+0x31c>)
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f7fe fc4a 	bl	800f50c <cli_printf>
			memset(buffer, '\0', sizeof(buffer));
 8010c78:	f107 0310 	add.w	r3, r7, #16
 8010c7c:	2232      	movs	r2, #50	@ 0x32
 8010c7e:	2100      	movs	r1, #0
 8010c80:	4618      	mov	r0, r3
 8010c82:	f00e f833 	bl	801ecec <memset>

			 prev_maxTime =  HAL_GetTick();
 8010c86:	f7f3 fa3f 	bl	8004108 <HAL_GetTick>
 8010c8a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
				cur_tick = HAL_GetTick();
 8010c8e:	f7f3 fa3b 	bl	8004108 <HAL_GetTick>
 8010c92:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
				cli_printf(cli,"");
 8010c96:	495e      	ldr	r1, [pc, #376]	@ (8010e10 <run_co2_calibration_routine+0x2ec>)
 8010c98:	68f8      	ldr	r0, [r7, #12]
 8010c9a:	f7fe fc37 	bl	800f50c <cli_printf>
				cli_printf(cli,"");
 8010c9e:	495c      	ldr	r1, [pc, #368]	@ (8010e10 <run_co2_calibration_routine+0x2ec>)
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f7fe fc33 	bl	800f50c <cli_printf>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) progressbar_buf, strlen(progressbar_buf),
 8010ca6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7ef faf8 	bl	80002a0 <strlen>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	b29a      	uxth	r2, r3
 8010cb4:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8010cb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cbc:	4858      	ldr	r0, [pc, #352]	@ (8010e20 <run_co2_calibration_routine+0x2fc>)
 8010cbe:	f7fb fac3 	bl	800c248 <HAL_UART_Transmit>
									1000);
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010cc2:	e01e      	b.n	8010d02 <run_co2_calibration_routine+0x1de>

					if ((HAL_GetTick() - cur_tick > 5000)) {
 8010cc4:	f7f3 fa20 	bl	8004108 <HAL_GetTick>
 8010cc8:	4602      	mov	r2, r0
 8010cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d90a      	bls.n	8010cee <run_co2_calibration_routine+0x1ca>


							HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*)"##", 2,
 8010cd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010cdc:	2202      	movs	r2, #2
 8010cde:	4959      	ldr	r1, [pc, #356]	@ (8010e44 <run_co2_calibration_routine+0x320>)
 8010ce0:	484f      	ldr	r0, [pc, #316]	@ (8010e20 <run_co2_calibration_routine+0x2fc>)
 8010ce2:	f7fb fab1 	bl	800c248 <HAL_UART_Transmit>
									1000);
							cur_tick = HAL_GetTick();
 8010ce6:	f7f3 fa0f 	bl	8004108 <HAL_GetTick>
 8010cea:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
						}

			        if ((HAL_GetTick() - prev_maxTime > maxTime)) {
 8010cee:	f7f3 fa0b 	bl	8004108 <HAL_GetTick>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010cf8:	1ad3      	subs	r3, r2, r3
 8010cfa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d308      	bcc.n	8010d14 <run_co2_calibration_routine+0x1f0>
			 while (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8010d02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010d06:	4850      	ldr	r0, [pc, #320]	@ (8010e48 <run_co2_calibration_routine+0x324>)
 8010d08:	f7f5 f9ca 	bl	80060a0 <HAL_GPIO_ReadPin>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d1d8      	bne.n	8010cc4 <run_co2_calibration_routine+0x1a0>
 8010d12:	e000      	b.n	8010d16 <run_co2_calibration_routine+0x1f2>
					//we break the loop if time goes above 5min
					break;
 8010d14:	bf00      	nop
				}

			}

			 cli_printf(cli,"");
 8010d16:	493e      	ldr	r1, [pc, #248]	@ (8010e10 <run_co2_calibration_routine+0x2ec>)
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f7fe fbf7 	bl	800f50c <cli_printf>
			 cli_printf(cli,"");
 8010d1e:	493c      	ldr	r1, [pc, #240]	@ (8010e10 <run_co2_calibration_routine+0x2ec>)
 8010d20:	68f8      	ldr	r0, [r7, #12]
 8010d22:	f7fe fbf3 	bl	800f50c <cli_printf>
			 cli_printf(cli,"");
 8010d26:	493a      	ldr	r1, [pc, #232]	@ (8010e10 <run_co2_calibration_routine+0x2ec>)
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f7fe fbef 	bl	800f50c <cli_printf>
			 cli_printf(cli,"Enter Known Co2 reference value!");
 8010d2e:	4947      	ldr	r1, [pc, #284]	@ (8010e4c <run_co2_calibration_routine+0x328>)
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f7fe fbeb 	bl	800f50c <cli_printf>

				receiveString(cli, buffer, sizeof(buffer));
 8010d36:	f107 0310 	add.w	r3, r7, #16
 8010d3a:	2232      	movs	r2, #50	@ 0x32
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f7fe fc26 	bl	800f590 <receiveString>
				HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010d44:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010d48:	f7ef faaa 	bl	80002a0 <strlen>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010d54:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010d58:	4831      	ldr	r0, [pc, #196]	@ (8010e20 <run_co2_calibration_routine+0x2fc>)
 8010d5a:	f7fb fa75 	bl	800c248 <HAL_UART_Transmit>
						1000);

				if (buffer[0] != '\0') {
 8010d5e:	7c3b      	ldrb	r3, [r7, #16]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d01e      	beq.n	8010da2 <run_co2_calibration_routine+0x27e>
					_RunTime_Packet.CO2_calibration = 1;
 8010d64:	4b31      	ldr	r3, [pc, #196]	@ (8010e2c <run_co2_calibration_routine+0x308>)
 8010d66:	2201      	movs	r2, #1
 8010d68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

					val = atoi(buffer);
 8010d6c:	f107 0310 	add.w	r3, r7, #16
 8010d70:	4618      	mov	r0, r3
 8010d72:	f00c fd39 	bl	801d7e8 <atoi>
 8010d76:	4603      	mov	r3, r0
 8010d78:	67bb      	str	r3, [r7, #120]	@ 0x78

					if (val < 65535) {
 8010d7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d7c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d803      	bhi.n	8010d8c <run_co2_calibration_routine+0x268>
						_RunTime_Packet._target_co2_concentration = val;
 8010d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d86:	b29a      	uxth	r2, r3
 8010d88:	4b28      	ldr	r3, [pc, #160]	@ (8010e2c <run_co2_calibration_routine+0x308>)
 8010d8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
					}

					cli_printf(cli,
							"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
							_RunTime_Packet._target_co2_concentration);
 8010d8c:	4b27      	ldr	r3, [pc, #156]	@ (8010e2c <run_co2_calibration_routine+0x308>)
 8010d8e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
					cli_printf(cli,
 8010d90:	461a      	mov	r2, r3
 8010d92:	492f      	ldr	r1, [pc, #188]	@ (8010e50 <run_co2_calibration_routine+0x32c>)
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f7fe fbb9 	bl	800f50c <cli_printf>
					do_Calibration = 1;
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 8010da0:	e00a      	b.n	8010db8 <run_co2_calibration_routine+0x294>
				} else {
					cli_printf(cli, "Co2 sensor Calibration aborted. No value provided");
 8010da2:	492c      	ldr	r1, [pc, #176]	@ (8010e54 <run_co2_calibration_routine+0x330>)
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f7fe fbb1 	bl	800f50c <cli_printf>
					_RunTime_Packet.CO2_calibration = 0;
 8010daa:	4b20      	ldr	r3, [pc, #128]	@ (8010e2c <run_co2_calibration_routine+0x308>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
					do_Calibration = 0;
 8010db2:	2300      	movs	r3, #0
 8010db4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
				}

				if (do_Calibration == 1) {
 8010db8:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d178      	bne.n	8010eb2 <run_co2_calibration_routine+0x38e>
					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010dc0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010dc4:	f7ef fa6c 	bl	80002a0 <strlen>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010dd0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010dd4:	4812      	ldr	r0, [pc, #72]	@ (8010e20 <run_co2_calibration_routine+0x2fc>)
 8010dd6:	f7fb fa37 	bl	800c248 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Co2 is calibrating, please wait.");
 8010dda:	491f      	ldr	r1, [pc, #124]	@ (8010e58 <run_co2_calibration_routine+0x334>)
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f7fe fb95 	bl	800f50c <cli_printf>
					if (!_RunTime_Packet.scd4x_i2c_error) {
 8010de2:	4b12      	ldr	r3, [pc, #72]	@ (8010e2c <run_co2_calibration_routine+0x308>)
 8010de4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d14d      	bne.n	8010e88 <run_co2_calibration_routine+0x364>
			#ifdef use_scd40x
						scd4x_perform_forced_recalibration(
								_RunTime_Packet._target_co2_concentration,
								&_RunTime_Packet._frc_correction);
			#elif use_scd30
					scd30_force_recalibration(_RunTime_Packet._target_co2_concentration);
 8010dec:	4b0f      	ldr	r3, [pc, #60]	@ (8010e2c <run_co2_calibration_routine+0x308>)
 8010dee:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8010df0:	4618      	mov	r0, r3
 8010df2:	f003 fca3 	bl	801473c <scd30_force_recalibration>
			#endif
					}
					while (counter < 8) {
 8010df6:	e047      	b.n	8010e88 <run_co2_calibration_routine+0x364>
 8010df8:	0001d4c0 	.word	0x0001d4c0
 8010dfc:	080223a4 	.word	0x080223a4
 8010e00:	08022900 	.word	0x08022900
 8010e04:	080230ec 	.word	0x080230ec
 8010e08:	20001b3a 	.word	0x20001b3a
 8010e0c:	20001b3b 	.word	0x20001b3b
 8010e10:	08022ed4 	.word	0x08022ed4
 8010e14:	08022ed8 	.word	0x08022ed8
 8010e18:	08022f08 	.word	0x08022f08
 8010e1c:	08022f40 	.word	0x08022f40
 8010e20:	20001a74 	.word	0x20001a74
 8010e24:	08022f70 	.word	0x08022f70
 8010e28:	08022f8c 	.word	0x08022f8c
 8010e2c:	20001530 	.word	0x20001530
 8010e30:	08022fa8 	.word	0x08022fa8
 8010e34:	08022fb4 	.word	0x08022fb4
 8010e38:	08022ff4 	.word	0x08022ff4
 8010e3c:	08023040 	.word	0x08023040
 8010e40:	0802306c 	.word	0x0802306c
 8010e44:	08023090 	.word	0x08023090
 8010e48:	40020000 	.word	0x40020000
 8010e4c:	08023094 	.word	0x08023094
 8010e50:	08022a54 	.word	0x08022a54
 8010e54:	080230b8 	.word	0x080230b8
 8010e58:	08022ac4 	.word	0x08022ac4
						HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 8010e5c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8010e5e:	f7ef fa1f 	bl	80002a0 <strlen>
 8010e62:	4603      	mov	r3, r0
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010e6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010e6c:	4816      	ldr	r0, [pc, #88]	@ (8010ec8 <run_co2_calibration_routine+0x3a4>)
 8010e6e:	f7fb f9eb 	bl	800c248 <HAL_UART_Transmit>
								1000);
						HAL_Delay(1000);
 8010e72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010e76:	f7f3 f953 	bl	8004120 <HAL_Delay>
						toggle_blue_led();
 8010e7a:	f7f0 f91f 	bl	80010bc <toggle_blue_led>
						counter++;
 8010e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010e82:	3301      	adds	r3, #1
 8010e84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
					while (counter < 8) {
 8010e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010e8c:	2b07      	cmp	r3, #7
 8010e8e:	dde5      	ble.n	8010e5c <run_co2_calibration_routine+0x338>
					}

					HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010e90:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010e94:	f7ef fa04 	bl	80002a0 <strlen>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	b29a      	uxth	r2, r3
 8010e9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010ea0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8010ea4:	4808      	ldr	r0, [pc, #32]	@ (8010ec8 <run_co2_calibration_routine+0x3a4>)
 8010ea6:	f7fb f9cf 	bl	800c248 <HAL_UART_Transmit>
							1000);
					cli_printf(cli, "Sensor calibration done.");
 8010eaa:	4908      	ldr	r1, [pc, #32]	@ (8010ecc <run_co2_calibration_routine+0x3a8>)
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f7fe fb2d 	bl	800f50c <cli_printf>
		}




		flag_cli = 0;
 8010eb2:	4b07      	ldr	r3, [pc, #28]	@ (8010ed0 <run_co2_calibration_routine+0x3ac>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	701a      	strb	r2, [r3, #0]
			cli_other = 0;
 8010eb8:	4b06      	ldr	r3, [pc, #24]	@ (8010ed4 <run_co2_calibration_routine+0x3b0>)
 8010eba:	2200      	movs	r2, #0
 8010ebc:	701a      	strb	r2, [r3, #0]

}
 8010ebe:	bf00      	nop
 8010ec0:	379c      	adds	r7, #156	@ 0x9c
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd90      	pop	{r4, r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	20001a74 	.word	0x20001a74
 8010ecc:	08022ae8 	.word	0x08022ae8
 8010ed0:	20001b3b 	.word	0x20001b3b
 8010ed4:	20001b3a 	.word	0x20001b3a

08010ed8 <set_co2_samples>:


void set_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b092      	sub	sp, #72	@ 0x48
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8010ee4:	4b35      	ldr	r3, [pc, #212]	@ (8010fbc <set_co2_samples+0xe4>)
 8010ee6:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 8010ee8:	4935      	ldr	r1, [pc, #212]	@ (8010fc0 <set_co2_samples+0xe8>)
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f7fe fb0e 	bl	800f50c <cli_printf>
	cli_printf(cli, "Disclaimer: Increase in Samples number also reduces battery life.");
 8010ef0:	4934      	ldr	r1, [pc, #208]	@ (8010fc4 <set_co2_samples+0xec>)
 8010ef2:	68f8      	ldr	r0, [r7, #12]
 8010ef4:	f7fe fb0a 	bl	800f50c <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010ef8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010efa:	f7ef f9d1 	bl	80002a0 <strlen>
 8010efe:	4603      	mov	r3, r0
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010f08:	482f      	ldr	r0, [pc, #188]	@ (8010fc8 <set_co2_samples+0xf0>)
 8010f0a:	f7fb f99d 	bl	800c248 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter the number of Samples: ");
 8010f0e:	492f      	ldr	r1, [pc, #188]	@ (8010fcc <set_co2_samples+0xf4>)
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f7fe fafb 	bl	800f50c <cli_printf>

	uint16_t val;
	cli_other = 1;
 8010f16:	4b2e      	ldr	r3, [pc, #184]	@ (8010fd0 <set_co2_samples+0xf8>)
 8010f18:	2201      	movs	r2, #1
 8010f1a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 8010f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8010fd4 <set_co2_samples+0xfc>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 8010f22:	f107 0310 	add.w	r3, r7, #16
 8010f26:	2232      	movs	r2, #50	@ 0x32
 8010f28:	2100      	movs	r1, #0
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f00d fede 	bl	801ecec <memset>
	receiveString(cli, buffer, sizeof(buffer));
 8010f30:	f107 0310 	add.w	r3, r7, #16
 8010f34:	2232      	movs	r2, #50	@ 0x32
 8010f36:	4619      	mov	r1, r3
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f7fe fb29 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 8010f3e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010f40:	f7ef f9ae 	bl	80002a0 <strlen>
 8010f44:	4603      	mov	r3, r0
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010f4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010f4e:	481e      	ldr	r0, [pc, #120]	@ (8010fc8 <set_co2_samples+0xf0>)
 8010f50:	f7fb f97a 	bl	800c248 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 8010f54:	7c3b      	ldrb	r3, [r7, #16]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d022      	beq.n	8010fa0 <set_co2_samples+0xc8>

		val = atoi(buffer);
 8010f5a:	f107 0310 	add.w	r3, r7, #16
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f00c fc42 	bl	801d7e8 <atoi>
 8010f64:	4603      	mov	r3, r0
 8010f66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

			if (val < 65535) {
 8010f6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f72:	4293      	cmp	r3, r2
 8010f74:	d004      	beq.n	8010f80 <set_co2_samples+0xa8>
				_Flash_Packet.co2_samples = val;
 8010f76:	4b18      	ldr	r3, [pc, #96]	@ (8010fd8 <set_co2_samples+0x100>)
 8010f78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f7c:	f8a3 225d 	strh.w	r2, [r3, #605]	@ 0x25d
			}

		cli_printf(cli, "Samples: %d", _Flash_Packet.co2_samples);
 8010f80:	4b15      	ldr	r3, [pc, #84]	@ (8010fd8 <set_co2_samples+0x100>)
 8010f82:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	461a      	mov	r2, r3
 8010f8a:	4914      	ldr	r1, [pc, #80]	@ (8010fdc <set_co2_samples+0x104>)
 8010f8c:	68f8      	ldr	r0, [r7, #12]
 8010f8e:	f7fe fabd 	bl	800f50c <cli_printf>
		set_param_flags();
 8010f92:	4b13      	ldr	r3, [pc, #76]	@ (8010fe0 <set_co2_samples+0x108>)
 8010f94:	2201      	movs	r2, #1
 8010f96:	701a      	strb	r2, [r3, #0]
 8010f98:	4b12      	ldr	r3, [pc, #72]	@ (8010fe4 <set_co2_samples+0x10c>)
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	701a      	strb	r2, [r3, #0]
 8010f9e:	e003      	b.n	8010fa8 <set_co2_samples+0xd0>
	}
	else
	{
		cli_printf(cli, "No Value provided, operation aborted!");
 8010fa0:	4911      	ldr	r1, [pc, #68]	@ (8010fe8 <set_co2_samples+0x110>)
 8010fa2:	68f8      	ldr	r0, [r7, #12]
 8010fa4:	f7fe fab2 	bl	800f50c <cli_printf>
	}

	flag_cli = 0;
 8010fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8010fd4 <set_co2_samples+0xfc>)
 8010faa:	2200      	movs	r2, #0
 8010fac:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010fae:	4b08      	ldr	r3, [pc, #32]	@ (8010fd0 <set_co2_samples+0xf8>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	701a      	strb	r2, [r3, #0]

}
 8010fb4:	bf00      	nop
 8010fb6:	3748      	adds	r7, #72	@ 0x48
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	080223a4 	.word	0x080223a4
 8010fc0:	08022418 	.word	0x08022418
 8010fc4:	080230fc 	.word	0x080230fc
 8010fc8:	20001a74 	.word	0x20001a74
 8010fcc:	08023140 	.word	0x08023140
 8010fd0:	20001b3a 	.word	0x20001b3a
 8010fd4:	20001b3b 	.word	0x20001b3b
 8010fd8:	200012cc 	.word	0x200012cc
 8010fdc:	08023160 	.word	0x08023160
 8010fe0:	20001579 	.word	0x20001579
 8010fe4:	2000157a 	.word	0x2000157a
 8010fe8:	0802316c 	.word	0x0802316c

08010fec <get_co2_samples>:

void get_co2_samples(EmbeddedCli *cli, char *args, void *context)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Co2 Samples: %d", _Flash_Packet.co2_samples);
 8010ff8:	4b06      	ldr	r3, [pc, #24]	@ (8011014 <get_co2_samples+0x28>)
 8010ffa:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	461a      	mov	r2, r3
 8011002:	4905      	ldr	r1, [pc, #20]	@ (8011018 <get_co2_samples+0x2c>)
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f7fe fa81 	bl	800f50c <cli_printf>
}
 801100a:	bf00      	nop
 801100c:	3710      	adds	r7, #16
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
 8011012:	bf00      	nop
 8011014:	200012cc 	.word	0x200012cc
 8011018:	08023194 	.word	0x08023194

0801101c <SystemRestart>:


void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 801101c:	b580      	push	{r7, lr}
 801101e:	b092      	sub	sp, #72	@ 0x48
 8011020:	af00      	add	r7, sp, #0
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 8011028:	4b22      	ldr	r3, [pc, #136]	@ (80110b4 <SystemRestart+0x98>)
 801102a:	647b      	str	r3, [r7, #68]	@ 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 801102c:	4922      	ldr	r1, [pc, #136]	@ (80110b8 <SystemRestart+0x9c>)
 801102e:	68f8      	ldr	r0, [r7, #12]
 8011030:	f7fe fa6c 	bl	800f50c <cli_printf>

	cli_other = 1;
 8011034:	4b21      	ldr	r3, [pc, #132]	@ (80110bc <SystemRestart+0xa0>)
 8011036:	2201      	movs	r2, #1
 8011038:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 801103a:	4b21      	ldr	r3, [pc, #132]	@ (80110c0 <SystemRestart+0xa4>)
 801103c:	2200      	movs	r2, #0
 801103e:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 8011040:	f107 0310 	add.w	r3, r7, #16
 8011044:	2232      	movs	r2, #50	@ 0x32
 8011046:	4619      	mov	r1, r3
 8011048:	68f8      	ldr	r0, [r7, #12]
 801104a:	f7fe faa1 	bl	800f590 <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 801104e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011050:	f7ef f926 	bl	80002a0 <strlen>
 8011054:	4603      	mov	r3, r0
 8011056:	b29a      	uxth	r2, r3
 8011058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801105c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801105e:	4819      	ldr	r0, [pc, #100]	@ (80110c4 <SystemRestart+0xa8>)
 8011060:	f7fb f8f2 	bl	800c248 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 8011064:	f107 0310 	add.w	r3, r7, #16
 8011068:	2179      	movs	r1, #121	@ 0x79
 801106a:	4618      	mov	r0, r3
 801106c:	f00d fe46 	bl	801ecfc <strchr>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d006      	beq.n	8011084 <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 8011076:	4914      	ldr	r1, [pc, #80]	@ (80110c8 <SystemRestart+0xac>)
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	f7fe fa47 	bl	800f50c <cli_printf>
		HAL_NVIC_SystemReset();
 801107e:	f7f3 fe5e 	bl	8004d3e <HAL_NVIC_SystemReset>
 8011082:	e00c      	b.n	801109e <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 8011084:	f107 0310 	add.w	r3, r7, #16
 8011088:	216e      	movs	r1, #110	@ 0x6e
 801108a:	4618      	mov	r0, r3
 801108c:	f00d fe36 	bl	801ecfc <strchr>
 8011090:	4603      	mov	r3, r0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d003      	beq.n	801109e <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 8011096:	490d      	ldr	r1, [pc, #52]	@ (80110cc <SystemRestart+0xb0>)
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	f7fe fa37 	bl	800f50c <cli_printf>
	}

	flag_cli = 0;
 801109e:	4b08      	ldr	r3, [pc, #32]	@ (80110c0 <SystemRestart+0xa4>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 80110a4:	4b05      	ldr	r3, [pc, #20]	@ (80110bc <SystemRestart+0xa0>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	701a      	strb	r2, [r3, #0]
}
 80110aa:	bf00      	nop
 80110ac:	3748      	adds	r7, #72	@ 0x48
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	080223a4 	.word	0x080223a4
 80110b8:	080231a4 	.word	0x080231a4
 80110bc:	20001b3a 	.word	0x20001b3a
 80110c0:	20001b3b 	.word	0x20001b3b
 80110c4:	20001a74 	.word	0x20001a74
 80110c8:	080231cc 	.word	0x080231cc
 80110cc:	080231e8 	.word	0x080231e8

080110d0 <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b084      	sub	sp, #16
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80110dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011108 <Co2Level+0x38>)
 80110de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d101      	bne.n	80110ea <Co2Level+0x1a>


#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 80110e6:	f7f0 faf3 	bl	80016d0 <get_scd30_measurement_>
#endif
	}
#ifdef use_scd40x
	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
#elif use_scd30
	cli_printf(cli, "Co2 Value: %.2f", _RunTime_Packet.co2);
 80110ea:	4b07      	ldr	r3, [pc, #28]	@ (8011108 <Co2Level+0x38>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7ef fa42 	bl	8000578 <__aeabi_f2d>
 80110f4:	4602      	mov	r2, r0
 80110f6:	460b      	mov	r3, r1
 80110f8:	4904      	ldr	r1, [pc, #16]	@ (801110c <Co2Level+0x3c>)
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f7fe fa06 	bl	800f50c <cli_printf>
#endif
}
 8011100:	bf00      	nop
 8011102:	3710      	adds	r7, #16
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	20001530 	.word	0x20001530
 801110c:	08023200 	.word	0x08023200

08011110 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801111c:	4b0a      	ldr	r3, [pc, #40]	@ (8011148 <TempLevel+0x38>)
 801111e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011122:	2b00      	cmp	r3, #0
 8011124:	d101      	bne.n	801112a <TempLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 8011126:	f7f0 fad3 	bl	80016d0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
#elif use_scd30
	cli_printf(cli, "Temperature Value: %.2fC ", _RunTime_Packet.temperature);
 801112a:	4b07      	ldr	r3, [pc, #28]	@ (8011148 <TempLevel+0x38>)
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	4618      	mov	r0, r3
 8011130:	f7ef fa22 	bl	8000578 <__aeabi_f2d>
 8011134:	4602      	mov	r2, r0
 8011136:	460b      	mov	r3, r1
 8011138:	4904      	ldr	r1, [pc, #16]	@ (801114c <TempLevel+0x3c>)
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f7fe f9e6 	bl	800f50c <cli_printf>
#endif
}
 8011140:	bf00      	nop
 8011142:	3710      	adds	r7, #16
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}
 8011148:	20001530 	.word	0x20001530
 801114c:	08023210 	.word	0x08023210

08011150 <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 801115c:	4b0a      	ldr	r3, [pc, #40]	@ (8011188 <HumidLevel+0x38>)
 801115e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011162:	2b00      	cmp	r3, #0
 8011164:	d101      	bne.n	801116a <HumidLevel+0x1a>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	get_scd30_measurement_();
 8011166:	f7f0 fab3 	bl	80016d0 <get_scd30_measurement_>


#ifdef use_scd40x
	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, "Humidity Value: %.2f ", _RunTime_Packet.humidity);
 801116a:	4b07      	ldr	r3, [pc, #28]	@ (8011188 <HumidLevel+0x38>)
 801116c:	689b      	ldr	r3, [r3, #8]
 801116e:	4618      	mov	r0, r3
 8011170:	f7ef fa02 	bl	8000578 <__aeabi_f2d>
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	4904      	ldr	r1, [pc, #16]	@ (801118c <HumidLevel+0x3c>)
 801117a:	68f8      	ldr	r0, [r7, #12]
 801117c:	f7fe f9c6 	bl	800f50c <cli_printf>
#endif
}
 8011180:	bf00      	nop
 8011182:	3710      	adds	r7, #16
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	20001530 	.word	0x20001530
 801118c:	0802322c 	.word	0x0802322c

08011190 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 801119c:	491f      	ldr	r1, [pc, #124]	@ (801121c <MotionDetection+0x8c>)
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f7fe f9b4 	bl	800f50c <cli_printf>
	HAL_Delay(2000);
 80111a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80111a8:	f7f2 ffba 	bl	8004120 <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 80111ac:	f7f2 ffac 	bl	8004108 <HAL_GetTick>
 80111b0:	4603      	mov	r3, r0
 80111b2:	4a1b      	ldr	r2, [pc, #108]	@ (8011220 <MotionDetection+0x90>)
 80111b4:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 80111b6:	4b1b      	ldr	r3, [pc, #108]	@ (8011224 <MotionDetection+0x94>)
 80111b8:	2200      	movs	r2, #0
 80111ba:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80111bc:	e01c      	b.n	80111f8 <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80111be:	2101      	movs	r1, #1
 80111c0:	4819      	ldr	r0, [pc, #100]	@ (8011228 <MotionDetection+0x98>)
 80111c2:	f7f4 ff6d 	bl	80060a0 <HAL_GPIO_ReadPin>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d003      	beq.n	80111d4 <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 80111cc:	4b17      	ldr	r3, [pc, #92]	@ (801122c <MotionDetection+0x9c>)
 80111ce:	2201      	movs	r2, #1
 80111d0:	731a      	strb	r2, [r3, #12]
 80111d2:	e002      	b.n	80111da <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 80111d4:	4b15      	ldr	r3, [pc, #84]	@ (801122c <MotionDetection+0x9c>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80111da:	4b14      	ldr	r3, [pc, #80]	@ (801122c <MotionDetection+0x9c>)
 80111dc:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d101      	bne.n	80111e6 <MotionDetection+0x56>
 80111e2:	4b13      	ldr	r3, [pc, #76]	@ (8011230 <MotionDetection+0xa0>)
 80111e4:	e000      	b.n	80111e8 <MotionDetection+0x58>
 80111e6:	4b13      	ldr	r3, [pc, #76]	@ (8011234 <MotionDetection+0xa4>)
 80111e8:	461a      	mov	r2, r3
 80111ea:	4913      	ldr	r1, [pc, #76]	@ (8011238 <MotionDetection+0xa8>)
 80111ec:	68f8      	ldr	r0, [r7, #12]
 80111ee:	f7fe f98d 	bl	800f50c <cli_printf>
//	         	}
		HAL_Delay(100);
 80111f2:	2064      	movs	r0, #100	@ 0x64
 80111f4:	f7f2 ff94 	bl	8004120 <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80111f8:	f7f2 ff86 	bl	8004108 <HAL_GetTick>
 80111fc:	4602      	mov	r2, r0
 80111fe:	4b08      	ldr	r3, [pc, #32]	@ (8011220 <MotionDetection+0x90>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	1ad2      	subs	r2, r2, r3
 8011204:	4b0d      	ldr	r3, [pc, #52]	@ (801123c <MotionDetection+0xac>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	429a      	cmp	r2, r3
 801120a:	d3d8      	bcc.n	80111be <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 801120c:	490c      	ldr	r1, [pc, #48]	@ (8011240 <MotionDetection+0xb0>)
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f7fe f97c 	bl	800f50c <cli_printf>

}
 8011214:	bf00      	nop
 8011216:	3710      	adds	r7, #16
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	08023244 	.word	0x08023244
 8011220:	20001b34 	.word	0x20001b34
 8011224:	20001b3c 	.word	0x20001b3c
 8011228:	40020000 	.word	0x40020000
 801122c:	20001530 	.word	0x20001530
 8011230:	0802327c 	.word	0x0802327c
 8011234:	08023284 	.word	0x08023284
 8011238:	0802328c 	.word	0x0802328c
 801123c:	20000020 	.word	0x20000020
 8011240:	080232a0 	.word	0x080232a0

08011244 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 8011244:	b580      	push	{r7, lr}
 8011246:	b084      	sub	sp, #16
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 8011250:	4922      	ldr	r1, [pc, #136]	@ (80112dc <AirQuality+0x98>)
 8011252:	68f8      	ldr	r0, [r7, #12]
 8011254:	f7fe f95a 	bl	800f50c <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8011258:	4b21      	ldr	r3, [pc, #132]	@ (80112e0 <AirQuality+0x9c>)
 801125a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801125e:	2b00      	cmp	r3, #0
 8011260:	d104      	bne.n	801126c <AirQuality+0x28>
 8011262:	4b1f      	ldr	r3, [pc, #124]	@ (80112e0 <AirQuality+0x9c>)
 8011264:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011268:	2b00      	cmp	r3, #0
 801126a:	d004      	beq.n	8011276 <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 801126c:	491d      	ldr	r1, [pc, #116]	@ (80112e4 <AirQuality+0xa0>)
 801126e:	68f8      	ldr	r0, [r7, #12]
 8011270:	f7fe f94c 	bl	800f50c <cli_printf>
 8011274:	e02e      	b.n	80112d4 <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 8011276:	f7f0 fae9 	bl	800184c <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 801127a:	4b19      	ldr	r3, [pc, #100]	@ (80112e0 <AirQuality+0x9c>)
 801127c:	691b      	ldr	r3, [r3, #16]
 801127e:	4618      	mov	r0, r3
 8011280:	f7ef f97a 	bl	8000578 <__aeabi_f2d>
 8011284:	4602      	mov	r2, r0
 8011286:	460b      	mov	r3, r1
 8011288:	4917      	ldr	r1, [pc, #92]	@ (80112e8 <AirQuality+0xa4>)
 801128a:	68f8      	ldr	r0, [r7, #12]
 801128c:	f7fe f93e 	bl	800f50c <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 8011290:	4b13      	ldr	r3, [pc, #76]	@ (80112e0 <AirQuality+0x9c>)
 8011292:	695b      	ldr	r3, [r3, #20]
 8011294:	4618      	mov	r0, r3
 8011296:	f7ef f96f 	bl	8000578 <__aeabi_f2d>
 801129a:	4602      	mov	r2, r0
 801129c:	460b      	mov	r3, r1
 801129e:	4913      	ldr	r1, [pc, #76]	@ (80112ec <AirQuality+0xa8>)
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f7fe f933 	bl	800f50c <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 80112a6:	4b0e      	ldr	r3, [pc, #56]	@ (80112e0 <AirQuality+0x9c>)
 80112a8:	699b      	ldr	r3, [r3, #24]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ef f964 	bl	8000578 <__aeabi_f2d>
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	490e      	ldr	r1, [pc, #56]	@ (80112f0 <AirQuality+0xac>)
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	f7fe f928 	bl	800f50c <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 80112bc:	4b08      	ldr	r3, [pc, #32]	@ (80112e0 <AirQuality+0x9c>)
 80112be:	69db      	ldr	r3, [r3, #28]
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ef f959 	bl	8000578 <__aeabi_f2d>
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	490a      	ldr	r1, [pc, #40]	@ (80112f4 <AirQuality+0xb0>)
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f7fe f91d 	bl	800f50c <cli_printf>
	}

}
 80112d2:	bf00      	nop
 80112d4:	bf00      	nop
 80112d6:	3710      	adds	r7, #16
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	080232b0 	.word	0x080232b0
 80112e0:	20001530 	.word	0x20001530
 80112e4:	080232cc 	.word	0x080232cc
 80112e8:	080232ec 	.word	0x080232ec
 80112ec:	080232f8 	.word	0x080232f8
 80112f0:	08023308 	.word	0x08023308
 80112f4:	08023318 	.word	0x08023318

080112f8 <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	60f8      	str	r0, [r7, #12]
 8011300:	60b9      	str	r1, [r7, #8]
 8011302:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8011304:	4808      	ldr	r0, [pc, #32]	@ (8011328 <BattVolt+0x30>)
 8011306:	f002 ff23 	bl	8014150 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 801130a:	4b08      	ldr	r3, [pc, #32]	@ (801132c <BattVolt+0x34>)
 801130c:	6a1b      	ldr	r3, [r3, #32]
 801130e:	4618      	mov	r0, r3
 8011310:	f7ef f932 	bl	8000578 <__aeabi_f2d>
 8011314:	4602      	mov	r2, r0
 8011316:	460b      	mov	r3, r1
 8011318:	4905      	ldr	r1, [pc, #20]	@ (8011330 <BattVolt+0x38>)
 801131a:	68f8      	ldr	r0, [r7, #12]
 801131c:	f7fe f8f6 	bl	800f50c <cli_printf>

}
 8011320:	bf00      	nop
 8011322:	3710      	adds	r7, #16
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	20001550 	.word	0x20001550
 801132c:	20001530 	.word	0x20001530
 8011330:	08023328 	.word	0x08023328

08011334 <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 8011340:	4903      	ldr	r1, [pc, #12]	@ (8011350 <port+0x1c>)
 8011342:	68f8      	ldr	r0, [r7, #12]
 8011344:	f7fe f8e2 	bl	800f50c <cli_printf>
}
 8011348:	bf00      	nop
 801134a:	3710      	adds	r7, #16
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	08023340 	.word	0x08023340

08011354 <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 8011354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011356:	b0bb      	sub	sp, #236	@ 0xec
 8011358:	af06      	add	r7, sp, #24
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	60b9      	str	r1, [r7, #8]
 801135e:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8011360:	4bb9      	ldr	r3, [pc, #740]	@ (8011648 <showall+0x2f4>)
 8011362:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011366:	2b00      	cmp	r3, #0
 8011368:	d104      	bne.n	8011374 <showall+0x20>
 801136a:	4bb7      	ldr	r3, [pc, #732]	@ (8011648 <showall+0x2f4>)
 801136c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8011370:	2b00      	cmp	r3, #0
 8011372:	d006      	beq.n	8011382 <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 8011374:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8011378:	49b4      	ldr	r1, [pc, #720]	@ (801164c <showall+0x2f8>)
 801137a:	4618      	mov	r0, r3
 801137c:	f00d fb6c 	bl	801ea58 <siprintf>
 8011380:	e00d      	b.n	801139e <showall+0x4a>
	} else {

		get_sps30_measurement();
 8011382:	f7f0 fa63 	bl	800184c <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 8011386:	4bb0      	ldr	r3, [pc, #704]	@ (8011648 <showall+0x2f4>)
 8011388:	695b      	ldr	r3, [r3, #20]
 801138a:	4618      	mov	r0, r3
 801138c:	f7ef f8f4 	bl	8000578 <__aeabi_f2d>
 8011390:	4602      	mov	r2, r0
 8011392:	460b      	mov	r3, r1
 8011394:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8011398:	49ad      	ldr	r1, [pc, #692]	@ (8011650 <showall+0x2fc>)
 801139a:	f00d fb5d 	bl	801ea58 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 801139e:	48ad      	ldr	r0, [pc, #692]	@ (8011654 <showall+0x300>)
 80113a0:	f002 fed6 	bl	8014150 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80113a4:	2101      	movs	r1, #1
 80113a6:	48ac      	ldr	r0, [pc, #688]	@ (8011658 <showall+0x304>)
 80113a8:	f7f4 fe7a 	bl	80060a0 <HAL_GPIO_ReadPin>
 80113ac:	4603      	mov	r3, r0
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d003      	beq.n	80113ba <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 80113b2:	4ba5      	ldr	r3, [pc, #660]	@ (8011648 <showall+0x2f4>)
 80113b4:	2201      	movs	r2, #1
 80113b6:	731a      	strb	r2, [r3, #12]
 80113b8:	e002      	b.n	80113c0 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 80113ba:	4ba3      	ldr	r3, [pc, #652]	@ (8011648 <showall+0x2f4>)
 80113bc:	2200      	movs	r2, #0
 80113be:	731a      	strb	r2, [r3, #12]
	}

	char co2_Sensor_stat[30] = "ERROR";
 80113c0:	4aa6      	ldr	r2, [pc, #664]	@ (801165c <showall+0x308>)
 80113c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80113c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113ca:	6018      	str	r0, [r3, #0]
 80113cc:	3304      	adds	r3, #4
 80113ce:	8019      	strh	r1, [r3, #0]
 80113d0:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80113d4:	2200      	movs	r2, #0
 80113d6:	601a      	str	r2, [r3, #0]
 80113d8:	605a      	str	r2, [r3, #4]
 80113da:	609a      	str	r2, [r3, #8]
 80113dc:	60da      	str	r2, [r3, #12]
 80113de:	611a      	str	r2, [r3, #16]
 80113e0:	615a      	str	r2, [r3, #20]

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x61 << 1), 5, 1000)
 80113e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113e6:	2205      	movs	r2, #5
 80113e8:	21c2      	movs	r1, #194	@ 0xc2
 80113ea:	489d      	ldr	r0, [pc, #628]	@ (8011660 <showall+0x30c>)
 80113ec:	f7f5 fb46 	bl	8006a7c <HAL_I2C_IsDeviceReady>
 80113f0:	4603      	mov	r3, r0
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d01c      	beq.n	8011430 <showall+0xdc>
			!= HAL_OK) {

		if (debug_scd_pm) {
 80113f6:	4b9b      	ldr	r3, [pc, #620]	@ (8011664 <showall+0x310>)
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d013      	beq.n	8011426 <showall+0xd2>
			char buf_error[50];
			sprintf(buf_error, "error in scd30 i2c so not running it\n");
 80113fe:	f107 0314 	add.w	r3, r7, #20
 8011402:	4999      	ldr	r1, [pc, #612]	@ (8011668 <showall+0x314>)
 8011404:	4618      	mov	r0, r3
 8011406:	f00d fb27 	bl	801ea58 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buf_error, strlen(buf_error),
 801140a:	f107 0314 	add.w	r3, r7, #20
 801140e:	4618      	mov	r0, r3
 8011410:	f7ee ff46 	bl	80002a0 <strlen>
 8011414:	4603      	mov	r3, r0
 8011416:	b29a      	uxth	r2, r3
 8011418:	f107 0114 	add.w	r1, r7, #20
 801141c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011420:	4892      	ldr	r0, [pc, #584]	@ (801166c <showall+0x318>)
 8011422:	f7fa ff11 	bl	800c248 <HAL_UART_Transmit>
					1000);
		}
		_RunTime_Packet.scd4x_i2c_error = 1;
 8011426:	4b88      	ldr	r3, [pc, #544]	@ (8011648 <showall+0x2f4>)
 8011428:	2201      	movs	r2, #1
 801142a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 801142e:	e003      	b.n	8011438 <showall+0xe4>
	}
	else
	{
		_RunTime_Packet.scd4x_i2c_error = 0;
 8011430:	4b85      	ldr	r3, [pc, #532]	@ (8011648 <showall+0x2f4>)
 8011432:	2200      	movs	r2, #0
 8011434:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
	if (!_RunTime_Packet.scd4x_i2c_error) {
 8011438:	4b83      	ldr	r3, [pc, #524]	@ (8011648 <showall+0x2f4>)
 801143a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801143e:	2b00      	cmp	r3, #0
 8011440:	d10a      	bne.n	8011458 <showall+0x104>
#ifdef use_scd40x
		get_scd4x_measurement();
#elif use_scd30
	//get_scd30_measurement();
#endif
		strcpy(co2_Sensor_stat,"ACTIVE");
 8011442:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8011446:	4a8a      	ldr	r2, [pc, #552]	@ (8011670 <showall+0x31c>)
 8011448:	e892 0003 	ldmia.w	r2, {r0, r1}
 801144c:	6018      	str	r0, [r3, #0]
 801144e:	3304      	adds	r3, #4
 8011450:	8019      	strh	r1, [r3, #0]
 8011452:	3302      	adds	r3, #2
 8011454:	0c0a      	lsrs	r2, r1, #16
 8011456:	701a      	strb	r2, [r3, #0]
	}


	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 8011458:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801145c:	2200      	movs	r2, #0
 801145e:	4619      	mov	r1, r3
 8011460:	4884      	ldr	r0, [pc, #528]	@ (8011674 <showall+0x320>)
 8011462:	f7f8 fb70 	bl	8009b46 <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8011466:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801146a:	2200      	movs	r2, #0
 801146c:	4619      	mov	r1, r3
 801146e:	4881      	ldr	r0, [pc, #516]	@ (8011674 <showall+0x320>)
 8011470:	f7f8 fa87 	bl	8009982 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 8011474:	4b80      	ldr	r3, [pc, #512]	@ (8011678 <showall+0x324>)
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d106      	bne.n	801148a <showall+0x136>

		sprintf(buff_filewritten, "Data not written yet");
 801147c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011480:	497e      	ldr	r1, [pc, #504]	@ (801167c <showall+0x328>)
 8011482:	4618      	mov	r0, r3
 8011484:	f00d fae8 	bl	801ea58 <siprintf>
 8011488:	e014      	b.n	80114b4 <showall+0x160>

	} else if (datawritten == 1) {
 801148a:	4b7b      	ldr	r3, [pc, #492]	@ (8011678 <showall+0x324>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d106      	bne.n	80114a0 <showall+0x14c>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 8011492:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011496:	497a      	ldr	r1, [pc, #488]	@ (8011680 <showall+0x32c>)
 8011498:	4618      	mov	r0, r3
 801149a:	f00d fadd 	bl	801ea58 <siprintf>
 801149e:	e009      	b.n	80114b4 <showall+0x160>
	} else if (datawritten == 2) {
 80114a0:	4b75      	ldr	r3, [pc, #468]	@ (8011678 <showall+0x324>)
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	2b02      	cmp	r3, #2
 80114a6:	d105      	bne.n	80114b4 <showall+0x160>

		sprintf(buff_filewritten, " **FAILED** ");
 80114a8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80114ac:	4975      	ldr	r1, [pc, #468]	@ (8011684 <showall+0x330>)
 80114ae:	4618      	mov	r0, r3
 80114b0:	f00d fad2 	bl	801ea58 <siprintf>
	}
	uint16_t calib_val = 0;
 80114b4:	2300      	movs	r3, #0
 80114b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint16_t calib_stat = 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint16_t temp_offset = 0;
 80114c0:	2300      	movs	r3, #0
 80114c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	uint16_t altitude_comp = 0;
 80114c6:	2300      	movs	r3, #0
 80114c8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	if (!_RunTime_Packet.scd4x_i2c_error) {
 80114cc:	4b5e      	ldr	r3, [pc, #376]	@ (8011648 <showall+0x2f4>)
 80114ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d113      	bne.n	80114fe <showall+0x1aa>
	scd30_get_force_recalibration_status(&calib_val);
 80114d6:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 80114da:	4618      	mov	r0, r3
 80114dc:	f003 f96c 	bl	80147b8 <scd30_get_force_recalibration_status>
	scd30_get_auto_calibration_status(&calib_stat);
 80114e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80114e4:	4618      	mov	r0, r3
 80114e6:	f003 f8d9 	bl	801469c <scd30_get_auto_calibration_status>
	scd30_get_altitude_compensation(&altitude_comp);
 80114ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80114ee:	4618      	mov	r0, r3
 80114f0:	f003 fa40 	bl	8014974 <scd30_get_altitude_compensation>
	scd30_get_temperature_offset(&temp_offset);
 80114f4:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 80114f8:	4618      	mov	r0, r3
 80114fa:	f003 f9eb 	bl	80148d4 <scd30_get_temperature_offset>
	}


	cli_printf(cli, "");
 80114fe:	4962      	ldr	r1, [pc, #392]	@ (8011688 <showall+0x334>)
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f7fe f803 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 8011506:	4960      	ldr	r1, [pc, #384]	@ (8011688 <showall+0x334>)
 8011508:	68f8      	ldr	r0, [r7, #12]
 801150a:	f7fd ffff 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 801150e:	495e      	ldr	r1, [pc, #376]	@ (8011688 <showall+0x334>)
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f7fd fffb 	bl	800f50c <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 8011516:	f7f0 ffad 	bl	8002474 <ver_GetUid>
 801151a:	4603      	mov	r3, r0
 801151c:	461a      	mov	r2, r3
 801151e:	495b      	ldr	r1, [pc, #364]	@ (801168c <showall+0x338>)
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f7fd fff3 	bl	800f50c <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 8011526:	4a5a      	ldr	r2, [pc, #360]	@ (8011690 <showall+0x33c>)
 8011528:	495a      	ldr	r1, [pc, #360]	@ (8011694 <showall+0x340>)
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	f7fd ffee 	bl	800f50c <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8011530:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8011534:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8011536:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 801153a:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 801153c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	460b      	mov	r3, r1
 8011544:	4954      	ldr	r1, [pc, #336]	@ (8011698 <showall+0x344>)
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f7fd ffe0 	bl	800f50c <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 801154c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8011550:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 8011552:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8011556:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 8011558:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 801155c:	9300      	str	r3, [sp, #0]
 801155e:	460b      	mov	r3, r1
 8011560:	494e      	ldr	r1, [pc, #312]	@ (801169c <showall+0x348>)
 8011562:	68f8      	ldr	r0, [r7, #12]
 8011564:	f7fd ffd2 	bl	800f50c <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 8011568:	4a4d      	ldr	r2, [pc, #308]	@ (80116a0 <showall+0x34c>)
 801156a:	494e      	ldr	r1, [pc, #312]	@ (80116a4 <showall+0x350>)
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f7fd ffcd 	bl	800f50c <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 8011572:	4a4d      	ldr	r2, [pc, #308]	@ (80116a8 <showall+0x354>)
 8011574:	494d      	ldr	r1, [pc, #308]	@ (80116ac <showall+0x358>)
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	f7fd ffc8 	bl	800f50c <cli_printf>
			_Flash_Packet.filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 801157c:	4a4c      	ldr	r2, [pc, #304]	@ (80116b0 <showall+0x35c>)
 801157e:	494d      	ldr	r1, [pc, #308]	@ (80116b4 <showall+0x360>)
 8011580:	68f8      	ldr	r0, [r7, #12]
 8011582:	f7fd ffc3 	bl	800f50c <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 8011586:	4a4c      	ldr	r2, [pc, #304]	@ (80116b8 <showall+0x364>)
 8011588:	494c      	ldr	r1, [pc, #304]	@ (80116bc <showall+0x368>)
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	f7fd ffbe 	bl	800f50c <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 8011590:	4b4b      	ldr	r3, [pc, #300]	@ (80116c0 <showall+0x36c>)
 8011592:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011596:	461a      	mov	r2, r3
 8011598:	494a      	ldr	r1, [pc, #296]	@ (80116c4 <showall+0x370>)
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f7fd ffb6 	bl	800f50c <cli_printf>
			_Flash_Packet.Time_Interval);
	cli_printf(cli, " *Co2 sensor status| %s                       ",
 80115a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80115a4:	461a      	mov	r2, r3
 80115a6:	4948      	ldr	r1, [pc, #288]	@ (80116c8 <showall+0x374>)
 80115a8:	68f8      	ldr	r0, [r7, #12]
 80115aa:	f7fd ffaf 	bl	800f50c <cli_printf>
			co2_Sensor_stat);
	cli_printf(cli, " *Calibration Value| %d                       ",
 80115ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80115b2:	461a      	mov	r2, r3
 80115b4:	4945      	ldr	r1, [pc, #276]	@ (80116cc <showall+0x378>)
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f7fd ffa8 	bl	800f50c <cli_printf>
			calib_val);
	cli_printf(cli, " *Auto calibration | %d                       ",
 80115bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80115c0:	461a      	mov	r2, r3
 80115c2:	4943      	ldr	r1, [pc, #268]	@ (80116d0 <showall+0x37c>)
 80115c4:	68f8      	ldr	r0, [r7, #12]
 80115c6:	f7fd ffa1 	bl	800f50c <cli_printf>
			calib_stat);
	cli_printf(cli, " *Temp offset      | %d                       ",
 80115ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80115ce:	461a      	mov	r2, r3
 80115d0:	4940      	ldr	r1, [pc, #256]	@ (80116d4 <showall+0x380>)
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f7fd ff9a 	bl	800f50c <cli_printf>
			temp_offset);
	cli_printf(cli, " *Altitude Comp    | %d                       ",
 80115d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80115dc:	461a      	mov	r2, r3
 80115de:	493e      	ldr	r1, [pc, #248]	@ (80116d8 <showall+0x384>)
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	f7fd ff93 	bl	800f50c <cli_printf>
			altitude_comp);
	cli_printf(cli, " *Co2 Samples      | %d                       ",
			_Flash_Packet.co2_samples);
 80115e6:	4b36      	ldr	r3, [pc, #216]	@ (80116c0 <showall+0x36c>)
 80115e8:	f8b3 325d 	ldrh.w	r3, [r3, #605]	@ 0x25d
 80115ec:	b29b      	uxth	r3, r3
	cli_printf(cli, " *Co2 Samples      | %d                       ",
 80115ee:	461a      	mov	r2, r3
 80115f0:	493a      	ldr	r1, [pc, #232]	@ (80116dc <showall+0x388>)
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	f7fd ff8a 	bl	800f50c <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
			_RunTime_Packet.humidity);
#elif use_scd30
	cli_printf(cli, " *Co2              | %.2f                       ",
			_RunTime_Packet.co2);
 80115f8:	4b13      	ldr	r3, [pc, #76]	@ (8011648 <showall+0x2f4>)
 80115fa:	681b      	ldr	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %.2f                       ",
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ee ffbb 	bl	8000578 <__aeabi_f2d>
 8011602:	4602      	mov	r2, r0
 8011604:	460b      	mov	r3, r1
 8011606:	4936      	ldr	r1, [pc, #216]	@ (80116e0 <showall+0x38c>)
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f7fd ff7f 	bl	800f50c <cli_printf>
	cli_printf(cli, " *Temperature      | %.2fC                      ",
			_RunTime_Packet.temperature);
 801160e:	4b0e      	ldr	r3, [pc, #56]	@ (8011648 <showall+0x2f4>)
 8011610:	685b      	ldr	r3, [r3, #4]
	cli_printf(cli, " *Temperature      | %.2fC                      ",
 8011612:	4618      	mov	r0, r3
 8011614:	f7ee ffb0 	bl	8000578 <__aeabi_f2d>
 8011618:	4602      	mov	r2, r0
 801161a:	460b      	mov	r3, r1
 801161c:	4931      	ldr	r1, [pc, #196]	@ (80116e4 <showall+0x390>)
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7fd ff74 	bl	800f50c <cli_printf>
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
			_RunTime_Packet.humidity);
 8011624:	4b08      	ldr	r3, [pc, #32]	@ (8011648 <showall+0x2f4>)
 8011626:	689b      	ldr	r3, [r3, #8]
	cli_printf(cli, " *Humidity         | %.2f%%                     ",
 8011628:	4618      	mov	r0, r3
 801162a:	f7ee ffa5 	bl	8000578 <__aeabi_f2d>
 801162e:	4602      	mov	r2, r0
 8011630:	460b      	mov	r3, r1
 8011632:	492d      	ldr	r1, [pc, #180]	@ (80116e8 <showall+0x394>)
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f7fd ff69 	bl	800f50c <cli_printf>
#endif

	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801163a:	4b03      	ldr	r3, [pc, #12]	@ (8011648 <showall+0x2f4>)
 801163c:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 801163e:	2b01      	cmp	r3, #1
 8011640:	d156      	bne.n	80116f0 <showall+0x39c>
 8011642:	4b2a      	ldr	r3, [pc, #168]	@ (80116ec <showall+0x398>)
 8011644:	e055      	b.n	80116f2 <showall+0x39e>
 8011646:	bf00      	nop
 8011648:	20001530 	.word	0x20001530
 801164c:	08023368 	.word	0x08023368
 8011650:	08023374 	.word	0x08023374
 8011654:	20001550 	.word	0x20001550
 8011658:	40020000 	.word	0x40020000
 801165c:	080238b0 	.word	0x080238b0
 8011660:	20001838 	.word	0x20001838
 8011664:	20001578 	.word	0x20001578
 8011668:	0802337c 	.word	0x0802337c
 801166c:	20001a74 	.word	0x20001a74
 8011670:	080233a4 	.word	0x080233a4
 8011674:	20001898 	.word	0x20001898
 8011678:	20002328 	.word	0x20002328
 801167c:	080233ac 	.word	0x080233ac
 8011680:	080233c4 	.word	0x080233c4
 8011684:	080233d8 	.word	0x080233d8
 8011688:	08022ed4 	.word	0x08022ed4
 801168c:	080233e8 	.word	0x080233e8
 8011690:	20001399 	.word	0x20001399
 8011694:	08023418 	.word	0x08023418
 8011698:	08023448 	.word	0x08023448
 801169c:	08023478 	.word	0x08023478
 80116a0:	200013cb 	.word	0x200013cb
 80116a4:	080234a8 	.word	0x080234a8
 80116a8:	200014c5 	.word	0x200014c5
 80116ac:	080234d8 	.word	0x080234d8
 80116b0:	20001330 	.word	0x20001330
 80116b4:	08023508 	.word	0x08023508
 80116b8:	2000142f 	.word	0x2000142f
 80116bc:	08023538 	.word	0x08023538
 80116c0:	200012cc 	.word	0x200012cc
 80116c4:	08023568 	.word	0x08023568
 80116c8:	0802359c 	.word	0x0802359c
 80116cc:	080235cc 	.word	0x080235cc
 80116d0:	080235fc 	.word	0x080235fc
 80116d4:	0802362c 	.word	0x0802362c
 80116d8:	0802365c 	.word	0x0802365c
 80116dc:	0802368c 	.word	0x0802368c
 80116e0:	080236bc 	.word	0x080236bc
 80116e4:	080236f0 	.word	0x080236f0
 80116e8:	08023724 	.word	0x08023724
 80116ec:	0802327c 	.word	0x0802327c
 80116f0:	4b28      	ldr	r3, [pc, #160]	@ (8011794 <showall+0x440>)
 80116f2:	461a      	mov	r2, r3
 80116f4:	4928      	ldr	r1, [pc, #160]	@ (8011798 <showall+0x444>)
 80116f6:	68f8      	ldr	r0, [r7, #12]
 80116f8:	f7fd ff08 	bl	800f50c <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 80116fc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8011700:	461a      	mov	r2, r3
 8011702:	4926      	ldr	r1, [pc, #152]	@ (801179c <showall+0x448>)
 8011704:	68f8      	ldr	r0, [r7, #12]
 8011706:	f7fd ff01 	bl	800f50c <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 801170a:	4925      	ldr	r1, [pc, #148]	@ (80117a0 <showall+0x44c>)
 801170c:	68f8      	ldr	r0, [r7, #12]
 801170e:	f7fd fefd 	bl	800f50c <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 8011712:	4b24      	ldr	r3, [pc, #144]	@ (80117a4 <showall+0x450>)
 8011714:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 8011716:	4618      	mov	r0, r3
 8011718:	f7ee ff2e 	bl	8000578 <__aeabi_f2d>
 801171c:	4602      	mov	r2, r0
 801171e:	460b      	mov	r3, r1
 8011720:	4921      	ldr	r1, [pc, #132]	@ (80117a8 <showall+0x454>)
 8011722:	68f8      	ldr	r0, [r7, #12]
 8011724:	f7fd fef2 	bl	800f50c <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 8011728:	4b20      	ldr	r3, [pc, #128]	@ (80117ac <showall+0x458>)
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	461d      	mov	r5, r3
 801172e:	4b20      	ldr	r3, [pc, #128]	@ (80117b0 <showall+0x45c>)
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	461e      	mov	r6, r3
 8011734:	4b1f      	ldr	r3, [pc, #124]	@ (80117b4 <showall+0x460>)
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	461a      	mov	r2, r3
 801173a:	4b1f      	ldr	r3, [pc, #124]	@ (80117b8 <showall+0x464>)
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	4619      	mov	r1, r3
 8011740:	4b1e      	ldr	r3, [pc, #120]	@ (80117bc <showall+0x468>)
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	4618      	mov	r0, r3
 8011746:	4b1e      	ldr	r3, [pc, #120]	@ (80117c0 <showall+0x46c>)
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	461c      	mov	r4, r3
 801174c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011750:	9305      	str	r3, [sp, #20]
 8011752:	4b1c      	ldr	r3, [pc, #112]	@ (80117c4 <showall+0x470>)
 8011754:	9304      	str	r3, [sp, #16]
 8011756:	9403      	str	r4, [sp, #12]
 8011758:	9002      	str	r0, [sp, #8]
 801175a:	9101      	str	r1, [sp, #4]
 801175c:	9200      	str	r2, [sp, #0]
 801175e:	4633      	mov	r3, r6
 8011760:	462a      	mov	r2, r5
 8011762:	4919      	ldr	r1, [pc, #100]	@ (80117c8 <showall+0x474>)
 8011764:	68f8      	ldr	r0, [r7, #12]
 8011766:	f7fd fed1 	bl	800f50c <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, _Flash_Packet.filename_ver_date,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 801176a:	4a18      	ldr	r2, [pc, #96]	@ (80117cc <showall+0x478>)
 801176c:	4918      	ldr	r1, [pc, #96]	@ (80117d0 <showall+0x47c>)
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f7fd fecc 	bl	800f50c <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 8011774:	4917      	ldr	r1, [pc, #92]	@ (80117d4 <showall+0x480>)
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f7fd fec8 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 801177c:	4915      	ldr	r1, [pc, #84]	@ (80117d4 <showall+0x480>)
 801177e:	68f8      	ldr	r0, [r7, #12]
 8011780:	f7fd fec4 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 8011784:	4913      	ldr	r1, [pc, #76]	@ (80117d4 <showall+0x480>)
 8011786:	68f8      	ldr	r0, [r7, #12]
 8011788:	f7fd fec0 	bl	800f50c <cli_printf>
}
 801178c:	bf00      	nop
 801178e:	37d4      	adds	r7, #212	@ 0xd4
 8011790:	46bd      	mov	sp, r7
 8011792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011794:	08023284 	.word	0x08023284
 8011798:	08023758 	.word	0x08023758
 801179c:	08023788 	.word	0x08023788
 80117a0:	080237b8 	.word	0x080237b8
 80117a4:	20001530 	.word	0x20001530
 80117a8:	080237e8 	.word	0x080237e8
 80117ac:	20002322 	.word	0x20002322
 80117b0:	20002323 	.word	0x20002323
 80117b4:	20002324 	.word	0x20002324
 80117b8:	20002325 	.word	0x20002325
 80117bc:	20002326 	.word	0x20002326
 80117c0:	20002327 	.word	0x20002327
 80117c4:	200014c5 	.word	0x200014c5
 80117c8:	08023818 	.word	0x08023818
 80117cc:	2000002c 	.word	0x2000002c
 80117d0:	08023880 	.word	0x08023880
 80117d4:	08022ed4 	.word	0x08022ed4

080117d8 <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 80117e4:	4911      	ldr	r1, [pc, #68]	@ (801182c <systemversion+0x54>)
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f7fd fe90 	bl	800f50c <cli_printf>
		cli_printf(cli, "");
 80117ec:	490f      	ldr	r1, [pc, #60]	@ (801182c <systemversion+0x54>)
 80117ee:	68f8      	ldr	r0, [r7, #12]
 80117f0:	f7fd fe8c 	bl	800f50c <cli_printf>
		cli_printf(cli, "");
 80117f4:	490d      	ldr	r1, [pc, #52]	@ (801182c <systemversion+0x54>)
 80117f6:	68f8      	ldr	r0, [r7, #12]
 80117f8:	f7fd fe88 	bl	800f50c <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 80117fc:	490c      	ldr	r1, [pc, #48]	@ (8011830 <systemversion+0x58>)
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7fd fe84 	bl	800f50c <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 8011804:	490b      	ldr	r1, [pc, #44]	@ (8011834 <systemversion+0x5c>)
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f7fd fe80 	bl	800f50c <cli_printf>

		cli_printf(cli, "");
 801180c:	4907      	ldr	r1, [pc, #28]	@ (801182c <systemversion+0x54>)
 801180e:	68f8      	ldr	r0, [r7, #12]
 8011810:	f7fd fe7c 	bl	800f50c <cli_printf>
			cli_printf(cli, "");
 8011814:	4905      	ldr	r1, [pc, #20]	@ (801182c <systemversion+0x54>)
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f7fd fe78 	bl	800f50c <cli_printf>
			cli_printf(cli, "");
 801181c:	4903      	ldr	r1, [pc, #12]	@ (801182c <systemversion+0x54>)
 801181e:	68f8      	ldr	r0, [r7, #12]
 8011820:	f7fd fe74 	bl	800f50c <cli_printf>

}
 8011824:	bf00      	nop
 8011826:	3710      	adds	r7, #16
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	08022ed4 	.word	0x08022ed4
 8011830:	080238d0 	.word	0x080238d0
 8011834:	08023908 	.word	0x08023908

08011838 <aboutDev>:

void aboutDev(EmbeddedCli *cli, char *args, void *context)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
	  cli_printf(cli, "");
 8011844:	4917      	ldr	r1, [pc, #92]	@ (80118a4 <aboutDev+0x6c>)
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f7fd fe60 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 801184c:	4915      	ldr	r1, [pc, #84]	@ (80118a4 <aboutDev+0x6c>)
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f7fd fe5c 	bl	800f50c <cli_printf>
	cli_printf(cli, "This product is powered by BuildUp! "); //TM 0x99
 8011854:	4914      	ldr	r1, [pc, #80]	@ (80118a8 <aboutDev+0x70>)
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f7fd fe58 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 801185c:	4911      	ldr	r1, [pc, #68]	@ (80118a4 <aboutDev+0x6c>)
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	f7fd fe54 	bl	800f50c <cli_printf>
	cli_printf(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8011864:	4911      	ldr	r1, [pc, #68]	@ (80118ac <aboutDev+0x74>)
 8011866:	68f8      	ldr	r0, [r7, #12]
 8011868:	f7fd fe50 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 801186c:	490d      	ldr	r1, [pc, #52]	@ (80118a4 <aboutDev+0x6c>)
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f7fd fe4c 	bl	800f50c <cli_printf>
	cli_printf(cli, "Montreal, Canada");
 8011874:	490e      	ldr	r1, [pc, #56]	@ (80118b0 <aboutDev+0x78>)
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f7fd fe48 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 801187c:	4909      	ldr	r1, [pc, #36]	@ (80118a4 <aboutDev+0x6c>)
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f7fd fe44 	bl	800f50c <cli_printf>
	cli_printf(cli, "https://thingsfactory.com");
 8011884:	490b      	ldr	r1, [pc, #44]	@ (80118b4 <aboutDev+0x7c>)
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	f7fd fe40 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 801188c:	4905      	ldr	r1, [pc, #20]	@ (80118a4 <aboutDev+0x6c>)
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	f7fd fe3c 	bl	800f50c <cli_printf>
	cli_printf(cli, "");
 8011894:	4903      	ldr	r1, [pc, #12]	@ (80118a4 <aboutDev+0x6c>)
 8011896:	68f8      	ldr	r0, [r7, #12]
 8011898:	f7fd fe38 	bl	800f50c <cli_printf>
}
 801189c:	bf00      	nop
 801189e:	3710      	adds	r7, #16
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	08022ed4 	.word	0x08022ed4
 80118a8:	08023940 	.word	0x08023940
 80118ac:	08023968 	.word	0x08023968
 80118b0:	08023990 	.word	0x08023990
 80118b4:	080239a4 	.word	0x080239a4

080118b8 <initializeEmbeddedCli>:
/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 80118b8:	b5b0      	push	{r4, r5, r7, lr}
 80118ba:	f5ad 7d54 	sub.w	sp, sp, #848	@ 0x350
 80118be:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 80118c0:	f000 fe3b 	bl	801253a <embeddedCliNewDefault>
 80118c4:	4603      	mov	r3, r0
 80118c6:	4aa9      	ldr	r2, [pc, #676]	@ (8011b6c <initializeEmbeddedCli+0x2b4>)
 80118c8:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 80118ca:	4ba9      	ldr	r3, [pc, #676]	@ (8011b70 <initializeEmbeddedCli+0x2b8>)
 80118cc:	f507 744d 	add.w	r4, r7, #820	@ 0x334
 80118d0:	461d      	mov	r5, r3
 80118d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118d6:	682b      	ldr	r3, [r5, #0]
 80118d8:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80118da:	4ba6      	ldr	r3, [pc, #664]	@ (8011b74 <initializeEmbeddedCli+0x2bc>)
 80118dc:	f507 7448 	add.w	r4, r7, #800	@ 0x320
 80118e0:	461d      	mov	r5, r3
 80118e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118e6:	682b      	ldr	r3, [r5, #0]
 80118e8:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 80118ea:	4ba3      	ldr	r3, [pc, #652]	@ (8011b78 <initializeEmbeddedCli+0x2c0>)
 80118ec:	f507 7443 	add.w	r4, r7, #780	@ 0x30c
 80118f0:	461d      	mov	r5, r3
 80118f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118f6:	682b      	ldr	r3, [r5, #0]
 80118f8:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 80118fa:	4ba0      	ldr	r3, [pc, #640]	@ (8011b7c <initializeEmbeddedCli+0x2c4>)
 80118fc:	f507 743e 	add.w	r4, r7, #760	@ 0x2f8
 8011900:	461d      	mov	r5, r3
 8011902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011906:	682b      	ldr	r3, [r5, #0]
 8011908:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 801190a:	4b9d      	ldr	r3, [pc, #628]	@ (8011b80 <initializeEmbeddedCli+0x2c8>)
 801190c:	f507 7439 	add.w	r4, r7, #740	@ 0x2e4
 8011910:	461d      	mov	r5, r3
 8011912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011916:	682b      	ldr	r3, [r5, #0]
 8011918:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 801191a:	4b9a      	ldr	r3, [pc, #616]	@ (8011b84 <initializeEmbeddedCli+0x2cc>)
 801191c:	f507 7434 	add.w	r4, r7, #720	@ 0x2d0
 8011920:	461d      	mov	r5, r3
 8011922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011926:	682b      	ldr	r3, [r5, #0]
 8011928:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 801192a:	4b97      	ldr	r3, [pc, #604]	@ (8011b88 <initializeEmbeddedCli+0x2d0>)
 801192c:	f507 742f 	add.w	r4, r7, #700	@ 0x2bc
 8011930:	461d      	mov	r5, r3
 8011932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011936:	682b      	ldr	r3, [r5, #0]
 8011938:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 801193a:	4b94      	ldr	r3, [pc, #592]	@ (8011b8c <initializeEmbeddedCli+0x2d4>)
 801193c:	f507 742a 	add.w	r4, r7, #680	@ 0x2a8
 8011940:	461d      	mov	r5, r3
 8011942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011946:	682b      	ldr	r3, [r5, #0]
 8011948:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 801194a:	4b91      	ldr	r3, [pc, #580]	@ (8011b90 <initializeEmbeddedCli+0x2d8>)
 801194c:	f507 7425 	add.w	r4, r7, #660	@ 0x294
 8011950:	461d      	mov	r5, r3
 8011952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011956:	682b      	ldr	r3, [r5, #0]
 8011958:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 801195a:	4b8e      	ldr	r3, [pc, #568]	@ (8011b94 <initializeEmbeddedCli+0x2dc>)
 801195c:	f507 7420 	add.w	r4, r7, #640	@ 0x280
 8011960:	461d      	mov	r5, r3
 8011962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011966:	682b      	ldr	r3, [r5, #0]
 8011968:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 801196a:	4b8b      	ldr	r3, [pc, #556]	@ (8011b98 <initializeEmbeddedCli+0x2e0>)
 801196c:	f507 741b 	add.w	r4, r7, #620	@ 0x26c
 8011970:	461d      	mov	r5, r3
 8011972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011976:	682b      	ldr	r3, [r5, #0]
 8011978:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 801197a:	4b88      	ldr	r3, [pc, #544]	@ (8011b9c <initializeEmbeddedCli+0x2e4>)
 801197c:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8011980:	461d      	mov	r5, r3
 8011982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011986:	682b      	ldr	r3, [r5, #0]
 8011988:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 801198a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801198e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011992:	4a83      	ldr	r2, [pc, #524]	@ (8011ba0 <initializeEmbeddedCli+0x2e8>)
 8011994:	461c      	mov	r4, r3
 8011996:	4615      	mov	r5, r2
 8011998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801199a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801199c:	682b      	ldr	r3, [r5, #0]
 801199e:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 80119a0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80119a8:	4a7e      	ldr	r2, [pc, #504]	@ (8011ba4 <initializeEmbeddedCli+0x2ec>)
 80119aa:	461c      	mov	r4, r3
 80119ac:	4615      	mov	r5, r2
 80119ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119b2:	682b      	ldr	r3, [r5, #0]
 80119b4:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 80119b6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80119be:	4a7a      	ldr	r2, [pc, #488]	@ (8011ba8 <initializeEmbeddedCli+0x2f0>)
 80119c0:	461c      	mov	r4, r3
 80119c2:	4615      	mov	r5, r2
 80119c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119c8:	682b      	ldr	r3, [r5, #0]
 80119ca:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 80119cc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80119d4:	4a75      	ldr	r2, [pc, #468]	@ (8011bac <initializeEmbeddedCli+0x2f4>)
 80119d6:	461c      	mov	r4, r3
 80119d8:	4615      	mov	r5, r2
 80119da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119de:	682b      	ldr	r3, [r5, #0]
 80119e0:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 80119e2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80119ea:	4a71      	ldr	r2, [pc, #452]	@ (8011bb0 <initializeEmbeddedCli+0x2f8>)
 80119ec:	461c      	mov	r4, r3
 80119ee:	4615      	mov	r5, r2
 80119f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119f4:	682b      	ldr	r3, [r5, #0]
 80119f6:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 80119f8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80119fc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011a00:	4a6c      	ldr	r2, [pc, #432]	@ (8011bb4 <initializeEmbeddedCli+0x2fc>)
 8011a02:	461c      	mov	r4, r3
 8011a04:	4615      	mov	r5, r2
 8011a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a0a:	682b      	ldr	r3, [r5, #0]
 8011a0c:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 8011a0e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a12:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011a16:	4a68      	ldr	r2, [pc, #416]	@ (8011bb8 <initializeEmbeddedCli+0x300>)
 8011a18:	461c      	mov	r4, r3
 8011a1a:	4615      	mov	r5, r2
 8011a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a20:	682b      	ldr	r3, [r5, #0]
 8011a22:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8011a24:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a28:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011a2c:	4a63      	ldr	r2, [pc, #396]	@ (8011bbc <initializeEmbeddedCli+0x304>)
 8011a2e:	461c      	mov	r4, r3
 8011a30:	4615      	mov	r5, r2
 8011a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a36:	682b      	ldr	r3, [r5, #0]
 8011a38:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-force-calibration", .help =
 8011a3a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a3e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011a42:	4a5f      	ldr	r2, [pc, #380]	@ (8011bc0 <initializeEmbeddedCli+0x308>)
 8011a44:	461c      	mov	r4, r3
 8011a46:	4615      	mov	r5, r2
 8011a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a4c:	682b      	ldr	r3, [r5, #0]
 8011a4e:	6023      	str	r3, [r4, #0]
			"Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding getCo2_Calibration = { .name = "get-co2-force-calibration-status", .help =
 8011a50:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a54:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011a58:	4a5a      	ldr	r2, [pc, #360]	@ (8011bc4 <initializeEmbeddedCli+0x30c>)
 8011a5a:	461c      	mov	r4, r3
 8011a5c:	4615      	mov	r5, r2
 8011a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a62:	682b      	ldr	r3, [r5, #0]
 8011a64:	6023      	str	r3, [r4, #0]
			"Get status of Force calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = statco2calibrate };


	CliCommandBinding Co2_AutoCalibration = { .name = "co2-auto-calibration", .help =
 8011a66:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a6a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011a6e:	4a56      	ldr	r2, [pc, #344]	@ (8011bc8 <initializeEmbeddedCli+0x310>)
 8011a70:	461c      	mov	r4, r3
 8011a72:	4615      	mov	r5, r2
 8011a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a78:	682b      	ldr	r3, [r5, #0]
 8011a7a:	6023      	str	r3, [r4, #0]
			"Enable/Disable auto calibration of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2_auto_calibration };


	CliCommandBinding getCo2_AutoCalibration = { .name = "get-co2-auto-calibration", .help =
 8011a7c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a80:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011a84:	4a51      	ldr	r2, [pc, #324]	@ (8011bcc <initializeEmbeddedCli+0x314>)
 8011a86:	461c      	mov	r4, r3
 8011a88:	4615      	mov	r5, r2
 8011a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a8e:	682b      	ldr	r3, [r5, #0]
 8011a90:	6023      	str	r3, [r4, #0]
			"Get Co2 sensor auto calibration status ", .tokenizeArgs = true, .context = NULL,
			.binding = get_auto_calibration };

	CliCommandBinding Co2_Tempoffset = { .name = "set-co2-temp-offset", .help =
 8011a92:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011a96:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8011bd0 <initializeEmbeddedCli+0x318>)
 8011a9c:	461c      	mov	r4, r3
 8011a9e:	4615      	mov	r5, r2
 8011aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aa4:	682b      	ldr	r3, [r5, #0]
 8011aa6:	6023      	str	r3, [r4, #0]
			"Set temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_temp_offset };

	CliCommandBinding getCo2_Tempoffset = { .name = "get-co2-temp-offset", .help =
 8011aa8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011aac:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8011ab0:	4a48      	ldr	r2, [pc, #288]	@ (8011bd4 <initializeEmbeddedCli+0x31c>)
 8011ab2:	461c      	mov	r4, r3
 8011ab4:	4615      	mov	r5, r2
 8011ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011aba:	682b      	ldr	r3, [r5, #0]
 8011abc:	6023      	str	r3, [r4, #0]
			"Get temperature offset of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_temp_offset };

	CliCommandBinding Co2_altitudecompsentation = { .name = "set-co2-altitude-comp", .help =
 8011abe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ac2:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8011ac6:	4a44      	ldr	r2, [pc, #272]	@ (8011bd8 <initializeEmbeddedCli+0x320>)
 8011ac8:	461c      	mov	r4, r3
 8011aca:	4615      	mov	r5, r2
 8011acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ad0:	682b      	ldr	r3, [r5, #0]
 8011ad2:	6023      	str	r3, [r4, #0]
			"Set altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_altitude_compensation };

	CliCommandBinding getCo2_altitudecompsentation = { .name = "get-co2-altitude-comp", .help =
 8011ad4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ad8:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8011adc:	4a3f      	ldr	r2, [pc, #252]	@ (8011bdc <initializeEmbeddedCli+0x324>)
 8011ade:	461c      	mov	r4, r3
 8011ae0:	4615      	mov	r5, r2
 8011ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ae6:	682b      	ldr	r3, [r5, #0]
 8011ae8:	6023      	str	r3, [r4, #0]
			"Get altitude compensation of Co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_altitude_compensation };

	CliCommandBinding Co2_Calibration_program = { .name = "run-co2-calib-prog", .help =
 8011aea:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011aee:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8011af2:	4a3b      	ldr	r2, [pc, #236]	@ (8011be0 <initializeEmbeddedCli+0x328>)
 8011af4:	461c      	mov	r4, r3
 8011af6:	4615      	mov	r5, r2
 8011af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011afc:	682b      	ldr	r3, [r5, #0]
 8011afe:	6023      	str	r3, [r4, #0]
			"Run Co2 sensor calibration program", .tokenizeArgs = true, .context = NULL,
			.binding = run_co2_calibration_routine };

	CliCommandBinding set_Co2_samples= { .name = "set-co2-samples", .help =
 8011b00:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b04:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8011b08:	4a36      	ldr	r2, [pc, #216]	@ (8011be4 <initializeEmbeddedCli+0x32c>)
 8011b0a:	461c      	mov	r4, r3
 8011b0c:	4615      	mov	r5, r2
 8011b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b12:	682b      	ldr	r3, [r5, #0]
 8011b14:	6023      	str	r3, [r4, #0]
			"Set how much samples you want Co2 sensor to take", .tokenizeArgs = true, .context = NULL,
			.binding = set_co2_samples };

	CliCommandBinding get_Co2_samples= { .name = "get-co2-samples", .help =
 8011b16:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b1a:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8011b1e:	4a32      	ldr	r2, [pc, #200]	@ (8011be8 <initializeEmbeddedCli+0x330>)
 8011b20:	461c      	mov	r4, r3
 8011b22:	4615      	mov	r5, r2
 8011b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b28:	682b      	ldr	r3, [r5, #0]
 8011b2a:	6023      	str	r3, [r4, #0]
			"Get Co2 samples", .tokenizeArgs = true, .context = NULL,
			.binding = get_co2_samples };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 8011b2c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b30:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8011b34:	4a2d      	ldr	r2, [pc, #180]	@ (8011bec <initializeEmbeddedCli+0x334>)
 8011b36:	461c      	mov	r4, r3
 8011b38:	4615      	mov	r5, r2
 8011b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b3e:	682b      	ldr	r3, [r5, #0]
 8011b40:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8011b42:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b46:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8011b4a:	4a29      	ldr	r2, [pc, #164]	@ (8011bf0 <initializeEmbeddedCli+0x338>)
 8011b4c:	461c      	mov	r4, r3
 8011b4e:	4615      	mov	r5, r2
 8011b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b54:	682b      	ldr	r3, [r5, #0]
 8011b56:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8011b58:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011b5c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011b60:	4a24      	ldr	r2, [pc, #144]	@ (8011bf4 <initializeEmbeddedCli+0x33c>)
 8011b62:	461c      	mov	r4, r3
 8011b64:	4615      	mov	r5, r2
 8011b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b6a:	e045      	b.n	8011bf8 <initializeEmbeddedCli+0x340>
 8011b6c:	20001b2c 	.word	0x20001b2c
 8011b70:	080239dc 	.word	0x080239dc
 8011b74:	08023a30 	.word	0x08023a30
 8011b78:	08023a98 	.word	0x08023a98
 8011b7c:	08023ad8 	.word	0x08023ad8
 8011b80:	08023b38 	.word	0x08023b38
 8011b84:	08023b88 	.word	0x08023b88
 8011b88:	08023bac 	.word	0x08023bac
 8011b8c:	08023be0 	.word	0x08023be0
 8011b90:	08023c0c 	.word	0x08023c0c
 8011b94:	08023c40 	.word	0x08023c40
 8011b98:	08023c6c 	.word	0x08023c6c
 8011b9c:	08023ca0 	.word	0x08023ca0
 8011ba0:	08023cd4 	.word	0x08023cd4
 8011ba4:	08023d20 	.word	0x08023d20
 8011ba8:	08023d58 	.word	0x08023d58
 8011bac:	08023dbc 	.word	0x08023dbc
 8011bb0:	08023df0 	.word	0x08023df0
 8011bb4:	08023e2c 	.word	0x08023e2c
 8011bb8:	08023e60 	.word	0x08023e60
 8011bbc:	08023ea0 	.word	0x08023ea0
 8011bc0:	08023eec 	.word	0x08023eec
 8011bc4:	08023f54 	.word	0x08023f54
 8011bc8:	08023fb0 	.word	0x08023fb0
 8011bcc:	08024008 	.word	0x08024008
 8011bd0:	08024058 	.word	0x08024058
 8011bd4:	080240a8 	.word	0x080240a8
 8011bd8:	080240fc 	.word	0x080240fc
 8011bdc:	08024150 	.word	0x08024150
 8011be0:	0802419c 	.word	0x0802419c
 8011be4:	080241f4 	.word	0x080241f4
 8011be8:	08024228 	.word	0x08024228
 8011bec:	08024260 	.word	0x08024260
 8011bf0:	08024294 	.word	0x08024294
 8011bf4:	080242dc 	.word	0x080242dc
 8011bf8:	682b      	ldr	r3, [r5, #0]
 8011bfa:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 8011bfc:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c00:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8011c04:	4acb      	ldr	r2, [pc, #812]	@ (8011f34 <initializeEmbeddedCli+0x67c>)
 8011c06:	461c      	mov	r4, r3
 8011c08:	4615      	mov	r5, r2
 8011c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c0e:	682b      	ldr	r3, [r5, #0]
 8011c10:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8011c12:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c16:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8011c1a:	4ac7      	ldr	r2, [pc, #796]	@ (8011f38 <initializeEmbeddedCli+0x680>)
 8011c1c:	461c      	mov	r4, r3
 8011c1e:	4615      	mov	r5, r2
 8011c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c24:	682b      	ldr	r3, [r5, #0]
 8011c26:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 8011c28:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c2c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8011c30:	4ac2      	ldr	r2, [pc, #776]	@ (8011f3c <initializeEmbeddedCli+0x684>)
 8011c32:	461c      	mov	r4, r3
 8011c34:	4615      	mov	r5, r2
 8011c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c3a:	682b      	ldr	r3, [r5, #0]
 8011c3c:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 8011c3e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c42:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8011c46:	4abe      	ldr	r2, [pc, #760]	@ (8011f40 <initializeEmbeddedCli+0x688>)
 8011c48:	461c      	mov	r4, r3
 8011c4a:	4615      	mov	r5, r2
 8011c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	6023      	str	r3, [r4, #0]
			"Measure voltage from 4.17v(Full Charge) to 3.0v(Battery Low)",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 8011c54:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c58:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8011c5c:	4ab9      	ldr	r2, [pc, #740]	@ (8011f44 <initializeEmbeddedCli+0x68c>)
 8011c5e:	461c      	mov	r4, r3
 8011c60:	4615      	mov	r5, r2
 8011c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c66:	682b      	ldr	r3, [r5, #0]
 8011c68:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 8011c6a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c6e:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8011c72:	4ab5      	ldr	r2, [pc, #724]	@ (8011f48 <initializeEmbeddedCli+0x690>)
 8011c74:	461c      	mov	r4, r3
 8011c76:	4615      	mov	r5, r2
 8011c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c7c:	682b      	ldr	r3, [r5, #0]
 8011c7e:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8011c80:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c84:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8011c88:	4ab0      	ldr	r2, [pc, #704]	@ (8011f4c <initializeEmbeddedCli+0x694>)
 8011c8a:	461c      	mov	r4, r3
 8011c8c:	4615      	mov	r5, r2
 8011c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c92:	682b      	ldr	r3, [r5, #0]
 8011c94:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	CliCommandBinding aboutdev = { .name = "about", .help =
 8011c96:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011c9a:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8011c9e:	4aac      	ldr	r2, [pc, #688]	@ (8011f50 <initializeEmbeddedCli+0x698>)
 8011ca0:	461c      	mov	r4, r3
 8011ca2:	4615      	mov	r5, r2
 8011ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011ca8:	682b      	ldr	r3, [r5, #0]
 8011caa:	6023      	str	r3, [r4, #0]
				"Information about device", .tokenizeArgs = true, .context = NULL,
				.binding = aboutDev };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8011cac:	4ba9      	ldr	r3, [pc, #676]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011cae:	681c      	ldr	r4, [r3, #0]
 8011cb0:	466a      	mov	r2, sp
 8011cb2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8011cb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cba:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cbe:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8011cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f000 fcf6 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8011cca:	4ba2      	ldr	r3, [pc, #648]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011ccc:	681c      	ldr	r4, [r3, #0]
 8011cce:	466a      	mov	r2, sp
 8011cd0:	f507 734b 	add.w	r3, r7, #812	@ 0x32c
 8011cd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cd8:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cdc:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 8011ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f000 fce7 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8011ce8:	4b9a      	ldr	r3, [pc, #616]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011cea:	681c      	ldr	r4, [r3, #0]
 8011cec:	466a      	mov	r2, sp
 8011cee:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8011cf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011cf6:	e882 0003 	stmia.w	r2, {r0, r1}
 8011cfa:	f507 7343 	add.w	r3, r7, #780	@ 0x30c
 8011cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d00:	4620      	mov	r0, r4
 8011d02:	f000 fcd8 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 8011d06:	4b93      	ldr	r3, [pc, #588]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011d08:	681c      	ldr	r4, [r3, #0]
 8011d0a:	466a      	mov	r2, sp
 8011d0c:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8011d10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d14:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d18:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8011d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f000 fcc9 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8011d24:	4b8b      	ldr	r3, [pc, #556]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011d26:	681c      	ldr	r4, [r3, #0]
 8011d28:	466a      	mov	r2, sp
 8011d2a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8011d2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d32:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d36:	f507 7339 	add.w	r3, r7, #740	@ 0x2e4
 8011d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f000 fcba 	bl	80126b6 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8011d42:	4b84      	ldr	r3, [pc, #528]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011d44:	681c      	ldr	r4, [r3, #0]
 8011d46:	466a      	mov	r2, sp
 8011d48:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 8011d4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d50:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d54:	f507 7334 	add.w	r3, r7, #720	@ 0x2d0
 8011d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	f000 fcab 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 8011d60:	4b7c      	ldr	r3, [pc, #496]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011d62:	681c      	ldr	r4, [r3, #0]
 8011d64:	466a      	mov	r2, sp
 8011d66:	f507 7332 	add.w	r3, r7, #712	@ 0x2c8
 8011d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d72:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8011d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d78:	4620      	mov	r0, r4
 8011d7a:	f000 fc9c 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 8011d7e:	4b75      	ldr	r3, [pc, #468]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011d80:	681c      	ldr	r4, [r3, #0]
 8011d82:	466a      	mov	r2, sp
 8011d84:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 8011d88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d8c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011d90:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8011d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011d96:	4620      	mov	r0, r4
 8011d98:	f000 fc8d 	bl	80126b6 <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 8011d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011d9e:	681c      	ldr	r4, [r3, #0]
 8011da0:	466a      	mov	r2, sp
 8011da2:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 8011da6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011daa:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dae:	f507 7325 	add.w	r3, r7, #660	@ 0x294
 8011db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011db4:	4620      	mov	r0, r4
 8011db6:	f000 fc7e 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 8011dba:	4b66      	ldr	r3, [pc, #408]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011dbc:	681c      	ldr	r4, [r3, #0]
 8011dbe:	466a      	mov	r2, sp
 8011dc0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8011dc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011dc8:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dcc:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8011dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f000 fc6f 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 8011dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011dda:	681c      	ldr	r4, [r3, #0]
 8011ddc:	466a      	mov	r2, sp
 8011dde:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 8011de2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011de6:	e882 0003 	stmia.w	r2, {r0, r1}
 8011dea:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8011dee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011df0:	4620      	mov	r0, r4
 8011df2:	f000 fc60 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 8011df6:	4b57      	ldr	r3, [pc, #348]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011df8:	681c      	ldr	r4, [r3, #0]
 8011dfa:	466a      	mov	r2, sp
 8011dfc:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 8011e00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e04:	e882 0003 	stmia.w	r2, {r0, r1}
 8011e08:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8011e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e0e:	4620      	mov	r0, r4
 8011e10:	f000 fc51 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8011e14:	4b4f      	ldr	r3, [pc, #316]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011e16:	681c      	ldr	r4, [r3, #0]
 8011e18:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011e20:	466d      	mov	r5, sp
 8011e22:	f103 020c 	add.w	r2, r3, #12
 8011e26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e30:	4620      	mov	r0, r4
 8011e32:	f000 fc40 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8011e36:	4b47      	ldr	r3, [pc, #284]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011e38:	681c      	ldr	r4, [r3, #0]
 8011e3a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011e42:	466d      	mov	r5, sp
 8011e44:	f103 020c 	add.w	r2, r3, #12
 8011e48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e52:	4620      	mov	r0, r4
 8011e54:	f000 fc2f 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8011e58:	4b3e      	ldr	r3, [pc, #248]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011e5a:	681c      	ldr	r4, [r3, #0]
 8011e5c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e64:	466d      	mov	r5, sp
 8011e66:	f103 020c 	add.w	r2, r3, #12
 8011e6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e74:	4620      	mov	r0, r4
 8011e76:	f000 fc1e 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8011e7a:	4b36      	ldr	r3, [pc, #216]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011e7c:	681c      	ldr	r4, [r3, #0]
 8011e7e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011e82:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8011e86:	466d      	mov	r5, sp
 8011e88:	f103 020c 	add.w	r2, r3, #12
 8011e8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e90:	e885 0003 	stmia.w	r5, {r0, r1}
 8011e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011e96:	4620      	mov	r0, r4
 8011e98:	f000 fc0d 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8011e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011e9e:	681c      	ldr	r4, [r3, #0]
 8011ea0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ea4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8011ea8:	466d      	mov	r5, sp
 8011eaa:	f103 020c 	add.w	r2, r3, #12
 8011eae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8011eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f000 fbfc 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8011ebe:	4b25      	ldr	r3, [pc, #148]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011ec0:	681c      	ldr	r4, [r3, #0]
 8011ec2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ec6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8011eca:	466d      	mov	r5, sp
 8011ecc:	f103 020c 	add.w	r2, r3, #12
 8011ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ed4:	e885 0003 	stmia.w	r5, {r0, r1}
 8011ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011eda:	4620      	mov	r0, r4
 8011edc:	f000 fbeb 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8011ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011ee2:	681c      	ldr	r4, [r3, #0]
 8011ee4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ee8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8011eec:	466d      	mov	r5, sp
 8011eee:	f103 020c 	add.w	r2, r3, #12
 8011ef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ef6:	e885 0003 	stmia.w	r5, {r0, r1}
 8011efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011efc:	4620      	mov	r0, r4
 8011efe:	f000 fbda 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8011f02:	4b14      	ldr	r3, [pc, #80]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011f04:	681c      	ldr	r4, [r3, #0]
 8011f06:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f0a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011f0e:	466d      	mov	r5, sp
 8011f10:	f103 020c 	add.w	r2, r3, #12
 8011f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f000 fbc9 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8011f24:	4b0b      	ldr	r3, [pc, #44]	@ (8011f54 <initializeEmbeddedCli+0x69c>)
 8011f26:	681c      	ldr	r4, [r3, #0]
 8011f28:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f2c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8011f30:	e012      	b.n	8011f58 <initializeEmbeddedCli+0x6a0>
 8011f32:	bf00      	nop
 8011f34:	08024324 	.word	0x08024324
 8011f38:	0802436c 	.word	0x0802436c
 8011f3c:	080243a4 	.word	0x080243a4
 8011f40:	08024408 	.word	0x08024408
 8011f44:	08024434 	.word	0x08024434
 8011f48:	0802446c 	.word	0x0802446c
 8011f4c:	080244b0 	.word	0x080244b0
 8011f50:	080244e8 	.word	0x080244e8
 8011f54:	20001b2c 	.word	0x20001b2c
 8011f58:	466d      	mov	r5, sp
 8011f5a:	f103 020c 	add.w	r2, r3, #12
 8011f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f62:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f68:	4620      	mov	r0, r4
 8011f6a:	f000 fba4 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Calibration);
 8011f6e:	4bba      	ldr	r3, [pc, #744]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8011f70:	681c      	ldr	r4, [r3, #0]
 8011f72:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f76:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8011f7a:	466d      	mov	r5, sp
 8011f7c:	f103 020c 	add.w	r2, r3, #12
 8011f80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f84:	e885 0003 	stmia.w	r5, {r0, r1}
 8011f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f000 fb93 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_AutoCalibration);
 8011f90:	4bb1      	ldr	r3, [pc, #708]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8011f92:	681c      	ldr	r4, [r3, #0]
 8011f94:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011f98:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011f9c:	466d      	mov	r5, sp
 8011f9e:	f103 020c 	add.w	r2, r3, #12
 8011fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8011faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fac:	4620      	mov	r0, r4
 8011fae:	f000 fb82 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_AutoCalibration);
 8011fb2:	4ba9      	ldr	r3, [pc, #676]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8011fb4:	681c      	ldr	r4, [r3, #0]
 8011fb6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011fbe:	466d      	mov	r5, sp
 8011fc0:	f103 020c 	add.w	r2, r3, #12
 8011fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f000 fb71 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Tempoffset);
 8011fd4:	4ba0      	ldr	r3, [pc, #640]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8011fd6:	681c      	ldr	r4, [r3, #0]
 8011fd8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011fdc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8011fe0:	466d      	mov	r5, sp
 8011fe2:	f103 020c 	add.w	r2, r3, #12
 8011fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fea:	e885 0003 	stmia.w	r5, {r0, r1}
 8011fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	f000 fb60 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_Tempoffset);
 8011ff6:	4b98      	ldr	r3, [pc, #608]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8011ff8:	681c      	ldr	r4, [r3, #0]
 8011ffa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8011ffe:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8012002:	466d      	mov	r5, sp
 8012004:	f103 020c 	add.w	r2, r3, #12
 8012008:	e892 0003 	ldmia.w	r2, {r0, r1}
 801200c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012012:	4620      	mov	r0, r4
 8012014:	f000 fb4f 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_altitudecompsentation);
 8012018:	4b8f      	ldr	r3, [pc, #572]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 801201a:	681c      	ldr	r4, [r3, #0]
 801201c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012020:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012024:	466d      	mov	r5, sp
 8012026:	f103 020c 	add.w	r2, r3, #12
 801202a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801202e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012034:	4620      	mov	r0, r4
 8012036:	f000 fb3e 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getCo2_altitudecompsentation);
 801203a:	4b87      	ldr	r3, [pc, #540]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 801203c:	681c      	ldr	r4, [r3, #0]
 801203e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012042:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8012046:	466d      	mov	r5, sp
 8012048:	f103 020c 	add.w	r2, r3, #12
 801204c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012050:	e885 0003 	stmia.w	r5, {r0, r1}
 8012054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012056:	4620      	mov	r0, r4
 8012058:	f000 fb2d 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration_program);
 801205c:	4b7e      	ldr	r3, [pc, #504]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 801205e:	681c      	ldr	r4, [r3, #0]
 8012060:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012064:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8012068:	466d      	mov	r5, sp
 801206a:	f103 020c 	add.w	r2, r3, #12
 801206e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012072:	e885 0003 	stmia.w	r5, {r0, r1}
 8012076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012078:	4620      	mov	r0, r4
 801207a:	f000 fb1c 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, set_Co2_samples);
 801207e:	4b76      	ldr	r3, [pc, #472]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8012080:	681c      	ldr	r4, [r3, #0]
 8012082:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012086:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801208a:	466d      	mov	r5, sp
 801208c:	f103 020c 	add.w	r2, r3, #12
 8012090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012094:	e885 0003 	stmia.w	r5, {r0, r1}
 8012098:	cb0e      	ldmia	r3, {r1, r2, r3}
 801209a:	4620      	mov	r0, r4
 801209c:	f000 fb0b 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, get_Co2_samples);
 80120a0:	4b6d      	ldr	r3, [pc, #436]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 80120a2:	681c      	ldr	r4, [r3, #0]
 80120a4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120a8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80120ac:	466d      	mov	r5, sp
 80120ae:	f103 020c 	add.w	r2, r3, #12
 80120b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80120ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120bc:	4620      	mov	r0, r4
 80120be:	f000 fafa 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 80120c2:	4b65      	ldr	r3, [pc, #404]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 80120c4:	681c      	ldr	r4, [r3, #0]
 80120c6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120ca:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80120ce:	466d      	mov	r5, sp
 80120d0:	f103 020c 	add.w	r2, r3, #12
 80120d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80120dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80120de:	4620      	mov	r0, r4
 80120e0:	f000 fae9 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 80120e4:	4b5c      	ldr	r3, [pc, #368]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 80120e6:	681c      	ldr	r4, [r3, #0]
 80120e8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80120ec:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80120f0:	466d      	mov	r5, sp
 80120f2:	f103 020c 	add.w	r2, r3, #12
 80120f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80120fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012100:	4620      	mov	r0, r4
 8012102:	f000 fad8 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8012106:	4b54      	ldr	r3, [pc, #336]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8012108:	681c      	ldr	r4, [r3, #0]
 801210a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801210e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8012112:	466d      	mov	r5, sp
 8012114:	f103 020c 	add.w	r2, r3, #12
 8012118:	e892 0003 	ldmia.w	r2, {r0, r1}
 801211c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012122:	4620      	mov	r0, r4
 8012124:	f000 fac7 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8012128:	4b4b      	ldr	r3, [pc, #300]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 801212a:	681c      	ldr	r4, [r3, #0]
 801212c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012130:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8012134:	466d      	mov	r5, sp
 8012136:	f103 020c 	add.w	r2, r3, #12
 801213a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801213e:	e885 0003 	stmia.w	r5, {r0, r1}
 8012142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012144:	4620      	mov	r0, r4
 8012146:	f000 fab6 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 801214a:	4b43      	ldr	r3, [pc, #268]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 801214c:	681c      	ldr	r4, [r3, #0]
 801214e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012152:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8012156:	466d      	mov	r5, sp
 8012158:	f103 020c 	add.w	r2, r3, #12
 801215c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012160:	e885 0003 	stmia.w	r5, {r0, r1}
 8012164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012166:	4620      	mov	r0, r4
 8012168:	f000 faa5 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 801216c:	4b3a      	ldr	r3, [pc, #232]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 801216e:	681c      	ldr	r4, [r3, #0]
 8012170:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012174:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8012178:	466d      	mov	r5, sp
 801217a:	f103 020c 	add.w	r2, r3, #12
 801217e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012182:	e885 0003 	stmia.w	r5, {r0, r1}
 8012186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012188:	4620      	mov	r0, r4
 801218a:	f000 fa94 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 801218e:	4b32      	ldr	r3, [pc, #200]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8012190:	681c      	ldr	r4, [r3, #0]
 8012192:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8012196:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801219a:	466d      	mov	r5, sp
 801219c:	f103 020c 	add.w	r2, r3, #12
 80121a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80121a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121aa:	4620      	mov	r0, r4
 80121ac:	f000 fa83 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 80121b0:	4b29      	ldr	r3, [pc, #164]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 80121b2:	681c      	ldr	r4, [r3, #0]
 80121b4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121b8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80121bc:	466d      	mov	r5, sp
 80121be:	f103 020c 	add.w	r2, r3, #12
 80121c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80121ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121cc:	4620      	mov	r0, r4
 80121ce:	f000 fa72 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 80121d2:	4b21      	ldr	r3, [pc, #132]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 80121d4:	681c      	ldr	r4, [r3, #0]
 80121d6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121da:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80121de:	466d      	mov	r5, sp
 80121e0:	f103 020c 	add.w	r2, r3, #12
 80121e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80121ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80121ee:	4620      	mov	r0, r4
 80121f0:	f000 fa61 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 80121f4:	4b18      	ldr	r3, [pc, #96]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 80121f6:	681c      	ldr	r4, [r3, #0]
 80121f8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80121fc:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8012200:	466d      	mov	r5, sp
 8012202:	f103 020c 	add.w	r2, r3, #12
 8012206:	e892 0003 	ldmia.w	r2, {r0, r1}
 801220a:	e885 0003 	stmia.w	r5, {r0, r1}
 801220e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012210:	4620      	mov	r0, r4
 8012212:	f000 fa50 	bl	80126b6 <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, aboutdev);
 8012216:	4b10      	ldr	r3, [pc, #64]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 8012218:	681c      	ldr	r4, [r3, #0]
 801221a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 801221e:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8012222:	466d      	mov	r5, sp
 8012224:	f103 020c 	add.w	r2, r3, #12
 8012228:	e892 0003 	ldmia.w	r2, {r0, r1}
 801222c:	e885 0003 	stmia.w	r5, {r0, r1}
 8012230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012232:	4620      	mov	r0, r4
 8012234:	f000 fa3f 	bl	80126b6 <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8012238:	4b07      	ldr	r3, [pc, #28]	@ (8012258 <initializeEmbeddedCli+0x9a0>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4a07      	ldr	r2, [pc, #28]	@ (801225c <initializeEmbeddedCli+0x9a4>)
 801223e:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8012240:	4b07      	ldr	r3, [pc, #28]	@ (8012260 <initializeEmbeddedCli+0x9a8>)
 8012242:	2201      	movs	r2, #1
 8012244:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8012246:	4b07      	ldr	r3, [pc, #28]	@ (8012264 <initializeEmbeddedCli+0x9ac>)
 8012248:	2200      	movs	r2, #0
 801224a:	701a      	strb	r2, [r3, #0]
}
 801224c:	bf00      	nop
 801224e:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8012252:	46bd      	mov	sp, r7
 8012254:	bdb0      	pop	{r4, r5, r7, pc}
 8012256:	bf00      	nop
 8012258:	20001b2c 	.word	0x20001b2c
 801225c:	0800f4e1 	.word	0x0800f4e1
 8012260:	20001b39 	.word	0x20001b39
 8012264:	20001b3a 	.word	0x20001b3a

08012268 <console_process>:

void console_process(void) {
 8012268:	b580      	push	{r7, lr}
 801226a:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 801226c:	4b03      	ldr	r3, [pc, #12]	@ (801227c <console_process+0x14>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4618      	mov	r0, r3
 8012272:	f000 f990 	bl	8012596 <embeddedCliProcess>
}
 8012276:	bf00      	nop
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	20001b2c 	.word	0x20001b2c

08012280 <console_uart_deinit>:

void console_uart_deinit() {
 8012280:	b580      	push	{r7, lr}
 8012282:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8012284:	4803      	ldr	r0, [pc, #12]	@ (8012294 <console_uart_deinit+0x14>)
 8012286:	f7f9 ffad 	bl	800c1e4 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 801228a:	4802      	ldr	r0, [pc, #8]	@ (8012294 <console_uart_deinit+0x14>)
 801228c:	f7f1 fd14 	bl	8003cb8 <HAL_UART_MspDeInit>
}
 8012290:	bf00      	nop
 8012292:	bd80      	pop	{r7, pc}
 8012294:	20001a74 	.word	0x20001a74

08012298 <console_uart_init>:
void console_uart_init() {
 8012298:	b580      	push	{r7, lr}
 801229a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 801229c:	4815      	ldr	r0, [pc, #84]	@ (80122f4 <console_uart_init+0x5c>)
 801229e:	f7f9 ffa1 	bl	800c1e4 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 80122a2:	4b14      	ldr	r3, [pc, #80]	@ (80122f4 <console_uart_init+0x5c>)
 80122a4:	4a14      	ldr	r2, [pc, #80]	@ (80122f8 <console_uart_init+0x60>)
 80122a6:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80122a8:	4b12      	ldr	r3, [pc, #72]	@ (80122f4 <console_uart_init+0x5c>)
 80122aa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80122ae:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80122b0:	4b10      	ldr	r3, [pc, #64]	@ (80122f4 <console_uart_init+0x5c>)
 80122b2:	2200      	movs	r2, #0
 80122b4:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80122b6:	4b0f      	ldr	r3, [pc, #60]	@ (80122f4 <console_uart_init+0x5c>)
 80122b8:	2200      	movs	r2, #0
 80122ba:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80122bc:	4b0d      	ldr	r3, [pc, #52]	@ (80122f4 <console_uart_init+0x5c>)
 80122be:	2200      	movs	r2, #0
 80122c0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80122c2:	4b0c      	ldr	r3, [pc, #48]	@ (80122f4 <console_uart_init+0x5c>)
 80122c4:	220c      	movs	r2, #12
 80122c6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80122c8:	4b0a      	ldr	r3, [pc, #40]	@ (80122f4 <console_uart_init+0x5c>)
 80122ca:	2200      	movs	r2, #0
 80122cc:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80122ce:	4b09      	ldr	r3, [pc, #36]	@ (80122f4 <console_uart_init+0x5c>)
 80122d0:	2200      	movs	r2, #0
 80122d2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80122d4:	4807      	ldr	r0, [pc, #28]	@ (80122f4 <console_uart_init+0x5c>)
 80122d6:	f7f9 ff35 	bl	800c144 <HAL_UART_Init>
 80122da:	4603      	mov	r3, r0
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d001      	beq.n	80122e4 <console_uart_init+0x4c>
		Error_Handler();
 80122e0:	f7f1 f9c8 	bl	8003674 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 80122e4:	2201      	movs	r2, #1
 80122e6:	4905      	ldr	r1, [pc, #20]	@ (80122fc <console_uart_init+0x64>)
 80122e8:	4802      	ldr	r0, [pc, #8]	@ (80122f4 <console_uart_init+0x5c>)
 80122ea:	f7fa f838 	bl	800c35e <HAL_UART_Receive_IT>
}
 80122ee:	bf00      	nop
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	20001a74 	.word	0x20001a74
 80122f8:	40011000 	.word	0x40011000
 80122fc:	20001b38 	.word	0x20001b38

08012300 <console_init>:

void console_init(void) {
 8012300:	b580      	push	{r7, lr}
 8012302:	af00      	add	r7, sp, #0
	console_uart_init();
 8012304:	f7ff ffc8 	bl	8012298 <console_uart_init>
	initializeEmbeddedCli();
 8012308:	f7ff fad6 	bl	80118b8 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 801230c:	2201      	movs	r2, #1
 801230e:	4903      	ldr	r1, [pc, #12]	@ (801231c <console_init+0x1c>)
 8012310:	4803      	ldr	r0, [pc, #12]	@ (8012320 <console_init+0x20>)
 8012312:	f7fa f824 	bl	800c35e <HAL_UART_Receive_IT>
}
 8012316:	bf00      	nop
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	20001b38 	.word	0x20001b38
 8012320:	20001a74 	.word	0x20001a74

08012324 <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8012324:	b480      	push	{r7}
 8012326:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8012328:	4b0e      	ldr	r3, [pc, #56]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
 801232a:	2240      	movs	r2, #64	@ 0x40
 801232c:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 801232e:	4b0d      	ldr	r3, [pc, #52]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
 8012330:	2240      	movs	r2, #64	@ 0x40
 8012332:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8012334:	4b0b      	ldr	r3, [pc, #44]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
 8012336:	2280      	movs	r2, #128	@ 0x80
 8012338:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 801233a:	4b0a      	ldr	r3, [pc, #40]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
 801233c:	2200      	movs	r2, #0
 801233e:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8012340:	4b08      	ldr	r3, [pc, #32]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
 8012342:	2200      	movs	r2, #0
 8012344:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 70;
 8012346:	4b07      	ldr	r3, [pc, #28]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
 8012348:	2246      	movs	r2, #70	@ 0x46
 801234a:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 801234c:	4b05      	ldr	r3, [pc, #20]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
 801234e:	2201      	movs	r2, #1
 8012350:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8012352:	4b04      	ldr	r3, [pc, #16]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
 8012354:	4a04      	ldr	r2, [pc, #16]	@ (8012368 <embeddedCliDefaultConfig+0x44>)
 8012356:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8012358:	4b02      	ldr	r3, [pc, #8]	@ (8012364 <embeddedCliDefaultConfig+0x40>)
}
 801235a:	4618      	mov	r0, r3
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr
 8012364:	20001b40 	.word	0x20001b40
 8012368:	08024500 	.word	0x08024500

0801236c <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 801236c:	b480      	push	{r7}
 801236e:	b085      	sub	sp, #20
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	895b      	ldrh	r3, [r3, #10]
 8012378:	2201      	movs	r2, #1
 801237a:	4413      	add	r3, r2
 801237c:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	889b      	ldrh	r3, [r3, #4]
 8012382:	3303      	adds	r3, #3
 8012384:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	88db      	ldrh	r3, [r3, #6]
 801238a:	3303      	adds	r3, #3
 801238c:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 801238e:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	891b      	ldrh	r3, [r3, #8]
 8012394:	3303      	adds	r3, #3
 8012396:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8012398:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 801239a:	89fa      	ldrh	r2, [r7, #14]
 801239c:	4613      	mov	r3, r2
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	4413      	add	r3, r2
 80123a2:	009b      	lsls	r3, r3, #2
 80123a4:	3303      	adds	r3, #3
 80123a6:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 80123a8:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 80123aa:	89fb      	ldrh	r3, [r7, #14]
 80123ac:	3303      	adds	r3, #3
 80123ae:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 80123b0:	4413      	add	r3, r2
 80123b2:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	b29b      	uxth	r3, r3
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3714      	adds	r7, #20
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr

080123c6 <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b088      	sub	sp, #32
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 80123ce:	2300      	movs	r3, #0
 80123d0:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	895b      	ldrh	r3, [r3, #10]
 80123d6:	2201      	movs	r2, #1
 80123d8:	4413      	add	r3, r2
 80123da:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff ffc5 	bl	801236c <embeddedCliRequiredSize>
 80123e2:	4603      	mov	r3, r0
 80123e4:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 80123e6:	2300      	movs	r3, #0
 80123e8:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	68db      	ldr	r3, [r3, #12]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d10f      	bne.n	8012412 <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 80123f2:	6938      	ldr	r0, [r7, #16]
 80123f4:	f00b f9fc 	bl	801d7f0 <malloc>
 80123f8:	4603      	mov	r3, r0
 80123fa:	461a      	mov	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d101      	bne.n	801240c <embeddedCliNew+0x46>
            return NULL;
 8012408:	2300      	movs	r3, #0
 801240a:	e092      	b.n	8012532 <embeddedCliNew+0x16c>
        allocated = true;
 801240c:	2301      	movs	r3, #1
 801240e:	77fb      	strb	r3, [r7, #31]
 8012410:	e007      	b.n	8012422 <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	8a1b      	ldrh	r3, [r3, #16]
 8012416:	461a      	mov	r2, r3
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	4293      	cmp	r3, r2
 801241c:	d901      	bls.n	8012422 <embeddedCliNew+0x5c>
        return NULL;
 801241e:	2300      	movs	r3, #0
 8012420:	e087      	b.n	8012532 <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8012428:	693a      	ldr	r2, [r7, #16]
 801242a:	2100      	movs	r1, #0
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f00c fc5d 	bl	801ecec <memset>

    cli = (EmbeddedCli *) buf;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	3310      	adds	r3, #16
 801243a:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	68fa      	ldr	r2, [r7, #12]
 8012440:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	3334      	adds	r3, #52	@ 0x34
 8012446:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	68db      	ldr	r3, [r3, #12]
 801244c:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	68fa      	ldr	r2, [r7, #12]
 8012452:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	889b      	ldrh	r3, [r3, #4]
 8012458:	3303      	adds	r3, #3
 801245a:	f023 0303 	bic.w	r3, r3, #3
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	4413      	add	r3, r2
 8012462:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	88db      	ldrh	r3, [r3, #6]
 801246e:	3303      	adds	r3, #3
 8012470:	f023 0303 	bic.w	r3, r3, #3
 8012474:	68fa      	ldr	r2, [r7, #12]
 8012476:	4413      	add	r3, r2
 8012478:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	68fa      	ldr	r2, [r7, #12]
 801247e:	625a      	str	r2, [r3, #36]	@ 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8012480:	8afa      	ldrh	r2, [r7, #22]
 8012482:	4613      	mov	r3, r2
 8012484:	009b      	lsls	r3, r3, #2
 8012486:	4413      	add	r3, r2
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	3303      	adds	r3, #3
 801248c:	f023 0303 	bic.w	r3, r3, #3
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	4413      	add	r3, r2
 8012494:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	629a      	str	r2, [r3, #40]	@ 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 801249c:	8afb      	ldrh	r3, [r7, #22]
 801249e:	3303      	adds	r3, #3
 80124a0:	f023 0303 	bic.w	r3, r3, #3
 80124a4:	68fa      	ldr	r2, [r7, #12]
 80124a6:	4413      	add	r3, r2
 80124a8:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	68fa      	ldr	r2, [r7, #12]
 80124ae:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	891a      	ldrh	r2, [r3, #8]
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	811a      	strh	r2, [r3, #8]

    if (allocated)
 80124b8:	7ffb      	ldrb	r3, [r7, #31]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d008      	beq.n	80124d0 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80124c4:	f043 0304 	orr.w	r3, r3, #4
 80124c8:	b2da      	uxtb	r2, r3
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    if (config->enableAutoComplete)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	7c9b      	ldrb	r3, [r3, #18]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d008      	beq.n	80124ea <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80124de:	f043 0320 	orr.w	r3, r3, #32
 80124e2:	b2da      	uxtb	r2, r3
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	889a      	ldrh	r2, [r3, #4]
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	2200      	movs	r2, #0
 80124f6:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	2200      	movs	r2, #0
 80124fc:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	88da      	ldrh	r2, [r3, #6]
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	845a      	strh	r2, [r3, #34]	@ 0x22
    impl->bindingsCount = 0;
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	2200      	movs	r2, #0
 801250a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	895b      	ldrh	r3, [r3, #10]
 8012510:	2201      	movs	r2, #1
 8012512:	4413      	add	r3, r2
 8012514:	b29a      	uxth	r2, r3
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	85da      	strh	r2, [r3, #46]	@ 0x2e
    impl->lastChar = '\0';
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	2200      	movs	r2, #0
 801251e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    impl->invitation = config->invitation;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 801252a:	69b8      	ldr	r0, [r7, #24]
 801252c:	f000 fc5e 	bl	8012dec <initInternalBindings>

    return cli;
 8012530:	69bb      	ldr	r3, [r7, #24]
}
 8012532:	4618      	mov	r0, r3
 8012534:	3720      	adds	r7, #32
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 801253a:	b580      	push	{r7, lr}
 801253c:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 801253e:	f7ff fef1 	bl	8012324 <embeddedCliDefaultConfig>
 8012542:	4603      	mov	r3, r0
 8012544:	4618      	mov	r0, r3
 8012546:	f7ff ff3e 	bl	80123c6 <embeddedCliNew>
 801254a:	4603      	mov	r3, r0
}
 801254c:	4618      	mov	r0, r3
 801254e:	bd80      	pop	{r7, pc}

08012550 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	460b      	mov	r3, r1
 801255a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	3310      	adds	r3, #16
 8012566:	78fa      	ldrb	r2, [r7, #3]
 8012568:	4611      	mov	r1, r2
 801256a:	4618      	mov	r0, r3
 801256c:	f001 f865 	bl	801363a <fifoBufPush>
 8012570:	4603      	mov	r3, r0
 8012572:	f083 0301 	eor.w	r3, r3, #1
 8012576:	b2db      	uxtb	r3, r3
 8012578:	2b00      	cmp	r3, #0
 801257a:	d008      	beq.n	801258e <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012582:	f043 0301 	orr.w	r3, r3, #1
 8012586:	b2da      	uxtb	r2, r3
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
}
 801258e:	bf00      	nop
 8012590:	3710      	adds	r7, #16
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8012596:	b580      	push	{r7, lr}
 8012598:	b084      	sub	sp, #16
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f000 8083 	beq.w	80126ae <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125b4:	f003 0302 	and.w	r3, r3, #2
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d155      	bne.n	8012668 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125c2:	f043 0302 	orr.w	r3, r3, #2
 80125c6:	b2da      	uxtb	r2, r3
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        writeToOutput(cli, impl->invitation);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	4619      	mov	r1, r3
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f000 ff8f 	bl	80134f8 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 80125da:	e045      	b.n	8012668 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	3310      	adds	r3, #16
 80125e0:	4618      	mov	r0, r3
 80125e2:	f001 f802 	bl	80135ea <fifoBufPop>
 80125e6:	4603      	mov	r3, r0
 80125e8:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80125f0:	f003 0308 	and.w	r3, r3, #8
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d005      	beq.n	8012604 <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 80125f8:	7afb      	ldrb	r3, [r7, #11]
 80125fa:	4619      	mov	r1, r3
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 fa17 	bl	8012a30 <onEscapedInput>
 8012602:	e02a      	b.n	801265a <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801260a:	2b1b      	cmp	r3, #27
 801260c:	d10c      	bne.n	8012628 <embeddedCliProcess+0x92>
 801260e:	7afb      	ldrb	r3, [r7, #11]
 8012610:	2b5b      	cmp	r3, #91	@ 0x5b
 8012612:	d109      	bne.n	8012628 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801261a:	f043 0308 	orr.w	r3, r3, #8
 801261e:	b2da      	uxtb	r2, r3
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012626:	e018      	b.n	801265a <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8012628:	7afb      	ldrb	r3, [r7, #11]
 801262a:	4618      	mov	r0, r3
 801262c:	f000 ff85 	bl	801353a <isControlChar>
 8012630:	4603      	mov	r3, r0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d005      	beq.n	8012642 <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 8012636:	7afb      	ldrb	r3, [r7, #11]
 8012638:	4619      	mov	r1, r3
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 fa54 	bl	8012ae8 <onControlInput>
 8012640:	e00b      	b.n	801265a <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 8012642:	7afb      	ldrb	r3, [r7, #11]
 8012644:	4618      	mov	r0, r3
 8012646:	f000 ff98 	bl	801357a <isDisplayableChar>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d004      	beq.n	801265a <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 8012650:	7afb      	ldrb	r3, [r7, #11]
 8012652:	4619      	mov	r1, r3
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f000 fa17 	bl	8012a88 <onCharInput>
        }

        printLiveAutocompletion(cli);
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 fe35 	bl	80132ca <printLiveAutocompletion>

        impl->lastChar = c;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	7afa      	ldrb	r2, [r7, #11]
 8012664:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	3310      	adds	r3, #16
 801266c:	4618      	mov	r0, r3
 801266e:	f000 ff9b 	bl	80135a8 <fifoBufAvailable>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1b1      	bne.n	80125dc <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801267e:	f003 0301 	and.w	r3, r3, #1
 8012682:	2b00      	cmp	r3, #0
 8012684:	d014      	beq.n	80126b0 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2200      	movs	r2, #0
 801268a:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	69db      	ldr	r3, [r3, #28]
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	8c12      	ldrh	r2, [r2, #32]
 8012694:	4413      	add	r3, r2
 8012696:	2200      	movs	r2, #0
 8012698:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80126a0:	f023 0301 	bic.w	r3, r3, #1
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80126ac:	e000      	b.n	80126b0 <embeddedCliProcess+0x11a>
        return;
 80126ae:	bf00      	nop
    }
}
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 80126b6:	b084      	sub	sp, #16
 80126b8:	b4b0      	push	{r4, r5, r7}
 80126ba:	b085      	sub	sp, #20
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80126c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d101      	bne.n	80126de <embeddedCliAddBinding+0x28>
        return false;
 80126da:	2300      	movs	r3, #0
 80126dc:	e017      	b.n	801270e <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80126e6:	4619      	mov	r1, r3
 80126e8:	460b      	mov	r3, r1
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	440b      	add	r3, r1
 80126ee:	009b      	lsls	r3, r3, #2
 80126f0:	4413      	add	r3, r2
 80126f2:	461d      	mov	r5, r3
 80126f4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80126f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80126fc:	6823      	ldr	r3, [r4, #0]
 80126fe:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012704:	3301      	adds	r3, #1
 8012706:	b29a      	uxth	r2, r3
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    return true;
 801270c:	2301      	movs	r3, #1
}
 801270e:	4618      	mov	r0, r3
 8012710:	3714      	adds	r7, #20
 8012712:	46bd      	mov	sp, r7
 8012714:	bcb0      	pop	{r4, r5, r7}
 8012716:	b004      	add	sp, #16
 8012718:	4770      	bx	lr
	...

0801271c <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 801271c:	b580      	push	{r7, lr}
 801271e:	b084      	sub	sp, #16
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d031      	beq.n	8012792 <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801273a:	f003 0310 	and.w	r3, r3, #16
 801273e:	2b00      	cmp	r3, #0
 8012740:	d102      	bne.n	8012748 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 fea6 	bl	8013494 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 8012748:	6839      	ldr	r1, [r7, #0]
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 fed4 	bl	80134f8 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8012750:	4b12      	ldr	r3, [pc, #72]	@ (801279c <embeddedCliPrint+0x80>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	4619      	mov	r1, r3
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f000 fece 	bl	80134f8 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012762:	f003 0310 	and.w	r3, r3, #16
 8012766:	2b00      	cmp	r3, #0
 8012768:	d114      	bne.n	8012794 <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	4619      	mov	r1, r3
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f000 fec1 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	69db      	ldr	r3, [r3, #28]
 801277a:	4619      	mov	r1, r3
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 febb 	bl	80134f8 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	8c1a      	ldrh	r2, [r3, #32]
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	861a      	strh	r2, [r3, #48]	@ 0x30

        printLiveAutocompletion(cli);
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f000 fd9d 	bl	80132ca <printLiveAutocompletion>
 8012790:	e000      	b.n	8012794 <embeddedCliPrint+0x78>
        return;
 8012792:	bf00      	nop
    }
}
 8012794:	3710      	adds	r7, #16
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
 801279a:	bf00      	nop
 801279c:	20000024 	.word	0x20000024

080127a0 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b088      	sub	sp, #32
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d066      	beq.n	801287c <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 80127ae:	4b35      	ldr	r3, [pc, #212]	@ (8012884 <embeddedCliTokenizeArgs+0xe4>)
 80127b0:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 80127b2:	2300      	movs	r3, #0
 80127b4:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 80127b6:	2300      	movs	r3, #0
 80127b8:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 80127ba:	2300      	movs	r3, #0
 80127bc:	61bb      	str	r3, [r7, #24]

    int i = 0;
 80127be:	2300      	movs	r3, #0
 80127c0:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 80127c2:	e047      	b.n	8012854 <embeddedCliTokenizeArgs+0xb4>
        ++i;
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	3301      	adds	r3, #1
 80127c8:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 80127ca:	7fbb      	ldrb	r3, [r7, #30]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d002      	beq.n	80127d6 <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 80127d0:	2300      	movs	r3, #0
 80127d2:	77bb      	strb	r3, [r7, #30]
 80127d4:	e029      	b.n	801282a <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 80127d6:	7cfb      	ldrb	r3, [r7, #19]
 80127d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80127da:	d102      	bne.n	80127e2 <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 80127dc:	2301      	movs	r3, #1
 80127de:	77bb      	strb	r3, [r7, #30]
            continue;
 80127e0:	e038      	b.n	8012854 <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 80127e2:	7cfb      	ldrb	r3, [r7, #19]
 80127e4:	2b22      	cmp	r3, #34	@ 0x22
 80127e6:	d110      	bne.n	801280a <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 80127e8:	7ffb      	ldrb	r3, [r7, #31]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	bf14      	ite	ne
 80127ee:	2301      	movne	r3, #1
 80127f0:	2300      	moveq	r3, #0
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	f083 0301 	eor.w	r3, r3, #1
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	77fb      	strb	r3, [r7, #31]
 80127fc:	7ffb      	ldrb	r3, [r7, #31]
 80127fe:	f003 0301 	and.w	r3, r3, #1
 8012802:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 8012804:	2300      	movs	r3, #0
 8012806:	74fb      	strb	r3, [r7, #19]
 8012808:	e00f      	b.n	801282a <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 801280a:	7ffb      	ldrb	r3, [r7, #31]
 801280c:	f083 0301 	eor.w	r3, r3, #1
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b00      	cmp	r3, #0
 8012814:	d009      	beq.n	801282a <embeddedCliTokenizeArgs+0x8a>
 8012816:	7cfb      	ldrb	r3, [r7, #19]
 8012818:	4619      	mov	r1, r3
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f00c fa6e 	bl	801ecfc <strchr>
 8012820:	4603      	mov	r3, r0
 8012822:	2b00      	cmp	r3, #0
 8012824:	d001      	beq.n	801282a <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 8012826:	2300      	movs	r3, #0
 8012828:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 801282a:	7cfb      	ldrb	r3, [r7, #19]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d109      	bne.n	8012844 <embeddedCliTokenizeArgs+0xa4>
 8012830:	69bb      	ldr	r3, [r7, #24]
 8012832:	2b00      	cmp	r3, #0
 8012834:	dd0e      	ble.n	8012854 <embeddedCliTokenizeArgs+0xb4>
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	3b01      	subs	r3, #1
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	4413      	add	r3, r2
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d007      	beq.n	8012854 <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 8012844:	69bb      	ldr	r3, [r7, #24]
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	4413      	add	r3, r2
 801284a:	7cfa      	ldrb	r2, [r7, #19]
 801284c:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	3301      	adds	r3, #1
 8012852:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	4413      	add	r3, r2
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	74fb      	strb	r3, [r7, #19]
 801285e:	7cfb      	ldrb	r3, [r7, #19]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d1af      	bne.n	80127c4 <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 8012864:	69bb      	ldr	r3, [r7, #24]
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	4413      	add	r3, r2
 801286a:	2200      	movs	r2, #0
 801286c:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	3301      	adds	r3, #1
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	4413      	add	r3, r2
 8012876:	2200      	movs	r2, #0
 8012878:	701a      	strb	r2, [r3, #0]
 801287a:	e000      	b.n	801287e <embeddedCliTokenizeArgs+0xde>
        return;
 801287c:	bf00      	nop
}
 801287e:	3720      	adds	r7, #32
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	08024504 	.word	0x08024504

08012888 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	460b      	mov	r3, r1
 8012892:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8012894:	887b      	ldrh	r3, [r7, #2]
 8012896:	4619      	mov	r1, r3
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f000 ffd5 	bl	8013848 <getTokenPosition>
 801289e:	4603      	mov	r3, r0
 80128a0:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80128a2:	89fb      	ldrh	r3, [r7, #14]
 80128a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80128a8:	4293      	cmp	r3, r2
 80128aa:	d003      	beq.n	80128b4 <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 80128ac:	89fb      	ldrh	r3, [r7, #14]
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	4413      	add	r3, r2
 80128b2:	e000      	b.n	80128b6 <embeddedCliGetToken+0x2e>
    else
        return NULL;
 80128b4:	2300      	movs	r3, #0
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3710      	adds	r7, #16
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}

080128be <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 80128be:	b580      	push	{r7, lr}
 80128c0:	b084      	sub	sp, #16
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	460b      	mov	r3, r1
 80128c8:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80128ca:	887b      	ldrh	r3, [r7, #2]
 80128cc:	4619      	mov	r1, r3
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f000 ffba 	bl	8013848 <getTokenPosition>
 80128d4:	4603      	mov	r3, r0
 80128d6:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80128d8:	89fb      	ldrh	r3, [r7, #14]
 80128da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80128de:	4293      	cmp	r3, r2
 80128e0:	d003      	beq.n	80128ea <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 80128e2:	89fb      	ldrh	r3, [r7, #14]
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	4413      	add	r3, r2
 80128e8:	e000      	b.n	80128ec <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 80128ea:	2300      	movs	r3, #0
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3710      	adds	r7, #16
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 80128f4:	b480      	push	{r7}
 80128f6:	b085      	sub	sp, #20
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d003      	beq.n	801290a <embeddedCliGetTokenCount+0x16>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d101      	bne.n	801290e <embeddedCliGetTokenCount+0x1a>
        return 0;
 801290a:	2300      	movs	r3, #0
 801290c:	e019      	b.n	8012942 <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 801290e:	2300      	movs	r3, #0
 8012910:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 8012912:	2301      	movs	r3, #1
 8012914:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	687a      	ldr	r2, [r7, #4]
 801291a:	4413      	add	r3, r2
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d109      	bne.n	8012936 <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	3301      	adds	r3, #1
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	4413      	add	r3, r2
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d006      	beq.n	801293e <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8012930:	897b      	ldrh	r3, [r7, #10]
 8012932:	3301      	adds	r3, #1
 8012934:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	3301      	adds	r3, #1
 801293a:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 801293c:	e7eb      	b.n	8012916 <embeddedCliGetTokenCount+0x22>
                break;
 801293e:	bf00      	nop
    }

    return tokenCount;
 8012940:	897b      	ldrh	r3, [r7, #10]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
	...

08012950 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	460b      	mov	r3, r1
 801295a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	899b      	ldrh	r3, [r3, #12]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d05c      	beq.n	8012a24 <navigateHistory+0xd4>
 801296a:	78fb      	ldrb	r3, [r7, #3]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d005      	beq.n	801297c <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	895a      	ldrh	r2, [r3, #10]
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	899b      	ldrh	r3, [r3, #12]
 8012978:	429a      	cmp	r2, r3
 801297a:	d053      	beq.n	8012a24 <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 801297c:	78fb      	ldrb	r3, [r7, #3]
 801297e:	f083 0301 	eor.w	r3, r3, #1
 8012982:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 8012984:	2b00      	cmp	r3, #0
 8012986:	d003      	beq.n	8012990 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	895b      	ldrh	r3, [r3, #10]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d049      	beq.n	8012a24 <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 fd7f 	bl	8013494 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4619      	mov	r1, r3
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 fdab 	bl	80134f8 <writeToOutput>

    if (navigateUp)
 80129a2:	78fb      	ldrb	r3, [r7, #3]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d006      	beq.n	80129b6 <navigateHistory+0x66>
        ++impl->history.current;
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	895b      	ldrh	r3, [r3, #10]
 80129ac:	3301      	adds	r3, #1
 80129ae:	b29a      	uxth	r2, r3
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	815a      	strh	r2, [r3, #10]
 80129b4:	e005      	b.n	80129c2 <navigateHistory+0x72>
    else
        --impl->history.current;
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	895b      	ldrh	r3, [r3, #10]
 80129ba:	3b01      	subs	r3, #1
 80129bc:	b29a      	uxth	r2, r3
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	1d1a      	adds	r2, r3, #4
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	895b      	ldrh	r3, [r3, #10]
 80129ca:	4619      	mov	r1, r3
 80129cc:	4610      	mov	r0, r2
 80129ce:	f000 fec2 	bl	8013756 <historyGet>
 80129d2:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d101      	bne.n	80129de <navigateHistory+0x8e>
        item = "";
 80129da:	4b14      	ldr	r3, [pc, #80]	@ (8012a2c <navigateHistory+0xdc>)
 80129dc:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 80129de:	6978      	ldr	r0, [r7, #20]
 80129e0:	f7ed fc5e 	bl	80002a0 <strlen>
 80129e4:	4603      	mov	r3, r0
 80129e6:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	69db      	ldr	r3, [r3, #28]
 80129ec:	89fa      	ldrh	r2, [r7, #14]
 80129ee:	6979      	ldr	r1, [r7, #20]
 80129f0:	4618      	mov	r0, r3
 80129f2:	f00c fa92 	bl	801ef1a <memcpy>
    impl->cmdBuffer[len] = '\0';
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	69da      	ldr	r2, [r3, #28]
 80129fa:	89fb      	ldrh	r3, [r7, #14]
 80129fc:	4413      	add	r3, r2
 80129fe:	2200      	movs	r2, #0
 8012a00:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	89fa      	ldrh	r2, [r7, #14]
 8012a06:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	69db      	ldr	r3, [r3, #28]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 fd72 	bl	80134f8 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	8c1a      	ldrh	r2, [r3, #32]
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	861a      	strh	r2, [r3, #48]	@ 0x30

    printLiveAutocompletion(cli);
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f000 fc54 	bl	80132ca <printLiveAutocompletion>
 8012a22:	e000      	b.n	8012a26 <navigateHistory+0xd6>
        return;
 8012a24:	bf00      	nop
}
 8012a26:	3718      	adds	r7, #24
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	08024508 	.word	0x08024508

08012a30 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
 8012a38:	460b      	mov	r3, r1
 8012a3a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 8012a42:	78fb      	ldrb	r3, [r7, #3]
 8012a44:	2b3f      	cmp	r3, #63	@ 0x3f
 8012a46:	d91b      	bls.n	8012a80 <onEscapedInput+0x50>
 8012a48:	78fb      	ldrb	r3, [r7, #3]
 8012a4a:	2b7e      	cmp	r3, #126	@ 0x7e
 8012a4c:	d818      	bhi.n	8012a80 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012a54:	f023 0308 	bic.w	r3, r3, #8
 8012a58:	b2da      	uxtb	r2, r3
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        if (c == 'A' || c == 'B') {
 8012a60:	78fb      	ldrb	r3, [r7, #3]
 8012a62:	2b41      	cmp	r3, #65	@ 0x41
 8012a64:	d002      	beq.n	8012a6c <onEscapedInput+0x3c>
 8012a66:	78fb      	ldrb	r3, [r7, #3]
 8012a68:	2b42      	cmp	r3, #66	@ 0x42
 8012a6a:	d109      	bne.n	8012a80 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 8012a6c:	78fb      	ldrb	r3, [r7, #3]
 8012a6e:	2b41      	cmp	r3, #65	@ 0x41
 8012a70:	bf0c      	ite	eq
 8012a72:	2301      	moveq	r3, #1
 8012a74:	2300      	movne	r3, #0
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	4619      	mov	r1, r3
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff ff68 	bl	8012950 <navigateHistory>
        }
    }
}
 8012a80:	bf00      	nop
 8012a82:	3710      	adds	r7, #16
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
 8012a90:	460b      	mov	r3, r1
 8012a92:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	8c1b      	ldrh	r3, [r3, #32]
 8012a9e:	3302      	adds	r3, #2
 8012aa0:	68fa      	ldr	r2, [r7, #12]
 8012aa2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	da1a      	bge.n	8012ade <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	69db      	ldr	r3, [r3, #28]
 8012aac:	68fa      	ldr	r2, [r7, #12]
 8012aae:	8c12      	ldrh	r2, [r2, #32]
 8012ab0:	4413      	add	r3, r2
 8012ab2:	78fa      	ldrb	r2, [r7, #3]
 8012ab4:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	8c1b      	ldrh	r3, [r3, #32]
 8012aba:	3301      	adds	r3, #1
 8012abc:	b29a      	uxth	r2, r3
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	69db      	ldr	r3, [r3, #28]
 8012ac6:	68fa      	ldr	r2, [r7, #12]
 8012ac8:	8c12      	ldrh	r2, [r2, #32]
 8012aca:	4413      	add	r3, r2
 8012acc:	2200      	movs	r2, #0
 8012ace:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	78fa      	ldrb	r2, [r7, #3]
 8012ad6:	4611      	mov	r1, r2
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	4798      	blx	r3
 8012adc:	e000      	b.n	8012ae0 <onCharInput+0x58>
        return;
 8012ade:	bf00      	nop
}
 8012ae0:	3710      	adds	r7, #16
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}
	...

08012ae8 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b084      	sub	sp, #16
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	460b      	mov	r3, r1
 8012af2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	68db      	ldr	r3, [r3, #12]
 8012af8:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012b00:	2b0d      	cmp	r3, #13
 8012b02:	d102      	bne.n	8012b0a <onControlInput+0x22>
 8012b04:	78fb      	ldrb	r3, [r7, #3]
 8012b06:	2b0a      	cmp	r3, #10
 8012b08:	d062      	beq.n	8012bd0 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8012b10:	2b0a      	cmp	r3, #10
 8012b12:	d102      	bne.n	8012b1a <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 8012b14:	78fb      	ldrb	r3, [r7, #3]
 8012b16:	2b0d      	cmp	r3, #13
 8012b18:	d05a      	beq.n	8012bd0 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8012b1a:	78fb      	ldrb	r3, [r7, #3]
 8012b1c:	2b0d      	cmp	r3, #13
 8012b1e:	d002      	beq.n	8012b26 <onControlInput+0x3e>
 8012b20:	78fb      	ldrb	r3, [r7, #3]
 8012b22:	2b0a      	cmp	r3, #10
 8012b24:	d126      	bne.n	8012b74 <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 fc2a 	bl	8013380 <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8012b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8012bd8 <onControlInput+0xf0>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4619      	mov	r1, r3
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f000 fce0 	bl	80134f8 <writeToOutput>

        if (impl->cmdSize > 0)
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	8c1b      	ldrh	r3, [r3, #32]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d002      	beq.n	8012b46 <onControlInput+0x5e>
            parseCommand(cli);
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 f84b 	bl	8012bdc <parseCommand>
        impl->cmdSize = 0;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	69db      	ldr	r3, [r3, #28]
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	8c12      	ldrh	r2, [r2, #32]
 8012b54:	4413      	add	r3, r2
 8012b56:	2200      	movs	r2, #0
 8012b58:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	861a      	strh	r2, [r3, #48]	@ 0x30
        impl->history.current = 0;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	2200      	movs	r2, #0
 8012b64:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f000 fcc3 	bl	80134f8 <writeToOutput>
 8012b72:	e02e      	b.n	8012bd2 <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 8012b74:	78fb      	ldrb	r3, [r7, #3]
 8012b76:	2b08      	cmp	r3, #8
 8012b78:	d002      	beq.n	8012b80 <onControlInput+0x98>
 8012b7a:	78fb      	ldrb	r3, [r7, #3]
 8012b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8012b7e:	d120      	bne.n	8012bc2 <onControlInput+0xda>
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	8c1b      	ldrh	r3, [r3, #32]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d01c      	beq.n	8012bc2 <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2108      	movs	r1, #8
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2120      	movs	r1, #32
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	2108      	movs	r1, #8
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	8c1b      	ldrh	r3, [r3, #32]
 8012baa:	3b01      	subs	r3, #1
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	69db      	ldr	r3, [r3, #28]
 8012bb6:	68fa      	ldr	r2, [r7, #12]
 8012bb8:	8c12      	ldrh	r2, [r2, #32]
 8012bba:	4413      	add	r3, r2
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	701a      	strb	r2, [r3, #0]
 8012bc0:	e007      	b.n	8012bd2 <onControlInput+0xea>
    } else if (c == '\t') {
 8012bc2:	78fb      	ldrb	r3, [r7, #3]
 8012bc4:	2b09      	cmp	r3, #9
 8012bc6:	d104      	bne.n	8012bd2 <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 fbd9 	bl	8013380 <onAutocompleteRequest>
 8012bce:	e000      	b.n	8012bd2 <onControlInput+0xea>
        return;
 8012bd0:	bf00      	nop
    }

}
 8012bd2:	3710      	adds	r7, #16
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	20000024 	.word	0x20000024

08012bdc <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8012bdc:	b590      	push	{r4, r7, lr}
 8012bde:	b08f      	sub	sp, #60	@ 0x3c
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8012bea:	2301      	movs	r3, #1
 8012bec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8012bf4:	e00d      	b.n	8012c12 <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 8012bf6:	69bb      	ldr	r3, [r7, #24]
 8012bf8:	69da      	ldr	r2, [r3, #28]
 8012bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bfc:	4413      	add	r3, r2
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	2b20      	cmp	r3, #32
 8012c02:	d003      	beq.n	8012c0c <parseCommand+0x30>
            isEmpty = false;
 8012c04:	2300      	movs	r3, #0
 8012c06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8012c0a:	e008      	b.n	8012c1e <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c0e:	3301      	adds	r3, #1
 8012c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	8c1b      	ldrh	r3, [r3, #32]
 8012c16:	461a      	mov	r2, r3
 8012c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	dbeb      	blt.n	8012bf6 <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8012c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	f040 80dc 	bne.w	8012de0 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	1d1a      	adds	r2, r3, #4
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	69db      	ldr	r3, [r3, #28]
 8012c30:	4619      	mov	r1, r3
 8012c32:	4610      	mov	r0, r2
 8012c34:	f000 fd2b 	bl	801368e <historyPut>

    char *cmdName = NULL;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char *cmdArgs = NULL;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    bool nameFinished = false;
 8012c40:	2300      	movs	r3, #0
 8012c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012c46:	2300      	movs	r3, #0
 8012c48:	623b      	str	r3, [r7, #32]
 8012c4a:	e030      	b.n	8012cae <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	69da      	ldr	r2, [r3, #28]
 8012c50:	6a3b      	ldr	r3, [r7, #32]
 8012c52:	4413      	add	r3, r2
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
 8012c5a:	2b20      	cmp	r3, #32
 8012c5c:	d10f      	bne.n	8012c7e <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 8012c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d105      	bne.n	8012c70 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 8012c64:	69bb      	ldr	r3, [r7, #24]
 8012c66:	69da      	ldr	r2, [r3, #28]
 8012c68:	6a3b      	ldr	r3, [r7, #32]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 8012c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d018      	beq.n	8012ca8 <parseCommand+0xcc>
                nameFinished = true;
 8012c76:	2301      	movs	r3, #1
 8012c78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c7c:	e014      	b.n	8012ca8 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 8012c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d105      	bne.n	8012c90 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	69da      	ldr	r2, [r3, #28]
 8012c88:	6a3b      	ldr	r3, [r7, #32]
 8012c8a:	4413      	add	r3, r2
 8012c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c8e:	e00b      	b.n	8012ca8 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 8012c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d108      	bne.n	8012ca8 <parseCommand+0xcc>
 8012c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d004      	beq.n	8012ca8 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	69da      	ldr	r2, [r3, #28]
 8012ca2:	6a3b      	ldr	r3, [r7, #32]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8012ca8:	6a3b      	ldr	r3, [r7, #32]
 8012caa:	3301      	adds	r3, #1
 8012cac:	623b      	str	r3, [r7, #32]
 8012cae:	69bb      	ldr	r3, [r7, #24]
 8012cb0:	8c1b      	ldrh	r3, [r3, #32]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	6a3b      	ldr	r3, [r7, #32]
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	dbc8      	blt.n	8012c4c <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	69da      	ldr	r2, [r3, #28]
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	8c1b      	ldrh	r3, [r3, #32]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	4413      	add	r3, r2
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8012cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	f000 8089 	beq.w	8012de4 <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	61fb      	str	r3, [r7, #28]
 8012cd6:	e054      	b.n	8012d82 <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012cdc:	69fa      	ldr	r2, [r7, #28]
 8012cde:	4613      	mov	r3, r2
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	4413      	add	r3, r2
 8012ce4:	009b      	lsls	r3, r3, #2
 8012ce6:	440b      	add	r3, r1
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	4619      	mov	r1, r3
 8012cec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012cee:	f7ed fa77 	bl	80001e0 <strcmp>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d141      	bne.n	8012d7c <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012cfc:	69fa      	ldr	r2, [r7, #28]
 8012cfe:	4613      	mov	r3, r2
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	4413      	add	r3, r2
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	440b      	add	r3, r1
 8012d08:	691b      	ldr	r3, [r3, #16]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d040      	beq.n	8012d90 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8012d0e:	69bb      	ldr	r3, [r7, #24]
 8012d10:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d12:	69fa      	ldr	r2, [r7, #28]
 8012d14:	4613      	mov	r3, r2
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	4413      	add	r3, r2
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	440b      	add	r3, r1
 8012d1e:	7a1b      	ldrb	r3, [r3, #8]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d002      	beq.n	8012d2a <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 8012d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d26:	f7ff fd3b 	bl	80127a0 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d30:	f043 0310 	orr.w	r3, r3, #16
 8012d34:	b2da      	uxtb	r2, r3
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8012d3c:	69bb      	ldr	r3, [r7, #24]
 8012d3e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d40:	69fa      	ldr	r2, [r7, #28]
 8012d42:	4613      	mov	r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	4413      	add	r3, r2
 8012d48:	009b      	lsls	r3, r3, #2
 8012d4a:	440b      	add	r3, r1
 8012d4c:	691c      	ldr	r4, [r3, #16]
 8012d4e:	69bb      	ldr	r3, [r7, #24]
 8012d50:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d52:	69fa      	ldr	r2, [r7, #28]
 8012d54:	4613      	mov	r3, r2
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	4413      	add	r3, r2
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	440b      	add	r3, r1
 8012d5e:	68db      	ldr	r3, [r3, #12]
 8012d60:	461a      	mov	r2, r3
 8012d62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012d6e:	f023 0310 	bic.w	r3, r3, #16
 8012d72:	b2da      	uxtb	r2, r3
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            return;
 8012d7a:	e034      	b.n	8012de6 <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	3301      	adds	r3, #1
 8012d80:	61fb      	str	r3, [r7, #28]
 8012d82:	69bb      	ldr	r3, [r7, #24]
 8012d84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012d86:	461a      	mov	r2, r3
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	dba4      	blt.n	8012cd8 <parseCommand+0xfc>
 8012d8e:	e000      	b.n	8012d92 <parseCommand+0x1b6>
                break;
 8012d90:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d01d      	beq.n	8012dd6 <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 8012d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d9c:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 8012d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012da0:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012da2:	69bb      	ldr	r3, [r7, #24]
 8012da4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012da8:	f043 0310 	orr.w	r3, r3, #16
 8012dac:	b2da      	uxtb	r2, r3
 8012dae:	69bb      	ldr	r3, [r7, #24]
 8012db0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        cli->onCommand(cli, &command);
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	f107 020c 	add.w	r2, r7, #12
 8012dbc:	4611      	mov	r1, r2
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8012dc8:	f023 0310 	bic.w	r3, r3, #16
 8012dcc:	b2da      	uxtb	r2, r3
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8012dd4:	e007      	b.n	8012de6 <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 8012dd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 f997 	bl	801310c <onUnknownCommand>
 8012dde:	e002      	b.n	8012de6 <parseCommand+0x20a>
        return;
 8012de0:	bf00      	nop
 8012de2:	e000      	b.n	8012de6 <parseCommand+0x20a>
        return;
 8012de4:	bf00      	nop
    }
}
 8012de6:	373c      	adds	r7, #60	@ 0x3c
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd90      	pop	{r4, r7, pc}

08012dec <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8012dec:	b5b0      	push	{r4, r5, r7, lr}
 8012dee:	b08a      	sub	sp, #40	@ 0x28
 8012df0:	af02      	add	r7, sp, #8
 8012df2:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 8012df4:	4b0c      	ldr	r3, [pc, #48]	@ (8012e28 <initInternalBindings+0x3c>)
 8012df6:	f107 040c 	add.w	r4, r7, #12
 8012dfa:	461d      	mov	r5, r3
 8012dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e00:	682b      	ldr	r3, [r5, #0]
 8012e02:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 8012e04:	466a      	mov	r2, sp
 8012e06:	f107 0318 	add.w	r3, r7, #24
 8012e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e0e:	e882 0003 	stmia.w	r2, {r0, r1}
 8012e12:	f107 030c 	add.w	r3, r7, #12
 8012e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f7ff fc4c 	bl	80126b6 <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8012e1e:	bf00      	nop
 8012e20:	3720      	adds	r7, #32
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bdb0      	pop	{r4, r5, r7, pc}
 8012e26:	bf00      	nop
 8012e28:	0802452c 	.word	0x0802452c

08012e2c <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b08c      	sub	sp, #48	@ 0x30
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60f8      	str	r0, [r7, #12]
 8012e34:	60b9      	str	r1, [r7, #8]
 8012e36:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d10a      	bne.n	8012e5c <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 8012e46:	49a5      	ldr	r1, [pc, #660]	@ (80130dc <onHelp+0x2b0>)
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f000 fb55 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e4e:	4ba4      	ldr	r3, [pc, #656]	@ (80130e0 <onHelp+0x2b4>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4619      	mov	r1, r3
 8012e54:	68f8      	ldr	r0, [r7, #12]
 8012e56:	f000 fb4f 	bl	80134f8 <writeToOutput>
        return;
 8012e5a:	e13b      	b.n	80130d4 <onHelp+0x2a8>
    }

    if(_RunTime_Packet.showPrompt )
 8012e5c:	4ba1      	ldr	r3, [pc, #644]	@ (80130e4 <onHelp+0x2b8>)
 8012e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d03d      	beq.n	8012ee2 <onHelp+0xb6>
    {
    	_RunTime_Packet.showPrompt  = 0;
 8012e66:	4b9f      	ldr	r3, [pc, #636]	@ (80130e4 <onHelp+0x2b8>)
 8012e68:	2200      	movs	r2, #0
 8012e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        writeToOutput(cli, lineBreak);
 8012e6e:	4b9c      	ldr	r3, [pc, #624]	@ (80130e0 <onHelp+0x2b4>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	4619      	mov	r1, r3
 8012e74:	68f8      	ldr	r0, [r7, #12]
 8012e76:	f000 fb3f 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012e7a:	4b99      	ldr	r3, [pc, #612]	@ (80130e0 <onHelp+0x2b4>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	4619      	mov	r1, r3
 8012e80:	68f8      	ldr	r0, [r7, #12]
 8012e82:	f000 fb39 	bl	80134f8 <writeToOutput>
		writeToOutput(cli, "This product is powered by BuildUp! "); //TM 0x99
 8012e86:	4998      	ldr	r1, [pc, #608]	@ (80130e8 <onHelp+0x2bc>)
 8012e88:	68f8      	ldr	r0, [r7, #12]
 8012e8a:	f000 fb35 	bl	80134f8 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012e8e:	4b94      	ldr	r3, [pc, #592]	@ (80130e0 <onHelp+0x2b4>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	4619      	mov	r1, r3
 8012e94:	68f8      	ldr	r0, [r7, #12]
 8012e96:	f000 fb2f 	bl	80134f8 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Inc. All rights reserved "); //copyright 0xA9
 8012e9a:	4994      	ldr	r1, [pc, #592]	@ (80130ec <onHelp+0x2c0>)
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	f000 fb2b 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012ea2:	4b8f      	ldr	r3, [pc, #572]	@ (80130e0 <onHelp+0x2b4>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	68f8      	ldr	r0, [r7, #12]
 8012eaa:	f000 fb25 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, "Montreal, Canada");
 8012eae:	4990      	ldr	r1, [pc, #576]	@ (80130f0 <onHelp+0x2c4>)
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f000 fb21 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012eb6:	4b8a      	ldr	r3, [pc, #552]	@ (80130e0 <onHelp+0x2b4>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	4619      	mov	r1, r3
 8012ebc:	68f8      	ldr	r0, [r7, #12]
 8012ebe:	f000 fb1b 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, "https://thingsfactory.com");
 8012ec2:	498c      	ldr	r1, [pc, #560]	@ (80130f4 <onHelp+0x2c8>)
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f000 fb17 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012eca:	4b85      	ldr	r3, [pc, #532]	@ (80130e0 <onHelp+0x2b4>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	4619      	mov	r1, r3
 8012ed0:	68f8      	ldr	r0, [r7, #12]
 8012ed2:	f000 fb11 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012ed6:	4b82      	ldr	r3, [pc, #520]	@ (80130e0 <onHelp+0x2b4>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4619      	mov	r1, r3
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f000 fb0b 	bl	80134f8 <writeToOutput>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 8012ee2:	68b8      	ldr	r0, [r7, #8]
 8012ee4:	f7ff fd06 	bl	80128f4 <embeddedCliGetTokenCount>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 8012eec:	8b7b      	ldrh	r3, [r7, #26]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d176      	bne.n	8012fe0 <onHelp+0x1b4>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012ef6:	e03c      	b.n	8012f72 <onHelp+0x146>
            writeToOutput(cli, " * ");
 8012ef8:	497f      	ldr	r1, [pc, #508]	@ (80130f8 <onHelp+0x2cc>)
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f000 fafc 	bl	80134f8 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 8012f00:	69fb      	ldr	r3, [r7, #28]
 8012f02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f06:	4613      	mov	r3, r2
 8012f08:	009b      	lsls	r3, r3, #2
 8012f0a:	4413      	add	r3, r2
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	440b      	add	r3, r1
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4619      	mov	r1, r3
 8012f14:	68f8      	ldr	r0, [r7, #12]
 8012f16:	f000 faef 	bl	80134f8 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8012f1a:	4b71      	ldr	r3, [pc, #452]	@ (80130e0 <onHelp+0x2b4>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	4619      	mov	r1, r3
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f000 fae9 	bl	80134f8 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	4413      	add	r3, r2
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	440b      	add	r3, r1
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d017      	beq.n	8012f6c <onHelp+0x140>
                cli->writeChar(cli, '\t');
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2109      	movs	r1, #9
 8012f42:	68f8      	ldr	r0, [r7, #12]
 8012f44:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	4413      	add	r3, r2
 8012f52:	009b      	lsls	r3, r3, #2
 8012f54:	440b      	add	r3, r1
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	4619      	mov	r1, r3
 8012f5a:	68f8      	ldr	r0, [r7, #12]
 8012f5c:	f000 facc 	bl	80134f8 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8012f60:	4b5f      	ldr	r3, [pc, #380]	@ (80130e0 <onHelp+0x2b4>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	4619      	mov	r1, r3
 8012f66:	68f8      	ldr	r0, [r7, #12]
 8012f68:	f000 fac6 	bl	80134f8 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f6e:	3301      	adds	r3, #1
 8012f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8012f76:	461a      	mov	r2, r3
 8012f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	dbbc      	blt.n	8012ef8 <onHelp+0xcc>
            }
        }

        writeToOutput(cli, lineBreak);
 8012f7e:	4b58      	ldr	r3, [pc, #352]	@ (80130e0 <onHelp+0x2b4>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4619      	mov	r1, r3
 8012f84:	68f8      	ldr	r0, [r7, #12]
 8012f86:	f000 fab7 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f8a:	4b55      	ldr	r3, [pc, #340]	@ (80130e0 <onHelp+0x2b4>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4619      	mov	r1, r3
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f000 fab1 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012f96:	4b52      	ldr	r3, [pc, #328]	@ (80130e0 <onHelp+0x2b4>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	f000 faab 	bl	80134f8 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8012fa2:	4956      	ldr	r1, [pc, #344]	@ (80130fc <onHelp+0x2d0>)
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f000 faa7 	bl	80134f8 <writeToOutput>
		writeToOutput(cli, lineBreak);
 8012faa:	4b4d      	ldr	r3, [pc, #308]	@ (80130e0 <onHelp+0x2b4>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	68f8      	ldr	r0, [r7, #12]
 8012fb2:	f000 faa1 	bl	80134f8 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 8012fb6:	4952      	ldr	r1, [pc, #328]	@ (8013100 <onHelp+0x2d4>)
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f000 fa9d 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fbe:	4b48      	ldr	r3, [pc, #288]	@ (80130e0 <onHelp+0x2b4>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f000 fa97 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 8012fca:	494e      	ldr	r1, [pc, #312]	@ (8013104 <onHelp+0x2d8>)
 8012fcc:	68f8      	ldr	r0, [r7, #12]
 8012fce:	f000 fa93 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8012fd2:	4b43      	ldr	r3, [pc, #268]	@ (80130e0 <onHelp+0x2b4>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	68f8      	ldr	r0, [r7, #12]
 8012fda:	f000 fa8d 	bl	80134f8 <writeToOutput>
 8012fde:	e079      	b.n	80130d4 <onHelp+0x2a8>



    } else if (tokenCount == 1) {
 8012fe0:	8b7b      	ldrh	r3, [r7, #26]
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d16c      	bne.n	80130c0 <onHelp+0x294>
        // try find command
        const char *helpStr = NULL;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 8012fea:	2101      	movs	r1, #1
 8012fec:	68b8      	ldr	r0, [r7, #8]
 8012fee:	f7ff fc4b 	bl	8012888 <embeddedCliGetToken>
 8012ff2:	6178      	str	r0, [r7, #20]
        bool found = false;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	623b      	str	r3, [r7, #32]
 8012ffe:	e020      	b.n	8013042 <onHelp+0x216>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013004:	6a3a      	ldr	r2, [r7, #32]
 8013006:	4613      	mov	r3, r2
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	4413      	add	r3, r2
 801300c:	009b      	lsls	r3, r3, #2
 801300e:	440b      	add	r3, r1
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	6979      	ldr	r1, [r7, #20]
 8013014:	4618      	mov	r0, r3
 8013016:	f7ed f8e3 	bl	80001e0 <strcmp>
 801301a:	4603      	mov	r3, r0
 801301c:	2b00      	cmp	r3, #0
 801301e:	d10d      	bne.n	801303c <onHelp+0x210>
                helpStr = impl->bindings[i].help;
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013024:	6a3a      	ldr	r2, [r7, #32]
 8013026:	4613      	mov	r3, r2
 8013028:	009b      	lsls	r3, r3, #2
 801302a:	4413      	add	r3, r2
 801302c:	009b      	lsls	r3, r3, #2
 801302e:	440b      	add	r3, r1
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	62bb      	str	r3, [r7, #40]	@ 0x28
                found = true;
 8013034:	2301      	movs	r3, #1
 8013036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                break;
 801303a:	e008      	b.n	801304e <onHelp+0x222>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 801303c:	6a3b      	ldr	r3, [r7, #32]
 801303e:	3301      	adds	r3, #1
 8013040:	623b      	str	r3, [r7, #32]
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013046:	461a      	mov	r2, r3
 8013048:	6a3b      	ldr	r3, [r7, #32]
 801304a:	4293      	cmp	r3, r2
 801304c:	dbd8      	blt.n	8013000 <onHelp+0x1d4>
            }
        }
        if (found && helpStr != NULL) {
 801304e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013052:	2b00      	cmp	r3, #0
 8013054:	d020      	beq.n	8013098 <onHelp+0x26c>
 8013056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013058:	2b00      	cmp	r3, #0
 801305a:	d01d      	beq.n	8013098 <onHelp+0x26c>
            writeToOutput(cli, " * ");
 801305c:	4926      	ldr	r1, [pc, #152]	@ (80130f8 <onHelp+0x2cc>)
 801305e:	68f8      	ldr	r0, [r7, #12]
 8013060:	f000 fa4a 	bl	80134f8 <writeToOutput>
            writeToOutput(cli, cmdName);
 8013064:	6979      	ldr	r1, [r7, #20]
 8013066:	68f8      	ldr	r0, [r7, #12]
 8013068:	f000 fa46 	bl	80134f8 <writeToOutput>
            writeToOutput(cli, lineBreak);
 801306c:	4b1c      	ldr	r3, [pc, #112]	@ (80130e0 <onHelp+0x2b4>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	4619      	mov	r1, r3
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f000 fa40 	bl	80134f8 <writeToOutput>
            cli->writeChar(cli, '\t');
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	2109      	movs	r1, #9
 801307e:	68f8      	ldr	r0, [r7, #12]
 8013080:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8013082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f000 fa37 	bl	80134f8 <writeToOutput>
            writeToOutput(cli, lineBreak);
 801308a:	4b15      	ldr	r3, [pc, #84]	@ (80130e0 <onHelp+0x2b4>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	4619      	mov	r1, r3
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f000 fa31 	bl	80134f8 <writeToOutput>
 8013096:	e01d      	b.n	80130d4 <onHelp+0x2a8>
        } else if (found) {
 8013098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00a      	beq.n	80130b6 <onHelp+0x28a>
            writeToOutput(cli, "Help is not available");
 80130a0:	490e      	ldr	r1, [pc, #56]	@ (80130dc <onHelp+0x2b0>)
 80130a2:	68f8      	ldr	r0, [r7, #12]
 80130a4:	f000 fa28 	bl	80134f8 <writeToOutput>
            writeToOutput(cli, lineBreak);
 80130a8:	4b0d      	ldr	r3, [pc, #52]	@ (80130e0 <onHelp+0x2b4>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	4619      	mov	r1, r3
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f000 fa22 	bl	80134f8 <writeToOutput>
 80130b4:	e00e      	b.n	80130d4 <onHelp+0x2a8>
        } else {
            onUnknownCommand(cli, cmdName);
 80130b6:	6979      	ldr	r1, [r7, #20]
 80130b8:	68f8      	ldr	r0, [r7, #12]
 80130ba:	f000 f827 	bl	801310c <onUnknownCommand>
 80130be:	e009      	b.n	80130d4 <onHelp+0x2a8>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 80130c0:	4911      	ldr	r1, [pc, #68]	@ (8013108 <onHelp+0x2dc>)
 80130c2:	68f8      	ldr	r0, [r7, #12]
 80130c4:	f000 fa18 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80130c8:	4b05      	ldr	r3, [pc, #20]	@ (80130e0 <onHelp+0x2b4>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	4619      	mov	r1, r3
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	f000 fa12 	bl	80134f8 <writeToOutput>
    }
}
 80130d4:	3730      	adds	r7, #48	@ 0x30
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	08024540 	.word	0x08024540
 80130e0:	20000024 	.word	0x20000024
 80130e4:	20001530 	.word	0x20001530
 80130e8:	08024558 	.word	0x08024558
 80130ec:	08024580 	.word	0x08024580
 80130f0:	080245a8 	.word	0x080245a8
 80130f4:	080245bc 	.word	0x080245bc
 80130f8:	080245d8 	.word	0x080245d8
 80130fc:	080245dc 	.word	0x080245dc
 8013100:	080245fc 	.word	0x080245fc
 8013104:	08024620 	.word	0x08024620
 8013108:	08024634 	.word	0x08024634

0801310c <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 801310c:	b580      	push	{r7, lr}
 801310e:	b082      	sub	sp, #8
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8013116:	490b      	ldr	r1, [pc, #44]	@ (8013144 <onUnknownCommand+0x38>)
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f000 f9ed 	bl	80134f8 <writeToOutput>
    writeToOutput(cli, name);
 801311e:	6839      	ldr	r1, [r7, #0]
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 f9e9 	bl	80134f8 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8013126:	4908      	ldr	r1, [pc, #32]	@ (8013148 <onUnknownCommand+0x3c>)
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f000 f9e5 	bl	80134f8 <writeToOutput>
    writeToOutput(cli, lineBreak);
 801312e:	4b07      	ldr	r3, [pc, #28]	@ (801314c <onUnknownCommand+0x40>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	4619      	mov	r1, r3
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f000 f9df 	bl	80134f8 <writeToOutput>
}
 801313a:	bf00      	nop
 801313c:	3708      	adds	r7, #8
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
 8013142:	bf00      	nop
 8013144:	08024664 	.word	0x08024664
 8013148:	08024678 	.word	0x08024678
 801314c:	20000024 	.word	0x20000024

08013150 <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8013150:	b580      	push	{r7, lr}
 8013152:	b08e      	sub	sp, #56	@ 0x38
 8013154:	af00      	add	r7, sp, #0
 8013156:	60f8      	str	r0, [r7, #12]
 8013158:	60b9      	str	r1, [r7, #8]
 801315a:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 801315c:	2300      	movs	r3, #0
 801315e:	613b      	str	r3, [r7, #16]
 8013160:	2300      	movs	r3, #0
 8013162:	82bb      	strh	r3, [r7, #20]
 8013164:	2300      	movs	r3, #0
 8013166:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f7ed f899 	bl	80002a0 <strlen>
 801316e:	6278      	str	r0, [r7, #36]	@ 0x24

    PREPARE_IMPL(cli);
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8013176:	6a3b      	ldr	r3, [r7, #32]
 8013178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801317a:	2b00      	cmp	r3, #0
 801317c:	d002      	beq.n	8013184 <getAutocompletedCommand+0x34>
 801317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013180:	2b00      	cmp	r3, #0
 8013182:	d108      	bne.n	8013196 <getAutocompletedCommand+0x46>
        return cmd;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	461a      	mov	r2, r3
 8013188:	f107 0310 	add.w	r3, r7, #16
 801318c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013190:	e882 0003 	stmia.w	r2, {r0, r1}
 8013194:	e095      	b.n	80132c2 <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013196:	2300      	movs	r3, #0
 8013198:	637b      	str	r3, [r7, #52]	@ 0x34
 801319a:	e083      	b.n	80132a4 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 801319c:	6a3b      	ldr	r3, [r7, #32]
 801319e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80131a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80131a2:	4613      	mov	r3, r2
 80131a4:	009b      	lsls	r3, r3, #2
 80131a6:	4413      	add	r3, r2
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	440b      	add	r3, r1
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 80131b0:	69f8      	ldr	r0, [r7, #28]
 80131b2:	f7ed f875 	bl	80002a0 <strlen>
 80131b6:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 80131b8:	6a3b      	ldr	r3, [r7, #32]
 80131ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80131bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131be:	4413      	add	r3, r2
 80131c0:	781a      	ldrb	r2, [r3, #0]
 80131c2:	6a3b      	ldr	r3, [r7, #32]
 80131c4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80131c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131c8:	440b      	add	r3, r1
 80131ca:	f022 0201 	bic.w	r2, r2, #1
 80131ce:	b2d2      	uxtb	r2, r2
 80131d0:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 80131d2:	69ba      	ldr	r2, [r7, #24]
 80131d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d35e      	bcc.n	8013298 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 80131da:	2301      	movs	r3, #1
 80131dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 80131e0:	2300      	movs	r3, #0
 80131e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80131e4:	e010      	b.n	8013208 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ea:	4413      	add	r3, r2
 80131ec:	781a      	ldrb	r2, [r3, #0]
 80131ee:	69f9      	ldr	r1, [r7, #28]
 80131f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131f2:	440b      	add	r3, r1
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d003      	beq.n	8013202 <getAutocompletedCommand+0xb2>
                isCandidate = false;
 80131fa:	2300      	movs	r3, #0
 80131fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                break;
 8013200:	e006      	b.n	8013210 <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8013202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013204:	3301      	adds	r3, #1
 8013206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801320c:	429a      	cmp	r2, r3
 801320e:	d3ea      	bcc.n	80131e6 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8013210:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013214:	f083 0301 	eor.w	r3, r3, #1
 8013218:	b2db      	uxtb	r3, r3
 801321a:	2b00      	cmp	r3, #0
 801321c:	d13e      	bne.n	801329c <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 801321e:	6a3b      	ldr	r3, [r7, #32]
 8013220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013224:	4413      	add	r3, r2
 8013226:	781a      	ldrb	r2, [r3, #0]
 8013228:	6a3b      	ldr	r3, [r7, #32]
 801322a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801322c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801322e:	440b      	add	r3, r1
 8013230:	f042 0201 	orr.w	r2, r2, #1
 8013234:	b2d2      	uxtb	r2, r2
 8013236:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8013238:	8afb      	ldrh	r3, [r7, #22]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d004      	beq.n	8013248 <getAutocompletedCommand+0xf8>
 801323e:	8abb      	ldrh	r3, [r7, #20]
 8013240:	461a      	mov	r2, r3
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	4293      	cmp	r3, r2
 8013246:	d202      	bcs.n	801324e <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8013248:	69bb      	ldr	r3, [r7, #24]
 801324a:	b29b      	uxth	r3, r3
 801324c:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 801324e:	8afb      	ldrh	r3, [r7, #22]
 8013250:	3301      	adds	r3, #1
 8013252:	b29b      	uxth	r3, r3
 8013254:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8013256:	8afb      	ldrh	r3, [r7, #22]
 8013258:	2b01      	cmp	r3, #1
 801325a:	d102      	bne.n	8013262 <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 801325c:	69fb      	ldr	r3, [r7, #28]
 801325e:	613b      	str	r3, [r7, #16]
            continue;
 8013260:	e01d      	b.n	801329e <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8013262:	6a3b      	ldr	r3, [r7, #32]
 8013264:	8c1b      	ldrh	r3, [r3, #32]
 8013266:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013268:	e010      	b.n	801328c <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 801326a:	693a      	ldr	r2, [r7, #16]
 801326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801326e:	4413      	add	r3, r2
 8013270:	781a      	ldrb	r2, [r3, #0]
 8013272:	69f9      	ldr	r1, [r7, #28]
 8013274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013276:	440b      	add	r3, r1
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	429a      	cmp	r2, r3
 801327c:	d003      	beq.n	8013286 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 801327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013280:	b29b      	uxth	r3, r3
 8013282:	82bb      	strh	r3, [r7, #20]
                break;
 8013284:	e00b      	b.n	801329e <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8013286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013288:	3301      	adds	r3, #1
 801328a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801328c:	8abb      	ldrh	r3, [r7, #20]
 801328e:	461a      	mov	r2, r3
 8013290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013292:	4293      	cmp	r3, r2
 8013294:	d3e9      	bcc.n	801326a <getAutocompletedCommand+0x11a>
 8013296:	e002      	b.n	801329e <getAutocompletedCommand+0x14e>
            continue;
 8013298:	bf00      	nop
 801329a:	e000      	b.n	801329e <getAutocompletedCommand+0x14e>
            continue;
 801329c:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132a0:	3301      	adds	r3, #1
 80132a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80132a4:	6a3b      	ldr	r3, [r7, #32]
 80132a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80132a8:	461a      	mov	r2, r3
 80132aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132ac:	4293      	cmp	r3, r2
 80132ae:	f6ff af75 	blt.w	801319c <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	461a      	mov	r2, r3
 80132b6:	f107 0310 	add.w	r3, r7, #16
 80132ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80132be:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	3738      	adds	r7, #56	@ 0x38
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b088      	sub	sp, #32
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80132de:	f003 0320 	and.w	r3, r3, #32
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d048      	beq.n	8013378 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	69da      	ldr	r2, [r3, #28]
 80132ea:	f107 030c 	add.w	r3, r7, #12
 80132ee:	6879      	ldr	r1, [r7, #4]
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7ff ff2d 	bl	8013150 <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 80132f6:	8a7b      	ldrh	r3, [r7, #18]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d102      	bne.n	8013302 <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	8c1b      	ldrh	r3, [r3, #32]
 8013300:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	8c1b      	ldrh	r3, [r3, #32]
 8013306:	61fb      	str	r3, [r7, #28]
 8013308:	e00b      	b.n	8013322 <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	68f9      	ldr	r1, [r7, #12]
 8013310:	69fa      	ldr	r2, [r7, #28]
 8013312:	440a      	add	r2, r1
 8013314:	7812      	ldrb	r2, [r2, #0]
 8013316:	4611      	mov	r1, r2
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 801331c:	69fb      	ldr	r3, [r7, #28]
 801331e:	3301      	adds	r3, #1
 8013320:	61fb      	str	r3, [r7, #28]
 8013322:	8a3b      	ldrh	r3, [r7, #16]
 8013324:	461a      	mov	r2, r3
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	4293      	cmp	r3, r2
 801332a:	d3ee      	bcc.n	801330a <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 801332c:	8a3b      	ldrh	r3, [r7, #16]
 801332e:	61bb      	str	r3, [r7, #24]
 8013330:	e007      	b.n	8013342 <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2120      	movs	r1, #32
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 801333c:	69bb      	ldr	r3, [r7, #24]
 801333e:	3301      	adds	r3, #1
 8013340:	61bb      	str	r3, [r7, #24]
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8013346:	461a      	mov	r2, r3
 8013348:	69bb      	ldr	r3, [r7, #24]
 801334a:	4293      	cmp	r3, r2
 801334c:	d3f1      	bcc.n	8013332 <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 801334e:	8a3a      	ldrh	r2, [r7, #16]
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	861a      	strh	r2, [r3, #48]	@ 0x30
    cli->writeChar(cli, '\r');
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	210d      	movs	r1, #13
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	4619      	mov	r1, r3
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f000 f8c7 	bl	80134f8 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	69db      	ldr	r3, [r3, #28]
 801336e:	4619      	mov	r1, r3
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f000 f8c1 	bl	80134f8 <writeToOutput>
 8013376:	e000      	b.n	801337a <printLiveAutocompletion+0xb0>
        return;
 8013378:	bf00      	nop
}
 801337a:	3720      	adds	r7, #32
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8013380:	b580      	push	{r7, lr}
 8013382:	b088      	sub	sp, #32
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	69da      	ldr	r2, [r3, #28]
 8013392:	f107 030c 	add.w	r3, r7, #12
 8013396:	6879      	ldr	r1, [r7, #4]
 8013398:	4618      	mov	r0, r3
 801339a:	f7ff fed9 	bl	8013150 <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 801339e:	8a7b      	ldrh	r3, [r7, #18]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d071      	beq.n	8013488 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 80133a4:	8a7b      	ldrh	r3, [r7, #18]
 80133a6:	2b01      	cmp	r3, #1
 80133a8:	d004      	beq.n	80133b4 <onAutocompleteRequest+0x34>
 80133aa:	8a3a      	ldrh	r2, [r7, #16]
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	8c1b      	ldrh	r3, [r3, #32]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d92a      	bls.n	801340a <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 80133b4:	69bb      	ldr	r3, [r7, #24]
 80133b6:	69db      	ldr	r3, [r3, #28]
 80133b8:	68f9      	ldr	r1, [r7, #12]
 80133ba:	8a3a      	ldrh	r2, [r7, #16]
 80133bc:	4618      	mov	r0, r3
 80133be:	f00b fdac 	bl	801ef1a <memcpy>
        if (cmd.candidateCount == 1) {
 80133c2:	8a7b      	ldrh	r3, [r7, #18]
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	d109      	bne.n	80133dc <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	69db      	ldr	r3, [r3, #28]
 80133cc:	8a3a      	ldrh	r2, [r7, #16]
 80133ce:	4413      	add	r3, r2
 80133d0:	2220      	movs	r2, #32
 80133d2:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 80133d4:	8a3b      	ldrh	r3, [r7, #16]
 80133d6:	3301      	adds	r3, #1
 80133d8:	b29b      	uxth	r3, r3
 80133da:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	69db      	ldr	r3, [r3, #28]
 80133e0:	8a3a      	ldrh	r2, [r7, #16]
 80133e2:	4413      	add	r3, r2
 80133e4:	2200      	movs	r2, #0
 80133e6:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	69db      	ldr	r3, [r3, #28]
 80133ec:	69ba      	ldr	r2, [r7, #24]
 80133ee:	8c12      	ldrh	r2, [r2, #32]
 80133f0:	4413      	add	r3, r2
 80133f2:	4619      	mov	r1, r3
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f000 f87f 	bl	80134f8 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 80133fa:	8a3a      	ldrh	r2, [r7, #16]
 80133fc:	69bb      	ldr	r3, [r7, #24]
 80133fe:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8013400:	69bb      	ldr	r3, [r7, #24]
 8013402:	8c1a      	ldrh	r2, [r3, #32]
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	861a      	strh	r2, [r3, #48]	@ 0x30
        return;
 8013408:	e03f      	b.n	801348a <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 f842 	bl	8013494 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013410:	2300      	movs	r3, #0
 8013412:	61fb      	str	r3, [r7, #28]
 8013414:	e021      	b.n	801345a <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8013416:	69bb      	ldr	r3, [r7, #24]
 8013418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801341a:	69fb      	ldr	r3, [r7, #28]
 801341c:	4413      	add	r3, r2
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	f003 0301 	and.w	r3, r3, #1
 8013424:	2b00      	cmp	r3, #0
 8013426:	d014      	beq.n	8013452 <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801342c:	69fa      	ldr	r2, [r7, #28]
 801342e:	4613      	mov	r3, r2
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	4413      	add	r3, r2
 8013434:	009b      	lsls	r3, r3, #2
 8013436:	440b      	add	r3, r1
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 801343c:	6979      	ldr	r1, [r7, #20]
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 f85a 	bl	80134f8 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8013444:	4b12      	ldr	r3, [pc, #72]	@ (8013490 <onAutocompleteRequest+0x110>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	4619      	mov	r1, r3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 f854 	bl	80134f8 <writeToOutput>
 8013450:	e000      	b.n	8013454 <onAutocompleteRequest+0xd4>
            continue;
 8013452:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8013454:	69fb      	ldr	r3, [r7, #28]
 8013456:	3301      	adds	r3, #1
 8013458:	61fb      	str	r3, [r7, #28]
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801345e:	461a      	mov	r2, r3
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	4293      	cmp	r3, r2
 8013464:	dbd7      	blt.n	8013416 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	4619      	mov	r1, r3
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 f843 	bl	80134f8 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8013472:	69bb      	ldr	r3, [r7, #24]
 8013474:	69db      	ldr	r3, [r3, #28]
 8013476:	4619      	mov	r1, r3
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f000 f83d 	bl	80134f8 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	8c1a      	ldrh	r2, [r3, #32]
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013486:	e000      	b.n	801348a <onAutocompleteRequest+0x10a>
        return;
 8013488:	bf00      	nop
}
 801348a:	3720      	adds	r7, #32
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}
 8013490:	20000024 	.word	0x20000024

08013494 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8013494:	b590      	push	{r4, r7, lr}
 8013496:	b087      	sub	sp, #28
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80134a6:	461c      	mov	r4, r3
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ec fef7 	bl	80002a0 <strlen>
 80134b2:	4603      	mov	r3, r0
 80134b4:	4423      	add	r3, r4
 80134b6:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	210d      	movs	r1, #13
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80134c2:	2300      	movs	r3, #0
 80134c4:	617b      	str	r3, [r7, #20]
 80134c6:	e007      	b.n	80134d8 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	2120      	movs	r1, #32
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	3301      	adds	r3, #1
 80134d6:	617b      	str	r3, [r7, #20]
 80134d8:	697a      	ldr	r2, [r7, #20]
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	429a      	cmp	r2, r3
 80134de:	d3f3      	bcc.n	80134c8 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	210d      	movs	r1, #13
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	4798      	blx	r3
    impl->inputLineLength = 0;
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	2200      	movs	r2, #0
 80134ee:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 80134f0:	bf00      	nop
 80134f2:	371c      	adds	r7, #28
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd90      	pop	{r4, r7, pc}

080134f8 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8013502:	6838      	ldr	r0, [r7, #0]
 8013504:	f7ec fecc 	bl	80002a0 <strlen>
 8013508:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 801350a:	2300      	movs	r3, #0
 801350c:	60fb      	str	r3, [r7, #12]
 801350e:	e00b      	b.n	8013528 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	6839      	ldr	r1, [r7, #0]
 8013516:	68fa      	ldr	r2, [r7, #12]
 8013518:	440a      	add	r2, r1
 801351a:	7812      	ldrb	r2, [r2, #0]
 801351c:	4611      	mov	r1, r2
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	3301      	adds	r3, #1
 8013526:	60fb      	str	r3, [r7, #12]
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	429a      	cmp	r2, r3
 801352e:	d3ef      	bcc.n	8013510 <writeToOutput+0x18>
    }
}
 8013530:	bf00      	nop
 8013532:	bf00      	nop
 8013534:	3710      	adds	r7, #16
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}

0801353a <isControlChar>:

static bool isControlChar(char c) {
 801353a:	b480      	push	{r7}
 801353c:	b083      	sub	sp, #12
 801353e:	af00      	add	r7, sp, #0
 8013540:	4603      	mov	r3, r0
 8013542:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8013544:	79fb      	ldrb	r3, [r7, #7]
 8013546:	2b0d      	cmp	r3, #13
 8013548:	d00b      	beq.n	8013562 <isControlChar+0x28>
 801354a:	79fb      	ldrb	r3, [r7, #7]
 801354c:	2b0a      	cmp	r3, #10
 801354e:	d008      	beq.n	8013562 <isControlChar+0x28>
 8013550:	79fb      	ldrb	r3, [r7, #7]
 8013552:	2b08      	cmp	r3, #8
 8013554:	d005      	beq.n	8013562 <isControlChar+0x28>
 8013556:	79fb      	ldrb	r3, [r7, #7]
 8013558:	2b09      	cmp	r3, #9
 801355a:	d002      	beq.n	8013562 <isControlChar+0x28>
 801355c:	79fb      	ldrb	r3, [r7, #7]
 801355e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013560:	d101      	bne.n	8013566 <isControlChar+0x2c>
 8013562:	2301      	movs	r3, #1
 8013564:	e000      	b.n	8013568 <isControlChar+0x2e>
 8013566:	2300      	movs	r3, #0
 8013568:	f003 0301 	and.w	r3, r3, #1
 801356c:	b2db      	uxtb	r3, r3
}
 801356e:	4618      	mov	r0, r3
 8013570:	370c      	adds	r7, #12
 8013572:	46bd      	mov	sp, r7
 8013574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013578:	4770      	bx	lr

0801357a <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 801357a:	b480      	push	{r7}
 801357c:	b083      	sub	sp, #12
 801357e:	af00      	add	r7, sp, #0
 8013580:	4603      	mov	r3, r0
 8013582:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8013584:	79fb      	ldrb	r3, [r7, #7]
 8013586:	2b1f      	cmp	r3, #31
 8013588:	d904      	bls.n	8013594 <isDisplayableChar+0x1a>
 801358a:	79fb      	ldrb	r3, [r7, #7]
 801358c:	2b7e      	cmp	r3, #126	@ 0x7e
 801358e:	d801      	bhi.n	8013594 <isDisplayableChar+0x1a>
 8013590:	2301      	movs	r3, #1
 8013592:	e000      	b.n	8013596 <isDisplayableChar+0x1c>
 8013594:	2300      	movs	r3, #0
 8013596:	f003 0301 	and.w	r3, r3, #1
 801359a:	b2db      	uxtb	r3, r3
}
 801359c:	4618      	mov	r0, r3
 801359e:	370c      	adds	r7, #12
 80135a0:	46bd      	mov	sp, r7
 80135a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a6:	4770      	bx	lr

080135a8 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 80135a8:	b480      	push	{r7}
 80135aa:	b083      	sub	sp, #12
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	88da      	ldrh	r2, [r3, #6]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	889b      	ldrh	r3, [r3, #4]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d306      	bcc.n	80135ca <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	88da      	ldrh	r2, [r3, #6]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	889b      	ldrh	r3, [r3, #4]
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	e009      	b.n	80135de <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	891a      	ldrh	r2, [r3, #8]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	889b      	ldrh	r3, [r3, #4]
 80135d2:	1ad3      	subs	r3, r2, r3
 80135d4:	b29a      	uxth	r2, r3
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	88db      	ldrh	r3, [r3, #6]
 80135da:	4413      	add	r3, r2
 80135dc:	b29b      	uxth	r3, r3
}
 80135de:	4618      	mov	r0, r3
 80135e0:	370c      	adds	r7, #12
 80135e2:	46bd      	mov	sp, r7
 80135e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e8:	4770      	bx	lr

080135ea <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 80135ea:	b480      	push	{r7}
 80135ec:	b085      	sub	sp, #20
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
    char a = '\0';
 80135f2:	2300      	movs	r3, #0
 80135f4:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	889a      	ldrh	r2, [r3, #4]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	88db      	ldrh	r3, [r3, #6]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d014      	beq.n	801362c <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	687a      	ldr	r2, [r7, #4]
 8013608:	8892      	ldrh	r2, [r2, #4]
 801360a:	4413      	add	r3, r2
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	889b      	ldrh	r3, [r3, #4]
 8013614:	3301      	adds	r3, #1
 8013616:	b29b      	uxth	r3, r3
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	8912      	ldrh	r2, [r2, #8]
 801361c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013620:	fb01 f202 	mul.w	r2, r1, r2
 8013624:	1a9b      	subs	r3, r3, r2
 8013626:	b29a      	uxth	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	809a      	strh	r2, [r3, #4]
    }
    return a;
 801362c:	7bfb      	ldrb	r3, [r7, #15]
}
 801362e:	4618      	mov	r0, r3
 8013630:	3714      	adds	r7, #20
 8013632:	46bd      	mov	sp, r7
 8013634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013638:	4770      	bx	lr

0801363a <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 801363a:	b480      	push	{r7}
 801363c:	b085      	sub	sp, #20
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
 8013642:	460b      	mov	r3, r1
 8013644:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	88db      	ldrh	r3, [r3, #6]
 801364a:	3301      	adds	r3, #1
 801364c:	b29b      	uxth	r3, r3
 801364e:	687a      	ldr	r2, [r7, #4]
 8013650:	8912      	ldrh	r2, [r2, #8]
 8013652:	fbb3 f1f2 	udiv	r1, r3, r2
 8013656:	fb01 f202 	mul.w	r2, r1, r2
 801365a:	1a9b      	subs	r3, r3, r2
 801365c:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	889b      	ldrh	r3, [r3, #4]
 8013662:	89fa      	ldrh	r2, [r7, #14]
 8013664:	429a      	cmp	r2, r3
 8013666:	d00b      	beq.n	8013680 <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	88d2      	ldrh	r2, [r2, #6]
 8013670:	4413      	add	r3, r2
 8013672:	78fa      	ldrb	r2, [r7, #3]
 8013674:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	89fa      	ldrh	r2, [r7, #14]
 801367a:	80da      	strh	r2, [r3, #6]
        return true;
 801367c:	2301      	movs	r3, #1
 801367e:	e000      	b.n	8013682 <fifoBufPush+0x48>
    }
    return false;
 8013680:	2300      	movs	r3, #0
}
 8013682:	4618      	mov	r0, r3
 8013684:	3714      	adds	r7, #20
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr

0801368e <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 801368e:	b580      	push	{r7, lr}
 8013690:	b088      	sub	sp, #32
 8013692:	af00      	add	r7, sp, #0
 8013694:	6078      	str	r0, [r7, #4]
 8013696:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8013698:	6838      	ldr	r0, [r7, #0]
 801369a:	f7ec fe01 	bl	80002a0 <strlen>
 801369e:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	889b      	ldrh	r3, [r3, #4]
 80136a4:	461a      	mov	r2, r3
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	3301      	adds	r3, #1
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d201      	bcs.n	80136b2 <historyPut+0x24>
        return false;
 80136ae:	2300      	movs	r3, #0
 80136b0:	e04d      	b.n	801374e <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 80136b2:	6839      	ldr	r1, [r7, #0]
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f000 f86a 	bl	801378e <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 80136ba:	e024      	b.n	8013706 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	891b      	ldrh	r3, [r3, #8]
 80136c0:	4619      	mov	r1, r3
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f000 f847 	bl	8013756 <historyGet>
 80136c8:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 80136ca:	6978      	ldr	r0, [r7, #20]
 80136cc:	f7ec fde8 	bl	80002a0 <strlen>
 80136d0:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	697a      	ldr	r2, [r7, #20]
 80136d8:	1ad3      	subs	r3, r2, r3
 80136da:	461a      	mov	r2, r3
 80136dc:	693b      	ldr	r3, [r7, #16]
 80136de:	4413      	add	r3, r2
 80136e0:	3301      	adds	r3, #1
 80136e2:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	889b      	ldrh	r3, [r3, #4]
 80136e8:	461a      	mov	r2, r3
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	1ad3      	subs	r3, r2, r3
 80136ee:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80136f0:	69bb      	ldr	r3, [r7, #24]
 80136f2:	3301      	adds	r3, #1
 80136f4:	68fa      	ldr	r2, [r7, #12]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d20a      	bcs.n	8013710 <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	891b      	ldrh	r3, [r3, #8]
 80136fe:	3b01      	subs	r3, #1
 8013700:	b29a      	uxth	r2, r3
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	891b      	ldrh	r3, [r3, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1d6      	bne.n	80136bc <historyPut+0x2e>
 801370e:	e000      	b.n	8013712 <historyPut+0x84>
            break;
 8013710:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	891b      	ldrh	r3, [r3, #8]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d00a      	beq.n	8013730 <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	3301      	adds	r3, #1
 8013722:	18d0      	adds	r0, r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	69fa      	ldr	r2, [r7, #28]
 801372a:	4619      	mov	r1, r3
 801372c:	f00b fac4 	bl	801ecb8 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6818      	ldr	r0, [r3, #0]
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	3301      	adds	r3, #1
 8013738:	461a      	mov	r2, r3
 801373a:	6839      	ldr	r1, [r7, #0]
 801373c:	f00b fbed 	bl	801ef1a <memcpy>
    ++history->itemsCount;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	891b      	ldrh	r3, [r3, #8]
 8013744:	3301      	adds	r3, #1
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	811a      	strh	r2, [r3, #8]

    return true;
 801374c:	2301      	movs	r3, #1
}
 801374e:	4618      	mov	r0, r3
 8013750:	3720      	adds	r7, #32
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}

08013756 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8013756:	b580      	push	{r7, lr}
 8013758:	b082      	sub	sp, #8
 801375a:	af00      	add	r7, sp, #0
 801375c:	6078      	str	r0, [r7, #4]
 801375e:	460b      	mov	r3, r1
 8013760:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 8013762:	887b      	ldrh	r3, [r7, #2]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d004      	beq.n	8013772 <historyGet+0x1c>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	891b      	ldrh	r3, [r3, #8]
 801376c:	887a      	ldrh	r2, [r7, #2]
 801376e:	429a      	cmp	r2, r3
 8013770:	d901      	bls.n	8013776 <historyGet+0x20>
        return NULL;
 8013772:	2300      	movs	r3, #0
 8013774:	e007      	b.n	8013786 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	887a      	ldrh	r2, [r7, #2]
 801377c:	4611      	mov	r1, r2
 801377e:	4618      	mov	r0, r3
 8013780:	f7ff f882 	bl	8012888 <embeddedCliGetToken>
 8013784:	4603      	mov	r3, r0
}
 8013786:	4618      	mov	r0, r3
 8013788:	3708      	adds	r7, #8
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}

0801378e <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 801378e:	b580      	push	{r7, lr}
 8013790:	b086      	sub	sp, #24
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
 8013796:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d04c      	beq.n	8013838 <historyRemove+0xaa>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	891b      	ldrh	r3, [r3, #8]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d048      	beq.n	8013838 <historyRemove+0xaa>
        return;
    char *item = NULL;
 80137a6:	2300      	movs	r3, #0
 80137a8:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80137aa:	2301      	movs	r3, #1
 80137ac:	827b      	strh	r3, [r7, #18]
 80137ae:	e013      	b.n	80137d8 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	8a7a      	ldrh	r2, [r7, #18]
 80137b6:	4611      	mov	r1, r2
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7ff f880 	bl	80128be <embeddedCliGetTokenVariable>
 80137be:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 80137c0:	6839      	ldr	r1, [r7, #0]
 80137c2:	6978      	ldr	r0, [r7, #20]
 80137c4:	f7ec fd0c 	bl	80001e0 <strcmp>
 80137c8:	4603      	mov	r3, r0
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d00a      	beq.n	80137e4 <historyRemove+0x56>
            break;
        }
        item = NULL;
 80137ce:	2300      	movs	r3, #0
 80137d0:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 80137d2:	8a7b      	ldrh	r3, [r7, #18]
 80137d4:	3301      	adds	r3, #1
 80137d6:	827b      	strh	r3, [r7, #18]
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	891b      	ldrh	r3, [r3, #8]
 80137dc:	8a7a      	ldrh	r2, [r7, #18]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d9e6      	bls.n	80137b0 <historyRemove+0x22>
 80137e2:	e000      	b.n	80137e6 <historyRemove+0x58>
            break;
 80137e4:	bf00      	nop
    }
    if (item == NULL)
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d027      	beq.n	801383c <historyRemove+0xae>
        return;

    --history->itemsCount;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	891b      	ldrh	r3, [r3, #8]
 80137f0:	3b01      	subs	r3, #1
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80137f8:	8a7a      	ldrh	r2, [r7, #18]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	891b      	ldrh	r3, [r3, #8]
 80137fe:	3301      	adds	r3, #1
 8013800:	429a      	cmp	r2, r3
 8013802:	d01d      	beq.n	8013840 <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 8013804:	6978      	ldr	r0, [r7, #20]
 8013806:	f7ec fd4b 	bl	80002a0 <strlen>
 801380a:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	889b      	ldrh	r3, [r3, #4]
 8013810:	4619      	mov	r1, r3
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	3301      	adds	r3, #1
 8013816:	697a      	ldr	r2, [r7, #20]
 8013818:	441a      	add	r2, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	1ad3      	subs	r3, r2, r3
 8013820:	1acb      	subs	r3, r1, r3
 8013822:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	3301      	adds	r3, #1
 8013828:	697a      	ldr	r2, [r7, #20]
 801382a:	4413      	add	r3, r2
 801382c:	68ba      	ldr	r2, [r7, #8]
 801382e:	4619      	mov	r1, r3
 8013830:	6978      	ldr	r0, [r7, #20]
 8013832:	f00b fa41 	bl	801ecb8 <memmove>
 8013836:	e004      	b.n	8013842 <historyRemove+0xb4>
        return;
 8013838:	bf00      	nop
 801383a:	e002      	b.n	8013842 <historyRemove+0xb4>
        return;
 801383c:	bf00      	nop
 801383e:	e000      	b.n	8013842 <historyRemove+0xb4>
        return;
 8013840:	bf00      	nop
}
 8013842:	3718      	adds	r7, #24
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8013848:	b480      	push	{r7}
 801384a:	b085      	sub	sp, #20
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	460b      	mov	r3, r1
 8013852:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d002      	beq.n	8013860 <getTokenPosition+0x18>
 801385a:	887b      	ldrh	r3, [r7, #2]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d102      	bne.n	8013866 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 8013860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013864:	e028      	b.n	80138b8 <getTokenPosition+0x70>
    uint16_t i = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 801386a:	2301      	movs	r3, #1
 801386c:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 801386e:	89ba      	ldrh	r2, [r7, #12]
 8013870:	887b      	ldrh	r3, [r7, #2]
 8013872:	429a      	cmp	r2, r3
 8013874:	d013      	beq.n	801389e <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8013876:	89fb      	ldrh	r3, [r7, #14]
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	4413      	add	r3, r2
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d109      	bne.n	8013896 <getTokenPosition+0x4e>
            ++tokenCount;
 8013882:	89bb      	ldrh	r3, [r7, #12]
 8013884:	3301      	adds	r3, #1
 8013886:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8013888:	89fb      	ldrh	r3, [r7, #14]
 801388a:	3301      	adds	r3, #1
 801388c:	687a      	ldr	r2, [r7, #4]
 801388e:	4413      	add	r3, r2
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d005      	beq.n	80138a2 <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8013896:	89fb      	ldrh	r3, [r7, #14]
 8013898:	3301      	adds	r3, #1
 801389a:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 801389c:	e7e7      	b.n	801386e <getTokenPosition+0x26>
            break;
 801389e:	bf00      	nop
 80138a0:	e000      	b.n	80138a4 <getTokenPosition+0x5c>
                break;
 80138a2:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 80138a4:	89fb      	ldrh	r3, [r7, #14]
 80138a6:	687a      	ldr	r2, [r7, #4]
 80138a8:	4413      	add	r3, r2
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d001      	beq.n	80138b4 <getTokenPosition+0x6c>
        return i;
 80138b0:	89fb      	ldrh	r3, [r7, #14]
 80138b2:	e001      	b.n	80138b8 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 80138b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3714      	adds	r7, #20
 80138bc:	46bd      	mov	sp, r7
 80138be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c2:	4770      	bx	lr

080138c4 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80138c8:	4904      	ldr	r1, [pc, #16]	@ (80138dc <MX_FATFS_Init+0x18>)
 80138ca:	4805      	ldr	r0, [pc, #20]	@ (80138e0 <MX_FATFS_Init+0x1c>)
 80138cc:	f008 facc 	bl	801be68 <FATFS_LinkDriver>
 80138d0:	4603      	mov	r3, r0
 80138d2:	461a      	mov	r2, r3
 80138d4:	4b03      	ldr	r3, [pc, #12]	@ (80138e4 <MX_FATFS_Init+0x20>)
 80138d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80138d8:	bf00      	nop
 80138da:	bd80      	pop	{r7, pc}
 80138dc:	20001b58 	.word	0x20001b58
 80138e0:	08024fcc 	.word	0x08024fcc
 80138e4:	20001b54 	.word	0x20001b54

080138e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80138e8:	b480      	push	{r7}
 80138ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80138ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	46bd      	mov	sp, r7
 80138f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f6:	4770      	bx	lr

080138f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80138fe:	2300      	movs	r3, #0
 8013900:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013902:	f000 f86b 	bl	80139dc <BSP_SD_IsDetected>
 8013906:	4603      	mov	r3, r0
 8013908:	2b01      	cmp	r3, #1
 801390a:	d001      	beq.n	8013910 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801390c:	2301      	movs	r3, #1
 801390e:	e005      	b.n	801391c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8013910:	4804      	ldr	r0, [pc, #16]	@ (8013924 <BSP_SD_Init+0x2c>)
 8013912:	f7f6 fbeb 	bl	800a0ec <HAL_SD_Init>
 8013916:	4603      	mov	r3, r0
 8013918:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801391a:	79fb      	ldrb	r3, [r7, #7]
}
 801391c:	4618      	mov	r0, r3
 801391e:	3708      	adds	r7, #8
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	200018b8 	.word	0x200018b8

08013928 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b088      	sub	sp, #32
 801392c:	af02      	add	r7, sp, #8
 801392e:	60f8      	str	r0, [r7, #12]
 8013930:	60b9      	str	r1, [r7, #8]
 8013932:	607a      	str	r2, [r7, #4]
 8013934:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013936:	2300      	movs	r3, #0
 8013938:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	9300      	str	r3, [sp, #0]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	68ba      	ldr	r2, [r7, #8]
 8013942:	68f9      	ldr	r1, [r7, #12]
 8013944:	4806      	ldr	r0, [pc, #24]	@ (8013960 <BSP_SD_ReadBlocks+0x38>)
 8013946:	f7f6 fc81 	bl	800a24c <HAL_SD_ReadBlocks>
 801394a:	4603      	mov	r3, r0
 801394c:	2b00      	cmp	r3, #0
 801394e:	d001      	beq.n	8013954 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013950:	2301      	movs	r3, #1
 8013952:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013954:	7dfb      	ldrb	r3, [r7, #23]
}
 8013956:	4618      	mov	r0, r3
 8013958:	3718      	adds	r7, #24
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	bf00      	nop
 8013960:	200018b8 	.word	0x200018b8

08013964 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b088      	sub	sp, #32
 8013968:	af02      	add	r7, sp, #8
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]
 8013970:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8013972:	2300      	movs	r3, #0
 8013974:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	9300      	str	r3, [sp, #0]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	68ba      	ldr	r2, [r7, #8]
 801397e:	68f9      	ldr	r1, [r7, #12]
 8013980:	4806      	ldr	r0, [pc, #24]	@ (801399c <BSP_SD_WriteBlocks+0x38>)
 8013982:	f7f6 fe49 	bl	800a618 <HAL_SD_WriteBlocks>
 8013986:	4603      	mov	r3, r0
 8013988:	2b00      	cmp	r3, #0
 801398a:	d001      	beq.n	8013990 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801398c:	2301      	movs	r3, #1
 801398e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013990:	7dfb      	ldrb	r3, [r7, #23]
}
 8013992:	4618      	mov	r0, r3
 8013994:	3718      	adds	r7, #24
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	200018b8 	.word	0x200018b8

080139a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80139a4:	4805      	ldr	r0, [pc, #20]	@ (80139bc <BSP_SD_GetCardState+0x1c>)
 80139a6:	f7f7 f995 	bl	800acd4 <HAL_SD_GetCardState>
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b04      	cmp	r3, #4
 80139ae:	bf14      	ite	ne
 80139b0:	2301      	movne	r3, #1
 80139b2:	2300      	moveq	r3, #0
 80139b4:	b2db      	uxtb	r3, r3
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	200018b8 	.word	0x200018b8

080139c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80139c8:	6879      	ldr	r1, [r7, #4]
 80139ca:	4803      	ldr	r0, [pc, #12]	@ (80139d8 <BSP_SD_GetCardInfo+0x18>)
 80139cc:	f7f7 f956 	bl	800ac7c <HAL_SD_GetCardInfo>
}
 80139d0:	bf00      	nop
 80139d2:	3708      	adds	r7, #8
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	200018b8 	.word	0x200018b8

080139dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80139dc:	b480      	push	{r7}
 80139de:	b083      	sub	sp, #12
 80139e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80139e2:	2301      	movs	r3, #1
 80139e4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80139e6:	79fb      	ldrb	r3, [r7, #7]
 80139e8:	b2db      	uxtb	r3, r3
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	370c      	adds	r7, #12
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr
	...

080139f8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b082      	sub	sp, #8
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	4603      	mov	r3, r0
 8013a00:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013a02:	4b0b      	ldr	r3, [pc, #44]	@ (8013a30 <SD_CheckStatus+0x38>)
 8013a04:	2201      	movs	r2, #1
 8013a06:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013a08:	f7ff ffca 	bl	80139a0 <BSP_SD_GetCardState>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d107      	bne.n	8013a22 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013a12:	4b07      	ldr	r3, [pc, #28]	@ (8013a30 <SD_CheckStatus+0x38>)
 8013a14:	781b      	ldrb	r3, [r3, #0]
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	f023 0301 	bic.w	r3, r3, #1
 8013a1c:	b2da      	uxtb	r2, r3
 8013a1e:	4b04      	ldr	r3, [pc, #16]	@ (8013a30 <SD_CheckStatus+0x38>)
 8013a20:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013a22:	4b03      	ldr	r3, [pc, #12]	@ (8013a30 <SD_CheckStatus+0x38>)
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	b2db      	uxtb	r3, r3
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	20000028 	.word	0x20000028

08013a34 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8013a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8013a6c <SD_initialize+0x38>)
 8013a40:	2201      	movs	r2, #1
 8013a42:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013a44:	f7ff ff58 	bl	80138f8 <BSP_SD_Init>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d107      	bne.n	8013a5e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8013a4e:	79fb      	ldrb	r3, [r7, #7]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7ff ffd1 	bl	80139f8 <SD_CheckStatus>
 8013a56:	4603      	mov	r3, r0
 8013a58:	461a      	mov	r2, r3
 8013a5a:	4b04      	ldr	r3, [pc, #16]	@ (8013a6c <SD_initialize+0x38>)
 8013a5c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013a5e:	4b03      	ldr	r3, [pc, #12]	@ (8013a6c <SD_initialize+0x38>)
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	b2db      	uxtb	r3, r3
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}
 8013a6c:	20000028 	.word	0x20000028

08013a70 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	4603      	mov	r3, r0
 8013a78:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013a7a:	79fb      	ldrb	r3, [r7, #7]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7ff ffbb 	bl	80139f8 <SD_CheckStatus>
 8013a82:	4603      	mov	r3, r0
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60b9      	str	r1, [r7, #8]
 8013a94:	607a      	str	r2, [r7, #4]
 8013a96:	603b      	str	r3, [r7, #0]
 8013a98:	4603      	mov	r3, r0
 8013a9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8013aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8013aa4:	683a      	ldr	r2, [r7, #0]
 8013aa6:	6879      	ldr	r1, [r7, #4]
 8013aa8:	68b8      	ldr	r0, [r7, #8]
 8013aaa:	f7ff ff3d 	bl	8013928 <BSP_SD_ReadBlocks>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d107      	bne.n	8013ac4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8013ab4:	bf00      	nop
 8013ab6:	f7ff ff73 	bl	80139a0 <BSP_SD_GetCardState>
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d1fa      	bne.n	8013ab6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3718      	adds	r7, #24
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}

08013ace <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013ace:	b580      	push	{r7, lr}
 8013ad0:	b086      	sub	sp, #24
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	607a      	str	r2, [r7, #4]
 8013ad8:	603b      	str	r3, [r7, #0]
 8013ada:	4603      	mov	r3, r0
 8013adc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8013ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ae6:	683a      	ldr	r2, [r7, #0]
 8013ae8:	6879      	ldr	r1, [r7, #4]
 8013aea:	68b8      	ldr	r0, [r7, #8]
 8013aec:	f7ff ff3a 	bl	8013964 <BSP_SD_WriteBlocks>
 8013af0:	4603      	mov	r3, r0
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d107      	bne.n	8013b06 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8013af6:	bf00      	nop
 8013af8:	f7ff ff52 	bl	80139a0 <BSP_SD_GetCardState>
 8013afc:	4603      	mov	r3, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d1fa      	bne.n	8013af8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8013b02:	2300      	movs	r3, #0
 8013b04:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3718      	adds	r7, #24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b08c      	sub	sp, #48	@ 0x30
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	4603      	mov	r3, r0
 8013b18:	603a      	str	r2, [r7, #0]
 8013b1a:	71fb      	strb	r3, [r7, #7]
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013b20:	2301      	movs	r3, #1
 8013b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013b26:	4b25      	ldr	r3, [pc, #148]	@ (8013bbc <SD_ioctl+0xac>)
 8013b28:	781b      	ldrb	r3, [r3, #0]
 8013b2a:	b2db      	uxtb	r3, r3
 8013b2c:	f003 0301 	and.w	r3, r3, #1
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d001      	beq.n	8013b38 <SD_ioctl+0x28>
 8013b34:	2303      	movs	r3, #3
 8013b36:	e03c      	b.n	8013bb2 <SD_ioctl+0xa2>

  switch (cmd)
 8013b38:	79bb      	ldrb	r3, [r7, #6]
 8013b3a:	2b03      	cmp	r3, #3
 8013b3c:	d834      	bhi.n	8013ba8 <SD_ioctl+0x98>
 8013b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8013b44 <SD_ioctl+0x34>)
 8013b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b44:	08013b55 	.word	0x08013b55
 8013b48:	08013b5d 	.word	0x08013b5d
 8013b4c:	08013b75 	.word	0x08013b75
 8013b50:	08013b8f 	.word	0x08013b8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013b54:	2300      	movs	r3, #0
 8013b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b5a:	e028      	b.n	8013bae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b5c:	f107 030c 	add.w	r3, r7, #12
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7ff ff2d 	bl	80139c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b72:	e01c      	b.n	8013bae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b74:	f107 030c 	add.w	r3, r7, #12
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7ff ff21 	bl	80139c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013b86:	2300      	movs	r3, #0
 8013b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013b8c:	e00f      	b.n	8013bae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b8e:	f107 030c 	add.w	r3, r7, #12
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7ff ff14 	bl	80139c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b9a:	0a5a      	lsrs	r2, r3, #9
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8013ba6:	e002      	b.n	8013bae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013ba8:	2304      	movs	r3, #4
 8013baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8013bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3730      	adds	r7, #48	@ 0x30
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd80      	pop	{r7, pc}
 8013bba:	bf00      	nop
 8013bbc:	20000028 	.word	0x20000028

08013bc0 <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8013bc4:	4b03      	ldr	r3, [pc, #12]	@ (8013bd4 <RtcInt+0x14>)
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8013bca:	bf00      	nop
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr
 8013bd4:	20000029 	.word	0x20000029

08013bd8 <Rtc_Alarm_watchdog_disable>:

void Rtc_Alarm_watchdog_disable()
{
 8013bd8:	b480      	push	{r7}
 8013bda:	af00      	add	r7, sp, #0
  __HAL_RTC_ALARM_DISABLE_IT(&hrtc, RTC_IT_ALRB);
 8013bdc:	4b06      	ldr	r3, [pc, #24]	@ (8013bf8 <Rtc_Alarm_watchdog_disable+0x20>)
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	689a      	ldr	r2, [r3, #8]
 8013be2:	4b05      	ldr	r3, [pc, #20]	@ (8013bf8 <Rtc_Alarm_watchdog_disable+0x20>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013bea:	609a      	str	r2, [r3, #8]
}
 8013bec:	bf00      	nop
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf4:	4770      	bx	lr
 8013bf6:	bf00      	nop
 8013bf8:	20001898 	.word	0x20001898

08013bfc <Rtc_Alarm_watchdog>:

void Rtc_Alarm_watchdog()
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b092      	sub	sp, #72	@ 0x48
 8013c00:	af00      	add	r7, sp, #0
	uint16_t seconds;
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013c02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013c06:	2200      	movs	r2, #0
 8013c08:	4619      	mov	r1, r3
 8013c0a:	4828      	ldr	r0, [pc, #160]	@ (8013cac <Rtc_Alarm_watchdog+0xb0>)
 8013c0c:	f7f5 feb9 	bl	8009982 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013c10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013c14:	2200      	movs	r2, #0
 8013c16:	4619      	mov	r1, r3
 8013c18:	4824      	ldr	r0, [pc, #144]	@ (8013cac <Rtc_Alarm_watchdog+0xb0>)
 8013c1a:	f7f5 ff94 	bl	8009b46 <HAL_RTC_GetDate>

    seconds = gTime.Seconds + 25;
 8013c1e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8013c22:	3319      	adds	r3, #25
 8013c24:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if(seconds > 59)
 8013c28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c2c:	2b3b      	cmp	r3, #59	@ 0x3b
 8013c2e:	d902      	bls.n	8013c36 <Rtc_Alarm_watchdog+0x3a>
    {
    	seconds = 0;
 8013c30:	2300      	movs	r3, #0
 8013c32:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    }

      RTC_AlarmTypeDef sAlarm = {0};
 8013c36:	1d3b      	adds	r3, r7, #4
 8013c38:	2228      	movs	r2, #40	@ 0x28
 8013c3a:	2100      	movs	r1, #0
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f00b f855 	bl	801ecec <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013c42:	2300      	movs	r3, #0
 8013c44:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = 0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = seconds;
 8013c4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c4e:	b2db      	uxtb	r3, r3
 8013c50:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013c52:	2300      	movs	r3, #0
 8013c54:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013c56:	2300      	movs	r3, #0
 8013c58:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_MINUTES| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013c5e:	4b14      	ldr	r3, [pc, #80]	@ (8013cb0 <Rtc_Alarm_watchdog+0xb4>)
 8013c60:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013c62:	2300      	movs	r3, #0
 8013c64:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013c66:	2300      	movs	r3, #0
 8013c68:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_B;
 8013c70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013c74:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013c76:	1d3b      	adds	r3, r7, #4
 8013c78:	2200      	movs	r2, #0
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	480b      	ldr	r0, [pc, #44]	@ (8013cac <Rtc_Alarm_watchdog+0xb0>)
 8013c7e:	f7f5 ffb1 	bl	8009be4 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRB);
 8013c82:	4b0a      	ldr	r3, [pc, #40]	@ (8013cac <Rtc_Alarm_watchdog+0xb0>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	689a      	ldr	r2, [r3, #8]
 8013c88:	4b08      	ldr	r3, [pc, #32]	@ (8013cac <Rtc_Alarm_watchdog+0xb0>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8013c90:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRB);
 8013c92:	4b06      	ldr	r3, [pc, #24]	@ (8013cac <Rtc_Alarm_watchdog+0xb0>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	68db      	ldr	r3, [r3, #12]
 8013c98:	b2da      	uxtb	r2, r3
 8013c9a:	4b04      	ldr	r3, [pc, #16]	@ (8013cac <Rtc_Alarm_watchdog+0xb0>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f462 5202 	orn	r2, r2, #8320	@ 0x2080
 8013ca2:	60da      	str	r2, [r3, #12]

}
 8013ca4:	bf00      	nop
 8013ca6:	3748      	adds	r7, #72	@ 0x48
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	20001898 	.word	0x20001898
 8013cb0:	80808000 	.word	0x80808000

08013cb4 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b088      	sub	sp, #32
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 8013cbc:	f107 030c 	add.w	r3, r7, #12
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f000 f8e4 	bl	8013e90 <Parse_Date>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 8013ccc:	7ffb      	ldrb	r3, [r7, #31]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d10c      	bne.n	8013cec <Set_Date+0x38>
		sDate.Date = date[0];
 8013cd2:	7b3b      	ldrb	r3, [r7, #12]
 8013cd4:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 8013cd6:	7b7b      	ldrb	r3, [r7, #13]
 8013cd8:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 8013cda:	7bbb      	ldrb	r3, [r7, #14]
 8013cdc:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013cde:	f107 0318 	add.w	r3, r7, #24
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	4619      	mov	r1, r3
 8013ce6:	4805      	ldr	r0, [pc, #20]	@ (8013cfc <Set_Date+0x48>)
 8013ce8:	f7f5 fea9 	bl	8009a3e <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 8013cec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013cf0:	f7f0 fa16 	bl	8004120 <HAL_Delay>
}
 8013cf4:	bf00      	nop
 8013cf6:	3720      	adds	r7, #32
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	20001898 	.word	0x20001898

08013d00 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b094      	sub	sp, #80	@ 0x50
 8013d04:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 8013d06:	4b44      	ldr	r3, [pc, #272]	@ (8013e18 <Rtc_set_alarm+0x118>)
 8013d08:	781b      	ldrb	r3, [r3, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d07f      	beq.n	8013e0e <Rtc_set_alarm+0x10e>
{
	uint8_t hour = 0;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 8013d14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d18:	2200      	movs	r2, #0
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	483f      	ldr	r0, [pc, #252]	@ (8013e1c <Rtc_set_alarm+0x11c>)
 8013d1e:	f7f5 fe30 	bl	8009982 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8013d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d26:	2200      	movs	r2, #0
 8013d28:	4619      	mov	r1, r3
 8013d2a:	483c      	ldr	r0, [pc, #240]	@ (8013e1c <Rtc_set_alarm+0x11c>)
 8013d2c:	f7f5 ff0b 	bl	8009b46 <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8013d30:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8013d34:	461a      	mov	r2, r3
 8013d36:	4b3a      	ldr	r3, [pc, #232]	@ (8013e20 <Rtc_set_alarm+0x120>)
 8013d38:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013d3c:	b29b      	uxth	r3, r3
 8013d3e:	4413      	add	r3, r2
 8013d40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    hour = gTime.Hours;
 8013d44:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8013d48:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(minute > 59)
 8013d4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d50:	2b3b      	cmp	r3, #59	@ 0x3b
 8013d52:	d917      	bls.n	8013d84 <Rtc_set_alarm+0x84>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8013d54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d58:	4a31      	ldr	r2, [pc, #196]	@ (8013e20 <Rtc_set_alarm+0x120>)
 8013d5a:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8013d5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d62:	fb01 f202 	mul.w	r2, r1, r2
 8013d66:	1a9b      	subs	r3, r3, r2
 8013d68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 8013d6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013d70:	3301      	adds	r3, #1
 8013d72:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

    	if(hour > 23)
 8013d76:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013d7a:	2b17      	cmp	r3, #23
 8013d7c:	d902      	bls.n	8013d84 <Rtc_set_alarm+0x84>
    	{
          hour = 0;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8013d84:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8013d88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d8c:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 8013d90:	9100      	str	r1, [sp, #0]
 8013d92:	4924      	ldr	r1, [pc, #144]	@ (8013e24 <Rtc_set_alarm+0x124>)
 8013d94:	4824      	ldr	r0, [pc, #144]	@ (8013e28 <Rtc_set_alarm+0x128>)
 8013d96:	f00a fe5f 	bl	801ea58 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 8013d9a:	1d3b      	adds	r3, r7, #4
 8013d9c:	2228      	movs	r2, #40	@ 0x28
 8013d9e:	2100      	movs	r1, #0
 8013da0:	4618      	mov	r0, r3
 8013da2:	f00a ffa3 	bl	801ecec <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 8013daa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013dae:	b2db      	uxtb	r3, r3
 8013db0:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8013db2:	2300      	movs	r3, #0
 8013db4:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8013db6:	2300      	movs	r3, #0
 8013db8:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 8013dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8013e2c <Rtc_set_alarm+0x12c>)
 8013dc4:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 8013dce:	2301      	movs	r3, #1
 8013dd0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 8013dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8013dda:	1d3b      	adds	r3, r7, #4
 8013ddc:	2200      	movs	r2, #0
 8013dde:	4619      	mov	r1, r3
 8013de0:	480e      	ldr	r0, [pc, #56]	@ (8013e1c <Rtc_set_alarm+0x11c>)
 8013de2:	f7f5 feff 	bl	8009be4 <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 8013de6:	4b0d      	ldr	r3, [pc, #52]	@ (8013e1c <Rtc_set_alarm+0x11c>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	689a      	ldr	r2, [r3, #8]
 8013dec:	4b0b      	ldr	r3, [pc, #44]	@ (8013e1c <Rtc_set_alarm+0x11c>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8013df4:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 8013df6:	4b09      	ldr	r3, [pc, #36]	@ (8013e1c <Rtc_set_alarm+0x11c>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	68db      	ldr	r3, [r3, #12]
 8013dfc:	b2da      	uxtb	r2, r3
 8013dfe:	4b07      	ldr	r3, [pc, #28]	@ (8013e1c <Rtc_set_alarm+0x11c>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8013e06:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 8013e08:	4b03      	ldr	r3, [pc, #12]	@ (8013e18 <Rtc_set_alarm+0x118>)
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	701a      	strb	r2, [r3, #0]


		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 8013e0e:	bf00      	nop
 8013e10:	3748      	adds	r7, #72	@ 0x48
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
 8013e16:	bf00      	nop
 8013e18:	20000029 	.word	0x20000029
 8013e1c:	20001898 	.word	0x20001898
 8013e20:	200012cc 	.word	0x200012cc
 8013e24:	080246ac 	.word	0x080246ac
 8013e28:	2000002c 	.word	0x2000002c
 8013e2c:	80800080 	.word	0x80800080

08013e30 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b08c      	sub	sp, #48	@ 0x30
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8013e38:	f107 030c 	add.w	r3, r7, #12
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f000 f890 	bl	8013f64 <Parse_Time>
 8013e44:	4603      	mov	r3, r0
 8013e46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 8013e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d113      	bne.n	8013e7a <Set_Time+0x4a>
		sTime.Hours = time[0];
 8013e52:	7b3b      	ldrb	r3, [r7, #12]
 8013e54:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8013e56:	7b7b      	ldrb	r3, [r7, #13]
 8013e58:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 8013e5a:	7bbb      	ldrb	r3, [r7, #14]
 8013e5c:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	627b      	str	r3, [r7, #36]	@ 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8013e62:	2300      	movs	r3, #0
 8013e64:	62bb      	str	r3, [r7, #40]	@ 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8013e66:	f107 0318 	add.w	r3, r7, #24
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	4807      	ldr	r0, [pc, #28]	@ (8013e8c <Set_Time+0x5c>)
 8013e70:	f7f5 fced 	bl	800984e <HAL_RTC_SetTime>
 8013e74:	4603      	mov	r3, r0
 8013e76:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	}

	HAL_Delay(500);
 8013e7a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8013e7e:	f7f0 f94f 	bl	8004120 <HAL_Delay>

}
 8013e82:	bf00      	nop
 8013e84:	3730      	adds	r7, #48	@ 0x30
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20001898 	.word	0x20001898

08013e90 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b084      	sub	sp, #16
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8013ea2:	492e      	ldr	r1, [pc, #184]	@ (8013f5c <Parse_Date+0xcc>)
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f00a ff37 	bl	801ed18 <strtok>
 8013eaa:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d14b      	bne.n	8013f4a <Parse_Date+0xba>
		{
			return 1;
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	e04d      	b.n	8013f52 <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8013eb6:	68b8      	ldr	r0, [r7, #8]
 8013eb8:	f009 fc96 	bl	801d7e8 <atoi>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 8013ec0:	89fb      	ldrh	r3, [r7, #14]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d10a      	bne.n	8013edc <Parse_Date+0x4c>
 8013ec6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013eca:	2b1f      	cmp	r3, #31
 8013ecc:	dc03      	bgt.n	8013ed6 <Parse_Date+0x46>
 8013ece:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	dc02      	bgt.n	8013edc <Parse_Date+0x4c>
			{
				val= 1;
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	81bb      	strh	r3, [r7, #12]
 8013eda:	e028      	b.n	8013f2e <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 8013edc:	89fb      	ldrh	r3, [r7, #14]
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	d10a      	bne.n	8013ef8 <Parse_Date+0x68>
 8013ee2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ee6:	2b0c      	cmp	r3, #12
 8013ee8:	dc03      	bgt.n	8013ef2 <Parse_Date+0x62>
 8013eea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	dc02      	bgt.n	8013ef8 <Parse_Date+0x68>
			{
				val= 1;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	81bb      	strh	r3, [r7, #12]
 8013ef6:	e01a      	b.n	8013f2e <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 8013ef8:	89fb      	ldrh	r3, [r7, #14]
 8013efa:	2b02      	cmp	r3, #2
 8013efc:	d112      	bne.n	8013f24 <Parse_Date+0x94>
 8013efe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013f06:	dd0d      	ble.n	8013f24 <Parse_Date+0x94>
			{
				val=val%100;
 8013f08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f0c:	4a14      	ldr	r2, [pc, #80]	@ (8013f60 <Parse_Date+0xd0>)
 8013f0e:	fb82 1203 	smull	r1, r2, r2, r3
 8013f12:	1151      	asrs	r1, r2, #5
 8013f14:	17da      	asrs	r2, r3, #31
 8013f16:	1a8a      	subs	r2, r1, r2
 8013f18:	2164      	movs	r1, #100	@ 0x64
 8013f1a:	fb01 f202 	mul.w	r2, r1, r2
 8013f1e:	1a9b      	subs	r3, r3, r2
 8013f20:	81bb      	strh	r3, [r7, #12]
 8013f22:	e004      	b.n	8013f2e <Parse_Date+0x9e>
			}
			else if(i > 2)
 8013f24:	89fb      	ldrh	r3, [r7, #14]
 8013f26:	2b02      	cmp	r3, #2
 8013f28:	d901      	bls.n	8013f2e <Parse_Date+0x9e>
			{
				return 1;
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	e011      	b.n	8013f52 <Parse_Date+0xc2>
			}


		   date[i] =val;
 8013f2e:	89fb      	ldrh	r3, [r7, #14]
 8013f30:	683a      	ldr	r2, [r7, #0]
 8013f32:	4413      	add	r3, r2
 8013f34:	89ba      	ldrh	r2, [r7, #12]
 8013f36:	b2d2      	uxtb	r2, r2
 8013f38:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 8013f3a:	4908      	ldr	r1, [pc, #32]	@ (8013f5c <Parse_Date+0xcc>)
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	f00a feeb 	bl	801ed18 <strtok>
 8013f42:	60b8      	str	r0, [r7, #8]
		i++;
 8013f44:	89fb      	ldrh	r3, [r7, #14]
 8013f46:	3301      	adds	r3, #1
 8013f48:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d1b2      	bne.n	8013eb6 <Parse_Date+0x26>
	}

	}

	return 0;
 8013f50:	2300      	movs	r3, #0

}
 8013f52:	4618      	mov	r0, r3
 8013f54:	3710      	adds	r7, #16
 8013f56:	46bd      	mov	sp, r7
 8013f58:	bd80      	pop	{r7, pc}
 8013f5a:	bf00      	nop
 8013f5c:	080246bc 	.word	0x080246bc
 8013f60:	51eb851f 	.word	0x51eb851f

08013f64 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b084      	sub	sp, #16
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8013f72:	2300      	movs	r3, #0
 8013f74:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8013f76:	492a      	ldr	r1, [pc, #168]	@ (8014020 <Parse_Time+0xbc>)
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f00a fecd 	bl	801ed18 <strtok>
 8013f7e:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d143      	bne.n	801400e <Parse_Time+0xaa>
			{
				return 1;
 8013f86:	2301      	movs	r3, #1
 8013f88:	e045      	b.n	8014016 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 8013f8a:	68b8      	ldr	r0, [r7, #8]
 8013f8c:	f009 fc2c 	bl	801d7e8 <atoi>
 8013f90:	4603      	mov	r3, r0
 8013f92:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8013f94:	89fb      	ldrh	r3, [r7, #14]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d10a      	bne.n	8013fb0 <Parse_Time+0x4c>
 8013f9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013f9e:	2b18      	cmp	r3, #24
 8013fa0:	dc03      	bgt.n	8013faa <Parse_Time+0x46>
 8013fa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	da02      	bge.n	8013fb0 <Parse_Time+0x4c>
				{
					val= 24;
 8013faa:	2318      	movs	r3, #24
 8013fac:	81bb      	strh	r3, [r7, #12]
 8013fae:	e020      	b.n	8013ff2 <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8013fb0:	89fb      	ldrh	r3, [r7, #14]
 8013fb2:	2b01      	cmp	r3, #1
 8013fb4:	d10a      	bne.n	8013fcc <Parse_Time+0x68>
 8013fb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fba:	2b3b      	cmp	r3, #59	@ 0x3b
 8013fbc:	dc03      	bgt.n	8013fc6 <Parse_Time+0x62>
 8013fbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	da02      	bge.n	8013fcc <Parse_Time+0x68>
				{
					val= 59;
 8013fc6:	233b      	movs	r3, #59	@ 0x3b
 8013fc8:	81bb      	strh	r3, [r7, #12]
 8013fca:	e012      	b.n	8013ff2 <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 8013fcc:	89fb      	ldrh	r3, [r7, #14]
 8013fce:	2b02      	cmp	r3, #2
 8013fd0:	d10a      	bne.n	8013fe8 <Parse_Time+0x84>
 8013fd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fd6:	2b3b      	cmp	r3, #59	@ 0x3b
 8013fd8:	dc03      	bgt.n	8013fe2 <Parse_Time+0x7e>
 8013fda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	da02      	bge.n	8013fe8 <Parse_Time+0x84>
				{
					val=59;
 8013fe2:	233b      	movs	r3, #59	@ 0x3b
 8013fe4:	81bb      	strh	r3, [r7, #12]
 8013fe6:	e004      	b.n	8013ff2 <Parse_Time+0x8e>
				}
				else if(i > 2)
 8013fe8:	89fb      	ldrh	r3, [r7, #14]
 8013fea:	2b02      	cmp	r3, #2
 8013fec:	d901      	bls.n	8013ff2 <Parse_Time+0x8e>
				{
					return 1;
 8013fee:	2301      	movs	r3, #1
 8013ff0:	e011      	b.n	8014016 <Parse_Time+0xb2>
				}


				time[i] =val;
 8013ff2:	89fb      	ldrh	r3, [r7, #14]
 8013ff4:	683a      	ldr	r2, [r7, #0]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	89ba      	ldrh	r2, [r7, #12]
 8013ffa:	b2d2      	uxtb	r2, r2
 8013ffc:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 8013ffe:	4908      	ldr	r1, [pc, #32]	@ (8014020 <Parse_Time+0xbc>)
 8014000:	2000      	movs	r0, #0
 8014002:	f00a fe89 	bl	801ed18 <strtok>
 8014006:	60b8      	str	r0, [r7, #8]
			i++;
 8014008:	89fb      	ldrh	r3, [r7, #14]
 801400a:	3301      	adds	r3, #1
 801400c:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d1ba      	bne.n	8013f8a <Parse_Time+0x26>
		}

		}

		return 0;
 8014014:	2300      	movs	r3, #0
}
 8014016:	4618      	mov	r0, r3
 8014018:	3710      	adds	r7, #16
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}
 801401e:	bf00      	nop
 8014020:	080246bc 	.word	0x080246bc

08014024 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8014024:	b480      	push	{r7}
 8014026:	b083      	sub	sp, #12
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	460b      	mov	r3, r1
 801402e:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8014030:	78fb      	ldrb	r3, [r7, #3]
 8014032:	091b      	lsrs	r3, r3, #4
 8014034:	b2db      	uxtb	r3, r3
 8014036:	4619      	mov	r1, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	1c5a      	adds	r2, r3, #1
 801403c:	607a      	str	r2, [r7, #4]
 801403e:	4a08      	ldr	r2, [pc, #32]	@ (8014060 <CharToHexasc+0x3c>)
 8014040:	5c52      	ldrb	r2, [r2, r1]
 8014042:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8014044:	78fb      	ldrb	r3, [r7, #3]
 8014046:	f003 030f 	and.w	r3, r3, #15
 801404a:	4a05      	ldr	r2, [pc, #20]	@ (8014060 <CharToHexasc+0x3c>)
 801404c:	5cd2      	ldrb	r2, [r2, r3]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	701a      	strb	r2, [r3, #0]
}
 8014052:	bf00      	nop
 8014054:	370c      	adds	r7, #12
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop
 8014060:	08024fe0 	.word	0x08024fe0

08014064 <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b088      	sub	sp, #32
 8014068:	af00      	add	r7, sp, #0
	adc_Disable();
 801406a:	4830      	ldr	r0, [pc, #192]	@ (801412c <adc_InitOneShotMode+0xc8>)
 801406c:	f7f0 f903 	bl	8004276 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8014070:	f107 0314 	add.w	r3, r7, #20
 8014074:	2200      	movs	r2, #0
 8014076:	601a      	str	r2, [r3, #0]
 8014078:	605a      	str	r2, [r3, #4]
 801407a:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 801407c:	4b2b      	ldr	r3, [pc, #172]	@ (801412c <adc_InitOneShotMode+0xc8>)
 801407e:	4a2c      	ldr	r2, [pc, #176]	@ (8014130 <adc_InitOneShotMode+0xcc>)
 8014080:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8014082:	4b2a      	ldr	r3, [pc, #168]	@ (801412c <adc_InitOneShotMode+0xc8>)
 8014084:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8014088:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801408a:	4b28      	ldr	r3, [pc, #160]	@ (801412c <adc_InitOneShotMode+0xc8>)
 801408c:	2200      	movs	r2, #0
 801408e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8014090:	4b26      	ldr	r3, [pc, #152]	@ (801412c <adc_InitOneShotMode+0xc8>)
 8014092:	2200      	movs	r2, #0
 8014094:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8014096:	4b25      	ldr	r3, [pc, #148]	@ (801412c <adc_InitOneShotMode+0xc8>)
 8014098:	2200      	movs	r2, #0
 801409a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801409c:	4b23      	ldr	r3, [pc, #140]	@ (801412c <adc_InitOneShotMode+0xc8>)
 801409e:	2200      	movs	r2, #0
 80140a0:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80140a4:	4b21      	ldr	r3, [pc, #132]	@ (801412c <adc_InitOneShotMode+0xc8>)
 80140a6:	2200      	movs	r2, #0
 80140a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80140aa:	4b20      	ldr	r3, [pc, #128]	@ (801412c <adc_InitOneShotMode+0xc8>)
 80140ac:	4a21      	ldr	r2, [pc, #132]	@ (8014134 <adc_InitOneShotMode+0xd0>)
 80140ae:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80140b0:	4b1e      	ldr	r3, [pc, #120]	@ (801412c <adc_InitOneShotMode+0xc8>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 80140b6:	4b1d      	ldr	r3, [pc, #116]	@ (801412c <adc_InitOneShotMode+0xc8>)
 80140b8:	2201      	movs	r2, #1
 80140ba:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 80140bc:	4b1b      	ldr	r3, [pc, #108]	@ (801412c <adc_InitOneShotMode+0xc8>)
 80140be:	2200      	movs	r2, #0
 80140c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80140c4:	4b19      	ldr	r3, [pc, #100]	@ (801412c <adc_InitOneShotMode+0xc8>)
 80140c6:	2201      	movs	r2, #1
 80140c8:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80140ca:	4818      	ldr	r0, [pc, #96]	@ (801412c <adc_InitOneShotMode+0xc8>)
 80140cc:	f7f0 f890 	bl	80041f0 <HAL_ADC_Init>
 80140d0:	4603      	mov	r3, r0
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d001      	beq.n	80140da <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 80140d6:	f7ef facd 	bl	8003674 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80140da:	2300      	movs	r3, #0
 80140dc:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80140de:	f107 0314 	add.w	r3, r7, #20
 80140e2:	4619      	mov	r1, r3
 80140e4:	4811      	ldr	r0, [pc, #68]	@ (801412c <adc_InitOneShotMode+0xc8>)
 80140e6:	f7f0 fc97 	bl	8004a18 <HAL_ADCEx_MultiModeConfigChannel>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d001      	beq.n	80140f4 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 80140f0:	f7ef fac0 	bl	8003674 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 80140f4:	1d3b      	adds	r3, r7, #4
 80140f6:	2200      	movs	r2, #0
 80140f8:	601a      	str	r2, [r3, #0]
 80140fa:	605a      	str	r2, [r3, #4]
 80140fc:	609a      	str	r2, [r3, #8]
 80140fe:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 8014100:	230a      	movs	r3, #10
 8014102:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 8014104:	2301      	movs	r3, #1
 8014106:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8014108:	2302      	movs	r3, #2
 801410a:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 801410c:	2300      	movs	r3, #0
 801410e:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014110:	1d3b      	adds	r3, r7, #4
 8014112:	4619      	mov	r1, r3
 8014114:	4805      	ldr	r0, [pc, #20]	@ (801412c <adc_InitOneShotMode+0xc8>)
 8014116:	f7f0 fa61 	bl	80045dc <HAL_ADC_ConfigChannel>
 801411a:	4603      	mov	r3, r0
 801411c:	2b00      	cmp	r3, #0
 801411e:	d001      	beq.n	8014124 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8014120:	f7ef faa8 	bl	8003674 <Error_Handler>
		  }



}
 8014124:	bf00      	nop
 8014126:	3720      	adds	r7, #32
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	200017f0 	.word	0x200017f0
 8014130:	40012000 	.word	0x40012000
 8014134:	0f000001 	.word	0x0f000001

08014138 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8014138:	b580      	push	{r7, lr}
 801413a:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 801413c:	4802      	ldr	r0, [pc, #8]	@ (8014148 <adc_Getval+0x10>)
 801413e:	f7f0 fa3f 	bl	80045c0 <HAL_ADC_GetValue>
 8014142:	4603      	mov	r3, r0

}
 8014144:	4618      	mov	r0, r3
 8014146:	bd80      	pop	{r7, pc}
 8014148:	200017f0 	.word	0x200017f0
 801414c:	00000000 	.word	0x00000000

08014150 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b084      	sub	sp, #16
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8014158:	f7ff ff84 	bl	8014064 <adc_InitOneShotMode>
	HAL_Delay(1);
 801415c:	2001      	movs	r0, #1
 801415e:	f7ef ffdf 	bl	8004120 <HAL_Delay>
	adc_Start();
 8014162:	4847      	ldr	r0, [pc, #284]	@ (8014280 <adc_Measure+0x130>)
 8014164:	f7f0 f8ba 	bl	80042dc <HAL_ADC_Start>
	HAL_Delay(1);
 8014168:	2001      	movs	r0, #1
 801416a:	f7ef ffd9 	bl	8004120 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801416e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014172:	4843      	ldr	r0, [pc, #268]	@ (8014280 <adc_Measure+0x130>)
 8014174:	f7f0 f999 	bl	80044aa <HAL_ADC_PollForConversion>
 8014178:	4603      	mov	r3, r0
 801417a:	2b00      	cmp	r3, #0
 801417c:	d01d      	beq.n	80141ba <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 801417e:	2001      	movs	r0, #1
 8014180:	f7ef ffce 	bl	8004120 <HAL_Delay>
		   adc_Start();
 8014184:	483e      	ldr	r0, [pc, #248]	@ (8014280 <adc_Measure+0x130>)
 8014186:	f7f0 f8a9 	bl	80042dc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 801418a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801418e:	483c      	ldr	r0, [pc, #240]	@ (8014280 <adc_Measure+0x130>)
 8014190:	f7f0 f98b 	bl	80044aa <HAL_ADC_PollForConversion>
 8014194:	4603      	mov	r3, r0
 8014196:	2b00      	cmp	r3, #0
 8014198:	d00f      	beq.n	80141ba <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 801419a:	2001      	movs	r0, #1
 801419c:	f7ef ffc0 	bl	8004120 <HAL_Delay>
				adc_Start();
 80141a0:	4837      	ldr	r0, [pc, #220]	@ (8014280 <adc_Measure+0x130>)
 80141a2:	f7f0 f89b 	bl	80042dc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141aa:	4835      	ldr	r0, [pc, #212]	@ (8014280 <adc_Measure+0x130>)
 80141ac:	f7f0 f97d 	bl	80044aa <HAL_ADC_PollForConversion>
 80141b0:	4603      	mov	r3, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d001      	beq.n	80141ba <adc_Measure+0x6a>
				{
					return 0;
 80141b6:	2300      	movs	r3, #0
 80141b8:	e05a      	b.n	8014270 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 80141ba:	4831      	ldr	r0, [pc, #196]	@ (8014280 <adc_Measure+0x130>)
 80141bc:	f7f0 f942 	bl	8004444 <HAL_ADC_Stop>

	val = adc_Getval();
 80141c0:	f7ff ffba 	bl	8014138 <adc_Getval>
 80141c4:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 80141c6:	2001      	movs	r0, #1
 80141c8:	f7ef ffaa 	bl	8004120 <HAL_Delay>
	adc_Start();
 80141cc:	482c      	ldr	r0, [pc, #176]	@ (8014280 <adc_Measure+0x130>)
 80141ce:	f7f0 f885 	bl	80042dc <HAL_ADC_Start>
	HAL_Delay(1);
 80141d2:	2001      	movs	r0, #1
 80141d4:	f7ef ffa4 	bl	8004120 <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141dc:	4828      	ldr	r0, [pc, #160]	@ (8014280 <adc_Measure+0x130>)
 80141de:	f7f0 f964 	bl	80044aa <HAL_ADC_PollForConversion>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d01d      	beq.n	8014224 <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 80141e8:	2001      	movs	r0, #1
 80141ea:	f7ef ff99 	bl	8004120 <HAL_Delay>
		   adc_Start();
 80141ee:	4824      	ldr	r0, [pc, #144]	@ (8014280 <adc_Measure+0x130>)
 80141f0:	f7f0 f874 	bl	80042dc <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 80141f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80141f8:	4821      	ldr	r0, [pc, #132]	@ (8014280 <adc_Measure+0x130>)
 80141fa:	f7f0 f956 	bl	80044aa <HAL_ADC_PollForConversion>
 80141fe:	4603      	mov	r3, r0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d00f      	beq.n	8014224 <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8014204:	2001      	movs	r0, #1
 8014206:	f7ef ff8b 	bl	8004120 <HAL_Delay>
				adc_Start();
 801420a:	481d      	ldr	r0, [pc, #116]	@ (8014280 <adc_Measure+0x130>)
 801420c:	f7f0 f866 	bl	80042dc <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8014210:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014214:	481a      	ldr	r0, [pc, #104]	@ (8014280 <adc_Measure+0x130>)
 8014216:	f7f0 f948 	bl	80044aa <HAL_ADC_PollForConversion>
 801421a:	4603      	mov	r3, r0
 801421c:	2b00      	cmp	r3, #0
 801421e:	d001      	beq.n	8014224 <adc_Measure+0xd4>
				{
					return 0;
 8014220:	2300      	movs	r3, #0
 8014222:	e025      	b.n	8014270 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8014224:	4816      	ldr	r0, [pc, #88]	@ (8014280 <adc_Measure+0x130>)
 8014226:	f7f0 f90d 	bl	8004444 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 801422a:	f7ff ff85 	bl	8014138 <adc_Getval>
 801422e:	4602      	mov	r2, r0
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	4413      	add	r3, r2
 8014234:	085b      	lsrs	r3, r3, #1
 8014236:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	ee07 3a90 	vmov	s15, r3
 801423e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014242:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8014284 <adc_Measure+0x134>
 8014246:	ee67 7a87 	vmul.f32	s15, s15, s14
 801424a:	ee17 0a90 	vmov	r0, s15
 801424e:	f7ec f993 	bl	8000578 <__aeabi_f2d>
 8014252:	a309      	add	r3, pc, #36	@ (adr r3, 8014278 <adc_Measure+0x128>)
 8014254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014258:	f7ec f9e6 	bl	8000628 <__aeabi_dmul>
 801425c:	4602      	mov	r2, r0
 801425e:	460b      	mov	r3, r1
 8014260:	4610      	mov	r0, r2
 8014262:	4619      	mov	r1, r3
 8014264:	f7ec fcd8 	bl	8000c18 <__aeabi_d2f>
 8014268:	4602      	mov	r2, r0
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	601a      	str	r2, [r3, #0]


	return 1;
 801426e:	2301      	movs	r3, #1


}
 8014270:	4618      	mov	r0, r3
 8014272:	3710      	adds	r7, #16
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}
 8014278:	851eb852 	.word	0x851eb852
 801427c:	3ff451eb 	.word	0x3ff451eb
 8014280:	200017f0 	.word	0x200017f0
 8014284:	3a533333 	.word	0x3a533333

08014288 <init_driver>:

#define sensirion_hal_sleep_us sensirion_i2c_hal_sleep_usec

static uint8_t _i2c_address;

void init_driver(uint8_t i2c_address) {
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	4603      	mov	r3, r0
 8014290:	71fb      	strb	r3, [r7, #7]
    _i2c_address = i2c_address;
 8014292:	4a04      	ldr	r2, [pc, #16]	@ (80142a4 <init_driver+0x1c>)
 8014294:	79fb      	ldrb	r3, [r7, #7]
 8014296:	7013      	strb	r3, [r2, #0]
}
 8014298:	bf00      	nop
 801429a:	370c      	adds	r7, #12
 801429c:	46bd      	mov	sp, r7
 801429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a2:	4770      	bx	lr
 80142a4:	20001b5c 	.word	0x20001b5c

080142a8 <scd30_await_data_ready>:

int16_t scd30_await_data_ready() {
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
    uint16_t data_ready = 0;
 80142ae:	2300      	movs	r3, #0
 80142b0:	80bb      	strh	r3, [r7, #4]
    int16_t local_error = 0;
 80142b2:	2300      	movs	r3, #0
 80142b4:	80fb      	strh	r3, [r7, #6]
    local_error = scd30_get_data_ready(&data_ready);
 80142b6:	1d3b      	adds	r3, r7, #4
 80142b8:	4618      	mov	r0, r3
 80142ba:	f000 f8f5 	bl	80144a8 <scd30_get_data_ready>
 80142be:	4603      	mov	r3, r0
 80142c0:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 80142c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d01c      	beq.n	8014304 <scd30_await_data_ready+0x5c>
        return local_error;
 80142ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142ce:	e01e      	b.n	801430e <scd30_await_data_ready+0x66>
    }
    while (data_ready == 0) {
    	if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))//dont give delay when usb connected as we want to service console aswell
 80142d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80142d4:	4810      	ldr	r0, [pc, #64]	@ (8014318 <scd30_await_data_ready+0x70>)
 80142d6:	f7f1 fee3 	bl	80060a0 <HAL_GPIO_ReadPin>
 80142da:	4603      	mov	r3, r0
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d102      	bne.n	80142e6 <scd30_await_data_ready+0x3e>
    			{
        sensirion_hal_sleep_us(100000);
 80142e0:	480e      	ldr	r0, [pc, #56]	@ (801431c <scd30_await_data_ready+0x74>)
 80142e2:	f000 feb5 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    			}
        local_error = scd30_get_data_ready(&data_ready);
 80142e6:	1d3b      	adds	r3, r7, #4
 80142e8:	4618      	mov	r0, r3
 80142ea:	f000 f8dd 	bl	80144a8 <scd30_get_data_ready>
 80142ee:	4603      	mov	r3, r0
 80142f0:	80fb      	strh	r3, [r7, #6]
        if (local_error != NO_ERROR) {
 80142f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d002      	beq.n	8014300 <scd30_await_data_ready+0x58>
            return local_error;
 80142fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142fe:	e006      	b.n	801430e <scd30_await_data_ready+0x66>
        }

        run_console_from_scd30();
 8014300:	f7ee f906 	bl	8002510 <run_console_from_scd30>
    while (data_ready == 0) {
 8014304:	88bb      	ldrh	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d0e2      	beq.n	80142d0 <scd30_await_data_ready+0x28>
    }
    return local_error;
 801430a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 801430e:	4618      	mov	r0, r3
 8014310:	3708      	adds	r7, #8
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	40020000 	.word	0x40020000
 801431c:	000186a0 	.word	0x000186a0

08014320 <scd30_blocking_read_measurement_data>:

int16_t scd30_blocking_read_measurement_data(float* co2_concentration,
                                             float* temperature,
                                             float* humidity) {
 8014320:	b580      	push	{r7, lr}
 8014322:	b086      	sub	sp, #24
 8014324:	af00      	add	r7, sp, #0
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	60b9      	str	r1, [r7, #8]
 801432a:	607a      	str	r2, [r7, #4]
    int16_t local_error = 0;
 801432c:	2300      	movs	r3, #0
 801432e:	82fb      	strh	r3, [r7, #22]
    local_error = scd30_await_data_ready();
 8014330:	f7ff ffba 	bl	80142a8 <scd30_await_data_ready>
 8014334:	4603      	mov	r3, r0
 8014336:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014338:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d002      	beq.n	8014346 <scd30_blocking_read_measurement_data+0x26>
        return local_error;
 8014340:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014344:	e008      	b.n	8014358 <scd30_blocking_read_measurement_data+0x38>
    }
    local_error =
        scd30_read_measurement_data(co2_concentration, temperature, humidity);
 8014346:	687a      	ldr	r2, [r7, #4]
 8014348:	68b9      	ldr	r1, [r7, #8]
 801434a:	68f8      	ldr	r0, [r7, #12]
 801434c:	f000 f8fc 	bl	8014548 <scd30_read_measurement_data>
 8014350:	4603      	mov	r3, r0
 8014352:	82fb      	strh	r3, [r7, #22]
    return local_error;
 8014354:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014358:	4618      	mov	r0, r3
 801435a:	3718      	adds	r7, #24
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}

08014360 <scd30_start_periodic_measurement>:

int16_t scd30_start_periodic_measurement(uint16_t ambient_pressure) {
 8014360:	b580      	push	{r7, lr}
 8014362:	b086      	sub	sp, #24
 8014364:	af00      	add	r7, sp, #0
 8014366:	4603      	mov	r3, r0
 8014368:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801436a:	2300      	movs	r3, #0
 801436c:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801436e:	2300      	movs	r3, #0
 8014370:	60fb      	str	r3, [r7, #12]
 8014372:	2300      	movs	r3, #0
 8014374:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014376:	2300      	movs	r3, #0
 8014378:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x10);
 801437a:	8ab9      	ldrh	r1, [r7, #20]
 801437c:	f107 030c 	add.w	r3, r7, #12
 8014380:	2210      	movs	r2, #16
 8014382:	4618      	mov	r0, r3
 8014384:	f000 fd25 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014388:	4603      	mov	r3, r0
 801438a:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801438c:	88fa      	ldrh	r2, [r7, #6]
 801438e:	8ab9      	ldrh	r1, [r7, #20]
 8014390:	f107 030c 	add.w	r3, r7, #12
 8014394:	4618      	mov	r0, r3
 8014396:	f000 fd3f 	bl	8014e18 <sensirion_i2c_add_uint16_t_to_buffer>
 801439a:	4603      	mov	r3, r0
 801439c:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, ambient_pressure);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801439e:	4b0b      	ldr	r3, [pc, #44]	@ (80143cc <scd30_start_periodic_measurement+0x6c>)
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	8aba      	ldrh	r2, [r7, #20]
 80143a4:	f107 010c 	add.w	r1, r7, #12
 80143a8:	4618      	mov	r0, r3
 80143aa:	f000 fd65 	bl	8014e78 <sensirion_i2c_write_data>
 80143ae:	4603      	mov	r3, r0
 80143b0:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80143b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d002      	beq.n	80143c0 <scd30_start_periodic_measurement+0x60>
        return local_error;
 80143ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143be:	e001      	b.n	80143c4 <scd30_start_periodic_measurement+0x64>
    }
    return local_error;
 80143c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80143c4:	4618      	mov	r0, r3
 80143c6:	3718      	adds	r7, #24
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	20001b5c 	.word	0x20001b5c

080143d0 <scd30_stop_periodic_measurement>:

int16_t scd30_stop_periodic_measurement() {
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80143d6:	2300      	movs	r3, #0
 80143d8:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 80143da:	2300      	movs	r3, #0
 80143dc:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 80143de:	2300      	movs	r3, #0
 80143e0:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x104);
 80143e2:	88b9      	ldrh	r1, [r7, #4]
 80143e4:	463b      	mov	r3, r7
 80143e6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80143ea:	4618      	mov	r0, r3
 80143ec:	f000 fcf1 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 80143f0:	4603      	mov	r3, r0
 80143f2:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80143f4:	4b0c      	ldr	r3, [pc, #48]	@ (8014428 <scd30_stop_periodic_measurement+0x58>)
 80143f6:	781b      	ldrb	r3, [r3, #0]
 80143f8:	88ba      	ldrh	r2, [r7, #4]
 80143fa:	4639      	mov	r1, r7
 80143fc:	4618      	mov	r0, r3
 80143fe:	f000 fd3b 	bl	8014e78 <sensirion_i2c_write_data>
 8014402:	4603      	mov	r3, r0
 8014404:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d002      	beq.n	8014414 <scd30_stop_periodic_measurement+0x44>
        return local_error;
 801440e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014412:	e005      	b.n	8014420 <scd30_stop_periodic_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014414:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014418:	f000 fe1a 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801441c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014420:	4618      	mov	r0, r3
 8014422:	3708      	adds	r7, #8
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}
 8014428:	20001b5c 	.word	0x20001b5c

0801442c <scd30_set_measurement_interval>:

int16_t scd30_set_measurement_interval(uint16_t interval) {
 801442c:	b580      	push	{r7, lr}
 801442e:	b086      	sub	sp, #24
 8014430:	af00      	add	r7, sp, #0
 8014432:	4603      	mov	r3, r0
 8014434:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014436:	2300      	movs	r3, #0
 8014438:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801443a:	2300      	movs	r3, #0
 801443c:	60fb      	str	r3, [r7, #12]
 801443e:	2300      	movs	r3, #0
 8014440:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014442:	2300      	movs	r3, #0
 8014444:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x4600);
 8014446:	8ab9      	ldrh	r1, [r7, #20]
 8014448:	f107 030c 	add.w	r3, r7, #12
 801444c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8014450:	4618      	mov	r0, r3
 8014452:	f000 fcbe 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014456:	4603      	mov	r3, r0
 8014458:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 801445a:	88fa      	ldrh	r2, [r7, #6]
 801445c:	8ab9      	ldrh	r1, [r7, #20]
 801445e:	f107 030c 	add.w	r3, r7, #12
 8014462:	4618      	mov	r0, r3
 8014464:	f000 fcd8 	bl	8014e18 <sensirion_i2c_add_uint16_t_to_buffer>
 8014468:	4603      	mov	r3, r0
 801446a:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, interval);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801446c:	4b0d      	ldr	r3, [pc, #52]	@ (80144a4 <scd30_set_measurement_interval+0x78>)
 801446e:	781b      	ldrb	r3, [r3, #0]
 8014470:	8aba      	ldrh	r2, [r7, #20]
 8014472:	f107 010c 	add.w	r1, r7, #12
 8014476:	4618      	mov	r0, r3
 8014478:	f000 fcfe 	bl	8014e78 <sensirion_i2c_write_data>
 801447c:	4603      	mov	r3, r0
 801447e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014480:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d002      	beq.n	801448e <scd30_set_measurement_interval+0x62>
        return local_error;
 8014488:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801448c:	e005      	b.n	801449a <scd30_set_measurement_interval+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801448e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014492:	f000 fddd 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014496:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3718      	adds	r7, #24
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	20001b5c 	.word	0x20001b5c

080144a8 <scd30_get_data_ready>:
    }
    *interval = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
    return local_error;
}

int16_t scd30_get_data_ready(uint16_t* data_ready_flag) {
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80144b0:	2300      	movs	r3, #0
 80144b2:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80144b4:	4b22      	ldr	r3, [pc, #136]	@ (8014540 <scd30_get_data_ready+0x98>)
 80144b6:	881b      	ldrh	r3, [r3, #0]
 80144b8:	813b      	strh	r3, [r7, #8]
 80144ba:	2300      	movs	r3, #0
 80144bc:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80144be:	2300      	movs	r3, #0
 80144c0:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x202);
 80144c2:	89b9      	ldrh	r1, [r7, #12]
 80144c4:	f107 0308 	add.w	r3, r7, #8
 80144c8:	f240 2202 	movw	r2, #514	@ 0x202
 80144cc:	4618      	mov	r0, r3
 80144ce:	f000 fc80 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 80144d2:	4603      	mov	r3, r0
 80144d4:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80144d6:	4b1b      	ldr	r3, [pc, #108]	@ (8014544 <scd30_get_data_ready+0x9c>)
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	89ba      	ldrh	r2, [r7, #12]
 80144dc:	f107 0108 	add.w	r1, r7, #8
 80144e0:	4618      	mov	r0, r3
 80144e2:	f000 fcc9 	bl	8014e78 <sensirion_i2c_write_data>
 80144e6:	4603      	mov	r3, r0
 80144e8:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80144ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d002      	beq.n	80144f8 <scd30_get_data_ready+0x50>
        return local_error;
 80144f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80144f6:	e01f      	b.n	8014538 <scd30_get_data_ready+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80144f8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80144fc:	f000 fda8 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014500:	4b10      	ldr	r3, [pc, #64]	@ (8014544 <scd30_get_data_ready+0x9c>)
 8014502:	781b      	ldrb	r3, [r3, #0]
 8014504:	f107 0108 	add.w	r1, r7, #8
 8014508:	2202      	movs	r2, #2
 801450a:	4618      	mov	r0, r3
 801450c:	f000 fcc7 	bl	8014e9e <sensirion_i2c_read_data_inplace>
 8014510:	4603      	mov	r3, r0
 8014512:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d002      	beq.n	8014522 <scd30_get_data_ready+0x7a>
        return local_error;
 801451c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014520:	e00a      	b.n	8014538 <scd30_get_data_ready+0x90>
    }
    *data_ready_flag = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014522:	f107 0308 	add.w	r3, r7, #8
 8014526:	4618      	mov	r0, r3
 8014528:	f000 fbc1 	bl	8014cae <sensirion_common_bytes_to_uint16_t>
 801452c:	4603      	mov	r3, r0
 801452e:	461a      	mov	r2, r3
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014538:	4618      	mov	r0, r3
 801453a:	3710      	adds	r7, #16
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}
 8014540:	080246c0 	.word	0x080246c0
 8014544:	20001b5c 	.word	0x20001b5c

08014548 <scd30_read_measurement_data>:

int16_t scd30_read_measurement_data(float* co2_concentration,
                                    float* temperature, float* humidity) {
 8014548:	b580      	push	{r7, lr}
 801454a:	b08a      	sub	sp, #40	@ 0x28
 801454c:	af00      	add	r7, sp, #0
 801454e:	60f8      	str	r0, [r7, #12]
 8014550:	60b9      	str	r1, [r7, #8]
 8014552:	607a      	str	r2, [r7, #4]
    int16_t local_error = NO_ERROR;
 8014554:	2300      	movs	r3, #0
 8014556:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t local_buffer[18] = {0};
 8014558:	2300      	movs	r3, #0
 801455a:	613b      	str	r3, [r7, #16]
 801455c:	f107 0314 	add.w	r3, r7, #20
 8014560:	2200      	movs	r2, #0
 8014562:	601a      	str	r2, [r3, #0]
 8014564:	605a      	str	r2, [r3, #4]
 8014566:	609a      	str	r2, [r3, #8]
 8014568:	819a      	strh	r2, [r3, #12]
    uint16_t local_offset = 0;
 801456a:	2300      	movs	r3, #0
 801456c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x300);
 801456e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8014570:	f107 0310 	add.w	r3, r7, #16
 8014574:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8014578:	4618      	mov	r0, r3
 801457a:	f000 fc2a 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 801457e:	4603      	mov	r3, r0
 8014580:	84bb      	strh	r3, [r7, #36]	@ 0x24
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014582:	4b26      	ldr	r3, [pc, #152]	@ (801461c <scd30_read_measurement_data+0xd4>)
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014588:	f107 0110 	add.w	r1, r7, #16
 801458c:	4618      	mov	r0, r3
 801458e:	f000 fc73 	bl	8014e78 <sensirion_i2c_write_data>
 8014592:	4603      	mov	r3, r0
 8014594:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 8014596:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801459a:	2b00      	cmp	r3, #0
 801459c:	d002      	beq.n	80145a4 <scd30_read_measurement_data+0x5c>
        return local_error;
 801459e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145a2:	e036      	b.n	8014612 <scd30_read_measurement_data+0xca>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80145a4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80145a8:	f000 fd52 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 12);
 80145ac:	4b1b      	ldr	r3, [pc, #108]	@ (801461c <scd30_read_measurement_data+0xd4>)
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	f107 0110 	add.w	r1, r7, #16
 80145b4:	220c      	movs	r2, #12
 80145b6:	4618      	mov	r0, r3
 80145b8:	f000 fc71 	bl	8014e9e <sensirion_i2c_read_data_inplace>
 80145bc:	4603      	mov	r3, r0
 80145be:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (local_error != NO_ERROR) {
 80145c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d002      	beq.n	80145ce <scd30_read_measurement_data+0x86>
        return local_error;
 80145c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80145cc:	e021      	b.n	8014612 <scd30_read_measurement_data+0xca>
    }
    *co2_concentration = sensirion_common_bytes_to_float(&local_buffer[0]);
 80145ce:	f107 0310 	add.w	r3, r7, #16
 80145d2:	4618      	mov	r0, r3
 80145d4:	f000 fb9b 	bl	8014d0e <sensirion_common_bytes_to_float>
 80145d8:	eef0 7a40 	vmov.f32	s15, s0
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	edc3 7a00 	vstr	s15, [r3]
    *temperature = sensirion_common_bytes_to_float(&local_buffer[4]);
 80145e2:	f107 0310 	add.w	r3, r7, #16
 80145e6:	3304      	adds	r3, #4
 80145e8:	4618      	mov	r0, r3
 80145ea:	f000 fb90 	bl	8014d0e <sensirion_common_bytes_to_float>
 80145ee:	eef0 7a40 	vmov.f32	s15, s0
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	edc3 7a00 	vstr	s15, [r3]
    *humidity = sensirion_common_bytes_to_float(&local_buffer[8]);
 80145f8:	f107 0310 	add.w	r3, r7, #16
 80145fc:	3308      	adds	r3, #8
 80145fe:	4618      	mov	r0, r3
 8014600:	f000 fb85 	bl	8014d0e <sensirion_common_bytes_to_float>
 8014604:	eef0 7a40 	vmov.f32	s15, s0
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	edc3 7a00 	vstr	s15, [r3]
    return local_error;
 801460e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8014612:	4618      	mov	r0, r3
 8014614:	3728      	adds	r7, #40	@ 0x28
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
 801461a:	bf00      	nop
 801461c:	20001b5c 	.word	0x20001b5c

08014620 <scd30_activate_auto_calibration>:

int16_t scd30_activate_auto_calibration(uint16_t do_activate) {
 8014620:	b580      	push	{r7, lr}
 8014622:	b086      	sub	sp, #24
 8014624:	af00      	add	r7, sp, #0
 8014626:	4603      	mov	r3, r0
 8014628:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 801462a:	2300      	movs	r3, #0
 801462c:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801462e:	2300      	movs	r3, #0
 8014630:	60fb      	str	r3, [r7, #12]
 8014632:	2300      	movs	r3, #0
 8014634:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014636:	2300      	movs	r3, #0
 8014638:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 801463a:	8ab9      	ldrh	r1, [r7, #20]
 801463c:	f107 030c 	add.w	r3, r7, #12
 8014640:	f245 3206 	movw	r2, #21254	@ 0x5306
 8014644:	4618      	mov	r0, r3
 8014646:	f000 fbc4 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 801464a:	4603      	mov	r3, r0
 801464c:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801464e:	88fa      	ldrh	r2, [r7, #6]
 8014650:	8ab9      	ldrh	r1, [r7, #20]
 8014652:	f107 030c 	add.w	r3, r7, #12
 8014656:	4618      	mov	r0, r3
 8014658:	f000 fbde 	bl	8014e18 <sensirion_i2c_add_uint16_t_to_buffer>
 801465c:	4603      	mov	r3, r0
 801465e:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, do_activate);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014660:	4b0d      	ldr	r3, [pc, #52]	@ (8014698 <scd30_activate_auto_calibration+0x78>)
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	8aba      	ldrh	r2, [r7, #20]
 8014666:	f107 010c 	add.w	r1, r7, #12
 801466a:	4618      	mov	r0, r3
 801466c:	f000 fc04 	bl	8014e78 <sensirion_i2c_write_data>
 8014670:	4603      	mov	r3, r0
 8014672:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014674:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d002      	beq.n	8014682 <scd30_activate_auto_calibration+0x62>
        return local_error;
 801467c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014680:	e005      	b.n	801468e <scd30_activate_auto_calibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014682:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014686:	f000 fce3 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 801468a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 801468e:	4618      	mov	r0, r3
 8014690:	3718      	adds	r7, #24
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20001b5c 	.word	0x20001b5c

0801469c <scd30_get_auto_calibration_status>:

int16_t scd30_get_auto_calibration_status(uint16_t* is_active) {
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80146a4:	2300      	movs	r3, #0
 80146a6:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80146a8:	4b22      	ldr	r3, [pc, #136]	@ (8014734 <scd30_get_auto_calibration_status+0x98>)
 80146aa:	881b      	ldrh	r3, [r3, #0]
 80146ac:	813b      	strh	r3, [r7, #8]
 80146ae:	2300      	movs	r3, #0
 80146b0:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80146b2:	2300      	movs	r3, #0
 80146b4:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5306);
 80146b6:	89b9      	ldrh	r1, [r7, #12]
 80146b8:	f107 0308 	add.w	r3, r7, #8
 80146bc:	f245 3206 	movw	r2, #21254	@ 0x5306
 80146c0:	4618      	mov	r0, r3
 80146c2:	f000 fb86 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 80146c6:	4603      	mov	r3, r0
 80146c8:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80146ca:	4b1b      	ldr	r3, [pc, #108]	@ (8014738 <scd30_get_auto_calibration_status+0x9c>)
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	89ba      	ldrh	r2, [r7, #12]
 80146d0:	f107 0108 	add.w	r1, r7, #8
 80146d4:	4618      	mov	r0, r3
 80146d6:	f000 fbcf 	bl	8014e78 <sensirion_i2c_write_data>
 80146da:	4603      	mov	r3, r0
 80146dc:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80146de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d002      	beq.n	80146ec <scd30_get_auto_calibration_status+0x50>
        return local_error;
 80146e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146ea:	e01f      	b.n	801472c <scd30_get_auto_calibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80146ec:	f242 7010 	movw	r0, #10000	@ 0x2710
 80146f0:	f000 fcae 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80146f4:	4b10      	ldr	r3, [pc, #64]	@ (8014738 <scd30_get_auto_calibration_status+0x9c>)
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	f107 0108 	add.w	r1, r7, #8
 80146fc:	2202      	movs	r2, #2
 80146fe:	4618      	mov	r0, r3
 8014700:	f000 fbcd 	bl	8014e9e <sensirion_i2c_read_data_inplace>
 8014704:	4603      	mov	r3, r0
 8014706:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d002      	beq.n	8014716 <scd30_get_auto_calibration_status+0x7a>
        return local_error;
 8014710:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014714:	e00a      	b.n	801472c <scd30_get_auto_calibration_status+0x90>
    }
    *is_active = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014716:	f107 0308 	add.w	r3, r7, #8
 801471a:	4618      	mov	r0, r3
 801471c:	f000 fac7 	bl	8014cae <sensirion_common_bytes_to_uint16_t>
 8014720:	4603      	mov	r3, r0
 8014722:	461a      	mov	r2, r3
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014728:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801472c:	4618      	mov	r0, r3
 801472e:	3710      	adds	r7, #16
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	080246c0 	.word	0x080246c0
 8014738:	20001b5c 	.word	0x20001b5c

0801473c <scd30_force_recalibration>:

int16_t scd30_force_recalibration(uint16_t co2_ref_concentration) {
 801473c:	b580      	push	{r7, lr}
 801473e:	b086      	sub	sp, #24
 8014740:	af00      	add	r7, sp, #0
 8014742:	4603      	mov	r3, r0
 8014744:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014746:	2300      	movs	r3, #0
 8014748:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 801474a:	2300      	movs	r3, #0
 801474c:	60fb      	str	r3, [r7, #12]
 801474e:	2300      	movs	r3, #0
 8014750:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014752:	2300      	movs	r3, #0
 8014754:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 8014756:	8ab9      	ldrh	r1, [r7, #20]
 8014758:	f107 030c 	add.w	r3, r7, #12
 801475c:	f245 2204 	movw	r2, #20996	@ 0x5204
 8014760:	4618      	mov	r0, r3
 8014762:	f000 fb36 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014766:	4603      	mov	r3, r0
 8014768:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 801476a:	88fa      	ldrh	r2, [r7, #6]
 801476c:	8ab9      	ldrh	r1, [r7, #20]
 801476e:	f107 030c 	add.w	r3, r7, #12
 8014772:	4618      	mov	r0, r3
 8014774:	f000 fb50 	bl	8014e18 <sensirion_i2c_add_uint16_t_to_buffer>
 8014778:	4603      	mov	r3, r0
 801477a:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, co2_ref_concentration);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 801477c:	4b0d      	ldr	r3, [pc, #52]	@ (80147b4 <scd30_force_recalibration+0x78>)
 801477e:	781b      	ldrb	r3, [r3, #0]
 8014780:	8aba      	ldrh	r2, [r7, #20]
 8014782:	f107 010c 	add.w	r1, r7, #12
 8014786:	4618      	mov	r0, r3
 8014788:	f000 fb76 	bl	8014e78 <sensirion_i2c_write_data>
 801478c:	4603      	mov	r3, r0
 801478e:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014790:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d002      	beq.n	801479e <scd30_force_recalibration+0x62>
        return local_error;
 8014798:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801479c:	e005      	b.n	80147aa <scd30_force_recalibration+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 801479e:	f242 7010 	movw	r0, #10000	@ 0x2710
 80147a2:	f000 fc55 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80147a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3718      	adds	r7, #24
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}
 80147b2:	bf00      	nop
 80147b4:	20001b5c 	.word	0x20001b5c

080147b8 <scd30_get_force_recalibration_status>:

int16_t scd30_get_force_recalibration_status(uint16_t* co2_ref_concentration) {
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b084      	sub	sp, #16
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80147c0:	2300      	movs	r3, #0
 80147c2:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80147c4:	4b22      	ldr	r3, [pc, #136]	@ (8014850 <scd30_get_force_recalibration_status+0x98>)
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	813b      	strh	r3, [r7, #8]
 80147ca:	2300      	movs	r3, #0
 80147cc:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80147ce:	2300      	movs	r3, #0
 80147d0:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5204);
 80147d2:	89b9      	ldrh	r1, [r7, #12]
 80147d4:	f107 0308 	add.w	r3, r7, #8
 80147d8:	f245 2204 	movw	r2, #20996	@ 0x5204
 80147dc:	4618      	mov	r0, r3
 80147de:	f000 faf8 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 80147e2:	4603      	mov	r3, r0
 80147e4:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80147e6:	4b1b      	ldr	r3, [pc, #108]	@ (8014854 <scd30_get_force_recalibration_status+0x9c>)
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	89ba      	ldrh	r2, [r7, #12]
 80147ec:	f107 0108 	add.w	r1, r7, #8
 80147f0:	4618      	mov	r0, r3
 80147f2:	f000 fb41 	bl	8014e78 <sensirion_i2c_write_data>
 80147f6:	4603      	mov	r3, r0
 80147f8:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80147fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d002      	beq.n	8014808 <scd30_get_force_recalibration_status+0x50>
        return local_error;
 8014802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014806:	e01f      	b.n	8014848 <scd30_get_force_recalibration_status+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014808:	f242 7010 	movw	r0, #10000	@ 0x2710
 801480c:	f000 fc20 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014810:	4b10      	ldr	r3, [pc, #64]	@ (8014854 <scd30_get_force_recalibration_status+0x9c>)
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	f107 0108 	add.w	r1, r7, #8
 8014818:	2202      	movs	r2, #2
 801481a:	4618      	mov	r0, r3
 801481c:	f000 fb3f 	bl	8014e9e <sensirion_i2c_read_data_inplace>
 8014820:	4603      	mov	r3, r0
 8014822:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d002      	beq.n	8014832 <scd30_get_force_recalibration_status+0x7a>
        return local_error;
 801482c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014830:	e00a      	b.n	8014848 <scd30_get_force_recalibration_status+0x90>
    }
    *co2_ref_concentration =
        sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 8014832:	f107 0308 	add.w	r3, r7, #8
 8014836:	4618      	mov	r0, r3
 8014838:	f000 fa39 	bl	8014cae <sensirion_common_bytes_to_uint16_t>
 801483c:	4603      	mov	r3, r0
 801483e:	461a      	mov	r2, r3
    *co2_ref_concentration =
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3710      	adds	r7, #16
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	080246c0 	.word	0x080246c0
 8014854:	20001b5c 	.word	0x20001b5c

08014858 <scd30_set_temperature_offset>:

int16_t scd30_set_temperature_offset(uint16_t temperature_offset) {
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	4603      	mov	r3, r0
 8014860:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014862:	2300      	movs	r3, #0
 8014864:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014866:	2300      	movs	r3, #0
 8014868:	60fb      	str	r3, [r7, #12]
 801486a:	2300      	movs	r3, #0
 801486c:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 801486e:	2300      	movs	r3, #0
 8014870:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 8014872:	8ab9      	ldrh	r1, [r7, #20]
 8014874:	f107 030c 	add.w	r3, r7, #12
 8014878:	f245 4203 	movw	r2, #21507	@ 0x5403
 801487c:	4618      	mov	r0, r3
 801487e:	f000 faa8 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014882:	4603      	mov	r3, r0
 8014884:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(
 8014886:	88fa      	ldrh	r2, [r7, #6]
 8014888:	8ab9      	ldrh	r1, [r7, #20]
 801488a:	f107 030c 	add.w	r3, r7, #12
 801488e:	4618      	mov	r0, r3
 8014890:	f000 fac2 	bl	8014e18 <sensirion_i2c_add_uint16_t_to_buffer>
 8014894:	4603      	mov	r3, r0
 8014896:	82bb      	strh	r3, [r7, #20]
        local_buffer, local_offset, temperature_offset);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014898:	4b0d      	ldr	r3, [pc, #52]	@ (80148d0 <scd30_set_temperature_offset+0x78>)
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	8aba      	ldrh	r2, [r7, #20]
 801489e:	f107 010c 	add.w	r1, r7, #12
 80148a2:	4618      	mov	r0, r3
 80148a4:	f000 fae8 	bl	8014e78 <sensirion_i2c_write_data>
 80148a8:	4603      	mov	r3, r0
 80148aa:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 80148ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d002      	beq.n	80148ba <scd30_set_temperature_offset+0x62>
        return local_error;
 80148b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80148b8:	e005      	b.n	80148c6 <scd30_set_temperature_offset+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80148ba:	f242 7010 	movw	r0, #10000	@ 0x2710
 80148be:	f000 fbc7 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 80148c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	3718      	adds	r7, #24
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	20001b5c 	.word	0x20001b5c

080148d4 <scd30_get_temperature_offset>:

int16_t scd30_get_temperature_offset(uint16_t* temperature_offset) {
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 80148dc:	2300      	movs	r3, #0
 80148de:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 80148e0:	4b22      	ldr	r3, [pc, #136]	@ (801496c <scd30_get_temperature_offset+0x98>)
 80148e2:	881b      	ldrh	r3, [r3, #0]
 80148e4:	813b      	strh	r3, [r7, #8]
 80148e6:	2300      	movs	r3, #0
 80148e8:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 80148ea:	2300      	movs	r3, #0
 80148ec:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5403);
 80148ee:	89b9      	ldrh	r1, [r7, #12]
 80148f0:	f107 0308 	add.w	r3, r7, #8
 80148f4:	f245 4203 	movw	r2, #21507	@ 0x5403
 80148f8:	4618      	mov	r0, r3
 80148fa:	f000 fa6a 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 80148fe:	4603      	mov	r3, r0
 8014900:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014902:	4b1b      	ldr	r3, [pc, #108]	@ (8014970 <scd30_get_temperature_offset+0x9c>)
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	89ba      	ldrh	r2, [r7, #12]
 8014908:	f107 0108 	add.w	r1, r7, #8
 801490c:	4618      	mov	r0, r3
 801490e:	f000 fab3 	bl	8014e78 <sensirion_i2c_write_data>
 8014912:	4603      	mov	r3, r0
 8014914:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014916:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d002      	beq.n	8014924 <scd30_get_temperature_offset+0x50>
        return local_error;
 801491e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014922:	e01f      	b.n	8014964 <scd30_get_temperature_offset+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014924:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014928:	f000 fb92 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 801492c:	4b10      	ldr	r3, [pc, #64]	@ (8014970 <scd30_get_temperature_offset+0x9c>)
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	f107 0108 	add.w	r1, r7, #8
 8014934:	2202      	movs	r2, #2
 8014936:	4618      	mov	r0, r3
 8014938:	f000 fab1 	bl	8014e9e <sensirion_i2c_read_data_inplace>
 801493c:	4603      	mov	r3, r0
 801493e:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014940:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d002      	beq.n	801494e <scd30_get_temperature_offset+0x7a>
        return local_error;
 8014948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801494c:	e00a      	b.n	8014964 <scd30_get_temperature_offset+0x90>
    }
    *temperature_offset = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 801494e:	f107 0308 	add.w	r3, r7, #8
 8014952:	4618      	mov	r0, r3
 8014954:	f000 f9ab 	bl	8014cae <sensirion_common_bytes_to_uint16_t>
 8014958:	4603      	mov	r3, r0
 801495a:	461a      	mov	r2, r3
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014960:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014964:	4618      	mov	r0, r3
 8014966:	3710      	adds	r7, #16
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}
 801496c:	080246c0 	.word	0x080246c0
 8014970:	20001b5c 	.word	0x20001b5c

08014974 <scd30_get_altitude_compensation>:

int16_t scd30_get_altitude_compensation(uint16_t* altitude) {
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
    int16_t local_error = NO_ERROR;
 801497c:	2300      	movs	r3, #0
 801497e:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014980:	4b22      	ldr	r3, [pc, #136]	@ (8014a0c <scd30_get_altitude_compensation+0x98>)
 8014982:	881b      	ldrh	r3, [r3, #0]
 8014984:	813b      	strh	r3, [r7, #8]
 8014986:	2300      	movs	r3, #0
 8014988:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 801498a:	2300      	movs	r3, #0
 801498c:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 801498e:	89b9      	ldrh	r1, [r7, #12]
 8014990:	f107 0308 	add.w	r3, r7, #8
 8014994:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014998:	4618      	mov	r0, r3
 801499a:	f000 fa1a 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 801499e:	4603      	mov	r3, r0
 80149a0:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 80149a2:	4b1b      	ldr	r3, [pc, #108]	@ (8014a10 <scd30_get_altitude_compensation+0x9c>)
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	89ba      	ldrh	r2, [r7, #12]
 80149a8:	f107 0108 	add.w	r1, r7, #8
 80149ac:	4618      	mov	r0, r3
 80149ae:	f000 fa63 	bl	8014e78 <sensirion_i2c_write_data>
 80149b2:	4603      	mov	r3, r0
 80149b4:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80149b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d002      	beq.n	80149c4 <scd30_get_altitude_compensation+0x50>
        return local_error;
 80149be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149c2:	e01f      	b.n	8014a04 <scd30_get_altitude_compensation+0x90>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80149c4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80149c8:	f000 fb42 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 80149cc:	4b10      	ldr	r3, [pc, #64]	@ (8014a10 <scd30_get_altitude_compensation+0x9c>)
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	f107 0108 	add.w	r1, r7, #8
 80149d4:	2202      	movs	r2, #2
 80149d6:	4618      	mov	r0, r3
 80149d8:	f000 fa61 	bl	8014e9e <sensirion_i2c_read_data_inplace>
 80149dc:	4603      	mov	r3, r0
 80149de:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 80149e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d002      	beq.n	80149ee <scd30_get_altitude_compensation+0x7a>
        return local_error;
 80149e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80149ec:	e00a      	b.n	8014a04 <scd30_get_altitude_compensation+0x90>
    }
    *altitude = sensirion_common_bytes_to_uint16_t(&local_buffer[0]);
 80149ee:	f107 0308 	add.w	r3, r7, #8
 80149f2:	4618      	mov	r0, r3
 80149f4:	f000 f95b 	bl	8014cae <sensirion_common_bytes_to_uint16_t>
 80149f8:	4603      	mov	r3, r0
 80149fa:	461a      	mov	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	801a      	strh	r2, [r3, #0]
    return local_error;
 8014a00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3710      	adds	r7, #16
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	080246c0 	.word	0x080246c0
 8014a10:	20001b5c 	.word	0x20001b5c

08014a14 <scd30_set_altitude_compensation>:

int16_t scd30_set_altitude_compensation(uint16_t altitude) {
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b086      	sub	sp, #24
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	80fb      	strh	r3, [r7, #6]
    int16_t local_error = NO_ERROR;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	82fb      	strh	r3, [r7, #22]
    uint8_t local_buffer[5] = {0};
 8014a22:	2300      	movs	r3, #0
 8014a24:	60fb      	str	r3, [r7, #12]
 8014a26:	2300      	movs	r3, #0
 8014a28:	743b      	strb	r3, [r7, #16]
    uint16_t local_offset = 0;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	82bb      	strh	r3, [r7, #20]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0x5102);
 8014a2e:	8ab9      	ldrh	r1, [r7, #20]
 8014a30:	f107 030c 	add.w	r3, r7, #12
 8014a34:	f245 1202 	movw	r2, #20738	@ 0x5102
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f000 f9ca 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	82bb      	strh	r3, [r7, #20]
    local_offset = sensirion_i2c_add_uint16_t_to_buffer(local_buffer,
 8014a42:	88fa      	ldrh	r2, [r7, #6]
 8014a44:	8ab9      	ldrh	r1, [r7, #20]
 8014a46:	f107 030c 	add.w	r3, r7, #12
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f000 f9e4 	bl	8014e18 <sensirion_i2c_add_uint16_t_to_buffer>
 8014a50:	4603      	mov	r3, r0
 8014a52:	82bb      	strh	r3, [r7, #20]
                                                        local_offset, altitude);
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014a54:	4b0d      	ldr	r3, [pc, #52]	@ (8014a8c <scd30_set_altitude_compensation+0x78>)
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	8aba      	ldrh	r2, [r7, #20]
 8014a5a:	f107 010c 	add.w	r1, r7, #12
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f000 fa0a 	bl	8014e78 <sensirion_i2c_write_data>
 8014a64:	4603      	mov	r3, r0
 8014a66:	82fb      	strh	r3, [r7, #22]
    if (local_error != NO_ERROR) {
 8014a68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d002      	beq.n	8014a76 <scd30_set_altitude_compensation+0x62>
        return local_error;
 8014a70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a74:	e005      	b.n	8014a82 <scd30_set_altitude_compensation+0x6e>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014a76:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014a7a:	f000 fae9 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014a7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3718      	adds	r7, #24
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}
 8014a8a:	bf00      	nop
 8014a8c:	20001b5c 	.word	0x20001b5c

08014a90 <scd30_read_firmware_version>:

int16_t scd30_read_firmware_version(uint8_t* major, uint8_t* minor) {
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b084      	sub	sp, #16
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	81fb      	strh	r3, [r7, #14]
    uint8_t local_buffer[3] = {0};
 8014a9e:	4b21      	ldr	r3, [pc, #132]	@ (8014b24 <scd30_read_firmware_version+0x94>)
 8014aa0:	881b      	ldrh	r3, [r3, #0]
 8014aa2:	813b      	strh	r3, [r7, #8]
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	72bb      	strb	r3, [r7, #10]
    uint16_t local_offset = 0;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	81bb      	strh	r3, [r7, #12]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd100);
 8014aac:	89b9      	ldrh	r1, [r7, #12]
 8014aae:	f107 0308 	add.w	r3, r7, #8
 8014ab2:	f44f 4251 	mov.w	r2, #53504	@ 0xd100
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f000 f98b 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014abc:	4603      	mov	r3, r0
 8014abe:	81bb      	strh	r3, [r7, #12]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014ac0:	4b19      	ldr	r3, [pc, #100]	@ (8014b28 <scd30_read_firmware_version+0x98>)
 8014ac2:	781b      	ldrb	r3, [r3, #0]
 8014ac4:	89ba      	ldrh	r2, [r7, #12]
 8014ac6:	f107 0108 	add.w	r1, r7, #8
 8014aca:	4618      	mov	r0, r3
 8014acc:	f000 f9d4 	bl	8014e78 <sensirion_i2c_write_data>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014ad4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d002      	beq.n	8014ae2 <scd30_read_firmware_version+0x52>
        return local_error;
 8014adc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ae0:	e01c      	b.n	8014b1c <scd30_read_firmware_version+0x8c>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8014ae2:	f242 7010 	movw	r0, #10000	@ 0x2710
 8014ae6:	f000 fab3 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    local_error =
        sensirion_i2c_read_data_inplace(_i2c_address, local_buffer, 2);
 8014aea:	4b0f      	ldr	r3, [pc, #60]	@ (8014b28 <scd30_read_firmware_version+0x98>)
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	f107 0108 	add.w	r1, r7, #8
 8014af2:	2202      	movs	r2, #2
 8014af4:	4618      	mov	r0, r3
 8014af6:	f000 f9d2 	bl	8014e9e <sensirion_i2c_read_data_inplace>
 8014afa:	4603      	mov	r3, r0
 8014afc:	81fb      	strh	r3, [r7, #14]
    if (local_error != NO_ERROR) {
 8014afe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d002      	beq.n	8014b0c <scd30_read_firmware_version+0x7c>
        return local_error;
 8014b06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b0a:	e007      	b.n	8014b1c <scd30_read_firmware_version+0x8c>
    }
    *major = (uint8_t)local_buffer[0];
 8014b0c:	7a3a      	ldrb	r2, [r7, #8]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	701a      	strb	r2, [r3, #0]
    *minor = (uint8_t)local_buffer[1];
 8014b12:	7a7a      	ldrb	r2, [r7, #9]
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	701a      	strb	r2, [r3, #0]
    return local_error;
 8014b18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3710      	adds	r7, #16
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	080246c0 	.word	0x080246c0
 8014b28:	20001b5c 	.word	0x20001b5c

08014b2c <scd30_soft_reset>:

int16_t scd30_soft_reset() {
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8014b32:	2300      	movs	r3, #0
 8014b34:	80fb      	strh	r3, [r7, #6]
    uint8_t local_buffer[2] = {0};
 8014b36:	2300      	movs	r3, #0
 8014b38:	803b      	strh	r3, [r7, #0]
    uint16_t local_offset = 0;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	80bb      	strh	r3, [r7, #4]
    local_offset =
        sensirion_i2c_add_command_to_buffer(local_buffer, local_offset, 0xd304);
 8014b3e:	88b9      	ldrh	r1, [r7, #4]
 8014b40:	463b      	mov	r3, r7
 8014b42:	f24d 3204 	movw	r2, #54020	@ 0xd304
 8014b46:	4618      	mov	r0, r3
 8014b48:	f000 f943 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	80bb      	strh	r3, [r7, #4]
    local_error =
        sensirion_i2c_write_data(_i2c_address, local_buffer, local_offset);
 8014b50:	4b0c      	ldr	r3, [pc, #48]	@ (8014b84 <scd30_soft_reset+0x58>)
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	88ba      	ldrh	r2, [r7, #4]
 8014b56:	4639      	mov	r1, r7
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f000 f98d 	bl	8014e78 <sensirion_i2c_write_data>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	80fb      	strh	r3, [r7, #6]
    if (local_error != NO_ERROR) {
 8014b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d002      	beq.n	8014b70 <scd30_soft_reset+0x44>
        return local_error;
 8014b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b6e:	e004      	b.n	8014b7a <scd30_soft_reset+0x4e>
    }
    sensirion_i2c_hal_sleep_usec(2000 * 1000);
 8014b70:	4805      	ldr	r0, [pc, #20]	@ (8014b88 <scd30_soft_reset+0x5c>)
 8014b72:	f000 fa6d 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8014b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3708      	adds	r7, #8
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}
 8014b82:	bf00      	nop
 8014b84:	20001b5c 	.word	0x20001b5c
 8014b88:	001e8480 	.word	0x001e8480

08014b8c <scd4x_stop_periodic_measurement>:
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
    return NO_ERROR;
}

int16_t scd4x_stop_periodic_measurement() {
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b082      	sub	sp, #8
 8014b90:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014b92:	2300      	movs	r3, #0
 8014b94:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8014b96:	88f9      	ldrh	r1, [r7, #6]
 8014b98:	463b      	mov	r3, r7
 8014b9a:	f643 7286 	movw	r2, #16262	@ 0x3f86
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f000 f917 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014ba8:	88fa      	ldrh	r2, [r7, #6]
 8014baa:	463b      	mov	r3, r7
 8014bac:	4619      	mov	r1, r3
 8014bae:	2062      	movs	r0, #98	@ 0x62
 8014bb0:	f000 f962 	bl	8014e78 <sensirion_i2c_write_data>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014bb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d002      	beq.n	8014bc6 <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8014bc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014bc4:	e003      	b.n	8014bce <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8014bc6:	4804      	ldr	r0, [pc, #16]	@ (8014bd8 <scd4x_stop_periodic_measurement+0x4c>)
 8014bc8:	f000 fa42 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014bcc:	2300      	movs	r3, #0
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3708      	adds	r7, #8
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	0007a120 	.word	0x0007a120

08014bdc <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014be2:	2300      	movs	r3, #0
 8014be4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8014be6:	88f9      	ldrh	r1, [r7, #6]
 8014be8:	463b      	mov	r3, r7
 8014bea:	f243 6246 	movw	r2, #13894	@ 0x3646
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f000 f8ef 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014bf8:	88fa      	ldrh	r2, [r7, #6]
 8014bfa:	463b      	mov	r3, r7
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	2062      	movs	r0, #98	@ 0x62
 8014c00:	f000 f93a 	bl	8014e78 <sensirion_i2c_write_data>
 8014c04:	4603      	mov	r3, r0
 8014c06:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d002      	beq.n	8014c16 <scd4x_reinit+0x3a>
        return error;
 8014c10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c14:	e004      	b.n	8014c20 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8014c16:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014c1a:	f000 fa19 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c1e:	2300      	movs	r3, #0
}
 8014c20:	4618      	mov	r0, r3
 8014c22:	3708      	adds	r7, #8
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}

08014c28 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b082      	sub	sp, #8
 8014c2c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c2e:	2300      	movs	r3, #0
 8014c30:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8014c32:	88f9      	ldrh	r1, [r7, #6]
 8014c34:	463b      	mov	r3, r7
 8014c36:	f243 62e0 	movw	r2, #14048	@ 0x36e0
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f000 f8c9 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014c40:	4603      	mov	r3, r0
 8014c42:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c44:	88fa      	ldrh	r2, [r7, #6]
 8014c46:	463b      	mov	r3, r7
 8014c48:	4619      	mov	r1, r3
 8014c4a:	2062      	movs	r0, #98	@ 0x62
 8014c4c:	f000 f914 	bl	8014e78 <sensirion_i2c_write_data>
 8014c50:	4603      	mov	r3, r0
 8014c52:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8014c54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d002      	beq.n	8014c62 <scd4x_power_down+0x3a>
        return error;
 8014c5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014c60:	e004      	b.n	8014c6c <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8014c62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014c66:	f000 f9f3 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014c6a:	2300      	movs	r3, #0
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3708      	adds	r7, #8
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}

08014c74 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b082      	sub	sp, #8
 8014c78:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8014c7e:	88f9      	ldrh	r1, [r7, #6]
 8014c80:	1d3b      	adds	r3, r7, #4
 8014c82:	f243 62f6 	movw	r2, #14070	@ 0x36f6
 8014c86:	4618      	mov	r0, r3
 8014c88:	f000 f8a3 	bl	8014dd2 <sensirion_i2c_add_command_to_buffer>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8014c90:	88fa      	ldrh	r2, [r7, #6]
 8014c92:	1d3b      	adds	r3, r7, #4
 8014c94:	4619      	mov	r1, r3
 8014c96:	2062      	movs	r0, #98	@ 0x62
 8014c98:	f000 f8ee 	bl	8014e78 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8014c9c:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8014ca0:	f000 f9d6 	bl	8015050 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8014ca4:	2300      	movs	r3, #0
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3708      	adds	r7, #8
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}

08014cae <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8014cae:	b480      	push	{r7}
 8014cb0:	b083      	sub	sp, #12
 8014cb2:	af00      	add	r7, sp, #0
 8014cb4:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	021b      	lsls	r3, r3, #8
 8014cbc:	b21a      	sxth	r2, r3
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	781b      	ldrb	r3, [r3, #0]
 8014cc4:	b21b      	sxth	r3, r3
 8014cc6:	4313      	orrs	r3, r2
 8014cc8:	b21b      	sxth	r3, r3
 8014cca:	b29b      	uxth	r3, r3
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	370c      	adds	r7, #12
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr

08014cd8 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	061a      	lsls	r2, r3, #24
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	3301      	adds	r3, #1
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	041b      	lsls	r3, r3, #16
 8014cee:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	3302      	adds	r3, #2
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8014cf8:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	3203      	adds	r2, #3
 8014cfe:	7812      	ldrb	r2, [r2, #0]
 8014d00:	4313      	orrs	r3, r2
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0c:	4770      	bx	lr

08014d0e <sensirion_common_bytes_to_float>:

int32_t sensirion_common_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_common_bytes_to_uint32_t(bytes);
}

float sensirion_common_bytes_to_float(const uint8_t* bytes) {
 8014d0e:	b580      	push	{r7, lr}
 8014d10:	b084      	sub	sp, #16
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_common_bytes_to_uint32_t(bytes);
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f7ff ffde 	bl	8014cd8 <sensirion_common_bytes_to_uint32_t>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	ee07 3a90 	vmov	s15, r3
}
 8014d26:	eeb0 0a67 	vmov.f32	s0, s15
 8014d2a:	3710      	adds	r7, #16
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}

08014d30 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8014d30:	b480      	push	{r7}
 8014d32:	b085      	sub	sp, #20
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	460b      	mov	r3, r1
 8014d3a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8014d3c:	23ff      	movs	r3, #255	@ 0xff
 8014d3e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014d40:	2300      	movs	r3, #0
 8014d42:	81fb      	strh	r3, [r7, #14]
 8014d44:	e021      	b.n	8014d8a <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8014d46:	89fb      	ldrh	r3, [r7, #14]
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	4413      	add	r3, r2
 8014d4c:	781a      	ldrb	r2, [r3, #0]
 8014d4e:	7b7b      	ldrb	r3, [r7, #13]
 8014d50:	4053      	eors	r3, r2
 8014d52:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014d54:	2308      	movs	r3, #8
 8014d56:	733b      	strb	r3, [r7, #12]
 8014d58:	e011      	b.n	8014d7e <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8014d5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	da07      	bge.n	8014d72 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8014d62:	7b7b      	ldrb	r3, [r7, #13]
 8014d64:	005b      	lsls	r3, r3, #1
 8014d66:	b25b      	sxtb	r3, r3
 8014d68:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8014d6c:	b25b      	sxtb	r3, r3
 8014d6e:	737b      	strb	r3, [r7, #13]
 8014d70:	e002      	b.n	8014d78 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8014d72:	7b7b      	ldrb	r3, [r7, #13]
 8014d74:	005b      	lsls	r3, r3, #1
 8014d76:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8014d78:	7b3b      	ldrb	r3, [r7, #12]
 8014d7a:	3b01      	subs	r3, #1
 8014d7c:	733b      	strb	r3, [r7, #12]
 8014d7e:	7b3b      	ldrb	r3, [r7, #12]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d1ea      	bne.n	8014d5a <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8014d84:	89fb      	ldrh	r3, [r7, #14]
 8014d86:	3301      	adds	r3, #1
 8014d88:	81fb      	strh	r3, [r7, #14]
 8014d8a:	89fa      	ldrh	r2, [r7, #14]
 8014d8c:	887b      	ldrh	r3, [r7, #2]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d3d9      	bcc.n	8014d46 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8014d92:	7b7b      	ldrb	r3, [r7, #13]
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3714      	adds	r7, #20
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9e:	4770      	bx	lr

08014da0 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	460b      	mov	r3, r1
 8014daa:	807b      	strh	r3, [r7, #2]
 8014dac:	4613      	mov	r3, r2
 8014dae:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8014db0:	887b      	ldrh	r3, [r7, #2]
 8014db2:	4619      	mov	r1, r3
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f7ff ffbb 	bl	8014d30 <sensirion_i2c_generate_crc>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	461a      	mov	r2, r3
 8014dbe:	787b      	ldrb	r3, [r7, #1]
 8014dc0:	4293      	cmp	r3, r2
 8014dc2:	d001      	beq.n	8014dc8 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	e000      	b.n	8014dca <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8014dc8:	2300      	movs	r3, #0
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3708      	adds	r7, #8
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}

08014dd2 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8014dd2:	b480      	push	{r7}
 8014dd4:	b083      	sub	sp, #12
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	6078      	str	r0, [r7, #4]
 8014dda:	460b      	mov	r3, r1
 8014ddc:	807b      	strh	r3, [r7, #2]
 8014dde:	4613      	mov	r3, r2
 8014de0:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8014de2:	883b      	ldrh	r3, [r7, #0]
 8014de4:	0a1b      	lsrs	r3, r3, #8
 8014de6:	b29a      	uxth	r2, r3
 8014de8:	887b      	ldrh	r3, [r7, #2]
 8014dea:	1c59      	adds	r1, r3, #1
 8014dec:	8079      	strh	r1, [r7, #2]
 8014dee:	4619      	mov	r1, r3
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	440b      	add	r3, r1
 8014df4:	b2d2      	uxtb	r2, r2
 8014df6:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8014df8:	887b      	ldrh	r3, [r7, #2]
 8014dfa:	1c5a      	adds	r2, r3, #1
 8014dfc:	807a      	strh	r2, [r7, #2]
 8014dfe:	461a      	mov	r2, r3
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	4413      	add	r3, r2
 8014e04:	883a      	ldrh	r2, [r7, #0]
 8014e06:	b2d2      	uxtb	r2, r2
 8014e08:	701a      	strb	r2, [r3, #0]
    return offset;
 8014e0a:	887b      	ldrh	r3, [r7, #2]
}
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	370c      	adds	r7, #12
 8014e10:	46bd      	mov	sp, r7
 8014e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e16:	4770      	bx	lr

08014e18 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8014e18:	b590      	push	{r4, r7, lr}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
 8014e20:	460b      	mov	r3, r1
 8014e22:	807b      	strh	r3, [r7, #2]
 8014e24:	4613      	mov	r3, r2
 8014e26:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8014e28:	883b      	ldrh	r3, [r7, #0]
 8014e2a:	0a1b      	lsrs	r3, r3, #8
 8014e2c:	b29a      	uxth	r2, r3
 8014e2e:	887b      	ldrh	r3, [r7, #2]
 8014e30:	1c59      	adds	r1, r3, #1
 8014e32:	8079      	strh	r1, [r7, #2]
 8014e34:	4619      	mov	r1, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	440b      	add	r3, r1
 8014e3a:	b2d2      	uxtb	r2, r2
 8014e3c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8014e3e:	887b      	ldrh	r3, [r7, #2]
 8014e40:	1c5a      	adds	r2, r3, #1
 8014e42:	807a      	strh	r2, [r7, #2]
 8014e44:	461a      	mov	r2, r3
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	4413      	add	r3, r2
 8014e4a:	883a      	ldrh	r2, [r7, #0]
 8014e4c:	b2d2      	uxtb	r2, r2
 8014e4e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8014e50:	887b      	ldrh	r3, [r7, #2]
 8014e52:	3b02      	subs	r3, #2
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8014e58:	887b      	ldrh	r3, [r7, #2]
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	18d4      	adds	r4, r2, r3
 8014e5e:	2102      	movs	r1, #2
 8014e60:	f7ff ff66 	bl	8014d30 <sensirion_i2c_generate_crc>
 8014e64:	4603      	mov	r3, r0
 8014e66:	7023      	strb	r3, [r4, #0]
    offset++;
 8014e68:	887b      	ldrh	r3, [r7, #2]
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	807b      	strh	r3, [r7, #2]

    return offset;
 8014e6e:	887b      	ldrh	r3, [r7, #2]
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	370c      	adds	r7, #12
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd90      	pop	{r4, r7, pc}

08014e78 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	4603      	mov	r3, r0
 8014e80:	6039      	str	r1, [r7, #0]
 8014e82:	71fb      	strb	r3, [r7, #7]
 8014e84:	4613      	mov	r3, r2
 8014e86:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8014e88:	88ba      	ldrh	r2, [r7, #4]
 8014e8a:	79fb      	ldrb	r3, [r7, #7]
 8014e8c:	6839      	ldr	r1, [r7, #0]
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f000 f8c2 	bl	8015018 <sensirion_i2c_hal_write>
 8014e94:	4603      	mov	r3, r0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3708      	adds	r7, #8
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b084      	sub	sp, #16
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	6039      	str	r1, [r7, #0]
 8014ea8:	71fb      	strb	r3, [r7, #7]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8014eae:	88bb      	ldrh	r3, [r7, #4]
 8014eb0:	085b      	lsrs	r3, r3, #1
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	0052      	lsls	r2, r2, #1
 8014eb8:	4413      	add	r3, r2
 8014eba:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8014ebc:	88bb      	ldrh	r3, [r7, #4]
 8014ebe:	f003 0301 	and.w	r3, r3, #1
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d001      	beq.n	8014ecc <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8014ec8:	2304      	movs	r3, #4
 8014eca:	e047      	b.n	8014f5c <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8014ecc:	897a      	ldrh	r2, [r7, #10]
 8014ece:	79fb      	ldrb	r3, [r7, #7]
 8014ed0:	6839      	ldr	r1, [r7, #0]
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f000 f884 	bl	8014fe0 <sensirion_i2c_hal_read>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	813b      	strh	r3, [r7, #8]
    if (error) {
 8014edc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d002      	beq.n	8014eea <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8014ee4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014ee8:	e038      	b.n	8014f5c <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014eea:	2300      	movs	r3, #0
 8014eec:	81fb      	strh	r3, [r7, #14]
 8014eee:	2300      	movs	r3, #0
 8014ef0:	81bb      	strh	r3, [r7, #12]
 8014ef2:	e02e      	b.n	8014f52 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014ef4:	89fb      	ldrh	r3, [r7, #14]
 8014ef6:	683a      	ldr	r2, [r7, #0]
 8014ef8:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8014efa:	89fb      	ldrh	r3, [r7, #14]
 8014efc:	3302      	adds	r3, #2
 8014efe:	683a      	ldr	r2, [r7, #0]
 8014f00:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8014f02:	781b      	ldrb	r3, [r3, #0]
 8014f04:	461a      	mov	r2, r3
 8014f06:	2102      	movs	r1, #2
 8014f08:	f7ff ff4a 	bl	8014da0 <sensirion_i2c_check_crc>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	813b      	strh	r3, [r7, #8]
        if (error) {
 8014f10:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d002      	beq.n	8014f1e <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8014f18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014f1c:	e01e      	b.n	8014f5c <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8014f1e:	89fb      	ldrh	r3, [r7, #14]
 8014f20:	683a      	ldr	r2, [r7, #0]
 8014f22:	441a      	add	r2, r3
 8014f24:	89bb      	ldrh	r3, [r7, #12]
 8014f26:	1c59      	adds	r1, r3, #1
 8014f28:	81b9      	strh	r1, [r7, #12]
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	440b      	add	r3, r1
 8014f30:	7812      	ldrb	r2, [r2, #0]
 8014f32:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8014f34:	89fb      	ldrh	r3, [r7, #14]
 8014f36:	3301      	adds	r3, #1
 8014f38:	683a      	ldr	r2, [r7, #0]
 8014f3a:	441a      	add	r2, r3
 8014f3c:	89bb      	ldrh	r3, [r7, #12]
 8014f3e:	1c59      	adds	r1, r3, #1
 8014f40:	81b9      	strh	r1, [r7, #12]
 8014f42:	4619      	mov	r1, r3
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	440b      	add	r3, r1
 8014f48:	7812      	ldrb	r2, [r2, #0]
 8014f4a:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8014f4c:	89fb      	ldrh	r3, [r7, #14]
 8014f4e:	3303      	adds	r3, #3
 8014f50:	81fb      	strh	r3, [r7, #14]
 8014f52:	89fa      	ldrh	r2, [r7, #14]
 8014f54:	897b      	ldrh	r3, [r7, #10]
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d3cc      	bcc.n	8014ef4 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3710      	adds	r7, #16
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8014f64:	b580      	push	{r7, lr}
 8014f66:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8014f68:	4814      	ldr	r0, [pc, #80]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f6a:	f7f1 fa27 	bl	80063bc <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 8014f6e:	4b13      	ldr	r3, [pc, #76]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f70:	4a13      	ldr	r2, [pc, #76]	@ (8014fc0 <sensirion_i2c_hal_init+0x5c>)
 8014f72:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 100000;
 8014f74:	4b11      	ldr	r3, [pc, #68]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f76:	4a13      	ldr	r2, [pc, #76]	@ (8014fc4 <sensirion_i2c_hal_init+0x60>)
 8014f78:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014f7a:	4b10      	ldr	r3, [pc, #64]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8014f80:	4b0e      	ldr	r3, [pc, #56]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014f86:	4b0d      	ldr	r3, [pc, #52]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f88:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8014f8c:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f90:	2200      	movs	r2, #0
 8014f92:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8014f94:	4b09      	ldr	r3, [pc, #36]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f96:	2200      	movs	r2, #0
 8014f98:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014f9a:	4b08      	ldr	r3, [pc, #32]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014fa0:	4b06      	ldr	r3, [pc, #24]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014fa6:	4805      	ldr	r0, [pc, #20]	@ (8014fbc <sensirion_i2c_hal_init+0x58>)
 8014fa8:	f7f1 f8c4 	bl	8006134 <HAL_I2C_Init>
 8014fac:	4603      	mov	r3, r0
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d001      	beq.n	8014fb6 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 8014fb2:	f7ee fb5f 	bl	8003674 <Error_Handler>
	  }
}
 8014fb6:	bf00      	nop
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	20001838 	.word	0x20001838
 8014fc0:	40005400 	.word	0x40005400
 8014fc4:	000186a0 	.word	0x000186a0

08014fc8 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8014fcc:	4803      	ldr	r0, [pc, #12]	@ (8014fdc <sensirion_i2c_hal_free+0x14>)
 8014fce:	f7f1 f9f5 	bl	80063bc <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 8014fd2:	4802      	ldr	r0, [pc, #8]	@ (8014fdc <sensirion_i2c_hal_free+0x14>)
 8014fd4:	f7ee fc28 	bl	8003828 <HAL_I2C_MspDeInit>
}
 8014fd8:	bf00      	nop
 8014fda:	bd80      	pop	{r7, pc}
 8014fdc:	20001838 	.word	0x20001838

08014fe0 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af02      	add	r7, sp, #8
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	6039      	str	r1, [r7, #0]
 8014fea:	71fb      	strb	r3, [r7, #7]
 8014fec:	4613      	mov	r3, r2
 8014fee:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 8014ff0:	79fb      	ldrb	r3, [r7, #7]
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	005b      	lsls	r3, r3, #1
 8014ff6:	b299      	uxth	r1, r3
 8014ff8:	88bb      	ldrh	r3, [r7, #4]
 8014ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8014ffe:	9200      	str	r2, [sp, #0]
 8015000:	683a      	ldr	r2, [r7, #0]
 8015002:	4804      	ldr	r0, [pc, #16]	@ (8015014 <sensirion_i2c_hal_read+0x34>)
 8015004:	f7f1 fb08 	bl	8006618 <HAL_I2C_Master_Receive>
 8015008:	4603      	mov	r3, r0
 801500a:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 801500c:	4618      	mov	r0, r3
 801500e:	3708      	adds	r7, #8
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}
 8015014:	20001838 	.word	0x20001838

08015018 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8015018:	b580      	push	{r7, lr}
 801501a:	b084      	sub	sp, #16
 801501c:	af02      	add	r7, sp, #8
 801501e:	4603      	mov	r3, r0
 8015020:	6039      	str	r1, [r7, #0]
 8015022:	71fb      	strb	r3, [r7, #7]
 8015024:	4613      	mov	r3, r2
 8015026:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),(uint8_t *)data,count,HAL_MAX_DELAY);
 8015028:	79fb      	ldrb	r3, [r7, #7]
 801502a:	b29b      	uxth	r3, r3
 801502c:	005b      	lsls	r3, r3, #1
 801502e:	b299      	uxth	r1, r3
 8015030:	88bb      	ldrh	r3, [r7, #4]
 8015032:	f04f 32ff 	mov.w	r2, #4294967295
 8015036:	9200      	str	r2, [sp, #0]
 8015038:	683a      	ldr	r2, [r7, #0]
 801503a:	4804      	ldr	r0, [pc, #16]	@ (801504c <sensirion_i2c_hal_write+0x34>)
 801503c:	f7f1 f9ee 	bl	800641c <HAL_I2C_Master_Transmit>
 8015040:	4603      	mov	r3, r0
 8015042:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8015044:	4618      	mov	r0, r3
 8015046:	3708      	adds	r7, #8
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}
 801504c:	20001838 	.word	0x20001838

08015050 <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8015050:	b580      	push	{r7, lr}
 8015052:	b084      	sub	sp, #16
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */
	   uint32_t msec = useconds / 1000;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	4a0d      	ldr	r2, [pc, #52]	@ (8015090 <sensirion_i2c_hal_sleep_usec+0x40>)
 801505c:	fba2 2303 	umull	r2, r3, r2, r3
 8015060:	099b      	lsrs	r3, r3, #6
 8015062:	60fb      	str	r3, [r7, #12]
	    if (useconds % 1000 > 0) {
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	4b0a      	ldr	r3, [pc, #40]	@ (8015090 <sensirion_i2c_hal_sleep_usec+0x40>)
 8015068:	fba3 1302 	umull	r1, r3, r3, r2
 801506c:	099b      	lsrs	r3, r3, #6
 801506e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015072:	fb01 f303 	mul.w	r3, r1, r3
 8015076:	1ad3      	subs	r3, r2, r3
 8015078:	2b00      	cmp	r3, #0
 801507a:	d002      	beq.n	8015082 <sensirion_i2c_hal_sleep_usec+0x32>
	        msec++;
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	3301      	adds	r3, #1
 8015080:	60fb      	str	r3, [r7, #12]
	    }
	    HAL_Delay(msec);
 8015082:	68f8      	ldr	r0, [r7, #12]
 8015084:	f7ef f84c 	bl	8004120 <HAL_Delay>
}
 8015088:	bf00      	nop
 801508a:	3710      	adds	r7, #16
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	10624dd3 	.word	0x10624dd3

08015094 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8015094:	b480      	push	{r7}
 8015096:	b083      	sub	sp, #12
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	061a      	lsls	r2, r3, #24
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	3301      	adds	r3, #1
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	041b      	lsls	r3, r3, #16
 80150aa:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	3302      	adds	r3, #2
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 80150b4:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	3203      	adds	r2, #3
 80150ba:	7812      	ldrb	r2, [r2, #0]
 80150bc:	4313      	orrs	r3, r2
}
 80150be:	4618      	mov	r0, r3
 80150c0:	370c      	adds	r7, #12
 80150c2:	46bd      	mov	sp, r7
 80150c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c8:	4770      	bx	lr

080150ca <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b084      	sub	sp, #16
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 80150d2:	6878      	ldr	r0, [r7, #4]
 80150d4:	f7ff ffde 	bl	8015094 <sensirion_bytes_to_uint32_t>
 80150d8:	4603      	mov	r3, r0
 80150da:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	ee07 3a90 	vmov	s15, r3
}
 80150e2:	eeb0 0a67 	vmov.f32	s0, s15
 80150e6:	3710      	adds	r7, #16
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 80150ec:	b480      	push	{r7}
 80150ee:	b083      	sub	sp, #12
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	4603      	mov	r3, r0
 80150f4:	603a      	str	r2, [r7, #0]
 80150f6:	71fb      	strb	r3, [r7, #7]
 80150f8:	460b      	mov	r3, r1
 80150fa:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 80150fc:	79fa      	ldrb	r2, [r7, #7]
 80150fe:	79bb      	ldrb	r3, [r7, #6]
 8015100:	4413      	add	r3, r2
 8015102:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 8015104:	e006      	b.n	8015114 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	1c5a      	adds	r2, r3, #1
 801510a:	603a      	str	r2, [r7, #0]
 801510c:	781a      	ldrb	r2, [r3, #0]
 801510e:	79fb      	ldrb	r3, [r7, #7]
 8015110:	4413      	add	r3, r2
 8015112:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 8015114:	79bb      	ldrb	r3, [r7, #6]
 8015116:	1e5a      	subs	r2, r3, #1
 8015118:	71ba      	strb	r2, [r7, #6]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d1f3      	bne.n	8015106 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 801511e:	79fb      	ldrb	r3, [r7, #7]
 8015120:	43db      	mvns	r3, r3
 8015122:	b2db      	uxtb	r3, r3
}
 8015124:	4618      	mov	r0, r3
 8015126:	370c      	adds	r7, #12
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr

08015130 <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 8015130:	b480      	push	{r7}
 8015132:	b087      	sub	sp, #28
 8015134:	af00      	add	r7, sp, #0
 8015136:	4603      	mov	r3, r0
 8015138:	60b9      	str	r1, [r7, #8]
 801513a:	607a      	str	r2, [r7, #4]
 801513c:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 801513e:	2300      	movs	r3, #0
 8015140:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 8015142:	e026      	b.n	8015192 <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	1c5a      	adds	r2, r3, #1
 8015148:	60ba      	str	r2, [r7, #8]
 801514a:	781b      	ldrb	r3, [r3, #0]
 801514c:	757b      	strb	r3, [r7, #21]
        switch (c) {
 801514e:	7d7b      	ldrb	r3, [r7, #21]
 8015150:	2b7e      	cmp	r3, #126	@ 0x7e
 8015152:	dc16      	bgt.n	8015182 <sensirion_shdlc_stuff_data+0x52>
 8015154:	2b7d      	cmp	r3, #125	@ 0x7d
 8015156:	da03      	bge.n	8015160 <sensirion_shdlc_stuff_data+0x30>
 8015158:	2b11      	cmp	r3, #17
 801515a:	d001      	beq.n	8015160 <sensirion_shdlc_stuff_data+0x30>
 801515c:	2b13      	cmp	r3, #19
 801515e:	d110      	bne.n	8015182 <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	1c5a      	adds	r2, r3, #1
 8015164:	607a      	str	r2, [r7, #4]
 8015166:	227d      	movs	r2, #125	@ 0x7d
 8015168:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	1c5a      	adds	r2, r3, #1
 801516e:	607a      	str	r2, [r7, #4]
 8015170:	7d7a      	ldrb	r2, [r7, #21]
 8015172:	f082 0220 	eor.w	r2, r2, #32
 8015176:	b2d2      	uxtb	r2, r2
 8015178:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 801517a:	8afb      	ldrh	r3, [r7, #22]
 801517c:	3302      	adds	r3, #2
 801517e:	82fb      	strh	r3, [r7, #22]
                break;
 8015180:	e007      	b.n	8015192 <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	1c5a      	adds	r2, r3, #1
 8015186:	607a      	str	r2, [r7, #4]
 8015188:	7d7a      	ldrb	r2, [r7, #21]
 801518a:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 801518c:	8afb      	ldrh	r3, [r7, #22]
 801518e:	3301      	adds	r3, #1
 8015190:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 8015192:	7bfb      	ldrb	r3, [r7, #15]
 8015194:	1e5a      	subs	r2, r3, #1
 8015196:	73fa      	strb	r2, [r7, #15]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d1d3      	bne.n	8015144 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 801519c:	8afb      	ldrh	r3, [r7, #22]
}
 801519e:	4618      	mov	r0, r3
 80151a0:	371c      	adds	r7, #28
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr

080151aa <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 80151aa:	b480      	push	{r7}
 80151ac:	b083      	sub	sp, #12
 80151ae:	af00      	add	r7, sp, #0
 80151b0:	4603      	mov	r3, r0
 80151b2:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 80151b4:	79fb      	ldrb	r3, [r7, #7]
 80151b6:	2b7d      	cmp	r3, #125	@ 0x7d
 80151b8:	bf0c      	ite	eq
 80151ba:	2301      	moveq	r3, #1
 80151bc:	2300      	movne	r3, #0
 80151be:	b2db      	uxtb	r3, r3
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	370c      	adds	r7, #12
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr

080151cc <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 80151cc:	b480      	push	{r7}
 80151ce:	b083      	sub	sp, #12
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	4603      	mov	r3, r0
 80151d4:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 80151d6:	79fb      	ldrb	r3, [r7, #7]
 80151d8:	2b5e      	cmp	r3, #94	@ 0x5e
 80151da:	d010      	beq.n	80151fe <sensirion_shdlc_unstuff_byte+0x32>
 80151dc:	2b5e      	cmp	r3, #94	@ 0x5e
 80151de:	dc10      	bgt.n	8015202 <sensirion_shdlc_unstuff_byte+0x36>
 80151e0:	2b5d      	cmp	r3, #93	@ 0x5d
 80151e2:	d00a      	beq.n	80151fa <sensirion_shdlc_unstuff_byte+0x2e>
 80151e4:	2b5d      	cmp	r3, #93	@ 0x5d
 80151e6:	dc0c      	bgt.n	8015202 <sensirion_shdlc_unstuff_byte+0x36>
 80151e8:	2b31      	cmp	r3, #49	@ 0x31
 80151ea:	d002      	beq.n	80151f2 <sensirion_shdlc_unstuff_byte+0x26>
 80151ec:	2b33      	cmp	r3, #51	@ 0x33
 80151ee:	d002      	beq.n	80151f6 <sensirion_shdlc_unstuff_byte+0x2a>
 80151f0:	e007      	b.n	8015202 <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 80151f2:	2311      	movs	r3, #17
 80151f4:	e006      	b.n	8015204 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 80151f6:	2313      	movs	r3, #19
 80151f8:	e004      	b.n	8015204 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 80151fa:	237d      	movs	r3, #125	@ 0x7d
 80151fc:	e002      	b.n	8015204 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 80151fe:	237e      	movs	r3, #126	@ 0x7e
 8015200:	e000      	b.n	8015204 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 8015202:	79fb      	ldrb	r3, [r7, #7]
    }
}
 8015204:	4618      	mov	r0, r3
 8015206:	370c      	adds	r7, #12
 8015208:	46bd      	mov	sp, r7
 801520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520e:	4770      	bx	lr

08015210 <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 8015210:	b580      	push	{r7, lr}
 8015212:	b084      	sub	sp, #16
 8015214:	af00      	add	r7, sp, #0
 8015216:	603b      	str	r3, [r7, #0]
 8015218:	4603      	mov	r3, r0
 801521a:	71fb      	strb	r3, [r7, #7]
 801521c:	460b      	mov	r3, r1
 801521e:	71bb      	strb	r3, [r7, #6]
 8015220:	4613      	mov	r3, r2
 8015222:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 8015224:	797a      	ldrb	r2, [r7, #5]
 8015226:	79b9      	ldrb	r1, [r7, #6]
 8015228:	79f8      	ldrb	r0, [r7, #7]
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	f000 f818 	bl	8015260 <sensirion_shdlc_tx>
 8015230:	4603      	mov	r3, r0
 8015232:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 8015234:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d002      	beq.n	8015242 <sensirion_shdlc_xcv+0x32>
        return ret;
 801523c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015240:	e00a      	b.n	8015258 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 8015242:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8015246:	f000 fb07 	bl	8015858 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 801524a:	7e3b      	ldrb	r3, [r7, #24]
 801524c:	6a3a      	ldr	r2, [r7, #32]
 801524e:	69f9      	ldr	r1, [r7, #28]
 8015250:	4618      	mov	r0, r3
 8015252:	f000 f8d7 	bl	8015404 <sensirion_shdlc_rx>
 8015256:	4603      	mov	r3, r0
}
 8015258:	4618      	mov	r0, r3
 801525a:	3710      	adds	r7, #16
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}

08015260 <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 8015260:	b590      	push	{r4, r7, lr}
 8015262:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8015266:	af00      	add	r7, sp, #0
 8015268:	4604      	mov	r4, r0
 801526a:	4608      	mov	r0, r1
 801526c:	4611      	mov	r1, r2
 801526e:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8015272:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 8015276:	6013      	str	r3, [r2, #0]
 8015278:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801527c:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8015280:	4622      	mov	r2, r4
 8015282:	701a      	strb	r2, [r3, #0]
 8015284:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015288:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 801528c:	4602      	mov	r2, r0
 801528e:	701a      	strb	r2, [r3, #0]
 8015290:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8015294:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 8015298:	460a      	mov	r2, r1
 801529a:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 801529c:	2300      	movs	r3, #0
 801529e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 80152a2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152a6:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80152aa:	781a      	ldrb	r2, [r3, #0]
 80152ac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152b0:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	4413      	add	r3, r2
 80152b8:	b2d8      	uxtb	r0, r3
 80152ba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152be:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 80152c2:	7819      	ldrb	r1, [r3, #0]
 80152c4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152c8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	f7ff ff0d 	bl	80150ec <sensirion_shdlc_crc>
 80152d2:	4603      	mov	r3, r0
 80152d4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213

    tx_frame_buf[len++] = SHDLC_START;
 80152d8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152dc:	1c5a      	adds	r2, r3, #1
 80152de:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 80152e2:	461a      	mov	r2, r3
 80152e4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80152e8:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80152ec:	217e      	movs	r1, #126	@ 0x7e
 80152ee:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 80152f0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80152f4:	f107 0208 	add.w	r2, r7, #8
 80152f8:	441a      	add	r2, r3
 80152fa:	1dfb      	adds	r3, r7, #7
 80152fc:	4619      	mov	r1, r3
 80152fe:	2001      	movs	r0, #1
 8015300:	f7ff ff16 	bl	8015130 <sensirion_shdlc_stuff_data>
 8015304:	4603      	mov	r3, r0
 8015306:	461a      	mov	r2, r3
 8015308:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801530c:	4413      	add	r3, r2
 801530e:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 8015312:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015316:	f107 0208 	add.w	r2, r7, #8
 801531a:	441a      	add	r2, r3
 801531c:	1dbb      	adds	r3, r7, #6
 801531e:	4619      	mov	r1, r3
 8015320:	2001      	movs	r0, #1
 8015322:	f7ff ff05 	bl	8015130 <sensirion_shdlc_stuff_data>
 8015326:	4603      	mov	r3, r0
 8015328:	461a      	mov	r2, r3
 801532a:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801532e:	4413      	add	r3, r2
 8015330:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 8015334:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015338:	f107 0208 	add.w	r2, r7, #8
 801533c:	441a      	add	r2, r3
 801533e:	1d7b      	adds	r3, r7, #5
 8015340:	4619      	mov	r1, r3
 8015342:	2001      	movs	r0, #1
 8015344:	f7ff fef4 	bl	8015130 <sensirion_shdlc_stuff_data>
 8015348:	4603      	mov	r3, r0
 801534a:	461a      	mov	r2, r3
 801534c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015350:	4413      	add	r3, r2
 8015352:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8015356:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801535a:	f2a3 2313 	subw	r3, r3, #531	@ 0x213
 801535e:	7818      	ldrb	r0, [r3, #0]
 8015360:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015364:	f107 0208 	add.w	r2, r7, #8
 8015368:	441a      	add	r2, r3
 801536a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801536e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015372:	6819      	ldr	r1, [r3, #0]
 8015374:	f7ff fedc 	bl	8015130 <sensirion_shdlc_stuff_data>
 8015378:	4603      	mov	r3, r0
 801537a:	461a      	mov	r2, r3
 801537c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8015380:	4413      	add	r3, r2
 8015382:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8015386:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801538a:	f107 0208 	add.w	r2, r7, #8
 801538e:	441a      	add	r2, r3
 8015390:	f207 2313 	addw	r3, r7, #531	@ 0x213
 8015394:	4619      	mov	r1, r3
 8015396:	2001      	movs	r0, #1
 8015398:	f7ff feca 	bl	8015130 <sensirion_shdlc_stuff_data>
 801539c:	4603      	mov	r3, r0
 801539e:	461a      	mov	r2, r3
 80153a0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153a4:	4413      	add	r3, r2
 80153a6:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 80153aa:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153ae:	1c5a      	adds	r2, r3, #1
 80153b0:	f8a7 2216 	strh.w	r2, [r7, #534]	@ 0x216
 80153b4:	461a      	mov	r2, r3
 80153b6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80153ba:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80153be:	217e      	movs	r1, #126	@ 0x7e
 80153c0:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 80153c2:	f107 0208 	add.w	r2, r7, #8
 80153c6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153ca:	4611      	mov	r1, r2
 80153cc:	4618      	mov	r0, r3
 80153ce:	f000 f9db 	bl	8015788 <sensirion_uart_tx>
 80153d2:	4603      	mov	r3, r0
 80153d4:	f8a7 3214 	strh.w	r3, [r7, #532]	@ 0x214
    if (ret < 0)
 80153d8:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 80153dc:	2b00      	cmp	r3, #0
 80153de:	da02      	bge.n	80153e6 <sensirion_shdlc_tx+0x186>
        return ret;
 80153e0:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	@ 0x214
 80153e4:	e009      	b.n	80153fa <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 80153e6:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	@ 0x214
 80153ea:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d002      	beq.n	80153f8 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 80153f2:	f06f 0305 	mvn.w	r3, #5
 80153f6:	e000      	b.n	80153fa <sensirion_shdlc_tx+0x19a>
    return 0;
 80153f8:	2300      	movs	r3, #0
}
 80153fa:	4618      	mov	r0, r3
 80153fc:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8015400:	46bd      	mov	sp, r7
 8015402:	bd90      	pop	{r4, r7, pc}

08015404 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 8015404:	b590      	push	{r4, r7, lr}
 8015406:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 801540a:	af00      	add	r7, sp, #0
 801540c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015410:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015414:	6019      	str	r1, [r3, #0]
 8015416:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801541a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801541e:	601a      	str	r2, [r3, #0]
 8015420:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015424:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8015428:	4602      	mov	r2, r0
 801542a:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 801542c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015430:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 801543a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801543e:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8015442:	781b      	ldrb	r3, [r3, #0]
 8015444:	3306      	adds	r3, #6
 8015446:	b29b      	uxth	r3, r3
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	b29b      	uxth	r3, r3
 801544c:	f107 0210 	add.w	r2, r7, #16
 8015450:	4611      	mov	r1, r2
 8015452:	4618      	mov	r0, r3
 8015454:	f000 f9d2 	bl	80157fc <sensirion_uart_rx>
 8015458:	4603      	mov	r3, r0
 801545a:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 801545e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 8015462:	2b00      	cmp	r3, #0
 8015464:	dd03      	ble.n	801546e <sensirion_shdlc_rx+0x6a>
 8015466:	4ba0      	ldr	r3, [pc, #640]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 8015468:	781b      	ldrb	r3, [r3, #0]
 801546a:	2b7e      	cmp	r3, #126	@ 0x7e
 801546c:	d002      	beq.n	8015474 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 801546e:	f06f 0301 	mvn.w	r3, #1
 8015472:	e133      	b.n	80156dc <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8015474:	2300      	movs	r3, #0
 8015476:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 801547a:	2301      	movs	r3, #1
 801547c:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 8015480:	2300      	movs	r3, #0
 8015482:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8015486:	e03a      	b.n	80154fe <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8015488:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801548c:	2b00      	cmp	r3, #0
 801548e:	d015      	beq.n	80154bc <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8015490:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015494:	4a94      	ldr	r2, [pc, #592]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 8015496:	5cd2      	ldrb	r2, [r2, r3]
 8015498:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801549c:	1c59      	adds	r1, r3, #1
 801549e:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80154a2:	4619      	mov	r1, r3
 80154a4:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80154a8:	185c      	adds	r4, r3, r1
 80154aa:	4610      	mov	r0, r2
 80154ac:	f7ff fe8e 	bl	80151cc <sensirion_shdlc_unstuff_byte>
 80154b0:	4603      	mov	r3, r0
 80154b2:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 80154b4:	2300      	movs	r3, #0
 80154b6:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 80154ba:	e01b      	b.n	80154f4 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 80154bc:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154c0:	4a89      	ldr	r2, [pc, #548]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 80154c2:	5cd3      	ldrb	r3, [r2, r3]
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ff fe70 	bl	80151aa <sensirion_shdlc_check_unstuff>
 80154ca:	4603      	mov	r3, r0
 80154cc:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 80154d0:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d10d      	bne.n	80154f4 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 80154d8:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80154dc:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80154e0:	1c59      	adds	r1, r3, #1
 80154e2:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80154e6:	4619      	mov	r1, r3
 80154e8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80154ec:	440b      	add	r3, r1
 80154ee:	497e      	ldr	r1, [pc, #504]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 80154f0:	5c8a      	ldrb	r2, [r1, r2]
 80154f2:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 80154f4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80154f8:	3301      	adds	r3, #1
 80154fa:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 80154fe:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015502:	2b03      	cmp	r3, #3
 8015504:	d806      	bhi.n	8015514 <sensirion_shdlc_rx+0x110>
 8015506:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 801550a:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 801550e:	3b02      	subs	r3, #2
 8015510:	429a      	cmp	r2, r3
 8015512:	dbb9      	blt.n	8015488 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 8015514:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 8015518:	2b04      	cmp	r3, #4
 801551a:	d103      	bne.n	8015524 <sensirion_shdlc_rx+0x120>
 801551c:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015520:	2b00      	cmp	r3, #0
 8015522:	d002      	beq.n	801552a <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015524:	f06f 0304 	mvn.w	r3, #4
 8015528:	e0d8      	b.n	80156dc <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 801552a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801552e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	78db      	ldrb	r3, [r3, #3]
 8015536:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 801553a:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 801553e:	7812      	ldrb	r2, [r2, #0]
 8015540:	429a      	cmp	r2, r3
 8015542:	d202      	bcs.n	801554a <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 8015544:	f06f 0306 	mvn.w	r3, #6
 8015548:	e0c8      	b.n	80156dc <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 801554a:	2300      	movs	r3, #0
 801554c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015550:	2300      	movs	r3, #0
 8015552:	f887 3225 	strb.w	r3, [r7, #549]	@ 0x225
 8015556:	e040      	b.n	80155da <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8015558:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 801555c:	2b00      	cmp	r3, #0
 801555e:	d018      	beq.n	8015592 <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 8015560:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015564:	4a60      	ldr	r2, [pc, #384]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 8015566:	5cd2      	ldrb	r2, [r2, r3]
 8015568:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 801556c:	1c59      	adds	r1, r3, #1
 801556e:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 8015572:	4619      	mov	r1, r3
 8015574:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015578:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	185c      	adds	r4, r3, r1
 8015580:	4610      	mov	r0, r2
 8015582:	f7ff fe23 	bl	80151cc <sensirion_shdlc_unstuff_byte>
 8015586:	4603      	mov	r3, r0
 8015588:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 801558a:	2300      	movs	r3, #0
 801558c:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
 8015590:	e01e      	b.n	80155d0 <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8015592:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015596:	4a54      	ldr	r2, [pc, #336]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 8015598:	5cd3      	ldrb	r3, [r2, r3]
 801559a:	4618      	mov	r0, r3
 801559c:	f7ff fe05 	bl	80151aa <sensirion_shdlc_check_unstuff>
 80155a0:	4603      	mov	r3, r0
 80155a2:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
            if (!unstuff_next)
 80155a6:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d110      	bne.n	80155d0 <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 80155ae:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80155b2:	f897 3225 	ldrb.w	r3, [r7, #549]	@ 0x225
 80155b6:	1c59      	adds	r1, r3, #1
 80155b8:	f887 1225 	strb.w	r1, [r7, #549]	@ 0x225
 80155bc:	4619      	mov	r1, r3
 80155be:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155c2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	440b      	add	r3, r1
 80155ca:	4947      	ldr	r1, [pc, #284]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 80155cc:	5c8a      	ldrb	r2, [r1, r2]
 80155ce:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80155d0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80155d4:	3301      	adds	r3, #1
 80155d6:	f8a7 3226 	strh.w	r3, [r7, #550]	@ 0x226
 80155da:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80155de:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	78db      	ldrb	r3, [r3, #3]
 80155e6:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d206      	bcs.n	80155fc <sensirion_shdlc_rx+0x1f8>
 80155ee:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80155f2:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80155f6:	3b02      	subs	r3, #2
 80155f8:	429a      	cmp	r2, r3
 80155fa:	dbad      	blt.n	8015558 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 80155fc:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 8015600:	2b00      	cmp	r3, #0
 8015602:	d002      	beq.n	801560a <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 8015604:	f06f 0304 	mvn.w	r3, #4
 8015608:	e068      	b.n	80156dc <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 801560a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801560e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	78db      	ldrb	r3, [r3, #3]
 8015616:	f897 2225 	ldrb.w	r2, [r7, #549]	@ 0x225
 801561a:	429a      	cmp	r2, r3
 801561c:	d202      	bcs.n	8015624 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 801561e:	f06f 0304 	mvn.w	r3, #4
 8015622:	e05b      	b.n	80156dc <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 8015624:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 8015628:	1c5a      	adds	r2, r3, #1
 801562a:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 801562e:	461a      	mov	r2, r3
 8015630:	4b2d      	ldr	r3, [pc, #180]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 8015632:	5c9b      	ldrb	r3, [r3, r2]
 8015634:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 8015638:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 801563c:	4618      	mov	r0, r3
 801563e:	f7ff fdb4 	bl	80151aa <sensirion_shdlc_check_unstuff>
 8015642:	4603      	mov	r3, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	d00d      	beq.n	8015664 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 8015648:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 801564c:	1c5a      	adds	r2, r3, #1
 801564e:	f8a7 2226 	strh.w	r2, [r7, #550]	@ 0x226
 8015652:	461a      	mov	r2, r3
 8015654:	4b24      	ldr	r3, [pc, #144]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 8015656:	5c9b      	ldrb	r3, [r3, r2]
 8015658:	4618      	mov	r0, r3
 801565a:	f7ff fdb7 	bl	80151cc <sensirion_shdlc_unstuff_byte>
 801565e:	4603      	mov	r3, r0
 8015660:	f887 3224 	strb.w	r3, [r7, #548]	@ 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8015664:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015668:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	781a      	ldrb	r2, [r3, #0]
 8015670:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015674:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	785b      	ldrb	r3, [r3, #1]
 801567c:	4413      	add	r3, r2
 801567e:	b2da      	uxtb	r2, r3
 8015680:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015684:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	789b      	ldrb	r3, [r3, #2]
 801568c:	4413      	add	r3, r2
 801568e:	b2d8      	uxtb	r0, r3
 8015690:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8015694:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	78d9      	ldrb	r1, [r3, #3]
 801569c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80156a0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	f7ff fd21 	bl	80150ec <sensirion_shdlc_crc>
 80156aa:	4603      	mov	r3, r0
 80156ac:	461a      	mov	r2, r3
 80156ae:	f897 3224 	ldrb.w	r3, [r7, #548]	@ 0x224
 80156b2:	4293      	cmp	r3, r2
 80156b4:	d002      	beq.n	80156bc <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 80156b6:	f06f 0303 	mvn.w	r3, #3
 80156ba:	e00f      	b.n	80156dc <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 80156bc:	f8b7 2226 	ldrh.w	r2, [r7, #550]	@ 0x226
 80156c0:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	@ 0x21a
 80156c4:	429a      	cmp	r2, r3
 80156c6:	da05      	bge.n	80156d4 <sensirion_shdlc_rx+0x2d0>
 80156c8:	f8b7 3226 	ldrh.w	r3, [r7, #550]	@ 0x226
 80156cc:	4a06      	ldr	r2, [pc, #24]	@ (80156e8 <sensirion_shdlc_rx+0x2e4>)
 80156ce:	5cd3      	ldrb	r3, [r2, r3]
 80156d0:	2b7e      	cmp	r3, #126	@ 0x7e
 80156d2:	d002      	beq.n	80156da <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 80156d4:	f06f 0302 	mvn.w	r3, #2
 80156d8:	e000      	b.n	80156dc <sensirion_shdlc_rx+0x2d8>

    return 0;
 80156da:	2300      	movs	r3, #0
}
 80156dc:	4618      	mov	r0, r3
 80156de:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd90      	pop	{r4, r7, pc}
 80156e6:	bf00      	nop
 80156e8:	2000158c 	.word	0x2000158c

080156ec <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 80156ec:	b580      	push	{r7, lr}
 80156ee:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 80156f0:	4819      	ldr	r0, [pc, #100]	@ (8015758 <sensirion_uart_open+0x6c>)
 80156f2:	f7f6 fd77 	bl	800c1e4 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 80156f6:	4b18      	ldr	r3, [pc, #96]	@ (8015758 <sensirion_uart_open+0x6c>)
 80156f8:	4a18      	ldr	r2, [pc, #96]	@ (801575c <sensirion_uart_open+0x70>)
 80156fa:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80156fc:	4b16      	ldr	r3, [pc, #88]	@ (8015758 <sensirion_uart_open+0x6c>)
 80156fe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8015702:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8015704:	4b14      	ldr	r3, [pc, #80]	@ (8015758 <sensirion_uart_open+0x6c>)
 8015706:	2200      	movs	r2, #0
 8015708:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 801570a:	4b13      	ldr	r3, [pc, #76]	@ (8015758 <sensirion_uart_open+0x6c>)
 801570c:	2200      	movs	r2, #0
 801570e:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8015710:	4b11      	ldr	r3, [pc, #68]	@ (8015758 <sensirion_uart_open+0x6c>)
 8015712:	2200      	movs	r2, #0
 8015714:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8015716:	4b10      	ldr	r3, [pc, #64]	@ (8015758 <sensirion_uart_open+0x6c>)
 8015718:	220c      	movs	r2, #12
 801571a:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801571c:	4b0e      	ldr	r3, [pc, #56]	@ (8015758 <sensirion_uart_open+0x6c>)
 801571e:	2200      	movs	r2, #0
 8015720:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8015722:	4b0d      	ldr	r3, [pc, #52]	@ (8015758 <sensirion_uart_open+0x6c>)
 8015724:	2200      	movs	r2, #0
 8015726:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8015728:	480b      	ldr	r0, [pc, #44]	@ (8015758 <sensirion_uart_open+0x6c>)
 801572a:	f7f6 fd0b 	bl	800c144 <HAL_UART_Init>
 801572e:	4603      	mov	r3, r0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d001      	beq.n	8015738 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 8015734:	f7ed ff9e 	bl	8003674 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 8015738:	f240 220a 	movw	r2, #522	@ 0x20a
 801573c:	4908      	ldr	r1, [pc, #32]	@ (8015760 <sensirion_uart_open+0x74>)
 801573e:	4806      	ldr	r0, [pc, #24]	@ (8015758 <sensirion_uart_open+0x6c>)
 8015740:	f7f6 fe32 	bl	800c3a8 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 8015744:	4b07      	ldr	r3, [pc, #28]	@ (8015764 <sensirion_uart_open+0x78>)
 8015746:	2200      	movs	r2, #0
 8015748:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 801574a:	4b07      	ldr	r3, [pc, #28]	@ (8015768 <sensirion_uart_open+0x7c>)
 801574c:	2200      	movs	r2, #0
 801574e:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 8015750:	2300      	movs	r3, #0
}
 8015752:	4618      	mov	r0, r3
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	20001abc 	.word	0x20001abc
 801575c:	40004400 	.word	0x40004400
 8015760:	2000158c 	.word	0x2000158c
 8015764:	20001b5e 	.word	0x20001b5e
 8015768:	20001b60 	.word	0x20001b60

0801576c <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 801576c:	b580      	push	{r7, lr}
 801576e:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8015770:	4804      	ldr	r0, [pc, #16]	@ (8015784 <sensirion_uart_close+0x18>)
 8015772:	f7f6 fd37 	bl	800c1e4 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8015776:	4803      	ldr	r0, [pc, #12]	@ (8015784 <sensirion_uart_close+0x18>)
 8015778:	f7ee fa9e 	bl	8003cb8 <HAL_UART_MspDeInit>
    return 0;
 801577c:	2300      	movs	r3, #0
}
 801577e:	4618      	mov	r0, r3
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	20001abc 	.word	0x20001abc

08015788 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8015788:	b580      	push	{r7, lr}
 801578a:	b082      	sub	sp, #8
 801578c:	af00      	add	r7, sp, #0
 801578e:	4603      	mov	r3, r0
 8015790:	6039      	str	r1, [r7, #0]
 8015792:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8015794:	88fa      	ldrh	r2, [r7, #6]
 8015796:	f04f 33ff 	mov.w	r3, #4294967295
 801579a:	6839      	ldr	r1, [r7, #0]
 801579c:	4807      	ldr	r0, [pc, #28]	@ (80157bc <sensirion_uart_tx+0x34>)
 801579e:	f7f6 fd53 	bl	800c248 <HAL_UART_Transmit>
 80157a2:	4603      	mov	r3, r0
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d102      	bne.n	80157ae <sensirion_uart_tx+0x26>
		{
			return data_len;
 80157a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80157ac:	e001      	b.n	80157b2 <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 80157ae:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3708      	adds	r7, #8
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop
 80157bc:	20001abc 	.word	0x20001abc

080157c0 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	460b      	mov	r3, r1
 80157ca:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 80157cc:	4a07      	ldr	r2, [pc, #28]	@ (80157ec <HAL_UARTEx_RxEventCallback+0x2c>)
 80157ce:	887b      	ldrh	r3, [r7, #2]
 80157d0:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 80157d2:	4b07      	ldr	r3, [pc, #28]	@ (80157f0 <HAL_UARTEx_RxEventCallback+0x30>)
 80157d4:	2201      	movs	r2, #1
 80157d6:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 80157d8:	f240 220a 	movw	r2, #522	@ 0x20a
 80157dc:	4905      	ldr	r1, [pc, #20]	@ (80157f4 <HAL_UARTEx_RxEventCallback+0x34>)
 80157de:	4806      	ldr	r0, [pc, #24]	@ (80157f8 <HAL_UARTEx_RxEventCallback+0x38>)
 80157e0:	f7f6 fde2 	bl	800c3a8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80157e4:	bf00      	nop
 80157e6:	3708      	adds	r7, #8
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	20001b5e 	.word	0x20001b5e
 80157f0:	20001b62 	.word	0x20001b62
 80157f4:	2000158c 	.word	0x2000158c
 80157f8:	20001abc 	.word	0x20001abc

080157fc <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b084      	sub	sp, #16
 8015800:	af00      	add	r7, sp, #0
 8015802:	4603      	mov	r3, r0
 8015804:	6039      	str	r1, [r7, #0]
 8015806:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8015808:	2300      	movs	r3, #0
 801580a:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 801580c:	e005      	b.n	801581a <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	3301      	adds	r3, #1
 8015812:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8015814:	200a      	movs	r0, #10
 8015816:	f7ee fc83 	bl	8004120 <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 801581a:	4b0b      	ldr	r3, [pc, #44]	@ (8015848 <sensirion_uart_rx+0x4c>)
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d102      	bne.n	8015828 <sensirion_uart_rx+0x2c>
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	2b02      	cmp	r3, #2
 8015826:	d9f2      	bls.n	801580e <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8015828:	4b07      	ldr	r3, [pc, #28]	@ (8015848 <sensirion_uart_rx+0x4c>)
 801582a:	2200      	movs	r2, #0
 801582c:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 801582e:	4b07      	ldr	r3, [pc, #28]	@ (801584c <sensirion_uart_rx+0x50>)
 8015830:	2200      	movs	r2, #0
 8015832:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8015834:	4b06      	ldr	r3, [pc, #24]	@ (8015850 <sensirion_uart_rx+0x54>)
 8015836:	2200      	movs	r2, #0
 8015838:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 801583a:	4b06      	ldr	r3, [pc, #24]	@ (8015854 <sensirion_uart_rx+0x58>)
 801583c:	881b      	ldrh	r3, [r3, #0]
 801583e:	b21b      	sxth	r3, r3
	//return i;
}
 8015840:	4618      	mov	r0, r3
 8015842:	3710      	adds	r7, #16
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	20001b62 	.word	0x20001b62
 801584c:	20001b64 	.word	0x20001b64
 8015850:	20001b60 	.word	0x20001b60
 8015854:	20001b5e 	.word	0x20001b5e

08015858 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	4a06      	ldr	r2, [pc, #24]	@ (801587c <sensirion_sleep_usec+0x24>)
 8015864:	fba2 2303 	umull	r2, r3, r2, r3
 8015868:	099b      	lsrs	r3, r3, #6
 801586a:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f7ee fc57 	bl	8004120 <HAL_Delay>
}
 8015872:	bf00      	nop
 8015874:	3708      	adds	r7, #8
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}
 801587a:	bf00      	nop
 801587c:	10624dd3 	.word	0x10624dd3

08015880 <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8015880:	b580      	push	{r7, lr}
 8015882:	b08a      	sub	sp, #40	@ 0x28
 8015884:	af04      	add	r7, sp, #16
 8015886:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8015888:	2303      	movs	r3, #3
 801588a:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 801588c:	f107 020c 	add.w	r2, r7, #12
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	9302      	str	r3, [sp, #8]
 8015894:	f107 0310 	add.w	r3, r7, #16
 8015898:	9301      	str	r3, [sp, #4]
 801589a:	2320      	movs	r3, #32
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	4613      	mov	r3, r2
 80158a0:	2201      	movs	r2, #1
 80158a2:	21d0      	movs	r1, #208	@ 0xd0
 80158a4:	2000      	movs	r0, #0
 80158a6:	f7ff fcb3 	bl	8015210 <sensirion_shdlc_xcv>
 80158aa:	4603      	mov	r3, r0
 80158ac:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 80158ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	da02      	bge.n	80158bc <sps30_get_serial+0x3c>
        return ret;
 80158b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80158ba:	e009      	b.n	80158d0 <sps30_get_serial+0x50>

    if (header.state)
 80158bc:	7cbb      	ldrb	r3, [r7, #18]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d005      	beq.n	80158ce <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 80158c2:	7cbb      	ldrb	r3, [r7, #18]
 80158c4:	b21b      	sxth	r3, r3
 80158c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80158ca:	b21b      	sxth	r3, r3
 80158cc:	e000      	b.n	80158d0 <sps30_get_serial+0x50>

    return 0;
 80158ce:	2300      	movs	r3, #0
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3718      	adds	r7, #24
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}

080158d8 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 80158d8:	b580      	push	{r7, lr}
 80158da:	b086      	sub	sp, #24
 80158dc:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 80158de:	f240 3301 	movw	r3, #769	@ 0x301
 80158e2:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 80158e4:	463a      	mov	r2, r7
 80158e6:	2300      	movs	r3, #0
 80158e8:	9302      	str	r3, [sp, #8]
 80158ea:	1d3b      	adds	r3, r7, #4
 80158ec:	9301      	str	r3, [sp, #4]
 80158ee:	2300      	movs	r3, #0
 80158f0:	9300      	str	r3, [sp, #0]
 80158f2:	4613      	mov	r3, r2
 80158f4:	2202      	movs	r2, #2
 80158f6:	2100      	movs	r1, #0
 80158f8:	2000      	movs	r0, #0
 80158fa:	f7ff fc89 	bl	8015210 <sensirion_shdlc_xcv>
 80158fe:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8015900:	4618      	mov	r0, r3
 8015902:	3708      	adds	r7, #8
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}

08015908 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8015908:	b580      	push	{r7, lr}
 801590a:	b086      	sub	sp, #24
 801590c:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 801590e:	2300      	movs	r3, #0
 8015910:	9302      	str	r3, [sp, #8]
 8015912:	1d3b      	adds	r3, r7, #4
 8015914:	9301      	str	r3, [sp, #4]
 8015916:	2300      	movs	r3, #0
 8015918:	9300      	str	r3, [sp, #0]
 801591a:	2300      	movs	r3, #0
 801591c:	2200      	movs	r2, #0
 801591e:	2101      	movs	r1, #1
 8015920:	2000      	movs	r0, #0
 8015922:	f7ff fc75 	bl	8015210 <sensirion_shdlc_xcv>
 8015926:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015928:	4618      	mov	r0, r3
 801592a:	3708      	adds	r7, #8
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}

08015930 <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8015930:	b580      	push	{r7, lr}
 8015932:	b092      	sub	sp, #72	@ 0x48
 8015934:	af04      	add	r7, sp, #16
 8015936:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8015938:	f107 0308 	add.w	r3, r7, #8
 801593c:	9302      	str	r3, [sp, #8]
 801593e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015942:	9301      	str	r3, [sp, #4]
 8015944:	2328      	movs	r3, #40	@ 0x28
 8015946:	9300      	str	r3, [sp, #0]
 8015948:	2300      	movs	r3, #0
 801594a:	2200      	movs	r2, #0
 801594c:	2103      	movs	r1, #3
 801594e:	2000      	movs	r0, #0
 8015950:	f7ff fc5e 	bl	8015210 <sensirion_shdlc_xcv>
 8015954:	4603      	mov	r3, r0
 8015956:	86fb      	strh	r3, [r7, #54]	@ 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 8015958:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 801595c:	2b00      	cmp	r3, #0
 801595e:	d002      	beq.n	8015966 <sps30_read_measurement+0x36>
        return error;
 8015960:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8015964:	e07f      	b.n	8015a66 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 8015966:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801596a:	2b28      	cmp	r3, #40	@ 0x28
 801596c:	d002      	beq.n	8015974 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 801596e:	f04f 33ff 	mov.w	r3, #4294967295
 8015972:	e078      	b.n	8015a66 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 8015974:	f107 0308 	add.w	r3, r7, #8
 8015978:	4618      	mov	r0, r3
 801597a:	f7ff fba6 	bl	80150ca <sensirion_bytes_to_float>
 801597e:	eef0 7a40 	vmov.f32	s15, s0
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8015988:	f107 0308 	add.w	r3, r7, #8
 801598c:	3304      	adds	r3, #4
 801598e:	4618      	mov	r0, r3
 8015990:	f7ff fb9b 	bl	80150ca <sensirion_bytes_to_float>
 8015994:	eef0 7a40 	vmov.f32	s15, s0
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 801599e:	f107 0308 	add.w	r3, r7, #8
 80159a2:	3308      	adds	r3, #8
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7ff fb90 	bl	80150ca <sensirion_bytes_to_float>
 80159aa:	eef0 7a40 	vmov.f32	s15, s0
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 80159b4:	f107 0308 	add.w	r3, r7, #8
 80159b8:	330c      	adds	r3, #12
 80159ba:	4618      	mov	r0, r3
 80159bc:	f7ff fb85 	bl	80150ca <sensirion_bytes_to_float>
 80159c0:	eef0 7a40 	vmov.f32	s15, s0
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 80159ca:	f107 0308 	add.w	r3, r7, #8
 80159ce:	3310      	adds	r3, #16
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7ff fb7a 	bl	80150ca <sensirion_bytes_to_float>
 80159d6:	eef0 7a40 	vmov.f32	s15, s0
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 80159e0:	f107 0308 	add.w	r3, r7, #8
 80159e4:	3314      	adds	r3, #20
 80159e6:	4618      	mov	r0, r3
 80159e8:	f7ff fb6f 	bl	80150ca <sensirion_bytes_to_float>
 80159ec:	eef0 7a40 	vmov.f32	s15, s0
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 80159f6:	f107 0308 	add.w	r3, r7, #8
 80159fa:	3318      	adds	r3, #24
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7ff fb64 	bl	80150ca <sensirion_bytes_to_float>
 8015a02:	eef0 7a40 	vmov.f32	s15, s0
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8015a0c:	f107 0308 	add.w	r3, r7, #8
 8015a10:	331c      	adds	r3, #28
 8015a12:	4618      	mov	r0, r3
 8015a14:	f7ff fb59 	bl	80150ca <sensirion_bytes_to_float>
 8015a18:	eef0 7a40 	vmov.f32	s15, s0
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8015a22:	f107 0308 	add.w	r3, r7, #8
 8015a26:	3320      	adds	r3, #32
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7ff fb4e 	bl	80150ca <sensirion_bytes_to_float>
 8015a2e:	eef0 7a40 	vmov.f32	s15, s0
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8015a38:	f107 0308 	add.w	r3, r7, #8
 8015a3c:	3324      	adds	r3, #36	@ 0x24
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7ff fb43 	bl	80150ca <sensirion_bytes_to_float>
 8015a44:	eef0 7a40 	vmov.f32	s15, s0
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    if (header.state) {
 8015a4e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d006      	beq.n	8015a64 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8015a56:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8015a5a:	b21b      	sxth	r3, r3
 8015a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015a60:	b21b      	sxth	r3, r3
 8015a62:	e000      	b.n	8015a66 <sps30_read_measurement+0x136>
    }

    return 0;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3738      	adds	r7, #56	@ 0x38
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}

08015a6e <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 8015a6e:	b580      	push	{r7, lr}
 8015a70:	b086      	sub	sp, #24
 8015a72:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8015a74:	2300      	movs	r3, #0
 8015a76:	9302      	str	r3, [sp, #8]
 8015a78:	1d3b      	adds	r3, r7, #4
 8015a7a:	9301      	str	r3, [sp, #4]
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	9300      	str	r3, [sp, #0]
 8015a80:	2300      	movs	r3, #0
 8015a82:	2200      	movs	r2, #0
 8015a84:	2156      	movs	r1, #86	@ 0x56
 8015a86:	2000      	movs	r0, #0
 8015a88:	f7ff fbc2 	bl	8015210 <sensirion_shdlc_xcv>
 8015a8c:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3708      	adds	r7, #8
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8015a96:	b580      	push	{r7, lr}
 8015a98:	b08a      	sub	sp, #40	@ 0x28
 8015a9a:	af04      	add	r7, sp, #16
 8015a9c:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8015a9e:	f107 0308 	add.w	r3, r7, #8
 8015aa2:	9302      	str	r3, [sp, #8]
 8015aa4:	f107 0310 	add.w	r3, r7, #16
 8015aa8:	9301      	str	r3, [sp, #4]
 8015aaa:	2307      	movs	r3, #7
 8015aac:	9300      	str	r3, [sp, #0]
 8015aae:	2300      	movs	r3, #0
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	21d1      	movs	r1, #209	@ 0xd1
 8015ab4:	2000      	movs	r0, #0
 8015ab6:	f7ff fbab 	bl	8015210 <sensirion_shdlc_xcv>
 8015aba:	4603      	mov	r3, r0
 8015abc:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8015abe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d002      	beq.n	8015acc <sps30_read_version+0x36>
        return error;
 8015ac6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015aca:	e01f      	b.n	8015b0c <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8015acc:	7cfb      	ldrb	r3, [r7, #19]
 8015ace:	2b07      	cmp	r3, #7
 8015ad0:	d002      	beq.n	8015ad8 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8015ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ad6:	e019      	b.n	8015b0c <sps30_read_version+0x76>
    }

    if (header.state) {
 8015ad8:	7cbb      	ldrb	r3, [r7, #18]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d005      	beq.n	8015aea <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8015ade:	7cbb      	ldrb	r3, [r7, #18]
 8015ae0:	b21b      	sxth	r3, r3
 8015ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015ae6:	b21b      	sxth	r3, r3
 8015ae8:	e010      	b.n	8015b0c <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8015aea:	7a3a      	ldrb	r2, [r7, #8]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8015af0:	7a7a      	ldrb	r2, [r7, #9]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8015af6:	7afa      	ldrb	r2, [r7, #11]
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8015afc:	7b7a      	ldrb	r2, [r7, #13]
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8015b02:	7bba      	ldrb	r2, [r7, #14]
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	711a      	strb	r2, [r3, #4]

    return error;
 8015b08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	3718      	adds	r7, #24
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b084      	sub	sp, #16
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
 8015b1c:	460b      	mov	r3, r1
 8015b1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8015b20:	f640 0074 	movw	r0, #2164	@ 0x874
 8015b24:	f007 fe1c 	bl	801d760 <USBD_static_malloc>
 8015b28:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d109      	bne.n	8015b44 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	32b0      	adds	r2, #176	@ 0xb0
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015b40:	2302      	movs	r3, #2
 8015b42:	e06e      	b.n	8015c22 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	32b0      	adds	r2, #176	@ 0xb0
 8015b4e:	68f9      	ldr	r1, [r7, #12]
 8015b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	32b0      	adds	r2, #176	@ 0xb0
 8015b5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	7c1b      	ldrb	r3, [r3, #16]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d12b      	bne.n	8015bc8 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015b70:	4b2e      	ldr	r3, [pc, #184]	@ (8015c2c <USBD_MSC_Init+0x118>)
 8015b72:	7819      	ldrb	r1, [r3, #0]
 8015b74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015b78:	2202      	movs	r2, #2
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f007 fcad 	bl	801d4da <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015b80:	4b2a      	ldr	r3, [pc, #168]	@ (8015c2c <USBD_MSC_Init+0x118>)
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	f003 020f 	and.w	r2, r3, #15
 8015b88:	6879      	ldr	r1, [r7, #4]
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	009b      	lsls	r3, r3, #2
 8015b8e:	4413      	add	r3, r2
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	440b      	add	r3, r1
 8015b94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015b98:	2201      	movs	r2, #1
 8015b9a:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8015b9c:	4b24      	ldr	r3, [pc, #144]	@ (8015c30 <USBD_MSC_Init+0x11c>)
 8015b9e:	7819      	ldrb	r1, [r3, #0]
 8015ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015ba4:	2202      	movs	r2, #2
 8015ba6:	6878      	ldr	r0, [r7, #4]
 8015ba8:	f007 fc97 	bl	801d4da <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015bac:	4b20      	ldr	r3, [pc, #128]	@ (8015c30 <USBD_MSC_Init+0x11c>)
 8015bae:	781b      	ldrb	r3, [r3, #0]
 8015bb0:	f003 020f 	and.w	r2, r3, #15
 8015bb4:	6879      	ldr	r1, [r7, #4]
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	4413      	add	r3, r2
 8015bbc:	009b      	lsls	r3, r3, #2
 8015bbe:	440b      	add	r3, r1
 8015bc0:	3324      	adds	r3, #36	@ 0x24
 8015bc2:	2201      	movs	r2, #1
 8015bc4:	801a      	strh	r2, [r3, #0]
 8015bc6:	e028      	b.n	8015c1a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015bc8:	4b18      	ldr	r3, [pc, #96]	@ (8015c2c <USBD_MSC_Init+0x118>)
 8015bca:	7819      	ldrb	r1, [r3, #0]
 8015bcc:	2340      	movs	r3, #64	@ 0x40
 8015bce:	2202      	movs	r2, #2
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f007 fc82 	bl	801d4da <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8015bd6:	4b15      	ldr	r3, [pc, #84]	@ (8015c2c <USBD_MSC_Init+0x118>)
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	f003 020f 	and.w	r2, r3, #15
 8015bde:	6879      	ldr	r1, [r7, #4]
 8015be0:	4613      	mov	r3, r2
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	4413      	add	r3, r2
 8015be6:	009b      	lsls	r3, r3, #2
 8015be8:	440b      	add	r3, r1
 8015bea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015bee:	2201      	movs	r2, #1
 8015bf0:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8015bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8015c30 <USBD_MSC_Init+0x11c>)
 8015bf4:	7819      	ldrb	r1, [r3, #0]
 8015bf6:	2340      	movs	r3, #64	@ 0x40
 8015bf8:	2202      	movs	r2, #2
 8015bfa:	6878      	ldr	r0, [r7, #4]
 8015bfc:	f007 fc6d 	bl	801d4da <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8015c00:	4b0b      	ldr	r3, [pc, #44]	@ (8015c30 <USBD_MSC_Init+0x11c>)
 8015c02:	781b      	ldrb	r3, [r3, #0]
 8015c04:	f003 020f 	and.w	r2, r3, #15
 8015c08:	6879      	ldr	r1, [r7, #4]
 8015c0a:	4613      	mov	r3, r2
 8015c0c:	009b      	lsls	r3, r3, #2
 8015c0e:	4413      	add	r3, r2
 8015c10:	009b      	lsls	r3, r3, #2
 8015c12:	440b      	add	r3, r1
 8015c14:	3324      	adds	r3, #36	@ 0x24
 8015c16:	2201      	movs	r2, #1
 8015c18:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f000 fa2c 	bl	8016078 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8015c20:	2300      	movs	r3, #0
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	3710      	adds	r7, #16
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}
 8015c2a:	bf00      	nop
 8015c2c:	200000af 	.word	0x200000af
 8015c30:	200000ae 	.word	0x200000ae

08015c34 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b082      	sub	sp, #8
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8015c40:	4b26      	ldr	r3, [pc, #152]	@ (8015cdc <USBD_MSC_DeInit+0xa8>)
 8015c42:	781b      	ldrb	r3, [r3, #0]
 8015c44:	4619      	mov	r1, r3
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f007 fc6d 	bl	801d526 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8015c4c:	4b23      	ldr	r3, [pc, #140]	@ (8015cdc <USBD_MSC_DeInit+0xa8>)
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	f003 020f 	and.w	r2, r3, #15
 8015c54:	6879      	ldr	r1, [r7, #4]
 8015c56:	4613      	mov	r3, r2
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	4413      	add	r3, r2
 8015c5c:	009b      	lsls	r3, r3, #2
 8015c5e:	440b      	add	r3, r1
 8015c60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c64:	2200      	movs	r2, #0
 8015c66:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8015c68:	4b1d      	ldr	r3, [pc, #116]	@ (8015ce0 <USBD_MSC_DeInit+0xac>)
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f007 fc59 	bl	801d526 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8015c74:	4b1a      	ldr	r3, [pc, #104]	@ (8015ce0 <USBD_MSC_DeInit+0xac>)
 8015c76:	781b      	ldrb	r3, [r3, #0]
 8015c78:	f003 020f 	and.w	r2, r3, #15
 8015c7c:	6879      	ldr	r1, [r7, #4]
 8015c7e:	4613      	mov	r3, r2
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	4413      	add	r3, r2
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	440b      	add	r3, r1
 8015c88:	3324      	adds	r3, #36	@ 0x24
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	32b0      	adds	r2, #176	@ 0xb0
 8015c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d018      	beq.n	8015cd2 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f000 fa67 	bl	8016174 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	32b0      	adds	r2, #176	@ 0xb0
 8015cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f007 fd61 	bl	801d77c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	32b0      	adds	r2, #176	@ 0xb0
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2200      	movs	r2, #0
 8015cce:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015cd2:	2300      	movs	r3, #0
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3708      	adds	r7, #8
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	200000af 	.word	0x200000af
 8015ce0:	200000ae 	.word	0x200000ae

08015ce4 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b086      	sub	sp, #24
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	32b0      	adds	r2, #176	@ 0xb0
 8015cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cfc:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8015d02:	2300      	movs	r3, #0
 8015d04:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8015d06:	693b      	ldr	r3, [r7, #16]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d101      	bne.n	8015d10 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8015d0c:	2303      	movs	r3, #3
 8015d0e:	e0e1      	b.n	8015ed4 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d053      	beq.n	8015dc4 <USBD_MSC_Setup+0xe0>
 8015d1c:	2b20      	cmp	r3, #32
 8015d1e:	f040 80d1 	bne.w	8015ec4 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	785b      	ldrb	r3, [r3, #1]
 8015d26:	2bfe      	cmp	r3, #254	@ 0xfe
 8015d28:	d002      	beq.n	8015d30 <USBD_MSC_Setup+0x4c>
 8015d2a:	2bff      	cmp	r3, #255	@ 0xff
 8015d2c:	d02a      	beq.n	8015d84 <USBD_MSC_Setup+0xa0>
 8015d2e:	e041      	b.n	8015db4 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	885b      	ldrh	r3, [r3, #2]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d11e      	bne.n	8015d76 <USBD_MSC_Setup+0x92>
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	88db      	ldrh	r3, [r3, #6]
 8015d3c:	2b01      	cmp	r3, #1
 8015d3e:	d11a      	bne.n	8015d76 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	da15      	bge.n	8015d76 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	33b0      	adds	r3, #176	@ 0xb0
 8015d54:	009b      	lsls	r3, r3, #2
 8015d56:	4413      	add	r3, r2
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	699b      	ldr	r3, [r3, #24]
 8015d5c:	4798      	blx	r3
 8015d5e:	4603      	mov	r3, r0
 8015d60:	461a      	mov	r2, r3
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	2201      	movs	r2, #1
 8015d6a:	4619      	mov	r1, r3
 8015d6c:	6878      	ldr	r0, [r7, #4]
 8015d6e:	f003 f979 	bl	8019064 <USBD_CtlSendData>
 8015d72:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015d74:	e025      	b.n	8015dc2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015d76:	6839      	ldr	r1, [r7, #0]
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f003 f902 	bl	8018f82 <USBD_CtlError>
            ret = USBD_FAIL;
 8015d7e:	2303      	movs	r3, #3
 8015d80:	75fb      	strb	r3, [r7, #23]
          break;
 8015d82:	e01e      	b.n	8015dc2 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	885b      	ldrh	r3, [r3, #2]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d10c      	bne.n	8015da6 <USBD_MSC_Setup+0xc2>
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	88db      	ldrh	r3, [r3, #6]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d108      	bne.n	8015da6 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	db03      	blt.n	8015da6 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f000 f9b4 	bl	801610c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015da4:	e00d      	b.n	8015dc2 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8015da6:	6839      	ldr	r1, [r7, #0]
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f003 f8ea 	bl	8018f82 <USBD_CtlError>
            ret = USBD_FAIL;
 8015dae:	2303      	movs	r3, #3
 8015db0:	75fb      	strb	r3, [r7, #23]
          break;
 8015db2:	e006      	b.n	8015dc2 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8015db4:	6839      	ldr	r1, [r7, #0]
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f003 f8e3 	bl	8018f82 <USBD_CtlError>
          ret = USBD_FAIL;
 8015dbc:	2303      	movs	r3, #3
 8015dbe:	75fb      	strb	r3, [r7, #23]
          break;
 8015dc0:	bf00      	nop
      }
      break;
 8015dc2:	e086      	b.n	8015ed2 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	785b      	ldrb	r3, [r3, #1]
 8015dc8:	2b0b      	cmp	r3, #11
 8015dca:	d872      	bhi.n	8015eb2 <USBD_MSC_Setup+0x1ce>
 8015dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8015dd4 <USBD_MSC_Setup+0xf0>)
 8015dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dd2:	bf00      	nop
 8015dd4:	08015e05 	.word	0x08015e05
 8015dd8:	08015e81 	.word	0x08015e81
 8015ddc:	08015eb3 	.word	0x08015eb3
 8015de0:	08015eb3 	.word	0x08015eb3
 8015de4:	08015eb3 	.word	0x08015eb3
 8015de8:	08015eb3 	.word	0x08015eb3
 8015dec:	08015eb3 	.word	0x08015eb3
 8015df0:	08015eb3 	.word	0x08015eb3
 8015df4:	08015eb3 	.word	0x08015eb3
 8015df8:	08015eb3 	.word	0x08015eb3
 8015dfc:	08015e2f 	.word	0x08015e2f
 8015e00:	08015e59 	.word	0x08015e59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	2b03      	cmp	r3, #3
 8015e0e:	d107      	bne.n	8015e20 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015e10:	f107 030e 	add.w	r3, r7, #14
 8015e14:	2202      	movs	r2, #2
 8015e16:	4619      	mov	r1, r3
 8015e18:	6878      	ldr	r0, [r7, #4]
 8015e1a:	f003 f923 	bl	8019064 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e1e:	e050      	b.n	8015ec2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e20:	6839      	ldr	r1, [r7, #0]
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f003 f8ad 	bl	8018f82 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e28:	2303      	movs	r3, #3
 8015e2a:	75fb      	strb	r3, [r7, #23]
          break;
 8015e2c:	e049      	b.n	8015ec2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	2b03      	cmp	r3, #3
 8015e38:	d107      	bne.n	8015e4a <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	3304      	adds	r3, #4
 8015e3e:	2201      	movs	r2, #1
 8015e40:	4619      	mov	r1, r3
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f003 f90e 	bl	8019064 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e48:	e03b      	b.n	8015ec2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e4a:	6839      	ldr	r1, [r7, #0]
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	f003 f898 	bl	8018f82 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e52:	2303      	movs	r3, #3
 8015e54:	75fb      	strb	r3, [r7, #23]
          break;
 8015e56:	e034      	b.n	8015ec2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	2b03      	cmp	r3, #3
 8015e62:	d106      	bne.n	8015e72 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	885b      	ldrh	r3, [r3, #2]
 8015e68:	b2db      	uxtb	r3, r3
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	693b      	ldr	r3, [r7, #16]
 8015e6e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015e70:	e027      	b.n	8015ec2 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8015e72:	6839      	ldr	r1, [r7, #0]
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f003 f884 	bl	8018f82 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e7a:	2303      	movs	r3, #3
 8015e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8015e7e:	e020      	b.n	8015ec2 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015e86:	b2db      	uxtb	r3, r3
 8015e88:	2b03      	cmp	r3, #3
 8015e8a:	d119      	bne.n	8015ec0 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8015e8c:	683b      	ldr	r3, [r7, #0]
 8015e8e:	885b      	ldrh	r3, [r3, #2]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d115      	bne.n	8015ec0 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	889b      	ldrh	r3, [r3, #4]
 8015e98:	b2db      	uxtb	r3, r3
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f007 fb61 	bl	801d564 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	889b      	ldrh	r3, [r3, #4]
 8015ea6:	b2db      	uxtb	r3, r3
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 fb2e 	bl	801650c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8015eb0:	e006      	b.n	8015ec0 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f003 f864 	bl	8018f82 <USBD_CtlError>
          ret = USBD_FAIL;
 8015eba:	2303      	movs	r3, #3
 8015ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8015ebe:	e000      	b.n	8015ec2 <USBD_MSC_Setup+0x1de>
          break;
 8015ec0:	bf00      	nop
      }
      break;
 8015ec2:	e006      	b.n	8015ed2 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8015ec4:	6839      	ldr	r1, [r7, #0]
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f003 f85b 	bl	8018f82 <USBD_CtlError>
      ret = USBD_FAIL;
 8015ecc:	2303      	movs	r3, #3
 8015ece:	75fb      	strb	r3, [r7, #23]
      break;
 8015ed0:	bf00      	nop
  }

  return (uint8_t)ret;
 8015ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3718      	adds	r7, #24
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	460b      	mov	r3, r1
 8015ee6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8015ee8:	78fb      	ldrb	r3, [r7, #3]
 8015eea:	4619      	mov	r1, r3
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f000 f959 	bl	80161a4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8015ef2:	2300      	movs	r3, #0
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3708      	adds	r7, #8
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}

08015efc <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b082      	sub	sp, #8
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	460b      	mov	r3, r1
 8015f06:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8015f08:	78fb      	ldrb	r3, [r7, #3]
 8015f0a:	4619      	mov	r1, r3
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	f000 f983 	bl	8016218 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8015f12:	2300      	movs	r3, #0
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3708      	adds	r7, #8
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f24:	2181      	movs	r1, #129	@ 0x81
 8015f26:	4812      	ldr	r0, [pc, #72]	@ (8015f70 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f28:	f002 f9f5 	bl	8018316 <USBD_GetEpDesc>
 8015f2c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f2e:	2101      	movs	r1, #1
 8015f30:	480f      	ldr	r0, [pc, #60]	@ (8015f70 <USBD_MSC_GetHSCfgDesc+0x54>)
 8015f32:	f002 f9f0 	bl	8018316 <USBD_GetEpDesc>
 8015f36:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d006      	beq.n	8015f4c <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	2200      	movs	r2, #0
 8015f42:	711a      	strb	r2, [r3, #4]
 8015f44:	2200      	movs	r2, #0
 8015f46:	f042 0202 	orr.w	r2, r2, #2
 8015f4a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015f4c:	68bb      	ldr	r3, [r7, #8]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d006      	beq.n	8015f60 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8015f52:	68bb      	ldr	r3, [r7, #8]
 8015f54:	2200      	movs	r2, #0
 8015f56:	711a      	strb	r2, [r3, #4]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	f042 0202 	orr.w	r2, r2, #2
 8015f5e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2220      	movs	r2, #32
 8015f64:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015f66:	4b02      	ldr	r3, [pc, #8]	@ (8015f70 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	3710      	adds	r7, #16
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	bd80      	pop	{r7, pc}
 8015f70:	20000084 	.word	0x20000084

08015f74 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b084      	sub	sp, #16
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015f7c:	2181      	movs	r1, #129	@ 0x81
 8015f7e:	4812      	ldr	r0, [pc, #72]	@ (8015fc8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015f80:	f002 f9c9 	bl	8018316 <USBD_GetEpDesc>
 8015f84:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015f86:	2101      	movs	r1, #1
 8015f88:	480f      	ldr	r0, [pc, #60]	@ (8015fc8 <USBD_MSC_GetFSCfgDesc+0x54>)
 8015f8a:	f002 f9c4 	bl	8018316 <USBD_GetEpDesc>
 8015f8e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d006      	beq.n	8015fa4 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	2200      	movs	r2, #0
 8015f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015f9e:	711a      	strb	r2, [r3, #4]
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d006      	beq.n	8015fb8 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015faa:	68bb      	ldr	r3, [r7, #8]
 8015fac:	2200      	movs	r2, #0
 8015fae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015fb2:	711a      	strb	r2, [r3, #4]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2220      	movs	r2, #32
 8015fbc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8015fbe:	4b02      	ldr	r3, [pc, #8]	@ (8015fc8 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3710      	adds	r7, #16
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}
 8015fc8:	20000084 	.word	0x20000084

08015fcc <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b084      	sub	sp, #16
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8015fd4:	2181      	movs	r1, #129	@ 0x81
 8015fd6:	4812      	ldr	r0, [pc, #72]	@ (8016020 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8015fd8:	f002 f99d 	bl	8018316 <USBD_GetEpDesc>
 8015fdc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8015fde:	2101      	movs	r1, #1
 8015fe0:	480f      	ldr	r0, [pc, #60]	@ (8016020 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8015fe2:	f002 f998 	bl	8018316 <USBD_GetEpDesc>
 8015fe6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d006      	beq.n	8015ffc <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ff6:	711a      	strb	r2, [r3, #4]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8015ffc:	68bb      	ldr	r3, [r7, #8]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d006      	beq.n	8016010 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	2200      	movs	r2, #0
 8016006:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801600a:	711a      	strb	r2, [r3, #4]
 801600c:	2200      	movs	r2, #0
 801600e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2220      	movs	r2, #32
 8016014:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8016016:	4b02      	ldr	r3, [pc, #8]	@ (8016020 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8016018:	4618      	mov	r0, r3
 801601a:	3710      	adds	r7, #16
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}
 8016020:	20000084 	.word	0x20000084

08016024 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016024:	b480      	push	{r7}
 8016026:	b083      	sub	sp, #12
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	220a      	movs	r2, #10
 8016030:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8016032:	4b03      	ldr	r3, [pc, #12]	@ (8016040 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016034:	4618      	mov	r0, r3
 8016036:	370c      	adds	r7, #12
 8016038:	46bd      	mov	sp, r7
 801603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603e:	4770      	bx	lr
 8016040:	200000a4 	.word	0x200000a4

08016044 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8016044:	b480      	push	{r7}
 8016046:	b083      	sub	sp, #12
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801604e:	683b      	ldr	r3, [r7, #0]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d101      	bne.n	8016058 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016054:	2303      	movs	r3, #3
 8016056:	e009      	b.n	801606c <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	33b0      	adds	r3, #176	@ 0xb0
 8016062:	009b      	lsls	r3, r3, #2
 8016064:	4413      	add	r3, r2
 8016066:	683a      	ldr	r2, [r7, #0]
 8016068:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801606a:	2300      	movs	r3, #0
}
 801606c:	4618      	mov	r0, r3
 801606e:	370c      	adds	r7, #12
 8016070:	46bd      	mov	sp, r7
 8016072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016076:	4770      	bx	lr

08016078 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	32b0      	adds	r2, #176	@ 0xb0
 801608a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801608e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d032      	beq.n	80160fc <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	2200      	movs	r2, #0
 801609a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	2200      	movs	r2, #0
 80160a0:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	2200      	movs	r2, #0
 80160a6:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
  hmsc->scsi_sense_head = 0U;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2200      	movs	r2, #0
 80160ae:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	2200      	movs	r2, #0
 80160b6:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	33b0      	adds	r3, #176	@ 0xb0
 80160c4:	009b      	lsls	r3, r3, #2
 80160c6:	4413      	add	r3, r2
 80160c8:	685b      	ldr	r3, [r3, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	2000      	movs	r0, #0
 80160ce:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80160d0:	4b0c      	ldr	r3, [pc, #48]	@ (8016104 <MSC_BOT_Init+0x8c>)
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	4619      	mov	r1, r3
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f007 fa44 	bl	801d564 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80160dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016108 <MSC_BOT_Init+0x90>)
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	4619      	mov	r1, r3
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f007 fa3e 	bl	801d564 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80160e8:	4b06      	ldr	r3, [pc, #24]	@ (8016104 <MSC_BOT_Init+0x8c>)
 80160ea:	7819      	ldrb	r1, [r3, #0]
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 80160f2:	231f      	movs	r3, #31
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f007 fafe 	bl	801d6f6 <USBD_LL_PrepareReceive>
 80160fa:	e000      	b.n	80160fe <MSC_BOT_Init+0x86>
    return;
 80160fc:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80160fe:	3710      	adds	r7, #16
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}
 8016104:	200000af 	.word	0x200000af
 8016108:	200000ae 	.word	0x200000ae

0801610c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	32b0      	adds	r2, #176	@ 0xb0
 801611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016122:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d01b      	beq.n	8016162 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2200      	movs	r2, #0
 801612e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2201      	movs	r2, #1
 8016134:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8016136:	4b0d      	ldr	r3, [pc, #52]	@ (801616c <MSC_BOT_Reset+0x60>)
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	4619      	mov	r1, r3
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f007 fa4f 	bl	801d5e0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8016142:	4b0b      	ldr	r3, [pc, #44]	@ (8016170 <MSC_BOT_Reset+0x64>)
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	4619      	mov	r1, r3
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f007 fa49 	bl	801d5e0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801614e:	4b08      	ldr	r3, [pc, #32]	@ (8016170 <MSC_BOT_Reset+0x64>)
 8016150:	7819      	ldrb	r1, [r3, #0]
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8016158:	231f      	movs	r3, #31
 801615a:	6878      	ldr	r0, [r7, #4]
 801615c:	f007 facb 	bl	801d6f6 <USBD_LL_PrepareReceive>
 8016160:	e000      	b.n	8016164 <MSC_BOT_Reset+0x58>
    return;
 8016162:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8016164:	3710      	adds	r7, #16
 8016166:	46bd      	mov	sp, r7
 8016168:	bd80      	pop	{r7, pc}
 801616a:	bf00      	nop
 801616c:	200000ae 	.word	0x200000ae
 8016170:	200000af 	.word	0x200000af

08016174 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8016174:	b480      	push	{r7}
 8016176:	b085      	sub	sp, #20
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	32b0      	adds	r2, #176	@ 0xb0
 8016186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801618a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d002      	beq.n	8016198 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2200      	movs	r2, #0
 8016196:	721a      	strb	r2, [r3, #8]
  }
}
 8016198:	bf00      	nop
 801619a:	3714      	adds	r7, #20
 801619c:	46bd      	mov	sp, r7
 801619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a2:	4770      	bx	lr

080161a4 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b084      	sub	sp, #16
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	460b      	mov	r3, r1
 80161ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	32b0      	adds	r2, #176	@ 0xb0
 80161ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161be:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d020      	beq.n	8016208 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	7a1b      	ldrb	r3, [r3, #8]
 80161ca:	2b02      	cmp	r3, #2
 80161cc:	d005      	beq.n	80161da <MSC_BOT_DataIn+0x36>
 80161ce:	2b02      	cmp	r3, #2
 80161d0:	db1c      	blt.n	801620c <MSC_BOT_DataIn+0x68>
 80161d2:	3b03      	subs	r3, #3
 80161d4:	2b01      	cmp	r3, #1
 80161d6:	d819      	bhi.n	801620c <MSC_BOT_DataIn+0x68>
 80161d8:	e011      	b.n	80161fe <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 80161e6:	461a      	mov	r2, r3
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f000 f9c9 	bl	8016580 <SCSI_ProcessCmd>
 80161ee:	4603      	mov	r3, r0
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	da0d      	bge.n	8016210 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80161f4:	2101      	movs	r1, #1
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f000 f90c 	bl	8016414 <MSC_BOT_SendCSW>
      }
      break;
 80161fc:	e008      	b.n	8016210 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80161fe:	2100      	movs	r1, #0
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f000 f907 	bl	8016414 <MSC_BOT_SendCSW>
      break;
 8016206:	e004      	b.n	8016212 <MSC_BOT_DataIn+0x6e>
    return;
 8016208:	bf00      	nop
 801620a:	e002      	b.n	8016212 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 801620c:	bf00      	nop
 801620e:	e000      	b.n	8016212 <MSC_BOT_DataIn+0x6e>
      break;
 8016210:	bf00      	nop
  }
}
 8016212:	3710      	adds	r7, #16
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}

08016218 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b084      	sub	sp, #16
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	460b      	mov	r3, r1
 8016222:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	32b0      	adds	r2, #176	@ 0xb0
 801622e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016232:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d01c      	beq.n	8016274 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	7a1b      	ldrb	r3, [r3, #8]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d002      	beq.n	8016248 <MSC_BOT_DataOut+0x30>
 8016242:	2b01      	cmp	r3, #1
 8016244:	d004      	beq.n	8016250 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8016246:	e018      	b.n	801627a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f000 f819 	bl	8016280 <MSC_BOT_CBW_Decode>
      break;
 801624e:	e014      	b.n	801627a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 801625c:	461a      	mov	r2, r3
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 f98e 	bl	8016580 <SCSI_ProcessCmd>
 8016264:	4603      	mov	r3, r0
 8016266:	2b00      	cmp	r3, #0
 8016268:	da06      	bge.n	8016278 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801626a:	2101      	movs	r1, #1
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f000 f8d1 	bl	8016414 <MSC_BOT_SendCSW>
      break;
 8016272:	e001      	b.n	8016278 <MSC_BOT_DataOut+0x60>
    return;
 8016274:	bf00      	nop
 8016276:	e000      	b.n	801627a <MSC_BOT_DataOut+0x62>
      break;
 8016278:	bf00      	nop
  }
}
 801627a:	3710      	adds	r7, #16
 801627c:	46bd      	mov	sp, r7
 801627e:	bd80      	pop	{r7, pc}

08016280 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b084      	sub	sp, #16
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	32b0      	adds	r2, #176	@ 0xb0
 8016292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016296:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d079      	beq.n	8016392 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80162b6:	4b3a      	ldr	r3, [pc, #232]	@ (80163a0 <MSC_BOT_CBW_Decode+0x120>)
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	4619      	mov	r1, r3
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f007 fa3b 	bl	801d738 <USBD_LL_GetRxDataSize>
 80162c2:	4603      	mov	r3, r0
 80162c4:	2b1f      	cmp	r3, #31
 80162c6:	d114      	bne.n	80162f2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80162ce:	4a35      	ldr	r2, [pc, #212]	@ (80163a4 <MSC_BOT_CBW_Decode+0x124>)
 80162d0:	4293      	cmp	r3, r2
 80162d2:	d10e      	bne.n	80162f2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	f893 381d 	ldrb.w	r3, [r3, #2077]	@ 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80162da:	2b01      	cmp	r3, #1
 80162dc:	d809      	bhi.n	80162f2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d004      	beq.n	80162f2 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	f893 381e 	ldrb.w	r3, [r3, #2078]	@ 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80162ee:	2b10      	cmp	r3, #16
 80162f0:	d90e      	bls.n	8016310 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80162f8:	2320      	movs	r3, #32
 80162fa:	2205      	movs	r2, #5
 80162fc:	6878      	ldr	r0, [r7, #4]
 80162fe:	f000 fe57 	bl	8016fb0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	2202      	movs	r2, #2
 8016306:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f000 f8bd 	bl	8016488 <MSC_BOT_Abort>
 801630e:	e043      	b.n	8016398 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	f603 031f 	addw	r3, r3, #2079	@ 0x81f
 801631c:	461a      	mov	r2, r3
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f000 f92e 	bl	8016580 <SCSI_ProcessCmd>
 8016324:	4603      	mov	r3, r0
 8016326:	2b00      	cmp	r3, #0
 8016328:	da0c      	bge.n	8016344 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	7a1b      	ldrb	r3, [r3, #8]
 801632e:	2b05      	cmp	r3, #5
 8016330:	d104      	bne.n	801633c <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016332:	2101      	movs	r1, #1
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f000 f86d 	bl	8016414 <MSC_BOT_SendCSW>
 801633a:	e02d      	b.n	8016398 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f000 f8a3 	bl	8016488 <MSC_BOT_Abort>
 8016342:	e029      	b.n	8016398 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	7a1b      	ldrb	r3, [r3, #8]
 8016348:	2b02      	cmp	r3, #2
 801634a:	d024      	beq.n	8016396 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8016350:	2b01      	cmp	r3, #1
 8016352:	d020      	beq.n	8016396 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8016358:	2b03      	cmp	r3, #3
 801635a:	d01c      	beq.n	8016396 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	68db      	ldr	r3, [r3, #12]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d009      	beq.n	8016378 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	f103 0110 	add.w	r1, r3, #16
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	461a      	mov	r2, r3
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f000 f819 	bl	80163a8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8016376:	e00f      	b.n	8016398 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	68db      	ldr	r3, [r3, #12]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d104      	bne.n	801638a <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8016380:	2100      	movs	r1, #0
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f000 f846 	bl	8016414 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8016388:	e006      	b.n	8016398 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f000 f87c 	bl	8016488 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8016390:	e002      	b.n	8016398 <MSC_BOT_CBW_Decode+0x118>
    return;
 8016392:	bf00      	nop
 8016394:	e000      	b.n	8016398 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8016396:	bf00      	nop
    }
  }
}
 8016398:	3710      	adds	r7, #16
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}
 801639e:	bf00      	nop
 80163a0:	200000af 	.word	0x200000af
 80163a4:	43425355 	.word	0x43425355

080163a8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b086      	sub	sp, #24
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	60f8      	str	r0, [r7, #12]
 80163b0:	60b9      	str	r1, [r7, #8]
 80163b2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	32b0      	adds	r2, #176	@ 0xb0
 80163be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163c2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d01e      	beq.n	8016408 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80163d0:	687a      	ldr	r2, [r7, #4]
 80163d2:	4293      	cmp	r3, r2
 80163d4:	bf28      	it	cs
 80163d6:	4613      	movcs	r3, r2
 80163d8:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	1ad2      	subs	r2, r2, r3
 80163e4:	697b      	ldr	r3, [r7, #20]
 80163e6:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	2200      	movs	r2, #0
 80163ee:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	2204      	movs	r2, #4
 80163f6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80163f8:	4b05      	ldr	r3, [pc, #20]	@ (8016410 <MSC_BOT_SendData+0x68>)
 80163fa:	7819      	ldrb	r1, [r3, #0]
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	68ba      	ldr	r2, [r7, #8]
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f007 f957 	bl	801d6b4 <USBD_LL_Transmit>
 8016406:	e000      	b.n	801640a <MSC_BOT_SendData+0x62>
    return;
 8016408:	bf00      	nop
}
 801640a:	3718      	adds	r7, #24
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}
 8016410:	200000ae 	.word	0x200000ae

08016414 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b084      	sub	sp, #16
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	460b      	mov	r3, r1
 801641e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	32b0      	adds	r2, #176	@ 0xb0
 801642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801642e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d01d      	beq.n	8016472 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	4a10      	ldr	r2, [pc, #64]	@ (801647c <MSC_BOT_SendCSW+0x68>)
 801643a:	f8c3 2830 	str.w	r2, [r3, #2096]	@ 0x830
  hmsc->csw.bStatus = CSW_Status;
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	78fa      	ldrb	r2, [r7, #3]
 8016442:	f883 283c 	strb.w	r2, [r3, #2108]	@ 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2200      	movs	r2, #0
 801644a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 801644c:	4b0c      	ldr	r3, [pc, #48]	@ (8016480 <MSC_BOT_SendCSW+0x6c>)
 801644e:	7819      	ldrb	r1, [r3, #0]
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	f503 6203 	add.w	r2, r3, #2096	@ 0x830
 8016456:	230d      	movs	r3, #13
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f007 f92b 	bl	801d6b4 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801645e:	4b09      	ldr	r3, [pc, #36]	@ (8016484 <MSC_BOT_SendCSW+0x70>)
 8016460:	7819      	ldrb	r1, [r3, #0]
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	f503 6201 	add.w	r2, r3, #2064	@ 0x810
 8016468:	231f      	movs	r3, #31
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f007 f943 	bl	801d6f6 <USBD_LL_PrepareReceive>
 8016470:	e000      	b.n	8016474 <MSC_BOT_SendCSW+0x60>
    return;
 8016472:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8016474:	3710      	adds	r7, #16
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop
 801647c:	53425355 	.word	0x53425355
 8016480:	200000ae 	.word	0x200000ae
 8016484:	200000af 	.word	0x200000af

08016488 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b084      	sub	sp, #16
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	32b0      	adds	r2, #176	@ 0xb0
 801649a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801649e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d02a      	beq.n	80164fc <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d10e      	bne.n	80164ce <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d009      	beq.n	80164ce <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d105      	bne.n	80164ce <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80164c2:	4b10      	ldr	r3, [pc, #64]	@ (8016504 <MSC_BOT_Abort+0x7c>)
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	4619      	mov	r1, r3
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	f007 f86a 	bl	801d5a2 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80164ce:	4b0e      	ldr	r3, [pc, #56]	@ (8016508 <MSC_BOT_Abort+0x80>)
 80164d0:	781b      	ldrb	r3, [r3, #0]
 80164d2:	4619      	mov	r1, r3
 80164d4:	6878      	ldr	r0, [r7, #4]
 80164d6:	f007 f864 	bl	801d5a2 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	7a5b      	ldrb	r3, [r3, #9]
 80164de:	2b02      	cmp	r3, #2
 80164e0:	d10d      	bne.n	80164fe <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80164e2:	4b09      	ldr	r3, [pc, #36]	@ (8016508 <MSC_BOT_Abort+0x80>)
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	4619      	mov	r1, r3
 80164e8:	6878      	ldr	r0, [r7, #4]
 80164ea:	f007 f85a 	bl	801d5a2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80164ee:	4b05      	ldr	r3, [pc, #20]	@ (8016504 <MSC_BOT_Abort+0x7c>)
 80164f0:	781b      	ldrb	r3, [r3, #0]
 80164f2:	4619      	mov	r1, r3
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f007 f854 	bl	801d5a2 <USBD_LL_StallEP>
 80164fa:	e000      	b.n	80164fe <MSC_BOT_Abort+0x76>
    return;
 80164fc:	bf00      	nop
  }
}
 80164fe:	3710      	adds	r7, #16
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}
 8016504:	200000af 	.word	0x200000af
 8016508:	200000ae 	.word	0x200000ae

0801650c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	460b      	mov	r3, r1
 8016516:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	32b0      	adds	r2, #176	@ 0xb0
 8016522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016526:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d01d      	beq.n	801656a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	7a5b      	ldrb	r3, [r3, #9]
 8016532:	2b02      	cmp	r3, #2
 8016534:	d10c      	bne.n	8016550 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8016536:	4b10      	ldr	r3, [pc, #64]	@ (8016578 <MSC_BOT_CplClrFeature+0x6c>)
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	4619      	mov	r1, r3
 801653c:	6878      	ldr	r0, [r7, #4]
 801653e:	f007 f830 	bl	801d5a2 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8016542:	4b0e      	ldr	r3, [pc, #56]	@ (801657c <MSC_BOT_CplClrFeature+0x70>)
 8016544:	781b      	ldrb	r3, [r3, #0]
 8016546:	4619      	mov	r1, r3
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f007 f82a 	bl	801d5a2 <USBD_LL_StallEP>
 801654e:	e00f      	b.n	8016570 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8016550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016554:	2b00      	cmp	r3, #0
 8016556:	da0a      	bge.n	801656e <MSC_BOT_CplClrFeature+0x62>
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	7a5b      	ldrb	r3, [r3, #9]
 801655c:	2b01      	cmp	r3, #1
 801655e:	d006      	beq.n	801656e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8016560:	2101      	movs	r1, #1
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f7ff ff56 	bl	8016414 <MSC_BOT_SendCSW>
 8016568:	e002      	b.n	8016570 <MSC_BOT_CplClrFeature+0x64>
    return;
 801656a:	bf00      	nop
 801656c:	e000      	b.n	8016570 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 801656e:	bf00      	nop
  }
}
 8016570:	3710      	adds	r7, #16
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}
 8016576:	bf00      	nop
 8016578:	200000ae 	.word	0x200000ae
 801657c:	200000af 	.word	0x200000af

08016580 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b086      	sub	sp, #24
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	460b      	mov	r3, r1
 801658a:	607a      	str	r2, [r7, #4]
 801658c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	32b0      	adds	r2, #176	@ 0xb0
 8016598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801659c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801659e:	693b      	ldr	r3, [r7, #16]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d102      	bne.n	80165aa <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80165a4:	f04f 33ff 	mov.w	r3, #4294967295
 80165a8:	e168      	b.n	801687c <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	2baa      	cmp	r3, #170	@ 0xaa
 80165b0:	f000 8144 	beq.w	801683c <SCSI_ProcessCmd+0x2bc>
 80165b4:	2baa      	cmp	r3, #170	@ 0xaa
 80165b6:	f300 8153 	bgt.w	8016860 <SCSI_ProcessCmd+0x2e0>
 80165ba:	2ba8      	cmp	r3, #168	@ 0xa8
 80165bc:	f000 812c 	beq.w	8016818 <SCSI_ProcessCmd+0x298>
 80165c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80165c2:	f300 814d 	bgt.w	8016860 <SCSI_ProcessCmd+0x2e0>
 80165c6:	2b5a      	cmp	r3, #90	@ 0x5a
 80165c8:	f300 80c0 	bgt.w	801674c <SCSI_ProcessCmd+0x1cc>
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	f2c0 8147 	blt.w	8016860 <SCSI_ProcessCmd+0x2e0>
 80165d2:	2b5a      	cmp	r3, #90	@ 0x5a
 80165d4:	f200 8144 	bhi.w	8016860 <SCSI_ProcessCmd+0x2e0>
 80165d8:	a201      	add	r2, pc, #4	@ (adr r2, 80165e0 <SCSI_ProcessCmd+0x60>)
 80165da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165de:	bf00      	nop
 80165e0:	08016753 	.word	0x08016753
 80165e4:	08016861 	.word	0x08016861
 80165e8:	08016861 	.word	0x08016861
 80165ec:	08016765 	.word	0x08016765
 80165f0:	08016861 	.word	0x08016861
 80165f4:	08016861 	.word	0x08016861
 80165f8:	08016861 	.word	0x08016861
 80165fc:	08016861 	.word	0x08016861
 8016600:	08016861 	.word	0x08016861
 8016604:	08016861 	.word	0x08016861
 8016608:	08016861 	.word	0x08016861
 801660c:	08016861 	.word	0x08016861
 8016610:	08016861 	.word	0x08016861
 8016614:	08016861 	.word	0x08016861
 8016618:	08016861 	.word	0x08016861
 801661c:	08016861 	.word	0x08016861
 8016620:	08016861 	.word	0x08016861
 8016624:	08016861 	.word	0x08016861
 8016628:	08016777 	.word	0x08016777
 801662c:	08016861 	.word	0x08016861
 8016630:	08016861 	.word	0x08016861
 8016634:	08016861 	.word	0x08016861
 8016638:	08016861 	.word	0x08016861
 801663c:	08016861 	.word	0x08016861
 8016640:	08016861 	.word	0x08016861
 8016644:	08016861 	.word	0x08016861
 8016648:	080167ad 	.word	0x080167ad
 801664c:	08016789 	.word	0x08016789
 8016650:	08016861 	.word	0x08016861
 8016654:	08016861 	.word	0x08016861
 8016658:	0801679b 	.word	0x0801679b
 801665c:	08016861 	.word	0x08016861
 8016660:	08016861 	.word	0x08016861
 8016664:	08016861 	.word	0x08016861
 8016668:	08016861 	.word	0x08016861
 801666c:	080167d1 	.word	0x080167d1
 8016670:	08016861 	.word	0x08016861
 8016674:	080167e3 	.word	0x080167e3
 8016678:	08016861 	.word	0x08016861
 801667c:	08016861 	.word	0x08016861
 8016680:	08016807 	.word	0x08016807
 8016684:	08016861 	.word	0x08016861
 8016688:	0801682b 	.word	0x0801682b
 801668c:	08016861 	.word	0x08016861
 8016690:	08016861 	.word	0x08016861
 8016694:	08016861 	.word	0x08016861
 8016698:	08016861 	.word	0x08016861
 801669c:	0801684f 	.word	0x0801684f
 80166a0:	08016861 	.word	0x08016861
 80166a4:	08016861 	.word	0x08016861
 80166a8:	08016861 	.word	0x08016861
 80166ac:	08016861 	.word	0x08016861
 80166b0:	08016861 	.word	0x08016861
 80166b4:	08016861 	.word	0x08016861
 80166b8:	08016861 	.word	0x08016861
 80166bc:	08016861 	.word	0x08016861
 80166c0:	08016861 	.word	0x08016861
 80166c4:	08016861 	.word	0x08016861
 80166c8:	08016861 	.word	0x08016861
 80166cc:	08016861 	.word	0x08016861
 80166d0:	08016861 	.word	0x08016861
 80166d4:	08016861 	.word	0x08016861
 80166d8:	08016861 	.word	0x08016861
 80166dc:	08016861 	.word	0x08016861
 80166e0:	08016861 	.word	0x08016861
 80166e4:	08016861 	.word	0x08016861
 80166e8:	08016861 	.word	0x08016861
 80166ec:	08016861 	.word	0x08016861
 80166f0:	08016861 	.word	0x08016861
 80166f4:	08016861 	.word	0x08016861
 80166f8:	08016861 	.word	0x08016861
 80166fc:	08016861 	.word	0x08016861
 8016700:	08016861 	.word	0x08016861
 8016704:	08016861 	.word	0x08016861
 8016708:	08016861 	.word	0x08016861
 801670c:	08016861 	.word	0x08016861
 8016710:	08016861 	.word	0x08016861
 8016714:	08016861 	.word	0x08016861
 8016718:	08016861 	.word	0x08016861
 801671c:	08016861 	.word	0x08016861
 8016720:	08016861 	.word	0x08016861
 8016724:	08016861 	.word	0x08016861
 8016728:	08016861 	.word	0x08016861
 801672c:	08016861 	.word	0x08016861
 8016730:	08016861 	.word	0x08016861
 8016734:	08016861 	.word	0x08016861
 8016738:	08016861 	.word	0x08016861
 801673c:	08016861 	.word	0x08016861
 8016740:	08016861 	.word	0x08016861
 8016744:	08016861 	.word	0x08016861
 8016748:	080167bf 	.word	0x080167bf
 801674c:	2b9e      	cmp	r3, #158	@ 0x9e
 801674e:	d051      	beq.n	80167f4 <SCSI_ProcessCmd+0x274>
 8016750:	e086      	b.n	8016860 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8016752:	7afb      	ldrb	r3, [r7, #11]
 8016754:	687a      	ldr	r2, [r7, #4]
 8016756:	4619      	mov	r1, r3
 8016758:	68f8      	ldr	r0, [r7, #12]
 801675a:	f000 f893 	bl	8016884 <SCSI_TestUnitReady>
 801675e:	4603      	mov	r3, r0
 8016760:	75fb      	strb	r3, [r7, #23]
      break;
 8016762:	e089      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8016764:	7afb      	ldrb	r3, [r7, #11]
 8016766:	687a      	ldr	r2, [r7, #4]
 8016768:	4619      	mov	r1, r3
 801676a:	68f8      	ldr	r0, [r7, #12]
 801676c:	f000 fb9a 	bl	8016ea4 <SCSI_RequestSense>
 8016770:	4603      	mov	r3, r0
 8016772:	75fb      	strb	r3, [r7, #23]
      break;
 8016774:	e080      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8016776:	7afb      	ldrb	r3, [r7, #11]
 8016778:	687a      	ldr	r2, [r7, #4]
 801677a:	4619      	mov	r1, r3
 801677c:	68f8      	ldr	r0, [r7, #12]
 801677e:	f000 f8db 	bl	8016938 <SCSI_Inquiry>
 8016782:	4603      	mov	r3, r0
 8016784:	75fb      	strb	r3, [r7, #23]
      break;
 8016786:	e077      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8016788:	7afb      	ldrb	r3, [r7, #11]
 801678a:	687a      	ldr	r2, [r7, #4]
 801678c:	4619      	mov	r1, r3
 801678e:	68f8      	ldr	r0, [r7, #12]
 8016790:	f000 fc5c 	bl	801704c <SCSI_StartStopUnit>
 8016794:	4603      	mov	r3, r0
 8016796:	75fb      	strb	r3, [r7, #23]
      break;
 8016798:	e06e      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801679a:	7afb      	ldrb	r3, [r7, #11]
 801679c:	687a      	ldr	r2, [r7, #4]
 801679e:	4619      	mov	r1, r3
 80167a0:	68f8      	ldr	r0, [r7, #12]
 80167a2:	f000 fca8 	bl	80170f6 <SCSI_AllowPreventRemovable>
 80167a6:	4603      	mov	r3, r0
 80167a8:	75fb      	strb	r3, [r7, #23]
      break;
 80167aa:	e065      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80167ac:	7afb      	ldrb	r3, [r7, #11]
 80167ae:	687a      	ldr	r2, [r7, #4]
 80167b0:	4619      	mov	r1, r3
 80167b2:	68f8      	ldr	r0, [r7, #12]
 80167b4:	f000 faea 	bl	8016d8c <SCSI_ModeSense6>
 80167b8:	4603      	mov	r3, r0
 80167ba:	75fb      	strb	r3, [r7, #23]
      break;
 80167bc:	e05c      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80167be:	7afb      	ldrb	r3, [r7, #11]
 80167c0:	687a      	ldr	r2, [r7, #4]
 80167c2:	4619      	mov	r1, r3
 80167c4:	68f8      	ldr	r0, [r7, #12]
 80167c6:	f000 fb27 	bl	8016e18 <SCSI_ModeSense10>
 80167ca:	4603      	mov	r3, r0
 80167cc:	75fb      	strb	r3, [r7, #23]
      break;
 80167ce:	e053      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80167d0:	7afb      	ldrb	r3, [r7, #11]
 80167d2:	687a      	ldr	r2, [r7, #4]
 80167d4:	4619      	mov	r1, r3
 80167d6:	68f8      	ldr	r0, [r7, #12]
 80167d8:	f000 fa5c 	bl	8016c94 <SCSI_ReadFormatCapacity>
 80167dc:	4603      	mov	r3, r0
 80167de:	75fb      	strb	r3, [r7, #23]
      break;
 80167e0:	e04a      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80167e2:	7afb      	ldrb	r3, [r7, #11]
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	4619      	mov	r1, r3
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	f000 f921 	bl	8016a30 <SCSI_ReadCapacity10>
 80167ee:	4603      	mov	r3, r0
 80167f0:	75fb      	strb	r3, [r7, #23]
      break;
 80167f2:	e041      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80167f4:	7afb      	ldrb	r3, [r7, #11]
 80167f6:	687a      	ldr	r2, [r7, #4]
 80167f8:	4619      	mov	r1, r3
 80167fa:	68f8      	ldr	r0, [r7, #12]
 80167fc:	f000 f996 	bl	8016b2c <SCSI_ReadCapacity16>
 8016800:	4603      	mov	r3, r0
 8016802:	75fb      	strb	r3, [r7, #23]
      break;
 8016804:	e038      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8016806:	7afb      	ldrb	r3, [r7, #11]
 8016808:	687a      	ldr	r2, [r7, #4]
 801680a:	4619      	mov	r1, r3
 801680c:	68f8      	ldr	r0, [r7, #12]
 801680e:	f000 fc9f 	bl	8017150 <SCSI_Read10>
 8016812:	4603      	mov	r3, r0
 8016814:	75fb      	strb	r3, [r7, #23]
      break;
 8016816:	e02f      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8016818:	7afb      	ldrb	r3, [r7, #11]
 801681a:	687a      	ldr	r2, [r7, #4]
 801681c:	4619      	mov	r1, r3
 801681e:	68f8      	ldr	r0, [r7, #12]
 8016820:	f000 fd40 	bl	80172a4 <SCSI_Read12>
 8016824:	4603      	mov	r3, r0
 8016826:	75fb      	strb	r3, [r7, #23]
      break;
 8016828:	e026      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801682a:	7afb      	ldrb	r3, [r7, #11]
 801682c:	687a      	ldr	r2, [r7, #4]
 801682e:	4619      	mov	r1, r3
 8016830:	68f8      	ldr	r0, [r7, #12]
 8016832:	f000 fdeb 	bl	801740c <SCSI_Write10>
 8016836:	4603      	mov	r3, r0
 8016838:	75fb      	strb	r3, [r7, #23]
      break;
 801683a:	e01d      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 801683c:	7afb      	ldrb	r3, [r7, #11]
 801683e:	687a      	ldr	r2, [r7, #4]
 8016840:	4619      	mov	r1, r3
 8016842:	68f8      	ldr	r0, [r7, #12]
 8016844:	f000 feb8 	bl	80175b8 <SCSI_Write12>
 8016848:	4603      	mov	r3, r0
 801684a:	75fb      	strb	r3, [r7, #23]
      break;
 801684c:	e014      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801684e:	7afb      	ldrb	r3, [r7, #11]
 8016850:	687a      	ldr	r2, [r7, #4]
 8016852:	4619      	mov	r1, r3
 8016854:	68f8      	ldr	r0, [r7, #12]
 8016856:	f000 ff95 	bl	8017784 <SCSI_Verify10>
 801685a:	4603      	mov	r3, r0
 801685c:	75fb      	strb	r3, [r7, #23]
      break;
 801685e:	e00b      	b.n	8016878 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8016860:	7af9      	ldrb	r1, [r7, #11]
 8016862:	2320      	movs	r3, #32
 8016864:	2205      	movs	r2, #5
 8016866:	68f8      	ldr	r0, [r7, #12]
 8016868:	f000 fba2 	bl	8016fb0 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	2202      	movs	r2, #2
 8016870:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8016872:	23ff      	movs	r3, #255	@ 0xff
 8016874:	75fb      	strb	r3, [r7, #23]
      break;
 8016876:	bf00      	nop
  }

  return ret;
 8016878:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801687c:	4618      	mov	r0, r3
 801687e:	3718      	adds	r7, #24
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}

08016884 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b086      	sub	sp, #24
 8016888:	af00      	add	r7, sp, #0
 801688a:	60f8      	str	r0, [r7, #12]
 801688c:	460b      	mov	r3, r1
 801688e:	607a      	str	r2, [r7, #4]
 8016890:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	32b0      	adds	r2, #176	@ 0xb0
 801689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d102      	bne.n	80168ae <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80168a8:	f04f 33ff 	mov.w	r3, #4294967295
 80168ac:	e03f      	b.n	801692e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80168ae:	697b      	ldr	r3, [r7, #20]
 80168b0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d00a      	beq.n	80168ce <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80168be:	2320      	movs	r3, #32
 80168c0:	2205      	movs	r2, #5
 80168c2:	68f8      	ldr	r0, [r7, #12]
 80168c4:	f000 fb74 	bl	8016fb0 <SCSI_SenseCode>

    return -1;
 80168c8:	f04f 33ff 	mov.w	r3, #4294967295
 80168cc:	e02f      	b.n	801692e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80168d4:	2b02      	cmp	r3, #2
 80168d6:	d10b      	bne.n	80168f0 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80168d8:	7af9      	ldrb	r1, [r7, #11]
 80168da:	233a      	movs	r3, #58	@ 0x3a
 80168dc:	2202      	movs	r2, #2
 80168de:	68f8      	ldr	r0, [r7, #12]
 80168e0:	f000 fb66 	bl	8016fb0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	2205      	movs	r2, #5
 80168e8:	721a      	strb	r2, [r3, #8]
    return -1;
 80168ea:	f04f 33ff 	mov.w	r3, #4294967295
 80168ee:	e01e      	b.n	801692e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80168f6:	68fa      	ldr	r2, [r7, #12]
 80168f8:	33b0      	adds	r3, #176	@ 0xb0
 80168fa:	009b      	lsls	r3, r3, #2
 80168fc:	4413      	add	r3, r2
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	689b      	ldr	r3, [r3, #8]
 8016902:	7afa      	ldrb	r2, [r7, #11]
 8016904:	4610      	mov	r0, r2
 8016906:	4798      	blx	r3
 8016908:	4603      	mov	r3, r0
 801690a:	2b00      	cmp	r3, #0
 801690c:	d00b      	beq.n	8016926 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801690e:	7af9      	ldrb	r1, [r7, #11]
 8016910:	233a      	movs	r3, #58	@ 0x3a
 8016912:	2202      	movs	r2, #2
 8016914:	68f8      	ldr	r0, [r7, #12]
 8016916:	f000 fb4b 	bl	8016fb0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801691a:	697b      	ldr	r3, [r7, #20]
 801691c:	2205      	movs	r2, #5
 801691e:	721a      	strb	r2, [r3, #8]

    return -1;
 8016920:	f04f 33ff 	mov.w	r3, #4294967295
 8016924:	e003      	b.n	801692e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8016926:	697b      	ldr	r3, [r7, #20]
 8016928:	2200      	movs	r2, #0
 801692a:	60da      	str	r2, [r3, #12]

  return 0;
 801692c:	2300      	movs	r3, #0
}
 801692e:	4618      	mov	r0, r3
 8016930:	3718      	adds	r7, #24
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}
	...

08016938 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b088      	sub	sp, #32
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	460b      	mov	r3, r1
 8016942:	607a      	str	r2, [r7, #4]
 8016944:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	32b0      	adds	r2, #176	@ 0xb0
 8016950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016954:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016956:	69bb      	ldr	r3, [r7, #24]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d102      	bne.n	8016962 <SCSI_Inquiry+0x2a>
  {
    return -1;
 801695c:	f04f 33ff 	mov.w	r3, #4294967295
 8016960:	e05e      	b.n	8016a20 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016962:	69bb      	ldr	r3, [r7, #24]
 8016964:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016968:	2b00      	cmp	r3, #0
 801696a:	d10a      	bne.n	8016982 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801696c:	69bb      	ldr	r3, [r7, #24]
 801696e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016972:	2320      	movs	r3, #32
 8016974:	2205      	movs	r2, #5
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f000 fb1a 	bl	8016fb0 <SCSI_SenseCode>
    return -1;
 801697c:	f04f 33ff 	mov.w	r3, #4294967295
 8016980:	e04e      	b.n	8016a20 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	3301      	adds	r3, #1
 8016986:	781b      	ldrb	r3, [r3, #0]
 8016988:	f003 0301 	and.w	r3, r3, #1
 801698c:	2b00      	cmp	r3, #0
 801698e:	d020      	beq.n	80169d2 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	3302      	adds	r3, #2
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d105      	bne.n	80169a6 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801699a:	2206      	movs	r2, #6
 801699c:	4922      	ldr	r1, [pc, #136]	@ (8016a28 <SCSI_Inquiry+0xf0>)
 801699e:	69b8      	ldr	r0, [r7, #24]
 80169a0:	f001 f876 	bl	8017a90 <SCSI_UpdateBotData>
 80169a4:	e03b      	b.n	8016a1e <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	3302      	adds	r3, #2
 80169aa:	781b      	ldrb	r3, [r3, #0]
 80169ac:	2b80      	cmp	r3, #128	@ 0x80
 80169ae:	d105      	bne.n	80169bc <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80169b0:	2208      	movs	r2, #8
 80169b2:	491e      	ldr	r1, [pc, #120]	@ (8016a2c <SCSI_Inquiry+0xf4>)
 80169b4:	69b8      	ldr	r0, [r7, #24]
 80169b6:	f001 f86b 	bl	8017a90 <SCSI_UpdateBotData>
 80169ba:	e030      	b.n	8016a1e <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80169bc:	69bb      	ldr	r3, [r7, #24]
 80169be:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80169c2:	2324      	movs	r3, #36	@ 0x24
 80169c4:	2205      	movs	r2, #5
 80169c6:	68f8      	ldr	r0, [r7, #12]
 80169c8:	f000 faf2 	bl	8016fb0 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80169cc:	f04f 33ff 	mov.w	r3, #4294967295
 80169d0:	e026      	b.n	8016a20 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80169d8:	68fa      	ldr	r2, [r7, #12]
 80169da:	33b0      	adds	r3, #176	@ 0xb0
 80169dc:	009b      	lsls	r3, r3, #2
 80169de:	4413      	add	r3, r2
 80169e0:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80169e2:	69d9      	ldr	r1, [r3, #28]
 80169e4:	7afa      	ldrb	r2, [r7, #11]
 80169e6:	4613      	mov	r3, r2
 80169e8:	00db      	lsls	r3, r3, #3
 80169ea:	4413      	add	r3, r2
 80169ec:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80169ee:	440b      	add	r3, r1
 80169f0:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80169f2:	697b      	ldr	r3, [r7, #20]
 80169f4:	3304      	adds	r3, #4
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	3305      	adds	r3, #5
 80169fa:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	3304      	adds	r3, #4
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	461a      	mov	r2, r3
 8016a04:	8bfb      	ldrh	r3, [r7, #30]
 8016a06:	4293      	cmp	r3, r2
 8016a08:	d303      	bcc.n	8016a12 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	3304      	adds	r3, #4
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8016a12:	8bfb      	ldrh	r3, [r7, #30]
 8016a14:	461a      	mov	r2, r3
 8016a16:	6979      	ldr	r1, [r7, #20]
 8016a18:	69b8      	ldr	r0, [r7, #24]
 8016a1a:	f001 f839 	bl	8017a90 <SCSI_UpdateBotData>
  }

  return 0;
 8016a1e:	2300      	movs	r3, #0
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3720      	adds	r7, #32
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}
 8016a28:	200000b0 	.word	0x200000b0
 8016a2c:	200000b8 	.word	0x200000b8

08016a30 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b086      	sub	sp, #24
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	60f8      	str	r0, [r7, #12]
 8016a38:	460b      	mov	r3, r1
 8016a3a:	607a      	str	r2, [r7, #4]
 8016a3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	32b0      	adds	r2, #176	@ 0xb0
 8016a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a4c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8016a4e:	697b      	ldr	r3, [r7, #20]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d102      	bne.n	8016a5a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8016a54:	f04f 33ff 	mov.w	r3, #4294967295
 8016a58:	e064      	b.n	8016b24 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a60:	68fa      	ldr	r2, [r7, #12]
 8016a62:	33b0      	adds	r3, #176	@ 0xb0
 8016a64:	009b      	lsls	r3, r3, #2
 8016a66:	4413      	add	r3, r2
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	685b      	ldr	r3, [r3, #4]
 8016a6c:	697a      	ldr	r2, [r7, #20]
 8016a6e:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016a72:	697a      	ldr	r2, [r7, #20]
 8016a74:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016a78:	7af8      	ldrb	r0, [r7, #11]
 8016a7a:	4798      	blx	r3
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016a80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d104      	bne.n	8016a92 <SCSI_ReadCapacity10+0x62>
 8016a88:	697b      	ldr	r3, [r7, #20]
 8016a8a:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016a8e:	2b02      	cmp	r3, #2
 8016a90:	d108      	bne.n	8016aa4 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016a92:	7af9      	ldrb	r1, [r7, #11]
 8016a94:	233a      	movs	r3, #58	@ 0x3a
 8016a96:	2202      	movs	r2, #2
 8016a98:	68f8      	ldr	r0, [r7, #12]
 8016a9a:	f000 fa89 	bl	8016fb0 <SCSI_SenseCode>
    return -1;
 8016a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8016aa2:	e03f      	b.n	8016b24 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016aaa:	3b01      	subs	r3, #1
 8016aac:	0e1b      	lsrs	r3, r3, #24
 8016aae:	b2da      	uxtb	r2, r3
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016aba:	3b01      	subs	r3, #1
 8016abc:	0c1b      	lsrs	r3, r3, #16
 8016abe:	b2da      	uxtb	r2, r3
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016aca:	3b01      	subs	r3, #1
 8016acc:	0a1b      	lsrs	r3, r3, #8
 8016ace:	b2da      	uxtb	r2, r3
 8016ad0:	697b      	ldr	r3, [r7, #20]
 8016ad2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	3b01      	subs	r3, #1
 8016ade:	b2da      	uxtb	r2, r3
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016aea:	161b      	asrs	r3, r3, #24
 8016aec:	b2da      	uxtb	r2, r3
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016af8:	141b      	asrs	r3, r3, #16
 8016afa:	b2da      	uxtb	r2, r3
 8016afc:	697b      	ldr	r3, [r7, #20]
 8016afe:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b06:	0a1b      	lsrs	r3, r3, #8
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	b2da      	uxtb	r2, r3
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016b16:	b2da      	uxtb	r2, r3
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	2208      	movs	r2, #8
 8016b20:	60da      	str	r2, [r3, #12]

  return 0;
 8016b22:	2300      	movs	r3, #0

}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3718      	adds	r7, #24
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}

08016b2c <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b088      	sub	sp, #32
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	60f8      	str	r0, [r7, #12]
 8016b34:	460b      	mov	r3, r1
 8016b36:	607a      	str	r2, [r7, #4]
 8016b38:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	32b0      	adds	r2, #176	@ 0xb0
 8016b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b48:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016b4a:	69bb      	ldr	r3, [r7, #24]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d102      	bne.n	8016b56 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8016b50:	f04f 33ff 	mov.w	r3, #4294967295
 8016b54:	e09a      	b.n	8016c8c <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016b5c:	68fa      	ldr	r2, [r7, #12]
 8016b5e:	33b0      	adds	r3, #176	@ 0xb0
 8016b60:	009b      	lsls	r3, r3, #2
 8016b62:	4413      	add	r3, r2
 8016b64:	685b      	ldr	r3, [r3, #4]
 8016b66:	685b      	ldr	r3, [r3, #4]
 8016b68:	69ba      	ldr	r2, [r7, #24]
 8016b6a:	f602 0168 	addw	r1, r2, #2152	@ 0x868
 8016b6e:	69ba      	ldr	r2, [r7, #24]
 8016b70:	f602 0264 	addw	r2, r2, #2148	@ 0x864
 8016b74:	7af8      	ldrb	r0, [r7, #11]
 8016b76:	4798      	blx	r3
 8016b78:	4603      	mov	r3, r0
 8016b7a:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d104      	bne.n	8016b8e <SCSI_ReadCapacity16+0x62>
 8016b84:	69bb      	ldr	r3, [r7, #24]
 8016b86:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016b8a:	2b02      	cmp	r3, #2
 8016b8c:	d108      	bne.n	8016ba0 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016b8e:	7af9      	ldrb	r1, [r7, #11]
 8016b90:	233a      	movs	r3, #58	@ 0x3a
 8016b92:	2202      	movs	r2, #2
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	f000 fa0b 	bl	8016fb0 <SCSI_SenseCode>
    return -1;
 8016b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b9e:	e075      	b.n	8016c8c <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	330a      	adds	r3, #10
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	330b      	adds	r3, #11
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bb0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	330c      	adds	r3, #12
 8016bb6:	781b      	ldrb	r3, [r3, #0]
 8016bb8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016bba:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	320d      	adds	r2, #13
 8016bc0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016bc2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016bc4:	69bb      	ldr	r3, [r7, #24]
 8016bc6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016bc8:	2300      	movs	r3, #0
 8016bca:	61fb      	str	r3, [r7, #28]
 8016bcc:	e008      	b.n	8016be0 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 8016bce:	69ba      	ldr	r2, [r7, #24]
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	3310      	adds	r3, #16
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8016bda:	69fb      	ldr	r3, [r7, #28]
 8016bdc:	3301      	adds	r3, #1
 8016bde:	61fb      	str	r3, [r7, #28]
 8016be0:	69bb      	ldr	r3, [r7, #24]
 8016be2:	68db      	ldr	r3, [r3, #12]
 8016be4:	69fa      	ldr	r2, [r7, #28]
 8016be6:	429a      	cmp	r2, r3
 8016be8:	d3f1      	bcc.n	8016bce <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8016bea:	69bb      	ldr	r3, [r7, #24]
 8016bec:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016bf0:	3b01      	subs	r3, #1
 8016bf2:	0e1b      	lsrs	r3, r3, #24
 8016bf4:	b2da      	uxtb	r2, r3
 8016bf6:	69bb      	ldr	r3, [r7, #24]
 8016bf8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8016bfa:	69bb      	ldr	r3, [r7, #24]
 8016bfc:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c00:	3b01      	subs	r3, #1
 8016c02:	0c1b      	lsrs	r3, r3, #16
 8016c04:	b2da      	uxtb	r2, r3
 8016c06:	69bb      	ldr	r3, [r7, #24]
 8016c08:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c10:	3b01      	subs	r3, #1
 8016c12:	0a1b      	lsrs	r3, r3, #8
 8016c14:	b2da      	uxtb	r2, r3
 8016c16:	69bb      	ldr	r3, [r7, #24]
 8016c18:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8016c1a:	69bb      	ldr	r3, [r7, #24]
 8016c1c:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8016c20:	b2db      	uxtb	r3, r3
 8016c22:	3b01      	subs	r3, #1
 8016c24:	b2da      	uxtb	r2, r3
 8016c26:	69bb      	ldr	r3, [r7, #24]
 8016c28:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8016c2a:	69bb      	ldr	r3, [r7, #24]
 8016c2c:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c30:	161b      	asrs	r3, r3, #24
 8016c32:	b2da      	uxtb	r2, r3
 8016c34:	69bb      	ldr	r3, [r7, #24]
 8016c36:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c3e:	141b      	asrs	r3, r3, #16
 8016c40:	b2da      	uxtb	r2, r3
 8016c42:	69bb      	ldr	r3, [r7, #24]
 8016c44:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8016c46:	69bb      	ldr	r3, [r7, #24]
 8016c48:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c4c:	0a1b      	lsrs	r3, r3, #8
 8016c4e:	b29b      	uxth	r3, r3
 8016c50:	b2da      	uxtb	r2, r3
 8016c52:	69bb      	ldr	r3, [r7, #24]
 8016c54:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8016c56:	69bb      	ldr	r3, [r7, #24]
 8016c58:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8016c5c:	b2da      	uxtb	r2, r3
 8016c5e:	69bb      	ldr	r3, [r7, #24]
 8016c60:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	330a      	adds	r3, #10
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	330b      	adds	r3, #11
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c72:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	330c      	adds	r3, #12
 8016c78:	781b      	ldrb	r3, [r3, #0]
 8016c7a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8016c7c:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	320d      	adds	r2, #13
 8016c82:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8016c84:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8016c86:	69bb      	ldr	r3, [r7, #24]
 8016c88:	60da      	str	r2, [r3, #12]

  return 0;
 8016c8a:	2300      	movs	r3, #0
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3720      	adds	r7, #32
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b088      	sub	sp, #32
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	60f8      	str	r0, [r7, #12]
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	607a      	str	r2, [r7, #4]
 8016ca0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	32b0      	adds	r2, #176	@ 0xb0
 8016cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cb0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8016cb2:	69bb      	ldr	r3, [r7, #24]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d102      	bne.n	8016cbe <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8016cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8016cbc:	e061      	b.n	8016d82 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016cc4:	68fa      	ldr	r2, [r7, #12]
 8016cc6:	33b0      	adds	r3, #176	@ 0xb0
 8016cc8:	009b      	lsls	r3, r3, #2
 8016cca:	4413      	add	r3, r2
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	f107 0214 	add.w	r2, r7, #20
 8016cd4:	f107 0110 	add.w	r1, r7, #16
 8016cd8:	7af8      	ldrb	r0, [r7, #11]
 8016cda:	4798      	blx	r3
 8016cdc:	4603      	mov	r3, r0
 8016cde:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8016ce0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d104      	bne.n	8016cf2 <SCSI_ReadFormatCapacity+0x5e>
 8016ce8:	69bb      	ldr	r3, [r7, #24]
 8016cea:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8016cee:	2b02      	cmp	r3, #2
 8016cf0:	d108      	bne.n	8016d04 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8016cf2:	7af9      	ldrb	r1, [r7, #11]
 8016cf4:	233a      	movs	r3, #58	@ 0x3a
 8016cf6:	2202      	movs	r2, #2
 8016cf8:	68f8      	ldr	r0, [r7, #12]
 8016cfa:	f000 f959 	bl	8016fb0 <SCSI_SenseCode>
    return -1;
 8016cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8016d02:	e03e      	b.n	8016d82 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8016d04:	2300      	movs	r3, #0
 8016d06:	83fb      	strh	r3, [r7, #30]
 8016d08:	e007      	b.n	8016d1a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8016d0a:	8bfb      	ldrh	r3, [r7, #30]
 8016d0c:	69ba      	ldr	r2, [r7, #24]
 8016d0e:	4413      	add	r3, r2
 8016d10:	2200      	movs	r2, #0
 8016d12:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8016d14:	8bfb      	ldrh	r3, [r7, #30]
 8016d16:	3301      	adds	r3, #1
 8016d18:	83fb      	strh	r3, [r7, #30]
 8016d1a:	8bfb      	ldrh	r3, [r7, #30]
 8016d1c:	2b0b      	cmp	r3, #11
 8016d1e:	d9f4      	bls.n	8016d0a <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8016d20:	69bb      	ldr	r3, [r7, #24]
 8016d22:	2208      	movs	r2, #8
 8016d24:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	0e1b      	lsrs	r3, r3, #24
 8016d2c:	b2da      	uxtb	r2, r3
 8016d2e:	69bb      	ldr	r3, [r7, #24]
 8016d30:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	3b01      	subs	r3, #1
 8016d36:	0c1b      	lsrs	r3, r3, #16
 8016d38:	b2da      	uxtb	r2, r3
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8016d3e:	693b      	ldr	r3, [r7, #16]
 8016d40:	3b01      	subs	r3, #1
 8016d42:	0a1b      	lsrs	r3, r3, #8
 8016d44:	b2da      	uxtb	r2, r3
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8016d4a:	693b      	ldr	r3, [r7, #16]
 8016d4c:	b2db      	uxtb	r3, r3
 8016d4e:	3b01      	subs	r3, #1
 8016d50:	b2da      	uxtb	r2, r3
 8016d52:	69bb      	ldr	r3, [r7, #24]
 8016d54:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8016d56:	69bb      	ldr	r3, [r7, #24]
 8016d58:	2202      	movs	r2, #2
 8016d5a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8016d5c:	8abb      	ldrh	r3, [r7, #20]
 8016d5e:	141b      	asrs	r3, r3, #16
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8016d66:	8abb      	ldrh	r3, [r7, #20]
 8016d68:	0a1b      	lsrs	r3, r3, #8
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	b2da      	uxtb	r2, r3
 8016d6e:	69bb      	ldr	r3, [r7, #24]
 8016d70:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8016d72:	8abb      	ldrh	r3, [r7, #20]
 8016d74:	b2da      	uxtb	r2, r3
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8016d7a:	69bb      	ldr	r3, [r7, #24]
 8016d7c:	220c      	movs	r2, #12
 8016d7e:	60da      	str	r2, [r3, #12]

  return 0;
 8016d80:	2300      	movs	r3, #0
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3720      	adds	r7, #32
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}
	...

08016d8c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b086      	sub	sp, #24
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	60f8      	str	r0, [r7, #12]
 8016d94:	460b      	mov	r3, r1
 8016d96:	607a      	str	r2, [r7, #4]
 8016d98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	32b0      	adds	r2, #176	@ 0xb0
 8016da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016da8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8016daa:	2304      	movs	r3, #4
 8016dac:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d102      	bne.n	8016dba <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8016db4:	f04f 33ff 	mov.w	r3, #4294967295
 8016db8:	e027      	b.n	8016e0a <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016dc0:	68fa      	ldr	r2, [r7, #12]
 8016dc2:	33b0      	adds	r3, #176	@ 0xb0
 8016dc4:	009b      	lsls	r3, r3, #2
 8016dc6:	4413      	add	r3, r2
 8016dc8:	685b      	ldr	r3, [r3, #4]
 8016dca:	68db      	ldr	r3, [r3, #12]
 8016dcc:	7afa      	ldrb	r2, [r7, #11]
 8016dce:	4610      	mov	r0, r2
 8016dd0:	4798      	blx	r3
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d006      	beq.n	8016de6 <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 8016dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8016e14 <SCSI_ModeSense6+0x88>)
 8016dda:	789b      	ldrb	r3, [r3, #2]
 8016ddc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016de0:	b2da      	uxtb	r2, r3
 8016de2:	4b0c      	ldr	r3, [pc, #48]	@ (8016e14 <SCSI_ModeSense6+0x88>)
 8016de4:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	3304      	adds	r3, #4
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	461a      	mov	r2, r3
 8016dee:	8afb      	ldrh	r3, [r7, #22]
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d303      	bcc.n	8016dfc <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	3304      	adds	r3, #4
 8016df8:	781b      	ldrb	r3, [r3, #0]
 8016dfa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8016dfc:	8afb      	ldrh	r3, [r7, #22]
 8016dfe:	461a      	mov	r2, r3
 8016e00:	4904      	ldr	r1, [pc, #16]	@ (8016e14 <SCSI_ModeSense6+0x88>)
 8016e02:	6938      	ldr	r0, [r7, #16]
 8016e04:	f000 fe44 	bl	8017a90 <SCSI_UpdateBotData>

  return 0;
 8016e08:	2300      	movs	r3, #0
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3718      	adds	r7, #24
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	200000c0 	.word	0x200000c0

08016e18 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b086      	sub	sp, #24
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	460b      	mov	r3, r1
 8016e22:	607a      	str	r2, [r7, #4]
 8016e24:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	32b0      	adds	r2, #176	@ 0xb0
 8016e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e34:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8016e36:	2308      	movs	r3, #8
 8016e38:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d102      	bne.n	8016e46 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8016e40:	f04f 33ff 	mov.w	r3, #4294967295
 8016e44:	e027      	b.n	8016e96 <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016e4c:	68fa      	ldr	r2, [r7, #12]
 8016e4e:	33b0      	adds	r3, #176	@ 0xb0
 8016e50:	009b      	lsls	r3, r3, #2
 8016e52:	4413      	add	r3, r2
 8016e54:	685b      	ldr	r3, [r3, #4]
 8016e56:	68db      	ldr	r3, [r3, #12]
 8016e58:	7afa      	ldrb	r2, [r7, #11]
 8016e5a:	4610      	mov	r0, r2
 8016e5c:	4798      	blx	r3
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d006      	beq.n	8016e72 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 8016e64:	4b0e      	ldr	r3, [pc, #56]	@ (8016ea0 <SCSI_ModeSense10+0x88>)
 8016e66:	78db      	ldrb	r3, [r3, #3]
 8016e68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8016e6c:	b2da      	uxtb	r2, r3
 8016e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8016ea0 <SCSI_ModeSense10+0x88>)
 8016e70:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	3308      	adds	r3, #8
 8016e76:	781b      	ldrb	r3, [r3, #0]
 8016e78:	461a      	mov	r2, r3
 8016e7a:	8afb      	ldrh	r3, [r7, #22]
 8016e7c:	4293      	cmp	r3, r2
 8016e7e:	d303      	bcc.n	8016e88 <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	3308      	adds	r3, #8
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8016e88:	8afb      	ldrh	r3, [r7, #22]
 8016e8a:	461a      	mov	r2, r3
 8016e8c:	4904      	ldr	r1, [pc, #16]	@ (8016ea0 <SCSI_ModeSense10+0x88>)
 8016e8e:	6938      	ldr	r0, [r7, #16]
 8016e90:	f000 fdfe 	bl	8017a90 <SCSI_UpdateBotData>

  return 0;
 8016e94:	2300      	movs	r3, #0
}
 8016e96:	4618      	mov	r0, r3
 8016e98:	3718      	adds	r7, #24
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}
 8016e9e:	bf00      	nop
 8016ea0:	200000c4 	.word	0x200000c4

08016ea4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b086      	sub	sp, #24
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	60f8      	str	r0, [r7, #12]
 8016eac:	460b      	mov	r3, r1
 8016eae:	607a      	str	r2, [r7, #4]
 8016eb0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	32b0      	adds	r2, #176	@ 0xb0
 8016ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ec0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8016ec2:	693b      	ldr	r3, [r7, #16]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d102      	bne.n	8016ece <SCSI_RequestSense+0x2a>
  {
    return -1;
 8016ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8016ecc:	e06c      	b.n	8016fa8 <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8016ece:	693b      	ldr	r3, [r7, #16]
 8016ed0:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d10a      	bne.n	8016eee <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8016ede:	2320      	movs	r3, #32
 8016ee0:	2205      	movs	r2, #5
 8016ee2:	68f8      	ldr	r0, [r7, #12]
 8016ee4:	f000 f864 	bl	8016fb0 <SCSI_SenseCode>
    return -1;
 8016ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8016eec:	e05c      	b.n	8016fa8 <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016eee:	2300      	movs	r3, #0
 8016ef0:	75fb      	strb	r3, [r7, #23]
 8016ef2:	e007      	b.n	8016f04 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8016ef4:	7dfb      	ldrb	r3, [r7, #23]
 8016ef6:	693a      	ldr	r2, [r7, #16]
 8016ef8:	4413      	add	r3, r2
 8016efa:	2200      	movs	r2, #0
 8016efc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8016efe:	7dfb      	ldrb	r3, [r7, #23]
 8016f00:	3301      	adds	r3, #1
 8016f02:	75fb      	strb	r3, [r7, #23]
 8016f04:	7dfb      	ldrb	r3, [r7, #23]
 8016f06:	2b11      	cmp	r3, #17
 8016f08:	d9f4      	bls.n	8016ef4 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	2270      	movs	r2, #112	@ 0x70
 8016f0e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8016f10:	693b      	ldr	r3, [r7, #16]
 8016f12:	220c      	movs	r2, #12
 8016f14:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8016f16:	693b      	ldr	r3, [r7, #16]
 8016f18:	f893 2860 	ldrb.w	r2, [r3, #2144]	@ 0x860
 8016f1c:	693b      	ldr	r3, [r7, #16]
 8016f1e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d031      	beq.n	8016f8a <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8016f26:	693b      	ldr	r3, [r7, #16]
 8016f28:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	693b      	ldr	r3, [r7, #16]
 8016f30:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016f34:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f42:	693a      	ldr	r2, [r7, #16]
 8016f44:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f48:	00db      	lsls	r3, r3, #3
 8016f4a:	4413      	add	r3, r2
 8016f4c:	791a      	ldrb	r2, [r3, #4]
 8016f4e:	693b      	ldr	r3, [r7, #16]
 8016f50:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8016f52:	693b      	ldr	r3, [r7, #16]
 8016f54:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f58:	693a      	ldr	r2, [r7, #16]
 8016f5a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8016f5e:	00db      	lsls	r3, r3, #3
 8016f60:	4413      	add	r3, r2
 8016f62:	795a      	ldrb	r2, [r3, #5]
 8016f64:	693b      	ldr	r3, [r7, #16]
 8016f66:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f6e:	3301      	adds	r3, #1
 8016f70:	b2da      	uxtb	r2, r3
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8016f78:	693b      	ldr	r3, [r7, #16]
 8016f7a:	f893 3860 	ldrb.w	r3, [r3, #2144]	@ 0x860
 8016f7e:	2b04      	cmp	r3, #4
 8016f80:	d103      	bne.n	8016f8a <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	2200      	movs	r2, #0
 8016f86:	f883 2860 	strb.w	r2, [r3, #2144]	@ 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8016f8a:	693b      	ldr	r3, [r7, #16]
 8016f8c:	2212      	movs	r2, #18
 8016f8e:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	3304      	adds	r3, #4
 8016f94:	781b      	ldrb	r3, [r3, #0]
 8016f96:	2b12      	cmp	r3, #18
 8016f98:	d805      	bhi.n	8016fa6 <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	3304      	adds	r3, #4
 8016f9e:	781b      	ldrb	r3, [r3, #0]
 8016fa0:	461a      	mov	r2, r3
 8016fa2:	693b      	ldr	r3, [r7, #16]
 8016fa4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8016fa6:	2300      	movs	r3, #0
}
 8016fa8:	4618      	mov	r0, r3
 8016faa:	3718      	adds	r7, #24
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd80      	pop	{r7, pc}

08016fb0 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8016fb0:	b480      	push	{r7}
 8016fb2:	b085      	sub	sp, #20
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	4608      	mov	r0, r1
 8016fba:	4611      	mov	r1, r2
 8016fbc:	461a      	mov	r2, r3
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	70fb      	strb	r3, [r7, #3]
 8016fc2:	460b      	mov	r3, r1
 8016fc4:	70bb      	strb	r3, [r7, #2]
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	32b0      	adds	r2, #176	@ 0xb0
 8016fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fd8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d02f      	beq.n	8017040 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8016fee:	78b9      	ldrb	r1, [r7, #2]
 8016ff0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8016ffa:	68fa      	ldr	r2, [r7, #12]
 8016ffc:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8017000:	00db      	lsls	r3, r3, #3
 8017002:	4413      	add	r3, r2
 8017004:	787a      	ldrb	r2, [r7, #1]
 8017006:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 801700e:	68fa      	ldr	r2, [r7, #12]
 8017010:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8017014:	00db      	lsls	r3, r3, #3
 8017016:	4413      	add	r3, r2
 8017018:	2200      	movs	r2, #0
 801701a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017022:	3301      	adds	r3, #1
 8017024:	b2da      	uxtb	r2, r3
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	f893 3861 	ldrb.w	r3, [r3, #2145]	@ 0x861
 8017032:	2b04      	cmp	r3, #4
 8017034:	d105      	bne.n	8017042 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2200      	movs	r2, #0
 801703a:	f883 2861 	strb.w	r2, [r3, #2145]	@ 0x861
 801703e:	e000      	b.n	8017042 <SCSI_SenseCode+0x92>
    return;
 8017040:	bf00      	nop
  }
}
 8017042:	3714      	adds	r7, #20
 8017044:	46bd      	mov	sp, r7
 8017046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704a:	4770      	bx	lr

0801704c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b086      	sub	sp, #24
 8017050:	af00      	add	r7, sp, #0
 8017052:	60f8      	str	r0, [r7, #12]
 8017054:	460b      	mov	r3, r1
 8017056:	607a      	str	r2, [r7, #4]
 8017058:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	32b0      	adds	r2, #176	@ 0xb0
 8017064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017068:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d102      	bne.n	8017076 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8017070:	f04f 33ff 	mov.w	r3, #4294967295
 8017074:	e03b      	b.n	80170ee <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8017076:	697b      	ldr	r3, [r7, #20]
 8017078:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 801707c:	2b01      	cmp	r3, #1
 801707e:	d10f      	bne.n	80170a0 <SCSI_StartStopUnit+0x54>
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	3304      	adds	r3, #4
 8017084:	781b      	ldrb	r3, [r3, #0]
 8017086:	f003 0303 	and.w	r3, r3, #3
 801708a:	2b02      	cmp	r3, #2
 801708c:	d108      	bne.n	80170a0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801708e:	7af9      	ldrb	r1, [r7, #11]
 8017090:	2324      	movs	r3, #36	@ 0x24
 8017092:	2205      	movs	r2, #5
 8017094:	68f8      	ldr	r0, [r7, #12]
 8017096:	f7ff ff8b 	bl	8016fb0 <SCSI_SenseCode>

    return -1;
 801709a:	f04f 33ff 	mov.w	r3, #4294967295
 801709e:	e026      	b.n	80170ee <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	3304      	adds	r3, #4
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	f003 0303 	and.w	r3, r3, #3
 80170aa:	2b01      	cmp	r3, #1
 80170ac:	d104      	bne.n	80170b8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	2200      	movs	r2, #0
 80170b2:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80170b6:	e016      	b.n	80170e6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	3304      	adds	r3, #4
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	f003 0303 	and.w	r3, r3, #3
 80170c2:	2b02      	cmp	r3, #2
 80170c4:	d104      	bne.n	80170d0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80170c6:	697b      	ldr	r3, [r7, #20]
 80170c8:	2202      	movs	r2, #2
 80170ca:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 80170ce:	e00a      	b.n	80170e6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	3304      	adds	r3, #4
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	f003 0303 	and.w	r3, r3, #3
 80170da:	2b03      	cmp	r3, #3
 80170dc:	d103      	bne.n	80170e6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	2200      	movs	r2, #0
 80170e2:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80170e6:	697b      	ldr	r3, [r7, #20]
 80170e8:	2200      	movs	r2, #0
 80170ea:	60da      	str	r2, [r3, #12]

  return 0;
 80170ec:	2300      	movs	r3, #0
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	3718      	adds	r7, #24
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}

080170f6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80170f6:	b480      	push	{r7}
 80170f8:	b087      	sub	sp, #28
 80170fa:	af00      	add	r7, sp, #0
 80170fc:	60f8      	str	r0, [r7, #12]
 80170fe:	460b      	mov	r3, r1
 8017100:	607a      	str	r2, [r7, #4]
 8017102:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	32b0      	adds	r2, #176	@ 0xb0
 801710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017112:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d102      	bne.n	8017120 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801711a:	f04f 33ff 	mov.w	r3, #4294967295
 801711e:	e011      	b.n	8017144 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	3304      	adds	r3, #4
 8017124:	781b      	ldrb	r3, [r3, #0]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d104      	bne.n	8017134 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	2200      	movs	r2, #0
 801712e:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
 8017132:	e003      	b.n	801713c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	2201      	movs	r2, #1
 8017138:	f883 2862 	strb.w	r2, [r3, #2146]	@ 0x862
  }

  hmsc->bot_data_length = 0U;
 801713c:	697b      	ldr	r3, [r7, #20]
 801713e:	2200      	movs	r2, #0
 8017140:	60da      	str	r2, [r3, #12]

  return 0;
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	371c      	adds	r7, #28
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr

08017150 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b086      	sub	sp, #24
 8017154:	af00      	add	r7, sp, #0
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	460b      	mov	r3, r1
 801715a:	607a      	str	r2, [r7, #4]
 801715c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	32b0      	adds	r2, #176	@ 0xb0
 8017168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801716c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d102      	bne.n	801717a <SCSI_Read10+0x2a>
  {
    return -1;
 8017174:	f04f 33ff 	mov.w	r3, #4294967295
 8017178:	e090      	b.n	801729c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801717a:	697b      	ldr	r3, [r7, #20]
 801717c:	7a1b      	ldrb	r3, [r3, #8]
 801717e:	2b00      	cmp	r3, #0
 8017180:	f040 8082 	bne.w	8017288 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 801718a:	b25b      	sxtb	r3, r3
 801718c:	2b00      	cmp	r3, #0
 801718e:	db0a      	blt.n	80171a6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017190:	697b      	ldr	r3, [r7, #20]
 8017192:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017196:	2320      	movs	r3, #32
 8017198:	2205      	movs	r2, #5
 801719a:	68f8      	ldr	r0, [r7, #12]
 801719c:	f7ff ff08 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 80171a0:	f04f 33ff 	mov.w	r3, #4294967295
 80171a4:	e07a      	b.n	801729c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 80171ac:	2b02      	cmp	r3, #2
 80171ae:	d108      	bne.n	80171c2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80171b0:	7af9      	ldrb	r1, [r7, #11]
 80171b2:	233a      	movs	r3, #58	@ 0x3a
 80171b4:	2202      	movs	r2, #2
 80171b6:	68f8      	ldr	r0, [r7, #12]
 80171b8:	f7ff fefa 	bl	8016fb0 <SCSI_SenseCode>

      return -1;
 80171bc:	f04f 33ff 	mov.w	r3, #4294967295
 80171c0:	e06c      	b.n	801729c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80171c8:	68fa      	ldr	r2, [r7, #12]
 80171ca:	33b0      	adds	r3, #176	@ 0xb0
 80171cc:	009b      	lsls	r3, r3, #2
 80171ce:	4413      	add	r3, r2
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	689b      	ldr	r3, [r3, #8]
 80171d4:	7afa      	ldrb	r2, [r7, #11]
 80171d6:	4610      	mov	r0, r2
 80171d8:	4798      	blx	r3
 80171da:	4603      	mov	r3, r0
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d008      	beq.n	80171f2 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80171e0:	7af9      	ldrb	r1, [r7, #11]
 80171e2:	233a      	movs	r3, #58	@ 0x3a
 80171e4:	2202      	movs	r2, #2
 80171e6:	68f8      	ldr	r0, [r7, #12]
 80171e8:	f7ff fee2 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 80171ec:	f04f 33ff 	mov.w	r3, #4294967295
 80171f0:	e054      	b.n	801729c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	3302      	adds	r3, #2
 80171f6:	781b      	ldrb	r3, [r3, #0]
 80171f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	3303      	adds	r3, #3
 80171fe:	781b      	ldrb	r3, [r3, #0]
 8017200:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017202:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	3304      	adds	r3, #4
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801720c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	3205      	adds	r2, #5
 8017212:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8017214:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	3307      	adds	r3, #7
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	021b      	lsls	r3, r3, #8
 8017224:	687a      	ldr	r2, [r7, #4]
 8017226:	3208      	adds	r2, #8
 8017228:	7812      	ldrb	r2, [r2, #0]
 801722a:	431a      	orrs	r2, r3
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801723e:	7af9      	ldrb	r1, [r7, #11]
 8017240:	68f8      	ldr	r0, [r7, #12]
 8017242:	f000 fadc 	bl	80177fe <SCSI_CheckAddressRange>
 8017246:	4603      	mov	r3, r0
 8017248:	2b00      	cmp	r3, #0
 801724a:	da02      	bge.n	8017252 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801724c:	f04f 33ff 	mov.w	r3, #4294967295
 8017250:	e024      	b.n	801729c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8017252:	697b      	ldr	r3, [r7, #20]
 8017254:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8017258:	697b      	ldr	r3, [r7, #20]
 801725a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801725e:	6979      	ldr	r1, [r7, #20]
 8017260:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 8017264:	fb01 f303 	mul.w	r3, r1, r3
 8017268:	429a      	cmp	r2, r3
 801726a:	d00a      	beq.n	8017282 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017272:	2320      	movs	r3, #32
 8017274:	2205      	movs	r2, #5
 8017276:	68f8      	ldr	r0, [r7, #12]
 8017278:	f7ff fe9a 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 801727c:	f04f 33ff 	mov.w	r3, #4294967295
 8017280:	e00c      	b.n	801729c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8017282:	697b      	ldr	r3, [r7, #20]
 8017284:	2202      	movs	r2, #2
 8017286:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8017288:	697b      	ldr	r3, [r7, #20]
 801728a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801728e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8017290:	7afb      	ldrb	r3, [r7, #11]
 8017292:	4619      	mov	r1, r3
 8017294:	68f8      	ldr	r0, [r7, #12]
 8017296:	f000 fadf 	bl	8017858 <SCSI_ProcessRead>
 801729a:	4603      	mov	r3, r0
}
 801729c:	4618      	mov	r0, r3
 801729e:	3718      	adds	r7, #24
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b086      	sub	sp, #24
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	60f8      	str	r0, [r7, #12]
 80172ac:	460b      	mov	r3, r1
 80172ae:	607a      	str	r2, [r7, #4]
 80172b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	32b0      	adds	r2, #176	@ 0xb0
 80172bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d102      	bne.n	80172ce <SCSI_Read12+0x2a>
  {
    return -1;
 80172c8:	f04f 33ff 	mov.w	r3, #4294967295
 80172cc:	e09a      	b.n	8017404 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80172ce:	697b      	ldr	r3, [r7, #20]
 80172d0:	7a1b      	ldrb	r3, [r3, #8]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	f040 808c 	bne.w	80173f0 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 80172de:	b25b      	sxtb	r3, r3
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	db0a      	blt.n	80172fa <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80172e4:	697b      	ldr	r3, [r7, #20]
 80172e6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80172ea:	2320      	movs	r3, #32
 80172ec:	2205      	movs	r2, #5
 80172ee:	68f8      	ldr	r0, [r7, #12]
 80172f0:	f7ff fe5e 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 80172f4:	f04f 33ff 	mov.w	r3, #4294967295
 80172f8:	e084      	b.n	8017404 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80172fa:	697b      	ldr	r3, [r7, #20]
 80172fc:	f893 3862 	ldrb.w	r3, [r3, #2146]	@ 0x862
 8017300:	2b02      	cmp	r3, #2
 8017302:	d108      	bne.n	8017316 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017304:	7af9      	ldrb	r1, [r7, #11]
 8017306:	233a      	movs	r3, #58	@ 0x3a
 8017308:	2202      	movs	r2, #2
 801730a:	68f8      	ldr	r0, [r7, #12]
 801730c:	f7ff fe50 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 8017310:	f04f 33ff 	mov.w	r3, #4294967295
 8017314:	e076      	b.n	8017404 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801731c:	68fa      	ldr	r2, [r7, #12]
 801731e:	33b0      	adds	r3, #176	@ 0xb0
 8017320:	009b      	lsls	r3, r3, #2
 8017322:	4413      	add	r3, r2
 8017324:	685b      	ldr	r3, [r3, #4]
 8017326:	689b      	ldr	r3, [r3, #8]
 8017328:	7afa      	ldrb	r2, [r7, #11]
 801732a:	4610      	mov	r0, r2
 801732c:	4798      	blx	r3
 801732e:	4603      	mov	r3, r0
 8017330:	2b00      	cmp	r3, #0
 8017332:	d008      	beq.n	8017346 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8017334:	7af9      	ldrb	r1, [r7, #11]
 8017336:	233a      	movs	r3, #58	@ 0x3a
 8017338:	2202      	movs	r2, #2
 801733a:	68f8      	ldr	r0, [r7, #12]
 801733c:	f7ff fe38 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 8017340:	f04f 33ff 	mov.w	r3, #4294967295
 8017344:	e05e      	b.n	8017404 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	3302      	adds	r3, #2
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	3303      	adds	r3, #3
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017356:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	3304      	adds	r3, #4
 801735c:	781b      	ldrb	r3, [r3, #0]
 801735e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8017360:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8017362:	687a      	ldr	r2, [r7, #4]
 8017364:	3205      	adds	r2, #5
 8017366:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8017368:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	3306      	adds	r3, #6
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	3307      	adds	r3, #7
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017380:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	3308      	adds	r3, #8
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801738a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801738c:	687a      	ldr	r2, [r7, #4]
 801738e:	3209      	adds	r2, #9
 8017390:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8017392:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8017394:	697b      	ldr	r3, [r7, #20]
 8017396:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80173a0:	697b      	ldr	r3, [r7, #20]
 80173a2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80173a6:	7af9      	ldrb	r1, [r7, #11]
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f000 fa28 	bl	80177fe <SCSI_CheckAddressRange>
 80173ae:	4603      	mov	r3, r0
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	da02      	bge.n	80173ba <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80173b4:	f04f 33ff 	mov.w	r3, #4294967295
 80173b8:	e024      	b.n	8017404 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80173ba:	697b      	ldr	r3, [r7, #20]
 80173bc:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80173c6:	6979      	ldr	r1, [r7, #20]
 80173c8:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	@ 0x864
 80173cc:	fb01 f303 	mul.w	r3, r1, r3
 80173d0:	429a      	cmp	r2, r3
 80173d2:	d00a      	beq.n	80173ea <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80173da:	2320      	movs	r3, #32
 80173dc:	2205      	movs	r2, #5
 80173de:	68f8      	ldr	r0, [r7, #12]
 80173e0:	f7ff fde6 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 80173e4:	f04f 33ff 	mov.w	r3, #4294967295
 80173e8:	e00c      	b.n	8017404 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80173ea:	697b      	ldr	r3, [r7, #20]
 80173ec:	2202      	movs	r2, #2
 80173ee:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80173f0:	697b      	ldr	r3, [r7, #20]
 80173f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80173f6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80173f8:	7afb      	ldrb	r3, [r7, #11]
 80173fa:	4619      	mov	r1, r3
 80173fc:	68f8      	ldr	r0, [r7, #12]
 80173fe:	f000 fa2b 	bl	8017858 <SCSI_ProcessRead>
 8017402:	4603      	mov	r3, r0
}
 8017404:	4618      	mov	r0, r3
 8017406:	3718      	adds	r7, #24
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}

0801740c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b086      	sub	sp, #24
 8017410:	af00      	add	r7, sp, #0
 8017412:	60f8      	str	r0, [r7, #12]
 8017414:	460b      	mov	r3, r1
 8017416:	607a      	str	r2, [r7, #4]
 8017418:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	32b0      	adds	r2, #176	@ 0xb0
 8017424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017428:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801742a:	697b      	ldr	r3, [r7, #20]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d102      	bne.n	8017436 <SCSI_Write10+0x2a>
  {
    return -1;
 8017430:	f04f 33ff 	mov.w	r3, #4294967295
 8017434:	e0ba      	b.n	80175ac <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8017436:	697b      	ldr	r3, [r7, #20]
 8017438:	7a1b      	ldrb	r3, [r3, #8]
 801743a:	2b00      	cmp	r3, #0
 801743c:	f040 80b0 	bne.w	80175a0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8017440:	697b      	ldr	r3, [r7, #20]
 8017442:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017446:	2b00      	cmp	r3, #0
 8017448:	d10a      	bne.n	8017460 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801744a:	697b      	ldr	r3, [r7, #20]
 801744c:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017450:	2320      	movs	r3, #32
 8017452:	2205      	movs	r2, #5
 8017454:	68f8      	ldr	r0, [r7, #12]
 8017456:	f7ff fdab 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 801745a:	f04f 33ff 	mov.w	r3, #4294967295
 801745e:	e0a5      	b.n	80175ac <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8017466:	b25b      	sxtb	r3, r3
 8017468:	2b00      	cmp	r3, #0
 801746a:	da0a      	bge.n	8017482 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017472:	2320      	movs	r3, #32
 8017474:	2205      	movs	r2, #5
 8017476:	68f8      	ldr	r0, [r7, #12]
 8017478:	f7ff fd9a 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 801747c:	f04f 33ff 	mov.w	r3, #4294967295
 8017480:	e094      	b.n	80175ac <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017488:	68fa      	ldr	r2, [r7, #12]
 801748a:	33b0      	adds	r3, #176	@ 0xb0
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	4413      	add	r3, r2
 8017490:	685b      	ldr	r3, [r3, #4]
 8017492:	689b      	ldr	r3, [r3, #8]
 8017494:	7afa      	ldrb	r2, [r7, #11]
 8017496:	4610      	mov	r0, r2
 8017498:	4798      	blx	r3
 801749a:	4603      	mov	r3, r0
 801749c:	2b00      	cmp	r3, #0
 801749e:	d008      	beq.n	80174b2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80174a0:	7af9      	ldrb	r1, [r7, #11]
 80174a2:	233a      	movs	r3, #58	@ 0x3a
 80174a4:	2202      	movs	r2, #2
 80174a6:	68f8      	ldr	r0, [r7, #12]
 80174a8:	f7ff fd82 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 80174ac:	f04f 33ff 	mov.w	r3, #4294967295
 80174b0:	e07c      	b.n	80175ac <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80174b8:	68fa      	ldr	r2, [r7, #12]
 80174ba:	33b0      	adds	r3, #176	@ 0xb0
 80174bc:	009b      	lsls	r3, r3, #2
 80174be:	4413      	add	r3, r2
 80174c0:	685b      	ldr	r3, [r3, #4]
 80174c2:	68db      	ldr	r3, [r3, #12]
 80174c4:	7afa      	ldrb	r2, [r7, #11]
 80174c6:	4610      	mov	r0, r2
 80174c8:	4798      	blx	r3
 80174ca:	4603      	mov	r3, r0
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d008      	beq.n	80174e2 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80174d0:	7af9      	ldrb	r1, [r7, #11]
 80174d2:	2327      	movs	r3, #39	@ 0x27
 80174d4:	2202      	movs	r2, #2
 80174d6:	68f8      	ldr	r0, [r7, #12]
 80174d8:	f7ff fd6a 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 80174dc:	f04f 33ff 	mov.w	r3, #4294967295
 80174e0:	e064      	b.n	80175ac <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	3302      	adds	r3, #2
 80174e6:	781b      	ldrb	r3, [r3, #0]
 80174e8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	3303      	adds	r3, #3
 80174ee:	781b      	ldrb	r3, [r3, #0]
 80174f0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80174f2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	3304      	adds	r3, #4
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80174fc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80174fe:	687a      	ldr	r2, [r7, #4]
 8017500:	3205      	adds	r2, #5
 8017502:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8017504:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	3307      	adds	r3, #7
 8017510:	781b      	ldrb	r3, [r3, #0]
 8017512:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	3208      	adds	r2, #8
 8017518:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801751a:	431a      	orrs	r2, r3
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8017522:	697b      	ldr	r3, [r7, #20]
 8017524:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017528:	697b      	ldr	r3, [r7, #20]
 801752a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801752e:	7af9      	ldrb	r1, [r7, #11]
 8017530:	68f8      	ldr	r0, [r7, #12]
 8017532:	f000 f964 	bl	80177fe <SCSI_CheckAddressRange>
 8017536:	4603      	mov	r3, r0
 8017538:	2b00      	cmp	r3, #0
 801753a:	da02      	bge.n	8017542 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801753c:	f04f 33ff 	mov.w	r3, #4294967295
 8017540:	e034      	b.n	80175ac <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017542:	697b      	ldr	r3, [r7, #20]
 8017544:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017548:	697a      	ldr	r2, [r7, #20]
 801754a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801754e:	fb02 f303 	mul.w	r3, r2, r3
 8017552:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 801755a:	693a      	ldr	r2, [r7, #16]
 801755c:	429a      	cmp	r2, r3
 801755e:	d00a      	beq.n	8017576 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017560:	697b      	ldr	r3, [r7, #20]
 8017562:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017566:	2320      	movs	r3, #32
 8017568:	2205      	movs	r2, #5
 801756a:	68f8      	ldr	r0, [r7, #12]
 801756c:	f7ff fd20 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 8017570:	f04f 33ff 	mov.w	r3, #4294967295
 8017574:	e01a      	b.n	80175ac <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8017576:	693b      	ldr	r3, [r7, #16]
 8017578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801757c:	bf28      	it	cs
 801757e:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017582:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	2201      	movs	r2, #1
 8017588:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801758a:	4b0a      	ldr	r3, [pc, #40]	@ (80175b4 <SCSI_Write10+0x1a8>)
 801758c:	7819      	ldrb	r1, [r3, #0]
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	f103 0210 	add.w	r2, r3, #16
 8017594:	693b      	ldr	r3, [r7, #16]
 8017596:	68f8      	ldr	r0, [r7, #12]
 8017598:	f006 f8ad 	bl	801d6f6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801759c:	2300      	movs	r3, #0
 801759e:	e005      	b.n	80175ac <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80175a0:	7afb      	ldrb	r3, [r7, #11]
 80175a2:	4619      	mov	r1, r3
 80175a4:	68f8      	ldr	r0, [r7, #12]
 80175a6:	f000 f9dd 	bl	8017964 <SCSI_ProcessWrite>
 80175aa:	4603      	mov	r3, r0
}
 80175ac:	4618      	mov	r0, r3
 80175ae:	3718      	adds	r7, #24
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}
 80175b4:	200000af 	.word	0x200000af

080175b8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b086      	sub	sp, #24
 80175bc:	af00      	add	r7, sp, #0
 80175be:	60f8      	str	r0, [r7, #12]
 80175c0:	460b      	mov	r3, r1
 80175c2:	607a      	str	r2, [r7, #4]
 80175c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	32b0      	adds	r2, #176	@ 0xb0
 80175d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80175d4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d102      	bne.n	80175e2 <SCSI_Write12+0x2a>
  {
    return -1;
 80175dc:	f04f 33ff 	mov.w	r3, #4294967295
 80175e0:	e0ca      	b.n	8017778 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80175e2:	697b      	ldr	r3, [r7, #20]
 80175e4:	7a1b      	ldrb	r3, [r3, #8]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	f040 80c0 	bne.w	801776c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d10a      	bne.n	801760c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80175f6:	697b      	ldr	r3, [r7, #20]
 80175f8:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 80175fc:	2320      	movs	r3, #32
 80175fe:	2205      	movs	r2, #5
 8017600:	68f8      	ldr	r0, [r7, #12]
 8017602:	f7ff fcd5 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 8017606:	f04f 33ff 	mov.w	r3, #4294967295
 801760a:	e0b5      	b.n	8017778 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801760c:	697b      	ldr	r3, [r7, #20]
 801760e:	f893 381c 	ldrb.w	r3, [r3, #2076]	@ 0x81c
 8017612:	b25b      	sxtb	r3, r3
 8017614:	2b00      	cmp	r3, #0
 8017616:	da0a      	bge.n	801762e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 801761e:	2320      	movs	r3, #32
 8017620:	2205      	movs	r2, #5
 8017622:	68f8      	ldr	r0, [r7, #12]
 8017624:	f7ff fcc4 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 8017628:	f04f 33ff 	mov.w	r3, #4294967295
 801762c:	e0a4      	b.n	8017778 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017634:	68fa      	ldr	r2, [r7, #12]
 8017636:	33b0      	adds	r3, #176	@ 0xb0
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	4413      	add	r3, r2
 801763c:	685b      	ldr	r3, [r3, #4]
 801763e:	689b      	ldr	r3, [r3, #8]
 8017640:	7afa      	ldrb	r2, [r7, #11]
 8017642:	4610      	mov	r0, r2
 8017644:	4798      	blx	r3
 8017646:	4603      	mov	r3, r0
 8017648:	2b00      	cmp	r3, #0
 801764a:	d00b      	beq.n	8017664 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801764c:	7af9      	ldrb	r1, [r7, #11]
 801764e:	233a      	movs	r3, #58	@ 0x3a
 8017650:	2202      	movs	r2, #2
 8017652:	68f8      	ldr	r0, [r7, #12]
 8017654:	f7ff fcac 	bl	8016fb0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8017658:	697b      	ldr	r3, [r7, #20]
 801765a:	2205      	movs	r2, #5
 801765c:	721a      	strb	r2, [r3, #8]
      return -1;
 801765e:	f04f 33ff 	mov.w	r3, #4294967295
 8017662:	e089      	b.n	8017778 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801766a:	68fa      	ldr	r2, [r7, #12]
 801766c:	33b0      	adds	r3, #176	@ 0xb0
 801766e:	009b      	lsls	r3, r3, #2
 8017670:	4413      	add	r3, r2
 8017672:	685b      	ldr	r3, [r3, #4]
 8017674:	68db      	ldr	r3, [r3, #12]
 8017676:	7afa      	ldrb	r2, [r7, #11]
 8017678:	4610      	mov	r0, r2
 801767a:	4798      	blx	r3
 801767c:	4603      	mov	r3, r0
 801767e:	2b00      	cmp	r3, #0
 8017680:	d00b      	beq.n	801769a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8017682:	7af9      	ldrb	r1, [r7, #11]
 8017684:	2327      	movs	r3, #39	@ 0x27
 8017686:	2202      	movs	r2, #2
 8017688:	68f8      	ldr	r0, [r7, #12]
 801768a:	f7ff fc91 	bl	8016fb0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801768e:	697b      	ldr	r3, [r7, #20]
 8017690:	2205      	movs	r2, #5
 8017692:	721a      	strb	r2, [r3, #8]
      return -1;
 8017694:	f04f 33ff 	mov.w	r3, #4294967295
 8017698:	e06e      	b.n	8017778 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	3302      	adds	r3, #2
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	3303      	adds	r3, #3
 80176a6:	781b      	ldrb	r3, [r3, #0]
 80176a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	3304      	adds	r3, #4
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80176b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80176b6:	687a      	ldr	r2, [r7, #4]
 80176b8:	3205      	adds	r2, #5
 80176ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80176bc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80176be:	697b      	ldr	r3, [r7, #20]
 80176c0:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	3306      	adds	r3, #6
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	3307      	adds	r3, #7
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176d4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	3308      	adds	r3, #8
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80176de:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80176e0:	687a      	ldr	r2, [r7, #4]
 80176e2:	3209      	adds	r2, #9
 80176e4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80176e6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80176e8:	697b      	ldr	r3, [r7, #20]
 80176ea:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80176ee:	697b      	ldr	r3, [r7, #20]
 80176f0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80176fa:	7af9      	ldrb	r1, [r7, #11]
 80176fc:	68f8      	ldr	r0, [r7, #12]
 80176fe:	f000 f87e 	bl	80177fe <SCSI_CheckAddressRange>
 8017702:	4603      	mov	r3, r0
 8017704:	2b00      	cmp	r3, #0
 8017706:	da02      	bge.n	801770e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8017708:	f04f 33ff 	mov.w	r3, #4294967295
 801770c:	e034      	b.n	8017778 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801770e:	697b      	ldr	r3, [r7, #20]
 8017710:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017714:	697a      	ldr	r2, [r7, #20]
 8017716:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801771a:	fb02 f303 	mul.w	r3, r2, r3
 801771e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8017720:	697b      	ldr	r3, [r7, #20]
 8017722:	f8d3 3818 	ldr.w	r3, [r3, #2072]	@ 0x818
 8017726:	693a      	ldr	r2, [r7, #16]
 8017728:	429a      	cmp	r2, r3
 801772a:	d00a      	beq.n	8017742 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801772c:	697b      	ldr	r3, [r7, #20]
 801772e:	f893 181d 	ldrb.w	r1, [r3, #2077]	@ 0x81d
 8017732:	2320      	movs	r3, #32
 8017734:	2205      	movs	r2, #5
 8017736:	68f8      	ldr	r0, [r7, #12]
 8017738:	f7ff fc3a 	bl	8016fb0 <SCSI_SenseCode>
      return -1;
 801773c:	f04f 33ff 	mov.w	r3, #4294967295
 8017740:	e01a      	b.n	8017778 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8017742:	693b      	ldr	r3, [r7, #16]
 8017744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017748:	bf28      	it	cs
 801774a:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 801774e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8017750:	697b      	ldr	r3, [r7, #20]
 8017752:	2201      	movs	r2, #1
 8017754:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8017756:	4b0a      	ldr	r3, [pc, #40]	@ (8017780 <SCSI_Write12+0x1c8>)
 8017758:	7819      	ldrb	r1, [r3, #0]
 801775a:	697b      	ldr	r3, [r7, #20]
 801775c:	f103 0210 	add.w	r2, r3, #16
 8017760:	693b      	ldr	r3, [r7, #16]
 8017762:	68f8      	ldr	r0, [r7, #12]
 8017764:	f005 ffc7 	bl	801d6f6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8017768:	2300      	movs	r3, #0
 801776a:	e005      	b.n	8017778 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 801776c:	7afb      	ldrb	r3, [r7, #11]
 801776e:	4619      	mov	r1, r3
 8017770:	68f8      	ldr	r0, [r7, #12]
 8017772:	f000 f8f7 	bl	8017964 <SCSI_ProcessWrite>
 8017776:	4603      	mov	r3, r0
}
 8017778:	4618      	mov	r0, r3
 801777a:	3718      	adds	r7, #24
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	200000af 	.word	0x200000af

08017784 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b086      	sub	sp, #24
 8017788:	af00      	add	r7, sp, #0
 801778a:	60f8      	str	r0, [r7, #12]
 801778c:	460b      	mov	r3, r1
 801778e:	607a      	str	r2, [r7, #4]
 8017790:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	32b0      	adds	r2, #176	@ 0xb0
 801779c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80177a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d102      	bne.n	80177ae <SCSI_Verify10+0x2a>
  {
    return -1;
 80177a8:	f04f 33ff 	mov.w	r3, #4294967295
 80177ac:	e023      	b.n	80177f6 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	3301      	adds	r3, #1
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	f003 0302 	and.w	r3, r3, #2
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d008      	beq.n	80177ce <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80177bc:	7af9      	ldrb	r1, [r7, #11]
 80177be:	2324      	movs	r3, #36	@ 0x24
 80177c0:	2205      	movs	r2, #5
 80177c2:	68f8      	ldr	r0, [r7, #12]
 80177c4:	f7ff fbf4 	bl	8016fb0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80177c8:	f04f 33ff 	mov.w	r3, #4294967295
 80177cc:	e013      	b.n	80177f6 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80177ce:	697b      	ldr	r3, [r7, #20]
 80177d0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80177d4:	697b      	ldr	r3, [r7, #20]
 80177d6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80177da:	7af9      	ldrb	r1, [r7, #11]
 80177dc:	68f8      	ldr	r0, [r7, #12]
 80177de:	f000 f80e 	bl	80177fe <SCSI_CheckAddressRange>
 80177e2:	4603      	mov	r3, r0
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	da02      	bge.n	80177ee <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80177e8:	f04f 33ff 	mov.w	r3, #4294967295
 80177ec:	e003      	b.n	80177f6 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2200      	movs	r2, #0
 80177f2:	60da      	str	r2, [r3, #12]

  return 0;
 80177f4:	2300      	movs	r3, #0
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3718      	adds	r7, #24
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}

080177fe <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80177fe:	b580      	push	{r7, lr}
 8017800:	b086      	sub	sp, #24
 8017802:	af00      	add	r7, sp, #0
 8017804:	60f8      	str	r0, [r7, #12]
 8017806:	607a      	str	r2, [r7, #4]
 8017808:	603b      	str	r3, [r7, #0]
 801780a:	460b      	mov	r3, r1
 801780c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	32b0      	adds	r2, #176	@ 0xb0
 8017818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801781c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d102      	bne.n	801782a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8017824:	f04f 33ff 	mov.w	r3, #4294967295
 8017828:	e011      	b.n	801784e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	683b      	ldr	r3, [r7, #0]
 801782e:	441a      	add	r2, r3
 8017830:	697b      	ldr	r3, [r7, #20]
 8017832:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
 8017836:	429a      	cmp	r2, r3
 8017838:	d908      	bls.n	801784c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801783a:	7af9      	ldrb	r1, [r7, #11]
 801783c:	2321      	movs	r3, #33	@ 0x21
 801783e:	2205      	movs	r2, #5
 8017840:	68f8      	ldr	r0, [r7, #12]
 8017842:	f7ff fbb5 	bl	8016fb0 <SCSI_SenseCode>
    return -1;
 8017846:	f04f 33ff 	mov.w	r3, #4294967295
 801784a:	e000      	b.n	801784e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 801784c:	2300      	movs	r3, #0
}
 801784e:	4618      	mov	r0, r3
 8017850:	3718      	adds	r7, #24
 8017852:	46bd      	mov	sp, r7
 8017854:	bd80      	pop	{r7, pc}
	...

08017858 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8017858:	b590      	push	{r4, r7, lr}
 801785a:	b085      	sub	sp, #20
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
 8017860:	460b      	mov	r3, r1
 8017862:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	32b0      	adds	r2, #176	@ 0xb0
 801786e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017872:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d102      	bne.n	8017880 <SCSI_ProcessRead+0x28>
  {
    return -1;
 801787a:	f04f 33ff 	mov.w	r3, #4294967295
 801787e:	e06a      	b.n	8017956 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017886:	68fa      	ldr	r2, [r7, #12]
 8017888:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 801788c:	fb02 f303 	mul.w	r3, r2, r3
 8017890:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8017892:	68bb      	ldr	r3, [r7, #8]
 8017894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017898:	bf28      	it	cs
 801789a:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 801789e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80178a6:	687a      	ldr	r2, [r7, #4]
 80178a8:	33b0      	adds	r3, #176	@ 0xb0
 80178aa:	009b      	lsls	r3, r3, #2
 80178ac:	4413      	add	r3, r2
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	691c      	ldr	r4, [r3, #16]
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	f103 0110 	add.w	r1, r3, #16
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80178c4:	4618      	mov	r0, r3
 80178c6:	68bb      	ldr	r3, [r7, #8]
 80178c8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	78f8      	ldrb	r0, [r7, #3]
 80178d0:	47a0      	blx	r4
 80178d2:	4603      	mov	r3, r0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	da08      	bge.n	80178ea <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80178d8:	78f9      	ldrb	r1, [r7, #3]
 80178da:	2311      	movs	r3, #17
 80178dc:	2204      	movs	r2, #4
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f7ff fb66 	bl	8016fb0 <SCSI_SenseCode>
    return -1;
 80178e4:	f04f 33ff 	mov.w	r3, #4294967295
 80178e8:	e035      	b.n	8017956 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80178ea:	4b1d      	ldr	r3, [pc, #116]	@ (8017960 <SCSI_ProcessRead+0x108>)
 80178ec:	7819      	ldrb	r1, [r3, #0]
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	f103 0210 	add.w	r2, r3, #16
 80178f4:	68bb      	ldr	r3, [r7, #8]
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f005 fedc 	bl	801d6b4 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017908:	4619      	mov	r1, r3
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	fbb3 f3f1 	udiv	r3, r3, r1
 8017910:	441a      	add	r2, r3
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017924:	4619      	mov	r1, r3
 8017926:	68bb      	ldr	r3, [r7, #8]
 8017928:	fbb3 f3f1 	udiv	r3, r3, r1
 801792c:	1ad2      	subs	r2, r2, r3
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 801793a:	68bb      	ldr	r3, [r7, #8]
 801793c:	1ad2      	subs	r2, r2, r3
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 801794a:	2b00      	cmp	r3, #0
 801794c:	d102      	bne.n	8017954 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	2203      	movs	r2, #3
 8017952:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8017954:	2300      	movs	r3, #0
}
 8017956:	4618      	mov	r0, r3
 8017958:	3714      	adds	r7, #20
 801795a:	46bd      	mov	sp, r7
 801795c:	bd90      	pop	{r4, r7, pc}
 801795e:	bf00      	nop
 8017960:	200000ae 	.word	0x200000ae

08017964 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8017964:	b590      	push	{r4, r7, lr}
 8017966:	b085      	sub	sp, #20
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
 801796c:	460b      	mov	r3, r1
 801796e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	32b0      	adds	r2, #176	@ 0xb0
 801797a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801797e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d102      	bne.n	801798c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8017986:	f04f 33ff 	mov.w	r3, #4294967295
 801798a:	e07a      	b.n	8017a82 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017992:	68fa      	ldr	r2, [r7, #12]
 8017994:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017998:	fb02 f303 	mul.w	r3, r2, r3
 801799c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80179a4:	bf28      	it	cs
 80179a6:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 80179aa:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80179b2:	687a      	ldr	r2, [r7, #4]
 80179b4:	33b0      	adds	r3, #176	@ 0xb0
 80179b6:	009b      	lsls	r3, r3, #2
 80179b8:	4413      	add	r3, r2
 80179ba:	685b      	ldr	r3, [r3, #4]
 80179bc:	695c      	ldr	r4, [r3, #20]
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	f103 0110 	add.w	r1, r3, #16
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 80179d0:	4618      	mov	r0, r3
 80179d2:	68bb      	ldr	r3, [r7, #8]
 80179d4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80179d8:	b29b      	uxth	r3, r3
 80179da:	78f8      	ldrb	r0, [r7, #3]
 80179dc:	47a0      	blx	r4
 80179de:	4603      	mov	r3, r0
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	da08      	bge.n	80179f6 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80179e4:	78f9      	ldrb	r1, [r7, #3]
 80179e6:	2303      	movs	r3, #3
 80179e8:	2204      	movs	r2, #4
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f7ff fae0 	bl	8016fb0 <SCSI_SenseCode>
    return -1;
 80179f0:	f04f 33ff 	mov.w	r3, #4294967295
 80179f4:	e045      	b.n	8017a82 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	f8d3 286c 	ldr.w	r2, [r3, #2156]	@ 0x86c
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a02:	4619      	mov	r1, r3
 8017a04:	68bb      	ldr	r3, [r7, #8]
 8017a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a0a:	441a      	add	r2, r3
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	f8c3 286c 	str.w	r2, [r3, #2156]	@ 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	f8d3 2870 	ldr.w	r2, [r3, #2160]	@ 0x870
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	@ 0x864
 8017a1e:	4619      	mov	r1, r3
 8017a20:	68bb      	ldr	r3, [r7, #8]
 8017a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8017a26:	1ad2      	subs	r2, r2, r3
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	f8c3 2870 	str.w	r2, [r3, #2160]	@ 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	f8d3 2838 	ldr.w	r2, [r3, #2104]	@ 0x838
 8017a34:	68bb      	ldr	r3, [r7, #8]
 8017a36:	1ad2      	subs	r2, r2, r3
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	f8c3 2838 	str.w	r2, [r3, #2104]	@ 0x838

  if (hmsc->scsi_blk_len == 0U)
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d104      	bne.n	8017a52 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8017a48:	2100      	movs	r1, #0
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f7fe fce2 	bl	8016414 <MSC_BOT_SendCSW>
 8017a50:	e016      	b.n	8017a80 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 8017a58:	68fa      	ldr	r2, [r7, #12]
 8017a5a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	@ 0x864
 8017a5e:	fb02 f303 	mul.w	r3, r2, r3
 8017a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017a66:	bf28      	it	cs
 8017a68:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8017a6c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8017a6e:	4b07      	ldr	r3, [pc, #28]	@ (8017a8c <SCSI_ProcessWrite+0x128>)
 8017a70:	7819      	ldrb	r1, [r3, #0]
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	f103 0210 	add.w	r2, r3, #16
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	6878      	ldr	r0, [r7, #4]
 8017a7c:	f005 fe3b 	bl	801d6f6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8017a80:	2300      	movs	r3, #0
}
 8017a82:	4618      	mov	r0, r3
 8017a84:	3714      	adds	r7, #20
 8017a86:	46bd      	mov	sp, r7
 8017a88:	bd90      	pop	{r4, r7, pc}
 8017a8a:	bf00      	nop
 8017a8c:	200000af 	.word	0x200000af

08017a90 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8017a90:	b480      	push	{r7}
 8017a92:	b087      	sub	sp, #28
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	60f8      	str	r0, [r7, #12]
 8017a98:	60b9      	str	r1, [r7, #8]
 8017a9a:	4613      	mov	r3, r2
 8017a9c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8017a9e:	88fb      	ldrh	r3, [r7, #6]
 8017aa0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d102      	bne.n	8017aae <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8017aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8017aac:	e013      	b.n	8017ad6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8017aae:	8afa      	ldrh	r2, [r7, #22]
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8017ab4:	e00b      	b.n	8017ace <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8017ab6:	8afb      	ldrh	r3, [r7, #22]
 8017ab8:	3b01      	subs	r3, #1
 8017aba:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8017abc:	8afb      	ldrh	r3, [r7, #22]
 8017abe:	68ba      	ldr	r2, [r7, #8]
 8017ac0:	441a      	add	r2, r3
 8017ac2:	8afb      	ldrh	r3, [r7, #22]
 8017ac4:	7811      	ldrb	r1, [r2, #0]
 8017ac6:	68fa      	ldr	r2, [r7, #12]
 8017ac8:	4413      	add	r3, r2
 8017aca:	460a      	mov	r2, r1
 8017acc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8017ace:	8afb      	ldrh	r3, [r7, #22]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d1f0      	bne.n	8017ab6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8017ad4:	2300      	movs	r3, #0
}
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	371c      	adds	r7, #28
 8017ada:	46bd      	mov	sp, r7
 8017adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae0:	4770      	bx	lr

08017ae2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017ae2:	b580      	push	{r7, lr}
 8017ae4:	b086      	sub	sp, #24
 8017ae6:	af00      	add	r7, sp, #0
 8017ae8:	60f8      	str	r0, [r7, #12]
 8017aea:	60b9      	str	r1, [r7, #8]
 8017aec:	4613      	mov	r3, r2
 8017aee:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d101      	bne.n	8017afa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017af6:	2303      	movs	r3, #3
 8017af8:	e01f      	b.n	8017b3a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	2200      	movs	r2, #0
 8017afe:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	2200      	movs	r2, #0
 8017b06:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	2200      	movs	r2, #0
 8017b0e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017b12:	68bb      	ldr	r3, [r7, #8]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d003      	beq.n	8017b20 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	68ba      	ldr	r2, [r7, #8]
 8017b1c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	2201      	movs	r2, #1
 8017b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	79fa      	ldrb	r2, [r7, #7]
 8017b2c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017b2e:	68f8      	ldr	r0, [r7, #12]
 8017b30:	f005 fc36 	bl	801d3a0 <USBD_LL_Init>
 8017b34:	4603      	mov	r3, r0
 8017b36:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	3718      	adds	r7, #24
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	bd80      	pop	{r7, pc}

08017b42 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8017b42:	b580      	push	{r7, lr}
 8017b44:	b084      	sub	sp, #16
 8017b46:	af00      	add	r7, sp, #0
 8017b48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f005 fcaa 	bl	801d4a4 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	2201      	movs	r2, #1
 8017b54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d009      	beq.n	8017b76 <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017b68:	685b      	ldr	r3, [r3, #4]
 8017b6a:	687a      	ldr	r2, [r7, #4]
 8017b6c:	6852      	ldr	r2, [r2, #4]
 8017b6e:	b2d2      	uxtb	r2, r2
 8017b70:	4611      	mov	r1, r2
 8017b72:	6878      	ldr	r0, [r7, #4]
 8017b74:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	2200      	movs	r2, #0
 8017b7a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	2200      	movs	r2, #0
 8017b82:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  pdev->pConfDesc = NULL;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	2200      	movs	r2, #0
 8017b8a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8017b8e:	6878      	ldr	r0, [r7, #4]
 8017b90:	f005 fc52 	bl	801d438 <USBD_LL_DeInit>
 8017b94:	4603      	mov	r3, r0
 8017b96:	73fb      	strb	r3, [r7, #15]

  return ret;
 8017b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	3710      	adds	r7, #16
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}

08017ba2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017ba2:	b580      	push	{r7, lr}
 8017ba4:	b084      	sub	sp, #16
 8017ba6:	af00      	add	r7, sp, #0
 8017ba8:	6078      	str	r0, [r7, #4]
 8017baa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017bac:	2300      	movs	r3, #0
 8017bae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d101      	bne.n	8017bba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017bb6:	2303      	movs	r3, #3
 8017bb8:	e025      	b.n	8017c06 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	683a      	ldr	r2, [r7, #0]
 8017bbe:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	32ae      	adds	r2, #174	@ 0xae
 8017bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d00f      	beq.n	8017bf6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	32ae      	adds	r2, #174	@ 0xae
 8017be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017be6:	f107 020e 	add.w	r2, r7, #14
 8017bea:	4610      	mov	r0, r2
 8017bec:	4798      	blx	r3
 8017bee:	4602      	mov	r2, r0
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017bfc:	1c5a      	adds	r2, r3, #1
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8017c04:	2300      	movs	r3, #0
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3710      	adds	r7, #16
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}

08017c0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017c0e:	b580      	push	{r7, lr}
 8017c10:	b082      	sub	sp, #8
 8017c12:	af00      	add	r7, sp, #0
 8017c14:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f005 fc29 	bl	801d46e <USBD_LL_Start>
 8017c1c:	4603      	mov	r3, r0
}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3708      	adds	r7, #8
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}

08017c26 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8017c26:	b580      	push	{r7, lr}
 8017c28:	b082      	sub	sp, #8
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f005 fc38 	bl	801d4a4 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d009      	beq.n	8017c52 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c44:	685b      	ldr	r3, [r3, #4]
 8017c46:	687a      	ldr	r2, [r7, #4]
 8017c48:	6852      	ldr	r2, [r2, #4]
 8017c4a:	b2d2      	uxtb	r2, r2
 8017c4c:	4611      	mov	r1, r2
 8017c4e:	6878      	ldr	r0, [r7, #4]
 8017c50:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8017c52:	2300      	movs	r3, #0
}
 8017c54:	4618      	mov	r0, r3
 8017c56:	3708      	adds	r7, #8
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	bd80      	pop	{r7, pc}

08017c5c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017c5c:	b480      	push	{r7}
 8017c5e:	b083      	sub	sp, #12
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017c64:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8017c66:	4618      	mov	r0, r3
 8017c68:	370c      	adds	r7, #12
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c70:	4770      	bx	lr

08017c72 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017c72:	b580      	push	{r7, lr}
 8017c74:	b084      	sub	sp, #16
 8017c76:	af00      	add	r7, sp, #0
 8017c78:	6078      	str	r0, [r7, #4]
 8017c7a:	460b      	mov	r3, r1
 8017c7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c7e:	2300      	movs	r3, #0
 8017c80:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d009      	beq.n	8017ca0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	78fa      	ldrb	r2, [r7, #3]
 8017c96:	4611      	mov	r1, r2
 8017c98:	6878      	ldr	r0, [r7, #4]
 8017c9a:	4798      	blx	r3
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3710      	adds	r7, #16
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b084      	sub	sp, #16
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
 8017cb2:	460b      	mov	r3, r1
 8017cb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017cc0:	685b      	ldr	r3, [r3, #4]
 8017cc2:	78fa      	ldrb	r2, [r7, #3]
 8017cc4:	4611      	mov	r1, r2
 8017cc6:	6878      	ldr	r0, [r7, #4]
 8017cc8:	4798      	blx	r3
 8017cca:	4603      	mov	r3, r0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d001      	beq.n	8017cd4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8017cd0:	2303      	movs	r3, #3
 8017cd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8017cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3710      	adds	r7, #16
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}

08017cde <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017cde:	b580      	push	{r7, lr}
 8017ce0:	b084      	sub	sp, #16
 8017ce2:	af00      	add	r7, sp, #0
 8017ce4:	6078      	str	r0, [r7, #4]
 8017ce6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017cee:	6839      	ldr	r1, [r7, #0]
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	f001 f90c 	bl	8018f0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	2201      	movs	r2, #1
 8017cfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017d04:	461a      	mov	r2, r3
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d12:	f003 031f 	and.w	r3, r3, #31
 8017d16:	2b02      	cmp	r3, #2
 8017d18:	d01a      	beq.n	8017d50 <USBD_LL_SetupStage+0x72>
 8017d1a:	2b02      	cmp	r3, #2
 8017d1c:	d822      	bhi.n	8017d64 <USBD_LL_SetupStage+0x86>
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d002      	beq.n	8017d28 <USBD_LL_SetupStage+0x4a>
 8017d22:	2b01      	cmp	r3, #1
 8017d24:	d00a      	beq.n	8017d3c <USBD_LL_SetupStage+0x5e>
 8017d26:	e01d      	b.n	8017d64 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d2e:	4619      	mov	r1, r3
 8017d30:	6878      	ldr	r0, [r7, #4]
 8017d32:	f000 fb63 	bl	80183fc <USBD_StdDevReq>
 8017d36:	4603      	mov	r3, r0
 8017d38:	73fb      	strb	r3, [r7, #15]
      break;
 8017d3a:	e020      	b.n	8017d7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d42:	4619      	mov	r1, r3
 8017d44:	6878      	ldr	r0, [r7, #4]
 8017d46:	f000 fbcb 	bl	80184e0 <USBD_StdItfReq>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8017d4e:	e016      	b.n	8017d7e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017d56:	4619      	mov	r1, r3
 8017d58:	6878      	ldr	r0, [r7, #4]
 8017d5a:	f000 fc2d 	bl	80185b8 <USBD_StdEPReq>
 8017d5e:	4603      	mov	r3, r0
 8017d60:	73fb      	strb	r3, [r7, #15]
      break;
 8017d62:	e00c      	b.n	8017d7e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017d6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017d6e:	b2db      	uxtb	r3, r3
 8017d70:	4619      	mov	r1, r3
 8017d72:	6878      	ldr	r0, [r7, #4]
 8017d74:	f005 fc15 	bl	801d5a2 <USBD_LL_StallEP>
 8017d78:	4603      	mov	r3, r0
 8017d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8017d7c:	bf00      	nop
  }

  return ret;
 8017d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d80:	4618      	mov	r0, r3
 8017d82:	3710      	adds	r7, #16
 8017d84:	46bd      	mov	sp, r7
 8017d86:	bd80      	pop	{r7, pc}

08017d88 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b086      	sub	sp, #24
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	460b      	mov	r3, r1
 8017d92:	607a      	str	r2, [r7, #4]
 8017d94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8017d96:	2300      	movs	r3, #0
 8017d98:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8017d9a:	7afb      	ldrb	r3, [r7, #11]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d16e      	bne.n	8017e7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8017da6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017dae:	2b03      	cmp	r3, #3
 8017db0:	f040 8098 	bne.w	8017ee4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	689a      	ldr	r2, [r3, #8]
 8017db8:	693b      	ldr	r3, [r7, #16]
 8017dba:	68db      	ldr	r3, [r3, #12]
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	d913      	bls.n	8017de8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8017dc0:	693b      	ldr	r3, [r7, #16]
 8017dc2:	689a      	ldr	r2, [r3, #8]
 8017dc4:	693b      	ldr	r3, [r7, #16]
 8017dc6:	68db      	ldr	r3, [r3, #12]
 8017dc8:	1ad2      	subs	r2, r2, r3
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017dce:	693b      	ldr	r3, [r7, #16]
 8017dd0:	68da      	ldr	r2, [r3, #12]
 8017dd2:	693b      	ldr	r3, [r7, #16]
 8017dd4:	689b      	ldr	r3, [r3, #8]
 8017dd6:	4293      	cmp	r3, r2
 8017dd8:	bf28      	it	cs
 8017dda:	4613      	movcs	r3, r2
 8017ddc:	461a      	mov	r2, r3
 8017dde:	6879      	ldr	r1, [r7, #4]
 8017de0:	68f8      	ldr	r0, [r7, #12]
 8017de2:	f001 f96b 	bl	80190bc <USBD_CtlContinueRx>
 8017de6:	e07d      	b.n	8017ee4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017dee:	f003 031f 	and.w	r3, r3, #31
 8017df2:	2b02      	cmp	r3, #2
 8017df4:	d014      	beq.n	8017e20 <USBD_LL_DataOutStage+0x98>
 8017df6:	2b02      	cmp	r3, #2
 8017df8:	d81d      	bhi.n	8017e36 <USBD_LL_DataOutStage+0xae>
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d002      	beq.n	8017e04 <USBD_LL_DataOutStage+0x7c>
 8017dfe:	2b01      	cmp	r3, #1
 8017e00:	d003      	beq.n	8017e0a <USBD_LL_DataOutStage+0x82>
 8017e02:	e018      	b.n	8017e36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017e04:	2300      	movs	r3, #0
 8017e06:	75bb      	strb	r3, [r7, #22]
            break;
 8017e08:	e018      	b.n	8017e3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e10:	b2db      	uxtb	r3, r3
 8017e12:	4619      	mov	r1, r3
 8017e14:	68f8      	ldr	r0, [r7, #12]
 8017e16:	f000 fa64 	bl	80182e2 <USBD_CoreFindIF>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	75bb      	strb	r3, [r7, #22]
            break;
 8017e1e:	e00d      	b.n	8017e3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017e26:	b2db      	uxtb	r3, r3
 8017e28:	4619      	mov	r1, r3
 8017e2a:	68f8      	ldr	r0, [r7, #12]
 8017e2c:	f000 fa66 	bl	80182fc <USBD_CoreFindEP>
 8017e30:	4603      	mov	r3, r0
 8017e32:	75bb      	strb	r3, [r7, #22]
            break;
 8017e34:	e002      	b.n	8017e3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8017e36:	2300      	movs	r3, #0
 8017e38:	75bb      	strb	r3, [r7, #22]
            break;
 8017e3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017e3c:	7dbb      	ldrb	r3, [r7, #22]
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d119      	bne.n	8017e76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017e48:	b2db      	uxtb	r3, r3
 8017e4a:	2b03      	cmp	r3, #3
 8017e4c:	d113      	bne.n	8017e76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017e4e:	7dba      	ldrb	r2, [r7, #22]
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	32ae      	adds	r2, #174	@ 0xae
 8017e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e58:	691b      	ldr	r3, [r3, #16]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d00b      	beq.n	8017e76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017e5e:	7dba      	ldrb	r2, [r7, #22]
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8017e66:	7dba      	ldrb	r2, [r7, #22]
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	32ae      	adds	r2, #174	@ 0xae
 8017e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e70:	691b      	ldr	r3, [r3, #16]
 8017e72:	68f8      	ldr	r0, [r7, #12]
 8017e74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8017e76:	68f8      	ldr	r0, [r7, #12]
 8017e78:	f001 f931 	bl	80190de <USBD_CtlSendStatus>
 8017e7c:	e032      	b.n	8017ee4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017e7e:	7afb      	ldrb	r3, [r7, #11]
 8017e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017e84:	b2db      	uxtb	r3, r3
 8017e86:	4619      	mov	r1, r3
 8017e88:	68f8      	ldr	r0, [r7, #12]
 8017e8a:	f000 fa37 	bl	80182fc <USBD_CoreFindEP>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017e92:	7dbb      	ldrb	r3, [r7, #22]
 8017e94:	2bff      	cmp	r3, #255	@ 0xff
 8017e96:	d025      	beq.n	8017ee4 <USBD_LL_DataOutStage+0x15c>
 8017e98:	7dbb      	ldrb	r3, [r7, #22]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d122      	bne.n	8017ee4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017ea4:	b2db      	uxtb	r3, r3
 8017ea6:	2b03      	cmp	r3, #3
 8017ea8:	d117      	bne.n	8017eda <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8017eaa:	7dba      	ldrb	r2, [r7, #22]
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	32ae      	adds	r2, #174	@ 0xae
 8017eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017eb4:	699b      	ldr	r3, [r3, #24]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d00f      	beq.n	8017eda <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8017eba:	7dba      	ldrb	r2, [r7, #22]
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8017ec2:	7dba      	ldrb	r2, [r7, #22]
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	32ae      	adds	r2, #174	@ 0xae
 8017ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ecc:	699b      	ldr	r3, [r3, #24]
 8017ece:	7afa      	ldrb	r2, [r7, #11]
 8017ed0:	4611      	mov	r1, r2
 8017ed2:	68f8      	ldr	r0, [r7, #12]
 8017ed4:	4798      	blx	r3
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8017eda:	7dfb      	ldrb	r3, [r7, #23]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d001      	beq.n	8017ee4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8017ee0:	7dfb      	ldrb	r3, [r7, #23]
 8017ee2:	e000      	b.n	8017ee6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8017ee4:	2300      	movs	r3, #0
}
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	3718      	adds	r7, #24
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}

08017eee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017eee:	b580      	push	{r7, lr}
 8017ef0:	b086      	sub	sp, #24
 8017ef2:	af00      	add	r7, sp, #0
 8017ef4:	60f8      	str	r0, [r7, #12]
 8017ef6:	460b      	mov	r3, r1
 8017ef8:	607a      	str	r2, [r7, #4]
 8017efa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017efc:	7afb      	ldrb	r3, [r7, #11]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d16f      	bne.n	8017fe2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	3314      	adds	r3, #20
 8017f06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017f0e:	2b02      	cmp	r3, #2
 8017f10:	d15a      	bne.n	8017fc8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017f12:	693b      	ldr	r3, [r7, #16]
 8017f14:	689a      	ldr	r2, [r3, #8]
 8017f16:	693b      	ldr	r3, [r7, #16]
 8017f18:	68db      	ldr	r3, [r3, #12]
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d914      	bls.n	8017f48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017f1e:	693b      	ldr	r3, [r7, #16]
 8017f20:	689a      	ldr	r2, [r3, #8]
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	68db      	ldr	r3, [r3, #12]
 8017f26:	1ad2      	subs	r2, r2, r3
 8017f28:	693b      	ldr	r3, [r7, #16]
 8017f2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017f2c:	693b      	ldr	r3, [r7, #16]
 8017f2e:	689b      	ldr	r3, [r3, #8]
 8017f30:	461a      	mov	r2, r3
 8017f32:	6879      	ldr	r1, [r7, #4]
 8017f34:	68f8      	ldr	r0, [r7, #12]
 8017f36:	f001 f8b0 	bl	801909a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	2100      	movs	r1, #0
 8017f40:	68f8      	ldr	r0, [r7, #12]
 8017f42:	f005 fbd8 	bl	801d6f6 <USBD_LL_PrepareReceive>
 8017f46:	e03f      	b.n	8017fc8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	68da      	ldr	r2, [r3, #12]
 8017f4c:	693b      	ldr	r3, [r7, #16]
 8017f4e:	689b      	ldr	r3, [r3, #8]
 8017f50:	429a      	cmp	r2, r3
 8017f52:	d11c      	bne.n	8017f8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017f54:	693b      	ldr	r3, [r7, #16]
 8017f56:	685a      	ldr	r2, [r3, #4]
 8017f58:	693b      	ldr	r3, [r7, #16]
 8017f5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d316      	bcc.n	8017f8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017f60:	693b      	ldr	r3, [r7, #16]
 8017f62:	685a      	ldr	r2, [r3, #4]
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d20f      	bcs.n	8017f8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017f6e:	2200      	movs	r2, #0
 8017f70:	2100      	movs	r1, #0
 8017f72:	68f8      	ldr	r0, [r7, #12]
 8017f74:	f001 f891 	bl	801909a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017f80:	2300      	movs	r3, #0
 8017f82:	2200      	movs	r2, #0
 8017f84:	2100      	movs	r1, #0
 8017f86:	68f8      	ldr	r0, [r7, #12]
 8017f88:	f005 fbb5 	bl	801d6f6 <USBD_LL_PrepareReceive>
 8017f8c:	e01c      	b.n	8017fc8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017f94:	b2db      	uxtb	r3, r3
 8017f96:	2b03      	cmp	r3, #3
 8017f98:	d10f      	bne.n	8017fba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017fa0:	68db      	ldr	r3, [r3, #12]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d009      	beq.n	8017fba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	2200      	movs	r2, #0
 8017faa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017fb4:	68db      	ldr	r3, [r3, #12]
 8017fb6:	68f8      	ldr	r0, [r7, #12]
 8017fb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8017fba:	2180      	movs	r1, #128	@ 0x80
 8017fbc:	68f8      	ldr	r0, [r7, #12]
 8017fbe:	f005 faf0 	bl	801d5a2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8017fc2:	68f8      	ldr	r0, [r7, #12]
 8017fc4:	f001 f89e 	bl	8019104 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d03a      	beq.n	8018048 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8017fd2:	68f8      	ldr	r0, [r7, #12]
 8017fd4:	f7ff fe42 	bl	8017c5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	2200      	movs	r2, #0
 8017fdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8017fe0:	e032      	b.n	8018048 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8017fe2:	7afb      	ldrb	r3, [r7, #11]
 8017fe4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017fe8:	b2db      	uxtb	r3, r3
 8017fea:	4619      	mov	r1, r3
 8017fec:	68f8      	ldr	r0, [r7, #12]
 8017fee:	f000 f985 	bl	80182fc <USBD_CoreFindEP>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017ff6:	7dfb      	ldrb	r3, [r7, #23]
 8017ff8:	2bff      	cmp	r3, #255	@ 0xff
 8017ffa:	d025      	beq.n	8018048 <USBD_LL_DataInStage+0x15a>
 8017ffc:	7dfb      	ldrb	r3, [r7, #23]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d122      	bne.n	8018048 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018008:	b2db      	uxtb	r3, r3
 801800a:	2b03      	cmp	r3, #3
 801800c:	d11c      	bne.n	8018048 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801800e:	7dfa      	ldrb	r2, [r7, #23]
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	32ae      	adds	r2, #174	@ 0xae
 8018014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018018:	695b      	ldr	r3, [r3, #20]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d014      	beq.n	8018048 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801801e:	7dfa      	ldrb	r2, [r7, #23]
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8018026:	7dfa      	ldrb	r2, [r7, #23]
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	32ae      	adds	r2, #174	@ 0xae
 801802c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018030:	695b      	ldr	r3, [r3, #20]
 8018032:	7afa      	ldrb	r2, [r7, #11]
 8018034:	4611      	mov	r1, r2
 8018036:	68f8      	ldr	r0, [r7, #12]
 8018038:	4798      	blx	r3
 801803a:	4603      	mov	r3, r0
 801803c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801803e:	7dbb      	ldrb	r3, [r7, #22]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d001      	beq.n	8018048 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018044:	7dbb      	ldrb	r3, [r7, #22]
 8018046:	e000      	b.n	801804a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018048:	2300      	movs	r3, #0
}
 801804a:	4618      	mov	r0, r3
 801804c:	3718      	adds	r7, #24
 801804e:	46bd      	mov	sp, r7
 8018050:	bd80      	pop	{r7, pc}

08018052 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018052:	b580      	push	{r7, lr}
 8018054:	b084      	sub	sp, #16
 8018056:	af00      	add	r7, sp, #0
 8018058:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801805a:	2300      	movs	r3, #0
 801805c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	2201      	movs	r2, #1
 8018062:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	2200      	movs	r2, #0
 801806a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2200      	movs	r2, #0
 8018072:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	2200      	movs	r2, #0
 8018078:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2200      	movs	r2, #0
 8018080:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801808a:	2b00      	cmp	r3, #0
 801808c:	d014      	beq.n	80180b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018094:	685b      	ldr	r3, [r3, #4]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d00e      	beq.n	80180b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80180a0:	685b      	ldr	r3, [r3, #4]
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	6852      	ldr	r2, [r2, #4]
 80180a6:	b2d2      	uxtb	r2, r2
 80180a8:	4611      	mov	r1, r2
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	4798      	blx	r3
 80180ae:	4603      	mov	r3, r0
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d001      	beq.n	80180b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80180b4:	2303      	movs	r3, #3
 80180b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180b8:	2340      	movs	r3, #64	@ 0x40
 80180ba:	2200      	movs	r2, #0
 80180bc:	2100      	movs	r1, #0
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	f005 fa0b 	bl	801d4da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	2201      	movs	r2, #1
 80180c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2240      	movs	r2, #64	@ 0x40
 80180d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80180d4:	2340      	movs	r3, #64	@ 0x40
 80180d6:	2200      	movs	r2, #0
 80180d8:	2180      	movs	r1, #128	@ 0x80
 80180da:	6878      	ldr	r0, [r7, #4]
 80180dc:	f005 f9fd 	bl	801d4da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2201      	movs	r2, #1
 80180e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2240      	movs	r2, #64	@ 0x40
 80180ea:	621a      	str	r2, [r3, #32]

  return ret;
 80180ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80180ee:	4618      	mov	r0, r3
 80180f0:	3710      	adds	r7, #16
 80180f2:	46bd      	mov	sp, r7
 80180f4:	bd80      	pop	{r7, pc}

080180f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80180f6:	b480      	push	{r7}
 80180f8:	b083      	sub	sp, #12
 80180fa:	af00      	add	r7, sp, #0
 80180fc:	6078      	str	r0, [r7, #4]
 80180fe:	460b      	mov	r3, r1
 8018100:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	78fa      	ldrb	r2, [r7, #3]
 8018106:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018108:	2300      	movs	r3, #0
}
 801810a:	4618      	mov	r0, r3
 801810c:	370c      	adds	r7, #12
 801810e:	46bd      	mov	sp, r7
 8018110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018114:	4770      	bx	lr

08018116 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018116:	b480      	push	{r7}
 8018118:	b083      	sub	sp, #12
 801811a:	af00      	add	r7, sp, #0
 801811c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018124:	b2db      	uxtb	r3, r3
 8018126:	2b04      	cmp	r3, #4
 8018128:	d006      	beq.n	8018138 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018130:	b2da      	uxtb	r2, r3
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2204      	movs	r2, #4
 801813c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8018140:	2300      	movs	r3, #0
}
 8018142:	4618      	mov	r0, r3
 8018144:	370c      	adds	r7, #12
 8018146:	46bd      	mov	sp, r7
 8018148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801814c:	4770      	bx	lr

0801814e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801814e:	b480      	push	{r7}
 8018150:	b083      	sub	sp, #12
 8018152:	af00      	add	r7, sp, #0
 8018154:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801815c:	b2db      	uxtb	r3, r3
 801815e:	2b04      	cmp	r3, #4
 8018160:	d106      	bne.n	8018170 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8018168:	b2da      	uxtb	r2, r3
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8018170:	2300      	movs	r3, #0
}
 8018172:	4618      	mov	r0, r3
 8018174:	370c      	adds	r7, #12
 8018176:	46bd      	mov	sp, r7
 8018178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817c:	4770      	bx	lr

0801817e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801817e:	b580      	push	{r7, lr}
 8018180:	b082      	sub	sp, #8
 8018182:	af00      	add	r7, sp, #0
 8018184:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801818c:	b2db      	uxtb	r3, r3
 801818e:	2b03      	cmp	r3, #3
 8018190:	d110      	bne.n	80181b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018198:	2b00      	cmp	r3, #0
 801819a:	d00b      	beq.n	80181b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181a2:	69db      	ldr	r3, [r3, #28]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d005      	beq.n	80181b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80181ae:	69db      	ldr	r3, [r3, #28]
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80181b4:	2300      	movs	r3, #0
}
 80181b6:	4618      	mov	r0, r3
 80181b8:	3708      	adds	r7, #8
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}

080181be <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80181be:	b580      	push	{r7, lr}
 80181c0:	b082      	sub	sp, #8
 80181c2:	af00      	add	r7, sp, #0
 80181c4:	6078      	str	r0, [r7, #4]
 80181c6:	460b      	mov	r3, r1
 80181c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	32ae      	adds	r2, #174	@ 0xae
 80181d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d101      	bne.n	80181e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80181dc:	2303      	movs	r3, #3
 80181de:	e01c      	b.n	801821a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181e6:	b2db      	uxtb	r3, r3
 80181e8:	2b03      	cmp	r3, #3
 80181ea:	d115      	bne.n	8018218 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	32ae      	adds	r2, #174	@ 0xae
 80181f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181fa:	6a1b      	ldr	r3, [r3, #32]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d00b      	beq.n	8018218 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	32ae      	adds	r2, #174	@ 0xae
 801820a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801820e:	6a1b      	ldr	r3, [r3, #32]
 8018210:	78fa      	ldrb	r2, [r7, #3]
 8018212:	4611      	mov	r1, r2
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018218:	2300      	movs	r3, #0
}
 801821a:	4618      	mov	r0, r3
 801821c:	3708      	adds	r7, #8
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}

08018222 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018222:	b580      	push	{r7, lr}
 8018224:	b082      	sub	sp, #8
 8018226:	af00      	add	r7, sp, #0
 8018228:	6078      	str	r0, [r7, #4]
 801822a:	460b      	mov	r3, r1
 801822c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	32ae      	adds	r2, #174	@ 0xae
 8018238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d101      	bne.n	8018244 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018240:	2303      	movs	r3, #3
 8018242:	e01c      	b.n	801827e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801824a:	b2db      	uxtb	r3, r3
 801824c:	2b03      	cmp	r3, #3
 801824e:	d115      	bne.n	801827c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	32ae      	adds	r2, #174	@ 0xae
 801825a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801825e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018260:	2b00      	cmp	r3, #0
 8018262:	d00b      	beq.n	801827c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	32ae      	adds	r2, #174	@ 0xae
 801826e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018274:	78fa      	ldrb	r2, [r7, #3]
 8018276:	4611      	mov	r1, r2
 8018278:	6878      	ldr	r0, [r7, #4]
 801827a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801827c:	2300      	movs	r3, #0
}
 801827e:	4618      	mov	r0, r3
 8018280:	3708      	adds	r7, #8
 8018282:	46bd      	mov	sp, r7
 8018284:	bd80      	pop	{r7, pc}

08018286 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018286:	b480      	push	{r7}
 8018288:	b083      	sub	sp, #12
 801828a:	af00      	add	r7, sp, #0
 801828c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801828e:	2300      	movs	r3, #0
}
 8018290:	4618      	mov	r0, r3
 8018292:	370c      	adds	r7, #12
 8018294:	46bd      	mov	sp, r7
 8018296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829a:	4770      	bx	lr

0801829c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b084      	sub	sp, #16
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80182a4:	2300      	movs	r3, #0
 80182a6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2201      	movs	r2, #1
 80182ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d00e      	beq.n	80182d8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80182c0:	685b      	ldr	r3, [r3, #4]
 80182c2:	687a      	ldr	r2, [r7, #4]
 80182c4:	6852      	ldr	r2, [r2, #4]
 80182c6:	b2d2      	uxtb	r2, r2
 80182c8:	4611      	mov	r1, r2
 80182ca:	6878      	ldr	r0, [r7, #4]
 80182cc:	4798      	blx	r3
 80182ce:	4603      	mov	r3, r0
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d001      	beq.n	80182d8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80182d4:	2303      	movs	r3, #3
 80182d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80182d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80182da:	4618      	mov	r0, r3
 80182dc:	3710      	adds	r7, #16
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}

080182e2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80182e2:	b480      	push	{r7}
 80182e4:	b083      	sub	sp, #12
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
 80182ea:	460b      	mov	r3, r1
 80182ec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80182ee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80182f0:	4618      	mov	r0, r3
 80182f2:	370c      	adds	r7, #12
 80182f4:	46bd      	mov	sp, r7
 80182f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fa:	4770      	bx	lr

080182fc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80182fc:	b480      	push	{r7}
 80182fe:	b083      	sub	sp, #12
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
 8018304:	460b      	mov	r3, r1
 8018306:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018308:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801830a:	4618      	mov	r0, r3
 801830c:	370c      	adds	r7, #12
 801830e:	46bd      	mov	sp, r7
 8018310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018314:	4770      	bx	lr

08018316 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8018316:	b580      	push	{r7, lr}
 8018318:	b086      	sub	sp, #24
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
 801831e:	460b      	mov	r3, r1
 8018320:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801832a:	2300      	movs	r3, #0
 801832c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	885b      	ldrh	r3, [r3, #2]
 8018332:	b29b      	uxth	r3, r3
 8018334:	68fa      	ldr	r2, [r7, #12]
 8018336:	7812      	ldrb	r2, [r2, #0]
 8018338:	4293      	cmp	r3, r2
 801833a:	d91f      	bls.n	801837c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	781b      	ldrb	r3, [r3, #0]
 8018340:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018342:	e013      	b.n	801836c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018344:	f107 030a 	add.w	r3, r7, #10
 8018348:	4619      	mov	r1, r3
 801834a:	6978      	ldr	r0, [r7, #20]
 801834c:	f000 f81b 	bl	8018386 <USBD_GetNextDesc>
 8018350:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018352:	697b      	ldr	r3, [r7, #20]
 8018354:	785b      	ldrb	r3, [r3, #1]
 8018356:	2b05      	cmp	r3, #5
 8018358:	d108      	bne.n	801836c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801835a:	697b      	ldr	r3, [r7, #20]
 801835c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801835e:	693b      	ldr	r3, [r7, #16]
 8018360:	789b      	ldrb	r3, [r3, #2]
 8018362:	78fa      	ldrb	r2, [r7, #3]
 8018364:	429a      	cmp	r2, r3
 8018366:	d008      	beq.n	801837a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8018368:	2300      	movs	r3, #0
 801836a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	885b      	ldrh	r3, [r3, #2]
 8018370:	b29a      	uxth	r2, r3
 8018372:	897b      	ldrh	r3, [r7, #10]
 8018374:	429a      	cmp	r2, r3
 8018376:	d8e5      	bhi.n	8018344 <USBD_GetEpDesc+0x2e>
 8018378:	e000      	b.n	801837c <USBD_GetEpDesc+0x66>
          break;
 801837a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801837c:	693b      	ldr	r3, [r7, #16]
}
 801837e:	4618      	mov	r0, r3
 8018380:	3718      	adds	r7, #24
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}

08018386 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8018386:	b480      	push	{r7}
 8018388:	b085      	sub	sp, #20
 801838a:	af00      	add	r7, sp, #0
 801838c:	6078      	str	r0, [r7, #4]
 801838e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	881b      	ldrh	r3, [r3, #0]
 8018398:	68fa      	ldr	r2, [r7, #12]
 801839a:	7812      	ldrb	r2, [r2, #0]
 801839c:	4413      	add	r3, r2
 801839e:	b29a      	uxth	r2, r3
 80183a0:	683b      	ldr	r3, [r7, #0]
 80183a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	781b      	ldrb	r3, [r3, #0]
 80183a8:	461a      	mov	r2, r3
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	4413      	add	r3, r2
 80183ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80183b0:	68fb      	ldr	r3, [r7, #12]
}
 80183b2:	4618      	mov	r0, r3
 80183b4:	3714      	adds	r7, #20
 80183b6:	46bd      	mov	sp, r7
 80183b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183bc:	4770      	bx	lr

080183be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80183be:	b480      	push	{r7}
 80183c0:	b087      	sub	sp, #28
 80183c2:	af00      	add	r7, sp, #0
 80183c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80183ca:	697b      	ldr	r3, [r7, #20]
 80183cc:	781b      	ldrb	r3, [r3, #0]
 80183ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	3301      	adds	r3, #1
 80183d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80183dc:	8a3b      	ldrh	r3, [r7, #16]
 80183de:	021b      	lsls	r3, r3, #8
 80183e0:	b21a      	sxth	r2, r3
 80183e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80183e6:	4313      	orrs	r3, r2
 80183e8:	b21b      	sxth	r3, r3
 80183ea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80183ec:	89fb      	ldrh	r3, [r7, #14]
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	371c      	adds	r7, #28
 80183f2:	46bd      	mov	sp, r7
 80183f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f8:	4770      	bx	lr
	...

080183fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b084      	sub	sp, #16
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018406:	2300      	movs	r3, #0
 8018408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	781b      	ldrb	r3, [r3, #0]
 801840e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018412:	2b40      	cmp	r3, #64	@ 0x40
 8018414:	d005      	beq.n	8018422 <USBD_StdDevReq+0x26>
 8018416:	2b40      	cmp	r3, #64	@ 0x40
 8018418:	d857      	bhi.n	80184ca <USBD_StdDevReq+0xce>
 801841a:	2b00      	cmp	r3, #0
 801841c:	d00f      	beq.n	801843e <USBD_StdDevReq+0x42>
 801841e:	2b20      	cmp	r3, #32
 8018420:	d153      	bne.n	80184ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	32ae      	adds	r2, #174	@ 0xae
 801842c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018430:	689b      	ldr	r3, [r3, #8]
 8018432:	6839      	ldr	r1, [r7, #0]
 8018434:	6878      	ldr	r0, [r7, #4]
 8018436:	4798      	blx	r3
 8018438:	4603      	mov	r3, r0
 801843a:	73fb      	strb	r3, [r7, #15]
      break;
 801843c:	e04a      	b.n	80184d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	785b      	ldrb	r3, [r3, #1]
 8018442:	2b09      	cmp	r3, #9
 8018444:	d83b      	bhi.n	80184be <USBD_StdDevReq+0xc2>
 8018446:	a201      	add	r2, pc, #4	@ (adr r2, 801844c <USBD_StdDevReq+0x50>)
 8018448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801844c:	080184a1 	.word	0x080184a1
 8018450:	080184b5 	.word	0x080184b5
 8018454:	080184bf 	.word	0x080184bf
 8018458:	080184ab 	.word	0x080184ab
 801845c:	080184bf 	.word	0x080184bf
 8018460:	0801847f 	.word	0x0801847f
 8018464:	08018475 	.word	0x08018475
 8018468:	080184bf 	.word	0x080184bf
 801846c:	08018497 	.word	0x08018497
 8018470:	08018489 	.word	0x08018489
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018474:	6839      	ldr	r1, [r7, #0]
 8018476:	6878      	ldr	r0, [r7, #4]
 8018478:	f000 fa3c 	bl	80188f4 <USBD_GetDescriptor>
          break;
 801847c:	e024      	b.n	80184c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801847e:	6839      	ldr	r1, [r7, #0]
 8018480:	6878      	ldr	r0, [r7, #4]
 8018482:	f000 fba1 	bl	8018bc8 <USBD_SetAddress>
          break;
 8018486:	e01f      	b.n	80184c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018488:	6839      	ldr	r1, [r7, #0]
 801848a:	6878      	ldr	r0, [r7, #4]
 801848c:	f000 fbe0 	bl	8018c50 <USBD_SetConfig>
 8018490:	4603      	mov	r3, r0
 8018492:	73fb      	strb	r3, [r7, #15]
          break;
 8018494:	e018      	b.n	80184c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018496:	6839      	ldr	r1, [r7, #0]
 8018498:	6878      	ldr	r0, [r7, #4]
 801849a:	f000 fc83 	bl	8018da4 <USBD_GetConfig>
          break;
 801849e:	e013      	b.n	80184c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80184a0:	6839      	ldr	r1, [r7, #0]
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f000 fcb4 	bl	8018e10 <USBD_GetStatus>
          break;
 80184a8:	e00e      	b.n	80184c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80184aa:	6839      	ldr	r1, [r7, #0]
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f000 fce3 	bl	8018e78 <USBD_SetFeature>
          break;
 80184b2:	e009      	b.n	80184c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80184b4:	6839      	ldr	r1, [r7, #0]
 80184b6:	6878      	ldr	r0, [r7, #4]
 80184b8:	f000 fd07 	bl	8018eca <USBD_ClrFeature>
          break;
 80184bc:	e004      	b.n	80184c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80184be:	6839      	ldr	r1, [r7, #0]
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f000 fd5e 	bl	8018f82 <USBD_CtlError>
          break;
 80184c6:	bf00      	nop
      }
      break;
 80184c8:	e004      	b.n	80184d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80184ca:	6839      	ldr	r1, [r7, #0]
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f000 fd58 	bl	8018f82 <USBD_CtlError>
      break;
 80184d2:	bf00      	nop
  }

  return ret;
 80184d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80184d6:	4618      	mov	r0, r3
 80184d8:	3710      	adds	r7, #16
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}
 80184de:	bf00      	nop

080184e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b084      	sub	sp, #16
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
 80184e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80184ea:	2300      	movs	r3, #0
 80184ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80184f6:	2b40      	cmp	r3, #64	@ 0x40
 80184f8:	d005      	beq.n	8018506 <USBD_StdItfReq+0x26>
 80184fa:	2b40      	cmp	r3, #64	@ 0x40
 80184fc:	d852      	bhi.n	80185a4 <USBD_StdItfReq+0xc4>
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d001      	beq.n	8018506 <USBD_StdItfReq+0x26>
 8018502:	2b20      	cmp	r3, #32
 8018504:	d14e      	bne.n	80185a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801850c:	b2db      	uxtb	r3, r3
 801850e:	3b01      	subs	r3, #1
 8018510:	2b02      	cmp	r3, #2
 8018512:	d840      	bhi.n	8018596 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8018514:	683b      	ldr	r3, [r7, #0]
 8018516:	889b      	ldrh	r3, [r3, #4]
 8018518:	b2db      	uxtb	r3, r3
 801851a:	2b01      	cmp	r3, #1
 801851c:	d836      	bhi.n	801858c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801851e:	683b      	ldr	r3, [r7, #0]
 8018520:	889b      	ldrh	r3, [r3, #4]
 8018522:	b2db      	uxtb	r3, r3
 8018524:	4619      	mov	r1, r3
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	f7ff fedb 	bl	80182e2 <USBD_CoreFindIF>
 801852c:	4603      	mov	r3, r0
 801852e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018530:	7bbb      	ldrb	r3, [r7, #14]
 8018532:	2bff      	cmp	r3, #255	@ 0xff
 8018534:	d01d      	beq.n	8018572 <USBD_StdItfReq+0x92>
 8018536:	7bbb      	ldrb	r3, [r7, #14]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d11a      	bne.n	8018572 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801853c:	7bba      	ldrb	r2, [r7, #14]
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	32ae      	adds	r2, #174	@ 0xae
 8018542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018546:	689b      	ldr	r3, [r3, #8]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d00f      	beq.n	801856c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801854c:	7bba      	ldrb	r2, [r7, #14]
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8018554:	7bba      	ldrb	r2, [r7, #14]
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	32ae      	adds	r2, #174	@ 0xae
 801855a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801855e:	689b      	ldr	r3, [r3, #8]
 8018560:	6839      	ldr	r1, [r7, #0]
 8018562:	6878      	ldr	r0, [r7, #4]
 8018564:	4798      	blx	r3
 8018566:	4603      	mov	r3, r0
 8018568:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801856a:	e004      	b.n	8018576 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801856c:	2303      	movs	r3, #3
 801856e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8018570:	e001      	b.n	8018576 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8018572:	2303      	movs	r3, #3
 8018574:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018576:	683b      	ldr	r3, [r7, #0]
 8018578:	88db      	ldrh	r3, [r3, #6]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d110      	bne.n	80185a0 <USBD_StdItfReq+0xc0>
 801857e:	7bfb      	ldrb	r3, [r7, #15]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10d      	bne.n	80185a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8018584:	6878      	ldr	r0, [r7, #4]
 8018586:	f000 fdaa 	bl	80190de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801858a:	e009      	b.n	80185a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801858c:	6839      	ldr	r1, [r7, #0]
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	f000 fcf7 	bl	8018f82 <USBD_CtlError>
          break;
 8018594:	e004      	b.n	80185a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8018596:	6839      	ldr	r1, [r7, #0]
 8018598:	6878      	ldr	r0, [r7, #4]
 801859a:	f000 fcf2 	bl	8018f82 <USBD_CtlError>
          break;
 801859e:	e000      	b.n	80185a2 <USBD_StdItfReq+0xc2>
          break;
 80185a0:	bf00      	nop
      }
      break;
 80185a2:	e004      	b.n	80185ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80185a4:	6839      	ldr	r1, [r7, #0]
 80185a6:	6878      	ldr	r0, [r7, #4]
 80185a8:	f000 fceb 	bl	8018f82 <USBD_CtlError>
      break;
 80185ac:	bf00      	nop
  }

  return ret;
 80185ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3710      	adds	r7, #16
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}

080185b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b084      	sub	sp, #16
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
 80185c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80185c2:	2300      	movs	r3, #0
 80185c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80185c6:	683b      	ldr	r3, [r7, #0]
 80185c8:	889b      	ldrh	r3, [r3, #4]
 80185ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80185cc:	683b      	ldr	r3, [r7, #0]
 80185ce:	781b      	ldrb	r3, [r3, #0]
 80185d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80185d4:	2b40      	cmp	r3, #64	@ 0x40
 80185d6:	d007      	beq.n	80185e8 <USBD_StdEPReq+0x30>
 80185d8:	2b40      	cmp	r3, #64	@ 0x40
 80185da:	f200 817f 	bhi.w	80188dc <USBD_StdEPReq+0x324>
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d02a      	beq.n	8018638 <USBD_StdEPReq+0x80>
 80185e2:	2b20      	cmp	r3, #32
 80185e4:	f040 817a 	bne.w	80188dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80185e8:	7bbb      	ldrb	r3, [r7, #14]
 80185ea:	4619      	mov	r1, r3
 80185ec:	6878      	ldr	r0, [r7, #4]
 80185ee:	f7ff fe85 	bl	80182fc <USBD_CoreFindEP>
 80185f2:	4603      	mov	r3, r0
 80185f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80185f6:	7b7b      	ldrb	r3, [r7, #13]
 80185f8:	2bff      	cmp	r3, #255	@ 0xff
 80185fa:	f000 8174 	beq.w	80188e6 <USBD_StdEPReq+0x32e>
 80185fe:	7b7b      	ldrb	r3, [r7, #13]
 8018600:	2b00      	cmp	r3, #0
 8018602:	f040 8170 	bne.w	80188e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8018606:	7b7a      	ldrb	r2, [r7, #13]
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801860e:	7b7a      	ldrb	r2, [r7, #13]
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	32ae      	adds	r2, #174	@ 0xae
 8018614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018618:	689b      	ldr	r3, [r3, #8]
 801861a:	2b00      	cmp	r3, #0
 801861c:	f000 8163 	beq.w	80188e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8018620:	7b7a      	ldrb	r2, [r7, #13]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	32ae      	adds	r2, #174	@ 0xae
 8018626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801862a:	689b      	ldr	r3, [r3, #8]
 801862c:	6839      	ldr	r1, [r7, #0]
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	4798      	blx	r3
 8018632:	4603      	mov	r3, r0
 8018634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8018636:	e156      	b.n	80188e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018638:	683b      	ldr	r3, [r7, #0]
 801863a:	785b      	ldrb	r3, [r3, #1]
 801863c:	2b03      	cmp	r3, #3
 801863e:	d008      	beq.n	8018652 <USBD_StdEPReq+0x9a>
 8018640:	2b03      	cmp	r3, #3
 8018642:	f300 8145 	bgt.w	80188d0 <USBD_StdEPReq+0x318>
 8018646:	2b00      	cmp	r3, #0
 8018648:	f000 809b 	beq.w	8018782 <USBD_StdEPReq+0x1ca>
 801864c:	2b01      	cmp	r3, #1
 801864e:	d03c      	beq.n	80186ca <USBD_StdEPReq+0x112>
 8018650:	e13e      	b.n	80188d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018658:	b2db      	uxtb	r3, r3
 801865a:	2b02      	cmp	r3, #2
 801865c:	d002      	beq.n	8018664 <USBD_StdEPReq+0xac>
 801865e:	2b03      	cmp	r3, #3
 8018660:	d016      	beq.n	8018690 <USBD_StdEPReq+0xd8>
 8018662:	e02c      	b.n	80186be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018664:	7bbb      	ldrb	r3, [r7, #14]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d00d      	beq.n	8018686 <USBD_StdEPReq+0xce>
 801866a:	7bbb      	ldrb	r3, [r7, #14]
 801866c:	2b80      	cmp	r3, #128	@ 0x80
 801866e:	d00a      	beq.n	8018686 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8018670:	7bbb      	ldrb	r3, [r7, #14]
 8018672:	4619      	mov	r1, r3
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f004 ff94 	bl	801d5a2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801867a:	2180      	movs	r1, #128	@ 0x80
 801867c:	6878      	ldr	r0, [r7, #4]
 801867e:	f004 ff90 	bl	801d5a2 <USBD_LL_StallEP>
 8018682:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018684:	e020      	b.n	80186c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8018686:	6839      	ldr	r1, [r7, #0]
 8018688:	6878      	ldr	r0, [r7, #4]
 801868a:	f000 fc7a 	bl	8018f82 <USBD_CtlError>
              break;
 801868e:	e01b      	b.n	80186c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	885b      	ldrh	r3, [r3, #2]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d10e      	bne.n	80186b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018698:	7bbb      	ldrb	r3, [r7, #14]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d00b      	beq.n	80186b6 <USBD_StdEPReq+0xfe>
 801869e:	7bbb      	ldrb	r3, [r7, #14]
 80186a0:	2b80      	cmp	r3, #128	@ 0x80
 80186a2:	d008      	beq.n	80186b6 <USBD_StdEPReq+0xfe>
 80186a4:	683b      	ldr	r3, [r7, #0]
 80186a6:	88db      	ldrh	r3, [r3, #6]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d104      	bne.n	80186b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80186ac:	7bbb      	ldrb	r3, [r7, #14]
 80186ae:	4619      	mov	r1, r3
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f004 ff76 	bl	801d5a2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80186b6:	6878      	ldr	r0, [r7, #4]
 80186b8:	f000 fd11 	bl	80190de <USBD_CtlSendStatus>

              break;
 80186bc:	e004      	b.n	80186c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80186be:	6839      	ldr	r1, [r7, #0]
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f000 fc5e 	bl	8018f82 <USBD_CtlError>
              break;
 80186c6:	bf00      	nop
          }
          break;
 80186c8:	e107      	b.n	80188da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80186d0:	b2db      	uxtb	r3, r3
 80186d2:	2b02      	cmp	r3, #2
 80186d4:	d002      	beq.n	80186dc <USBD_StdEPReq+0x124>
 80186d6:	2b03      	cmp	r3, #3
 80186d8:	d016      	beq.n	8018708 <USBD_StdEPReq+0x150>
 80186da:	e04b      	b.n	8018774 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80186dc:	7bbb      	ldrb	r3, [r7, #14]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d00d      	beq.n	80186fe <USBD_StdEPReq+0x146>
 80186e2:	7bbb      	ldrb	r3, [r7, #14]
 80186e4:	2b80      	cmp	r3, #128	@ 0x80
 80186e6:	d00a      	beq.n	80186fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80186e8:	7bbb      	ldrb	r3, [r7, #14]
 80186ea:	4619      	mov	r1, r3
 80186ec:	6878      	ldr	r0, [r7, #4]
 80186ee:	f004 ff58 	bl	801d5a2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80186f2:	2180      	movs	r1, #128	@ 0x80
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	f004 ff54 	bl	801d5a2 <USBD_LL_StallEP>
 80186fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80186fc:	e040      	b.n	8018780 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80186fe:	6839      	ldr	r1, [r7, #0]
 8018700:	6878      	ldr	r0, [r7, #4]
 8018702:	f000 fc3e 	bl	8018f82 <USBD_CtlError>
              break;
 8018706:	e03b      	b.n	8018780 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	885b      	ldrh	r3, [r3, #2]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d136      	bne.n	801877e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8018710:	7bbb      	ldrb	r3, [r7, #14]
 8018712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018716:	2b00      	cmp	r3, #0
 8018718:	d004      	beq.n	8018724 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801871a:	7bbb      	ldrb	r3, [r7, #14]
 801871c:	4619      	mov	r1, r3
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	f004 ff5e 	bl	801d5e0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	f000 fcda 	bl	80190de <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801872a:	7bbb      	ldrb	r3, [r7, #14]
 801872c:	4619      	mov	r1, r3
 801872e:	6878      	ldr	r0, [r7, #4]
 8018730:	f7ff fde4 	bl	80182fc <USBD_CoreFindEP>
 8018734:	4603      	mov	r3, r0
 8018736:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018738:	7b7b      	ldrb	r3, [r7, #13]
 801873a:	2bff      	cmp	r3, #255	@ 0xff
 801873c:	d01f      	beq.n	801877e <USBD_StdEPReq+0x1c6>
 801873e:	7b7b      	ldrb	r3, [r7, #13]
 8018740:	2b00      	cmp	r3, #0
 8018742:	d11c      	bne.n	801877e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8018744:	7b7a      	ldrb	r2, [r7, #13]
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801874c:	7b7a      	ldrb	r2, [r7, #13]
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	32ae      	adds	r2, #174	@ 0xae
 8018752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018756:	689b      	ldr	r3, [r3, #8]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d010      	beq.n	801877e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801875c:	7b7a      	ldrb	r2, [r7, #13]
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	32ae      	adds	r2, #174	@ 0xae
 8018762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018766:	689b      	ldr	r3, [r3, #8]
 8018768:	6839      	ldr	r1, [r7, #0]
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	4798      	blx	r3
 801876e:	4603      	mov	r3, r0
 8018770:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8018772:	e004      	b.n	801877e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8018774:	6839      	ldr	r1, [r7, #0]
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f000 fc03 	bl	8018f82 <USBD_CtlError>
              break;
 801877c:	e000      	b.n	8018780 <USBD_StdEPReq+0x1c8>
              break;
 801877e:	bf00      	nop
          }
          break;
 8018780:	e0ab      	b.n	80188da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018788:	b2db      	uxtb	r3, r3
 801878a:	2b02      	cmp	r3, #2
 801878c:	d002      	beq.n	8018794 <USBD_StdEPReq+0x1dc>
 801878e:	2b03      	cmp	r3, #3
 8018790:	d032      	beq.n	80187f8 <USBD_StdEPReq+0x240>
 8018792:	e097      	b.n	80188c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018794:	7bbb      	ldrb	r3, [r7, #14]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d007      	beq.n	80187aa <USBD_StdEPReq+0x1f2>
 801879a:	7bbb      	ldrb	r3, [r7, #14]
 801879c:	2b80      	cmp	r3, #128	@ 0x80
 801879e:	d004      	beq.n	80187aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80187a0:	6839      	ldr	r1, [r7, #0]
 80187a2:	6878      	ldr	r0, [r7, #4]
 80187a4:	f000 fbed 	bl	8018f82 <USBD_CtlError>
                break;
 80187a8:	e091      	b.n	80188ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	da0b      	bge.n	80187ca <USBD_StdEPReq+0x212>
 80187b2:	7bbb      	ldrb	r3, [r7, #14]
 80187b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80187b8:	4613      	mov	r3, r2
 80187ba:	009b      	lsls	r3, r3, #2
 80187bc:	4413      	add	r3, r2
 80187be:	009b      	lsls	r3, r3, #2
 80187c0:	3310      	adds	r3, #16
 80187c2:	687a      	ldr	r2, [r7, #4]
 80187c4:	4413      	add	r3, r2
 80187c6:	3304      	adds	r3, #4
 80187c8:	e00b      	b.n	80187e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80187ca:	7bbb      	ldrb	r3, [r7, #14]
 80187cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187d0:	4613      	mov	r3, r2
 80187d2:	009b      	lsls	r3, r3, #2
 80187d4:	4413      	add	r3, r2
 80187d6:	009b      	lsls	r3, r3, #2
 80187d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80187dc:	687a      	ldr	r2, [r7, #4]
 80187de:	4413      	add	r3, r2
 80187e0:	3304      	adds	r3, #4
 80187e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80187e4:	68bb      	ldr	r3, [r7, #8]
 80187e6:	2200      	movs	r2, #0
 80187e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	2202      	movs	r2, #2
 80187ee:	4619      	mov	r1, r3
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	f000 fc37 	bl	8019064 <USBD_CtlSendData>
              break;
 80187f6:	e06a      	b.n	80188ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80187f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	da11      	bge.n	8018824 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018800:	7bbb      	ldrb	r3, [r7, #14]
 8018802:	f003 020f 	and.w	r2, r3, #15
 8018806:	6879      	ldr	r1, [r7, #4]
 8018808:	4613      	mov	r3, r2
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	4413      	add	r3, r2
 801880e:	009b      	lsls	r3, r3, #2
 8018810:	440b      	add	r3, r1
 8018812:	3324      	adds	r3, #36	@ 0x24
 8018814:	881b      	ldrh	r3, [r3, #0]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d117      	bne.n	801884a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801881a:	6839      	ldr	r1, [r7, #0]
 801881c:	6878      	ldr	r0, [r7, #4]
 801881e:	f000 fbb0 	bl	8018f82 <USBD_CtlError>
                  break;
 8018822:	e054      	b.n	80188ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018824:	7bbb      	ldrb	r3, [r7, #14]
 8018826:	f003 020f 	and.w	r2, r3, #15
 801882a:	6879      	ldr	r1, [r7, #4]
 801882c:	4613      	mov	r3, r2
 801882e:	009b      	lsls	r3, r3, #2
 8018830:	4413      	add	r3, r2
 8018832:	009b      	lsls	r3, r3, #2
 8018834:	440b      	add	r3, r1
 8018836:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801883a:	881b      	ldrh	r3, [r3, #0]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d104      	bne.n	801884a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8018840:	6839      	ldr	r1, [r7, #0]
 8018842:	6878      	ldr	r0, [r7, #4]
 8018844:	f000 fb9d 	bl	8018f82 <USBD_CtlError>
                  break;
 8018848:	e041      	b.n	80188ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801884a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801884e:	2b00      	cmp	r3, #0
 8018850:	da0b      	bge.n	801886a <USBD_StdEPReq+0x2b2>
 8018852:	7bbb      	ldrb	r3, [r7, #14]
 8018854:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018858:	4613      	mov	r3, r2
 801885a:	009b      	lsls	r3, r3, #2
 801885c:	4413      	add	r3, r2
 801885e:	009b      	lsls	r3, r3, #2
 8018860:	3310      	adds	r3, #16
 8018862:	687a      	ldr	r2, [r7, #4]
 8018864:	4413      	add	r3, r2
 8018866:	3304      	adds	r3, #4
 8018868:	e00b      	b.n	8018882 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801886a:	7bbb      	ldrb	r3, [r7, #14]
 801886c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018870:	4613      	mov	r3, r2
 8018872:	009b      	lsls	r3, r3, #2
 8018874:	4413      	add	r3, r2
 8018876:	009b      	lsls	r3, r3, #2
 8018878:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801887c:	687a      	ldr	r2, [r7, #4]
 801887e:	4413      	add	r3, r2
 8018880:	3304      	adds	r3, #4
 8018882:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018884:	7bbb      	ldrb	r3, [r7, #14]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d002      	beq.n	8018890 <USBD_StdEPReq+0x2d8>
 801888a:	7bbb      	ldrb	r3, [r7, #14]
 801888c:	2b80      	cmp	r3, #128	@ 0x80
 801888e:	d103      	bne.n	8018898 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	2200      	movs	r2, #0
 8018894:	601a      	str	r2, [r3, #0]
 8018896:	e00e      	b.n	80188b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8018898:	7bbb      	ldrb	r3, [r7, #14]
 801889a:	4619      	mov	r1, r3
 801889c:	6878      	ldr	r0, [r7, #4]
 801889e:	f004 febe 	bl	801d61e <USBD_LL_IsStallEP>
 80188a2:	4603      	mov	r3, r0
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d003      	beq.n	80188b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	2201      	movs	r2, #1
 80188ac:	601a      	str	r2, [r3, #0]
 80188ae:	e002      	b.n	80188b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80188b0:	68bb      	ldr	r3, [r7, #8]
 80188b2:	2200      	movs	r2, #0
 80188b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80188b6:	68bb      	ldr	r3, [r7, #8]
 80188b8:	2202      	movs	r2, #2
 80188ba:	4619      	mov	r1, r3
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f000 fbd1 	bl	8019064 <USBD_CtlSendData>
              break;
 80188c2:	e004      	b.n	80188ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80188c4:	6839      	ldr	r1, [r7, #0]
 80188c6:	6878      	ldr	r0, [r7, #4]
 80188c8:	f000 fb5b 	bl	8018f82 <USBD_CtlError>
              break;
 80188cc:	bf00      	nop
          }
          break;
 80188ce:	e004      	b.n	80188da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80188d0:	6839      	ldr	r1, [r7, #0]
 80188d2:	6878      	ldr	r0, [r7, #4]
 80188d4:	f000 fb55 	bl	8018f82 <USBD_CtlError>
          break;
 80188d8:	bf00      	nop
      }
      break;
 80188da:	e005      	b.n	80188e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80188dc:	6839      	ldr	r1, [r7, #0]
 80188de:	6878      	ldr	r0, [r7, #4]
 80188e0:	f000 fb4f 	bl	8018f82 <USBD_CtlError>
      break;
 80188e4:	e000      	b.n	80188e8 <USBD_StdEPReq+0x330>
      break;
 80188e6:	bf00      	nop
  }

  return ret;
 80188e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80188ea:	4618      	mov	r0, r3
 80188ec:	3710      	adds	r7, #16
 80188ee:	46bd      	mov	sp, r7
 80188f0:	bd80      	pop	{r7, pc}
	...

080188f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b084      	sub	sp, #16
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
 80188fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80188fe:	2300      	movs	r3, #0
 8018900:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8018902:	2300      	movs	r3, #0
 8018904:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018906:	2300      	movs	r3, #0
 8018908:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	885b      	ldrh	r3, [r3, #2]
 801890e:	0a1b      	lsrs	r3, r3, #8
 8018910:	b29b      	uxth	r3, r3
 8018912:	3b01      	subs	r3, #1
 8018914:	2b06      	cmp	r3, #6
 8018916:	f200 8128 	bhi.w	8018b6a <USBD_GetDescriptor+0x276>
 801891a:	a201      	add	r2, pc, #4	@ (adr r2, 8018920 <USBD_GetDescriptor+0x2c>)
 801891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018920:	0801893d 	.word	0x0801893d
 8018924:	08018955 	.word	0x08018955
 8018928:	08018995 	.word	0x08018995
 801892c:	08018b6b 	.word	0x08018b6b
 8018930:	08018b6b 	.word	0x08018b6b
 8018934:	08018b0b 	.word	0x08018b0b
 8018938:	08018b37 	.word	0x08018b37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	687a      	ldr	r2, [r7, #4]
 8018946:	7c12      	ldrb	r2, [r2, #16]
 8018948:	f107 0108 	add.w	r1, r7, #8
 801894c:	4610      	mov	r0, r2
 801894e:	4798      	blx	r3
 8018950:	60f8      	str	r0, [r7, #12]
      break;
 8018952:	e112      	b.n	8018b7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	7c1b      	ldrb	r3, [r3, #16]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d10d      	bne.n	8018978 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018964:	f107 0208 	add.w	r2, r7, #8
 8018968:	4610      	mov	r0, r2
 801896a:	4798      	blx	r3
 801896c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	3301      	adds	r3, #1
 8018972:	2202      	movs	r2, #2
 8018974:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018976:	e100      	b.n	8018b7a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018980:	f107 0208 	add.w	r2, r7, #8
 8018984:	4610      	mov	r0, r2
 8018986:	4798      	blx	r3
 8018988:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	3301      	adds	r3, #1
 801898e:	2202      	movs	r2, #2
 8018990:	701a      	strb	r2, [r3, #0]
      break;
 8018992:	e0f2      	b.n	8018b7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018994:	683b      	ldr	r3, [r7, #0]
 8018996:	885b      	ldrh	r3, [r3, #2]
 8018998:	b2db      	uxtb	r3, r3
 801899a:	2b05      	cmp	r3, #5
 801899c:	f200 80ac 	bhi.w	8018af8 <USBD_GetDescriptor+0x204>
 80189a0:	a201      	add	r2, pc, #4	@ (adr r2, 80189a8 <USBD_GetDescriptor+0xb4>)
 80189a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189a6:	bf00      	nop
 80189a8:	080189c1 	.word	0x080189c1
 80189ac:	080189f5 	.word	0x080189f5
 80189b0:	08018a29 	.word	0x08018a29
 80189b4:	08018a5d 	.word	0x08018a5d
 80189b8:	08018a91 	.word	0x08018a91
 80189bc:	08018ac5 	.word	0x08018ac5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189c6:	685b      	ldr	r3, [r3, #4]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d00b      	beq.n	80189e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189d2:	685b      	ldr	r3, [r3, #4]
 80189d4:	687a      	ldr	r2, [r7, #4]
 80189d6:	7c12      	ldrb	r2, [r2, #16]
 80189d8:	f107 0108 	add.w	r1, r7, #8
 80189dc:	4610      	mov	r0, r2
 80189de:	4798      	blx	r3
 80189e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189e2:	e091      	b.n	8018b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80189e4:	6839      	ldr	r1, [r7, #0]
 80189e6:	6878      	ldr	r0, [r7, #4]
 80189e8:	f000 facb 	bl	8018f82 <USBD_CtlError>
            err++;
 80189ec:	7afb      	ldrb	r3, [r7, #11]
 80189ee:	3301      	adds	r3, #1
 80189f0:	72fb      	strb	r3, [r7, #11]
          break;
 80189f2:	e089      	b.n	8018b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80189fa:	689b      	ldr	r3, [r3, #8]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d00b      	beq.n	8018a18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a06:	689b      	ldr	r3, [r3, #8]
 8018a08:	687a      	ldr	r2, [r7, #4]
 8018a0a:	7c12      	ldrb	r2, [r2, #16]
 8018a0c:	f107 0108 	add.w	r1, r7, #8
 8018a10:	4610      	mov	r0, r2
 8018a12:	4798      	blx	r3
 8018a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a16:	e077      	b.n	8018b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a18:	6839      	ldr	r1, [r7, #0]
 8018a1a:	6878      	ldr	r0, [r7, #4]
 8018a1c:	f000 fab1 	bl	8018f82 <USBD_CtlError>
            err++;
 8018a20:	7afb      	ldrb	r3, [r7, #11]
 8018a22:	3301      	adds	r3, #1
 8018a24:	72fb      	strb	r3, [r7, #11]
          break;
 8018a26:	e06f      	b.n	8018b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a2e:	68db      	ldr	r3, [r3, #12]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d00b      	beq.n	8018a4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a3a:	68db      	ldr	r3, [r3, #12]
 8018a3c:	687a      	ldr	r2, [r7, #4]
 8018a3e:	7c12      	ldrb	r2, [r2, #16]
 8018a40:	f107 0108 	add.w	r1, r7, #8
 8018a44:	4610      	mov	r0, r2
 8018a46:	4798      	blx	r3
 8018a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a4a:	e05d      	b.n	8018b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a4c:	6839      	ldr	r1, [r7, #0]
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	f000 fa97 	bl	8018f82 <USBD_CtlError>
            err++;
 8018a54:	7afb      	ldrb	r3, [r7, #11]
 8018a56:	3301      	adds	r3, #1
 8018a58:	72fb      	strb	r3, [r7, #11]
          break;
 8018a5a:	e055      	b.n	8018b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a62:	691b      	ldr	r3, [r3, #16]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d00b      	beq.n	8018a80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a6e:	691b      	ldr	r3, [r3, #16]
 8018a70:	687a      	ldr	r2, [r7, #4]
 8018a72:	7c12      	ldrb	r2, [r2, #16]
 8018a74:	f107 0108 	add.w	r1, r7, #8
 8018a78:	4610      	mov	r0, r2
 8018a7a:	4798      	blx	r3
 8018a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a7e:	e043      	b.n	8018b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018a80:	6839      	ldr	r1, [r7, #0]
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	f000 fa7d 	bl	8018f82 <USBD_CtlError>
            err++;
 8018a88:	7afb      	ldrb	r3, [r7, #11]
 8018a8a:	3301      	adds	r3, #1
 8018a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8018a8e:	e03b      	b.n	8018b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018a96:	695b      	ldr	r3, [r3, #20]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d00b      	beq.n	8018ab4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018aa2:	695b      	ldr	r3, [r3, #20]
 8018aa4:	687a      	ldr	r2, [r7, #4]
 8018aa6:	7c12      	ldrb	r2, [r2, #16]
 8018aa8:	f107 0108 	add.w	r1, r7, #8
 8018aac:	4610      	mov	r0, r2
 8018aae:	4798      	blx	r3
 8018ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ab2:	e029      	b.n	8018b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018ab4:	6839      	ldr	r1, [r7, #0]
 8018ab6:	6878      	ldr	r0, [r7, #4]
 8018ab8:	f000 fa63 	bl	8018f82 <USBD_CtlError>
            err++;
 8018abc:	7afb      	ldrb	r3, [r7, #11]
 8018abe:	3301      	adds	r3, #1
 8018ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8018ac2:	e021      	b.n	8018b08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018aca:	699b      	ldr	r3, [r3, #24]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d00b      	beq.n	8018ae8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018ad6:	699b      	ldr	r3, [r3, #24]
 8018ad8:	687a      	ldr	r2, [r7, #4]
 8018ada:	7c12      	ldrb	r2, [r2, #16]
 8018adc:	f107 0108 	add.w	r1, r7, #8
 8018ae0:	4610      	mov	r0, r2
 8018ae2:	4798      	blx	r3
 8018ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ae6:	e00f      	b.n	8018b08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018ae8:	6839      	ldr	r1, [r7, #0]
 8018aea:	6878      	ldr	r0, [r7, #4]
 8018aec:	f000 fa49 	bl	8018f82 <USBD_CtlError>
            err++;
 8018af0:	7afb      	ldrb	r3, [r7, #11]
 8018af2:	3301      	adds	r3, #1
 8018af4:	72fb      	strb	r3, [r7, #11]
          break;
 8018af6:	e007      	b.n	8018b08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018af8:	6839      	ldr	r1, [r7, #0]
 8018afa:	6878      	ldr	r0, [r7, #4]
 8018afc:	f000 fa41 	bl	8018f82 <USBD_CtlError>
          err++;
 8018b00:	7afb      	ldrb	r3, [r7, #11]
 8018b02:	3301      	adds	r3, #1
 8018b04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8018b06:	bf00      	nop
      }
      break;
 8018b08:	e037      	b.n	8018b7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	7c1b      	ldrb	r3, [r3, #16]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d109      	bne.n	8018b26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b1a:	f107 0208 	add.w	r2, r7, #8
 8018b1e:	4610      	mov	r0, r2
 8018b20:	4798      	blx	r3
 8018b22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b24:	e029      	b.n	8018b7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b26:	6839      	ldr	r1, [r7, #0]
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f000 fa2a 	bl	8018f82 <USBD_CtlError>
        err++;
 8018b2e:	7afb      	ldrb	r3, [r7, #11]
 8018b30:	3301      	adds	r3, #1
 8018b32:	72fb      	strb	r3, [r7, #11]
      break;
 8018b34:	e021      	b.n	8018b7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	7c1b      	ldrb	r3, [r3, #16]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d10d      	bne.n	8018b5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b46:	f107 0208 	add.w	r2, r7, #8
 8018b4a:	4610      	mov	r0, r2
 8018b4c:	4798      	blx	r3
 8018b4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	3301      	adds	r3, #1
 8018b54:	2207      	movs	r2, #7
 8018b56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b58:	e00f      	b.n	8018b7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018b5a:	6839      	ldr	r1, [r7, #0]
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	f000 fa10 	bl	8018f82 <USBD_CtlError>
        err++;
 8018b62:	7afb      	ldrb	r3, [r7, #11]
 8018b64:	3301      	adds	r3, #1
 8018b66:	72fb      	strb	r3, [r7, #11]
      break;
 8018b68:	e007      	b.n	8018b7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018b6a:	6839      	ldr	r1, [r7, #0]
 8018b6c:	6878      	ldr	r0, [r7, #4]
 8018b6e:	f000 fa08 	bl	8018f82 <USBD_CtlError>
      err++;
 8018b72:	7afb      	ldrb	r3, [r7, #11]
 8018b74:	3301      	adds	r3, #1
 8018b76:	72fb      	strb	r3, [r7, #11]
      break;
 8018b78:	bf00      	nop
  }

  if (err != 0U)
 8018b7a:	7afb      	ldrb	r3, [r7, #11]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d11e      	bne.n	8018bbe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8018b80:	683b      	ldr	r3, [r7, #0]
 8018b82:	88db      	ldrh	r3, [r3, #6]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d016      	beq.n	8018bb6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018b88:	893b      	ldrh	r3, [r7, #8]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d00e      	beq.n	8018bac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8018b8e:	683b      	ldr	r3, [r7, #0]
 8018b90:	88da      	ldrh	r2, [r3, #6]
 8018b92:	893b      	ldrh	r3, [r7, #8]
 8018b94:	4293      	cmp	r3, r2
 8018b96:	bf28      	it	cs
 8018b98:	4613      	movcs	r3, r2
 8018b9a:	b29b      	uxth	r3, r3
 8018b9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018b9e:	893b      	ldrh	r3, [r7, #8]
 8018ba0:	461a      	mov	r2, r3
 8018ba2:	68f9      	ldr	r1, [r7, #12]
 8018ba4:	6878      	ldr	r0, [r7, #4]
 8018ba6:	f000 fa5d 	bl	8019064 <USBD_CtlSendData>
 8018baa:	e009      	b.n	8018bc0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018bac:	6839      	ldr	r1, [r7, #0]
 8018bae:	6878      	ldr	r0, [r7, #4]
 8018bb0:	f000 f9e7 	bl	8018f82 <USBD_CtlError>
 8018bb4:	e004      	b.n	8018bc0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018bb6:	6878      	ldr	r0, [r7, #4]
 8018bb8:	f000 fa91 	bl	80190de <USBD_CtlSendStatus>
 8018bbc:	e000      	b.n	8018bc0 <USBD_GetDescriptor+0x2cc>
    return;
 8018bbe:	bf00      	nop
  }
}
 8018bc0:	3710      	adds	r7, #16
 8018bc2:	46bd      	mov	sp, r7
 8018bc4:	bd80      	pop	{r7, pc}
 8018bc6:	bf00      	nop

08018bc8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b084      	sub	sp, #16
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
 8018bd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	889b      	ldrh	r3, [r3, #4]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d131      	bne.n	8018c3e <USBD_SetAddress+0x76>
 8018bda:	683b      	ldr	r3, [r7, #0]
 8018bdc:	88db      	ldrh	r3, [r3, #6]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d12d      	bne.n	8018c3e <USBD_SetAddress+0x76>
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	885b      	ldrh	r3, [r3, #2]
 8018be6:	2b7f      	cmp	r3, #127	@ 0x7f
 8018be8:	d829      	bhi.n	8018c3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	885b      	ldrh	r3, [r3, #2]
 8018bee:	b2db      	uxtb	r3, r3
 8018bf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018bf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018bfc:	b2db      	uxtb	r3, r3
 8018bfe:	2b03      	cmp	r3, #3
 8018c00:	d104      	bne.n	8018c0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018c02:	6839      	ldr	r1, [r7, #0]
 8018c04:	6878      	ldr	r0, [r7, #4]
 8018c06:	f000 f9bc 	bl	8018f82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c0a:	e01d      	b.n	8018c48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	7bfa      	ldrb	r2, [r7, #15]
 8018c10:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018c14:	7bfb      	ldrb	r3, [r7, #15]
 8018c16:	4619      	mov	r1, r3
 8018c18:	6878      	ldr	r0, [r7, #4]
 8018c1a:	f004 fd2c 	bl	801d676 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018c1e:	6878      	ldr	r0, [r7, #4]
 8018c20:	f000 fa5d 	bl	80190de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018c24:	7bfb      	ldrb	r3, [r7, #15]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d004      	beq.n	8018c34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	2202      	movs	r2, #2
 8018c2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c32:	e009      	b.n	8018c48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	2201      	movs	r2, #1
 8018c38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c3c:	e004      	b.n	8018c48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018c3e:	6839      	ldr	r1, [r7, #0]
 8018c40:	6878      	ldr	r0, [r7, #4]
 8018c42:	f000 f99e 	bl	8018f82 <USBD_CtlError>
  }
}
 8018c46:	bf00      	nop
 8018c48:	bf00      	nop
 8018c4a:	3710      	adds	r7, #16
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd80      	pop	{r7, pc}

08018c50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b084      	sub	sp, #16
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	885b      	ldrh	r3, [r3, #2]
 8018c62:	b2da      	uxtb	r2, r3
 8018c64:	4b4e      	ldr	r3, [pc, #312]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018c66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018c68:	4b4d      	ldr	r3, [pc, #308]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018c6a:	781b      	ldrb	r3, [r3, #0]
 8018c6c:	2b01      	cmp	r3, #1
 8018c6e:	d905      	bls.n	8018c7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018c70:	6839      	ldr	r1, [r7, #0]
 8018c72:	6878      	ldr	r0, [r7, #4]
 8018c74:	f000 f985 	bl	8018f82 <USBD_CtlError>
    return USBD_FAIL;
 8018c78:	2303      	movs	r3, #3
 8018c7a:	e08c      	b.n	8018d96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	2b02      	cmp	r3, #2
 8018c86:	d002      	beq.n	8018c8e <USBD_SetConfig+0x3e>
 8018c88:	2b03      	cmp	r3, #3
 8018c8a:	d029      	beq.n	8018ce0 <USBD_SetConfig+0x90>
 8018c8c:	e075      	b.n	8018d7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018c8e:	4b44      	ldr	r3, [pc, #272]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d020      	beq.n	8018cd8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8018c96:	4b42      	ldr	r3, [pc, #264]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018c98:	781b      	ldrb	r3, [r3, #0]
 8018c9a:	461a      	mov	r2, r3
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	4619      	mov	r1, r3
 8018ca6:	6878      	ldr	r0, [r7, #4]
 8018ca8:	f7fe ffe3 	bl	8017c72 <USBD_SetClassConfig>
 8018cac:	4603      	mov	r3, r0
 8018cae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018cb0:	7bfb      	ldrb	r3, [r7, #15]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d008      	beq.n	8018cc8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8018cb6:	6839      	ldr	r1, [r7, #0]
 8018cb8:	6878      	ldr	r0, [r7, #4]
 8018cba:	f000 f962 	bl	8018f82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	2202      	movs	r2, #2
 8018cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018cc6:	e065      	b.n	8018d94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018cc8:	6878      	ldr	r0, [r7, #4]
 8018cca:	f000 fa08 	bl	80190de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	2203      	movs	r2, #3
 8018cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018cd6:	e05d      	b.n	8018d94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 fa00 	bl	80190de <USBD_CtlSendStatus>
      break;
 8018cde:	e059      	b.n	8018d94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018ce2:	781b      	ldrb	r3, [r3, #0]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d112      	bne.n	8018d0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	2202      	movs	r2, #2
 8018cec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018cf2:	781b      	ldrb	r3, [r3, #0]
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018cfa:	4b29      	ldr	r3, [pc, #164]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018cfc:	781b      	ldrb	r3, [r3, #0]
 8018cfe:	4619      	mov	r1, r3
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f7fe ffd2 	bl	8017caa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018d06:	6878      	ldr	r0, [r7, #4]
 8018d08:	f000 f9e9 	bl	80190de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018d0c:	e042      	b.n	8018d94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018d0e:	4b24      	ldr	r3, [pc, #144]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018d10:	781b      	ldrb	r3, [r3, #0]
 8018d12:	461a      	mov	r2, r3
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	685b      	ldr	r3, [r3, #4]
 8018d18:	429a      	cmp	r2, r3
 8018d1a:	d02a      	beq.n	8018d72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	685b      	ldr	r3, [r3, #4]
 8018d20:	b2db      	uxtb	r3, r3
 8018d22:	4619      	mov	r1, r3
 8018d24:	6878      	ldr	r0, [r7, #4]
 8018d26:	f7fe ffc0 	bl	8017caa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	461a      	mov	r2, r3
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018d34:	4b1a      	ldr	r3, [pc, #104]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018d36:	781b      	ldrb	r3, [r3, #0]
 8018d38:	4619      	mov	r1, r3
 8018d3a:	6878      	ldr	r0, [r7, #4]
 8018d3c:	f7fe ff99 	bl	8017c72 <USBD_SetClassConfig>
 8018d40:	4603      	mov	r3, r0
 8018d42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018d44:	7bfb      	ldrb	r3, [r7, #15]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d00f      	beq.n	8018d6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8018d4a:	6839      	ldr	r1, [r7, #0]
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	f000 f918 	bl	8018f82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	685b      	ldr	r3, [r3, #4]
 8018d56:	b2db      	uxtb	r3, r3
 8018d58:	4619      	mov	r1, r3
 8018d5a:	6878      	ldr	r0, [r7, #4]
 8018d5c:	f7fe ffa5 	bl	8017caa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2202      	movs	r2, #2
 8018d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8018d68:	e014      	b.n	8018d94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	f000 f9b7 	bl	80190de <USBD_CtlSendStatus>
      break;
 8018d70:	e010      	b.n	8018d94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018d72:	6878      	ldr	r0, [r7, #4]
 8018d74:	f000 f9b3 	bl	80190de <USBD_CtlSendStatus>
      break;
 8018d78:	e00c      	b.n	8018d94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8018d7a:	6839      	ldr	r1, [r7, #0]
 8018d7c:	6878      	ldr	r0, [r7, #4]
 8018d7e:	f000 f900 	bl	8018f82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018d82:	4b07      	ldr	r3, [pc, #28]	@ (8018da0 <USBD_SetConfig+0x150>)
 8018d84:	781b      	ldrb	r3, [r3, #0]
 8018d86:	4619      	mov	r1, r3
 8018d88:	6878      	ldr	r0, [r7, #4]
 8018d8a:	f7fe ff8e 	bl	8017caa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018d8e:	2303      	movs	r3, #3
 8018d90:	73fb      	strb	r3, [r7, #15]
      break;
 8018d92:	bf00      	nop
  }

  return ret;
 8018d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d96:	4618      	mov	r0, r3
 8018d98:	3710      	adds	r7, #16
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}
 8018d9e:	bf00      	nop
 8018da0:	20001b66 	.word	0x20001b66

08018da4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	88db      	ldrh	r3, [r3, #6]
 8018db2:	2b01      	cmp	r3, #1
 8018db4:	d004      	beq.n	8018dc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018db6:	6839      	ldr	r1, [r7, #0]
 8018db8:	6878      	ldr	r0, [r7, #4]
 8018dba:	f000 f8e2 	bl	8018f82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018dbe:	e023      	b.n	8018e08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018dc6:	b2db      	uxtb	r3, r3
 8018dc8:	2b02      	cmp	r3, #2
 8018dca:	dc02      	bgt.n	8018dd2 <USBD_GetConfig+0x2e>
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	dc03      	bgt.n	8018dd8 <USBD_GetConfig+0x34>
 8018dd0:	e015      	b.n	8018dfe <USBD_GetConfig+0x5a>
 8018dd2:	2b03      	cmp	r3, #3
 8018dd4:	d00b      	beq.n	8018dee <USBD_GetConfig+0x4a>
 8018dd6:	e012      	b.n	8018dfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	3308      	adds	r3, #8
 8018de2:	2201      	movs	r2, #1
 8018de4:	4619      	mov	r1, r3
 8018de6:	6878      	ldr	r0, [r7, #4]
 8018de8:	f000 f93c 	bl	8019064 <USBD_CtlSendData>
        break;
 8018dec:	e00c      	b.n	8018e08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	3304      	adds	r3, #4
 8018df2:	2201      	movs	r2, #1
 8018df4:	4619      	mov	r1, r3
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	f000 f934 	bl	8019064 <USBD_CtlSendData>
        break;
 8018dfc:	e004      	b.n	8018e08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018dfe:	6839      	ldr	r1, [r7, #0]
 8018e00:	6878      	ldr	r0, [r7, #4]
 8018e02:	f000 f8be 	bl	8018f82 <USBD_CtlError>
        break;
 8018e06:	bf00      	nop
}
 8018e08:	bf00      	nop
 8018e0a:	3708      	adds	r7, #8
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}

08018e10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b082      	sub	sp, #8
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018e20:	b2db      	uxtb	r3, r3
 8018e22:	3b01      	subs	r3, #1
 8018e24:	2b02      	cmp	r3, #2
 8018e26:	d81e      	bhi.n	8018e66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	88db      	ldrh	r3, [r3, #6]
 8018e2c:	2b02      	cmp	r3, #2
 8018e2e:	d004      	beq.n	8018e3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018e30:	6839      	ldr	r1, [r7, #0]
 8018e32:	6878      	ldr	r0, [r7, #4]
 8018e34:	f000 f8a5 	bl	8018f82 <USBD_CtlError>
        break;
 8018e38:	e01a      	b.n	8018e70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	2201      	movs	r2, #1
 8018e3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d005      	beq.n	8018e56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	68db      	ldr	r3, [r3, #12]
 8018e4e:	f043 0202 	orr.w	r2, r3, #2
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	330c      	adds	r3, #12
 8018e5a:	2202      	movs	r2, #2
 8018e5c:	4619      	mov	r1, r3
 8018e5e:	6878      	ldr	r0, [r7, #4]
 8018e60:	f000 f900 	bl	8019064 <USBD_CtlSendData>
      break;
 8018e64:	e004      	b.n	8018e70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018e66:	6839      	ldr	r1, [r7, #0]
 8018e68:	6878      	ldr	r0, [r7, #4]
 8018e6a:	f000 f88a 	bl	8018f82 <USBD_CtlError>
      break;
 8018e6e:	bf00      	nop
  }
}
 8018e70:	bf00      	nop
 8018e72:	3708      	adds	r7, #8
 8018e74:	46bd      	mov	sp, r7
 8018e76:	bd80      	pop	{r7, pc}

08018e78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b082      	sub	sp, #8
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]
 8018e80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018e82:	683b      	ldr	r3, [r7, #0]
 8018e84:	885b      	ldrh	r3, [r3, #2]
 8018e86:	2b01      	cmp	r3, #1
 8018e88:	d107      	bne.n	8018e9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	2201      	movs	r2, #1
 8018e8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018e92:	6878      	ldr	r0, [r7, #4]
 8018e94:	f000 f923 	bl	80190de <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8018e98:	e013      	b.n	8018ec2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8018e9a:	683b      	ldr	r3, [r7, #0]
 8018e9c:	885b      	ldrh	r3, [r3, #2]
 8018e9e:	2b02      	cmp	r3, #2
 8018ea0:	d10b      	bne.n	8018eba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8018ea2:	683b      	ldr	r3, [r7, #0]
 8018ea4:	889b      	ldrh	r3, [r3, #4]
 8018ea6:	0a1b      	lsrs	r3, r3, #8
 8018ea8:	b29b      	uxth	r3, r3
 8018eaa:	b2da      	uxtb	r2, r3
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8018eb2:	6878      	ldr	r0, [r7, #4]
 8018eb4:	f000 f913 	bl	80190de <USBD_CtlSendStatus>
}
 8018eb8:	e003      	b.n	8018ec2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018eba:	6839      	ldr	r1, [r7, #0]
 8018ebc:	6878      	ldr	r0, [r7, #4]
 8018ebe:	f000 f860 	bl	8018f82 <USBD_CtlError>
}
 8018ec2:	bf00      	nop
 8018ec4:	3708      	adds	r7, #8
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}

08018eca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018eca:	b580      	push	{r7, lr}
 8018ecc:	b082      	sub	sp, #8
 8018ece:	af00      	add	r7, sp, #0
 8018ed0:	6078      	str	r0, [r7, #4]
 8018ed2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018eda:	b2db      	uxtb	r3, r3
 8018edc:	3b01      	subs	r3, #1
 8018ede:	2b02      	cmp	r3, #2
 8018ee0:	d80b      	bhi.n	8018efa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	885b      	ldrh	r3, [r3, #2]
 8018ee6:	2b01      	cmp	r3, #1
 8018ee8:	d10c      	bne.n	8018f04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	2200      	movs	r2, #0
 8018eee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018ef2:	6878      	ldr	r0, [r7, #4]
 8018ef4:	f000 f8f3 	bl	80190de <USBD_CtlSendStatus>
      }
      break;
 8018ef8:	e004      	b.n	8018f04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018efa:	6839      	ldr	r1, [r7, #0]
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	f000 f840 	bl	8018f82 <USBD_CtlError>
      break;
 8018f02:	e000      	b.n	8018f06 <USBD_ClrFeature+0x3c>
      break;
 8018f04:	bf00      	nop
  }
}
 8018f06:	bf00      	nop
 8018f08:	3708      	adds	r7, #8
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	bd80      	pop	{r7, pc}

08018f0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018f0e:	b580      	push	{r7, lr}
 8018f10:	b084      	sub	sp, #16
 8018f12:	af00      	add	r7, sp, #0
 8018f14:	6078      	str	r0, [r7, #4]
 8018f16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018f18:	683b      	ldr	r3, [r7, #0]
 8018f1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	781a      	ldrb	r2, [r3, #0]
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	3301      	adds	r3, #1
 8018f28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	781a      	ldrb	r2, [r3, #0]
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	3301      	adds	r3, #1
 8018f36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018f38:	68f8      	ldr	r0, [r7, #12]
 8018f3a:	f7ff fa40 	bl	80183be <SWAPBYTE>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	461a      	mov	r2, r3
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	3301      	adds	r3, #1
 8018f4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	3301      	adds	r3, #1
 8018f50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018f52:	68f8      	ldr	r0, [r7, #12]
 8018f54:	f7ff fa33 	bl	80183be <SWAPBYTE>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	461a      	mov	r2, r3
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	3301      	adds	r3, #1
 8018f64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	3301      	adds	r3, #1
 8018f6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018f6c:	68f8      	ldr	r0, [r7, #12]
 8018f6e:	f7ff fa26 	bl	80183be <SWAPBYTE>
 8018f72:	4603      	mov	r3, r0
 8018f74:	461a      	mov	r2, r3
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	80da      	strh	r2, [r3, #6]
}
 8018f7a:	bf00      	nop
 8018f7c:	3710      	adds	r7, #16
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bd80      	pop	{r7, pc}

08018f82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f82:	b580      	push	{r7, lr}
 8018f84:	b082      	sub	sp, #8
 8018f86:	af00      	add	r7, sp, #0
 8018f88:	6078      	str	r0, [r7, #4]
 8018f8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018f8c:	2180      	movs	r1, #128	@ 0x80
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f004 fb07 	bl	801d5a2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8018f94:	2100      	movs	r1, #0
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f004 fb03 	bl	801d5a2 <USBD_LL_StallEP>
}
 8018f9c:	bf00      	nop
 8018f9e:	3708      	adds	r7, #8
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}

08018fa4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b086      	sub	sp, #24
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	60f8      	str	r0, [r7, #12]
 8018fac:	60b9      	str	r1, [r7, #8]
 8018fae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d036      	beq.n	8019028 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018fbe:	6938      	ldr	r0, [r7, #16]
 8018fc0:	f000 f836 	bl	8019030 <USBD_GetLen>
 8018fc4:	4603      	mov	r3, r0
 8018fc6:	3301      	adds	r3, #1
 8018fc8:	b29b      	uxth	r3, r3
 8018fca:	005b      	lsls	r3, r3, #1
 8018fcc:	b29a      	uxth	r2, r3
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018fd2:	7dfb      	ldrb	r3, [r7, #23]
 8018fd4:	68ba      	ldr	r2, [r7, #8]
 8018fd6:	4413      	add	r3, r2
 8018fd8:	687a      	ldr	r2, [r7, #4]
 8018fda:	7812      	ldrb	r2, [r2, #0]
 8018fdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8018fde:	7dfb      	ldrb	r3, [r7, #23]
 8018fe0:	3301      	adds	r3, #1
 8018fe2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018fe4:	7dfb      	ldrb	r3, [r7, #23]
 8018fe6:	68ba      	ldr	r2, [r7, #8]
 8018fe8:	4413      	add	r3, r2
 8018fea:	2203      	movs	r2, #3
 8018fec:	701a      	strb	r2, [r3, #0]
  idx++;
 8018fee:	7dfb      	ldrb	r3, [r7, #23]
 8018ff0:	3301      	adds	r3, #1
 8018ff2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018ff4:	e013      	b.n	801901e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8018ff6:	7dfb      	ldrb	r3, [r7, #23]
 8018ff8:	68ba      	ldr	r2, [r7, #8]
 8018ffa:	4413      	add	r3, r2
 8018ffc:	693a      	ldr	r2, [r7, #16]
 8018ffe:	7812      	ldrb	r2, [r2, #0]
 8019000:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019002:	693b      	ldr	r3, [r7, #16]
 8019004:	3301      	adds	r3, #1
 8019006:	613b      	str	r3, [r7, #16]
    idx++;
 8019008:	7dfb      	ldrb	r3, [r7, #23]
 801900a:	3301      	adds	r3, #1
 801900c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801900e:	7dfb      	ldrb	r3, [r7, #23]
 8019010:	68ba      	ldr	r2, [r7, #8]
 8019012:	4413      	add	r3, r2
 8019014:	2200      	movs	r2, #0
 8019016:	701a      	strb	r2, [r3, #0]
    idx++;
 8019018:	7dfb      	ldrb	r3, [r7, #23]
 801901a:	3301      	adds	r3, #1
 801901c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801901e:	693b      	ldr	r3, [r7, #16]
 8019020:	781b      	ldrb	r3, [r3, #0]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d1e7      	bne.n	8018ff6 <USBD_GetString+0x52>
 8019026:	e000      	b.n	801902a <USBD_GetString+0x86>
    return;
 8019028:	bf00      	nop
  }
}
 801902a:	3718      	adds	r7, #24
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}

08019030 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019030:	b480      	push	{r7}
 8019032:	b085      	sub	sp, #20
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019038:	2300      	movs	r3, #0
 801903a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019040:	e005      	b.n	801904e <USBD_GetLen+0x1e>
  {
    len++;
 8019042:	7bfb      	ldrb	r3, [r7, #15]
 8019044:	3301      	adds	r3, #1
 8019046:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019048:	68bb      	ldr	r3, [r7, #8]
 801904a:	3301      	adds	r3, #1
 801904c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801904e:	68bb      	ldr	r3, [r7, #8]
 8019050:	781b      	ldrb	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d1f5      	bne.n	8019042 <USBD_GetLen+0x12>
  }

  return len;
 8019056:	7bfb      	ldrb	r3, [r7, #15]
}
 8019058:	4618      	mov	r0, r3
 801905a:	3714      	adds	r7, #20
 801905c:	46bd      	mov	sp, r7
 801905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019062:	4770      	bx	lr

08019064 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b084      	sub	sp, #16
 8019068:	af00      	add	r7, sp, #0
 801906a:	60f8      	str	r0, [r7, #12]
 801906c:	60b9      	str	r1, [r7, #8]
 801906e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	2202      	movs	r2, #2
 8019074:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	687a      	ldr	r2, [r7, #4]
 801907c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	687a      	ldr	r2, [r7, #4]
 8019082:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	68ba      	ldr	r2, [r7, #8]
 8019088:	2100      	movs	r1, #0
 801908a:	68f8      	ldr	r0, [r7, #12]
 801908c:	f004 fb12 	bl	801d6b4 <USBD_LL_Transmit>

  return USBD_OK;
 8019090:	2300      	movs	r3, #0
}
 8019092:	4618      	mov	r0, r3
 8019094:	3710      	adds	r7, #16
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}

0801909a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801909a:	b580      	push	{r7, lr}
 801909c:	b084      	sub	sp, #16
 801909e:	af00      	add	r7, sp, #0
 80190a0:	60f8      	str	r0, [r7, #12]
 80190a2:	60b9      	str	r1, [r7, #8]
 80190a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	68ba      	ldr	r2, [r7, #8]
 80190aa:	2100      	movs	r1, #0
 80190ac:	68f8      	ldr	r0, [r7, #12]
 80190ae:	f004 fb01 	bl	801d6b4 <USBD_LL_Transmit>

  return USBD_OK;
 80190b2:	2300      	movs	r3, #0
}
 80190b4:	4618      	mov	r0, r3
 80190b6:	3710      	adds	r7, #16
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bd80      	pop	{r7, pc}

080190bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b084      	sub	sp, #16
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	60b9      	str	r1, [r7, #8]
 80190c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	68ba      	ldr	r2, [r7, #8]
 80190cc:	2100      	movs	r1, #0
 80190ce:	68f8      	ldr	r0, [r7, #12]
 80190d0:	f004 fb11 	bl	801d6f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80190d4:	2300      	movs	r3, #0
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	3710      	adds	r7, #16
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd80      	pop	{r7, pc}

080190de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80190de:	b580      	push	{r7, lr}
 80190e0:	b082      	sub	sp, #8
 80190e2:	af00      	add	r7, sp, #0
 80190e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	2204      	movs	r2, #4
 80190ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80190ee:	2300      	movs	r3, #0
 80190f0:	2200      	movs	r2, #0
 80190f2:	2100      	movs	r1, #0
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f004 fadd 	bl	801d6b4 <USBD_LL_Transmit>

  return USBD_OK;
 80190fa:	2300      	movs	r3, #0
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3708      	adds	r7, #8
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}

08019104 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b082      	sub	sp, #8
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	2205      	movs	r2, #5
 8019110:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019114:	2300      	movs	r3, #0
 8019116:	2200      	movs	r2, #0
 8019118:	2100      	movs	r1, #0
 801911a:	6878      	ldr	r0, [r7, #4]
 801911c:	f004 faeb 	bl	801d6f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019120:	2300      	movs	r3, #0
}
 8019122:	4618      	mov	r0, r3
 8019124:	3708      	adds	r7, #8
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}
	...

0801912c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
 8019132:	4603      	mov	r3, r0
 8019134:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8019136:	79fb      	ldrb	r3, [r7, #7]
 8019138:	4a08      	ldr	r2, [pc, #32]	@ (801915c <disk_status+0x30>)
 801913a:	009b      	lsls	r3, r3, #2
 801913c:	4413      	add	r3, r2
 801913e:	685b      	ldr	r3, [r3, #4]
 8019140:	685b      	ldr	r3, [r3, #4]
 8019142:	79fa      	ldrb	r2, [r7, #7]
 8019144:	4905      	ldr	r1, [pc, #20]	@ (801915c <disk_status+0x30>)
 8019146:	440a      	add	r2, r1
 8019148:	7a12      	ldrb	r2, [r2, #8]
 801914a:	4610      	mov	r0, r2
 801914c:	4798      	blx	r3
 801914e:	4603      	mov	r3, r0
 8019150:	73fb      	strb	r3, [r7, #15]
  return stat;
 8019152:	7bfb      	ldrb	r3, [r7, #15]
}
 8019154:	4618      	mov	r0, r3
 8019156:	3710      	adds	r7, #16
 8019158:	46bd      	mov	sp, r7
 801915a:	bd80      	pop	{r7, pc}
 801915c:	20001d90 	.word	0x20001d90

08019160 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b084      	sub	sp, #16
 8019164:	af00      	add	r7, sp, #0
 8019166:	4603      	mov	r3, r0
 8019168:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801916a:	2300      	movs	r3, #0
 801916c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801916e:	79fb      	ldrb	r3, [r7, #7]
 8019170:	4a0e      	ldr	r2, [pc, #56]	@ (80191ac <disk_initialize+0x4c>)
 8019172:	5cd3      	ldrb	r3, [r2, r3]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d114      	bne.n	80191a2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8019178:	79fb      	ldrb	r3, [r7, #7]
 801917a:	4a0c      	ldr	r2, [pc, #48]	@ (80191ac <disk_initialize+0x4c>)
 801917c:	009b      	lsls	r3, r3, #2
 801917e:	4413      	add	r3, r2
 8019180:	685b      	ldr	r3, [r3, #4]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	79fa      	ldrb	r2, [r7, #7]
 8019186:	4909      	ldr	r1, [pc, #36]	@ (80191ac <disk_initialize+0x4c>)
 8019188:	440a      	add	r2, r1
 801918a:	7a12      	ldrb	r2, [r2, #8]
 801918c:	4610      	mov	r0, r2
 801918e:	4798      	blx	r3
 8019190:	4603      	mov	r3, r0
 8019192:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8019194:	7bfb      	ldrb	r3, [r7, #15]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d103      	bne.n	80191a2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801919a:	79fb      	ldrb	r3, [r7, #7]
 801919c:	4a03      	ldr	r2, [pc, #12]	@ (80191ac <disk_initialize+0x4c>)
 801919e:	2101      	movs	r1, #1
 80191a0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80191a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	3710      	adds	r7, #16
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}
 80191ac:	20001d90 	.word	0x20001d90

080191b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80191b0:	b590      	push	{r4, r7, lr}
 80191b2:	b087      	sub	sp, #28
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	60b9      	str	r1, [r7, #8]
 80191b8:	607a      	str	r2, [r7, #4]
 80191ba:	603b      	str	r3, [r7, #0]
 80191bc:	4603      	mov	r3, r0
 80191be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80191c0:	7bfb      	ldrb	r3, [r7, #15]
 80191c2:	4a0a      	ldr	r2, [pc, #40]	@ (80191ec <disk_read+0x3c>)
 80191c4:	009b      	lsls	r3, r3, #2
 80191c6:	4413      	add	r3, r2
 80191c8:	685b      	ldr	r3, [r3, #4]
 80191ca:	689c      	ldr	r4, [r3, #8]
 80191cc:	7bfb      	ldrb	r3, [r7, #15]
 80191ce:	4a07      	ldr	r2, [pc, #28]	@ (80191ec <disk_read+0x3c>)
 80191d0:	4413      	add	r3, r2
 80191d2:	7a18      	ldrb	r0, [r3, #8]
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	687a      	ldr	r2, [r7, #4]
 80191d8:	68b9      	ldr	r1, [r7, #8]
 80191da:	47a0      	blx	r4
 80191dc:	4603      	mov	r3, r0
 80191de:	75fb      	strb	r3, [r7, #23]
  return res;
 80191e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80191e2:	4618      	mov	r0, r3
 80191e4:	371c      	adds	r7, #28
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd90      	pop	{r4, r7, pc}
 80191ea:	bf00      	nop
 80191ec:	20001d90 	.word	0x20001d90

080191f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80191f0:	b590      	push	{r4, r7, lr}
 80191f2:	b087      	sub	sp, #28
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	60b9      	str	r1, [r7, #8]
 80191f8:	607a      	str	r2, [r7, #4]
 80191fa:	603b      	str	r3, [r7, #0]
 80191fc:	4603      	mov	r3, r0
 80191fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8019200:	7bfb      	ldrb	r3, [r7, #15]
 8019202:	4a0a      	ldr	r2, [pc, #40]	@ (801922c <disk_write+0x3c>)
 8019204:	009b      	lsls	r3, r3, #2
 8019206:	4413      	add	r3, r2
 8019208:	685b      	ldr	r3, [r3, #4]
 801920a:	68dc      	ldr	r4, [r3, #12]
 801920c:	7bfb      	ldrb	r3, [r7, #15]
 801920e:	4a07      	ldr	r2, [pc, #28]	@ (801922c <disk_write+0x3c>)
 8019210:	4413      	add	r3, r2
 8019212:	7a18      	ldrb	r0, [r3, #8]
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	687a      	ldr	r2, [r7, #4]
 8019218:	68b9      	ldr	r1, [r7, #8]
 801921a:	47a0      	blx	r4
 801921c:	4603      	mov	r3, r0
 801921e:	75fb      	strb	r3, [r7, #23]
  return res;
 8019220:	7dfb      	ldrb	r3, [r7, #23]
}
 8019222:	4618      	mov	r0, r3
 8019224:	371c      	adds	r7, #28
 8019226:	46bd      	mov	sp, r7
 8019228:	bd90      	pop	{r4, r7, pc}
 801922a:	bf00      	nop
 801922c:	20001d90 	.word	0x20001d90

08019230 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8019230:	b580      	push	{r7, lr}
 8019232:	b084      	sub	sp, #16
 8019234:	af00      	add	r7, sp, #0
 8019236:	4603      	mov	r3, r0
 8019238:	603a      	str	r2, [r7, #0]
 801923a:	71fb      	strb	r3, [r7, #7]
 801923c:	460b      	mov	r3, r1
 801923e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8019240:	79fb      	ldrb	r3, [r7, #7]
 8019242:	4a09      	ldr	r2, [pc, #36]	@ (8019268 <disk_ioctl+0x38>)
 8019244:	009b      	lsls	r3, r3, #2
 8019246:	4413      	add	r3, r2
 8019248:	685b      	ldr	r3, [r3, #4]
 801924a:	691b      	ldr	r3, [r3, #16]
 801924c:	79fa      	ldrb	r2, [r7, #7]
 801924e:	4906      	ldr	r1, [pc, #24]	@ (8019268 <disk_ioctl+0x38>)
 8019250:	440a      	add	r2, r1
 8019252:	7a10      	ldrb	r0, [r2, #8]
 8019254:	79b9      	ldrb	r1, [r7, #6]
 8019256:	683a      	ldr	r2, [r7, #0]
 8019258:	4798      	blx	r3
 801925a:	4603      	mov	r3, r0
 801925c:	73fb      	strb	r3, [r7, #15]
  return res;
 801925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019260:	4618      	mov	r0, r3
 8019262:	3710      	adds	r7, #16
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}
 8019268:	20001d90 	.word	0x20001d90

0801926c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801926c:	b480      	push	{r7}
 801926e:	b085      	sub	sp, #20
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	3301      	adds	r3, #1
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801927c:	89fb      	ldrh	r3, [r7, #14]
 801927e:	021b      	lsls	r3, r3, #8
 8019280:	b21a      	sxth	r2, r3
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	b21b      	sxth	r3, r3
 8019288:	4313      	orrs	r3, r2
 801928a:	b21b      	sxth	r3, r3
 801928c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801928e:	89fb      	ldrh	r3, [r7, #14]
}
 8019290:	4618      	mov	r0, r3
 8019292:	3714      	adds	r7, #20
 8019294:	46bd      	mov	sp, r7
 8019296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929a:	4770      	bx	lr

0801929c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801929c:	b480      	push	{r7}
 801929e:	b085      	sub	sp, #20
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	3303      	adds	r3, #3
 80192a8:	781b      	ldrb	r3, [r3, #0]
 80192aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	021b      	lsls	r3, r3, #8
 80192b0:	687a      	ldr	r2, [r7, #4]
 80192b2:	3202      	adds	r2, #2
 80192b4:	7812      	ldrb	r2, [r2, #0]
 80192b6:	4313      	orrs	r3, r2
 80192b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	021b      	lsls	r3, r3, #8
 80192be:	687a      	ldr	r2, [r7, #4]
 80192c0:	3201      	adds	r2, #1
 80192c2:	7812      	ldrb	r2, [r2, #0]
 80192c4:	4313      	orrs	r3, r2
 80192c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	021b      	lsls	r3, r3, #8
 80192cc:	687a      	ldr	r2, [r7, #4]
 80192ce:	7812      	ldrb	r2, [r2, #0]
 80192d0:	4313      	orrs	r3, r2
 80192d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80192d4:	68fb      	ldr	r3, [r7, #12]
}
 80192d6:	4618      	mov	r0, r3
 80192d8:	3714      	adds	r7, #20
 80192da:	46bd      	mov	sp, r7
 80192dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e0:	4770      	bx	lr

080192e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80192e2:	b480      	push	{r7}
 80192e4:	b083      	sub	sp, #12
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	6078      	str	r0, [r7, #4]
 80192ea:	460b      	mov	r3, r1
 80192ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	1c5a      	adds	r2, r3, #1
 80192f2:	607a      	str	r2, [r7, #4]
 80192f4:	887a      	ldrh	r2, [r7, #2]
 80192f6:	b2d2      	uxtb	r2, r2
 80192f8:	701a      	strb	r2, [r3, #0]
 80192fa:	887b      	ldrh	r3, [r7, #2]
 80192fc:	0a1b      	lsrs	r3, r3, #8
 80192fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	1c5a      	adds	r2, r3, #1
 8019304:	607a      	str	r2, [r7, #4]
 8019306:	887a      	ldrh	r2, [r7, #2]
 8019308:	b2d2      	uxtb	r2, r2
 801930a:	701a      	strb	r2, [r3, #0]
}
 801930c:	bf00      	nop
 801930e:	370c      	adds	r7, #12
 8019310:	46bd      	mov	sp, r7
 8019312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019316:	4770      	bx	lr

08019318 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8019318:	b480      	push	{r7}
 801931a:	b083      	sub	sp, #12
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
 8019320:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	1c5a      	adds	r2, r3, #1
 8019326:	607a      	str	r2, [r7, #4]
 8019328:	683a      	ldr	r2, [r7, #0]
 801932a:	b2d2      	uxtb	r2, r2
 801932c:	701a      	strb	r2, [r3, #0]
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	0a1b      	lsrs	r3, r3, #8
 8019332:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	1c5a      	adds	r2, r3, #1
 8019338:	607a      	str	r2, [r7, #4]
 801933a:	683a      	ldr	r2, [r7, #0]
 801933c:	b2d2      	uxtb	r2, r2
 801933e:	701a      	strb	r2, [r3, #0]
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	0a1b      	lsrs	r3, r3, #8
 8019344:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	1c5a      	adds	r2, r3, #1
 801934a:	607a      	str	r2, [r7, #4]
 801934c:	683a      	ldr	r2, [r7, #0]
 801934e:	b2d2      	uxtb	r2, r2
 8019350:	701a      	strb	r2, [r3, #0]
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	0a1b      	lsrs	r3, r3, #8
 8019356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	1c5a      	adds	r2, r3, #1
 801935c:	607a      	str	r2, [r7, #4]
 801935e:	683a      	ldr	r2, [r7, #0]
 8019360:	b2d2      	uxtb	r2, r2
 8019362:	701a      	strb	r2, [r3, #0]
}
 8019364:	bf00      	nop
 8019366:	370c      	adds	r7, #12
 8019368:	46bd      	mov	sp, r7
 801936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936e:	4770      	bx	lr

08019370 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8019370:	b480      	push	{r7}
 8019372:	b087      	sub	sp, #28
 8019374:	af00      	add	r7, sp, #0
 8019376:	60f8      	str	r0, [r7, #12]
 8019378:	60b9      	str	r1, [r7, #8]
 801937a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8019380:	68bb      	ldr	r3, [r7, #8]
 8019382:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d00d      	beq.n	80193a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801938a:	693a      	ldr	r2, [r7, #16]
 801938c:	1c53      	adds	r3, r2, #1
 801938e:	613b      	str	r3, [r7, #16]
 8019390:	697b      	ldr	r3, [r7, #20]
 8019392:	1c59      	adds	r1, r3, #1
 8019394:	6179      	str	r1, [r7, #20]
 8019396:	7812      	ldrb	r2, [r2, #0]
 8019398:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	3b01      	subs	r3, #1
 801939e:	607b      	str	r3, [r7, #4]
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d1f1      	bne.n	801938a <mem_cpy+0x1a>
	}
}
 80193a6:	bf00      	nop
 80193a8:	371c      	adds	r7, #28
 80193aa:	46bd      	mov	sp, r7
 80193ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b0:	4770      	bx	lr

080193b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80193b2:	b480      	push	{r7}
 80193b4:	b087      	sub	sp, #28
 80193b6:	af00      	add	r7, sp, #0
 80193b8:	60f8      	str	r0, [r7, #12]
 80193ba:	60b9      	str	r1, [r7, #8]
 80193bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80193c2:	697b      	ldr	r3, [r7, #20]
 80193c4:	1c5a      	adds	r2, r3, #1
 80193c6:	617a      	str	r2, [r7, #20]
 80193c8:	68ba      	ldr	r2, [r7, #8]
 80193ca:	b2d2      	uxtb	r2, r2
 80193cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	3b01      	subs	r3, #1
 80193d2:	607b      	str	r3, [r7, #4]
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d1f3      	bne.n	80193c2 <mem_set+0x10>
}
 80193da:	bf00      	nop
 80193dc:	bf00      	nop
 80193de:	371c      	adds	r7, #28
 80193e0:	46bd      	mov	sp, r7
 80193e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e6:	4770      	bx	lr

080193e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80193e8:	b480      	push	{r7}
 80193ea:	b089      	sub	sp, #36	@ 0x24
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	60f8      	str	r0, [r7, #12]
 80193f0:	60b9      	str	r1, [r7, #8]
 80193f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	61fb      	str	r3, [r7, #28]
 80193f8:	68bb      	ldr	r3, [r7, #8]
 80193fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80193fc:	2300      	movs	r3, #0
 80193fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8019400:	69fb      	ldr	r3, [r7, #28]
 8019402:	1c5a      	adds	r2, r3, #1
 8019404:	61fa      	str	r2, [r7, #28]
 8019406:	781b      	ldrb	r3, [r3, #0]
 8019408:	4619      	mov	r1, r3
 801940a:	69bb      	ldr	r3, [r7, #24]
 801940c:	1c5a      	adds	r2, r3, #1
 801940e:	61ba      	str	r2, [r7, #24]
 8019410:	781b      	ldrb	r3, [r3, #0]
 8019412:	1acb      	subs	r3, r1, r3
 8019414:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	3b01      	subs	r3, #1
 801941a:	607b      	str	r3, [r7, #4]
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d002      	beq.n	8019428 <mem_cmp+0x40>
 8019422:	697b      	ldr	r3, [r7, #20]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d0eb      	beq.n	8019400 <mem_cmp+0x18>

	return r;
 8019428:	697b      	ldr	r3, [r7, #20]
}
 801942a:	4618      	mov	r0, r3
 801942c:	3724      	adds	r7, #36	@ 0x24
 801942e:	46bd      	mov	sp, r7
 8019430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019434:	4770      	bx	lr

08019436 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8019436:	b480      	push	{r7}
 8019438:	b083      	sub	sp, #12
 801943a:	af00      	add	r7, sp, #0
 801943c:	6078      	str	r0, [r7, #4]
 801943e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8019440:	e002      	b.n	8019448 <chk_chr+0x12>
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	3301      	adds	r3, #1
 8019446:	607b      	str	r3, [r7, #4]
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	781b      	ldrb	r3, [r3, #0]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d005      	beq.n	801945c <chk_chr+0x26>
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	781b      	ldrb	r3, [r3, #0]
 8019454:	461a      	mov	r2, r3
 8019456:	683b      	ldr	r3, [r7, #0]
 8019458:	4293      	cmp	r3, r2
 801945a:	d1f2      	bne.n	8019442 <chk_chr+0xc>
	return *str;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	781b      	ldrb	r3, [r3, #0]
}
 8019460:	4618      	mov	r0, r3
 8019462:	370c      	adds	r7, #12
 8019464:	46bd      	mov	sp, r7
 8019466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946a:	4770      	bx	lr

0801946c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801946c:	b480      	push	{r7}
 801946e:	b085      	sub	sp, #20
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
 8019474:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019476:	2300      	movs	r3, #0
 8019478:	60bb      	str	r3, [r7, #8]
 801947a:	68bb      	ldr	r3, [r7, #8]
 801947c:	60fb      	str	r3, [r7, #12]
 801947e:	e029      	b.n	80194d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8019480:	4a27      	ldr	r2, [pc, #156]	@ (8019520 <chk_lock+0xb4>)
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	011b      	lsls	r3, r3, #4
 8019486:	4413      	add	r3, r2
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d01d      	beq.n	80194ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801948e:	4a24      	ldr	r2, [pc, #144]	@ (8019520 <chk_lock+0xb4>)
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	011b      	lsls	r3, r3, #4
 8019494:	4413      	add	r3, r2
 8019496:	681a      	ldr	r2, [r3, #0]
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	429a      	cmp	r2, r3
 801949e:	d116      	bne.n	80194ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80194a0:	4a1f      	ldr	r2, [pc, #124]	@ (8019520 <chk_lock+0xb4>)
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	011b      	lsls	r3, r3, #4
 80194a6:	4413      	add	r3, r2
 80194a8:	3304      	adds	r3, #4
 80194aa:	681a      	ldr	r2, [r3, #0]
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80194b0:	429a      	cmp	r2, r3
 80194b2:	d10c      	bne.n	80194ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80194b4:	4a1a      	ldr	r2, [pc, #104]	@ (8019520 <chk_lock+0xb4>)
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	011b      	lsls	r3, r3, #4
 80194ba:	4413      	add	r3, r2
 80194bc:	3308      	adds	r3, #8
 80194be:	681a      	ldr	r2, [r3, #0]
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d102      	bne.n	80194ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80194c8:	e007      	b.n	80194da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80194ca:	2301      	movs	r3, #1
 80194cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	3301      	adds	r3, #1
 80194d2:	60fb      	str	r3, [r7, #12]
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	2b01      	cmp	r3, #1
 80194d8:	d9d2      	bls.n	8019480 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	2b02      	cmp	r3, #2
 80194de:	d109      	bne.n	80194f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d102      	bne.n	80194ec <chk_lock+0x80>
 80194e6:	683b      	ldr	r3, [r7, #0]
 80194e8:	2b02      	cmp	r3, #2
 80194ea:	d101      	bne.n	80194f0 <chk_lock+0x84>
 80194ec:	2300      	movs	r3, #0
 80194ee:	e010      	b.n	8019512 <chk_lock+0xa6>
 80194f0:	2312      	movs	r3, #18
 80194f2:	e00e      	b.n	8019512 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d108      	bne.n	801950c <chk_lock+0xa0>
 80194fa:	4a09      	ldr	r2, [pc, #36]	@ (8019520 <chk_lock+0xb4>)
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	011b      	lsls	r3, r3, #4
 8019500:	4413      	add	r3, r2
 8019502:	330c      	adds	r3, #12
 8019504:	881b      	ldrh	r3, [r3, #0]
 8019506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801950a:	d101      	bne.n	8019510 <chk_lock+0xa4>
 801950c:	2310      	movs	r3, #16
 801950e:	e000      	b.n	8019512 <chk_lock+0xa6>
 8019510:	2300      	movs	r3, #0
}
 8019512:	4618      	mov	r0, r3
 8019514:	3714      	adds	r7, #20
 8019516:	46bd      	mov	sp, r7
 8019518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951c:	4770      	bx	lr
 801951e:	bf00      	nop
 8019520:	20001b70 	.word	0x20001b70

08019524 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8019524:	b480      	push	{r7}
 8019526:	b083      	sub	sp, #12
 8019528:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801952a:	2300      	movs	r3, #0
 801952c:	607b      	str	r3, [r7, #4]
 801952e:	e002      	b.n	8019536 <enq_lock+0x12>
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	3301      	adds	r3, #1
 8019534:	607b      	str	r3, [r7, #4]
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	2b01      	cmp	r3, #1
 801953a:	d806      	bhi.n	801954a <enq_lock+0x26>
 801953c:	4a09      	ldr	r2, [pc, #36]	@ (8019564 <enq_lock+0x40>)
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	011b      	lsls	r3, r3, #4
 8019542:	4413      	add	r3, r2
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d1f2      	bne.n	8019530 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	2b02      	cmp	r3, #2
 801954e:	bf14      	ite	ne
 8019550:	2301      	movne	r3, #1
 8019552:	2300      	moveq	r3, #0
 8019554:	b2db      	uxtb	r3, r3
}
 8019556:	4618      	mov	r0, r3
 8019558:	370c      	adds	r7, #12
 801955a:	46bd      	mov	sp, r7
 801955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019560:	4770      	bx	lr
 8019562:	bf00      	nop
 8019564:	20001b70 	.word	0x20001b70

08019568 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8019568:	b480      	push	{r7}
 801956a:	b085      	sub	sp, #20
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
 8019570:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8019572:	2300      	movs	r3, #0
 8019574:	60fb      	str	r3, [r7, #12]
 8019576:	e01f      	b.n	80195b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8019578:	4a41      	ldr	r2, [pc, #260]	@ (8019680 <inc_lock+0x118>)
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	011b      	lsls	r3, r3, #4
 801957e:	4413      	add	r3, r2
 8019580:	681a      	ldr	r2, [r3, #0]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	429a      	cmp	r2, r3
 8019588:	d113      	bne.n	80195b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801958a:	4a3d      	ldr	r2, [pc, #244]	@ (8019680 <inc_lock+0x118>)
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	011b      	lsls	r3, r3, #4
 8019590:	4413      	add	r3, r2
 8019592:	3304      	adds	r3, #4
 8019594:	681a      	ldr	r2, [r3, #0]
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801959a:	429a      	cmp	r2, r3
 801959c:	d109      	bne.n	80195b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801959e:	4a38      	ldr	r2, [pc, #224]	@ (8019680 <inc_lock+0x118>)
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	011b      	lsls	r3, r3, #4
 80195a4:	4413      	add	r3, r2
 80195a6:	3308      	adds	r3, #8
 80195a8:	681a      	ldr	r2, [r3, #0]
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80195ae:	429a      	cmp	r2, r3
 80195b0:	d006      	beq.n	80195c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	3301      	adds	r3, #1
 80195b6:	60fb      	str	r3, [r7, #12]
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	2b01      	cmp	r3, #1
 80195bc:	d9dc      	bls.n	8019578 <inc_lock+0x10>
 80195be:	e000      	b.n	80195c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80195c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	2b02      	cmp	r3, #2
 80195c6:	d132      	bne.n	801962e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80195c8:	2300      	movs	r3, #0
 80195ca:	60fb      	str	r3, [r7, #12]
 80195cc:	e002      	b.n	80195d4 <inc_lock+0x6c>
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	3301      	adds	r3, #1
 80195d2:	60fb      	str	r3, [r7, #12]
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	2b01      	cmp	r3, #1
 80195d8:	d806      	bhi.n	80195e8 <inc_lock+0x80>
 80195da:	4a29      	ldr	r2, [pc, #164]	@ (8019680 <inc_lock+0x118>)
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	011b      	lsls	r3, r3, #4
 80195e0:	4413      	add	r3, r2
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d1f2      	bne.n	80195ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	2b02      	cmp	r3, #2
 80195ec:	d101      	bne.n	80195f2 <inc_lock+0x8a>
 80195ee:	2300      	movs	r3, #0
 80195f0:	e040      	b.n	8019674 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681a      	ldr	r2, [r3, #0]
 80195f6:	4922      	ldr	r1, [pc, #136]	@ (8019680 <inc_lock+0x118>)
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	011b      	lsls	r3, r3, #4
 80195fc:	440b      	add	r3, r1
 80195fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	689a      	ldr	r2, [r3, #8]
 8019604:	491e      	ldr	r1, [pc, #120]	@ (8019680 <inc_lock+0x118>)
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	011b      	lsls	r3, r3, #4
 801960a:	440b      	add	r3, r1
 801960c:	3304      	adds	r3, #4
 801960e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	695a      	ldr	r2, [r3, #20]
 8019614:	491a      	ldr	r1, [pc, #104]	@ (8019680 <inc_lock+0x118>)
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	011b      	lsls	r3, r3, #4
 801961a:	440b      	add	r3, r1
 801961c:	3308      	adds	r3, #8
 801961e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8019620:	4a17      	ldr	r2, [pc, #92]	@ (8019680 <inc_lock+0x118>)
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	011b      	lsls	r3, r3, #4
 8019626:	4413      	add	r3, r2
 8019628:	330c      	adds	r3, #12
 801962a:	2200      	movs	r2, #0
 801962c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801962e:	683b      	ldr	r3, [r7, #0]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d009      	beq.n	8019648 <inc_lock+0xe0>
 8019634:	4a12      	ldr	r2, [pc, #72]	@ (8019680 <inc_lock+0x118>)
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	011b      	lsls	r3, r3, #4
 801963a:	4413      	add	r3, r2
 801963c:	330c      	adds	r3, #12
 801963e:	881b      	ldrh	r3, [r3, #0]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d001      	beq.n	8019648 <inc_lock+0xe0>
 8019644:	2300      	movs	r3, #0
 8019646:	e015      	b.n	8019674 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d108      	bne.n	8019660 <inc_lock+0xf8>
 801964e:	4a0c      	ldr	r2, [pc, #48]	@ (8019680 <inc_lock+0x118>)
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	011b      	lsls	r3, r3, #4
 8019654:	4413      	add	r3, r2
 8019656:	330c      	adds	r3, #12
 8019658:	881b      	ldrh	r3, [r3, #0]
 801965a:	3301      	adds	r3, #1
 801965c:	b29a      	uxth	r2, r3
 801965e:	e001      	b.n	8019664 <inc_lock+0xfc>
 8019660:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019664:	4906      	ldr	r1, [pc, #24]	@ (8019680 <inc_lock+0x118>)
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	011b      	lsls	r3, r3, #4
 801966a:	440b      	add	r3, r1
 801966c:	330c      	adds	r3, #12
 801966e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	3301      	adds	r3, #1
}
 8019674:	4618      	mov	r0, r3
 8019676:	3714      	adds	r7, #20
 8019678:	46bd      	mov	sp, r7
 801967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801967e:	4770      	bx	lr
 8019680:	20001b70 	.word	0x20001b70

08019684 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8019684:	b480      	push	{r7}
 8019686:	b085      	sub	sp, #20
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	3b01      	subs	r3, #1
 8019690:	607b      	str	r3, [r7, #4]
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	2b01      	cmp	r3, #1
 8019696:	d825      	bhi.n	80196e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8019698:	4a17      	ldr	r2, [pc, #92]	@ (80196f8 <dec_lock+0x74>)
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	011b      	lsls	r3, r3, #4
 801969e:	4413      	add	r3, r2
 80196a0:	330c      	adds	r3, #12
 80196a2:	881b      	ldrh	r3, [r3, #0]
 80196a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80196a6:	89fb      	ldrh	r3, [r7, #14]
 80196a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80196ac:	d101      	bne.n	80196b2 <dec_lock+0x2e>
 80196ae:	2300      	movs	r3, #0
 80196b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80196b2:	89fb      	ldrh	r3, [r7, #14]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d002      	beq.n	80196be <dec_lock+0x3a>
 80196b8:	89fb      	ldrh	r3, [r7, #14]
 80196ba:	3b01      	subs	r3, #1
 80196bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80196be:	4a0e      	ldr	r2, [pc, #56]	@ (80196f8 <dec_lock+0x74>)
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	011b      	lsls	r3, r3, #4
 80196c4:	4413      	add	r3, r2
 80196c6:	330c      	adds	r3, #12
 80196c8:	89fa      	ldrh	r2, [r7, #14]
 80196ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80196cc:	89fb      	ldrh	r3, [r7, #14]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d105      	bne.n	80196de <dec_lock+0x5a>
 80196d2:	4a09      	ldr	r2, [pc, #36]	@ (80196f8 <dec_lock+0x74>)
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	011b      	lsls	r3, r3, #4
 80196d8:	4413      	add	r3, r2
 80196da:	2200      	movs	r2, #0
 80196dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80196de:	2300      	movs	r3, #0
 80196e0:	737b      	strb	r3, [r7, #13]
 80196e2:	e001      	b.n	80196e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80196e4:	2302      	movs	r3, #2
 80196e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80196e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80196ea:	4618      	mov	r0, r3
 80196ec:	3714      	adds	r7, #20
 80196ee:	46bd      	mov	sp, r7
 80196f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f4:	4770      	bx	lr
 80196f6:	bf00      	nop
 80196f8:	20001b70 	.word	0x20001b70

080196fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80196fc:	b480      	push	{r7}
 80196fe:	b085      	sub	sp, #20
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8019704:	2300      	movs	r3, #0
 8019706:	60fb      	str	r3, [r7, #12]
 8019708:	e010      	b.n	801972c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801970a:	4a0d      	ldr	r2, [pc, #52]	@ (8019740 <clear_lock+0x44>)
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	011b      	lsls	r3, r3, #4
 8019710:	4413      	add	r3, r2
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	687a      	ldr	r2, [r7, #4]
 8019716:	429a      	cmp	r2, r3
 8019718:	d105      	bne.n	8019726 <clear_lock+0x2a>
 801971a:	4a09      	ldr	r2, [pc, #36]	@ (8019740 <clear_lock+0x44>)
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	011b      	lsls	r3, r3, #4
 8019720:	4413      	add	r3, r2
 8019722:	2200      	movs	r2, #0
 8019724:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	3301      	adds	r3, #1
 801972a:	60fb      	str	r3, [r7, #12]
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	2b01      	cmp	r3, #1
 8019730:	d9eb      	bls.n	801970a <clear_lock+0xe>
	}
}
 8019732:	bf00      	nop
 8019734:	bf00      	nop
 8019736:	3714      	adds	r7, #20
 8019738:	46bd      	mov	sp, r7
 801973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801973e:	4770      	bx	lr
 8019740:	20001b70 	.word	0x20001b70

08019744 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b086      	sub	sp, #24
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801974c:	2300      	movs	r3, #0
 801974e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	78db      	ldrb	r3, [r3, #3]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d034      	beq.n	80197c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801975c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	7858      	ldrb	r0, [r3, #1]
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8019768:	2301      	movs	r3, #1
 801976a:	697a      	ldr	r2, [r7, #20]
 801976c:	f7ff fd40 	bl	80191f0 <disk_write>
 8019770:	4603      	mov	r3, r0
 8019772:	2b00      	cmp	r3, #0
 8019774:	d002      	beq.n	801977c <sync_window+0x38>
			res = FR_DISK_ERR;
 8019776:	2301      	movs	r3, #1
 8019778:	73fb      	strb	r3, [r7, #15]
 801977a:	e022      	b.n	80197c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	2200      	movs	r2, #0
 8019780:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019786:	697a      	ldr	r2, [r7, #20]
 8019788:	1ad2      	subs	r2, r2, r3
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	69db      	ldr	r3, [r3, #28]
 801978e:	429a      	cmp	r2, r3
 8019790:	d217      	bcs.n	80197c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	789b      	ldrb	r3, [r3, #2]
 8019796:	613b      	str	r3, [r7, #16]
 8019798:	e010      	b.n	80197bc <sync_window+0x78>
					wsect += fs->fsize;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	69db      	ldr	r3, [r3, #28]
 801979e:	697a      	ldr	r2, [r7, #20]
 80197a0:	4413      	add	r3, r2
 80197a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	7858      	ldrb	r0, [r3, #1]
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80197ae:	2301      	movs	r3, #1
 80197b0:	697a      	ldr	r2, [r7, #20]
 80197b2:	f7ff fd1d 	bl	80191f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80197b6:	693b      	ldr	r3, [r7, #16]
 80197b8:	3b01      	subs	r3, #1
 80197ba:	613b      	str	r3, [r7, #16]
 80197bc:	693b      	ldr	r3, [r7, #16]
 80197be:	2b01      	cmp	r3, #1
 80197c0:	d8eb      	bhi.n	801979a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80197c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80197c4:	4618      	mov	r0, r3
 80197c6:	3718      	adds	r7, #24
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}

080197cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b084      	sub	sp, #16
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
 80197d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80197d6:	2300      	movs	r3, #0
 80197d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80197de:	683a      	ldr	r2, [r7, #0]
 80197e0:	429a      	cmp	r2, r3
 80197e2:	d01b      	beq.n	801981c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80197e4:	6878      	ldr	r0, [r7, #4]
 80197e6:	f7ff ffad 	bl	8019744 <sync_window>
 80197ea:	4603      	mov	r3, r0
 80197ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80197ee:	7bfb      	ldrb	r3, [r7, #15]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d113      	bne.n	801981c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	7858      	ldrb	r0, [r3, #1]
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80197fe:	2301      	movs	r3, #1
 8019800:	683a      	ldr	r2, [r7, #0]
 8019802:	f7ff fcd5 	bl	80191b0 <disk_read>
 8019806:	4603      	mov	r3, r0
 8019808:	2b00      	cmp	r3, #0
 801980a:	d004      	beq.n	8019816 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801980c:	f04f 33ff 	mov.w	r3, #4294967295
 8019810:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8019812:	2301      	movs	r3, #1
 8019814:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	683a      	ldr	r2, [r7, #0]
 801981a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 801981c:	7bfb      	ldrb	r3, [r7, #15]
}
 801981e:	4618      	mov	r0, r3
 8019820:	3710      	adds	r7, #16
 8019822:	46bd      	mov	sp, r7
 8019824:	bd80      	pop	{r7, pc}
	...

08019828 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b084      	sub	sp, #16
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8019830:	6878      	ldr	r0, [r7, #4]
 8019832:	f7ff ff87 	bl	8019744 <sync_window>
 8019836:	4603      	mov	r3, r0
 8019838:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801983a:	7bfb      	ldrb	r3, [r7, #15]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d158      	bne.n	80198f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	2b03      	cmp	r3, #3
 8019846:	d148      	bne.n	80198da <sync_fs+0xb2>
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	791b      	ldrb	r3, [r3, #4]
 801984c:	2b01      	cmp	r3, #1
 801984e:	d144      	bne.n	80198da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	3334      	adds	r3, #52	@ 0x34
 8019854:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019858:	2100      	movs	r1, #0
 801985a:	4618      	mov	r0, r3
 801985c:	f7ff fda9 	bl	80193b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	3334      	adds	r3, #52	@ 0x34
 8019864:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8019868:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801986c:	4618      	mov	r0, r3
 801986e:	f7ff fd38 	bl	80192e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	3334      	adds	r3, #52	@ 0x34
 8019876:	4921      	ldr	r1, [pc, #132]	@ (80198fc <sync_fs+0xd4>)
 8019878:	4618      	mov	r0, r3
 801987a:	f7ff fd4d 	bl	8019318 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	3334      	adds	r3, #52	@ 0x34
 8019882:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8019886:	491e      	ldr	r1, [pc, #120]	@ (8019900 <sync_fs+0xd8>)
 8019888:	4618      	mov	r0, r3
 801988a:	f7ff fd45 	bl	8019318 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	3334      	adds	r3, #52	@ 0x34
 8019892:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	695b      	ldr	r3, [r3, #20]
 801989a:	4619      	mov	r1, r3
 801989c:	4610      	mov	r0, r2
 801989e:	f7ff fd3b 	bl	8019318 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	3334      	adds	r3, #52	@ 0x34
 80198a6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	691b      	ldr	r3, [r3, #16]
 80198ae:	4619      	mov	r1, r3
 80198b0:	4610      	mov	r0, r2
 80198b2:	f7ff fd31 	bl	8019318 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6a1b      	ldr	r3, [r3, #32]
 80198ba:	1c5a      	adds	r2, r3, #1
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	7858      	ldrb	r0, [r3, #1]
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80198ce:	2301      	movs	r3, #1
 80198d0:	f7ff fc8e 	bl	80191f0 <disk_write>
			fs->fsi_flag = 0;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2200      	movs	r2, #0
 80198d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	785b      	ldrb	r3, [r3, #1]
 80198de:	2200      	movs	r2, #0
 80198e0:	2100      	movs	r1, #0
 80198e2:	4618      	mov	r0, r3
 80198e4:	f7ff fca4 	bl	8019230 <disk_ioctl>
 80198e8:	4603      	mov	r3, r0
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d001      	beq.n	80198f2 <sync_fs+0xca>
 80198ee:	2301      	movs	r3, #1
 80198f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80198f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	3710      	adds	r7, #16
 80198f8:	46bd      	mov	sp, r7
 80198fa:	bd80      	pop	{r7, pc}
 80198fc:	41615252 	.word	0x41615252
 8019900:	61417272 	.word	0x61417272

08019904 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8019904:	b480      	push	{r7}
 8019906:	b083      	sub	sp, #12
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
 801990c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	3b02      	subs	r3, #2
 8019912:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	699b      	ldr	r3, [r3, #24]
 8019918:	3b02      	subs	r3, #2
 801991a:	683a      	ldr	r2, [r7, #0]
 801991c:	429a      	cmp	r2, r3
 801991e:	d301      	bcc.n	8019924 <clust2sect+0x20>
 8019920:	2300      	movs	r3, #0
 8019922:	e008      	b.n	8019936 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	895b      	ldrh	r3, [r3, #10]
 8019928:	461a      	mov	r2, r3
 801992a:	683b      	ldr	r3, [r7, #0]
 801992c:	fb03 f202 	mul.w	r2, r3, r2
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019934:	4413      	add	r3, r2
}
 8019936:	4618      	mov	r0, r3
 8019938:	370c      	adds	r7, #12
 801993a:	46bd      	mov	sp, r7
 801993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019940:	4770      	bx	lr

08019942 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8019942:	b580      	push	{r7, lr}
 8019944:	b086      	sub	sp, #24
 8019946:	af00      	add	r7, sp, #0
 8019948:	6078      	str	r0, [r7, #4]
 801994a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	2b01      	cmp	r3, #1
 8019956:	d904      	bls.n	8019962 <get_fat+0x20>
 8019958:	693b      	ldr	r3, [r7, #16]
 801995a:	699b      	ldr	r3, [r3, #24]
 801995c:	683a      	ldr	r2, [r7, #0]
 801995e:	429a      	cmp	r2, r3
 8019960:	d302      	bcc.n	8019968 <get_fat+0x26>
		val = 1;	/* Internal error */
 8019962:	2301      	movs	r3, #1
 8019964:	617b      	str	r3, [r7, #20]
 8019966:	e08e      	b.n	8019a86 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8019968:	f04f 33ff 	mov.w	r3, #4294967295
 801996c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801996e:	693b      	ldr	r3, [r7, #16]
 8019970:	781b      	ldrb	r3, [r3, #0]
 8019972:	2b03      	cmp	r3, #3
 8019974:	d061      	beq.n	8019a3a <get_fat+0xf8>
 8019976:	2b03      	cmp	r3, #3
 8019978:	dc7b      	bgt.n	8019a72 <get_fat+0x130>
 801997a:	2b01      	cmp	r3, #1
 801997c:	d002      	beq.n	8019984 <get_fat+0x42>
 801997e:	2b02      	cmp	r3, #2
 8019980:	d041      	beq.n	8019a06 <get_fat+0xc4>
 8019982:	e076      	b.n	8019a72 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	60fb      	str	r3, [r7, #12]
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	085b      	lsrs	r3, r3, #1
 801998c:	68fa      	ldr	r2, [r7, #12]
 801998e:	4413      	add	r3, r2
 8019990:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019992:	693b      	ldr	r3, [r7, #16]
 8019994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	0a5b      	lsrs	r3, r3, #9
 801999a:	4413      	add	r3, r2
 801999c:	4619      	mov	r1, r3
 801999e:	6938      	ldr	r0, [r7, #16]
 80199a0:	f7ff ff14 	bl	80197cc <move_window>
 80199a4:	4603      	mov	r3, r0
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d166      	bne.n	8019a78 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	1c5a      	adds	r2, r3, #1
 80199ae:	60fa      	str	r2, [r7, #12]
 80199b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80199b4:	693a      	ldr	r2, [r7, #16]
 80199b6:	4413      	add	r3, r2
 80199b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80199bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80199be:	693b      	ldr	r3, [r7, #16]
 80199c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	0a5b      	lsrs	r3, r3, #9
 80199c6:	4413      	add	r3, r2
 80199c8:	4619      	mov	r1, r3
 80199ca:	6938      	ldr	r0, [r7, #16]
 80199cc:	f7ff fefe 	bl	80197cc <move_window>
 80199d0:	4603      	mov	r3, r0
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d152      	bne.n	8019a7c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80199dc:	693a      	ldr	r2, [r7, #16]
 80199de:	4413      	add	r3, r2
 80199e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80199e4:	021b      	lsls	r3, r3, #8
 80199e6:	68ba      	ldr	r2, [r7, #8]
 80199e8:	4313      	orrs	r3, r2
 80199ea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80199ec:	683b      	ldr	r3, [r7, #0]
 80199ee:	f003 0301 	and.w	r3, r3, #1
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d002      	beq.n	80199fc <get_fat+0xba>
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	091b      	lsrs	r3, r3, #4
 80199fa:	e002      	b.n	8019a02 <get_fat+0xc0>
 80199fc:	68bb      	ldr	r3, [r7, #8]
 80199fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019a02:	617b      	str	r3, [r7, #20]
			break;
 8019a04:	e03f      	b.n	8019a86 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019a06:	693b      	ldr	r3, [r7, #16]
 8019a08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a0a:	683b      	ldr	r3, [r7, #0]
 8019a0c:	0a1b      	lsrs	r3, r3, #8
 8019a0e:	4413      	add	r3, r2
 8019a10:	4619      	mov	r1, r3
 8019a12:	6938      	ldr	r0, [r7, #16]
 8019a14:	f7ff feda 	bl	80197cc <move_window>
 8019a18:	4603      	mov	r3, r0
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d130      	bne.n	8019a80 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019a1e:	693b      	ldr	r3, [r7, #16]
 8019a20:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	005b      	lsls	r3, r3, #1
 8019a28:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019a2c:	4413      	add	r3, r2
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7ff fc1c 	bl	801926c <ld_word>
 8019a34:	4603      	mov	r3, r0
 8019a36:	617b      	str	r3, [r7, #20]
			break;
 8019a38:	e025      	b.n	8019a86 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019a3e:	683b      	ldr	r3, [r7, #0]
 8019a40:	09db      	lsrs	r3, r3, #7
 8019a42:	4413      	add	r3, r2
 8019a44:	4619      	mov	r1, r3
 8019a46:	6938      	ldr	r0, [r7, #16]
 8019a48:	f7ff fec0 	bl	80197cc <move_window>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d118      	bne.n	8019a84 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019a52:	693b      	ldr	r3, [r7, #16]
 8019a54:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	009b      	lsls	r3, r3, #2
 8019a5c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019a60:	4413      	add	r3, r2
 8019a62:	4618      	mov	r0, r3
 8019a64:	f7ff fc1a 	bl	801929c <ld_dword>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8019a6e:	617b      	str	r3, [r7, #20]
			break;
 8019a70:	e009      	b.n	8019a86 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8019a72:	2301      	movs	r3, #1
 8019a74:	617b      	str	r3, [r7, #20]
 8019a76:	e006      	b.n	8019a86 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a78:	bf00      	nop
 8019a7a:	e004      	b.n	8019a86 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019a7c:	bf00      	nop
 8019a7e:	e002      	b.n	8019a86 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019a80:	bf00      	nop
 8019a82:	e000      	b.n	8019a86 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019a84:	bf00      	nop
		}
	}

	return val;
 8019a86:	697b      	ldr	r3, [r7, #20]
}
 8019a88:	4618      	mov	r0, r3
 8019a8a:	3718      	adds	r7, #24
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	bd80      	pop	{r7, pc}

08019a90 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8019a90:	b590      	push	{r4, r7, lr}
 8019a92:	b089      	sub	sp, #36	@ 0x24
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	60f8      	str	r0, [r7, #12]
 8019a98:	60b9      	str	r1, [r7, #8]
 8019a9a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8019a9c:	2302      	movs	r3, #2
 8019a9e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019aa0:	68bb      	ldr	r3, [r7, #8]
 8019aa2:	2b01      	cmp	r3, #1
 8019aa4:	f240 80d9 	bls.w	8019c5a <put_fat+0x1ca>
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	699b      	ldr	r3, [r3, #24]
 8019aac:	68ba      	ldr	r2, [r7, #8]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	f080 80d3 	bcs.w	8019c5a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	781b      	ldrb	r3, [r3, #0]
 8019ab8:	2b03      	cmp	r3, #3
 8019aba:	f000 8096 	beq.w	8019bea <put_fat+0x15a>
 8019abe:	2b03      	cmp	r3, #3
 8019ac0:	f300 80cb 	bgt.w	8019c5a <put_fat+0x1ca>
 8019ac4:	2b01      	cmp	r3, #1
 8019ac6:	d002      	beq.n	8019ace <put_fat+0x3e>
 8019ac8:	2b02      	cmp	r3, #2
 8019aca:	d06e      	beq.n	8019baa <put_fat+0x11a>
 8019acc:	e0c5      	b.n	8019c5a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019ace:	68bb      	ldr	r3, [r7, #8]
 8019ad0:	61bb      	str	r3, [r7, #24]
 8019ad2:	69bb      	ldr	r3, [r7, #24]
 8019ad4:	085b      	lsrs	r3, r3, #1
 8019ad6:	69ba      	ldr	r2, [r7, #24]
 8019ad8:	4413      	add	r3, r2
 8019ada:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019ae0:	69bb      	ldr	r3, [r7, #24]
 8019ae2:	0a5b      	lsrs	r3, r3, #9
 8019ae4:	4413      	add	r3, r2
 8019ae6:	4619      	mov	r1, r3
 8019ae8:	68f8      	ldr	r0, [r7, #12]
 8019aea:	f7ff fe6f 	bl	80197cc <move_window>
 8019aee:	4603      	mov	r3, r0
 8019af0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019af2:	7ffb      	ldrb	r3, [r7, #31]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	f040 80a9 	bne.w	8019c4c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b00:	69bb      	ldr	r3, [r7, #24]
 8019b02:	1c59      	adds	r1, r3, #1
 8019b04:	61b9      	str	r1, [r7, #24]
 8019b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b0a:	4413      	add	r3, r2
 8019b0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019b0e:	68bb      	ldr	r3, [r7, #8]
 8019b10:	f003 0301 	and.w	r3, r3, #1
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d00d      	beq.n	8019b34 <put_fat+0xa4>
 8019b18:	697b      	ldr	r3, [r7, #20]
 8019b1a:	781b      	ldrb	r3, [r3, #0]
 8019b1c:	b25b      	sxtb	r3, r3
 8019b1e:	f003 030f 	and.w	r3, r3, #15
 8019b22:	b25a      	sxtb	r2, r3
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	b2db      	uxtb	r3, r3
 8019b28:	011b      	lsls	r3, r3, #4
 8019b2a:	b25b      	sxtb	r3, r3
 8019b2c:	4313      	orrs	r3, r2
 8019b2e:	b25b      	sxtb	r3, r3
 8019b30:	b2db      	uxtb	r3, r3
 8019b32:	e001      	b.n	8019b38 <put_fat+0xa8>
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	b2db      	uxtb	r3, r3
 8019b38:	697a      	ldr	r2, [r7, #20]
 8019b3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	2201      	movs	r2, #1
 8019b40:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019b46:	69bb      	ldr	r3, [r7, #24]
 8019b48:	0a5b      	lsrs	r3, r3, #9
 8019b4a:	4413      	add	r3, r2
 8019b4c:	4619      	mov	r1, r3
 8019b4e:	68f8      	ldr	r0, [r7, #12]
 8019b50:	f7ff fe3c 	bl	80197cc <move_window>
 8019b54:	4603      	mov	r3, r0
 8019b56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019b58:	7ffb      	ldrb	r3, [r7, #31]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d178      	bne.n	8019c50 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019b64:	69bb      	ldr	r3, [r7, #24]
 8019b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b6a:	4413      	add	r3, r2
 8019b6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019b6e:	68bb      	ldr	r3, [r7, #8]
 8019b70:	f003 0301 	and.w	r3, r3, #1
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d003      	beq.n	8019b80 <put_fat+0xf0>
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	091b      	lsrs	r3, r3, #4
 8019b7c:	b2db      	uxtb	r3, r3
 8019b7e:	e00e      	b.n	8019b9e <put_fat+0x10e>
 8019b80:	697b      	ldr	r3, [r7, #20]
 8019b82:	781b      	ldrb	r3, [r3, #0]
 8019b84:	b25b      	sxtb	r3, r3
 8019b86:	f023 030f 	bic.w	r3, r3, #15
 8019b8a:	b25a      	sxtb	r2, r3
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	0a1b      	lsrs	r3, r3, #8
 8019b90:	b25b      	sxtb	r3, r3
 8019b92:	f003 030f 	and.w	r3, r3, #15
 8019b96:	b25b      	sxtb	r3, r3
 8019b98:	4313      	orrs	r3, r2
 8019b9a:	b25b      	sxtb	r3, r3
 8019b9c:	b2db      	uxtb	r3, r3
 8019b9e:	697a      	ldr	r2, [r7, #20]
 8019ba0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	2201      	movs	r2, #1
 8019ba6:	70da      	strb	r2, [r3, #3]
			break;
 8019ba8:	e057      	b.n	8019c5a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	0a1b      	lsrs	r3, r3, #8
 8019bb2:	4413      	add	r3, r2
 8019bb4:	4619      	mov	r1, r3
 8019bb6:	68f8      	ldr	r0, [r7, #12]
 8019bb8:	f7ff fe08 	bl	80197cc <move_window>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019bc0:	7ffb      	ldrb	r3, [r7, #31]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d146      	bne.n	8019c54 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019bcc:	68bb      	ldr	r3, [r7, #8]
 8019bce:	005b      	lsls	r3, r3, #1
 8019bd0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8019bd4:	4413      	add	r3, r2
 8019bd6:	687a      	ldr	r2, [r7, #4]
 8019bd8:	b292      	uxth	r2, r2
 8019bda:	4611      	mov	r1, r2
 8019bdc:	4618      	mov	r0, r3
 8019bde:	f7ff fb80 	bl	80192e2 <st_word>
			fs->wflag = 1;
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	2201      	movs	r2, #1
 8019be6:	70da      	strb	r2, [r3, #3]
			break;
 8019be8:	e037      	b.n	8019c5a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	09db      	lsrs	r3, r3, #7
 8019bf2:	4413      	add	r3, r2
 8019bf4:	4619      	mov	r1, r3
 8019bf6:	68f8      	ldr	r0, [r7, #12]
 8019bf8:	f7ff fde8 	bl	80197cc <move_window>
 8019bfc:	4603      	mov	r3, r0
 8019bfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019c00:	7ffb      	ldrb	r3, [r7, #31]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d128      	bne.n	8019c58 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	009b      	lsls	r3, r3, #2
 8019c16:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c1a:	4413      	add	r3, r2
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	f7ff fb3d 	bl	801929c <ld_dword>
 8019c22:	4603      	mov	r3, r0
 8019c24:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8019c28:	4323      	orrs	r3, r4
 8019c2a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019c32:	68bb      	ldr	r3, [r7, #8]
 8019c34:	009b      	lsls	r3, r3, #2
 8019c36:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8019c3a:	4413      	add	r3, r2
 8019c3c:	6879      	ldr	r1, [r7, #4]
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7ff fb6a 	bl	8019318 <st_dword>
			fs->wflag = 1;
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	2201      	movs	r2, #1
 8019c48:	70da      	strb	r2, [r3, #3]
			break;
 8019c4a:	e006      	b.n	8019c5a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c4c:	bf00      	nop
 8019c4e:	e004      	b.n	8019c5a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c50:	bf00      	nop
 8019c52:	e002      	b.n	8019c5a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c54:	bf00      	nop
 8019c56:	e000      	b.n	8019c5a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8019c58:	bf00      	nop
		}
	}
	return res;
 8019c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	3724      	adds	r7, #36	@ 0x24
 8019c60:	46bd      	mov	sp, r7
 8019c62:	bd90      	pop	{r4, r7, pc}

08019c64 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b088      	sub	sp, #32
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	60f8      	str	r0, [r7, #12]
 8019c6c:	60b9      	str	r1, [r7, #8]
 8019c6e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019c70:	2300      	movs	r3, #0
 8019c72:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019c7a:	68bb      	ldr	r3, [r7, #8]
 8019c7c:	2b01      	cmp	r3, #1
 8019c7e:	d904      	bls.n	8019c8a <remove_chain+0x26>
 8019c80:	69bb      	ldr	r3, [r7, #24]
 8019c82:	699b      	ldr	r3, [r3, #24]
 8019c84:	68ba      	ldr	r2, [r7, #8]
 8019c86:	429a      	cmp	r2, r3
 8019c88:	d301      	bcc.n	8019c8e <remove_chain+0x2a>
 8019c8a:	2302      	movs	r3, #2
 8019c8c:	e04b      	b.n	8019d26 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d00c      	beq.n	8019cae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019c94:	f04f 32ff 	mov.w	r2, #4294967295
 8019c98:	6879      	ldr	r1, [r7, #4]
 8019c9a:	69b8      	ldr	r0, [r7, #24]
 8019c9c:	f7ff fef8 	bl	8019a90 <put_fat>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019ca4:	7ffb      	ldrb	r3, [r7, #31]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d001      	beq.n	8019cae <remove_chain+0x4a>
 8019caa:	7ffb      	ldrb	r3, [r7, #31]
 8019cac:	e03b      	b.n	8019d26 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019cae:	68b9      	ldr	r1, [r7, #8]
 8019cb0:	68f8      	ldr	r0, [r7, #12]
 8019cb2:	f7ff fe46 	bl	8019942 <get_fat>
 8019cb6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019cb8:	697b      	ldr	r3, [r7, #20]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d031      	beq.n	8019d22 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019cbe:	697b      	ldr	r3, [r7, #20]
 8019cc0:	2b01      	cmp	r3, #1
 8019cc2:	d101      	bne.n	8019cc8 <remove_chain+0x64>
 8019cc4:	2302      	movs	r3, #2
 8019cc6:	e02e      	b.n	8019d26 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019cc8:	697b      	ldr	r3, [r7, #20]
 8019cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019cce:	d101      	bne.n	8019cd4 <remove_chain+0x70>
 8019cd0:	2301      	movs	r3, #1
 8019cd2:	e028      	b.n	8019d26 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019cd4:	2200      	movs	r2, #0
 8019cd6:	68b9      	ldr	r1, [r7, #8]
 8019cd8:	69b8      	ldr	r0, [r7, #24]
 8019cda:	f7ff fed9 	bl	8019a90 <put_fat>
 8019cde:	4603      	mov	r3, r0
 8019ce0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019ce2:	7ffb      	ldrb	r3, [r7, #31]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d001      	beq.n	8019cec <remove_chain+0x88>
 8019ce8:	7ffb      	ldrb	r3, [r7, #31]
 8019cea:	e01c      	b.n	8019d26 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019cec:	69bb      	ldr	r3, [r7, #24]
 8019cee:	695a      	ldr	r2, [r3, #20]
 8019cf0:	69bb      	ldr	r3, [r7, #24]
 8019cf2:	699b      	ldr	r3, [r3, #24]
 8019cf4:	3b02      	subs	r3, #2
 8019cf6:	429a      	cmp	r2, r3
 8019cf8:	d20b      	bcs.n	8019d12 <remove_chain+0xae>
			fs->free_clst++;
 8019cfa:	69bb      	ldr	r3, [r7, #24]
 8019cfc:	695b      	ldr	r3, [r3, #20]
 8019cfe:	1c5a      	adds	r2, r3, #1
 8019d00:	69bb      	ldr	r3, [r7, #24]
 8019d02:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8019d04:	69bb      	ldr	r3, [r7, #24]
 8019d06:	791b      	ldrb	r3, [r3, #4]
 8019d08:	f043 0301 	orr.w	r3, r3, #1
 8019d0c:	b2da      	uxtb	r2, r3
 8019d0e:	69bb      	ldr	r3, [r7, #24]
 8019d10:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019d12:	697b      	ldr	r3, [r7, #20]
 8019d14:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019d16:	69bb      	ldr	r3, [r7, #24]
 8019d18:	699b      	ldr	r3, [r3, #24]
 8019d1a:	68ba      	ldr	r2, [r7, #8]
 8019d1c:	429a      	cmp	r2, r3
 8019d1e:	d3c6      	bcc.n	8019cae <remove_chain+0x4a>
 8019d20:	e000      	b.n	8019d24 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019d22:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019d24:	2300      	movs	r3, #0
}
 8019d26:	4618      	mov	r0, r3
 8019d28:	3720      	adds	r7, #32
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bd80      	pop	{r7, pc}

08019d2e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019d2e:	b580      	push	{r7, lr}
 8019d30:	b088      	sub	sp, #32
 8019d32:	af00      	add	r7, sp, #0
 8019d34:	6078      	str	r0, [r7, #4]
 8019d36:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d10d      	bne.n	8019d60 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019d44:	693b      	ldr	r3, [r7, #16]
 8019d46:	691b      	ldr	r3, [r3, #16]
 8019d48:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019d4a:	69bb      	ldr	r3, [r7, #24]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d004      	beq.n	8019d5a <create_chain+0x2c>
 8019d50:	693b      	ldr	r3, [r7, #16]
 8019d52:	699b      	ldr	r3, [r3, #24]
 8019d54:	69ba      	ldr	r2, [r7, #24]
 8019d56:	429a      	cmp	r2, r3
 8019d58:	d31b      	bcc.n	8019d92 <create_chain+0x64>
 8019d5a:	2301      	movs	r3, #1
 8019d5c:	61bb      	str	r3, [r7, #24]
 8019d5e:	e018      	b.n	8019d92 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019d60:	6839      	ldr	r1, [r7, #0]
 8019d62:	6878      	ldr	r0, [r7, #4]
 8019d64:	f7ff fded 	bl	8019942 <get_fat>
 8019d68:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	2b01      	cmp	r3, #1
 8019d6e:	d801      	bhi.n	8019d74 <create_chain+0x46>
 8019d70:	2301      	movs	r3, #1
 8019d72:	e070      	b.n	8019e56 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d7a:	d101      	bne.n	8019d80 <create_chain+0x52>
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	e06a      	b.n	8019e56 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019d80:	693b      	ldr	r3, [r7, #16]
 8019d82:	699b      	ldr	r3, [r3, #24]
 8019d84:	68fa      	ldr	r2, [r7, #12]
 8019d86:	429a      	cmp	r2, r3
 8019d88:	d201      	bcs.n	8019d8e <create_chain+0x60>
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	e063      	b.n	8019e56 <create_chain+0x128>
		scl = clst;
 8019d8e:	683b      	ldr	r3, [r7, #0]
 8019d90:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019d92:	69bb      	ldr	r3, [r7, #24]
 8019d94:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019d96:	69fb      	ldr	r3, [r7, #28]
 8019d98:	3301      	adds	r3, #1
 8019d9a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019d9c:	693b      	ldr	r3, [r7, #16]
 8019d9e:	699b      	ldr	r3, [r3, #24]
 8019da0:	69fa      	ldr	r2, [r7, #28]
 8019da2:	429a      	cmp	r2, r3
 8019da4:	d307      	bcc.n	8019db6 <create_chain+0x88>
				ncl = 2;
 8019da6:	2302      	movs	r3, #2
 8019da8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019daa:	69fa      	ldr	r2, [r7, #28]
 8019dac:	69bb      	ldr	r3, [r7, #24]
 8019dae:	429a      	cmp	r2, r3
 8019db0:	d901      	bls.n	8019db6 <create_chain+0x88>
 8019db2:	2300      	movs	r3, #0
 8019db4:	e04f      	b.n	8019e56 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019db6:	69f9      	ldr	r1, [r7, #28]
 8019db8:	6878      	ldr	r0, [r7, #4]
 8019dba:	f7ff fdc2 	bl	8019942 <get_fat>
 8019dbe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d00e      	beq.n	8019de4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	2b01      	cmp	r3, #1
 8019dca:	d003      	beq.n	8019dd4 <create_chain+0xa6>
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019dd2:	d101      	bne.n	8019dd8 <create_chain+0xaa>
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	e03e      	b.n	8019e56 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8019dd8:	69fa      	ldr	r2, [r7, #28]
 8019dda:	69bb      	ldr	r3, [r7, #24]
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d1da      	bne.n	8019d96 <create_chain+0x68>
 8019de0:	2300      	movs	r3, #0
 8019de2:	e038      	b.n	8019e56 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019de4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8019de6:	f04f 32ff 	mov.w	r2, #4294967295
 8019dea:	69f9      	ldr	r1, [r7, #28]
 8019dec:	6938      	ldr	r0, [r7, #16]
 8019dee:	f7ff fe4f 	bl	8019a90 <put_fat>
 8019df2:	4603      	mov	r3, r0
 8019df4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8019df6:	7dfb      	ldrb	r3, [r7, #23]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d109      	bne.n	8019e10 <create_chain+0xe2>
 8019dfc:	683b      	ldr	r3, [r7, #0]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d006      	beq.n	8019e10 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019e02:	69fa      	ldr	r2, [r7, #28]
 8019e04:	6839      	ldr	r1, [r7, #0]
 8019e06:	6938      	ldr	r0, [r7, #16]
 8019e08:	f7ff fe42 	bl	8019a90 <put_fat>
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019e10:	7dfb      	ldrb	r3, [r7, #23]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d116      	bne.n	8019e44 <create_chain+0x116>
		fs->last_clst = ncl;
 8019e16:	693b      	ldr	r3, [r7, #16]
 8019e18:	69fa      	ldr	r2, [r7, #28]
 8019e1a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019e1c:	693b      	ldr	r3, [r7, #16]
 8019e1e:	695a      	ldr	r2, [r3, #20]
 8019e20:	693b      	ldr	r3, [r7, #16]
 8019e22:	699b      	ldr	r3, [r3, #24]
 8019e24:	3b02      	subs	r3, #2
 8019e26:	429a      	cmp	r2, r3
 8019e28:	d804      	bhi.n	8019e34 <create_chain+0x106>
 8019e2a:	693b      	ldr	r3, [r7, #16]
 8019e2c:	695b      	ldr	r3, [r3, #20]
 8019e2e:	1e5a      	subs	r2, r3, #1
 8019e30:	693b      	ldr	r3, [r7, #16]
 8019e32:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8019e34:	693b      	ldr	r3, [r7, #16]
 8019e36:	791b      	ldrb	r3, [r3, #4]
 8019e38:	f043 0301 	orr.w	r3, r3, #1
 8019e3c:	b2da      	uxtb	r2, r3
 8019e3e:	693b      	ldr	r3, [r7, #16]
 8019e40:	711a      	strb	r2, [r3, #4]
 8019e42:	e007      	b.n	8019e54 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8019e44:	7dfb      	ldrb	r3, [r7, #23]
 8019e46:	2b01      	cmp	r3, #1
 8019e48:	d102      	bne.n	8019e50 <create_chain+0x122>
 8019e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8019e4e:	e000      	b.n	8019e52 <create_chain+0x124>
 8019e50:	2301      	movs	r3, #1
 8019e52:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8019e54:	69fb      	ldr	r3, [r7, #28]
}
 8019e56:	4618      	mov	r0, r3
 8019e58:	3720      	adds	r7, #32
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	bd80      	pop	{r7, pc}

08019e5e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8019e5e:	b480      	push	{r7}
 8019e60:	b087      	sub	sp, #28
 8019e62:	af00      	add	r7, sp, #0
 8019e64:	6078      	str	r0, [r7, #4]
 8019e66:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e72:	3304      	adds	r3, #4
 8019e74:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8019e76:	683b      	ldr	r3, [r7, #0]
 8019e78:	0a5b      	lsrs	r3, r3, #9
 8019e7a:	68fa      	ldr	r2, [r7, #12]
 8019e7c:	8952      	ldrh	r2, [r2, #10]
 8019e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e82:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019e84:	693b      	ldr	r3, [r7, #16]
 8019e86:	1d1a      	adds	r2, r3, #4
 8019e88:	613a      	str	r2, [r7, #16]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8019e8e:	68bb      	ldr	r3, [r7, #8]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d101      	bne.n	8019e98 <clmt_clust+0x3a>
 8019e94:	2300      	movs	r3, #0
 8019e96:	e010      	b.n	8019eba <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8019e98:	697a      	ldr	r2, [r7, #20]
 8019e9a:	68bb      	ldr	r3, [r7, #8]
 8019e9c:	429a      	cmp	r2, r3
 8019e9e:	d307      	bcc.n	8019eb0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8019ea0:	697a      	ldr	r2, [r7, #20]
 8019ea2:	68bb      	ldr	r3, [r7, #8]
 8019ea4:	1ad3      	subs	r3, r2, r3
 8019ea6:	617b      	str	r3, [r7, #20]
 8019ea8:	693b      	ldr	r3, [r7, #16]
 8019eaa:	3304      	adds	r3, #4
 8019eac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019eae:	e7e9      	b.n	8019e84 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8019eb0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8019eb2:	693b      	ldr	r3, [r7, #16]
 8019eb4:	681a      	ldr	r2, [r3, #0]
 8019eb6:	697b      	ldr	r3, [r7, #20]
 8019eb8:	4413      	add	r3, r2
}
 8019eba:	4618      	mov	r0, r3
 8019ebc:	371c      	adds	r7, #28
 8019ebe:	46bd      	mov	sp, r7
 8019ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec4:	4770      	bx	lr

08019ec6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8019ec6:	b580      	push	{r7, lr}
 8019ec8:	b086      	sub	sp, #24
 8019eca:	af00      	add	r7, sp, #0
 8019ecc:	6078      	str	r0, [r7, #4]
 8019ece:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019edc:	d204      	bcs.n	8019ee8 <dir_sdi+0x22>
 8019ede:	683b      	ldr	r3, [r7, #0]
 8019ee0:	f003 031f 	and.w	r3, r3, #31
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d001      	beq.n	8019eec <dir_sdi+0x26>
		return FR_INT_ERR;
 8019ee8:	2302      	movs	r3, #2
 8019eea:	e063      	b.n	8019fb4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	683a      	ldr	r2, [r7, #0]
 8019ef0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	689b      	ldr	r3, [r3, #8]
 8019ef6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8019ef8:	697b      	ldr	r3, [r7, #20]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d106      	bne.n	8019f0c <dir_sdi+0x46>
 8019efe:	693b      	ldr	r3, [r7, #16]
 8019f00:	781b      	ldrb	r3, [r3, #0]
 8019f02:	2b02      	cmp	r3, #2
 8019f04:	d902      	bls.n	8019f0c <dir_sdi+0x46>
		clst = fs->dirbase;
 8019f06:	693b      	ldr	r3, [r7, #16]
 8019f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f0a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8019f0c:	697b      	ldr	r3, [r7, #20]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d10c      	bne.n	8019f2c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8019f12:	683b      	ldr	r3, [r7, #0]
 8019f14:	095b      	lsrs	r3, r3, #5
 8019f16:	693a      	ldr	r2, [r7, #16]
 8019f18:	8912      	ldrh	r2, [r2, #8]
 8019f1a:	4293      	cmp	r3, r2
 8019f1c:	d301      	bcc.n	8019f22 <dir_sdi+0x5c>
 8019f1e:	2302      	movs	r3, #2
 8019f20:	e048      	b.n	8019fb4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8019f22:	693b      	ldr	r3, [r7, #16]
 8019f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	61da      	str	r2, [r3, #28]
 8019f2a:	e029      	b.n	8019f80 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8019f2c:	693b      	ldr	r3, [r7, #16]
 8019f2e:	895b      	ldrh	r3, [r3, #10]
 8019f30:	025b      	lsls	r3, r3, #9
 8019f32:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f34:	e019      	b.n	8019f6a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6979      	ldr	r1, [r7, #20]
 8019f3a:	4618      	mov	r0, r3
 8019f3c:	f7ff fd01 	bl	8019942 <get_fat>
 8019f40:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019f42:	697b      	ldr	r3, [r7, #20]
 8019f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f48:	d101      	bne.n	8019f4e <dir_sdi+0x88>
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	e032      	b.n	8019fb4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8019f4e:	697b      	ldr	r3, [r7, #20]
 8019f50:	2b01      	cmp	r3, #1
 8019f52:	d904      	bls.n	8019f5e <dir_sdi+0x98>
 8019f54:	693b      	ldr	r3, [r7, #16]
 8019f56:	699b      	ldr	r3, [r3, #24]
 8019f58:	697a      	ldr	r2, [r7, #20]
 8019f5a:	429a      	cmp	r2, r3
 8019f5c:	d301      	bcc.n	8019f62 <dir_sdi+0x9c>
 8019f5e:	2302      	movs	r3, #2
 8019f60:	e028      	b.n	8019fb4 <dir_sdi+0xee>
			ofs -= csz;
 8019f62:	683a      	ldr	r2, [r7, #0]
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	1ad3      	subs	r3, r2, r3
 8019f68:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8019f6a:	683a      	ldr	r2, [r7, #0]
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	429a      	cmp	r2, r3
 8019f70:	d2e1      	bcs.n	8019f36 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8019f72:	6979      	ldr	r1, [r7, #20]
 8019f74:	6938      	ldr	r0, [r7, #16]
 8019f76:	f7ff fcc5 	bl	8019904 <clust2sect>
 8019f7a:	4602      	mov	r2, r0
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	697a      	ldr	r2, [r7, #20]
 8019f84:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	69db      	ldr	r3, [r3, #28]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d101      	bne.n	8019f92 <dir_sdi+0xcc>
 8019f8e:	2302      	movs	r3, #2
 8019f90:	e010      	b.n	8019fb4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	69da      	ldr	r2, [r3, #28]
 8019f96:	683b      	ldr	r3, [r7, #0]
 8019f98:	0a5b      	lsrs	r3, r3, #9
 8019f9a:	441a      	add	r2, r3
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8019fa0:	693b      	ldr	r3, [r7, #16]
 8019fa2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019fac:	441a      	add	r2, r3
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8019fb2:	2300      	movs	r3, #0
}
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	3718      	adds	r7, #24
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bd80      	pop	{r7, pc}

08019fbc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b086      	sub	sp, #24
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	695b      	ldr	r3, [r3, #20]
 8019fd0:	3320      	adds	r3, #32
 8019fd2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	69db      	ldr	r3, [r3, #28]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d003      	beq.n	8019fe4 <dir_next+0x28>
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019fe2:	d301      	bcc.n	8019fe8 <dir_next+0x2c>
 8019fe4:	2304      	movs	r3, #4
 8019fe6:	e0aa      	b.n	801a13e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8019fe8:	68bb      	ldr	r3, [r7, #8]
 8019fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	f040 8098 	bne.w	801a124 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	69db      	ldr	r3, [r3, #28]
 8019ff8:	1c5a      	adds	r2, r3, #1
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	699b      	ldr	r3, [r3, #24]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d10b      	bne.n	801a01e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	095b      	lsrs	r3, r3, #5
 801a00a:	68fa      	ldr	r2, [r7, #12]
 801a00c:	8912      	ldrh	r2, [r2, #8]
 801a00e:	4293      	cmp	r3, r2
 801a010:	f0c0 8088 	bcc.w	801a124 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	2200      	movs	r2, #0
 801a018:	61da      	str	r2, [r3, #28]
 801a01a:	2304      	movs	r3, #4
 801a01c:	e08f      	b.n	801a13e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a01e:	68bb      	ldr	r3, [r7, #8]
 801a020:	0a5b      	lsrs	r3, r3, #9
 801a022:	68fa      	ldr	r2, [r7, #12]
 801a024:	8952      	ldrh	r2, [r2, #10]
 801a026:	3a01      	subs	r2, #1
 801a028:	4013      	ands	r3, r2
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d17a      	bne.n	801a124 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a02e:	687a      	ldr	r2, [r7, #4]
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	699b      	ldr	r3, [r3, #24]
 801a034:	4619      	mov	r1, r3
 801a036:	4610      	mov	r0, r2
 801a038:	f7ff fc83 	bl	8019942 <get_fat>
 801a03c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a03e:	697b      	ldr	r3, [r7, #20]
 801a040:	2b01      	cmp	r3, #1
 801a042:	d801      	bhi.n	801a048 <dir_next+0x8c>
 801a044:	2302      	movs	r3, #2
 801a046:	e07a      	b.n	801a13e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a048:	697b      	ldr	r3, [r7, #20]
 801a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a04e:	d101      	bne.n	801a054 <dir_next+0x98>
 801a050:	2301      	movs	r3, #1
 801a052:	e074      	b.n	801a13e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	699b      	ldr	r3, [r3, #24]
 801a058:	697a      	ldr	r2, [r7, #20]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	d358      	bcc.n	801a110 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801a05e:	683b      	ldr	r3, [r7, #0]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d104      	bne.n	801a06e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	2200      	movs	r2, #0
 801a068:	61da      	str	r2, [r3, #28]
 801a06a:	2304      	movs	r3, #4
 801a06c:	e067      	b.n	801a13e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801a06e:	687a      	ldr	r2, [r7, #4]
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	699b      	ldr	r3, [r3, #24]
 801a074:	4619      	mov	r1, r3
 801a076:	4610      	mov	r0, r2
 801a078:	f7ff fe59 	bl	8019d2e <create_chain>
 801a07c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a07e:	697b      	ldr	r3, [r7, #20]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d101      	bne.n	801a088 <dir_next+0xcc>
 801a084:	2307      	movs	r3, #7
 801a086:	e05a      	b.n	801a13e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801a088:	697b      	ldr	r3, [r7, #20]
 801a08a:	2b01      	cmp	r3, #1
 801a08c:	d101      	bne.n	801a092 <dir_next+0xd6>
 801a08e:	2302      	movs	r3, #2
 801a090:	e055      	b.n	801a13e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a092:	697b      	ldr	r3, [r7, #20]
 801a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a098:	d101      	bne.n	801a09e <dir_next+0xe2>
 801a09a:	2301      	movs	r3, #1
 801a09c:	e04f      	b.n	801a13e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a09e:	68f8      	ldr	r0, [r7, #12]
 801a0a0:	f7ff fb50 	bl	8019744 <sync_window>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d001      	beq.n	801a0ae <dir_next+0xf2>
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	e047      	b.n	801a13e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	3334      	adds	r3, #52	@ 0x34
 801a0b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a0b6:	2100      	movs	r1, #0
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f7ff f97a 	bl	80193b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a0be:	2300      	movs	r3, #0
 801a0c0:	613b      	str	r3, [r7, #16]
 801a0c2:	6979      	ldr	r1, [r7, #20]
 801a0c4:	68f8      	ldr	r0, [r7, #12]
 801a0c6:	f7ff fc1d 	bl	8019904 <clust2sect>
 801a0ca:	4602      	mov	r2, r0
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	631a      	str	r2, [r3, #48]	@ 0x30
 801a0d0:	e012      	b.n	801a0f8 <dir_next+0x13c>
						fs->wflag = 1;
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	2201      	movs	r2, #1
 801a0d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a0d8:	68f8      	ldr	r0, [r7, #12]
 801a0da:	f7ff fb33 	bl	8019744 <sync_window>
 801a0de:	4603      	mov	r3, r0
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d001      	beq.n	801a0e8 <dir_next+0x12c>
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	e02a      	b.n	801a13e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a0e8:	693b      	ldr	r3, [r7, #16]
 801a0ea:	3301      	adds	r3, #1
 801a0ec:	613b      	str	r3, [r7, #16]
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a0f2:	1c5a      	adds	r2, r3, #1
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	631a      	str	r2, [r3, #48]	@ 0x30
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	895b      	ldrh	r3, [r3, #10]
 801a0fc:	461a      	mov	r2, r3
 801a0fe:	693b      	ldr	r3, [r7, #16]
 801a100:	4293      	cmp	r3, r2
 801a102:	d3e6      	bcc.n	801a0d2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a108:	693b      	ldr	r3, [r7, #16]
 801a10a:	1ad2      	subs	r2, r2, r3
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	697a      	ldr	r2, [r7, #20]
 801a114:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801a116:	6979      	ldr	r1, [r7, #20]
 801a118:	68f8      	ldr	r0, [r7, #12]
 801a11a:	f7ff fbf3 	bl	8019904 <clust2sect>
 801a11e:	4602      	mov	r2, r0
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	68ba      	ldr	r2, [r7, #8]
 801a128:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a136:	441a      	add	r2, r3
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a13c:	2300      	movs	r3, #0
}
 801a13e:	4618      	mov	r0, r3
 801a140:	3718      	adds	r7, #24
 801a142:	46bd      	mov	sp, r7
 801a144:	bd80      	pop	{r7, pc}

0801a146 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a146:	b580      	push	{r7, lr}
 801a148:	b086      	sub	sp, #24
 801a14a:	af00      	add	r7, sp, #0
 801a14c:	6078      	str	r0, [r7, #4]
 801a14e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a156:	2100      	movs	r1, #0
 801a158:	6878      	ldr	r0, [r7, #4]
 801a15a:	f7ff feb4 	bl	8019ec6 <dir_sdi>
 801a15e:	4603      	mov	r3, r0
 801a160:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a162:	7dfb      	ldrb	r3, [r7, #23]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d12b      	bne.n	801a1c0 <dir_alloc+0x7a>
		n = 0;
 801a168:	2300      	movs	r3, #0
 801a16a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	69db      	ldr	r3, [r3, #28]
 801a170:	4619      	mov	r1, r3
 801a172:	68f8      	ldr	r0, [r7, #12]
 801a174:	f7ff fb2a 	bl	80197cc <move_window>
 801a178:	4603      	mov	r3, r0
 801a17a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a17c:	7dfb      	ldrb	r3, [r7, #23]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d11d      	bne.n	801a1be <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	6a1b      	ldr	r3, [r3, #32]
 801a186:	781b      	ldrb	r3, [r3, #0]
 801a188:	2be5      	cmp	r3, #229	@ 0xe5
 801a18a:	d004      	beq.n	801a196 <dir_alloc+0x50>
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	6a1b      	ldr	r3, [r3, #32]
 801a190:	781b      	ldrb	r3, [r3, #0]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d107      	bne.n	801a1a6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a196:	693b      	ldr	r3, [r7, #16]
 801a198:	3301      	adds	r3, #1
 801a19a:	613b      	str	r3, [r7, #16]
 801a19c:	693a      	ldr	r2, [r7, #16]
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	429a      	cmp	r2, r3
 801a1a2:	d102      	bne.n	801a1aa <dir_alloc+0x64>
 801a1a4:	e00c      	b.n	801a1c0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a1aa:	2101      	movs	r1, #1
 801a1ac:	6878      	ldr	r0, [r7, #4]
 801a1ae:	f7ff ff05 	bl	8019fbc <dir_next>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a1b6:	7dfb      	ldrb	r3, [r7, #23]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d0d7      	beq.n	801a16c <dir_alloc+0x26>
 801a1bc:	e000      	b.n	801a1c0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801a1be:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a1c0:	7dfb      	ldrb	r3, [r7, #23]
 801a1c2:	2b04      	cmp	r3, #4
 801a1c4:	d101      	bne.n	801a1ca <dir_alloc+0x84>
 801a1c6:	2307      	movs	r3, #7
 801a1c8:	75fb      	strb	r3, [r7, #23]
	return res;
 801a1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	3718      	adds	r7, #24
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	bd80      	pop	{r7, pc}

0801a1d4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b084      	sub	sp, #16
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	6078      	str	r0, [r7, #4]
 801a1dc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	331a      	adds	r3, #26
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7ff f842 	bl	801926c <ld_word>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	781b      	ldrb	r3, [r3, #0]
 801a1f0:	2b03      	cmp	r3, #3
 801a1f2:	d109      	bne.n	801a208 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	3314      	adds	r3, #20
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	f7ff f837 	bl	801926c <ld_word>
 801a1fe:	4603      	mov	r3, r0
 801a200:	041b      	lsls	r3, r3, #16
 801a202:	68fa      	ldr	r2, [r7, #12]
 801a204:	4313      	orrs	r3, r2
 801a206:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a208:	68fb      	ldr	r3, [r7, #12]
}
 801a20a:	4618      	mov	r0, r3
 801a20c:	3710      	adds	r7, #16
 801a20e:	46bd      	mov	sp, r7
 801a210:	bd80      	pop	{r7, pc}

0801a212 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a212:	b580      	push	{r7, lr}
 801a214:	b084      	sub	sp, #16
 801a216:	af00      	add	r7, sp, #0
 801a218:	60f8      	str	r0, [r7, #12]
 801a21a:	60b9      	str	r1, [r7, #8]
 801a21c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a21e:	68bb      	ldr	r3, [r7, #8]
 801a220:	331a      	adds	r3, #26
 801a222:	687a      	ldr	r2, [r7, #4]
 801a224:	b292      	uxth	r2, r2
 801a226:	4611      	mov	r1, r2
 801a228:	4618      	mov	r0, r3
 801a22a:	f7ff f85a 	bl	80192e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	781b      	ldrb	r3, [r3, #0]
 801a232:	2b03      	cmp	r3, #3
 801a234:	d109      	bne.n	801a24a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a236:	68bb      	ldr	r3, [r7, #8]
 801a238:	f103 0214 	add.w	r2, r3, #20
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	0c1b      	lsrs	r3, r3, #16
 801a240:	b29b      	uxth	r3, r3
 801a242:	4619      	mov	r1, r3
 801a244:	4610      	mov	r0, r2
 801a246:	f7ff f84c 	bl	80192e2 <st_word>
	}
}
 801a24a:	bf00      	nop
 801a24c:	3710      	adds	r7, #16
 801a24e:	46bd      	mov	sp, r7
 801a250:	bd80      	pop	{r7, pc}
	...

0801a254 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a254:	b590      	push	{r4, r7, lr}
 801a256:	b087      	sub	sp, #28
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	331a      	adds	r3, #26
 801a262:	4618      	mov	r0, r3
 801a264:	f7ff f802 	bl	801926c <ld_word>
 801a268:	4603      	mov	r3, r0
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d001      	beq.n	801a272 <cmp_lfn+0x1e>
 801a26e:	2300      	movs	r3, #0
 801a270:	e059      	b.n	801a326 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a272:	683b      	ldr	r3, [r7, #0]
 801a274:	781b      	ldrb	r3, [r3, #0]
 801a276:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a27a:	1e5a      	subs	r2, r3, #1
 801a27c:	4613      	mov	r3, r2
 801a27e:	005b      	lsls	r3, r3, #1
 801a280:	4413      	add	r3, r2
 801a282:	009b      	lsls	r3, r3, #2
 801a284:	4413      	add	r3, r2
 801a286:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a288:	2301      	movs	r3, #1
 801a28a:	81fb      	strh	r3, [r7, #14]
 801a28c:	2300      	movs	r3, #0
 801a28e:	613b      	str	r3, [r7, #16]
 801a290:	e033      	b.n	801a2fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a292:	4a27      	ldr	r2, [pc, #156]	@ (801a330 <cmp_lfn+0xdc>)
 801a294:	693b      	ldr	r3, [r7, #16]
 801a296:	4413      	add	r3, r2
 801a298:	781b      	ldrb	r3, [r3, #0]
 801a29a:	461a      	mov	r2, r3
 801a29c:	683b      	ldr	r3, [r7, #0]
 801a29e:	4413      	add	r3, r2
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	f7fe ffe3 	bl	801926c <ld_word>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a2aa:	89fb      	ldrh	r3, [r7, #14]
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d01a      	beq.n	801a2e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a2b0:	697b      	ldr	r3, [r7, #20]
 801a2b2:	2bfe      	cmp	r3, #254	@ 0xfe
 801a2b4:	d812      	bhi.n	801a2dc <cmp_lfn+0x88>
 801a2b6:	89bb      	ldrh	r3, [r7, #12]
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	f001 fe21 	bl	801bf00 <ff_wtoupper>
 801a2be:	4603      	mov	r3, r0
 801a2c0:	461c      	mov	r4, r3
 801a2c2:	697b      	ldr	r3, [r7, #20]
 801a2c4:	1c5a      	adds	r2, r3, #1
 801a2c6:	617a      	str	r2, [r7, #20]
 801a2c8:	005b      	lsls	r3, r3, #1
 801a2ca:	687a      	ldr	r2, [r7, #4]
 801a2cc:	4413      	add	r3, r2
 801a2ce:	881b      	ldrh	r3, [r3, #0]
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	f001 fe15 	bl	801bf00 <ff_wtoupper>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	429c      	cmp	r4, r3
 801a2da:	d001      	beq.n	801a2e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a2dc:	2300      	movs	r3, #0
 801a2de:	e022      	b.n	801a326 <cmp_lfn+0xd2>
			}
			wc = uc;
 801a2e0:	89bb      	ldrh	r3, [r7, #12]
 801a2e2:	81fb      	strh	r3, [r7, #14]
 801a2e4:	e006      	b.n	801a2f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a2e6:	89bb      	ldrh	r3, [r7, #12]
 801a2e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a2ec:	4293      	cmp	r3, r2
 801a2ee:	d001      	beq.n	801a2f4 <cmp_lfn+0xa0>
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	e018      	b.n	801a326 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a2f4:	693b      	ldr	r3, [r7, #16]
 801a2f6:	3301      	adds	r3, #1
 801a2f8:	613b      	str	r3, [r7, #16]
 801a2fa:	693b      	ldr	r3, [r7, #16]
 801a2fc:	2b0c      	cmp	r3, #12
 801a2fe:	d9c8      	bls.n	801a292 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a300:	683b      	ldr	r3, [r7, #0]
 801a302:	781b      	ldrb	r3, [r3, #0]
 801a304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d00b      	beq.n	801a324 <cmp_lfn+0xd0>
 801a30c:	89fb      	ldrh	r3, [r7, #14]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d008      	beq.n	801a324 <cmp_lfn+0xd0>
 801a312:	697b      	ldr	r3, [r7, #20]
 801a314:	005b      	lsls	r3, r3, #1
 801a316:	687a      	ldr	r2, [r7, #4]
 801a318:	4413      	add	r3, r2
 801a31a:	881b      	ldrh	r3, [r3, #0]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d001      	beq.n	801a324 <cmp_lfn+0xd0>
 801a320:	2300      	movs	r3, #0
 801a322:	e000      	b.n	801a326 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a324:	2301      	movs	r3, #1
}
 801a326:	4618      	mov	r0, r3
 801a328:	371c      	adds	r7, #28
 801a32a:	46bd      	mov	sp, r7
 801a32c:	bd90      	pop	{r4, r7, pc}
 801a32e:	bf00      	nop
 801a330:	08025070 	.word	0x08025070

0801a334 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b088      	sub	sp, #32
 801a338:	af00      	add	r7, sp, #0
 801a33a:	60f8      	str	r0, [r7, #12]
 801a33c:	60b9      	str	r1, [r7, #8]
 801a33e:	4611      	mov	r1, r2
 801a340:	461a      	mov	r2, r3
 801a342:	460b      	mov	r3, r1
 801a344:	71fb      	strb	r3, [r7, #7]
 801a346:	4613      	mov	r3, r2
 801a348:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a34a:	68bb      	ldr	r3, [r7, #8]
 801a34c:	330d      	adds	r3, #13
 801a34e:	79ba      	ldrb	r2, [r7, #6]
 801a350:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a352:	68bb      	ldr	r3, [r7, #8]
 801a354:	330b      	adds	r3, #11
 801a356:	220f      	movs	r2, #15
 801a358:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a35a:	68bb      	ldr	r3, [r7, #8]
 801a35c:	330c      	adds	r3, #12
 801a35e:	2200      	movs	r2, #0
 801a360:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a362:	68bb      	ldr	r3, [r7, #8]
 801a364:	331a      	adds	r3, #26
 801a366:	2100      	movs	r1, #0
 801a368:	4618      	mov	r0, r3
 801a36a:	f7fe ffba 	bl	80192e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a36e:	79fb      	ldrb	r3, [r7, #7]
 801a370:	1e5a      	subs	r2, r3, #1
 801a372:	4613      	mov	r3, r2
 801a374:	005b      	lsls	r3, r3, #1
 801a376:	4413      	add	r3, r2
 801a378:	009b      	lsls	r3, r3, #2
 801a37a:	4413      	add	r3, r2
 801a37c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a37e:	2300      	movs	r3, #0
 801a380:	82fb      	strh	r3, [r7, #22]
 801a382:	2300      	movs	r3, #0
 801a384:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a386:	8afb      	ldrh	r3, [r7, #22]
 801a388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a38c:	4293      	cmp	r3, r2
 801a38e:	d007      	beq.n	801a3a0 <put_lfn+0x6c>
 801a390:	69fb      	ldr	r3, [r7, #28]
 801a392:	1c5a      	adds	r2, r3, #1
 801a394:	61fa      	str	r2, [r7, #28]
 801a396:	005b      	lsls	r3, r3, #1
 801a398:	68fa      	ldr	r2, [r7, #12]
 801a39a:	4413      	add	r3, r2
 801a39c:	881b      	ldrh	r3, [r3, #0]
 801a39e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a3a0:	4a17      	ldr	r2, [pc, #92]	@ (801a400 <put_lfn+0xcc>)
 801a3a2:	69bb      	ldr	r3, [r7, #24]
 801a3a4:	4413      	add	r3, r2
 801a3a6:	781b      	ldrb	r3, [r3, #0]
 801a3a8:	461a      	mov	r2, r3
 801a3aa:	68bb      	ldr	r3, [r7, #8]
 801a3ac:	4413      	add	r3, r2
 801a3ae:	8afa      	ldrh	r2, [r7, #22]
 801a3b0:	4611      	mov	r1, r2
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	f7fe ff95 	bl	80192e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a3b8:	8afb      	ldrh	r3, [r7, #22]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d102      	bne.n	801a3c4 <put_lfn+0x90>
 801a3be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a3c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a3c4:	69bb      	ldr	r3, [r7, #24]
 801a3c6:	3301      	adds	r3, #1
 801a3c8:	61bb      	str	r3, [r7, #24]
 801a3ca:	69bb      	ldr	r3, [r7, #24]
 801a3cc:	2b0c      	cmp	r3, #12
 801a3ce:	d9da      	bls.n	801a386 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a3d0:	8afb      	ldrh	r3, [r7, #22]
 801a3d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3d6:	4293      	cmp	r3, r2
 801a3d8:	d006      	beq.n	801a3e8 <put_lfn+0xb4>
 801a3da:	69fb      	ldr	r3, [r7, #28]
 801a3dc:	005b      	lsls	r3, r3, #1
 801a3de:	68fa      	ldr	r2, [r7, #12]
 801a3e0:	4413      	add	r3, r2
 801a3e2:	881b      	ldrh	r3, [r3, #0]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d103      	bne.n	801a3f0 <put_lfn+0xbc>
 801a3e8:	79fb      	ldrb	r3, [r7, #7]
 801a3ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	79fa      	ldrb	r2, [r7, #7]
 801a3f4:	701a      	strb	r2, [r3, #0]
}
 801a3f6:	bf00      	nop
 801a3f8:	3720      	adds	r7, #32
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	bd80      	pop	{r7, pc}
 801a3fe:	bf00      	nop
 801a400:	08025070 	.word	0x08025070

0801a404 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b08c      	sub	sp, #48	@ 0x30
 801a408:	af00      	add	r7, sp, #0
 801a40a:	60f8      	str	r0, [r7, #12]
 801a40c:	60b9      	str	r1, [r7, #8]
 801a40e:	607a      	str	r2, [r7, #4]
 801a410:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a412:	220b      	movs	r2, #11
 801a414:	68b9      	ldr	r1, [r7, #8]
 801a416:	68f8      	ldr	r0, [r7, #12]
 801a418:	f7fe ffaa 	bl	8019370 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a41c:	683b      	ldr	r3, [r7, #0]
 801a41e:	2b05      	cmp	r3, #5
 801a420:	d92b      	bls.n	801a47a <gen_numname+0x76>
		sr = seq;
 801a422:	683b      	ldr	r3, [r7, #0]
 801a424:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a426:	e022      	b.n	801a46e <gen_numname+0x6a>
			wc = *lfn++;
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	1c9a      	adds	r2, r3, #2
 801a42c:	607a      	str	r2, [r7, #4]
 801a42e:	881b      	ldrh	r3, [r3, #0]
 801a430:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801a432:	2300      	movs	r3, #0
 801a434:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a436:	e017      	b.n	801a468 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801a438:	69fb      	ldr	r3, [r7, #28]
 801a43a:	005a      	lsls	r2, r3, #1
 801a43c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a43e:	f003 0301 	and.w	r3, r3, #1
 801a442:	4413      	add	r3, r2
 801a444:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a446:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a448:	085b      	lsrs	r3, r3, #1
 801a44a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a44c:	69fb      	ldr	r3, [r7, #28]
 801a44e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a452:	2b00      	cmp	r3, #0
 801a454:	d005      	beq.n	801a462 <gen_numname+0x5e>
 801a456:	69fb      	ldr	r3, [r7, #28]
 801a458:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801a45c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 801a460:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a464:	3301      	adds	r3, #1
 801a466:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a46a:	2b0f      	cmp	r3, #15
 801a46c:	d9e4      	bls.n	801a438 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	881b      	ldrh	r3, [r3, #0]
 801a472:	2b00      	cmp	r3, #0
 801a474:	d1d8      	bne.n	801a428 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a476:	69fb      	ldr	r3, [r7, #28]
 801a478:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a47a:	2307      	movs	r3, #7
 801a47c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a47e:	683b      	ldr	r3, [r7, #0]
 801a480:	b2db      	uxtb	r3, r3
 801a482:	f003 030f 	and.w	r3, r3, #15
 801a486:	b2db      	uxtb	r3, r3
 801a488:	3330      	adds	r3, #48	@ 0x30
 801a48a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801a48e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a492:	2b39      	cmp	r3, #57	@ 0x39
 801a494:	d904      	bls.n	801a4a0 <gen_numname+0x9c>
 801a496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a49a:	3307      	adds	r3, #7
 801a49c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801a4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4a2:	1e5a      	subs	r2, r3, #1
 801a4a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a4a6:	3330      	adds	r3, #48	@ 0x30
 801a4a8:	443b      	add	r3, r7
 801a4aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801a4ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a4b2:	683b      	ldr	r3, [r7, #0]
 801a4b4:	091b      	lsrs	r3, r3, #4
 801a4b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d1df      	bne.n	801a47e <gen_numname+0x7a>
	ns[i] = '~';
 801a4be:	f107 0214 	add.w	r2, r7, #20
 801a4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4c4:	4413      	add	r3, r2
 801a4c6:	227e      	movs	r2, #126	@ 0x7e
 801a4c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4ce:	e002      	b.n	801a4d6 <gen_numname+0xd2>
 801a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4d2:	3301      	adds	r3, #1
 801a4d4:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4da:	429a      	cmp	r2, r3
 801a4dc:	d205      	bcs.n	801a4ea <gen_numname+0xe6>
 801a4de:	68fa      	ldr	r2, [r7, #12]
 801a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4e2:	4413      	add	r3, r2
 801a4e4:	781b      	ldrb	r3, [r3, #0]
 801a4e6:	2b20      	cmp	r3, #32
 801a4e8:	d1f2      	bne.n	801a4d0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4ec:	2b07      	cmp	r3, #7
 801a4ee:	d807      	bhi.n	801a500 <gen_numname+0xfc>
 801a4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4f2:	1c5a      	adds	r2, r3, #1
 801a4f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 801a4f6:	3330      	adds	r3, #48	@ 0x30
 801a4f8:	443b      	add	r3, r7
 801a4fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a4fe:	e000      	b.n	801a502 <gen_numname+0xfe>
 801a500:	2120      	movs	r1, #32
 801a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a504:	1c5a      	adds	r2, r3, #1
 801a506:	627a      	str	r2, [r7, #36]	@ 0x24
 801a508:	68fa      	ldr	r2, [r7, #12]
 801a50a:	4413      	add	r3, r2
 801a50c:	460a      	mov	r2, r1
 801a50e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a512:	2b07      	cmp	r3, #7
 801a514:	d9e9      	bls.n	801a4ea <gen_numname+0xe6>
}
 801a516:	bf00      	nop
 801a518:	bf00      	nop
 801a51a:	3730      	adds	r7, #48	@ 0x30
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd80      	pop	{r7, pc}

0801a520 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a520:	b480      	push	{r7}
 801a522:	b085      	sub	sp, #20
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a528:	2300      	movs	r3, #0
 801a52a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a52c:	230b      	movs	r3, #11
 801a52e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a530:	7bfb      	ldrb	r3, [r7, #15]
 801a532:	b2da      	uxtb	r2, r3
 801a534:	0852      	lsrs	r2, r2, #1
 801a536:	01db      	lsls	r3, r3, #7
 801a538:	4313      	orrs	r3, r2
 801a53a:	b2da      	uxtb	r2, r3
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	1c59      	adds	r1, r3, #1
 801a540:	6079      	str	r1, [r7, #4]
 801a542:	781b      	ldrb	r3, [r3, #0]
 801a544:	4413      	add	r3, r2
 801a546:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a548:	68bb      	ldr	r3, [r7, #8]
 801a54a:	3b01      	subs	r3, #1
 801a54c:	60bb      	str	r3, [r7, #8]
 801a54e:	68bb      	ldr	r3, [r7, #8]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d1ed      	bne.n	801a530 <sum_sfn+0x10>
	return sum;
 801a554:	7bfb      	ldrb	r3, [r7, #15]
}
 801a556:	4618      	mov	r0, r3
 801a558:	3714      	adds	r7, #20
 801a55a:	46bd      	mov	sp, r7
 801a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a560:	4770      	bx	lr

0801a562 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801a562:	b580      	push	{r7, lr}
 801a564:	b086      	sub	sp, #24
 801a566:	af00      	add	r7, sp, #0
 801a568:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a570:	2100      	movs	r1, #0
 801a572:	6878      	ldr	r0, [r7, #4]
 801a574:	f7ff fca7 	bl	8019ec6 <dir_sdi>
 801a578:	4603      	mov	r3, r0
 801a57a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801a57c:	7dfb      	ldrb	r3, [r7, #23]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d001      	beq.n	801a586 <dir_find+0x24>
 801a582:	7dfb      	ldrb	r3, [r7, #23]
 801a584:	e0a9      	b.n	801a6da <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a586:	23ff      	movs	r3, #255	@ 0xff
 801a588:	753b      	strb	r3, [r7, #20]
 801a58a:	7d3b      	ldrb	r3, [r7, #20]
 801a58c:	757b      	strb	r3, [r7, #21]
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	f04f 32ff 	mov.w	r2, #4294967295
 801a594:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	69db      	ldr	r3, [r3, #28]
 801a59a:	4619      	mov	r1, r3
 801a59c:	6938      	ldr	r0, [r7, #16]
 801a59e:	f7ff f915 	bl	80197cc <move_window>
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a5a6:	7dfb      	ldrb	r3, [r7, #23]
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	f040 8090 	bne.w	801a6ce <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	6a1b      	ldr	r3, [r3, #32]
 801a5b2:	781b      	ldrb	r3, [r3, #0]
 801a5b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a5b6:	7dbb      	ldrb	r3, [r7, #22]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d102      	bne.n	801a5c2 <dir_find+0x60>
 801a5bc:	2304      	movs	r3, #4
 801a5be:	75fb      	strb	r3, [r7, #23]
 801a5c0:	e08a      	b.n	801a6d8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	6a1b      	ldr	r3, [r3, #32]
 801a5c6:	330b      	adds	r3, #11
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a5ce:	73fb      	strb	r3, [r7, #15]
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	7bfa      	ldrb	r2, [r7, #15]
 801a5d4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a5d6:	7dbb      	ldrb	r3, [r7, #22]
 801a5d8:	2be5      	cmp	r3, #229	@ 0xe5
 801a5da:	d007      	beq.n	801a5ec <dir_find+0x8a>
 801a5dc:	7bfb      	ldrb	r3, [r7, #15]
 801a5de:	f003 0308 	and.w	r3, r3, #8
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d009      	beq.n	801a5fa <dir_find+0x98>
 801a5e6:	7bfb      	ldrb	r3, [r7, #15]
 801a5e8:	2b0f      	cmp	r3, #15
 801a5ea:	d006      	beq.n	801a5fa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a5ec:	23ff      	movs	r3, #255	@ 0xff
 801a5ee:	757b      	strb	r3, [r7, #21]
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	f04f 32ff 	mov.w	r2, #4294967295
 801a5f6:	631a      	str	r2, [r3, #48]	@ 0x30
 801a5f8:	e05e      	b.n	801a6b8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a5fa:	7bfb      	ldrb	r3, [r7, #15]
 801a5fc:	2b0f      	cmp	r3, #15
 801a5fe:	d136      	bne.n	801a66e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d154      	bne.n	801a6b8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a60e:	7dbb      	ldrb	r3, [r7, #22]
 801a610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a614:	2b00      	cmp	r3, #0
 801a616:	d00d      	beq.n	801a634 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	6a1b      	ldr	r3, [r3, #32]
 801a61c:	7b5b      	ldrb	r3, [r3, #13]
 801a61e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a620:	7dbb      	ldrb	r3, [r7, #22]
 801a622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a626:	75bb      	strb	r3, [r7, #22]
 801a628:	7dbb      	ldrb	r3, [r7, #22]
 801a62a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	695a      	ldr	r2, [r3, #20]
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a634:	7dba      	ldrb	r2, [r7, #22]
 801a636:	7d7b      	ldrb	r3, [r7, #21]
 801a638:	429a      	cmp	r2, r3
 801a63a:	d115      	bne.n	801a668 <dir_find+0x106>
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	6a1b      	ldr	r3, [r3, #32]
 801a640:	330d      	adds	r3, #13
 801a642:	781b      	ldrb	r3, [r3, #0]
 801a644:	7d3a      	ldrb	r2, [r7, #20]
 801a646:	429a      	cmp	r2, r3
 801a648:	d10e      	bne.n	801a668 <dir_find+0x106>
 801a64a:	693b      	ldr	r3, [r7, #16]
 801a64c:	68da      	ldr	r2, [r3, #12]
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	6a1b      	ldr	r3, [r3, #32]
 801a652:	4619      	mov	r1, r3
 801a654:	4610      	mov	r0, r2
 801a656:	f7ff fdfd 	bl	801a254 <cmp_lfn>
 801a65a:	4603      	mov	r3, r0
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	d003      	beq.n	801a668 <dir_find+0x106>
 801a660:	7d7b      	ldrb	r3, [r7, #21]
 801a662:	3b01      	subs	r3, #1
 801a664:	b2db      	uxtb	r3, r3
 801a666:	e000      	b.n	801a66a <dir_find+0x108>
 801a668:	23ff      	movs	r3, #255	@ 0xff
 801a66a:	757b      	strb	r3, [r7, #21]
 801a66c:	e024      	b.n	801a6b8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a66e:	7d7b      	ldrb	r3, [r7, #21]
 801a670:	2b00      	cmp	r3, #0
 801a672:	d109      	bne.n	801a688 <dir_find+0x126>
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	6a1b      	ldr	r3, [r3, #32]
 801a678:	4618      	mov	r0, r3
 801a67a:	f7ff ff51 	bl	801a520 <sum_sfn>
 801a67e:	4603      	mov	r3, r0
 801a680:	461a      	mov	r2, r3
 801a682:	7d3b      	ldrb	r3, [r7, #20]
 801a684:	4293      	cmp	r3, r2
 801a686:	d024      	beq.n	801a6d2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a68e:	f003 0301 	and.w	r3, r3, #1
 801a692:	2b00      	cmp	r3, #0
 801a694:	d10a      	bne.n	801a6ac <dir_find+0x14a>
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	6a18      	ldr	r0, [r3, #32]
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	3324      	adds	r3, #36	@ 0x24
 801a69e:	220b      	movs	r2, #11
 801a6a0:	4619      	mov	r1, r3
 801a6a2:	f7fe fea1 	bl	80193e8 <mem_cmp>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d014      	beq.n	801a6d6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a6ac:	23ff      	movs	r3, #255	@ 0xff
 801a6ae:	757b      	strb	r3, [r7, #21]
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	f04f 32ff 	mov.w	r2, #4294967295
 801a6b6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801a6b8:	2100      	movs	r1, #0
 801a6ba:	6878      	ldr	r0, [r7, #4]
 801a6bc:	f7ff fc7e 	bl	8019fbc <dir_next>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801a6c4:	7dfb      	ldrb	r3, [r7, #23]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	f43f af65 	beq.w	801a596 <dir_find+0x34>
 801a6cc:	e004      	b.n	801a6d8 <dir_find+0x176>
		if (res != FR_OK) break;
 801a6ce:	bf00      	nop
 801a6d0:	e002      	b.n	801a6d8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a6d2:	bf00      	nop
 801a6d4:	e000      	b.n	801a6d8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801a6d6:	bf00      	nop

	return res;
 801a6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6da:	4618      	mov	r0, r3
 801a6dc:	3718      	adds	r7, #24
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd80      	pop	{r7, pc}
	...

0801a6e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b08c      	sub	sp, #48	@ 0x30
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801a6f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d001      	beq.n	801a704 <dir_register+0x20>
 801a700:	2306      	movs	r3, #6
 801a702:	e0e0      	b.n	801a8c6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801a704:	2300      	movs	r3, #0
 801a706:	627b      	str	r3, [r7, #36]	@ 0x24
 801a708:	e002      	b.n	801a710 <dir_register+0x2c>
 801a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a70c:	3301      	adds	r3, #1
 801a70e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a710:	69fb      	ldr	r3, [r7, #28]
 801a712:	68da      	ldr	r2, [r3, #12]
 801a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a716:	005b      	lsls	r3, r3, #1
 801a718:	4413      	add	r3, r2
 801a71a:	881b      	ldrh	r3, [r3, #0]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d1f4      	bne.n	801a70a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801a726:	f107 030c 	add.w	r3, r7, #12
 801a72a:	220c      	movs	r2, #12
 801a72c:	4618      	mov	r0, r3
 801a72e:	f7fe fe1f 	bl	8019370 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801a732:	7dfb      	ldrb	r3, [r7, #23]
 801a734:	f003 0301 	and.w	r3, r3, #1
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d032      	beq.n	801a7a2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	2240      	movs	r2, #64	@ 0x40
 801a740:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801a744:	2301      	movs	r3, #1
 801a746:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a748:	e016      	b.n	801a778 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801a750:	69fb      	ldr	r3, [r7, #28]
 801a752:	68da      	ldr	r2, [r3, #12]
 801a754:	f107 010c 	add.w	r1, r7, #12
 801a758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a75a:	f7ff fe53 	bl	801a404 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801a75e:	6878      	ldr	r0, [r7, #4]
 801a760:	f7ff feff 	bl	801a562 <dir_find>
 801a764:	4603      	mov	r3, r0
 801a766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801a76a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d106      	bne.n	801a780 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801a772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a774:	3301      	adds	r3, #1
 801a776:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a77a:	2b63      	cmp	r3, #99	@ 0x63
 801a77c:	d9e5      	bls.n	801a74a <dir_register+0x66>
 801a77e:	e000      	b.n	801a782 <dir_register+0x9e>
			if (res != FR_OK) break;
 801a780:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801a782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a784:	2b64      	cmp	r3, #100	@ 0x64
 801a786:	d101      	bne.n	801a78c <dir_register+0xa8>
 801a788:	2307      	movs	r3, #7
 801a78a:	e09c      	b.n	801a8c6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801a78c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a790:	2b04      	cmp	r3, #4
 801a792:	d002      	beq.n	801a79a <dir_register+0xb6>
 801a794:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a798:	e095      	b.n	801a8c6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801a79a:	7dfa      	ldrb	r2, [r7, #23]
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801a7a2:	7dfb      	ldrb	r3, [r7, #23]
 801a7a4:	f003 0302 	and.w	r3, r3, #2
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d007      	beq.n	801a7bc <dir_register+0xd8>
 801a7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ae:	330c      	adds	r3, #12
 801a7b0:	4a47      	ldr	r2, [pc, #284]	@ (801a8d0 <dir_register+0x1ec>)
 801a7b2:	fba2 2303 	umull	r2, r3, r2, r3
 801a7b6:	089b      	lsrs	r3, r3, #2
 801a7b8:	3301      	adds	r3, #1
 801a7ba:	e000      	b.n	801a7be <dir_register+0xda>
 801a7bc:	2301      	movs	r3, #1
 801a7be:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801a7c0:	6a39      	ldr	r1, [r7, #32]
 801a7c2:	6878      	ldr	r0, [r7, #4]
 801a7c4:	f7ff fcbf 	bl	801a146 <dir_alloc>
 801a7c8:	4603      	mov	r3, r0
 801a7ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801a7ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d148      	bne.n	801a868 <dir_register+0x184>
 801a7d6:	6a3b      	ldr	r3, [r7, #32]
 801a7d8:	3b01      	subs	r3, #1
 801a7da:	623b      	str	r3, [r7, #32]
 801a7dc:	6a3b      	ldr	r3, [r7, #32]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d042      	beq.n	801a868 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	695a      	ldr	r2, [r3, #20]
 801a7e6:	6a3b      	ldr	r3, [r7, #32]
 801a7e8:	015b      	lsls	r3, r3, #5
 801a7ea:	1ad3      	subs	r3, r2, r3
 801a7ec:	4619      	mov	r1, r3
 801a7ee:	6878      	ldr	r0, [r7, #4]
 801a7f0:	f7ff fb69 	bl	8019ec6 <dir_sdi>
 801a7f4:	4603      	mov	r3, r0
 801a7f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a7fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d132      	bne.n	801a868 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	3324      	adds	r3, #36	@ 0x24
 801a806:	4618      	mov	r0, r3
 801a808:	f7ff fe8a 	bl	801a520 <sum_sfn>
 801a80c:	4603      	mov	r3, r0
 801a80e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	69db      	ldr	r3, [r3, #28]
 801a814:	4619      	mov	r1, r3
 801a816:	69f8      	ldr	r0, [r7, #28]
 801a818:	f7fe ffd8 	bl	80197cc <move_window>
 801a81c:	4603      	mov	r3, r0
 801a81e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801a822:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a826:	2b00      	cmp	r3, #0
 801a828:	d11d      	bne.n	801a866 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801a82a:	69fb      	ldr	r3, [r7, #28]
 801a82c:	68d8      	ldr	r0, [r3, #12]
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	6a19      	ldr	r1, [r3, #32]
 801a832:	6a3b      	ldr	r3, [r7, #32]
 801a834:	b2da      	uxtb	r2, r3
 801a836:	7efb      	ldrb	r3, [r7, #27]
 801a838:	f7ff fd7c 	bl	801a334 <put_lfn>
				fs->wflag = 1;
 801a83c:	69fb      	ldr	r3, [r7, #28]
 801a83e:	2201      	movs	r2, #1
 801a840:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801a842:	2100      	movs	r1, #0
 801a844:	6878      	ldr	r0, [r7, #4]
 801a846:	f7ff fbb9 	bl	8019fbc <dir_next>
 801a84a:	4603      	mov	r3, r0
 801a84c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801a850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a854:	2b00      	cmp	r3, #0
 801a856:	d107      	bne.n	801a868 <dir_register+0x184>
 801a858:	6a3b      	ldr	r3, [r7, #32]
 801a85a:	3b01      	subs	r3, #1
 801a85c:	623b      	str	r3, [r7, #32]
 801a85e:	6a3b      	ldr	r3, [r7, #32]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d1d5      	bne.n	801a810 <dir_register+0x12c>
 801a864:	e000      	b.n	801a868 <dir_register+0x184>
				if (res != FR_OK) break;
 801a866:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801a868:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d128      	bne.n	801a8c2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	69db      	ldr	r3, [r3, #28]
 801a874:	4619      	mov	r1, r3
 801a876:	69f8      	ldr	r0, [r7, #28]
 801a878:	f7fe ffa8 	bl	80197cc <move_window>
 801a87c:	4603      	mov	r3, r0
 801a87e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801a882:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a886:	2b00      	cmp	r3, #0
 801a888:	d11b      	bne.n	801a8c2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	6a1b      	ldr	r3, [r3, #32]
 801a88e:	2220      	movs	r2, #32
 801a890:	2100      	movs	r1, #0
 801a892:	4618      	mov	r0, r3
 801a894:	f7fe fd8d 	bl	80193b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	6a18      	ldr	r0, [r3, #32]
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	3324      	adds	r3, #36	@ 0x24
 801a8a0:	220b      	movs	r2, #11
 801a8a2:	4619      	mov	r1, r3
 801a8a4:	f7fe fd64 	bl	8019370 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	6a1b      	ldr	r3, [r3, #32]
 801a8b2:	330c      	adds	r3, #12
 801a8b4:	f002 0218 	and.w	r2, r2, #24
 801a8b8:	b2d2      	uxtb	r2, r2
 801a8ba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801a8bc:	69fb      	ldr	r3, [r7, #28]
 801a8be:	2201      	movs	r2, #1
 801a8c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801a8c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	3730      	adds	r7, #48	@ 0x30
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	bd80      	pop	{r7, pc}
 801a8ce:	bf00      	nop
 801a8d0:	4ec4ec4f 	.word	0x4ec4ec4f

0801a8d4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	b088      	sub	sp, #32
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
 801a8dc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801a8e4:	683b      	ldr	r3, [r7, #0]
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	69db      	ldr	r3, [r3, #28]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	f000 80ca 	beq.w	801aa88 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8fc:	d032      	beq.n	801a964 <get_fileinfo+0x90>
			i = j = 0;
 801a8fe:	2300      	movs	r3, #0
 801a900:	61bb      	str	r3, [r7, #24]
 801a902:	69bb      	ldr	r3, [r7, #24]
 801a904:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a906:	e01b      	b.n	801a940 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801a908:	89fb      	ldrh	r3, [r7, #14]
 801a90a:	2100      	movs	r1, #0
 801a90c:	4618      	mov	r0, r3
 801a90e:	f001 fabb 	bl	801be88 <ff_convert>
 801a912:	4603      	mov	r3, r0
 801a914:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801a916:	89fb      	ldrh	r3, [r7, #14]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d102      	bne.n	801a922 <get_fileinfo+0x4e>
 801a91c:	2300      	movs	r3, #0
 801a91e:	61fb      	str	r3, [r7, #28]
 801a920:	e01a      	b.n	801a958 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801a922:	69fb      	ldr	r3, [r7, #28]
 801a924:	2bfe      	cmp	r3, #254	@ 0xfe
 801a926:	d902      	bls.n	801a92e <get_fileinfo+0x5a>
 801a928:	2300      	movs	r3, #0
 801a92a:	61fb      	str	r3, [r7, #28]
 801a92c:	e014      	b.n	801a958 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801a92e:	69fb      	ldr	r3, [r7, #28]
 801a930:	1c5a      	adds	r2, r3, #1
 801a932:	61fa      	str	r2, [r7, #28]
 801a934:	89fa      	ldrh	r2, [r7, #14]
 801a936:	b2d1      	uxtb	r1, r2
 801a938:	683a      	ldr	r2, [r7, #0]
 801a93a:	4413      	add	r3, r2
 801a93c:	460a      	mov	r2, r1
 801a93e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801a940:	693b      	ldr	r3, [r7, #16]
 801a942:	68da      	ldr	r2, [r3, #12]
 801a944:	69bb      	ldr	r3, [r7, #24]
 801a946:	1c59      	adds	r1, r3, #1
 801a948:	61b9      	str	r1, [r7, #24]
 801a94a:	005b      	lsls	r3, r3, #1
 801a94c:	4413      	add	r3, r2
 801a94e:	881b      	ldrh	r3, [r3, #0]
 801a950:	81fb      	strh	r3, [r7, #14]
 801a952:	89fb      	ldrh	r3, [r7, #14]
 801a954:	2b00      	cmp	r3, #0
 801a956:	d1d7      	bne.n	801a908 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801a958:	683a      	ldr	r2, [r7, #0]
 801a95a:	69fb      	ldr	r3, [r7, #28]
 801a95c:	4413      	add	r3, r2
 801a95e:	3316      	adds	r3, #22
 801a960:	2200      	movs	r2, #0
 801a962:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801a964:	2300      	movs	r3, #0
 801a966:	61bb      	str	r3, [r7, #24]
 801a968:	69bb      	ldr	r3, [r7, #24]
 801a96a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801a96c:	683a      	ldr	r2, [r7, #0]
 801a96e:	69fb      	ldr	r3, [r7, #28]
 801a970:	4413      	add	r3, r2
 801a972:	3316      	adds	r3, #22
 801a974:	781b      	ldrb	r3, [r3, #0]
 801a976:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801a978:	e04d      	b.n	801aa16 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	6a1a      	ldr	r2, [r3, #32]
 801a97e:	69fb      	ldr	r3, [r7, #28]
 801a980:	1c59      	adds	r1, r3, #1
 801a982:	61f9      	str	r1, [r7, #28]
 801a984:	4413      	add	r3, r2
 801a986:	781b      	ldrb	r3, [r3, #0]
 801a988:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801a98a:	7dfb      	ldrb	r3, [r7, #23]
 801a98c:	2b20      	cmp	r3, #32
 801a98e:	d041      	beq.n	801aa14 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801a990:	7dfb      	ldrb	r3, [r7, #23]
 801a992:	2b05      	cmp	r3, #5
 801a994:	d101      	bne.n	801a99a <get_fileinfo+0xc6>
 801a996:	23e5      	movs	r3, #229	@ 0xe5
 801a998:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801a99a:	69fb      	ldr	r3, [r7, #28]
 801a99c:	2b09      	cmp	r3, #9
 801a99e:	d10f      	bne.n	801a9c0 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 801a9a0:	89bb      	ldrh	r3, [r7, #12]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d105      	bne.n	801a9b2 <get_fileinfo+0xde>
 801a9a6:	683a      	ldr	r2, [r7, #0]
 801a9a8:	69bb      	ldr	r3, [r7, #24]
 801a9aa:	4413      	add	r3, r2
 801a9ac:	3316      	adds	r3, #22
 801a9ae:	222e      	movs	r2, #46	@ 0x2e
 801a9b0:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801a9b2:	69bb      	ldr	r3, [r7, #24]
 801a9b4:	1c5a      	adds	r2, r3, #1
 801a9b6:	61ba      	str	r2, [r7, #24]
 801a9b8:	683a      	ldr	r2, [r7, #0]
 801a9ba:	4413      	add	r3, r2
 801a9bc:	222e      	movs	r2, #46	@ 0x2e
 801a9be:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801a9c0:	683a      	ldr	r2, [r7, #0]
 801a9c2:	69bb      	ldr	r3, [r7, #24]
 801a9c4:	4413      	add	r3, r2
 801a9c6:	3309      	adds	r3, #9
 801a9c8:	7dfa      	ldrb	r2, [r7, #23]
 801a9ca:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801a9cc:	89bb      	ldrh	r3, [r7, #12]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d11c      	bne.n	801aa0c <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801a9d2:	7dfb      	ldrb	r3, [r7, #23]
 801a9d4:	2b40      	cmp	r3, #64	@ 0x40
 801a9d6:	d913      	bls.n	801aa00 <get_fileinfo+0x12c>
 801a9d8:	7dfb      	ldrb	r3, [r7, #23]
 801a9da:	2b5a      	cmp	r3, #90	@ 0x5a
 801a9dc:	d810      	bhi.n	801aa00 <get_fileinfo+0x12c>
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	6a1b      	ldr	r3, [r3, #32]
 801a9e2:	330c      	adds	r3, #12
 801a9e4:	781b      	ldrb	r3, [r3, #0]
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	69fb      	ldr	r3, [r7, #28]
 801a9ea:	2b08      	cmp	r3, #8
 801a9ec:	d901      	bls.n	801a9f2 <get_fileinfo+0x11e>
 801a9ee:	2310      	movs	r3, #16
 801a9f0:	e000      	b.n	801a9f4 <get_fileinfo+0x120>
 801a9f2:	2308      	movs	r3, #8
 801a9f4:	4013      	ands	r3, r2
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d002      	beq.n	801aa00 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 801a9fa:	7dfb      	ldrb	r3, [r7, #23]
 801a9fc:	3320      	adds	r3, #32
 801a9fe:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801aa00:	683a      	ldr	r2, [r7, #0]
 801aa02:	69bb      	ldr	r3, [r7, #24]
 801aa04:	4413      	add	r3, r2
 801aa06:	3316      	adds	r3, #22
 801aa08:	7dfa      	ldrb	r2, [r7, #23]
 801aa0a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801aa0c:	69bb      	ldr	r3, [r7, #24]
 801aa0e:	3301      	adds	r3, #1
 801aa10:	61bb      	str	r3, [r7, #24]
 801aa12:	e000      	b.n	801aa16 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 801aa14:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801aa16:	69fb      	ldr	r3, [r7, #28]
 801aa18:	2b0a      	cmp	r3, #10
 801aa1a:	d9ae      	bls.n	801a97a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801aa1c:	89bb      	ldrh	r3, [r7, #12]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d10d      	bne.n	801aa3e <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801aa22:	683a      	ldr	r2, [r7, #0]
 801aa24:	69bb      	ldr	r3, [r7, #24]
 801aa26:	4413      	add	r3, r2
 801aa28:	3316      	adds	r3, #22
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	6a1b      	ldr	r3, [r3, #32]
 801aa32:	330c      	adds	r3, #12
 801aa34:	781b      	ldrb	r3, [r3, #0]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d101      	bne.n	801aa3e <get_fileinfo+0x16a>
 801aa3a:	2300      	movs	r3, #0
 801aa3c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801aa3e:	683a      	ldr	r2, [r7, #0]
 801aa40:	69bb      	ldr	r3, [r7, #24]
 801aa42:	4413      	add	r3, r2
 801aa44:	3309      	adds	r3, #9
 801aa46:	2200      	movs	r2, #0
 801aa48:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	6a1b      	ldr	r3, [r3, #32]
 801aa4e:	7ada      	ldrb	r2, [r3, #11]
 801aa50:	683b      	ldr	r3, [r7, #0]
 801aa52:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	6a1b      	ldr	r3, [r3, #32]
 801aa58:	331c      	adds	r3, #28
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	f7fe fc1e 	bl	801929c <ld_dword>
 801aa60:	4602      	mov	r2, r0
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	6a1b      	ldr	r3, [r3, #32]
 801aa6a:	3316      	adds	r3, #22
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	f7fe fc15 	bl	801929c <ld_dword>
 801aa72:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801aa74:	68bb      	ldr	r3, [r7, #8]
 801aa76:	b29a      	uxth	r2, r3
 801aa78:	683b      	ldr	r3, [r7, #0]
 801aa7a:	80da      	strh	r2, [r3, #6]
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	0c1b      	lsrs	r3, r3, #16
 801aa80:	b29a      	uxth	r2, r3
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	809a      	strh	r2, [r3, #4]
 801aa86:	e000      	b.n	801aa8a <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801aa88:	bf00      	nop
}
 801aa8a:	3720      	adds	r7, #32
 801aa8c:	46bd      	mov	sp, r7
 801aa8e:	bd80      	pop	{r7, pc}

0801aa90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b08a      	sub	sp, #40	@ 0x28
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
 801aa98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801aa9a:	683b      	ldr	r3, [r7, #0]
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	613b      	str	r3, [r7, #16]
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	68db      	ldr	r3, [r3, #12]
 801aaa6:	60fb      	str	r3, [r7, #12]
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	617b      	str	r3, [r7, #20]
 801aaac:	697b      	ldr	r3, [r7, #20]
 801aaae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801aab0:	69bb      	ldr	r3, [r7, #24]
 801aab2:	1c5a      	adds	r2, r3, #1
 801aab4:	61ba      	str	r2, [r7, #24]
 801aab6:	693a      	ldr	r2, [r7, #16]
 801aab8:	4413      	add	r3, r2
 801aaba:	781b      	ldrb	r3, [r3, #0]
 801aabc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801aabe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aac0:	2b1f      	cmp	r3, #31
 801aac2:	d940      	bls.n	801ab46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801aac4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aac6:	2b2f      	cmp	r3, #47	@ 0x2f
 801aac8:	d006      	beq.n	801aad8 <create_name+0x48>
 801aaca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aacc:	2b5c      	cmp	r3, #92	@ 0x5c
 801aace:	d110      	bne.n	801aaf2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801aad0:	e002      	b.n	801aad8 <create_name+0x48>
 801aad2:	69bb      	ldr	r3, [r7, #24]
 801aad4:	3301      	adds	r3, #1
 801aad6:	61bb      	str	r3, [r7, #24]
 801aad8:	693a      	ldr	r2, [r7, #16]
 801aada:	69bb      	ldr	r3, [r7, #24]
 801aadc:	4413      	add	r3, r2
 801aade:	781b      	ldrb	r3, [r3, #0]
 801aae0:	2b2f      	cmp	r3, #47	@ 0x2f
 801aae2:	d0f6      	beq.n	801aad2 <create_name+0x42>
 801aae4:	693a      	ldr	r2, [r7, #16]
 801aae6:	69bb      	ldr	r3, [r7, #24]
 801aae8:	4413      	add	r3, r2
 801aaea:	781b      	ldrb	r3, [r3, #0]
 801aaec:	2b5c      	cmp	r3, #92	@ 0x5c
 801aaee:	d0f0      	beq.n	801aad2 <create_name+0x42>
			break;
 801aaf0:	e02a      	b.n	801ab48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801aaf2:	697b      	ldr	r3, [r7, #20]
 801aaf4:	2bfe      	cmp	r3, #254	@ 0xfe
 801aaf6:	d901      	bls.n	801aafc <create_name+0x6c>
 801aaf8:	2306      	movs	r3, #6
 801aafa:	e17d      	b.n	801adf8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801aafc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801aafe:	b2db      	uxtb	r3, r3
 801ab00:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ab02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab04:	2101      	movs	r1, #1
 801ab06:	4618      	mov	r0, r3
 801ab08:	f001 f9be 	bl	801be88 <ff_convert>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ab10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d101      	bne.n	801ab1a <create_name+0x8a>
 801ab16:	2306      	movs	r3, #6
 801ab18:	e16e      	b.n	801adf8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ab1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab1c:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab1e:	d809      	bhi.n	801ab34 <create_name+0xa4>
 801ab20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab22:	4619      	mov	r1, r3
 801ab24:	488d      	ldr	r0, [pc, #564]	@ (801ad5c <create_name+0x2cc>)
 801ab26:	f7fe fc86 	bl	8019436 <chk_chr>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d001      	beq.n	801ab34 <create_name+0xa4>
 801ab30:	2306      	movs	r3, #6
 801ab32:	e161      	b.n	801adf8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ab34:	697b      	ldr	r3, [r7, #20]
 801ab36:	1c5a      	adds	r2, r3, #1
 801ab38:	617a      	str	r2, [r7, #20]
 801ab3a:	005b      	lsls	r3, r3, #1
 801ab3c:	68fa      	ldr	r2, [r7, #12]
 801ab3e:	4413      	add	r3, r2
 801ab40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ab42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801ab44:	e7b4      	b.n	801aab0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801ab46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801ab48:	693a      	ldr	r2, [r7, #16]
 801ab4a:	69bb      	ldr	r3, [r7, #24]
 801ab4c:	441a      	add	r2, r3
 801ab4e:	683b      	ldr	r3, [r7, #0]
 801ab50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801ab52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab54:	2b1f      	cmp	r3, #31
 801ab56:	d801      	bhi.n	801ab5c <create_name+0xcc>
 801ab58:	2304      	movs	r3, #4
 801ab5a:	e000      	b.n	801ab5e <create_name+0xce>
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ab62:	e011      	b.n	801ab88 <create_name+0xf8>
		w = lfn[di - 1];
 801ab64:	697b      	ldr	r3, [r7, #20]
 801ab66:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ab6a:	3b01      	subs	r3, #1
 801ab6c:	005b      	lsls	r3, r3, #1
 801ab6e:	68fa      	ldr	r2, [r7, #12]
 801ab70:	4413      	add	r3, r2
 801ab72:	881b      	ldrh	r3, [r3, #0]
 801ab74:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801ab76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab78:	2b20      	cmp	r3, #32
 801ab7a:	d002      	beq.n	801ab82 <create_name+0xf2>
 801ab7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ab7e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ab80:	d106      	bne.n	801ab90 <create_name+0x100>
		di--;
 801ab82:	697b      	ldr	r3, [r7, #20]
 801ab84:	3b01      	subs	r3, #1
 801ab86:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d1ea      	bne.n	801ab64 <create_name+0xd4>
 801ab8e:	e000      	b.n	801ab92 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801ab90:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801ab92:	697b      	ldr	r3, [r7, #20]
 801ab94:	005b      	lsls	r3, r3, #1
 801ab96:	68fa      	ldr	r2, [r7, #12]
 801ab98:	4413      	add	r3, r2
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801ab9e:	697b      	ldr	r3, [r7, #20]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d101      	bne.n	801aba8 <create_name+0x118>
 801aba4:	2306      	movs	r3, #6
 801aba6:	e127      	b.n	801adf8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	3324      	adds	r3, #36	@ 0x24
 801abac:	220b      	movs	r2, #11
 801abae:	2120      	movs	r1, #32
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7fe fbfe 	bl	80193b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801abb6:	2300      	movs	r3, #0
 801abb8:	61bb      	str	r3, [r7, #24]
 801abba:	e002      	b.n	801abc2 <create_name+0x132>
 801abbc:	69bb      	ldr	r3, [r7, #24]
 801abbe:	3301      	adds	r3, #1
 801abc0:	61bb      	str	r3, [r7, #24]
 801abc2:	69bb      	ldr	r3, [r7, #24]
 801abc4:	005b      	lsls	r3, r3, #1
 801abc6:	68fa      	ldr	r2, [r7, #12]
 801abc8:	4413      	add	r3, r2
 801abca:	881b      	ldrh	r3, [r3, #0]
 801abcc:	2b20      	cmp	r3, #32
 801abce:	d0f5      	beq.n	801abbc <create_name+0x12c>
 801abd0:	69bb      	ldr	r3, [r7, #24]
 801abd2:	005b      	lsls	r3, r3, #1
 801abd4:	68fa      	ldr	r2, [r7, #12]
 801abd6:	4413      	add	r3, r2
 801abd8:	881b      	ldrh	r3, [r3, #0]
 801abda:	2b2e      	cmp	r3, #46	@ 0x2e
 801abdc:	d0ee      	beq.n	801abbc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801abde:	69bb      	ldr	r3, [r7, #24]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d009      	beq.n	801abf8 <create_name+0x168>
 801abe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801abe8:	f043 0303 	orr.w	r3, r3, #3
 801abec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801abf0:	e002      	b.n	801abf8 <create_name+0x168>
 801abf2:	697b      	ldr	r3, [r7, #20]
 801abf4:	3b01      	subs	r3, #1
 801abf6:	617b      	str	r3, [r7, #20]
 801abf8:	697b      	ldr	r3, [r7, #20]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d009      	beq.n	801ac12 <create_name+0x182>
 801abfe:	697b      	ldr	r3, [r7, #20]
 801ac00:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ac04:	3b01      	subs	r3, #1
 801ac06:	005b      	lsls	r3, r3, #1
 801ac08:	68fa      	ldr	r2, [r7, #12]
 801ac0a:	4413      	add	r3, r2
 801ac0c:	881b      	ldrh	r3, [r3, #0]
 801ac0e:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac10:	d1ef      	bne.n	801abf2 <create_name+0x162>

	i = b = 0; ni = 8;
 801ac12:	2300      	movs	r3, #0
 801ac14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ac18:	2300      	movs	r3, #0
 801ac1a:	623b      	str	r3, [r7, #32]
 801ac1c:	2308      	movs	r3, #8
 801ac1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801ac20:	69bb      	ldr	r3, [r7, #24]
 801ac22:	1c5a      	adds	r2, r3, #1
 801ac24:	61ba      	str	r2, [r7, #24]
 801ac26:	005b      	lsls	r3, r3, #1
 801ac28:	68fa      	ldr	r2, [r7, #12]
 801ac2a:	4413      	add	r3, r2
 801ac2c:	881b      	ldrh	r3, [r3, #0]
 801ac2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801ac30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	f000 8090 	beq.w	801ad58 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801ac38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac3a:	2b20      	cmp	r3, #32
 801ac3c:	d006      	beq.n	801ac4c <create_name+0x1bc>
 801ac3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac40:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac42:	d10a      	bne.n	801ac5a <create_name+0x1ca>
 801ac44:	69ba      	ldr	r2, [r7, #24]
 801ac46:	697b      	ldr	r3, [r7, #20]
 801ac48:	429a      	cmp	r2, r3
 801ac4a:	d006      	beq.n	801ac5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801ac4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac50:	f043 0303 	orr.w	r3, r3, #3
 801ac54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ac58:	e07d      	b.n	801ad56 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801ac5a:	6a3a      	ldr	r2, [r7, #32]
 801ac5c:	69fb      	ldr	r3, [r7, #28]
 801ac5e:	429a      	cmp	r2, r3
 801ac60:	d203      	bcs.n	801ac6a <create_name+0x1da>
 801ac62:	69ba      	ldr	r2, [r7, #24]
 801ac64:	697b      	ldr	r3, [r7, #20]
 801ac66:	429a      	cmp	r2, r3
 801ac68:	d123      	bne.n	801acb2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801ac6a:	69fb      	ldr	r3, [r7, #28]
 801ac6c:	2b0b      	cmp	r3, #11
 801ac6e:	d106      	bne.n	801ac7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801ac70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac74:	f043 0303 	orr.w	r3, r3, #3
 801ac78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ac7c:	e075      	b.n	801ad6a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801ac7e:	69ba      	ldr	r2, [r7, #24]
 801ac80:	697b      	ldr	r3, [r7, #20]
 801ac82:	429a      	cmp	r2, r3
 801ac84:	d005      	beq.n	801ac92 <create_name+0x202>
 801ac86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac8a:	f043 0303 	orr.w	r3, r3, #3
 801ac8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801ac92:	69ba      	ldr	r2, [r7, #24]
 801ac94:	697b      	ldr	r3, [r7, #20]
 801ac96:	429a      	cmp	r2, r3
 801ac98:	d866      	bhi.n	801ad68 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801ac9a:	697b      	ldr	r3, [r7, #20]
 801ac9c:	61bb      	str	r3, [r7, #24]
 801ac9e:	2308      	movs	r3, #8
 801aca0:	623b      	str	r3, [r7, #32]
 801aca2:	230b      	movs	r3, #11
 801aca4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801aca6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801acaa:	009b      	lsls	r3, r3, #2
 801acac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801acb0:	e051      	b.n	801ad56 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801acb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acb4:	2b7f      	cmp	r3, #127	@ 0x7f
 801acb6:	d914      	bls.n	801ace2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801acb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acba:	2100      	movs	r1, #0
 801acbc:	4618      	mov	r0, r3
 801acbe:	f001 f8e3 	bl	801be88 <ff_convert>
 801acc2:	4603      	mov	r3, r0
 801acc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801acc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d004      	beq.n	801acd6 <create_name+0x246>
 801accc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acce:	3b80      	subs	r3, #128	@ 0x80
 801acd0:	4a23      	ldr	r2, [pc, #140]	@ (801ad60 <create_name+0x2d0>)
 801acd2:	5cd3      	ldrb	r3, [r2, r3]
 801acd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801acd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801acda:	f043 0302 	orr.w	r3, r3, #2
 801acde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801ace2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d007      	beq.n	801acf8 <create_name+0x268>
 801ace8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801acea:	4619      	mov	r1, r3
 801acec:	481d      	ldr	r0, [pc, #116]	@ (801ad64 <create_name+0x2d4>)
 801acee:	f7fe fba2 	bl	8019436 <chk_chr>
 801acf2:	4603      	mov	r3, r0
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d008      	beq.n	801ad0a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801acf8:	235f      	movs	r3, #95	@ 0x5f
 801acfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801acfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad00:	f043 0303 	orr.w	r3, r3, #3
 801ad04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad08:	e01b      	b.n	801ad42 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801ad0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad0c:	2b40      	cmp	r3, #64	@ 0x40
 801ad0e:	d909      	bls.n	801ad24 <create_name+0x294>
 801ad10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad12:	2b5a      	cmp	r3, #90	@ 0x5a
 801ad14:	d806      	bhi.n	801ad24 <create_name+0x294>
					b |= 2;
 801ad16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad1a:	f043 0302 	orr.w	r3, r3, #2
 801ad1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad22:	e00e      	b.n	801ad42 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801ad24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad26:	2b60      	cmp	r3, #96	@ 0x60
 801ad28:	d90b      	bls.n	801ad42 <create_name+0x2b2>
 801ad2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad2c:	2b7a      	cmp	r3, #122	@ 0x7a
 801ad2e:	d808      	bhi.n	801ad42 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801ad30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad34:	f043 0301 	orr.w	r3, r3, #1
 801ad38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801ad3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ad3e:	3b20      	subs	r3, #32
 801ad40:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801ad42:	6a3b      	ldr	r3, [r7, #32]
 801ad44:	1c5a      	adds	r2, r3, #1
 801ad46:	623a      	str	r2, [r7, #32]
 801ad48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ad4a:	b2d1      	uxtb	r1, r2
 801ad4c:	687a      	ldr	r2, [r7, #4]
 801ad4e:	4413      	add	r3, r2
 801ad50:	460a      	mov	r2, r1
 801ad52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801ad56:	e763      	b.n	801ac20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801ad58:	bf00      	nop
 801ad5a:	e006      	b.n	801ad6a <create_name+0x2da>
 801ad5c:	080246c4 	.word	0x080246c4
 801ad60:	08024ff0 	.word	0x08024ff0
 801ad64:	080246d0 	.word	0x080246d0
			if (si > di) break;			/* No extension */
 801ad68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801ad70:	2be5      	cmp	r3, #229	@ 0xe5
 801ad72:	d103      	bne.n	801ad7c <create_name+0x2ec>
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	2205      	movs	r2, #5
 801ad78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801ad7c:	69fb      	ldr	r3, [r7, #28]
 801ad7e:	2b08      	cmp	r3, #8
 801ad80:	d104      	bne.n	801ad8c <create_name+0x2fc>
 801ad82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad86:	009b      	lsls	r3, r3, #2
 801ad88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801ad8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad90:	f003 030c 	and.w	r3, r3, #12
 801ad94:	2b0c      	cmp	r3, #12
 801ad96:	d005      	beq.n	801ada4 <create_name+0x314>
 801ad98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ad9c:	f003 0303 	and.w	r3, r3, #3
 801ada0:	2b03      	cmp	r3, #3
 801ada2:	d105      	bne.n	801adb0 <create_name+0x320>
 801ada4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ada8:	f043 0302 	orr.w	r3, r3, #2
 801adac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801adb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adb4:	f003 0302 	and.w	r3, r3, #2
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d117      	bne.n	801adec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801adbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801adc0:	f003 0303 	and.w	r3, r3, #3
 801adc4:	2b01      	cmp	r3, #1
 801adc6:	d105      	bne.n	801add4 <create_name+0x344>
 801adc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801adcc:	f043 0310 	orr.w	r3, r3, #16
 801add0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801add4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801add8:	f003 030c 	and.w	r3, r3, #12
 801addc:	2b04      	cmp	r3, #4
 801adde:	d105      	bne.n	801adec <create_name+0x35c>
 801ade0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ade4:	f043 0308 	orr.w	r3, r3, #8
 801ade8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801adf2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801adf6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801adf8:	4618      	mov	r0, r3
 801adfa:	3728      	adds	r7, #40	@ 0x28
 801adfc:	46bd      	mov	sp, r7
 801adfe:	bd80      	pop	{r7, pc}

0801ae00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b086      	sub	sp, #24
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
 801ae08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ae0e:	693b      	ldr	r3, [r7, #16]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ae14:	e002      	b.n	801ae1c <follow_path+0x1c>
 801ae16:	683b      	ldr	r3, [r7, #0]
 801ae18:	3301      	adds	r3, #1
 801ae1a:	603b      	str	r3, [r7, #0]
 801ae1c:	683b      	ldr	r3, [r7, #0]
 801ae1e:	781b      	ldrb	r3, [r3, #0]
 801ae20:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae22:	d0f8      	beq.n	801ae16 <follow_path+0x16>
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	781b      	ldrb	r3, [r3, #0]
 801ae28:	2b5c      	cmp	r3, #92	@ 0x5c
 801ae2a:	d0f4      	beq.n	801ae16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ae2c:	693b      	ldr	r3, [r7, #16]
 801ae2e:	2200      	movs	r2, #0
 801ae30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ae32:	683b      	ldr	r3, [r7, #0]
 801ae34:	781b      	ldrb	r3, [r3, #0]
 801ae36:	2b1f      	cmp	r3, #31
 801ae38:	d80a      	bhi.n	801ae50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	2280      	movs	r2, #128	@ 0x80
 801ae3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801ae42:	2100      	movs	r1, #0
 801ae44:	6878      	ldr	r0, [r7, #4]
 801ae46:	f7ff f83e 	bl	8019ec6 <dir_sdi>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	75fb      	strb	r3, [r7, #23]
 801ae4e:	e043      	b.n	801aed8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ae50:	463b      	mov	r3, r7
 801ae52:	4619      	mov	r1, r3
 801ae54:	6878      	ldr	r0, [r7, #4]
 801ae56:	f7ff fe1b 	bl	801aa90 <create_name>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ae5e:	7dfb      	ldrb	r3, [r7, #23]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d134      	bne.n	801aece <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801ae64:	6878      	ldr	r0, [r7, #4]
 801ae66:	f7ff fb7c 	bl	801a562 <dir_find>
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ae74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801ae76:	7dfb      	ldrb	r3, [r7, #23]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d00a      	beq.n	801ae92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801ae7c:	7dfb      	ldrb	r3, [r7, #23]
 801ae7e:	2b04      	cmp	r3, #4
 801ae80:	d127      	bne.n	801aed2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801ae82:	7afb      	ldrb	r3, [r7, #11]
 801ae84:	f003 0304 	and.w	r3, r3, #4
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d122      	bne.n	801aed2 <follow_path+0xd2>
 801ae8c:	2305      	movs	r3, #5
 801ae8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801ae90:	e01f      	b.n	801aed2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ae92:	7afb      	ldrb	r3, [r7, #11]
 801ae94:	f003 0304 	and.w	r3, r3, #4
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d11c      	bne.n	801aed6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801ae9c:	693b      	ldr	r3, [r7, #16]
 801ae9e:	799b      	ldrb	r3, [r3, #6]
 801aea0:	f003 0310 	and.w	r3, r3, #16
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d102      	bne.n	801aeae <follow_path+0xae>
				res = FR_NO_PATH; break;
 801aea8:	2305      	movs	r3, #5
 801aeaa:	75fb      	strb	r3, [r7, #23]
 801aeac:	e014      	b.n	801aed8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	695b      	ldr	r3, [r3, #20]
 801aeb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801aebc:	4413      	add	r3, r2
 801aebe:	4619      	mov	r1, r3
 801aec0:	68f8      	ldr	r0, [r7, #12]
 801aec2:	f7ff f987 	bl	801a1d4 <ld_clust>
 801aec6:	4602      	mov	r2, r0
 801aec8:	693b      	ldr	r3, [r7, #16]
 801aeca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801aecc:	e7c0      	b.n	801ae50 <follow_path+0x50>
			if (res != FR_OK) break;
 801aece:	bf00      	nop
 801aed0:	e002      	b.n	801aed8 <follow_path+0xd8>
				break;
 801aed2:	bf00      	nop
 801aed4:	e000      	b.n	801aed8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801aed6:	bf00      	nop
			}
		}
	}

	return res;
 801aed8:	7dfb      	ldrb	r3, [r7, #23]
}
 801aeda:	4618      	mov	r0, r3
 801aedc:	3718      	adds	r7, #24
 801aede:	46bd      	mov	sp, r7
 801aee0:	bd80      	pop	{r7, pc}

0801aee2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801aee2:	b480      	push	{r7}
 801aee4:	b087      	sub	sp, #28
 801aee6:	af00      	add	r7, sp, #0
 801aee8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801aeea:	f04f 33ff 	mov.w	r3, #4294967295
 801aeee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d031      	beq.n	801af5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	617b      	str	r3, [r7, #20]
 801aefe:	e002      	b.n	801af06 <get_ldnumber+0x24>
 801af00:	697b      	ldr	r3, [r7, #20]
 801af02:	3301      	adds	r3, #1
 801af04:	617b      	str	r3, [r7, #20]
 801af06:	697b      	ldr	r3, [r7, #20]
 801af08:	781b      	ldrb	r3, [r3, #0]
 801af0a:	2b1f      	cmp	r3, #31
 801af0c:	d903      	bls.n	801af16 <get_ldnumber+0x34>
 801af0e:	697b      	ldr	r3, [r7, #20]
 801af10:	781b      	ldrb	r3, [r3, #0]
 801af12:	2b3a      	cmp	r3, #58	@ 0x3a
 801af14:	d1f4      	bne.n	801af00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801af16:	697b      	ldr	r3, [r7, #20]
 801af18:	781b      	ldrb	r3, [r3, #0]
 801af1a:	2b3a      	cmp	r3, #58	@ 0x3a
 801af1c:	d11c      	bne.n	801af58 <get_ldnumber+0x76>
			tp = *path;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	1c5a      	adds	r2, r3, #1
 801af28:	60fa      	str	r2, [r7, #12]
 801af2a:	781b      	ldrb	r3, [r3, #0]
 801af2c:	3b30      	subs	r3, #48	@ 0x30
 801af2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801af30:	68bb      	ldr	r3, [r7, #8]
 801af32:	2b09      	cmp	r3, #9
 801af34:	d80e      	bhi.n	801af54 <get_ldnumber+0x72>
 801af36:	68fa      	ldr	r2, [r7, #12]
 801af38:	697b      	ldr	r3, [r7, #20]
 801af3a:	429a      	cmp	r2, r3
 801af3c:	d10a      	bne.n	801af54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801af3e:	68bb      	ldr	r3, [r7, #8]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d107      	bne.n	801af54 <get_ldnumber+0x72>
					vol = (int)i;
 801af44:	68bb      	ldr	r3, [r7, #8]
 801af46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801af48:	697b      	ldr	r3, [r7, #20]
 801af4a:	3301      	adds	r3, #1
 801af4c:	617b      	str	r3, [r7, #20]
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	697a      	ldr	r2, [r7, #20]
 801af52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801af54:	693b      	ldr	r3, [r7, #16]
 801af56:	e002      	b.n	801af5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801af58:	2300      	movs	r3, #0
 801af5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801af5c:	693b      	ldr	r3, [r7, #16]
}
 801af5e:	4618      	mov	r0, r3
 801af60:	371c      	adds	r7, #28
 801af62:	46bd      	mov	sp, r7
 801af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af68:	4770      	bx	lr
	...

0801af6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801af6c:	b580      	push	{r7, lr}
 801af6e:	b082      	sub	sp, #8
 801af70:	af00      	add	r7, sp, #0
 801af72:	6078      	str	r0, [r7, #4]
 801af74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	2200      	movs	r2, #0
 801af7a:	70da      	strb	r2, [r3, #3]
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	f04f 32ff 	mov.w	r2, #4294967295
 801af82:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801af84:	6839      	ldr	r1, [r7, #0]
 801af86:	6878      	ldr	r0, [r7, #4]
 801af88:	f7fe fc20 	bl	80197cc <move_window>
 801af8c:	4603      	mov	r3, r0
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d001      	beq.n	801af96 <check_fs+0x2a>
 801af92:	2304      	movs	r3, #4
 801af94:	e038      	b.n	801b008 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	3334      	adds	r3, #52	@ 0x34
 801af9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801af9e:	4618      	mov	r0, r3
 801afa0:	f7fe f964 	bl	801926c <ld_word>
 801afa4:	4603      	mov	r3, r0
 801afa6:	461a      	mov	r2, r3
 801afa8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801afac:	429a      	cmp	r2, r3
 801afae:	d001      	beq.n	801afb4 <check_fs+0x48>
 801afb0:	2303      	movs	r3, #3
 801afb2:	e029      	b.n	801b008 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801afba:	2be9      	cmp	r3, #233	@ 0xe9
 801afbc:	d009      	beq.n	801afd2 <check_fs+0x66>
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801afc4:	2beb      	cmp	r3, #235	@ 0xeb
 801afc6:	d11e      	bne.n	801b006 <check_fs+0x9a>
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801afce:	2b90      	cmp	r3, #144	@ 0x90
 801afd0:	d119      	bne.n	801b006 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	3334      	adds	r3, #52	@ 0x34
 801afd6:	3336      	adds	r3, #54	@ 0x36
 801afd8:	4618      	mov	r0, r3
 801afda:	f7fe f95f 	bl	801929c <ld_dword>
 801afde:	4603      	mov	r3, r0
 801afe0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801afe4:	4a0a      	ldr	r2, [pc, #40]	@ (801b010 <check_fs+0xa4>)
 801afe6:	4293      	cmp	r3, r2
 801afe8:	d101      	bne.n	801afee <check_fs+0x82>
 801afea:	2300      	movs	r3, #0
 801afec:	e00c      	b.n	801b008 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	3334      	adds	r3, #52	@ 0x34
 801aff2:	3352      	adds	r3, #82	@ 0x52
 801aff4:	4618      	mov	r0, r3
 801aff6:	f7fe f951 	bl	801929c <ld_dword>
 801affa:	4603      	mov	r3, r0
 801affc:	4a05      	ldr	r2, [pc, #20]	@ (801b014 <check_fs+0xa8>)
 801affe:	4293      	cmp	r3, r2
 801b000:	d101      	bne.n	801b006 <check_fs+0x9a>
 801b002:	2300      	movs	r3, #0
 801b004:	e000      	b.n	801b008 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801b006:	2302      	movs	r3, #2
}
 801b008:	4618      	mov	r0, r3
 801b00a:	3708      	adds	r7, #8
 801b00c:	46bd      	mov	sp, r7
 801b00e:	bd80      	pop	{r7, pc}
 801b010:	00544146 	.word	0x00544146
 801b014:	33544146 	.word	0x33544146

0801b018 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b096      	sub	sp, #88	@ 0x58
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	60f8      	str	r0, [r7, #12]
 801b020:	60b9      	str	r1, [r7, #8]
 801b022:	4613      	mov	r3, r2
 801b024:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801b026:	68bb      	ldr	r3, [r7, #8]
 801b028:	2200      	movs	r2, #0
 801b02a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801b02c:	68f8      	ldr	r0, [r7, #12]
 801b02e:	f7ff ff58 	bl	801aee2 <get_ldnumber>
 801b032:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801b034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b036:	2b00      	cmp	r3, #0
 801b038:	da01      	bge.n	801b03e <find_volume+0x26>
 801b03a:	230b      	movs	r3, #11
 801b03c:	e230      	b.n	801b4a0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801b03e:	4aa1      	ldr	r2, [pc, #644]	@ (801b2c4 <find_volume+0x2ac>)
 801b040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b046:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d101      	bne.n	801b052 <find_volume+0x3a>
 801b04e:	230c      	movs	r3, #12
 801b050:	e226      	b.n	801b4a0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801b052:	68bb      	ldr	r3, [r7, #8]
 801b054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b056:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801b058:	79fb      	ldrb	r3, [r7, #7]
 801b05a:	f023 0301 	bic.w	r3, r3, #1
 801b05e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801b060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b062:	781b      	ldrb	r3, [r3, #0]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d01a      	beq.n	801b09e <find_volume+0x86>
		stat = disk_status(fs->drv);
 801b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b06a:	785b      	ldrb	r3, [r3, #1]
 801b06c:	4618      	mov	r0, r3
 801b06e:	f7fe f85d 	bl	801912c <disk_status>
 801b072:	4603      	mov	r3, r0
 801b074:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801b078:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b07c:	f003 0301 	and.w	r3, r3, #1
 801b080:	2b00      	cmp	r3, #0
 801b082:	d10c      	bne.n	801b09e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801b084:	79fb      	ldrb	r3, [r7, #7]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d007      	beq.n	801b09a <find_volume+0x82>
 801b08a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b08e:	f003 0304 	and.w	r3, r3, #4
 801b092:	2b00      	cmp	r3, #0
 801b094:	d001      	beq.n	801b09a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801b096:	230a      	movs	r3, #10
 801b098:	e202      	b.n	801b4a0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801b09a:	2300      	movs	r3, #0
 801b09c:	e200      	b.n	801b4a0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b0a6:	b2da      	uxtb	r2, r3
 801b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b0ae:	785b      	ldrb	r3, [r3, #1]
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	f7fe f855 	bl	8019160 <disk_initialize>
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b0bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0c0:	f003 0301 	and.w	r3, r3, #1
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d001      	beq.n	801b0cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b0c8:	2303      	movs	r3, #3
 801b0ca:	e1e9      	b.n	801b4a0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b0cc:	79fb      	ldrb	r3, [r7, #7]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d007      	beq.n	801b0e2 <find_volume+0xca>
 801b0d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801b0d6:	f003 0304 	and.w	r3, r3, #4
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d001      	beq.n	801b0e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b0de:	230a      	movs	r3, #10
 801b0e0:	e1de      	b.n	801b4a0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b0e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b0e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b0ea:	f7ff ff3f 	bl	801af6c <check_fs>
 801b0ee:	4603      	mov	r3, r0
 801b0f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b0f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b0f8:	2b02      	cmp	r3, #2
 801b0fa:	d149      	bne.n	801b190 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	643b      	str	r3, [r7, #64]	@ 0x40
 801b100:	e01e      	b.n	801b140 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b104:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801b108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b10a:	011b      	lsls	r3, r3, #4
 801b10c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801b110:	4413      	add	r3, r2
 801b112:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b116:	3304      	adds	r3, #4
 801b118:	781b      	ldrb	r3, [r3, #0]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d006      	beq.n	801b12c <find_volume+0x114>
 801b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b120:	3308      	adds	r3, #8
 801b122:	4618      	mov	r0, r3
 801b124:	f7fe f8ba 	bl	801929c <ld_dword>
 801b128:	4602      	mov	r2, r0
 801b12a:	e000      	b.n	801b12e <find_volume+0x116>
 801b12c:	2200      	movs	r2, #0
 801b12e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b130:	009b      	lsls	r3, r3, #2
 801b132:	3358      	adds	r3, #88	@ 0x58
 801b134:	443b      	add	r3, r7
 801b136:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b13c:	3301      	adds	r3, #1
 801b13e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b142:	2b03      	cmp	r3, #3
 801b144:	d9dd      	bls.n	801b102 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b146:	2300      	movs	r3, #0
 801b148:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801b14a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d002      	beq.n	801b156 <find_volume+0x13e>
 801b150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b152:	3b01      	subs	r3, #1
 801b154:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b158:	009b      	lsls	r3, r3, #2
 801b15a:	3358      	adds	r3, #88	@ 0x58
 801b15c:	443b      	add	r3, r7
 801b15e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b162:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b166:	2b00      	cmp	r3, #0
 801b168:	d005      	beq.n	801b176 <find_volume+0x15e>
 801b16a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801b16c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b16e:	f7ff fefd 	bl	801af6c <check_fs>
 801b172:	4603      	mov	r3, r0
 801b174:	e000      	b.n	801b178 <find_volume+0x160>
 801b176:	2303      	movs	r3, #3
 801b178:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b17c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b180:	2b01      	cmp	r3, #1
 801b182:	d905      	bls.n	801b190 <find_volume+0x178>
 801b184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b186:	3301      	adds	r3, #1
 801b188:	643b      	str	r3, [r7, #64]	@ 0x40
 801b18a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b18c:	2b03      	cmp	r3, #3
 801b18e:	d9e2      	bls.n	801b156 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b190:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b194:	2b04      	cmp	r3, #4
 801b196:	d101      	bne.n	801b19c <find_volume+0x184>
 801b198:	2301      	movs	r3, #1
 801b19a:	e181      	b.n	801b4a0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b19c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b1a0:	2b01      	cmp	r3, #1
 801b1a2:	d901      	bls.n	801b1a8 <find_volume+0x190>
 801b1a4:	230d      	movs	r3, #13
 801b1a6:	e17b      	b.n	801b4a0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1aa:	3334      	adds	r3, #52	@ 0x34
 801b1ac:	330b      	adds	r3, #11
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7fe f85c 	bl	801926c <ld_word>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b1ba:	d001      	beq.n	801b1c0 <find_volume+0x1a8>
 801b1bc:	230d      	movs	r3, #13
 801b1be:	e16f      	b.n	801b4a0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1c2:	3334      	adds	r3, #52	@ 0x34
 801b1c4:	3316      	adds	r3, #22
 801b1c6:	4618      	mov	r0, r3
 801b1c8:	f7fe f850 	bl	801926c <ld_word>
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b1d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d106      	bne.n	801b1e4 <find_volume+0x1cc>
 801b1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1d8:	3334      	adds	r3, #52	@ 0x34
 801b1da:	3324      	adds	r3, #36	@ 0x24
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f7fe f85d 	bl	801929c <ld_dword>
 801b1e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b1e8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1ec:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801b1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1f6:	789b      	ldrb	r3, [r3, #2]
 801b1f8:	2b01      	cmp	r3, #1
 801b1fa:	d005      	beq.n	801b208 <find_volume+0x1f0>
 801b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1fe:	789b      	ldrb	r3, [r3, #2]
 801b200:	2b02      	cmp	r3, #2
 801b202:	d001      	beq.n	801b208 <find_volume+0x1f0>
 801b204:	230d      	movs	r3, #13
 801b206:	e14b      	b.n	801b4a0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b20a:	789b      	ldrb	r3, [r3, #2]
 801b20c:	461a      	mov	r2, r3
 801b20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b210:	fb02 f303 	mul.w	r3, r2, r3
 801b214:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801b21c:	461a      	mov	r2, r3
 801b21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b220:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b224:	895b      	ldrh	r3, [r3, #10]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d008      	beq.n	801b23c <find_volume+0x224>
 801b22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b22c:	895b      	ldrh	r3, [r3, #10]
 801b22e:	461a      	mov	r2, r3
 801b230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b232:	895b      	ldrh	r3, [r3, #10]
 801b234:	3b01      	subs	r3, #1
 801b236:	4013      	ands	r3, r2
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d001      	beq.n	801b240 <find_volume+0x228>
 801b23c:	230d      	movs	r3, #13
 801b23e:	e12f      	b.n	801b4a0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b242:	3334      	adds	r3, #52	@ 0x34
 801b244:	3311      	adds	r3, #17
 801b246:	4618      	mov	r0, r3
 801b248:	f7fe f810 	bl	801926c <ld_word>
 801b24c:	4603      	mov	r3, r0
 801b24e:	461a      	mov	r2, r3
 801b250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b252:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b256:	891b      	ldrh	r3, [r3, #8]
 801b258:	f003 030f 	and.w	r3, r3, #15
 801b25c:	b29b      	uxth	r3, r3
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d001      	beq.n	801b266 <find_volume+0x24e>
 801b262:	230d      	movs	r3, #13
 801b264:	e11c      	b.n	801b4a0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b268:	3334      	adds	r3, #52	@ 0x34
 801b26a:	3313      	adds	r3, #19
 801b26c:	4618      	mov	r0, r3
 801b26e:	f7fd fffd 	bl	801926c <ld_word>
 801b272:	4603      	mov	r3, r0
 801b274:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d106      	bne.n	801b28a <find_volume+0x272>
 801b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b27e:	3334      	adds	r3, #52	@ 0x34
 801b280:	3320      	adds	r3, #32
 801b282:	4618      	mov	r0, r3
 801b284:	f7fe f80a 	bl	801929c <ld_dword>
 801b288:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b28c:	3334      	adds	r3, #52	@ 0x34
 801b28e:	330e      	adds	r3, #14
 801b290:	4618      	mov	r0, r3
 801b292:	f7fd ffeb 	bl	801926c <ld_word>
 801b296:	4603      	mov	r3, r0
 801b298:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b29a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d101      	bne.n	801b2a4 <find_volume+0x28c>
 801b2a0:	230d      	movs	r3, #13
 801b2a2:	e0fd      	b.n	801b4a0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b2a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b2a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b2a8:	4413      	add	r3, r2
 801b2aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b2ac:	8912      	ldrh	r2, [r2, #8]
 801b2ae:	0912      	lsrs	r2, r2, #4
 801b2b0:	b292      	uxth	r2, r2
 801b2b2:	4413      	add	r3, r2
 801b2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b2b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2ba:	429a      	cmp	r2, r3
 801b2bc:	d204      	bcs.n	801b2c8 <find_volume+0x2b0>
 801b2be:	230d      	movs	r3, #13
 801b2c0:	e0ee      	b.n	801b4a0 <find_volume+0x488>
 801b2c2:	bf00      	nop
 801b2c4:	20001b68 	.word	0x20001b68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b2c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b2cc:	1ad3      	subs	r3, r2, r3
 801b2ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b2d0:	8952      	ldrh	r2, [r2, #10]
 801b2d2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b2d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d101      	bne.n	801b2e2 <find_volume+0x2ca>
 801b2de:	230d      	movs	r3, #13
 801b2e0:	e0de      	b.n	801b4a0 <find_volume+0x488>
		fmt = FS_FAT32;
 801b2e2:	2303      	movs	r3, #3
 801b2e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801b2ee:	4293      	cmp	r3, r2
 801b2f0:	d802      	bhi.n	801b2f8 <find_volume+0x2e0>
 801b2f2:	2302      	movs	r3, #2
 801b2f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801b2fe:	4293      	cmp	r3, r2
 801b300:	d802      	bhi.n	801b308 <find_volume+0x2f0>
 801b302:	2301      	movs	r3, #1
 801b304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b30a:	1c9a      	adds	r2, r3, #2
 801b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b30e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801b310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b312:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b314:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b316:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b31a:	441a      	add	r2, r3
 801b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b31e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801b320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b324:	441a      	add	r2, r3
 801b326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b328:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801b32a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b32e:	2b03      	cmp	r3, #3
 801b330:	d11e      	bne.n	801b370 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b334:	3334      	adds	r3, #52	@ 0x34
 801b336:	332a      	adds	r3, #42	@ 0x2a
 801b338:	4618      	mov	r0, r3
 801b33a:	f7fd ff97 	bl	801926c <ld_word>
 801b33e:	4603      	mov	r3, r0
 801b340:	2b00      	cmp	r3, #0
 801b342:	d001      	beq.n	801b348 <find_volume+0x330>
 801b344:	230d      	movs	r3, #13
 801b346:	e0ab      	b.n	801b4a0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b34a:	891b      	ldrh	r3, [r3, #8]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d001      	beq.n	801b354 <find_volume+0x33c>
 801b350:	230d      	movs	r3, #13
 801b352:	e0a5      	b.n	801b4a0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b356:	3334      	adds	r3, #52	@ 0x34
 801b358:	332c      	adds	r3, #44	@ 0x2c
 801b35a:	4618      	mov	r0, r3
 801b35c:	f7fd ff9e 	bl	801929c <ld_dword>
 801b360:	4602      	mov	r2, r0
 801b362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b364:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801b366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b368:	699b      	ldr	r3, [r3, #24]
 801b36a:	009b      	lsls	r3, r3, #2
 801b36c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b36e:	e01f      	b.n	801b3b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801b370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b372:	891b      	ldrh	r3, [r3, #8]
 801b374:	2b00      	cmp	r3, #0
 801b376:	d101      	bne.n	801b37c <find_volume+0x364>
 801b378:	230d      	movs	r3, #13
 801b37a:	e091      	b.n	801b4a0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b37e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b382:	441a      	add	r2, r3
 801b384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b386:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801b388:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b38c:	2b02      	cmp	r3, #2
 801b38e:	d103      	bne.n	801b398 <find_volume+0x380>
 801b390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b392:	699b      	ldr	r3, [r3, #24]
 801b394:	005b      	lsls	r3, r3, #1
 801b396:	e00a      	b.n	801b3ae <find_volume+0x396>
 801b398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b39a:	699a      	ldr	r2, [r3, #24]
 801b39c:	4613      	mov	r3, r2
 801b39e:	005b      	lsls	r3, r3, #1
 801b3a0:	4413      	add	r3, r2
 801b3a2:	085a      	lsrs	r2, r3, #1
 801b3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3a6:	699b      	ldr	r3, [r3, #24]
 801b3a8:	f003 0301 	and.w	r3, r3, #1
 801b3ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801b3ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801b3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3b2:	69da      	ldr	r2, [r3, #28]
 801b3b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b3b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801b3ba:	0a5b      	lsrs	r3, r3, #9
 801b3bc:	429a      	cmp	r2, r3
 801b3be:	d201      	bcs.n	801b3c4 <find_volume+0x3ac>
 801b3c0:	230d      	movs	r3, #13
 801b3c2:	e06d      	b.n	801b4a0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801b3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3c6:	f04f 32ff 	mov.w	r2, #4294967295
 801b3ca:	615a      	str	r2, [r3, #20]
 801b3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3ce:	695a      	ldr	r2, [r3, #20]
 801b3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3d2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801b3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3d6:	2280      	movs	r2, #128	@ 0x80
 801b3d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801b3da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801b3de:	2b03      	cmp	r3, #3
 801b3e0:	d149      	bne.n	801b476 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801b3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b3e4:	3334      	adds	r3, #52	@ 0x34
 801b3e6:	3330      	adds	r3, #48	@ 0x30
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	f7fd ff3f 	bl	801926c <ld_word>
 801b3ee:	4603      	mov	r3, r0
 801b3f0:	2b01      	cmp	r3, #1
 801b3f2:	d140      	bne.n	801b476 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801b3f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	4619      	mov	r1, r3
 801b3fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b3fc:	f7fe f9e6 	bl	80197cc <move_window>
 801b400:	4603      	mov	r3, r0
 801b402:	2b00      	cmp	r3, #0
 801b404:	d137      	bne.n	801b476 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801b406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b408:	2200      	movs	r2, #0
 801b40a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801b40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b40e:	3334      	adds	r3, #52	@ 0x34
 801b410:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b414:	4618      	mov	r0, r3
 801b416:	f7fd ff29 	bl	801926c <ld_word>
 801b41a:	4603      	mov	r3, r0
 801b41c:	461a      	mov	r2, r3
 801b41e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801b422:	429a      	cmp	r2, r3
 801b424:	d127      	bne.n	801b476 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801b426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b428:	3334      	adds	r3, #52	@ 0x34
 801b42a:	4618      	mov	r0, r3
 801b42c:	f7fd ff36 	bl	801929c <ld_dword>
 801b430:	4603      	mov	r3, r0
 801b432:	4a1d      	ldr	r2, [pc, #116]	@ (801b4a8 <find_volume+0x490>)
 801b434:	4293      	cmp	r3, r2
 801b436:	d11e      	bne.n	801b476 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b43a:	3334      	adds	r3, #52	@ 0x34
 801b43c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b440:	4618      	mov	r0, r3
 801b442:	f7fd ff2b 	bl	801929c <ld_dword>
 801b446:	4603      	mov	r3, r0
 801b448:	4a18      	ldr	r2, [pc, #96]	@ (801b4ac <find_volume+0x494>)
 801b44a:	4293      	cmp	r3, r2
 801b44c:	d113      	bne.n	801b476 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801b44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b450:	3334      	adds	r3, #52	@ 0x34
 801b452:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801b456:	4618      	mov	r0, r3
 801b458:	f7fd ff20 	bl	801929c <ld_dword>
 801b45c:	4602      	mov	r2, r0
 801b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b460:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801b462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b464:	3334      	adds	r3, #52	@ 0x34
 801b466:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801b46a:	4618      	mov	r0, r3
 801b46c:	f7fd ff16 	bl	801929c <ld_dword>
 801b470:	4602      	mov	r2, r0
 801b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b474:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801b476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b478:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801b47c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801b47e:	4b0c      	ldr	r3, [pc, #48]	@ (801b4b0 <find_volume+0x498>)
 801b480:	881b      	ldrh	r3, [r3, #0]
 801b482:	3301      	adds	r3, #1
 801b484:	b29a      	uxth	r2, r3
 801b486:	4b0a      	ldr	r3, [pc, #40]	@ (801b4b0 <find_volume+0x498>)
 801b488:	801a      	strh	r2, [r3, #0]
 801b48a:	4b09      	ldr	r3, [pc, #36]	@ (801b4b0 <find_volume+0x498>)
 801b48c:	881a      	ldrh	r2, [r3, #0]
 801b48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b490:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801b492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b494:	4a07      	ldr	r2, [pc, #28]	@ (801b4b4 <find_volume+0x49c>)
 801b496:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801b498:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b49a:	f7fe f92f 	bl	80196fc <clear_lock>
#endif
	return FR_OK;
 801b49e:	2300      	movs	r3, #0
}
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	3758      	adds	r7, #88	@ 0x58
 801b4a4:	46bd      	mov	sp, r7
 801b4a6:	bd80      	pop	{r7, pc}
 801b4a8:	41615252 	.word	0x41615252
 801b4ac:	61417272 	.word	0x61417272
 801b4b0:	20001b6c 	.word	0x20001b6c
 801b4b4:	20001b90 	.word	0x20001b90

0801b4b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b084      	sub	sp, #16
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	6078      	str	r0, [r7, #4]
 801b4c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801b4c2:	2309      	movs	r3, #9
 801b4c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d01c      	beq.n	801b506 <validate+0x4e>
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d018      	beq.n	801b506 <validate+0x4e>
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	781b      	ldrb	r3, [r3, #0]
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d013      	beq.n	801b506 <validate+0x4e>
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	889a      	ldrh	r2, [r3, #4]
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	88db      	ldrh	r3, [r3, #6]
 801b4e8:	429a      	cmp	r2, r3
 801b4ea:	d10c      	bne.n	801b506 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	785b      	ldrb	r3, [r3, #1]
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	f7fd fe1a 	bl	801912c <disk_status>
 801b4f8:	4603      	mov	r3, r0
 801b4fa:	f003 0301 	and.w	r3, r3, #1
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d101      	bne.n	801b506 <validate+0x4e>
			res = FR_OK;
 801b502:	2300      	movs	r3, #0
 801b504:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b506:	7bfb      	ldrb	r3, [r7, #15]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d102      	bne.n	801b512 <validate+0x5a>
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	e000      	b.n	801b514 <validate+0x5c>
 801b512:	2300      	movs	r3, #0
 801b514:	683a      	ldr	r2, [r7, #0]
 801b516:	6013      	str	r3, [r2, #0]
	return res;
 801b518:	7bfb      	ldrb	r3, [r7, #15]
}
 801b51a:	4618      	mov	r0, r3
 801b51c:	3710      	adds	r7, #16
 801b51e:	46bd      	mov	sp, r7
 801b520:	bd80      	pop	{r7, pc}
	...

0801b524 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b088      	sub	sp, #32
 801b528:	af00      	add	r7, sp, #0
 801b52a:	60f8      	str	r0, [r7, #12]
 801b52c:	60b9      	str	r1, [r7, #8]
 801b52e:	4613      	mov	r3, r2
 801b530:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801b532:	68bb      	ldr	r3, [r7, #8]
 801b534:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801b536:	f107 0310 	add.w	r3, r7, #16
 801b53a:	4618      	mov	r0, r3
 801b53c:	f7ff fcd1 	bl	801aee2 <get_ldnumber>
 801b540:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801b542:	69fb      	ldr	r3, [r7, #28]
 801b544:	2b00      	cmp	r3, #0
 801b546:	da01      	bge.n	801b54c <f_mount+0x28>
 801b548:	230b      	movs	r3, #11
 801b54a:	e02b      	b.n	801b5a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801b54c:	4a17      	ldr	r2, [pc, #92]	@ (801b5ac <f_mount+0x88>)
 801b54e:	69fb      	ldr	r3, [r7, #28]
 801b550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b554:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801b556:	69bb      	ldr	r3, [r7, #24]
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d005      	beq.n	801b568 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801b55c:	69b8      	ldr	r0, [r7, #24]
 801b55e:	f7fe f8cd 	bl	80196fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801b562:	69bb      	ldr	r3, [r7, #24]
 801b564:	2200      	movs	r2, #0
 801b566:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801b568:	68fb      	ldr	r3, [r7, #12]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d002      	beq.n	801b574 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	2200      	movs	r2, #0
 801b572:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801b574:	68fa      	ldr	r2, [r7, #12]
 801b576:	490d      	ldr	r1, [pc, #52]	@ (801b5ac <f_mount+0x88>)
 801b578:	69fb      	ldr	r3, [r7, #28]
 801b57a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d002      	beq.n	801b58a <f_mount+0x66>
 801b584:	79fb      	ldrb	r3, [r7, #7]
 801b586:	2b01      	cmp	r3, #1
 801b588:	d001      	beq.n	801b58e <f_mount+0x6a>
 801b58a:	2300      	movs	r3, #0
 801b58c:	e00a      	b.n	801b5a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801b58e:	f107 010c 	add.w	r1, r7, #12
 801b592:	f107 0308 	add.w	r3, r7, #8
 801b596:	2200      	movs	r2, #0
 801b598:	4618      	mov	r0, r3
 801b59a:	f7ff fd3d 	bl	801b018 <find_volume>
 801b59e:	4603      	mov	r3, r0
 801b5a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801b5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	3720      	adds	r7, #32
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}
 801b5ac:	20001b68 	.word	0x20001b68

0801b5b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b09a      	sub	sp, #104	@ 0x68
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	60f8      	str	r0, [r7, #12]
 801b5b8:	60b9      	str	r1, [r7, #8]
 801b5ba:	4613      	mov	r3, r2
 801b5bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d101      	bne.n	801b5c8 <f_open+0x18>
 801b5c4:	2309      	movs	r3, #9
 801b5c6:	e1a9      	b.n	801b91c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801b5c8:	79fb      	ldrb	r3, [r7, #7]
 801b5ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b5ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801b5d0:	79fa      	ldrb	r2, [r7, #7]
 801b5d2:	f107 0114 	add.w	r1, r7, #20
 801b5d6:	f107 0308 	add.w	r3, r7, #8
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7ff fd1c 	bl	801b018 <find_volume>
 801b5e0:	4603      	mov	r3, r0
 801b5e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801b5e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	f040 818d 	bne.w	801b90a <f_open+0x35a>
		dj.obj.fs = fs;
 801b5f0:	697b      	ldr	r3, [r7, #20]
 801b5f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801b5f4:	68ba      	ldr	r2, [r7, #8]
 801b5f6:	f107 0318 	add.w	r3, r7, #24
 801b5fa:	4611      	mov	r1, r2
 801b5fc:	4618      	mov	r0, r3
 801b5fe:	f7ff fbff 	bl	801ae00 <follow_path>
 801b602:	4603      	mov	r3, r0
 801b604:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801b608:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d118      	bne.n	801b642 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801b610:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b614:	b25b      	sxtb	r3, r3
 801b616:	2b00      	cmp	r3, #0
 801b618:	da03      	bge.n	801b622 <f_open+0x72>
				res = FR_INVALID_NAME;
 801b61a:	2306      	movs	r3, #6
 801b61c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b620:	e00f      	b.n	801b642 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b622:	79fb      	ldrb	r3, [r7, #7]
 801b624:	2b01      	cmp	r3, #1
 801b626:	bf8c      	ite	hi
 801b628:	2301      	movhi	r3, #1
 801b62a:	2300      	movls	r3, #0
 801b62c:	b2db      	uxtb	r3, r3
 801b62e:	461a      	mov	r2, r3
 801b630:	f107 0318 	add.w	r3, r7, #24
 801b634:	4611      	mov	r1, r2
 801b636:	4618      	mov	r0, r3
 801b638:	f7fd ff18 	bl	801946c <chk_lock>
 801b63c:	4603      	mov	r3, r0
 801b63e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801b642:	79fb      	ldrb	r3, [r7, #7]
 801b644:	f003 031c 	and.w	r3, r3, #28
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d07f      	beq.n	801b74c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801b64c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b650:	2b00      	cmp	r3, #0
 801b652:	d017      	beq.n	801b684 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801b654:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b658:	2b04      	cmp	r3, #4
 801b65a:	d10e      	bne.n	801b67a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801b65c:	f7fd ff62 	bl	8019524 <enq_lock>
 801b660:	4603      	mov	r3, r0
 801b662:	2b00      	cmp	r3, #0
 801b664:	d006      	beq.n	801b674 <f_open+0xc4>
 801b666:	f107 0318 	add.w	r3, r7, #24
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7ff f83a 	bl	801a6e4 <dir_register>
 801b670:	4603      	mov	r3, r0
 801b672:	e000      	b.n	801b676 <f_open+0xc6>
 801b674:	2312      	movs	r3, #18
 801b676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801b67a:	79fb      	ldrb	r3, [r7, #7]
 801b67c:	f043 0308 	orr.w	r3, r3, #8
 801b680:	71fb      	strb	r3, [r7, #7]
 801b682:	e010      	b.n	801b6a6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801b684:	7fbb      	ldrb	r3, [r7, #30]
 801b686:	f003 0311 	and.w	r3, r3, #17
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d003      	beq.n	801b696 <f_open+0xe6>
					res = FR_DENIED;
 801b68e:	2307      	movs	r3, #7
 801b690:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b694:	e007      	b.n	801b6a6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801b696:	79fb      	ldrb	r3, [r7, #7]
 801b698:	f003 0304 	and.w	r3, r3, #4
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d002      	beq.n	801b6a6 <f_open+0xf6>
 801b6a0:	2308      	movs	r3, #8
 801b6a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801b6a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d168      	bne.n	801b780 <f_open+0x1d0>
 801b6ae:	79fb      	ldrb	r3, [r7, #7]
 801b6b0:	f003 0308 	and.w	r3, r3, #8
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d063      	beq.n	801b780 <f_open+0x1d0>
				dw = GET_FATTIME();
 801b6b8:	f7f8 f916 	bl	80138e8 <get_fattime>
 801b6bc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801b6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6c0:	330e      	adds	r3, #14
 801b6c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f7fd fe27 	bl	8019318 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801b6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6cc:	3316      	adds	r3, #22
 801b6ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	f7fd fe21 	bl	8019318 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801b6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6d8:	330b      	adds	r3, #11
 801b6da:	2220      	movs	r2, #32
 801b6dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801b6de:	697b      	ldr	r3, [r7, #20]
 801b6e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b6e2:	4611      	mov	r1, r2
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f7fe fd75 	bl	801a1d4 <ld_clust>
 801b6ea:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801b6ec:	697b      	ldr	r3, [r7, #20]
 801b6ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b6f0:	2200      	movs	r2, #0
 801b6f2:	4618      	mov	r0, r3
 801b6f4:	f7fe fd8d 	bl	801a212 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801b6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b6fa:	331c      	adds	r3, #28
 801b6fc:	2100      	movs	r1, #0
 801b6fe:	4618      	mov	r0, r3
 801b700:	f7fd fe0a 	bl	8019318 <st_dword>
					fs->wflag = 1;
 801b704:	697b      	ldr	r3, [r7, #20]
 801b706:	2201      	movs	r2, #1
 801b708:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801b70a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d037      	beq.n	801b780 <f_open+0x1d0>
						dw = fs->winsect;
 801b710:	697b      	ldr	r3, [r7, #20]
 801b712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b714:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801b716:	f107 0318 	add.w	r3, r7, #24
 801b71a:	2200      	movs	r2, #0
 801b71c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b71e:	4618      	mov	r0, r3
 801b720:	f7fe faa0 	bl	8019c64 <remove_chain>
 801b724:	4603      	mov	r3, r0
 801b726:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801b72a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d126      	bne.n	801b780 <f_open+0x1d0>
							res = move_window(fs, dw);
 801b732:	697b      	ldr	r3, [r7, #20]
 801b734:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801b736:	4618      	mov	r0, r3
 801b738:	f7fe f848 	bl	80197cc <move_window>
 801b73c:	4603      	mov	r3, r0
 801b73e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801b742:	697b      	ldr	r3, [r7, #20]
 801b744:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b746:	3a01      	subs	r2, #1
 801b748:	611a      	str	r2, [r3, #16]
 801b74a:	e019      	b.n	801b780 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801b74c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b750:	2b00      	cmp	r3, #0
 801b752:	d115      	bne.n	801b780 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801b754:	7fbb      	ldrb	r3, [r7, #30]
 801b756:	f003 0310 	and.w	r3, r3, #16
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d003      	beq.n	801b766 <f_open+0x1b6>
					res = FR_NO_FILE;
 801b75e:	2304      	movs	r3, #4
 801b760:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b764:	e00c      	b.n	801b780 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801b766:	79fb      	ldrb	r3, [r7, #7]
 801b768:	f003 0302 	and.w	r3, r3, #2
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d007      	beq.n	801b780 <f_open+0x1d0>
 801b770:	7fbb      	ldrb	r3, [r7, #30]
 801b772:	f003 0301 	and.w	r3, r3, #1
 801b776:	2b00      	cmp	r3, #0
 801b778:	d002      	beq.n	801b780 <f_open+0x1d0>
						res = FR_DENIED;
 801b77a:	2307      	movs	r3, #7
 801b77c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801b780:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b784:	2b00      	cmp	r3, #0
 801b786:	d126      	bne.n	801b7d6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801b788:	79fb      	ldrb	r3, [r7, #7]
 801b78a:	f003 0308 	and.w	r3, r3, #8
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d003      	beq.n	801b79a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801b792:	79fb      	ldrb	r3, [r7, #7]
 801b794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b798:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801b79a:	697b      	ldr	r3, [r7, #20]
 801b79c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801b7a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7a4:	68fb      	ldr	r3, [r7, #12]
 801b7a6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b7a8:	79fb      	ldrb	r3, [r7, #7]
 801b7aa:	2b01      	cmp	r3, #1
 801b7ac:	bf8c      	ite	hi
 801b7ae:	2301      	movhi	r3, #1
 801b7b0:	2300      	movls	r3, #0
 801b7b2:	b2db      	uxtb	r3, r3
 801b7b4:	461a      	mov	r2, r3
 801b7b6:	f107 0318 	add.w	r3, r7, #24
 801b7ba:	4611      	mov	r1, r2
 801b7bc:	4618      	mov	r0, r3
 801b7be:	f7fd fed3 	bl	8019568 <inc_lock>
 801b7c2:	4602      	mov	r2, r0
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	691b      	ldr	r3, [r3, #16]
 801b7cc:	2b00      	cmp	r3, #0
 801b7ce:	d102      	bne.n	801b7d6 <f_open+0x226>
 801b7d0:	2302      	movs	r3, #2
 801b7d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801b7d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	f040 8095 	bne.w	801b90a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801b7e0:	697b      	ldr	r3, [r7, #20]
 801b7e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b7e4:	4611      	mov	r1, r2
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	f7fe fcf4 	bl	801a1d4 <ld_clust>
 801b7ec:	4602      	mov	r2, r0
 801b7ee:	68fb      	ldr	r3, [r7, #12]
 801b7f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801b7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b7f4:	331c      	adds	r3, #28
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f7fd fd50 	bl	801929c <ld_dword>
 801b7fc:	4602      	mov	r2, r0
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	2200      	movs	r2, #0
 801b806:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801b808:	697a      	ldr	r2, [r7, #20]
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801b80e:	697b      	ldr	r3, [r7, #20]
 801b810:	88da      	ldrh	r2, [r3, #6]
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	79fa      	ldrb	r2, [r7, #7]
 801b81a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	2200      	movs	r2, #0
 801b820:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	2200      	movs	r2, #0
 801b826:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	2200      	movs	r2, #0
 801b82c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	3330      	adds	r3, #48	@ 0x30
 801b832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b836:	2100      	movs	r1, #0
 801b838:	4618      	mov	r0, r3
 801b83a:	f7fd fdba 	bl	80193b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801b83e:	79fb      	ldrb	r3, [r7, #7]
 801b840:	f003 0320 	and.w	r3, r3, #32
 801b844:	2b00      	cmp	r3, #0
 801b846:	d060      	beq.n	801b90a <f_open+0x35a>
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	68db      	ldr	r3, [r3, #12]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d05c      	beq.n	801b90a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	68da      	ldr	r2, [r3, #12]
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	895b      	ldrh	r3, [r3, #10]
 801b85c:	025b      	lsls	r3, r3, #9
 801b85e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	689b      	ldr	r3, [r3, #8]
 801b864:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	68db      	ldr	r3, [r3, #12]
 801b86a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b86c:	e016      	b.n	801b89c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b872:	4618      	mov	r0, r3
 801b874:	f7fe f865 	bl	8019942 <get_fat>
 801b878:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801b87a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b87c:	2b01      	cmp	r3, #1
 801b87e:	d802      	bhi.n	801b886 <f_open+0x2d6>
 801b880:	2302      	movs	r3, #2
 801b882:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b88c:	d102      	bne.n	801b894 <f_open+0x2e4>
 801b88e:	2301      	movs	r3, #1
 801b890:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801b894:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b898:	1ad3      	subs	r3, r2, r3
 801b89a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b89c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d103      	bne.n	801b8ac <f_open+0x2fc>
 801b8a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b8a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8a8:	429a      	cmp	r2, r3
 801b8aa:	d8e0      	bhi.n	801b86e <f_open+0x2be>
				}
				fp->clust = clst;
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b8b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801b8b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d127      	bne.n	801b90a <f_open+0x35a>
 801b8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d022      	beq.n	801b90a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801b8c4:	697b      	ldr	r3, [r7, #20]
 801b8c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7fe f81b 	bl	8019904 <clust2sect>
 801b8ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801b8d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d103      	bne.n	801b8de <f_open+0x32e>
						res = FR_INT_ERR;
 801b8d6:	2302      	movs	r3, #2
 801b8d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801b8dc:	e015      	b.n	801b90a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801b8de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8e0:	0a5a      	lsrs	r2, r3, #9
 801b8e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b8e4:	441a      	add	r2, r3
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801b8ea:	697b      	ldr	r3, [r7, #20]
 801b8ec:	7858      	ldrb	r0, [r3, #1]
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	6a1a      	ldr	r2, [r3, #32]
 801b8f8:	2301      	movs	r3, #1
 801b8fa:	f7fd fc59 	bl	80191b0 <disk_read>
 801b8fe:	4603      	mov	r3, r0
 801b900:	2b00      	cmp	r3, #0
 801b902:	d002      	beq.n	801b90a <f_open+0x35a>
 801b904:	2301      	movs	r3, #1
 801b906:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801b90a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d002      	beq.n	801b918 <f_open+0x368>
 801b912:	68fb      	ldr	r3, [r7, #12]
 801b914:	2200      	movs	r2, #0
 801b916:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801b918:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801b91c:	4618      	mov	r0, r3
 801b91e:	3768      	adds	r7, #104	@ 0x68
 801b920:	46bd      	mov	sp, r7
 801b922:	bd80      	pop	{r7, pc}

0801b924 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801b924:	b580      	push	{r7, lr}
 801b926:	b08c      	sub	sp, #48	@ 0x30
 801b928:	af00      	add	r7, sp, #0
 801b92a:	60f8      	str	r0, [r7, #12]
 801b92c:	60b9      	str	r1, [r7, #8]
 801b92e:	607a      	str	r2, [r7, #4]
 801b930:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801b932:	68bb      	ldr	r3, [r7, #8]
 801b934:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801b936:	683b      	ldr	r3, [r7, #0]
 801b938:	2200      	movs	r2, #0
 801b93a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	f107 0210 	add.w	r2, r7, #16
 801b942:	4611      	mov	r1, r2
 801b944:	4618      	mov	r0, r3
 801b946:	f7ff fdb7 	bl	801b4b8 <validate>
 801b94a:	4603      	mov	r3, r0
 801b94c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801b950:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b954:	2b00      	cmp	r3, #0
 801b956:	d107      	bne.n	801b968 <f_write+0x44>
 801b958:	68fb      	ldr	r3, [r7, #12]
 801b95a:	7d5b      	ldrb	r3, [r3, #21]
 801b95c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801b960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b964:	2b00      	cmp	r3, #0
 801b966:	d002      	beq.n	801b96e <f_write+0x4a>
 801b968:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801b96c:	e14b      	b.n	801bc06 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b96e:	68fb      	ldr	r3, [r7, #12]
 801b970:	7d1b      	ldrb	r3, [r3, #20]
 801b972:	f003 0302 	and.w	r3, r3, #2
 801b976:	2b00      	cmp	r3, #0
 801b978:	d101      	bne.n	801b97e <f_write+0x5a>
 801b97a:	2307      	movs	r3, #7
 801b97c:	e143      	b.n	801bc06 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	699a      	ldr	r2, [r3, #24]
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	441a      	add	r2, r3
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	699b      	ldr	r3, [r3, #24]
 801b98a:	429a      	cmp	r2, r3
 801b98c:	f080 812d 	bcs.w	801bbea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	699b      	ldr	r3, [r3, #24]
 801b994:	43db      	mvns	r3, r3
 801b996:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801b998:	e127      	b.n	801bbea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	699b      	ldr	r3, [r3, #24]
 801b99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	f040 80e3 	bne.w	801bb6e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	699b      	ldr	r3, [r3, #24]
 801b9ac:	0a5b      	lsrs	r3, r3, #9
 801b9ae:	693a      	ldr	r2, [r7, #16]
 801b9b0:	8952      	ldrh	r2, [r2, #10]
 801b9b2:	3a01      	subs	r2, #1
 801b9b4:	4013      	ands	r3, r2
 801b9b6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801b9b8:	69bb      	ldr	r3, [r7, #24]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d143      	bne.n	801ba46 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	699b      	ldr	r3, [r3, #24]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d10c      	bne.n	801b9e0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	689b      	ldr	r3, [r3, #8]
 801b9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801b9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d11a      	bne.n	801ba08 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	2100      	movs	r1, #0
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f7fe f9a9 	bl	8019d2e <create_chain>
 801b9dc:	62b8      	str	r0, [r7, #40]	@ 0x28
 801b9de:	e013      	b.n	801ba08 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d007      	beq.n	801b9f8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	699b      	ldr	r3, [r3, #24]
 801b9ec:	4619      	mov	r1, r3
 801b9ee:	68f8      	ldr	r0, [r7, #12]
 801b9f0:	f7fe fa35 	bl	8019e5e <clmt_clust>
 801b9f4:	62b8      	str	r0, [r7, #40]	@ 0x28
 801b9f6:	e007      	b.n	801ba08 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801b9f8:	68fa      	ldr	r2, [r7, #12]
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	69db      	ldr	r3, [r3, #28]
 801b9fe:	4619      	mov	r1, r3
 801ba00:	4610      	mov	r0, r2
 801ba02:	f7fe f994 	bl	8019d2e <create_chain>
 801ba06:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	f000 80f2 	beq.w	801bbf4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801ba10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba12:	2b01      	cmp	r3, #1
 801ba14:	d104      	bne.n	801ba20 <f_write+0xfc>
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	2202      	movs	r2, #2
 801ba1a:	755a      	strb	r2, [r3, #21]
 801ba1c:	2302      	movs	r3, #2
 801ba1e:	e0f2      	b.n	801bc06 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ba20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba22:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba26:	d104      	bne.n	801ba32 <f_write+0x10e>
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	2201      	movs	r2, #1
 801ba2c:	755a      	strb	r2, [r3, #21]
 801ba2e:	2301      	movs	r3, #1
 801ba30:	e0e9      	b.n	801bc06 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba36:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	689b      	ldr	r3, [r3, #8]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d102      	bne.n	801ba46 <f_write+0x122>
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba44:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	7d1b      	ldrb	r3, [r3, #20]
 801ba4a:	b25b      	sxtb	r3, r3
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	da18      	bge.n	801ba82 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	7858      	ldrb	r0, [r3, #1]
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	6a1a      	ldr	r2, [r3, #32]
 801ba5e:	2301      	movs	r3, #1
 801ba60:	f7fd fbc6 	bl	80191f0 <disk_write>
 801ba64:	4603      	mov	r3, r0
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d004      	beq.n	801ba74 <f_write+0x150>
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	2201      	movs	r2, #1
 801ba6e:	755a      	strb	r2, [r3, #21]
 801ba70:	2301      	movs	r3, #1
 801ba72:	e0c8      	b.n	801bc06 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	7d1b      	ldrb	r3, [r3, #20]
 801ba78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ba7c:	b2da      	uxtb	r2, r3
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801ba82:	693a      	ldr	r2, [r7, #16]
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	69db      	ldr	r3, [r3, #28]
 801ba88:	4619      	mov	r1, r3
 801ba8a:	4610      	mov	r0, r2
 801ba8c:	f7fd ff3a 	bl	8019904 <clust2sect>
 801ba90:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801ba92:	697b      	ldr	r3, [r7, #20]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d104      	bne.n	801baa2 <f_write+0x17e>
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	2202      	movs	r2, #2
 801ba9c:	755a      	strb	r2, [r3, #21]
 801ba9e:	2302      	movs	r3, #2
 801baa0:	e0b1      	b.n	801bc06 <f_write+0x2e2>
			sect += csect;
 801baa2:	697a      	ldr	r2, [r7, #20]
 801baa4:	69bb      	ldr	r3, [r7, #24]
 801baa6:	4413      	add	r3, r2
 801baa8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	0a5b      	lsrs	r3, r3, #9
 801baae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801bab0:	6a3b      	ldr	r3, [r7, #32]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d03c      	beq.n	801bb30 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801bab6:	69ba      	ldr	r2, [r7, #24]
 801bab8:	6a3b      	ldr	r3, [r7, #32]
 801baba:	4413      	add	r3, r2
 801babc:	693a      	ldr	r2, [r7, #16]
 801babe:	8952      	ldrh	r2, [r2, #10]
 801bac0:	4293      	cmp	r3, r2
 801bac2:	d905      	bls.n	801bad0 <f_write+0x1ac>
					cc = fs->csize - csect;
 801bac4:	693b      	ldr	r3, [r7, #16]
 801bac6:	895b      	ldrh	r3, [r3, #10]
 801bac8:	461a      	mov	r2, r3
 801baca:	69bb      	ldr	r3, [r7, #24]
 801bacc:	1ad3      	subs	r3, r2, r3
 801bace:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801bad0:	693b      	ldr	r3, [r7, #16]
 801bad2:	7858      	ldrb	r0, [r3, #1]
 801bad4:	6a3b      	ldr	r3, [r7, #32]
 801bad6:	697a      	ldr	r2, [r7, #20]
 801bad8:	69f9      	ldr	r1, [r7, #28]
 801bada:	f7fd fb89 	bl	80191f0 <disk_write>
 801bade:	4603      	mov	r3, r0
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d004      	beq.n	801baee <f_write+0x1ca>
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	2201      	movs	r2, #1
 801bae8:	755a      	strb	r2, [r3, #21]
 801baea:	2301      	movs	r3, #1
 801baec:	e08b      	b.n	801bc06 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	6a1a      	ldr	r2, [r3, #32]
 801baf2:	697b      	ldr	r3, [r7, #20]
 801baf4:	1ad3      	subs	r3, r2, r3
 801baf6:	6a3a      	ldr	r2, [r7, #32]
 801baf8:	429a      	cmp	r2, r3
 801bafa:	d915      	bls.n	801bb28 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	6a1a      	ldr	r2, [r3, #32]
 801bb06:	697b      	ldr	r3, [r7, #20]
 801bb08:	1ad3      	subs	r3, r2, r3
 801bb0a:	025b      	lsls	r3, r3, #9
 801bb0c:	69fa      	ldr	r2, [r7, #28]
 801bb0e:	4413      	add	r3, r2
 801bb10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801bb14:	4619      	mov	r1, r3
 801bb16:	f7fd fc2b 	bl	8019370 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	7d1b      	ldrb	r3, [r3, #20]
 801bb1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bb22:	b2da      	uxtb	r2, r3
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801bb28:	6a3b      	ldr	r3, [r7, #32]
 801bb2a:	025b      	lsls	r3, r3, #9
 801bb2c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801bb2e:	e03f      	b.n	801bbb0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	6a1b      	ldr	r3, [r3, #32]
 801bb34:	697a      	ldr	r2, [r7, #20]
 801bb36:	429a      	cmp	r2, r3
 801bb38:	d016      	beq.n	801bb68 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801bb3a:	68fb      	ldr	r3, [r7, #12]
 801bb3c:	699a      	ldr	r2, [r3, #24]
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801bb42:	429a      	cmp	r2, r3
 801bb44:	d210      	bcs.n	801bb68 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801bb46:	693b      	ldr	r3, [r7, #16]
 801bb48:	7858      	ldrb	r0, [r3, #1]
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bb50:	2301      	movs	r3, #1
 801bb52:	697a      	ldr	r2, [r7, #20]
 801bb54:	f7fd fb2c 	bl	80191b0 <disk_read>
 801bb58:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d004      	beq.n	801bb68 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	2201      	movs	r2, #1
 801bb62:	755a      	strb	r2, [r3, #21]
 801bb64:	2301      	movs	r3, #1
 801bb66:	e04e      	b.n	801bc06 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	697a      	ldr	r2, [r7, #20]
 801bb6c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	699b      	ldr	r3, [r3, #24]
 801bb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb76:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801bb7a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801bb7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	429a      	cmp	r2, r3
 801bb82:	d901      	bls.n	801bb88 <f_write+0x264>
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	699b      	ldr	r3, [r3, #24]
 801bb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb96:	4413      	add	r3, r2
 801bb98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb9a:	69f9      	ldr	r1, [r7, #28]
 801bb9c:	4618      	mov	r0, r3
 801bb9e:	f7fd fbe7 	bl	8019370 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	7d1b      	ldrb	r3, [r3, #20]
 801bba6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801bbaa:	b2da      	uxtb	r2, r3
 801bbac:	68fb      	ldr	r3, [r7, #12]
 801bbae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801bbb0:	69fa      	ldr	r2, [r7, #28]
 801bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbb4:	4413      	add	r3, r2
 801bbb6:	61fb      	str	r3, [r7, #28]
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	699a      	ldr	r2, [r3, #24]
 801bbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbbe:	441a      	add	r2, r3
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	619a      	str	r2, [r3, #24]
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	68da      	ldr	r2, [r3, #12]
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	699b      	ldr	r3, [r3, #24]
 801bbcc:	429a      	cmp	r2, r3
 801bbce:	bf38      	it	cc
 801bbd0:	461a      	movcc	r2, r3
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	60da      	str	r2, [r3, #12]
 801bbd6:	683b      	ldr	r3, [r7, #0]
 801bbd8:	681a      	ldr	r2, [r3, #0]
 801bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbdc:	441a      	add	r2, r3
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	601a      	str	r2, [r3, #0]
 801bbe2:	687a      	ldr	r2, [r7, #4]
 801bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbe6:	1ad3      	subs	r3, r2, r3
 801bbe8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	f47f aed4 	bne.w	801b99a <f_write+0x76>
 801bbf2:	e000      	b.n	801bbf6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801bbf4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	7d1b      	ldrb	r3, [r3, #20]
 801bbfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bbfe:	b2da      	uxtb	r2, r3
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801bc04:	2300      	movs	r3, #0
}
 801bc06:	4618      	mov	r0, r3
 801bc08:	3730      	adds	r7, #48	@ 0x30
 801bc0a:	46bd      	mov	sp, r7
 801bc0c:	bd80      	pop	{r7, pc}

0801bc0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801bc0e:	b580      	push	{r7, lr}
 801bc10:	b086      	sub	sp, #24
 801bc12:	af00      	add	r7, sp, #0
 801bc14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	f107 0208 	add.w	r2, r7, #8
 801bc1c:	4611      	mov	r1, r2
 801bc1e:	4618      	mov	r0, r3
 801bc20:	f7ff fc4a 	bl	801b4b8 <validate>
 801bc24:	4603      	mov	r3, r0
 801bc26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bc28:	7dfb      	ldrb	r3, [r7, #23]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d168      	bne.n	801bd00 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	7d1b      	ldrb	r3, [r3, #20]
 801bc32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d062      	beq.n	801bd00 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	7d1b      	ldrb	r3, [r3, #20]
 801bc3e:	b25b      	sxtb	r3, r3
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	da15      	bge.n	801bc70 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801bc44:	68bb      	ldr	r3, [r7, #8]
 801bc46:	7858      	ldrb	r0, [r3, #1]
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	6a1a      	ldr	r2, [r3, #32]
 801bc52:	2301      	movs	r3, #1
 801bc54:	f7fd facc 	bl	80191f0 <disk_write>
 801bc58:	4603      	mov	r3, r0
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d001      	beq.n	801bc62 <f_sync+0x54>
 801bc5e:	2301      	movs	r3, #1
 801bc60:	e04f      	b.n	801bd02 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	7d1b      	ldrb	r3, [r3, #20]
 801bc66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801bc6a:	b2da      	uxtb	r2, r3
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801bc70:	f7f7 fe3a 	bl	80138e8 <get_fattime>
 801bc74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801bc76:	68ba      	ldr	r2, [r7, #8]
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc7c:	4619      	mov	r1, r3
 801bc7e:	4610      	mov	r0, r2
 801bc80:	f7fd fda4 	bl	80197cc <move_window>
 801bc84:	4603      	mov	r3, r0
 801bc86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801bc88:	7dfb      	ldrb	r3, [r7, #23]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d138      	bne.n	801bd00 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bc92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	330b      	adds	r3, #11
 801bc98:	781a      	ldrb	r2, [r3, #0]
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	330b      	adds	r3, #11
 801bc9e:	f042 0220 	orr.w	r2, r2, #32
 801bca2:	b2d2      	uxtb	r2, r2
 801bca4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	6818      	ldr	r0, [r3, #0]
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	689b      	ldr	r3, [r3, #8]
 801bcae:	461a      	mov	r2, r3
 801bcb0:	68f9      	ldr	r1, [r7, #12]
 801bcb2:	f7fe faae 	bl	801a212 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801bcb6:	68fb      	ldr	r3, [r7, #12]
 801bcb8:	f103 021c 	add.w	r2, r3, #28
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	68db      	ldr	r3, [r3, #12]
 801bcc0:	4619      	mov	r1, r3
 801bcc2:	4610      	mov	r0, r2
 801bcc4:	f7fd fb28 	bl	8019318 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	3316      	adds	r3, #22
 801bccc:	6939      	ldr	r1, [r7, #16]
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f7fd fb22 	bl	8019318 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	3312      	adds	r3, #18
 801bcd8:	2100      	movs	r1, #0
 801bcda:	4618      	mov	r0, r3
 801bcdc:	f7fd fb01 	bl	80192e2 <st_word>
					fs->wflag = 1;
 801bce0:	68bb      	ldr	r3, [r7, #8]
 801bce2:	2201      	movs	r2, #1
 801bce4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801bce6:	68bb      	ldr	r3, [r7, #8]
 801bce8:	4618      	mov	r0, r3
 801bcea:	f7fd fd9d 	bl	8019828 <sync_fs>
 801bcee:	4603      	mov	r3, r0
 801bcf0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	7d1b      	ldrb	r3, [r3, #20]
 801bcf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bcfa:	b2da      	uxtb	r2, r3
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801bd00:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd02:	4618      	mov	r0, r3
 801bd04:	3718      	adds	r7, #24
 801bd06:	46bd      	mov	sp, r7
 801bd08:	bd80      	pop	{r7, pc}

0801bd0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801bd0a:	b580      	push	{r7, lr}
 801bd0c:	b084      	sub	sp, #16
 801bd0e:	af00      	add	r7, sp, #0
 801bd10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801bd12:	6878      	ldr	r0, [r7, #4]
 801bd14:	f7ff ff7b 	bl	801bc0e <f_sync>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801bd1c:	7bfb      	ldrb	r3, [r7, #15]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d118      	bne.n	801bd54 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	f107 0208 	add.w	r2, r7, #8
 801bd28:	4611      	mov	r1, r2
 801bd2a:	4618      	mov	r0, r3
 801bd2c:	f7ff fbc4 	bl	801b4b8 <validate>
 801bd30:	4603      	mov	r3, r0
 801bd32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801bd34:	7bfb      	ldrb	r3, [r7, #15]
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d10c      	bne.n	801bd54 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	691b      	ldr	r3, [r3, #16]
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f7fd fca0 	bl	8019684 <dec_lock>
 801bd44:	4603      	mov	r3, r0
 801bd46:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801bd48:	7bfb      	ldrb	r3, [r7, #15]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d102      	bne.n	801bd54 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	2200      	movs	r2, #0
 801bd52:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801bd54:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd56:	4618      	mov	r0, r3
 801bd58:	3710      	adds	r7, #16
 801bd5a:	46bd      	mov	sp, r7
 801bd5c:	bd80      	pop	{r7, pc}

0801bd5e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801bd5e:	b580      	push	{r7, lr}
 801bd60:	b090      	sub	sp, #64	@ 0x40
 801bd62:	af00      	add	r7, sp, #0
 801bd64:	6078      	str	r0, [r7, #4]
 801bd66:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801bd68:	f107 0108 	add.w	r1, r7, #8
 801bd6c:	1d3b      	adds	r3, r7, #4
 801bd6e:	2200      	movs	r2, #0
 801bd70:	4618      	mov	r0, r3
 801bd72:	f7ff f951 	bl	801b018 <find_volume>
 801bd76:	4603      	mov	r3, r0
 801bd78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801bd7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d11f      	bne.n	801bdc4 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801bd84:	687a      	ldr	r2, [r7, #4]
 801bd86:	f107 0308 	add.w	r3, r7, #8
 801bd8a:	4611      	mov	r1, r2
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	f7ff f837 	bl	801ae00 <follow_path>
 801bd92:	4603      	mov	r3, r0
 801bd94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801bd98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d111      	bne.n	801bdc4 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801bda0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bda4:	b25b      	sxtb	r3, r3
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	da03      	bge.n	801bdb2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801bdaa:	2306      	movs	r3, #6
 801bdac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801bdb0:	e008      	b.n	801bdc4 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801bdb2:	683b      	ldr	r3, [r7, #0]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d005      	beq.n	801bdc4 <f_stat+0x66>
 801bdb8:	f107 0308 	add.w	r3, r7, #8
 801bdbc:	6839      	ldr	r1, [r7, #0]
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	f7fe fd88 	bl	801a8d4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801bdc4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801bdc8:	4618      	mov	r0, r3
 801bdca:	3740      	adds	r7, #64	@ 0x40
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}

0801bdd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801bdd0:	b480      	push	{r7}
 801bdd2:	b087      	sub	sp, #28
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	60f8      	str	r0, [r7, #12]
 801bdd8:	60b9      	str	r1, [r7, #8]
 801bdda:	4613      	mov	r3, r2
 801bddc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801bdde:	2301      	movs	r3, #1
 801bde0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801bde2:	2300      	movs	r3, #0
 801bde4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801bde6:	4b1f      	ldr	r3, [pc, #124]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801bde8:	7a5b      	ldrb	r3, [r3, #9]
 801bdea:	b2db      	uxtb	r3, r3
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d131      	bne.n	801be54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801bdf0:	4b1c      	ldr	r3, [pc, #112]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801bdf2:	7a5b      	ldrb	r3, [r3, #9]
 801bdf4:	b2db      	uxtb	r3, r3
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	4b1a      	ldr	r3, [pc, #104]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801bdfa:	2100      	movs	r1, #0
 801bdfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801bdfe:	4b19      	ldr	r3, [pc, #100]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801be00:	7a5b      	ldrb	r3, [r3, #9]
 801be02:	b2db      	uxtb	r3, r3
 801be04:	4a17      	ldr	r2, [pc, #92]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801be06:	009b      	lsls	r3, r3, #2
 801be08:	4413      	add	r3, r2
 801be0a:	68fa      	ldr	r2, [r7, #12]
 801be0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801be0e:	4b15      	ldr	r3, [pc, #84]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801be10:	7a5b      	ldrb	r3, [r3, #9]
 801be12:	b2db      	uxtb	r3, r3
 801be14:	461a      	mov	r2, r3
 801be16:	4b13      	ldr	r3, [pc, #76]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801be18:	4413      	add	r3, r2
 801be1a:	79fa      	ldrb	r2, [r7, #7]
 801be1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801be1e:	4b11      	ldr	r3, [pc, #68]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801be20:	7a5b      	ldrb	r3, [r3, #9]
 801be22:	b2db      	uxtb	r3, r3
 801be24:	1c5a      	adds	r2, r3, #1
 801be26:	b2d1      	uxtb	r1, r2
 801be28:	4a0e      	ldr	r2, [pc, #56]	@ (801be64 <FATFS_LinkDriverEx+0x94>)
 801be2a:	7251      	strb	r1, [r2, #9]
 801be2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801be2e:	7dbb      	ldrb	r3, [r7, #22]
 801be30:	3330      	adds	r3, #48	@ 0x30
 801be32:	b2da      	uxtb	r2, r3
 801be34:	68bb      	ldr	r3, [r7, #8]
 801be36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801be38:	68bb      	ldr	r3, [r7, #8]
 801be3a:	3301      	adds	r3, #1
 801be3c:	223a      	movs	r2, #58	@ 0x3a
 801be3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801be40:	68bb      	ldr	r3, [r7, #8]
 801be42:	3302      	adds	r3, #2
 801be44:	222f      	movs	r2, #47	@ 0x2f
 801be46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	3303      	adds	r3, #3
 801be4c:	2200      	movs	r2, #0
 801be4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801be50:	2300      	movs	r3, #0
 801be52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801be54:	7dfb      	ldrb	r3, [r7, #23]
}
 801be56:	4618      	mov	r0, r3
 801be58:	371c      	adds	r7, #28
 801be5a:	46bd      	mov	sp, r7
 801be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be60:	4770      	bx	lr
 801be62:	bf00      	nop
 801be64:	20001d90 	.word	0x20001d90

0801be68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b082      	sub	sp, #8
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	6078      	str	r0, [r7, #4]
 801be70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801be72:	2200      	movs	r2, #0
 801be74:	6839      	ldr	r1, [r7, #0]
 801be76:	6878      	ldr	r0, [r7, #4]
 801be78:	f7ff ffaa 	bl	801bdd0 <FATFS_LinkDriverEx>
 801be7c:	4603      	mov	r3, r0
}
 801be7e:	4618      	mov	r0, r3
 801be80:	3708      	adds	r7, #8
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}
	...

0801be88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801be88:	b480      	push	{r7}
 801be8a:	b085      	sub	sp, #20
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	4603      	mov	r3, r0
 801be90:	6039      	str	r1, [r7, #0]
 801be92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801be94:	88fb      	ldrh	r3, [r7, #6]
 801be96:	2b7f      	cmp	r3, #127	@ 0x7f
 801be98:	d802      	bhi.n	801bea0 <ff_convert+0x18>
		c = chr;
 801be9a:	88fb      	ldrh	r3, [r7, #6]
 801be9c:	81fb      	strh	r3, [r7, #14]
 801be9e:	e025      	b.n	801beec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801bea0:	683b      	ldr	r3, [r7, #0]
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d00b      	beq.n	801bebe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801bea6:	88fb      	ldrh	r3, [r7, #6]
 801bea8:	2bff      	cmp	r3, #255	@ 0xff
 801beaa:	d805      	bhi.n	801beb8 <ff_convert+0x30>
 801beac:	88fb      	ldrh	r3, [r7, #6]
 801beae:	3b80      	subs	r3, #128	@ 0x80
 801beb0:	4a12      	ldr	r2, [pc, #72]	@ (801befc <ff_convert+0x74>)
 801beb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801beb6:	e000      	b.n	801beba <ff_convert+0x32>
 801beb8:	2300      	movs	r3, #0
 801beba:	81fb      	strh	r3, [r7, #14]
 801bebc:	e016      	b.n	801beec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801bebe:	2300      	movs	r3, #0
 801bec0:	81fb      	strh	r3, [r7, #14]
 801bec2:	e009      	b.n	801bed8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801bec4:	89fb      	ldrh	r3, [r7, #14]
 801bec6:	4a0d      	ldr	r2, [pc, #52]	@ (801befc <ff_convert+0x74>)
 801bec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801becc:	88fa      	ldrh	r2, [r7, #6]
 801bece:	429a      	cmp	r2, r3
 801bed0:	d006      	beq.n	801bee0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801bed2:	89fb      	ldrh	r3, [r7, #14]
 801bed4:	3301      	adds	r3, #1
 801bed6:	81fb      	strh	r3, [r7, #14]
 801bed8:	89fb      	ldrh	r3, [r7, #14]
 801beda:	2b7f      	cmp	r3, #127	@ 0x7f
 801bedc:	d9f2      	bls.n	801bec4 <ff_convert+0x3c>
 801bede:	e000      	b.n	801bee2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801bee0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801bee2:	89fb      	ldrh	r3, [r7, #14]
 801bee4:	3380      	adds	r3, #128	@ 0x80
 801bee6:	b29b      	uxth	r3, r3
 801bee8:	b2db      	uxtb	r3, r3
 801beea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801beec:	89fb      	ldrh	r3, [r7, #14]
}
 801beee:	4618      	mov	r0, r3
 801bef0:	3714      	adds	r7, #20
 801bef2:	46bd      	mov	sp, r7
 801bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bef8:	4770      	bx	lr
 801befa:	bf00      	nop
 801befc:	08025080 	.word	0x08025080

0801bf00 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801bf00:	b480      	push	{r7}
 801bf02:	b087      	sub	sp, #28
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	4603      	mov	r3, r0
 801bf08:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801bf0a:	88fb      	ldrh	r3, [r7, #6]
 801bf0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bf10:	d201      	bcs.n	801bf16 <ff_wtoupper+0x16>
 801bf12:	4b3e      	ldr	r3, [pc, #248]	@ (801c00c <ff_wtoupper+0x10c>)
 801bf14:	e000      	b.n	801bf18 <ff_wtoupper+0x18>
 801bf16:	4b3e      	ldr	r3, [pc, #248]	@ (801c010 <ff_wtoupper+0x110>)
 801bf18:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801bf1a:	697b      	ldr	r3, [r7, #20]
 801bf1c:	1c9a      	adds	r2, r3, #2
 801bf1e:	617a      	str	r2, [r7, #20]
 801bf20:	881b      	ldrh	r3, [r3, #0]
 801bf22:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801bf24:	8a7b      	ldrh	r3, [r7, #18]
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d068      	beq.n	801bffc <ff_wtoupper+0xfc>
 801bf2a:	88fa      	ldrh	r2, [r7, #6]
 801bf2c:	8a7b      	ldrh	r3, [r7, #18]
 801bf2e:	429a      	cmp	r2, r3
 801bf30:	d364      	bcc.n	801bffc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801bf32:	697b      	ldr	r3, [r7, #20]
 801bf34:	1c9a      	adds	r2, r3, #2
 801bf36:	617a      	str	r2, [r7, #20]
 801bf38:	881b      	ldrh	r3, [r3, #0]
 801bf3a:	823b      	strh	r3, [r7, #16]
 801bf3c:	8a3b      	ldrh	r3, [r7, #16]
 801bf3e:	0a1b      	lsrs	r3, r3, #8
 801bf40:	81fb      	strh	r3, [r7, #14]
 801bf42:	8a3b      	ldrh	r3, [r7, #16]
 801bf44:	b2db      	uxtb	r3, r3
 801bf46:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801bf48:	88fa      	ldrh	r2, [r7, #6]
 801bf4a:	8a79      	ldrh	r1, [r7, #18]
 801bf4c:	8a3b      	ldrh	r3, [r7, #16]
 801bf4e:	440b      	add	r3, r1
 801bf50:	429a      	cmp	r2, r3
 801bf52:	da49      	bge.n	801bfe8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801bf54:	89fb      	ldrh	r3, [r7, #14]
 801bf56:	2b08      	cmp	r3, #8
 801bf58:	d84f      	bhi.n	801bffa <ff_wtoupper+0xfa>
 801bf5a:	a201      	add	r2, pc, #4	@ (adr r2, 801bf60 <ff_wtoupper+0x60>)
 801bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf60:	0801bf85 	.word	0x0801bf85
 801bf64:	0801bf97 	.word	0x0801bf97
 801bf68:	0801bfad 	.word	0x0801bfad
 801bf6c:	0801bfb5 	.word	0x0801bfb5
 801bf70:	0801bfbd 	.word	0x0801bfbd
 801bf74:	0801bfc5 	.word	0x0801bfc5
 801bf78:	0801bfcd 	.word	0x0801bfcd
 801bf7c:	0801bfd5 	.word	0x0801bfd5
 801bf80:	0801bfdd 	.word	0x0801bfdd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801bf84:	88fa      	ldrh	r2, [r7, #6]
 801bf86:	8a7b      	ldrh	r3, [r7, #18]
 801bf88:	1ad3      	subs	r3, r2, r3
 801bf8a:	005b      	lsls	r3, r3, #1
 801bf8c:	697a      	ldr	r2, [r7, #20]
 801bf8e:	4413      	add	r3, r2
 801bf90:	881b      	ldrh	r3, [r3, #0]
 801bf92:	80fb      	strh	r3, [r7, #6]
 801bf94:	e027      	b.n	801bfe6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801bf96:	88fa      	ldrh	r2, [r7, #6]
 801bf98:	8a7b      	ldrh	r3, [r7, #18]
 801bf9a:	1ad3      	subs	r3, r2, r3
 801bf9c:	b29b      	uxth	r3, r3
 801bf9e:	f003 0301 	and.w	r3, r3, #1
 801bfa2:	b29b      	uxth	r3, r3
 801bfa4:	88fa      	ldrh	r2, [r7, #6]
 801bfa6:	1ad3      	subs	r3, r2, r3
 801bfa8:	80fb      	strh	r3, [r7, #6]
 801bfaa:	e01c      	b.n	801bfe6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801bfac:	88fb      	ldrh	r3, [r7, #6]
 801bfae:	3b10      	subs	r3, #16
 801bfb0:	80fb      	strh	r3, [r7, #6]
 801bfb2:	e018      	b.n	801bfe6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801bfb4:	88fb      	ldrh	r3, [r7, #6]
 801bfb6:	3b20      	subs	r3, #32
 801bfb8:	80fb      	strh	r3, [r7, #6]
 801bfba:	e014      	b.n	801bfe6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801bfbc:	88fb      	ldrh	r3, [r7, #6]
 801bfbe:	3b30      	subs	r3, #48	@ 0x30
 801bfc0:	80fb      	strh	r3, [r7, #6]
 801bfc2:	e010      	b.n	801bfe6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801bfc4:	88fb      	ldrh	r3, [r7, #6]
 801bfc6:	3b1a      	subs	r3, #26
 801bfc8:	80fb      	strh	r3, [r7, #6]
 801bfca:	e00c      	b.n	801bfe6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801bfcc:	88fb      	ldrh	r3, [r7, #6]
 801bfce:	3308      	adds	r3, #8
 801bfd0:	80fb      	strh	r3, [r7, #6]
 801bfd2:	e008      	b.n	801bfe6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801bfd4:	88fb      	ldrh	r3, [r7, #6]
 801bfd6:	3b50      	subs	r3, #80	@ 0x50
 801bfd8:	80fb      	strh	r3, [r7, #6]
 801bfda:	e004      	b.n	801bfe6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801bfdc:	88fb      	ldrh	r3, [r7, #6]
 801bfde:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801bfe2:	80fb      	strh	r3, [r7, #6]
 801bfe4:	bf00      	nop
			}
			break;
 801bfe6:	e008      	b.n	801bffa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801bfe8:	89fb      	ldrh	r3, [r7, #14]
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d195      	bne.n	801bf1a <ff_wtoupper+0x1a>
 801bfee:	8a3b      	ldrh	r3, [r7, #16]
 801bff0:	005b      	lsls	r3, r3, #1
 801bff2:	697a      	ldr	r2, [r7, #20]
 801bff4:	4413      	add	r3, r2
 801bff6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801bff8:	e78f      	b.n	801bf1a <ff_wtoupper+0x1a>
			break;
 801bffa:	bf00      	nop
	}

	return chr;
 801bffc:	88fb      	ldrh	r3, [r7, #6]
}
 801bffe:	4618      	mov	r0, r3
 801c000:	371c      	adds	r7, #28
 801c002:	46bd      	mov	sp, r7
 801c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c008:	4770      	bx	lr
 801c00a:	bf00      	nop
 801c00c:	08025180 	.word	0x08025180
 801c010:	08025374 	.word	0x08025374

0801c014 <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801c014:	b580      	push	{r7, lr}
 801c016:	b082      	sub	sp, #8
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801c01c:	2201      	movs	r2, #1
 801c01e:	6879      	ldr	r1, [r7, #4]
 801c020:	480e      	ldr	r0, [pc, #56]	@ (801c05c <Mount_SD+0x48>)
 801c022:	f7ff fa7f 	bl	801b524 <f_mount>
 801c026:	4603      	mov	r3, r0
 801c028:	461a      	mov	r2, r3
 801c02a:	4b0d      	ldr	r3, [pc, #52]	@ (801c060 <Mount_SD+0x4c>)
 801c02c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c02e:	4b0c      	ldr	r3, [pc, #48]	@ (801c060 <Mount_SD+0x4c>)
 801c030:	781b      	ldrb	r3, [r3, #0]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d006      	beq.n	801c044 <Mount_SD+0x30>
		if (sdioPrints)
 801c036:	2300      	movs	r3, #0
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d009      	beq.n	801c050 <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801c03c:	4809      	ldr	r0, [pc, #36]	@ (801c064 <Mount_SD+0x50>)
 801c03e:	f002 fd03 	bl	801ea48 <puts>
 801c042:	e005      	b.n	801c050 <Mount_SD+0x3c>
	} else if (sdioPrints)
 801c044:	2300      	movs	r3, #0
 801c046:	2b00      	cmp	r3, #0
 801c048:	d002      	beq.n	801c050 <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801c04a:	4807      	ldr	r0, [pc, #28]	@ (801c068 <Mount_SD+0x54>)
 801c04c:	f002 fcfc 	bl	801ea48 <puts>

	return fresult;
 801c050:	4b03      	ldr	r3, [pc, #12]	@ (801c060 <Mount_SD+0x4c>)
 801c052:	781b      	ldrb	r3, [r3, #0]
}
 801c054:	4618      	mov	r0, r3
 801c056:	3708      	adds	r7, #8
 801c058:	46bd      	mov	sp, r7
 801c05a:	bd80      	pop	{r7, pc}
 801c05c:	20001d9c 	.word	0x20001d9c
 801c060:	20002318 	.word	0x20002318
 801c064:	0802470c 	.word	0x0802470c
 801c068:	0802472c 	.word	0x0802472c

0801c06c <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801c06c:	b580      	push	{r7, lr}
 801c06e:	b082      	sub	sp, #8
 801c070:	af00      	add	r7, sp, #0
 801c072:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801c074:	2201      	movs	r2, #1
 801c076:	6879      	ldr	r1, [r7, #4]
 801c078:	2000      	movs	r0, #0
 801c07a:	f7ff fa53 	bl	801b524 <f_mount>
 801c07e:	4603      	mov	r3, r0
 801c080:	461a      	mov	r2, r3
 801c082:	4b0b      	ldr	r3, [pc, #44]	@ (801c0b0 <Unmount_SD+0x44>)
 801c084:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c086:	4b0a      	ldr	r3, [pc, #40]	@ (801c0b0 <Unmount_SD+0x44>)
 801c088:	781b      	ldrb	r3, [r3, #0]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d106      	bne.n	801c09c <Unmount_SD+0x30>
		if (sdioPrints)
 801c08e:	2300      	movs	r3, #0
 801c090:	2b00      	cmp	r3, #0
 801c092:	d009      	beq.n	801c0a8 <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801c094:	4807      	ldr	r0, [pc, #28]	@ (801c0b4 <Unmount_SD+0x48>)
 801c096:	f002 fcd7 	bl	801ea48 <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801c09a:	e005      	b.n	801c0a8 <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801c09c:	2300      	movs	r3, #0
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d002      	beq.n	801c0a8 <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801c0a2:	4805      	ldr	r0, [pc, #20]	@ (801c0b8 <Unmount_SD+0x4c>)
 801c0a4:	f002 fcd0 	bl	801ea48 <puts>
}
 801c0a8:	bf00      	nop
 801c0aa:	3708      	adds	r7, #8
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bd80      	pop	{r7, pc}
 801c0b0:	20002318 	.word	0x20002318
 801c0b4:	0802474c 	.word	0x0802474c
 801c0b8:	08024770 	.word	0x08024770

0801c0bc <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801c0bc:	b580      	push	{r7, lr}
 801c0be:	b0a8      	sub	sp, #160	@ 0xa0
 801c0c0:	af00      	add	r7, sp, #0
 801c0c2:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801c0c4:	4941      	ldr	r1, [pc, #260]	@ (801c1cc <Create_File+0x110>)
 801c0c6:	6878      	ldr	r0, [r7, #4]
 801c0c8:	f7ff fe49 	bl	801bd5e <f_stat>
 801c0cc:	4603      	mov	r3, r0
 801c0ce:	461a      	mov	r2, r3
 801c0d0:	4b3f      	ldr	r3, [pc, #252]	@ (801c1d0 <Create_File+0x114>)
 801c0d2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801c0d4:	4b3e      	ldr	r3, [pc, #248]	@ (801c1d0 <Create_File+0x114>)
 801c0d6:	781b      	ldrb	r3, [r3, #0]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d114      	bne.n	801c106 <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801c0dc:	4b3d      	ldr	r3, [pc, #244]	@ (801c1d4 <Create_File+0x118>)
 801c0de:	2201      	movs	r2, #1
 801c0e0:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801c0e2:	f107 0308 	add.w	r3, r7, #8
 801c0e6:	687a      	ldr	r2, [r7, #4]
 801c0e8:	493b      	ldr	r1, [pc, #236]	@ (801c1d8 <Create_File+0x11c>)
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	f002 fcb4 	bl	801ea58 <siprintf>
				name);
		if (sdioPrints)
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d004      	beq.n	801c100 <Create_File+0x44>
			printf(buf);
 801c0f6:	f107 0308 	add.w	r3, r7, #8
 801c0fa:	4618      	mov	r0, r3
 801c0fc:	f002 fc3c 	bl	801e978 <iprintf>

		return fresult;
 801c100:	4b33      	ldr	r3, [pc, #204]	@ (801c1d0 <Create_File+0x114>)
 801c102:	781b      	ldrb	r3, [r3, #0]
 801c104:	e05d      	b.n	801c1c2 <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801c106:	220b      	movs	r2, #11
 801c108:	6879      	ldr	r1, [r7, #4]
 801c10a:	4834      	ldr	r0, [pc, #208]	@ (801c1dc <Create_File+0x120>)
 801c10c:	f7ff fa50 	bl	801b5b0 <f_open>
 801c110:	4603      	mov	r3, r0
 801c112:	461a      	mov	r2, r3
 801c114:	4b2e      	ldr	r3, [pc, #184]	@ (801c1d0 <Create_File+0x114>)
 801c116:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c118:	4b2d      	ldr	r3, [pc, #180]	@ (801c1d0 <Create_File+0x114>)
 801c11a:	781b      	ldrb	r3, [r3, #0]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d013      	beq.n	801c148 <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801c120:	4b2b      	ldr	r3, [pc, #172]	@ (801c1d0 <Create_File+0x114>)
 801c122:	781b      	ldrb	r3, [r3, #0]
 801c124:	461a      	mov	r2, r3
 801c126:	f107 0008 	add.w	r0, r7, #8
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	492c      	ldr	r1, [pc, #176]	@ (801c1e0 <Create_File+0x124>)
 801c12e:	f002 fc93 	bl	801ea58 <siprintf>
					name);
			if (sdioPrints)
 801c132:	2300      	movs	r3, #0
 801c134:	2b00      	cmp	r3, #0
 801c136:	d004      	beq.n	801c142 <Create_File+0x86>
				printf(buf);
 801c138:	f107 0308 	add.w	r3, r7, #8
 801c13c:	4618      	mov	r0, r3
 801c13e:	f002 fc1b 	bl	801e978 <iprintf>

			return fresult;
 801c142:	4b23      	ldr	r3, [pc, #140]	@ (801c1d0 <Create_File+0x114>)
 801c144:	781b      	ldrb	r3, [r3, #0]
 801c146:	e03c      	b.n	801c1c2 <Create_File+0x106>
		} else {

			sprintf(buf,
 801c148:	f107 0308 	add.w	r3, r7, #8
 801c14c:	687a      	ldr	r2, [r7, #4]
 801c14e:	4925      	ldr	r1, [pc, #148]	@ (801c1e4 <Create_File+0x128>)
 801c150:	4618      	mov	r0, r3
 801c152:	f002 fc81 	bl	801ea58 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801c156:	2300      	movs	r3, #0
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d004      	beq.n	801c166 <Create_File+0xaa>
				printf(buf);
 801c15c:	f107 0308 	add.w	r3, r7, #8
 801c160:	4618      	mov	r0, r3
 801c162:	f002 fc09 	bl	801e978 <iprintf>

		}

		fresult = f_close(&fil);
 801c166:	481d      	ldr	r0, [pc, #116]	@ (801c1dc <Create_File+0x120>)
 801c168:	f7ff fdcf 	bl	801bd0a <f_close>
 801c16c:	4603      	mov	r3, r0
 801c16e:	461a      	mov	r2, r3
 801c170:	4b17      	ldr	r3, [pc, #92]	@ (801c1d0 <Create_File+0x114>)
 801c172:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c174:	4b16      	ldr	r3, [pc, #88]	@ (801c1d0 <Create_File+0x114>)
 801c176:	781b      	ldrb	r3, [r3, #0]
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d011      	beq.n	801c1a0 <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801c17c:	4b14      	ldr	r3, [pc, #80]	@ (801c1d0 <Create_File+0x114>)
 801c17e:	781b      	ldrb	r3, [r3, #0]
 801c180:	461a      	mov	r2, r3
 801c182:	f107 0008 	add.w	r0, r7, #8
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	4917      	ldr	r1, [pc, #92]	@ (801c1e8 <Create_File+0x12c>)
 801c18a:	f002 fc65 	bl	801ea58 <siprintf>
			if (sdioPrints)
 801c18e:	2300      	movs	r3, #0
 801c190:	2b00      	cmp	r3, #0
 801c192:	d014      	beq.n	801c1be <Create_File+0x102>
				printf(buf);
 801c194:	f107 0308 	add.w	r3, r7, #8
 801c198:	4618      	mov	r0, r3
 801c19a:	f002 fbed 	bl	801e978 <iprintf>
 801c19e:	e00e      	b.n	801c1be <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c1a0:	f107 0308 	add.w	r3, r7, #8
 801c1a4:	687a      	ldr	r2, [r7, #4]
 801c1a6:	4911      	ldr	r1, [pc, #68]	@ (801c1ec <Create_File+0x130>)
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	f002 fc55 	bl	801ea58 <siprintf>
			if (sdioPrints)
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d004      	beq.n	801c1be <Create_File+0x102>
				printf(buf);
 801c1b4:	f107 0308 	add.w	r3, r7, #8
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f002 fbdd 	bl	801e978 <iprintf>

		}
	}
	return fresult;
 801c1be:	4b04      	ldr	r3, [pc, #16]	@ (801c1d0 <Create_File+0x114>)
 801c1c0:	781b      	ldrb	r3, [r3, #0]
}
 801c1c2:	4618      	mov	r0, r3
 801c1c4:	37a0      	adds	r7, #160	@ 0xa0
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	bf00      	nop
 801c1cc:	20002200 	.word	0x20002200
 801c1d0:	20002318 	.word	0x20002318
 801c1d4:	20002321 	.word	0x20002321
 801c1d8:	08024934 	.word	0x08024934
 801c1dc:	20001fd0 	.word	0x20001fd0
 801c1e0:	08024968 	.word	0x08024968
 801c1e4:	08024990 	.word	0x08024990
 801c1e8:	080249d0 	.word	0x080249d0
 801c1ec:	08024914 	.word	0x08024914

0801c1f0 <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b0a8      	sub	sp, #160	@ 0xa0
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	6078      	str	r0, [r7, #4]
 801c1f8:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801c1fa:	4951      	ldr	r1, [pc, #324]	@ (801c340 <Update_File+0x150>)
 801c1fc:	6878      	ldr	r0, [r7, #4]
 801c1fe:	f7ff fdae 	bl	801bd5e <f_stat>
 801c202:	4603      	mov	r3, r0
 801c204:	461a      	mov	r2, r3
 801c206:	4b4f      	ldr	r3, [pc, #316]	@ (801c344 <Update_File+0x154>)
 801c208:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801c20a:	4b4e      	ldr	r3, [pc, #312]	@ (801c344 <Update_File+0x154>)
 801c20c:	781b      	ldrb	r3, [r3, #0]
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d011      	beq.n	801c236 <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801c212:	f107 0308 	add.w	r3, r7, #8
 801c216:	687a      	ldr	r2, [r7, #4]
 801c218:	494b      	ldr	r1, [pc, #300]	@ (801c348 <Update_File+0x158>)
 801c21a:	4618      	mov	r0, r3
 801c21c:	f002 fc1c 	bl	801ea58 <siprintf>
		if (sdioPrints)
 801c220:	2300      	movs	r3, #0
 801c222:	2b00      	cmp	r3, #0
 801c224:	d004      	beq.n	801c230 <Update_File+0x40>
			printf(buf);
 801c226:	f107 0308 	add.w	r3, r7, #8
 801c22a:	4618      	mov	r0, r3
 801c22c:	f002 fba4 	bl	801e978 <iprintf>

		return fresult;
 801c230:	4b44      	ldr	r3, [pc, #272]	@ (801c344 <Update_File+0x154>)
 801c232:	781b      	ldrb	r3, [r3, #0]
 801c234:	e080      	b.n	801c338 <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801c236:	2232      	movs	r2, #50	@ 0x32
 801c238:	6879      	ldr	r1, [r7, #4]
 801c23a:	4844      	ldr	r0, [pc, #272]	@ (801c34c <Update_File+0x15c>)
 801c23c:	f7ff f9b8 	bl	801b5b0 <f_open>
 801c240:	4603      	mov	r3, r0
 801c242:	461a      	mov	r2, r3
 801c244:	4b3f      	ldr	r3, [pc, #252]	@ (801c344 <Update_File+0x154>)
 801c246:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c248:	4b3e      	ldr	r3, [pc, #248]	@ (801c344 <Update_File+0x154>)
 801c24a:	781b      	ldrb	r3, [r3, #0]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d013      	beq.n	801c278 <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801c250:	4b3c      	ldr	r3, [pc, #240]	@ (801c344 <Update_File+0x154>)
 801c252:	781b      	ldrb	r3, [r3, #0]
 801c254:	461a      	mov	r2, r3
 801c256:	f107 0008 	add.w	r0, r7, #8
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	493c      	ldr	r1, [pc, #240]	@ (801c350 <Update_File+0x160>)
 801c25e:	f002 fbfb 	bl	801ea58 <siprintf>
					name);
			if (sdioPrints)
 801c262:	2300      	movs	r3, #0
 801c264:	2b00      	cmp	r3, #0
 801c266:	d004      	beq.n	801c272 <Update_File+0x82>
				printf(buf);
 801c268:	f107 0308 	add.w	r3, r7, #8
 801c26c:	4618      	mov	r0, r3
 801c26e:	f002 fb83 	bl	801e978 <iprintf>

			return fresult;
 801c272:	4b34      	ldr	r3, [pc, #208]	@ (801c344 <Update_File+0x154>)
 801c274:	781b      	ldrb	r3, [r3, #0]
 801c276:	e05f      	b.n	801c338 <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801c278:	6838      	ldr	r0, [r7, #0]
 801c27a:	f7e4 f811 	bl	80002a0 <strlen>
 801c27e:	4602      	mov	r2, r0
 801c280:	4b34      	ldr	r3, [pc, #208]	@ (801c354 <Update_File+0x164>)
 801c282:	6839      	ldr	r1, [r7, #0]
 801c284:	4831      	ldr	r0, [pc, #196]	@ (801c34c <Update_File+0x15c>)
 801c286:	f7ff fb4d 	bl	801b924 <f_write>
 801c28a:	4603      	mov	r3, r0
 801c28c:	461a      	mov	r2, r3
 801c28e:	4b2d      	ldr	r3, [pc, #180]	@ (801c344 <Update_File+0x154>)
 801c290:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c292:	4b2c      	ldr	r3, [pc, #176]	@ (801c344 <Update_File+0x154>)
 801c294:	781b      	ldrb	r3, [r3, #0]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d011      	beq.n	801c2be <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801c29a:	4b2a      	ldr	r3, [pc, #168]	@ (801c344 <Update_File+0x154>)
 801c29c:	781b      	ldrb	r3, [r3, #0]
 801c29e:	461a      	mov	r2, r3
 801c2a0:	f107 0008 	add.w	r0, r7, #8
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	492c      	ldr	r1, [pc, #176]	@ (801c358 <Update_File+0x168>)
 801c2a8:	f002 fbd6 	bl	801ea58 <siprintf>
					name);
			if (sdioPrints)
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d014      	beq.n	801c2dc <Update_File+0xec>
				printf(buf);
 801c2b2:	f107 0308 	add.w	r3, r7, #8
 801c2b6:	4618      	mov	r0, r3
 801c2b8:	f002 fb5e 	bl	801e978 <iprintf>
 801c2bc:	e00e      	b.n	801c2dc <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801c2be:	f107 0308 	add.w	r3, r7, #8
 801c2c2:	687a      	ldr	r2, [r7, #4]
 801c2c4:	4925      	ldr	r1, [pc, #148]	@ (801c35c <Update_File+0x16c>)
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	f002 fbc6 	bl	801ea58 <siprintf>
			if (sdioPrints)
 801c2cc:	2300      	movs	r3, #0
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d004      	beq.n	801c2dc <Update_File+0xec>
				printf(buf);
 801c2d2:	f107 0308 	add.w	r3, r7, #8
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	f002 fb4e 	bl	801e978 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801c2dc:	481b      	ldr	r0, [pc, #108]	@ (801c34c <Update_File+0x15c>)
 801c2de:	f7ff fd14 	bl	801bd0a <f_close>
 801c2e2:	4603      	mov	r3, r0
 801c2e4:	461a      	mov	r2, r3
 801c2e6:	4b17      	ldr	r3, [pc, #92]	@ (801c344 <Update_File+0x154>)
 801c2e8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801c2ea:	4b16      	ldr	r3, [pc, #88]	@ (801c344 <Update_File+0x154>)
 801c2ec:	781b      	ldrb	r3, [r3, #0]
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d011      	beq.n	801c316 <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801c2f2:	4b14      	ldr	r3, [pc, #80]	@ (801c344 <Update_File+0x154>)
 801c2f4:	781b      	ldrb	r3, [r3, #0]
 801c2f6:	461a      	mov	r2, r3
 801c2f8:	f107 0008 	add.w	r0, r7, #8
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	4918      	ldr	r1, [pc, #96]	@ (801c360 <Update_File+0x170>)
 801c300:	f002 fbaa 	bl	801ea58 <siprintf>
					name);
			if (sdioPrints)
 801c304:	2300      	movs	r3, #0
 801c306:	2b00      	cmp	r3, #0
 801c308:	d014      	beq.n	801c334 <Update_File+0x144>
				printf(buf);
 801c30a:	f107 0308 	add.w	r3, r7, #8
 801c30e:	4618      	mov	r0, r3
 801c310:	f002 fb32 	bl	801e978 <iprintf>
 801c314:	e00e      	b.n	801c334 <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801c316:	f107 0308 	add.w	r3, r7, #8
 801c31a:	687a      	ldr	r2, [r7, #4]
 801c31c:	4911      	ldr	r1, [pc, #68]	@ (801c364 <Update_File+0x174>)
 801c31e:	4618      	mov	r0, r3
 801c320:	f002 fb9a 	bl	801ea58 <siprintf>
			if (sdioPrints)
 801c324:	2300      	movs	r3, #0
 801c326:	2b00      	cmp	r3, #0
 801c328:	d004      	beq.n	801c334 <Update_File+0x144>
				printf(buf);
 801c32a:	f107 0308 	add.w	r3, r7, #8
 801c32e:	4618      	mov	r0, r3
 801c330:	f002 fb22 	bl	801e978 <iprintf>

		}
	}
	return fresult;
 801c334:	4b03      	ldr	r3, [pc, #12]	@ (801c344 <Update_File+0x154>)
 801c336:	781b      	ldrb	r3, [r3, #0]
}
 801c338:	4618      	mov	r0, r3
 801c33a:	37a0      	adds	r7, #160	@ 0xa0
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bd80      	pop	{r7, pc}
 801c340:	20002200 	.word	0x20002200
 801c344:	20002318 	.word	0x20002318
 801c348:	080247c4 	.word	0x080247c4
 801c34c:	20001fd0 	.word	0x20001fd0
 801c350:	080247e4 	.word	0x080247e4
 801c354:	2000231c 	.word	0x2000231c
 801c358:	080249f4 	.word	0x080249f4
 801c35c:	08024a1c 	.word	0x08024a1c
 801c360:	080248ec 	.word	0x080248ec
 801c364:	08024914 	.word	0x08024914

0801c368 <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801c368:	b580      	push	{r7, lr}
 801c36a:	b088      	sub	sp, #32
 801c36c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c36e:	f107 0314 	add.w	r3, r7, #20
 801c372:	2200      	movs	r2, #0
 801c374:	4619      	mov	r1, r3
 801c376:	48b4      	ldr	r0, [pc, #720]	@ (801c648 <json_update+0x2e0>)
 801c378:	f7ed fbe5 	bl	8009b46 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c37c:	463b      	mov	r3, r7
 801c37e:	2200      	movs	r2, #0
 801c380:	4619      	mov	r1, r3
 801c382:	48b1      	ldr	r0, [pc, #708]	@ (801c648 <json_update+0x2e0>)
 801c384:	f7ed fafd 	bl	8009982 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c388:	7dba      	ldrb	r2, [r7, #22]
 801c38a:	4bb0      	ldr	r3, [pc, #704]	@ (801c64c <json_update+0x2e4>)
 801c38c:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c38e:	7d7a      	ldrb	r2, [r7, #21]
 801c390:	4baf      	ldr	r3, [pc, #700]	@ (801c650 <json_update+0x2e8>)
 801c392:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c394:	7dfa      	ldrb	r2, [r7, #23]
 801c396:	4baf      	ldr	r3, [pc, #700]	@ (801c654 <json_update+0x2ec>)
 801c398:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c39a:	783a      	ldrb	r2, [r7, #0]
 801c39c:	4bae      	ldr	r3, [pc, #696]	@ (801c658 <json_update+0x2f0>)
 801c39e:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c3a0:	787a      	ldrb	r2, [r7, #1]
 801c3a2:	4bae      	ldr	r3, [pc, #696]	@ (801c65c <json_update+0x2f4>)
 801c3a4:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c3a6:	78ba      	ldrb	r2, [r7, #2]
 801c3a8:	4bad      	ldr	r3, [pc, #692]	@ (801c660 <json_update+0x2f8>)
 801c3aa:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801c3ac:	48ad      	ldr	r0, [pc, #692]	@ (801c664 <json_update+0x2fc>)
 801c3ae:	f7ff fe31 	bl	801c014 <Mount_SD>
 801c3b2:	4603      	mov	r3, r0
 801c3b4:	461a      	mov	r2, r3
 801c3b6:	4bac      	ldr	r3, [pc, #688]	@ (801c668 <json_update+0x300>)
 801c3b8:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c3ba:	4bab      	ldr	r3, [pc, #684]	@ (801c668 <json_update+0x300>)
 801c3bc:	781b      	ldrb	r3, [r3, #0]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	f040 8137 	bne.w	801c632 <json_update+0x2ca>
		//CAN Bus
		sprintf(buffer, "{\n");
 801c3c4:	49a9      	ldr	r1, [pc, #676]	@ (801c66c <json_update+0x304>)
 801c3c6:	48aa      	ldr	r0, [pc, #680]	@ (801c670 <json_update+0x308>)
 801c3c8:	f002 fb46 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c3cc:	49a8      	ldr	r1, [pc, #672]	@ (801c670 <json_update+0x308>)
 801c3ce:	48a9      	ldr	r0, [pc, #676]	@ (801c674 <json_update+0x30c>)
 801c3d0:	f7ff ff0e 	bl	801c1f0 <Update_File>
 801c3d4:	4603      	mov	r3, r0
 801c3d6:	461a      	mov	r2, r3
 801c3d8:	4ba3      	ldr	r3, [pc, #652]	@ (801c668 <json_update+0x300>)
 801c3da:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c3dc:	22ff      	movs	r2, #255	@ 0xff
 801c3de:	2100      	movs	r1, #0
 801c3e0:	48a3      	ldr	r0, [pc, #652]	@ (801c670 <json_update+0x308>)
 801c3e2:	f002 fc83 	bl	801ecec <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801c3e6:	f7e6 f845 	bl	8002474 <ver_GetUid>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	461a      	mov	r2, r3
 801c3ee:	49a2      	ldr	r1, [pc, #648]	@ (801c678 <json_update+0x310>)
 801c3f0:	489f      	ldr	r0, [pc, #636]	@ (801c670 <json_update+0x308>)
 801c3f2:	f002 fb31 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c3f6:	499e      	ldr	r1, [pc, #632]	@ (801c670 <json_update+0x308>)
 801c3f8:	489e      	ldr	r0, [pc, #632]	@ (801c674 <json_update+0x30c>)
 801c3fa:	f7ff fef9 	bl	801c1f0 <Update_File>
 801c3fe:	4603      	mov	r3, r0
 801c400:	461a      	mov	r2, r3
 801c402:	4b99      	ldr	r3, [pc, #612]	@ (801c668 <json_update+0x300>)
 801c404:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c406:	22ff      	movs	r2, #255	@ 0xff
 801c408:	2100      	movs	r1, #0
 801c40a:	4899      	ldr	r0, [pc, #612]	@ (801c670 <json_update+0x308>)
 801c40c:	f002 fc6e 	bl	801ecec <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801c410:	4a9a      	ldr	r2, [pc, #616]	@ (801c67c <json_update+0x314>)
 801c412:	499b      	ldr	r1, [pc, #620]	@ (801c680 <json_update+0x318>)
 801c414:	4896      	ldr	r0, [pc, #600]	@ (801c670 <json_update+0x308>)
 801c416:	f002 fb1f 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c41a:	4995      	ldr	r1, [pc, #596]	@ (801c670 <json_update+0x308>)
 801c41c:	4895      	ldr	r0, [pc, #596]	@ (801c674 <json_update+0x30c>)
 801c41e:	f7ff fee7 	bl	801c1f0 <Update_File>
 801c422:	4603      	mov	r3, r0
 801c424:	461a      	mov	r2, r3
 801c426:	4b90      	ldr	r3, [pc, #576]	@ (801c668 <json_update+0x300>)
 801c428:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c42a:	22ff      	movs	r2, #255	@ 0xff
 801c42c:	2100      	movs	r1, #0
 801c42e:	4890      	ldr	r0, [pc, #576]	@ (801c670 <json_update+0x308>)
 801c430:	f002 fc5c 	bl	801ecec <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c434:	783b      	ldrb	r3, [r7, #0]
 801c436:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801c438:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c43a:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801c43c:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801c43e:	9300      	str	r3, [sp, #0]
 801c440:	460b      	mov	r3, r1
 801c442:	4990      	ldr	r1, [pc, #576]	@ (801c684 <json_update+0x31c>)
 801c444:	488a      	ldr	r0, [pc, #552]	@ (801c670 <json_update+0x308>)
 801c446:	f002 fb07 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c44a:	4989      	ldr	r1, [pc, #548]	@ (801c670 <json_update+0x308>)
 801c44c:	4889      	ldr	r0, [pc, #548]	@ (801c674 <json_update+0x30c>)
 801c44e:	f7ff fecf 	bl	801c1f0 <Update_File>
 801c452:	4603      	mov	r3, r0
 801c454:	461a      	mov	r2, r3
 801c456:	4b84      	ldr	r3, [pc, #528]	@ (801c668 <json_update+0x300>)
 801c458:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c45a:	22ff      	movs	r2, #255	@ 0xff
 801c45c:	2100      	movs	r1, #0
 801c45e:	4884      	ldr	r0, [pc, #528]	@ (801c670 <json_update+0x308>)
 801c460:	f002 fc44 	bl	801ecec <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801c464:	4a88      	ldr	r2, [pc, #544]	@ (801c688 <json_update+0x320>)
 801c466:	4989      	ldr	r1, [pc, #548]	@ (801c68c <json_update+0x324>)
 801c468:	4881      	ldr	r0, [pc, #516]	@ (801c670 <json_update+0x308>)
 801c46a:	f002 faf5 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c46e:	4980      	ldr	r1, [pc, #512]	@ (801c670 <json_update+0x308>)
 801c470:	4880      	ldr	r0, [pc, #512]	@ (801c674 <json_update+0x30c>)
 801c472:	f7ff febd 	bl	801c1f0 <Update_File>
 801c476:	4603      	mov	r3, r0
 801c478:	461a      	mov	r2, r3
 801c47a:	4b7b      	ldr	r3, [pc, #492]	@ (801c668 <json_update+0x300>)
 801c47c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c47e:	22ff      	movs	r2, #255	@ 0xff
 801c480:	2100      	movs	r1, #0
 801c482:	487b      	ldr	r0, [pc, #492]	@ (801c670 <json_update+0x308>)
 801c484:	f002 fc32 	bl	801ecec <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", _Flash_Packet.filename_ver_date);
 801c488:	4a81      	ldr	r2, [pc, #516]	@ (801c690 <json_update+0x328>)
 801c48a:	4982      	ldr	r1, [pc, #520]	@ (801c694 <json_update+0x32c>)
 801c48c:	4878      	ldr	r0, [pc, #480]	@ (801c670 <json_update+0x308>)
 801c48e:	f002 fae3 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c492:	4977      	ldr	r1, [pc, #476]	@ (801c670 <json_update+0x308>)
 801c494:	4877      	ldr	r0, [pc, #476]	@ (801c674 <json_update+0x30c>)
 801c496:	f7ff feab 	bl	801c1f0 <Update_File>
 801c49a:	4603      	mov	r3, r0
 801c49c:	461a      	mov	r2, r3
 801c49e:	4b72      	ldr	r3, [pc, #456]	@ (801c668 <json_update+0x300>)
 801c4a0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4a2:	22ff      	movs	r2, #255	@ 0xff
 801c4a4:	2100      	movs	r1, #0
 801c4a6:	4872      	ldr	r0, [pc, #456]	@ (801c670 <json_update+0x308>)
 801c4a8:	f002 fc20 	bl	801ecec <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801c4ac:	4a7a      	ldr	r2, [pc, #488]	@ (801c698 <json_update+0x330>)
 801c4ae:	497b      	ldr	r1, [pc, #492]	@ (801c69c <json_update+0x334>)
 801c4b0:	486f      	ldr	r0, [pc, #444]	@ (801c670 <json_update+0x308>)
 801c4b2:	f002 fad1 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4b6:	496e      	ldr	r1, [pc, #440]	@ (801c670 <json_update+0x308>)
 801c4b8:	486e      	ldr	r0, [pc, #440]	@ (801c674 <json_update+0x30c>)
 801c4ba:	f7ff fe99 	bl	801c1f0 <Update_File>
 801c4be:	4603      	mov	r3, r0
 801c4c0:	461a      	mov	r2, r3
 801c4c2:	4b69      	ldr	r3, [pc, #420]	@ (801c668 <json_update+0x300>)
 801c4c4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c4c6:	22ff      	movs	r2, #255	@ 0xff
 801c4c8:	2100      	movs	r1, #0
 801c4ca:	4869      	ldr	r0, [pc, #420]	@ (801c670 <json_update+0x308>)
 801c4cc:	f002 fc0e 	bl	801ecec <memset>
		sprintf(buffer, "\"co2\":\"%.2f\",\n", _RunTime_Packet.co2);
 801c4d0:	4b73      	ldr	r3, [pc, #460]	@ (801c6a0 <json_update+0x338>)
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f7e4 f84f 	bl	8000578 <__aeabi_f2d>
 801c4da:	4602      	mov	r2, r0
 801c4dc:	460b      	mov	r3, r1
 801c4de:	4971      	ldr	r1, [pc, #452]	@ (801c6a4 <json_update+0x33c>)
 801c4e0:	4863      	ldr	r0, [pc, #396]	@ (801c670 <json_update+0x308>)
 801c4e2:	f002 fab9 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c4e6:	4962      	ldr	r1, [pc, #392]	@ (801c670 <json_update+0x308>)
 801c4e8:	4862      	ldr	r0, [pc, #392]	@ (801c674 <json_update+0x30c>)
 801c4ea:	f7ff fe81 	bl	801c1f0 <Update_File>
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	461a      	mov	r2, r3
 801c4f2:	4b5d      	ldr	r3, [pc, #372]	@ (801c668 <json_update+0x300>)
 801c4f4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c4f6:	22ff      	movs	r2, #255	@ 0xff
 801c4f8:	2100      	movs	r1, #0
 801c4fa:	485d      	ldr	r0, [pc, #372]	@ (801c670 <json_update+0x308>)
 801c4fc:	f002 fbf6 	bl	801ecec <memset>
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
				_RunTime_Packet.temperature);
 801c500:	4b67      	ldr	r3, [pc, #412]	@ (801c6a0 <json_update+0x338>)
 801c502:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer, "\"temperature\":\"%.2f\",\n",
 801c504:	4618      	mov	r0, r3
 801c506:	f7e4 f837 	bl	8000578 <__aeabi_f2d>
 801c50a:	4602      	mov	r2, r0
 801c50c:	460b      	mov	r3, r1
 801c50e:	4966      	ldr	r1, [pc, #408]	@ (801c6a8 <json_update+0x340>)
 801c510:	4857      	ldr	r0, [pc, #348]	@ (801c670 <json_update+0x308>)
 801c512:	f002 faa1 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c516:	4956      	ldr	r1, [pc, #344]	@ (801c670 <json_update+0x308>)
 801c518:	4856      	ldr	r0, [pc, #344]	@ (801c674 <json_update+0x30c>)
 801c51a:	f7ff fe69 	bl	801c1f0 <Update_File>
 801c51e:	4603      	mov	r3, r0
 801c520:	461a      	mov	r2, r3
 801c522:	4b51      	ldr	r3, [pc, #324]	@ (801c668 <json_update+0x300>)
 801c524:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c526:	22ff      	movs	r2, #255	@ 0xff
 801c528:	2100      	movs	r1, #0
 801c52a:	4851      	ldr	r0, [pc, #324]	@ (801c670 <json_update+0x308>)
 801c52c:	f002 fbde 	bl	801ecec <memset>
		sprintf(buffer, "\"humidity\":\"%.2f\",\n", _RunTime_Packet.humidity);
 801c530:	4b5b      	ldr	r3, [pc, #364]	@ (801c6a0 <json_update+0x338>)
 801c532:	689b      	ldr	r3, [r3, #8]
 801c534:	4618      	mov	r0, r3
 801c536:	f7e4 f81f 	bl	8000578 <__aeabi_f2d>
 801c53a:	4602      	mov	r2, r0
 801c53c:	460b      	mov	r3, r1
 801c53e:	495b      	ldr	r1, [pc, #364]	@ (801c6ac <json_update+0x344>)
 801c540:	484b      	ldr	r0, [pc, #300]	@ (801c670 <json_update+0x308>)
 801c542:	f002 fa89 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c546:	494a      	ldr	r1, [pc, #296]	@ (801c670 <json_update+0x308>)
 801c548:	484a      	ldr	r0, [pc, #296]	@ (801c674 <json_update+0x30c>)
 801c54a:	f7ff fe51 	bl	801c1f0 <Update_File>
 801c54e:	4603      	mov	r3, r0
 801c550:	461a      	mov	r2, r3
 801c552:	4b45      	ldr	r3, [pc, #276]	@ (801c668 <json_update+0x300>)
 801c554:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c556:	22ff      	movs	r2, #255	@ 0xff
 801c558:	2100      	movs	r1, #0
 801c55a:	4845      	ldr	r0, [pc, #276]	@ (801c670 <json_update+0x308>)
 801c55c:	f002 fbc6 	bl	801ecec <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801c560:	4b4f      	ldr	r3, [pc, #316]	@ (801c6a0 <json_update+0x338>)
 801c562:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801c564:	2b00      	cmp	r3, #0
 801c566:	d001      	beq.n	801c56c <json_update+0x204>
 801c568:	4b51      	ldr	r3, [pc, #324]	@ (801c6b0 <json_update+0x348>)
 801c56a:	e000      	b.n	801c56e <json_update+0x206>
 801c56c:	4b51      	ldr	r3, [pc, #324]	@ (801c6b4 <json_update+0x34c>)
 801c56e:	461a      	mov	r2, r3
 801c570:	4951      	ldr	r1, [pc, #324]	@ (801c6b8 <json_update+0x350>)
 801c572:	483f      	ldr	r0, [pc, #252]	@ (801c670 <json_update+0x308>)
 801c574:	f002 fa70 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c578:	493d      	ldr	r1, [pc, #244]	@ (801c670 <json_update+0x308>)
 801c57a:	483e      	ldr	r0, [pc, #248]	@ (801c674 <json_update+0x30c>)
 801c57c:	f7ff fe38 	bl	801c1f0 <Update_File>
 801c580:	4603      	mov	r3, r0
 801c582:	461a      	mov	r2, r3
 801c584:	4b38      	ldr	r3, [pc, #224]	@ (801c668 <json_update+0x300>)
 801c586:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c588:	22ff      	movs	r2, #255	@ 0xff
 801c58a:	2100      	movs	r1, #0
 801c58c:	4838      	ldr	r0, [pc, #224]	@ (801c670 <json_update+0x308>)
 801c58e:	f002 fbad 	bl	801ecec <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801c592:	4b43      	ldr	r3, [pc, #268]	@ (801c6a0 <json_update+0x338>)
 801c594:	695b      	ldr	r3, [r3, #20]
 801c596:	4618      	mov	r0, r3
 801c598:	f7e3 ffee 	bl	8000578 <__aeabi_f2d>
 801c59c:	4602      	mov	r2, r0
 801c59e:	460b      	mov	r3, r1
 801c5a0:	4946      	ldr	r1, [pc, #280]	@ (801c6bc <json_update+0x354>)
 801c5a2:	4833      	ldr	r0, [pc, #204]	@ (801c670 <json_update+0x308>)
 801c5a4:	f002 fa58 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5a8:	4931      	ldr	r1, [pc, #196]	@ (801c670 <json_update+0x308>)
 801c5aa:	4832      	ldr	r0, [pc, #200]	@ (801c674 <json_update+0x30c>)
 801c5ac:	f7ff fe20 	bl	801c1f0 <Update_File>
 801c5b0:	4603      	mov	r3, r0
 801c5b2:	461a      	mov	r2, r3
 801c5b4:	4b2c      	ldr	r3, [pc, #176]	@ (801c668 <json_update+0x300>)
 801c5b6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c5b8:	22ff      	movs	r2, #255	@ 0xff
 801c5ba:	2100      	movs	r1, #0
 801c5bc:	482c      	ldr	r0, [pc, #176]	@ (801c670 <json_update+0x308>)
 801c5be:	f002 fb95 	bl	801ecec <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801c5c2:	493f      	ldr	r1, [pc, #252]	@ (801c6c0 <json_update+0x358>)
 801c5c4:	482a      	ldr	r0, [pc, #168]	@ (801c670 <json_update+0x308>)
 801c5c6:	f002 fa47 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5ca:	4929      	ldr	r1, [pc, #164]	@ (801c670 <json_update+0x308>)
 801c5cc:	4829      	ldr	r0, [pc, #164]	@ (801c674 <json_update+0x30c>)
 801c5ce:	f7ff fe0f 	bl	801c1f0 <Update_File>
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	461a      	mov	r2, r3
 801c5d6:	4b24      	ldr	r3, [pc, #144]	@ (801c668 <json_update+0x300>)
 801c5d8:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c5da:	22ff      	movs	r2, #255	@ 0xff
 801c5dc:	2100      	movs	r1, #0
 801c5de:	4824      	ldr	r0, [pc, #144]	@ (801c670 <json_update+0x308>)
 801c5e0:	f002 fb84 	bl	801ecec <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801c5e4:	4b2e      	ldr	r3, [pc, #184]	@ (801c6a0 <json_update+0x338>)
 801c5e6:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801c5e8:	4618      	mov	r0, r3
 801c5ea:	f7e3 ffc5 	bl	8000578 <__aeabi_f2d>
 801c5ee:	4602      	mov	r2, r0
 801c5f0:	460b      	mov	r3, r1
 801c5f2:	4934      	ldr	r1, [pc, #208]	@ (801c6c4 <json_update+0x35c>)
 801c5f4:	481e      	ldr	r0, [pc, #120]	@ (801c670 <json_update+0x308>)
 801c5f6:	f002 fa2f 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c5fa:	491d      	ldr	r1, [pc, #116]	@ (801c670 <json_update+0x308>)
 801c5fc:	481d      	ldr	r0, [pc, #116]	@ (801c674 <json_update+0x30c>)
 801c5fe:	f7ff fdf7 	bl	801c1f0 <Update_File>
 801c602:	4603      	mov	r3, r0
 801c604:	461a      	mov	r2, r3
 801c606:	4b18      	ldr	r3, [pc, #96]	@ (801c668 <json_update+0x300>)
 801c608:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801c60a:	22ff      	movs	r2, #255	@ 0xff
 801c60c:	2100      	movs	r1, #0
 801c60e:	4818      	ldr	r0, [pc, #96]	@ (801c670 <json_update+0x308>)
 801c610:	f002 fb6c 	bl	801ecec <memset>
		sprintf(buffer, "}\n\n");
 801c614:	492c      	ldr	r1, [pc, #176]	@ (801c6c8 <json_update+0x360>)
 801c616:	4816      	ldr	r0, [pc, #88]	@ (801c670 <json_update+0x308>)
 801c618:	f002 fa1e 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c61c:	4914      	ldr	r1, [pc, #80]	@ (801c670 <json_update+0x308>)
 801c61e:	4815      	ldr	r0, [pc, #84]	@ (801c674 <json_update+0x30c>)
 801c620:	f7ff fde6 	bl	801c1f0 <Update_File>
 801c624:	4603      	mov	r3, r0
 801c626:	461a      	mov	r2, r3
 801c628:	4b0f      	ldr	r3, [pc, #60]	@ (801c668 <json_update+0x300>)
 801c62a:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c62c:	480d      	ldr	r0, [pc, #52]	@ (801c664 <json_update+0x2fc>)
 801c62e:	f7ff fd1d 	bl	801c06c <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c632:	4b0d      	ldr	r3, [pc, #52]	@ (801c668 <json_update+0x300>)
 801c634:	781b      	ldrb	r3, [r3, #0]
 801c636:	b25a      	sxtb	r2, r3
 801c638:	4b19      	ldr	r3, [pc, #100]	@ (801c6a0 <json_update+0x338>)
 801c63a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c63e:	bf00      	nop
 801c640:	3718      	adds	r7, #24
 801c642:	46bd      	mov	sp, r7
 801c644:	bd80      	pop	{r7, pc}
 801c646:	bf00      	nop
 801c648:	20001898 	.word	0x20001898
 801c64c:	20002322 	.word	0x20002322
 801c650:	20002323 	.word	0x20002323
 801c654:	20002324 	.word	0x20002324
 801c658:	20002325 	.word	0x20002325
 801c65c:	20002326 	.word	0x20002326
 801c660:	20002327 	.word	0x20002327
 801c664:	08024b08 	.word	0x08024b08
 801c668:	20002320 	.word	0x20002320
 801c66c:	08024b0c 	.word	0x08024b0c
 801c670:	2000232c 	.word	0x2000232c
 801c674:	20001461 	.word	0x20001461
 801c678:	08024b10 	.word	0x08024b10
 801c67c:	20001399 	.word	0x20001399
 801c680:	08024b20 	.word	0x08024b20
 801c684:	08024b2c 	.word	0x08024b2c
 801c688:	200013cb 	.word	0x200013cb
 801c68c:	08024b4c 	.word	0x08024b4c
 801c690:	200014c5 	.word	0x200014c5
 801c694:	08024b60 	.word	0x08024b60
 801c698:	2000142f 	.word	0x2000142f
 801c69c:	08024b74 	.word	0x08024b74
 801c6a0:	20001530 	.word	0x20001530
 801c6a4:	08024b84 	.word	0x08024b84
 801c6a8:	08024b94 	.word	0x08024b94
 801c6ac:	08024bac 	.word	0x08024bac
 801c6b0:	08024bc0 	.word	0x08024bc0
 801c6b4:	08024bc8 	.word	0x08024bc8
 801c6b8:	08024bd0 	.word	0x08024bd0
 801c6bc:	08024be0 	.word	0x08024be0
 801c6c0:	08024bf4 	.word	0x08024bf4
 801c6c4:	08024c04 	.word	0x08024c04
 801c6c8:	08024c18 	.word	0x08024c18

0801c6cc <csv_update>:
void csv_update() {
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b088      	sub	sp, #32
 801c6d0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801c6d2:	f107 0314 	add.w	r3, r7, #20
 801c6d6:	2200      	movs	r2, #0
 801c6d8:	4619      	mov	r1, r3
 801c6da:	48ab      	ldr	r0, [pc, #684]	@ (801c988 <csv_update+0x2bc>)
 801c6dc:	f7ed fa33 	bl	8009b46 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801c6e0:	463b      	mov	r3, r7
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	4619      	mov	r1, r3
 801c6e6:	48a8      	ldr	r0, [pc, #672]	@ (801c988 <csv_update+0x2bc>)
 801c6e8:	f7ed f94b 	bl	8009982 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801c6ec:	7dba      	ldrb	r2, [r7, #22]
 801c6ee:	4ba7      	ldr	r3, [pc, #668]	@ (801c98c <csv_update+0x2c0>)
 801c6f0:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801c6f2:	7d7a      	ldrb	r2, [r7, #21]
 801c6f4:	4ba6      	ldr	r3, [pc, #664]	@ (801c990 <csv_update+0x2c4>)
 801c6f6:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801c6f8:	7dfa      	ldrb	r2, [r7, #23]
 801c6fa:	4ba6      	ldr	r3, [pc, #664]	@ (801c994 <csv_update+0x2c8>)
 801c6fc:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801c6fe:	783a      	ldrb	r2, [r7, #0]
 801c700:	4ba5      	ldr	r3, [pc, #660]	@ (801c998 <csv_update+0x2cc>)
 801c702:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801c704:	787a      	ldrb	r2, [r7, #1]
 801c706:	4ba5      	ldr	r3, [pc, #660]	@ (801c99c <csv_update+0x2d0>)
 801c708:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801c70a:	78ba      	ldrb	r2, [r7, #2]
 801c70c:	4ba4      	ldr	r3, [pc, #656]	@ (801c9a0 <csv_update+0x2d4>)
 801c70e:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801c710:	48a4      	ldr	r0, [pc, #656]	@ (801c9a4 <csv_update+0x2d8>)
 801c712:	f7ff fc7f 	bl	801c014 <Mount_SD>
 801c716:	4603      	mov	r3, r0
 801c718:	461a      	mov	r2, r3
 801c71a:	4ba3      	ldr	r3, [pc, #652]	@ (801c9a8 <csv_update+0x2dc>)
 801c71c:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c71e:	4ba2      	ldr	r3, [pc, #648]	@ (801c9a8 <csv_update+0x2dc>)
 801c720:	781b      	ldrb	r3, [r3, #0]
 801c722:	2b00      	cmp	r3, #0
 801c724:	f040 8126 	bne.w	801c974 <csv_update+0x2a8>


		sprintf(buffer, "%s ,", ver_GetUid());
 801c728:	f7e5 fea4 	bl	8002474 <ver_GetUid>
 801c72c:	4603      	mov	r3, r0
 801c72e:	461a      	mov	r2, r3
 801c730:	499e      	ldr	r1, [pc, #632]	@ (801c9ac <csv_update+0x2e0>)
 801c732:	489f      	ldr	r0, [pc, #636]	@ (801c9b0 <csv_update+0x2e4>)
 801c734:	f002 f990 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c738:	499d      	ldr	r1, [pc, #628]	@ (801c9b0 <csv_update+0x2e4>)
 801c73a:	489e      	ldr	r0, [pc, #632]	@ (801c9b4 <csv_update+0x2e8>)
 801c73c:	f7ff fd58 	bl	801c1f0 <Update_File>
 801c740:	4603      	mov	r3, r0
 801c742:	461a      	mov	r2, r3
 801c744:	4b98      	ldr	r3, [pc, #608]	@ (801c9a8 <csv_update+0x2dc>)
 801c746:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c748:	22ff      	movs	r2, #255	@ 0xff
 801c74a:	2100      	movs	r1, #0
 801c74c:	4898      	ldr	r0, [pc, #608]	@ (801c9b0 <csv_update+0x2e4>)
 801c74e:	f002 facd 	bl	801ecec <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801c752:	4a99      	ldr	r2, [pc, #612]	@ (801c9b8 <csv_update+0x2ec>)
 801c754:	4995      	ldr	r1, [pc, #596]	@ (801c9ac <csv_update+0x2e0>)
 801c756:	4896      	ldr	r0, [pc, #600]	@ (801c9b0 <csv_update+0x2e4>)
 801c758:	f002 f97e 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c75c:	4994      	ldr	r1, [pc, #592]	@ (801c9b0 <csv_update+0x2e4>)
 801c75e:	4895      	ldr	r0, [pc, #596]	@ (801c9b4 <csv_update+0x2e8>)
 801c760:	f7ff fd46 	bl	801c1f0 <Update_File>
 801c764:	4603      	mov	r3, r0
 801c766:	461a      	mov	r2, r3
 801c768:	4b8f      	ldr	r3, [pc, #572]	@ (801c9a8 <csv_update+0x2dc>)
 801c76a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c76c:	22ff      	movs	r2, #255	@ 0xff
 801c76e:	2100      	movs	r1, #0
 801c770:	488f      	ldr	r0, [pc, #572]	@ (801c9b0 <csv_update+0x2e4>)
 801c772:	f002 fabb 	bl	801ecec <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c776:	783b      	ldrb	r3, [r7, #0]
 801c778:	461a      	mov	r2, r3
 801c77a:	787b      	ldrb	r3, [r7, #1]
 801c77c:	4619      	mov	r1, r3
				sTime.Seconds);
 801c77e:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801c780:	9300      	str	r3, [sp, #0]
 801c782:	460b      	mov	r3, r1
 801c784:	498d      	ldr	r1, [pc, #564]	@ (801c9bc <csv_update+0x2f0>)
 801c786:	488a      	ldr	r0, [pc, #552]	@ (801c9b0 <csv_update+0x2e4>)
 801c788:	f002 f966 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c78c:	4988      	ldr	r1, [pc, #544]	@ (801c9b0 <csv_update+0x2e4>)
 801c78e:	4889      	ldr	r0, [pc, #548]	@ (801c9b4 <csv_update+0x2e8>)
 801c790:	f7ff fd2e 	bl	801c1f0 <Update_File>
 801c794:	4603      	mov	r3, r0
 801c796:	461a      	mov	r2, r3
 801c798:	4b83      	ldr	r3, [pc, #524]	@ (801c9a8 <csv_update+0x2dc>)
 801c79a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c79c:	22ff      	movs	r2, #255	@ 0xff
 801c79e:	2100      	movs	r1, #0
 801c7a0:	4883      	ldr	r0, [pc, #524]	@ (801c9b0 <csv_update+0x2e4>)
 801c7a2:	f002 faa3 	bl	801ecec <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801c7a6:	4a86      	ldr	r2, [pc, #536]	@ (801c9c0 <csv_update+0x2f4>)
 801c7a8:	4980      	ldr	r1, [pc, #512]	@ (801c9ac <csv_update+0x2e0>)
 801c7aa:	4881      	ldr	r0, [pc, #516]	@ (801c9b0 <csv_update+0x2e4>)
 801c7ac:	f002 f954 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7b0:	497f      	ldr	r1, [pc, #508]	@ (801c9b0 <csv_update+0x2e4>)
 801c7b2:	4880      	ldr	r0, [pc, #512]	@ (801c9b4 <csv_update+0x2e8>)
 801c7b4:	f7ff fd1c 	bl	801c1f0 <Update_File>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	461a      	mov	r2, r3
 801c7bc:	4b7a      	ldr	r3, [pc, #488]	@ (801c9a8 <csv_update+0x2dc>)
 801c7be:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7c0:	22ff      	movs	r2, #255	@ 0xff
 801c7c2:	2100      	movs	r1, #0
 801c7c4:	487a      	ldr	r0, [pc, #488]	@ (801c9b0 <csv_update+0x2e4>)
 801c7c6:	f002 fa91 	bl	801ecec <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.filename_ver_date);
 801c7ca:	4a7e      	ldr	r2, [pc, #504]	@ (801c9c4 <csv_update+0x2f8>)
 801c7cc:	4977      	ldr	r1, [pc, #476]	@ (801c9ac <csv_update+0x2e0>)
 801c7ce:	4878      	ldr	r0, [pc, #480]	@ (801c9b0 <csv_update+0x2e4>)
 801c7d0:	f002 f942 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7d4:	4976      	ldr	r1, [pc, #472]	@ (801c9b0 <csv_update+0x2e4>)
 801c7d6:	4877      	ldr	r0, [pc, #476]	@ (801c9b4 <csv_update+0x2e8>)
 801c7d8:	f7ff fd0a 	bl	801c1f0 <Update_File>
 801c7dc:	4603      	mov	r3, r0
 801c7de:	461a      	mov	r2, r3
 801c7e0:	4b71      	ldr	r3, [pc, #452]	@ (801c9a8 <csv_update+0x2dc>)
 801c7e2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c7e4:	22ff      	movs	r2, #255	@ 0xff
 801c7e6:	2100      	movs	r1, #0
 801c7e8:	4871      	ldr	r0, [pc, #452]	@ (801c9b0 <csv_update+0x2e4>)
 801c7ea:	f002 fa7f 	bl	801ecec <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801c7ee:	4a76      	ldr	r2, [pc, #472]	@ (801c9c8 <csv_update+0x2fc>)
 801c7f0:	496e      	ldr	r1, [pc, #440]	@ (801c9ac <csv_update+0x2e0>)
 801c7f2:	486f      	ldr	r0, [pc, #444]	@ (801c9b0 <csv_update+0x2e4>)
 801c7f4:	f002 f930 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c7f8:	496d      	ldr	r1, [pc, #436]	@ (801c9b0 <csv_update+0x2e4>)
 801c7fa:	486e      	ldr	r0, [pc, #440]	@ (801c9b4 <csv_update+0x2e8>)
 801c7fc:	f7ff fcf8 	bl	801c1f0 <Update_File>
 801c800:	4603      	mov	r3, r0
 801c802:	461a      	mov	r2, r3
 801c804:	4b68      	ldr	r3, [pc, #416]	@ (801c9a8 <csv_update+0x2dc>)
 801c806:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
#elif use_scd30
		memset(buffer, 0, sizeof(buffer));
 801c808:	22ff      	movs	r2, #255	@ 0xff
 801c80a:	2100      	movs	r1, #0
 801c80c:	4868      	ldr	r0, [pc, #416]	@ (801c9b0 <csv_update+0x2e4>)
 801c80e:	f002 fa6d 	bl	801ecec <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.co2);
 801c812:	4b6e      	ldr	r3, [pc, #440]	@ (801c9cc <csv_update+0x300>)
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	4618      	mov	r0, r3
 801c818:	f7e3 feae 	bl	8000578 <__aeabi_f2d>
 801c81c:	4602      	mov	r2, r0
 801c81e:	460b      	mov	r3, r1
 801c820:	496b      	ldr	r1, [pc, #428]	@ (801c9d0 <csv_update+0x304>)
 801c822:	4863      	ldr	r0, [pc, #396]	@ (801c9b0 <csv_update+0x2e4>)
 801c824:	f002 f918 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c828:	4961      	ldr	r1, [pc, #388]	@ (801c9b0 <csv_update+0x2e4>)
 801c82a:	4862      	ldr	r0, [pc, #392]	@ (801c9b4 <csv_update+0x2e8>)
 801c82c:	f7ff fce0 	bl	801c1f0 <Update_File>
 801c830:	4603      	mov	r3, r0
 801c832:	461a      	mov	r2, r3
 801c834:	4b5c      	ldr	r3, [pc, #368]	@ (801c9a8 <csv_update+0x2dc>)
 801c836:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c838:	22ff      	movs	r2, #255	@ 0xff
 801c83a:	2100      	movs	r1, #0
 801c83c:	485c      	ldr	r0, [pc, #368]	@ (801c9b0 <csv_update+0x2e4>)
 801c83e:	f002 fa55 	bl	801ecec <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.temperature);
 801c842:	4b62      	ldr	r3, [pc, #392]	@ (801c9cc <csv_update+0x300>)
 801c844:	685b      	ldr	r3, [r3, #4]
 801c846:	4618      	mov	r0, r3
 801c848:	f7e3 fe96 	bl	8000578 <__aeabi_f2d>
 801c84c:	4602      	mov	r2, r0
 801c84e:	460b      	mov	r3, r1
 801c850:	495f      	ldr	r1, [pc, #380]	@ (801c9d0 <csv_update+0x304>)
 801c852:	4857      	ldr	r0, [pc, #348]	@ (801c9b0 <csv_update+0x2e4>)
 801c854:	f002 f900 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c858:	4955      	ldr	r1, [pc, #340]	@ (801c9b0 <csv_update+0x2e4>)
 801c85a:	4856      	ldr	r0, [pc, #344]	@ (801c9b4 <csv_update+0x2e8>)
 801c85c:	f7ff fcc8 	bl	801c1f0 <Update_File>
 801c860:	4603      	mov	r3, r0
 801c862:	461a      	mov	r2, r3
 801c864:	4b50      	ldr	r3, [pc, #320]	@ (801c9a8 <csv_update+0x2dc>)
 801c866:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c868:	22ff      	movs	r2, #255	@ 0xff
 801c86a:	2100      	movs	r1, #0
 801c86c:	4850      	ldr	r0, [pc, #320]	@ (801c9b0 <csv_update+0x2e4>)
 801c86e:	f002 fa3d 	bl	801ecec <memset>
		sprintf(buffer, "%.2f ,", _RunTime_Packet.humidity);
 801c872:	4b56      	ldr	r3, [pc, #344]	@ (801c9cc <csv_update+0x300>)
 801c874:	689b      	ldr	r3, [r3, #8]
 801c876:	4618      	mov	r0, r3
 801c878:	f7e3 fe7e 	bl	8000578 <__aeabi_f2d>
 801c87c:	4602      	mov	r2, r0
 801c87e:	460b      	mov	r3, r1
 801c880:	4953      	ldr	r1, [pc, #332]	@ (801c9d0 <csv_update+0x304>)
 801c882:	484b      	ldr	r0, [pc, #300]	@ (801c9b0 <csv_update+0x2e4>)
 801c884:	f002 f8e8 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c888:	4949      	ldr	r1, [pc, #292]	@ (801c9b0 <csv_update+0x2e4>)
 801c88a:	484a      	ldr	r0, [pc, #296]	@ (801c9b4 <csv_update+0x2e8>)
 801c88c:	f7ff fcb0 	bl	801c1f0 <Update_File>
 801c890:	4603      	mov	r3, r0
 801c892:	461a      	mov	r2, r3
 801c894:	4b44      	ldr	r3, [pc, #272]	@ (801c9a8 <csv_update+0x2dc>)
 801c896:	701a      	strb	r2, [r3, #0]
#endif
		memset(buffer, 0, sizeof(buffer));
 801c898:	22ff      	movs	r2, #255	@ 0xff
 801c89a:	2100      	movs	r1, #0
 801c89c:	4844      	ldr	r0, [pc, #272]	@ (801c9b0 <csv_update+0x2e4>)
 801c89e:	f002 fa25 	bl	801ecec <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801c8a2:	4b4a      	ldr	r3, [pc, #296]	@ (801c9cc <csv_update+0x300>)
 801c8a4:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801c8a6:	2b01      	cmp	r3, #1
 801c8a8:	d101      	bne.n	801c8ae <csv_update+0x1e2>
 801c8aa:	4b4a      	ldr	r3, [pc, #296]	@ (801c9d4 <csv_update+0x308>)
 801c8ac:	e000      	b.n	801c8b0 <csv_update+0x1e4>
 801c8ae:	4b4a      	ldr	r3, [pc, #296]	@ (801c9d8 <csv_update+0x30c>)
 801c8b0:	461a      	mov	r2, r3
 801c8b2:	493e      	ldr	r1, [pc, #248]	@ (801c9ac <csv_update+0x2e0>)
 801c8b4:	483e      	ldr	r0, [pc, #248]	@ (801c9b0 <csv_update+0x2e4>)
 801c8b6:	f002 f8cf 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8ba:	493d      	ldr	r1, [pc, #244]	@ (801c9b0 <csv_update+0x2e4>)
 801c8bc:	483d      	ldr	r0, [pc, #244]	@ (801c9b4 <csv_update+0x2e8>)
 801c8be:	f7ff fc97 	bl	801c1f0 <Update_File>
 801c8c2:	4603      	mov	r3, r0
 801c8c4:	461a      	mov	r2, r3
 801c8c6:	4b38      	ldr	r3, [pc, #224]	@ (801c9a8 <csv_update+0x2dc>)
 801c8c8:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8ca:	22ff      	movs	r2, #255	@ 0xff
 801c8cc:	2100      	movs	r1, #0
 801c8ce:	4838      	ldr	r0, [pc, #224]	@ (801c9b0 <csv_update+0x2e4>)
 801c8d0:	f002 fa0c 	bl	801ecec <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801c8d4:	4b3d      	ldr	r3, [pc, #244]	@ (801c9cc <csv_update+0x300>)
 801c8d6:	695b      	ldr	r3, [r3, #20]
 801c8d8:	4618      	mov	r0, r3
 801c8da:	f7e3 fe4d 	bl	8000578 <__aeabi_f2d>
 801c8de:	4602      	mov	r2, r0
 801c8e0:	460b      	mov	r3, r1
 801c8e2:	493e      	ldr	r1, [pc, #248]	@ (801c9dc <csv_update+0x310>)
 801c8e4:	4832      	ldr	r0, [pc, #200]	@ (801c9b0 <csv_update+0x2e4>)
 801c8e6:	f002 f8b7 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c8ea:	4931      	ldr	r1, [pc, #196]	@ (801c9b0 <csv_update+0x2e4>)
 801c8ec:	4831      	ldr	r0, [pc, #196]	@ (801c9b4 <csv_update+0x2e8>)
 801c8ee:	f7ff fc7f 	bl	801c1f0 <Update_File>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	461a      	mov	r2, r3
 801c8f6:	4b2c      	ldr	r3, [pc, #176]	@ (801c9a8 <csv_update+0x2dc>)
 801c8f8:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c8fa:	22ff      	movs	r2, #255	@ 0xff
 801c8fc:	2100      	movs	r1, #0
 801c8fe:	482c      	ldr	r0, [pc, #176]	@ (801c9b0 <csv_update+0x2e4>)
 801c900:	f002 f9f4 	bl	801ecec <memset>
		sprintf(buffer, "NONE ,");
 801c904:	4936      	ldr	r1, [pc, #216]	@ (801c9e0 <csv_update+0x314>)
 801c906:	482a      	ldr	r0, [pc, #168]	@ (801c9b0 <csv_update+0x2e4>)
 801c908:	f002 f8a6 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c90c:	4928      	ldr	r1, [pc, #160]	@ (801c9b0 <csv_update+0x2e4>)
 801c90e:	4829      	ldr	r0, [pc, #164]	@ (801c9b4 <csv_update+0x2e8>)
 801c910:	f7ff fc6e 	bl	801c1f0 <Update_File>
 801c914:	4603      	mov	r3, r0
 801c916:	461a      	mov	r2, r3
 801c918:	4b23      	ldr	r3, [pc, #140]	@ (801c9a8 <csv_update+0x2dc>)
 801c91a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c91c:	22ff      	movs	r2, #255	@ 0xff
 801c91e:	2100      	movs	r1, #0
 801c920:	4823      	ldr	r0, [pc, #140]	@ (801c9b0 <csv_update+0x2e4>)
 801c922:	f002 f9e3 	bl	801ecec <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801c926:	4b29      	ldr	r3, [pc, #164]	@ (801c9cc <csv_update+0x300>)
 801c928:	6a1b      	ldr	r3, [r3, #32]
 801c92a:	4618      	mov	r0, r3
 801c92c:	f7e3 fe24 	bl	8000578 <__aeabi_f2d>
 801c930:	4602      	mov	r2, r0
 801c932:	460b      	mov	r3, r1
 801c934:	4929      	ldr	r1, [pc, #164]	@ (801c9dc <csv_update+0x310>)
 801c936:	481e      	ldr	r0, [pc, #120]	@ (801c9b0 <csv_update+0x2e4>)
 801c938:	f002 f88e 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c93c:	491c      	ldr	r1, [pc, #112]	@ (801c9b0 <csv_update+0x2e4>)
 801c93e:	481d      	ldr	r0, [pc, #116]	@ (801c9b4 <csv_update+0x2e8>)
 801c940:	f7ff fc56 	bl	801c1f0 <Update_File>
 801c944:	4603      	mov	r3, r0
 801c946:	461a      	mov	r2, r3
 801c948:	4b17      	ldr	r3, [pc, #92]	@ (801c9a8 <csv_update+0x2dc>)
 801c94a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801c94c:	22ff      	movs	r2, #255	@ 0xff
 801c94e:	2100      	movs	r1, #0
 801c950:	4817      	ldr	r0, [pc, #92]	@ (801c9b0 <csv_update+0x2e4>)
 801c952:	f002 f9cb 	bl	801ecec <memset>
		sprintf(buffer, "\n");
 801c956:	4923      	ldr	r1, [pc, #140]	@ (801c9e4 <csv_update+0x318>)
 801c958:	4815      	ldr	r0, [pc, #84]	@ (801c9b0 <csv_update+0x2e4>)
 801c95a:	f002 f87d 	bl	801ea58 <siprintf>
		fresult1 = Update_File(_Flash_Packet.filename_with_format, buffer);
 801c95e:	4914      	ldr	r1, [pc, #80]	@ (801c9b0 <csv_update+0x2e4>)
 801c960:	4814      	ldr	r0, [pc, #80]	@ (801c9b4 <csv_update+0x2e8>)
 801c962:	f7ff fc45 	bl	801c1f0 <Update_File>
 801c966:	4603      	mov	r3, r0
 801c968:	461a      	mov	r2, r3
 801c96a:	4b0f      	ldr	r3, [pc, #60]	@ (801c9a8 <csv_update+0x2dc>)
 801c96c:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801c96e:	480d      	ldr	r0, [pc, #52]	@ (801c9a4 <csv_update+0x2d8>)
 801c970:	f7ff fb7c 	bl	801c06c <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801c974:	4b0c      	ldr	r3, [pc, #48]	@ (801c9a8 <csv_update+0x2dc>)
 801c976:	781b      	ldrb	r3, [r3, #0]
 801c978:	b25a      	sxtb	r2, r3
 801c97a:	4b14      	ldr	r3, [pc, #80]	@ (801c9cc <csv_update+0x300>)
 801c97c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
}
 801c980:	bf00      	nop
 801c982:	3718      	adds	r7, #24
 801c984:	46bd      	mov	sp, r7
 801c986:	bd80      	pop	{r7, pc}
 801c988:	20001898 	.word	0x20001898
 801c98c:	20002322 	.word	0x20002322
 801c990:	20002323 	.word	0x20002323
 801c994:	20002324 	.word	0x20002324
 801c998:	20002325 	.word	0x20002325
 801c99c:	20002326 	.word	0x20002326
 801c9a0:	20002327 	.word	0x20002327
 801c9a4:	08024b08 	.word	0x08024b08
 801c9a8:	20002320 	.word	0x20002320
 801c9ac:	08024c1c 	.word	0x08024c1c
 801c9b0:	2000232c 	.word	0x2000232c
 801c9b4:	20001461 	.word	0x20001461
 801c9b8:	20001399 	.word	0x20001399
 801c9bc:	08024c24 	.word	0x08024c24
 801c9c0:	200013cb 	.word	0x200013cb
 801c9c4:	200014c5 	.word	0x200014c5
 801c9c8:	2000142f 	.word	0x2000142f
 801c9cc:	20001530 	.word	0x20001530
 801c9d0:	08024c38 	.word	0x08024c38
 801c9d4:	08024bc0 	.word	0x08024bc0
 801c9d8:	08024bc8 	.word	0x08024bc8
 801c9dc:	08024c40 	.word	0x08024c40
 801c9e0:	08024c48 	.word	0x08024c48
 801c9e4:	08024c50 	.word	0x08024c50

0801c9e8 <csv_header>:
void csv_header() {
 801c9e8:	b580      	push	{r7, lr}
 801c9ea:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801c9ec:	485d      	ldr	r0, [pc, #372]	@ (801cb64 <csv_header+0x17c>)
 801c9ee:	f7ff fb11 	bl	801c014 <Mount_SD>
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	461a      	mov	r2, r3
 801c9f6:	4b5c      	ldr	r3, [pc, #368]	@ (801cb68 <csv_header+0x180>)
 801c9f8:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801c9fa:	4b5b      	ldr	r3, [pc, #364]	@ (801cb68 <csv_header+0x180>)
 801c9fc:	781b      	ldrb	r3, [r3, #0]
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	f040 80a7 	bne.w	801cb52 <csv_header+0x16a>


		sprintf(buffer, "devEUI ,");
 801ca04:	4959      	ldr	r1, [pc, #356]	@ (801cb6c <csv_header+0x184>)
 801ca06:	485a      	ldr	r0, [pc, #360]	@ (801cb70 <csv_header+0x188>)
 801ca08:	f002 f826 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca0c:	4958      	ldr	r1, [pc, #352]	@ (801cb70 <csv_header+0x188>)
 801ca0e:	4859      	ldr	r0, [pc, #356]	@ (801cb74 <csv_header+0x18c>)
 801ca10:	f7ff fbee 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca14:	22ff      	movs	r2, #255	@ 0xff
 801ca16:	2100      	movs	r1, #0
 801ca18:	4855      	ldr	r0, [pc, #340]	@ (801cb70 <csv_header+0x188>)
 801ca1a:	f002 f967 	bl	801ecec <memset>
		sprintf(buffer, "id ,");
 801ca1e:	4956      	ldr	r1, [pc, #344]	@ (801cb78 <csv_header+0x190>)
 801ca20:	4853      	ldr	r0, [pc, #332]	@ (801cb70 <csv_header+0x188>)
 801ca22:	f002 f819 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca26:	4952      	ldr	r1, [pc, #328]	@ (801cb70 <csv_header+0x188>)
 801ca28:	4852      	ldr	r0, [pc, #328]	@ (801cb74 <csv_header+0x18c>)
 801ca2a:	f7ff fbe1 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca2e:	22ff      	movs	r2, #255	@ 0xff
 801ca30:	2100      	movs	r1, #0
 801ca32:	484f      	ldr	r0, [pc, #316]	@ (801cb70 <csv_header+0x188>)
 801ca34:	f002 f95a 	bl	801ecec <memset>
		sprintf(buffer, "timestamp ,");
 801ca38:	4950      	ldr	r1, [pc, #320]	@ (801cb7c <csv_header+0x194>)
 801ca3a:	484d      	ldr	r0, [pc, #308]	@ (801cb70 <csv_header+0x188>)
 801ca3c:	f002 f80c 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca40:	494b      	ldr	r1, [pc, #300]	@ (801cb70 <csv_header+0x188>)
 801ca42:	484c      	ldr	r0, [pc, #304]	@ (801cb74 <csv_header+0x18c>)
 801ca44:	f7ff fbd4 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca48:	22ff      	movs	r2, #255	@ 0xff
 801ca4a:	2100      	movs	r1, #0
 801ca4c:	4848      	ldr	r0, [pc, #288]	@ (801cb70 <csv_header+0x188>)
 801ca4e:	f002 f94d 	bl	801ecec <memset>
		sprintf(buffer, "location ,");
 801ca52:	494b      	ldr	r1, [pc, #300]	@ (801cb80 <csv_header+0x198>)
 801ca54:	4846      	ldr	r0, [pc, #280]	@ (801cb70 <csv_header+0x188>)
 801ca56:	f001 ffff 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca5a:	4945      	ldr	r1, [pc, #276]	@ (801cb70 <csv_header+0x188>)
 801ca5c:	4845      	ldr	r0, [pc, #276]	@ (801cb74 <csv_header+0x18c>)
 801ca5e:	f7ff fbc7 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca62:	22ff      	movs	r2, #255	@ 0xff
 801ca64:	2100      	movs	r1, #0
 801ca66:	4842      	ldr	r0, [pc, #264]	@ (801cb70 <csv_header+0x188>)
 801ca68:	f002 f940 	bl	801ecec <memset>
		sprintf(buffer, "Filename ,");
 801ca6c:	4945      	ldr	r1, [pc, #276]	@ (801cb84 <csv_header+0x19c>)
 801ca6e:	4840      	ldr	r0, [pc, #256]	@ (801cb70 <csv_header+0x188>)
 801ca70:	f001 fff2 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca74:	493e      	ldr	r1, [pc, #248]	@ (801cb70 <csv_header+0x188>)
 801ca76:	483f      	ldr	r0, [pc, #252]	@ (801cb74 <csv_header+0x18c>)
 801ca78:	f7ff fbba 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca7c:	22ff      	movs	r2, #255	@ 0xff
 801ca7e:	2100      	movs	r1, #0
 801ca80:	483b      	ldr	r0, [pc, #236]	@ (801cb70 <csv_header+0x188>)
 801ca82:	f002 f933 	bl	801ecec <memset>
		sprintf(buffer, "group ,");
 801ca86:	4940      	ldr	r1, [pc, #256]	@ (801cb88 <csv_header+0x1a0>)
 801ca88:	4839      	ldr	r0, [pc, #228]	@ (801cb70 <csv_header+0x188>)
 801ca8a:	f001 ffe5 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801ca8e:	4938      	ldr	r1, [pc, #224]	@ (801cb70 <csv_header+0x188>)
 801ca90:	4838      	ldr	r0, [pc, #224]	@ (801cb74 <csv_header+0x18c>)
 801ca92:	f7ff fbad 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ca96:	22ff      	movs	r2, #255	@ 0xff
 801ca98:	2100      	movs	r1, #0
 801ca9a:	4835      	ldr	r0, [pc, #212]	@ (801cb70 <csv_header+0x188>)
 801ca9c:	f002 f926 	bl	801ecec <memset>
		sprintf(buffer, "co2 ,");
 801caa0:	493a      	ldr	r1, [pc, #232]	@ (801cb8c <csv_header+0x1a4>)
 801caa2:	4833      	ldr	r0, [pc, #204]	@ (801cb70 <csv_header+0x188>)
 801caa4:	f001 ffd8 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caa8:	4931      	ldr	r1, [pc, #196]	@ (801cb70 <csv_header+0x188>)
 801caaa:	4832      	ldr	r0, [pc, #200]	@ (801cb74 <csv_header+0x18c>)
 801caac:	f7ff fba0 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cab0:	22ff      	movs	r2, #255	@ 0xff
 801cab2:	2100      	movs	r1, #0
 801cab4:	482e      	ldr	r0, [pc, #184]	@ (801cb70 <csv_header+0x188>)
 801cab6:	f002 f919 	bl	801ecec <memset>
		sprintf(buffer, "temperature ,");
 801caba:	4935      	ldr	r1, [pc, #212]	@ (801cb90 <csv_header+0x1a8>)
 801cabc:	482c      	ldr	r0, [pc, #176]	@ (801cb70 <csv_header+0x188>)
 801cabe:	f001 ffcb 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cac2:	492b      	ldr	r1, [pc, #172]	@ (801cb70 <csv_header+0x188>)
 801cac4:	482b      	ldr	r0, [pc, #172]	@ (801cb74 <csv_header+0x18c>)
 801cac6:	f7ff fb93 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801caca:	22ff      	movs	r2, #255	@ 0xff
 801cacc:	2100      	movs	r1, #0
 801cace:	4828      	ldr	r0, [pc, #160]	@ (801cb70 <csv_header+0x188>)
 801cad0:	f002 f90c 	bl	801ecec <memset>
		sprintf(buffer, "humidity ,");
 801cad4:	492f      	ldr	r1, [pc, #188]	@ (801cb94 <csv_header+0x1ac>)
 801cad6:	4826      	ldr	r0, [pc, #152]	@ (801cb70 <csv_header+0x188>)
 801cad8:	f001 ffbe 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cadc:	4924      	ldr	r1, [pc, #144]	@ (801cb70 <csv_header+0x188>)
 801cade:	4825      	ldr	r0, [pc, #148]	@ (801cb74 <csv_header+0x18c>)
 801cae0:	f7ff fb86 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cae4:	22ff      	movs	r2, #255	@ 0xff
 801cae6:	2100      	movs	r1, #0
 801cae8:	4821      	ldr	r0, [pc, #132]	@ (801cb70 <csv_header+0x188>)
 801caea:	f002 f8ff 	bl	801ecec <memset>
		sprintf(buffer, "pir ,");
 801caee:	492a      	ldr	r1, [pc, #168]	@ (801cb98 <csv_header+0x1b0>)
 801caf0:	481f      	ldr	r0, [pc, #124]	@ (801cb70 <csv_header+0x188>)
 801caf2:	f001 ffb1 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801caf6:	491e      	ldr	r1, [pc, #120]	@ (801cb70 <csv_header+0x188>)
 801caf8:	481e      	ldr	r0, [pc, #120]	@ (801cb74 <csv_header+0x18c>)
 801cafa:	f7ff fb79 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cafe:	22ff      	movs	r2, #255	@ 0xff
 801cb00:	2100      	movs	r1, #0
 801cb02:	481b      	ldr	r0, [pc, #108]	@ (801cb70 <csv_header+0x188>)
 801cb04:	f002 f8f2 	bl	801ecec <memset>
		sprintf(buffer, "pm2.5 ,");
 801cb08:	4924      	ldr	r1, [pc, #144]	@ (801cb9c <csv_header+0x1b4>)
 801cb0a:	4819      	ldr	r0, [pc, #100]	@ (801cb70 <csv_header+0x188>)
 801cb0c:	f001 ffa4 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb10:	4917      	ldr	r1, [pc, #92]	@ (801cb70 <csv_header+0x188>)
 801cb12:	4818      	ldr	r0, [pc, #96]	@ (801cb74 <csv_header+0x18c>)
 801cb14:	f7ff fb6c 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb18:	22ff      	movs	r2, #255	@ 0xff
 801cb1a:	2100      	movs	r1, #0
 801cb1c:	4814      	ldr	r0, [pc, #80]	@ (801cb70 <csv_header+0x188>)
 801cb1e:	f002 f8e5 	bl	801ecec <memset>
		sprintf(buffer, "port ,");
 801cb22:	491f      	ldr	r1, [pc, #124]	@ (801cba0 <csv_header+0x1b8>)
 801cb24:	4812      	ldr	r0, [pc, #72]	@ (801cb70 <csv_header+0x188>)
 801cb26:	f001 ff97 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb2a:	4911      	ldr	r1, [pc, #68]	@ (801cb70 <csv_header+0x188>)
 801cb2c:	4811      	ldr	r0, [pc, #68]	@ (801cb74 <csv_header+0x18c>)
 801cb2e:	f7ff fb5f 	bl	801c1f0 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801cb32:	22ff      	movs	r2, #255	@ 0xff
 801cb34:	2100      	movs	r1, #0
 801cb36:	480e      	ldr	r0, [pc, #56]	@ (801cb70 <csv_header+0x188>)
 801cb38:	f002 f8d8 	bl	801ecec <memset>
		sprintf(buffer, "battery \n\n");
 801cb3c:	4919      	ldr	r1, [pc, #100]	@ (801cba4 <csv_header+0x1bc>)
 801cb3e:	480c      	ldr	r0, [pc, #48]	@ (801cb70 <csv_header+0x188>)
 801cb40:	f001 ff8a 	bl	801ea58 <siprintf>
		Update_File(_Flash_Packet.filename_with_format, buffer);
 801cb44:	490a      	ldr	r1, [pc, #40]	@ (801cb70 <csv_header+0x188>)
 801cb46:	480b      	ldr	r0, [pc, #44]	@ (801cb74 <csv_header+0x18c>)
 801cb48:	f7ff fb52 	bl	801c1f0 <Update_File>

		Unmount_SD("/");
 801cb4c:	4805      	ldr	r0, [pc, #20]	@ (801cb64 <csv_header+0x17c>)
 801cb4e:	f7ff fa8d 	bl	801c06c <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801cb52:	4b05      	ldr	r3, [pc, #20]	@ (801cb68 <csv_header+0x180>)
 801cb54:	781b      	ldrb	r3, [r3, #0]
 801cb56:	b25a      	sxtb	r2, r3
 801cb58:	4b13      	ldr	r3, [pc, #76]	@ (801cba8 <csv_header+0x1c0>)
 801cb5a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

}
 801cb5e:	bf00      	nop
 801cb60:	bd80      	pop	{r7, pc}
 801cb62:	bf00      	nop
 801cb64:	08024b08 	.word	0x08024b08
 801cb68:	20002320 	.word	0x20002320
 801cb6c:	08024c54 	.word	0x08024c54
 801cb70:	2000232c 	.word	0x2000232c
 801cb74:	20001461 	.word	0x20001461
 801cb78:	08024c60 	.word	0x08024c60
 801cb7c:	08024c68 	.word	0x08024c68
 801cb80:	08024c74 	.word	0x08024c74
 801cb84:	08024c80 	.word	0x08024c80
 801cb88:	08024c8c 	.word	0x08024c8c
 801cb8c:	08024c94 	.word	0x08024c94
 801cb90:	08024c9c 	.word	0x08024c9c
 801cb94:	08024cac 	.word	0x08024cac
 801cb98:	08024cb8 	.word	0x08024cb8
 801cb9c:	08024cc0 	.word	0x08024cc0
 801cba0:	08024cc8 	.word	0x08024cc8
 801cba4:	08024cd0 	.word	0x08024cd0
 801cba8:	20001530 	.word	0x20001530

0801cbac <filesaving_process>:
uint8_t filesaving_process() {
 801cbac:	b580      	push	{r7, lr}
 801cbae:	af00      	add	r7, sp, #0
//	__disable_irq();

	memset(buffer, 0, sizeof(buffer));
 801cbb0:	22ff      	movs	r2, #255	@ 0xff
 801cbb2:	2100      	movs	r1, #0
 801cbb4:	480f      	ldr	r0, [pc, #60]	@ (801cbf4 <filesaving_process+0x48>)
 801cbb6:	f002 f899 	bl	801ecec <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801cbba:	4b0f      	ldr	r3, [pc, #60]	@ (801cbf8 <filesaving_process+0x4c>)
 801cbbc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d002      	beq.n	801cbca <filesaving_process+0x1e>
		csv_update();
 801cbc4:	f7ff fd82 	bl	801c6cc <csv_update>
 801cbc8:	e001      	b.n	801cbce <filesaving_process+0x22>
	} else {
		json_update();
 801cbca:	f7ff fbcd 	bl	801c368 <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801cbce:	4b0a      	ldr	r3, [pc, #40]	@ (801cbf8 <filesaving_process+0x4c>)
 801cbd0:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d006      	beq.n	801cbe6 <filesaving_process+0x3a>
			{
		//blink red so user can know
		blink_red();
 801cbd8:	f7e5 fa4e 	bl	8002078 <blink_red>
		datawritten = 2;
 801cbdc:	4b07      	ldr	r3, [pc, #28]	@ (801cbfc <filesaving_process+0x50>)
 801cbde:	2202      	movs	r2, #2
 801cbe0:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801cbe2:	2301      	movs	r3, #1
 801cbe4:	e003      	b.n	801cbee <filesaving_process+0x42>
	} else //packet written succesfully
	{
		datawritten = 1;
 801cbe6:	4b05      	ldr	r3, [pc, #20]	@ (801cbfc <filesaving_process+0x50>)
 801cbe8:	2201      	movs	r2, #1
 801cbea:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801cbec:	2300      	movs	r3, #0
//	__enable_irq();
}
 801cbee:	4618      	mov	r0, r3
 801cbf0:	bd80      	pop	{r7, pc}
 801cbf2:	bf00      	nop
 801cbf4:	2000232c 	.word	0x2000232c
 801cbf8:	20001530 	.word	0x20001530
 801cbfc:	20002328 	.word	0x20002328

0801cc00 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b08c      	sub	sp, #48	@ 0x30
 801cc04:	af04      	add	r7, sp, #16
 801cc06:	6078      	str	r0, [r7, #4]
 801cc08:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801cc0a:	f107 031c 	add.w	r3, r7, #28
 801cc0e:	2200      	movs	r2, #0
 801cc10:	4619      	mov	r1, r3
 801cc12:	4832      	ldr	r0, [pc, #200]	@ (801ccdc <createfile+0xdc>)
 801cc14:	f7ec ff97 	bl	8009b46 <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801cc18:	f107 0308 	add.w	r3, r7, #8
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	4619      	mov	r1, r3
 801cc20:	482e      	ldr	r0, [pc, #184]	@ (801ccdc <createfile+0xdc>)
 801cc22:	f7ec feae 	bl	8009982 <HAL_RTC_GetTime>

	sprintf(_Flash_Packet.filename_with_format, "%s_%02d-%02d-%02d%s", filename,sDate.Year, sDate.Month, sDate.Date, fileformat);
 801cc26:	7ffb      	ldrb	r3, [r7, #31]
 801cc28:	4618      	mov	r0, r3
 801cc2a:	7f7b      	ldrb	r3, [r7, #29]
 801cc2c:	461a      	mov	r2, r3
 801cc2e:	7fbb      	ldrb	r3, [r7, #30]
 801cc30:	4619      	mov	r1, r3
 801cc32:	683b      	ldr	r3, [r7, #0]
 801cc34:	9302      	str	r3, [sp, #8]
 801cc36:	9101      	str	r1, [sp, #4]
 801cc38:	9200      	str	r2, [sp, #0]
 801cc3a:	4603      	mov	r3, r0
 801cc3c:	687a      	ldr	r2, [r7, #4]
 801cc3e:	4928      	ldr	r1, [pc, #160]	@ (801cce0 <createfile+0xe0>)
 801cc40:	4828      	ldr	r0, [pc, #160]	@ (801cce4 <createfile+0xe4>)
 801cc42:	f001 ff09 	bl	801ea58 <siprintf>
	sprintf(_Flash_Packet.filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,sDate.Month, sDate.Date);
 801cc46:	7ffb      	ldrb	r3, [r7, #31]
 801cc48:	4619      	mov	r1, r3
 801cc4a:	7f7b      	ldrb	r3, [r7, #29]
 801cc4c:	7fba      	ldrb	r2, [r7, #30]
 801cc4e:	9201      	str	r2, [sp, #4]
 801cc50:	9300      	str	r3, [sp, #0]
 801cc52:	460b      	mov	r3, r1
 801cc54:	687a      	ldr	r2, [r7, #4]
 801cc56:	4924      	ldr	r1, [pc, #144]	@ (801cce8 <createfile+0xe8>)
 801cc58:	4824      	ldr	r0, [pc, #144]	@ (801ccec <createfile+0xec>)
 801cc5a:	f001 fefd 	bl	801ea58 <siprintf>

	set_param_flags();
 801cc5e:	4b24      	ldr	r3, [pc, #144]	@ (801ccf0 <createfile+0xf0>)
 801cc60:	2201      	movs	r2, #1
 801cc62:	701a      	strb	r2, [r3, #0]
 801cc64:	4b23      	ldr	r3, [pc, #140]	@ (801ccf4 <createfile+0xf4>)
 801cc66:	2201      	movs	r2, #1
 801cc68:	701a      	strb	r2, [r3, #0]
	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801cc6a:	4823      	ldr	r0, [pc, #140]	@ (801ccf8 <createfile+0xf8>)
 801cc6c:	f7ff f9d2 	bl	801c014 <Mount_SD>
 801cc70:	4603      	mov	r3, r0
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d002      	beq.n	801cc7c <createfile+0x7c>
	} else {
		//	__enable_irq();
		return -1;
 801cc76:	f04f 33ff 	mov.w	r3, #4294967295
 801cc7a:	e02b      	b.n	801ccd4 <createfile+0xd4>
	}
	Unmount_SD("/");
 801cc7c:	481e      	ldr	r0, [pc, #120]	@ (801ccf8 <createfile+0xf8>)
 801cc7e:	f7ff f9f5 	bl	801c06c <Unmount_SD>



	fresult1 = Mount_SD("/");
 801cc82:	481d      	ldr	r0, [pc, #116]	@ (801ccf8 <createfile+0xf8>)
 801cc84:	f7ff f9c6 	bl	801c014 <Mount_SD>
 801cc88:	4603      	mov	r3, r0
 801cc8a:	461a      	mov	r2, r3
 801cc8c:	4b1b      	ldr	r3, [pc, #108]	@ (801ccfc <createfile+0xfc>)
 801cc8e:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801cc90:	4b1a      	ldr	r3, [pc, #104]	@ (801ccfc <createfile+0xfc>)
 801cc92:	781b      	ldrb	r3, [r3, #0]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d119      	bne.n	801cccc <createfile+0xcc>





		fresult1 = Create_File(_Flash_Packet.filename_with_format);
 801cc98:	4812      	ldr	r0, [pc, #72]	@ (801cce4 <createfile+0xe4>)
 801cc9a:	f7ff fa0f 	bl	801c0bc <Create_File>
 801cc9e:	4603      	mov	r3, r0
 801cca0:	461a      	mov	r2, r3
 801cca2:	4b16      	ldr	r3, [pc, #88]	@ (801ccfc <createfile+0xfc>)
 801cca4:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801cca6:	4814      	ldr	r0, [pc, #80]	@ (801ccf8 <createfile+0xf8>)
 801cca8:	f7ff f9e0 	bl	801c06c <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801ccac:	4b14      	ldr	r3, [pc, #80]	@ (801cd00 <createfile+0x100>)
 801ccae:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d00d      	beq.n	801ccd2 <createfile+0xd2>
			if (file_already_exist) {
 801ccb6:	4b13      	ldr	r3, [pc, #76]	@ (801cd04 <createfile+0x104>)
 801ccb8:	781b      	ldrb	r3, [r3, #0]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d003      	beq.n	801ccc6 <createfile+0xc6>
				file_already_exist = 0;
 801ccbe:	4b11      	ldr	r3, [pc, #68]	@ (801cd04 <createfile+0x104>)
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	701a      	strb	r2, [r3, #0]
 801ccc4:	e005      	b.n	801ccd2 <createfile+0xd2>
			} else {
				csv_header();  //json does not require an header only csv
 801ccc6:	f7ff fe8f 	bl	801c9e8 <csv_header>
 801ccca:	e002      	b.n	801ccd2 <createfile+0xd2>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801cccc:	f04f 33ff 	mov.w	r3, #4294967295
 801ccd0:	e000      	b.n	801ccd4 <createfile+0xd4>
	}
//	__enable_irq();
	return 0;
 801ccd2:	2300      	movs	r3, #0
}
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	3720      	adds	r7, #32
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	bd80      	pop	{r7, pc}
 801ccdc:	20001898 	.word	0x20001898
 801cce0:	08024cdc 	.word	0x08024cdc
 801cce4:	20001461 	.word	0x20001461
 801cce8:	08024cf0 	.word	0x08024cf0
 801ccec:	200014c5 	.word	0x200014c5
 801ccf0:	20001579 	.word	0x20001579
 801ccf4:	2000157a 	.word	0x2000157a
 801ccf8:	08024b08 	.word	0x08024b08
 801ccfc:	20002320 	.word	0x20002320
 801cd00:	20001530 	.word	0x20001530
 801cd04:	20002321 	.word	0x20002321

0801cd08 <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801cd0c:	4905      	ldr	r1, [pc, #20]	@ (801cd24 <MX_USB_DEVICE_DeInit+0x1c>)
 801cd0e:	4806      	ldr	r0, [pc, #24]	@ (801cd28 <MX_USB_DEVICE_DeInit+0x20>)
 801cd10:	f7f8 ff90 	bl	8015c34 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801cd14:	4804      	ldr	r0, [pc, #16]	@ (801cd28 <MX_USB_DEVICE_DeInit+0x20>)
 801cd16:	f7fa ff86 	bl	8017c26 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801cd1a:	4803      	ldr	r0, [pc, #12]	@ (801cd28 <MX_USB_DEVICE_DeInit+0x20>)
 801cd1c:	f7fa ff11 	bl	8017b42 <USBD_DeInit>

}
 801cd20:	bf00      	nop
 801cd22:	bd80      	pop	{r7, pc}
 801cd24:	2000011c 	.word	0x2000011c
 801cd28:	2000242c 	.word	0x2000242c

0801cd2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cd30:	2200      	movs	r2, #0
 801cd32:	4912      	ldr	r1, [pc, #72]	@ (801cd7c <MX_USB_DEVICE_Init+0x50>)
 801cd34:	4812      	ldr	r0, [pc, #72]	@ (801cd80 <MX_USB_DEVICE_Init+0x54>)
 801cd36:	f7fa fed4 	bl	8017ae2 <USBD_Init>
 801cd3a:	4603      	mov	r3, r0
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d001      	beq.n	801cd44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cd40:	f7e6 fc98 	bl	8003674 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801cd44:	490f      	ldr	r1, [pc, #60]	@ (801cd84 <MX_USB_DEVICE_Init+0x58>)
 801cd46:	480e      	ldr	r0, [pc, #56]	@ (801cd80 <MX_USB_DEVICE_Init+0x54>)
 801cd48:	f7fa ff2b 	bl	8017ba2 <USBD_RegisterClass>
 801cd4c:	4603      	mov	r3, r0
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d001      	beq.n	801cd56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801cd52:	f7e6 fc8f 	bl	8003674 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801cd56:	490c      	ldr	r1, [pc, #48]	@ (801cd88 <MX_USB_DEVICE_Init+0x5c>)
 801cd58:	4809      	ldr	r0, [pc, #36]	@ (801cd80 <MX_USB_DEVICE_Init+0x54>)
 801cd5a:	f7f9 f973 	bl	8016044 <USBD_MSC_RegisterStorage>
 801cd5e:	4603      	mov	r3, r0
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d001      	beq.n	801cd68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801cd64:	f7e6 fc86 	bl	8003674 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cd68:	4805      	ldr	r0, [pc, #20]	@ (801cd80 <MX_USB_DEVICE_Init+0x54>)
 801cd6a:	f7fa ff50 	bl	8017c0e <USBD_Start>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d001      	beq.n	801cd78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801cd74:	f7e6 fc7e 	bl	8003674 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cd78:	bf00      	nop
 801cd7a:	bd80      	pop	{r7, pc}
 801cd7c:	200000cc 	.word	0x200000cc
 801cd80:	2000242c 	.word	0x2000242c
 801cd84:	2000004c 	.word	0x2000004c
 801cd88:	2000011c 	.word	0x2000011c

0801cd8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd8c:	b480      	push	{r7}
 801cd8e:	b083      	sub	sp, #12
 801cd90:	af00      	add	r7, sp, #0
 801cd92:	4603      	mov	r3, r0
 801cd94:	6039      	str	r1, [r7, #0]
 801cd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cd98:	683b      	ldr	r3, [r7, #0]
 801cd9a:	2212      	movs	r2, #18
 801cd9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cd9e:	4b03      	ldr	r3, [pc, #12]	@ (801cdac <USBD_FS_DeviceDescriptor+0x20>)
}
 801cda0:	4618      	mov	r0, r3
 801cda2:	370c      	adds	r7, #12
 801cda4:	46bd      	mov	sp, r7
 801cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdaa:	4770      	bx	lr
 801cdac:	200000e8 	.word	0x200000e8

0801cdb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdb0:	b480      	push	{r7}
 801cdb2:	b083      	sub	sp, #12
 801cdb4:	af00      	add	r7, sp, #0
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	6039      	str	r1, [r7, #0]
 801cdba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cdbc:	683b      	ldr	r3, [r7, #0]
 801cdbe:	2204      	movs	r2, #4
 801cdc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cdc2:	4b03      	ldr	r3, [pc, #12]	@ (801cdd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cdc4:	4618      	mov	r0, r3
 801cdc6:	370c      	adds	r7, #12
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdce:	4770      	bx	lr
 801cdd0:	200000fc 	.word	0x200000fc

0801cdd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	b082      	sub	sp, #8
 801cdd8:	af00      	add	r7, sp, #0
 801cdda:	4603      	mov	r3, r0
 801cddc:	6039      	str	r1, [r7, #0]
 801cdde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cde0:	79fb      	ldrb	r3, [r7, #7]
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d105      	bne.n	801cdf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cde6:	683a      	ldr	r2, [r7, #0]
 801cde8:	4907      	ldr	r1, [pc, #28]	@ (801ce08 <USBD_FS_ProductStrDescriptor+0x34>)
 801cdea:	4808      	ldr	r0, [pc, #32]	@ (801ce0c <USBD_FS_ProductStrDescriptor+0x38>)
 801cdec:	f7fc f8da 	bl	8018fa4 <USBD_GetString>
 801cdf0:	e004      	b.n	801cdfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cdf2:	683a      	ldr	r2, [r7, #0]
 801cdf4:	4904      	ldr	r1, [pc, #16]	@ (801ce08 <USBD_FS_ProductStrDescriptor+0x34>)
 801cdf6:	4805      	ldr	r0, [pc, #20]	@ (801ce0c <USBD_FS_ProductStrDescriptor+0x38>)
 801cdf8:	f7fc f8d4 	bl	8018fa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cdfc:	4b02      	ldr	r3, [pc, #8]	@ (801ce08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801cdfe:	4618      	mov	r0, r3
 801ce00:	3708      	adds	r7, #8
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bd80      	pop	{r7, pc}
 801ce06:	bf00      	nop
 801ce08:	20002708 	.word	0x20002708
 801ce0c:	08024d04 	.word	0x08024d04

0801ce10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b082      	sub	sp, #8
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	4603      	mov	r3, r0
 801ce18:	6039      	str	r1, [r7, #0]
 801ce1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ce1c:	683a      	ldr	r2, [r7, #0]
 801ce1e:	4904      	ldr	r1, [pc, #16]	@ (801ce30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801ce20:	4804      	ldr	r0, [pc, #16]	@ (801ce34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ce22:	f7fc f8bf 	bl	8018fa4 <USBD_GetString>
  return USBD_StrDesc;
 801ce26:	4b02      	ldr	r3, [pc, #8]	@ (801ce30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801ce28:	4618      	mov	r0, r3
 801ce2a:	3708      	adds	r7, #8
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}
 801ce30:	20002708 	.word	0x20002708
 801ce34:	08024d18 	.word	0x08024d18

0801ce38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	b082      	sub	sp, #8
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	4603      	mov	r3, r0
 801ce40:	6039      	str	r1, [r7, #0]
 801ce42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ce44:	683b      	ldr	r3, [r7, #0]
 801ce46:	221a      	movs	r2, #26
 801ce48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ce4a:	f000 f843 	bl	801ced4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ce4e:	4b02      	ldr	r3, [pc, #8]	@ (801ce58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801ce50:	4618      	mov	r0, r3
 801ce52:	3708      	adds	r7, #8
 801ce54:	46bd      	mov	sp, r7
 801ce56:	bd80      	pop	{r7, pc}
 801ce58:	20000100 	.word	0x20000100

0801ce5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	b082      	sub	sp, #8
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	4603      	mov	r3, r0
 801ce64:	6039      	str	r1, [r7, #0]
 801ce66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ce68:	79fb      	ldrb	r3, [r7, #7]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d105      	bne.n	801ce7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ce6e:	683a      	ldr	r2, [r7, #0]
 801ce70:	4907      	ldr	r1, [pc, #28]	@ (801ce90 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ce72:	4808      	ldr	r0, [pc, #32]	@ (801ce94 <USBD_FS_ConfigStrDescriptor+0x38>)
 801ce74:	f7fc f896 	bl	8018fa4 <USBD_GetString>
 801ce78:	e004      	b.n	801ce84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ce7a:	683a      	ldr	r2, [r7, #0]
 801ce7c:	4904      	ldr	r1, [pc, #16]	@ (801ce90 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ce7e:	4805      	ldr	r0, [pc, #20]	@ (801ce94 <USBD_FS_ConfigStrDescriptor+0x38>)
 801ce80:	f7fc f890 	bl	8018fa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ce84:	4b02      	ldr	r3, [pc, #8]	@ (801ce90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801ce86:	4618      	mov	r0, r3
 801ce88:	3708      	adds	r7, #8
 801ce8a:	46bd      	mov	sp, r7
 801ce8c:	bd80      	pop	{r7, pc}
 801ce8e:	bf00      	nop
 801ce90:	20002708 	.word	0x20002708
 801ce94:	08024d2c 	.word	0x08024d2c

0801ce98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce98:	b580      	push	{r7, lr}
 801ce9a:	b082      	sub	sp, #8
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	4603      	mov	r3, r0
 801cea0:	6039      	str	r1, [r7, #0]
 801cea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cea4:	79fb      	ldrb	r3, [r7, #7]
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d105      	bne.n	801ceb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ceaa:	683a      	ldr	r2, [r7, #0]
 801ceac:	4907      	ldr	r1, [pc, #28]	@ (801cecc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ceae:	4808      	ldr	r0, [pc, #32]	@ (801ced0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ceb0:	f7fc f878 	bl	8018fa4 <USBD_GetString>
 801ceb4:	e004      	b.n	801cec0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ceb6:	683a      	ldr	r2, [r7, #0]
 801ceb8:	4904      	ldr	r1, [pc, #16]	@ (801cecc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ceba:	4805      	ldr	r0, [pc, #20]	@ (801ced0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cebc:	f7fc f872 	bl	8018fa4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cec0:	4b02      	ldr	r3, [pc, #8]	@ (801cecc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801cec2:	4618      	mov	r0, r3
 801cec4:	3708      	adds	r7, #8
 801cec6:	46bd      	mov	sp, r7
 801cec8:	bd80      	pop	{r7, pc}
 801ceca:	bf00      	nop
 801cecc:	20002708 	.word	0x20002708
 801ced0:	08024d38 	.word	0x08024d38

0801ced4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ced4:	b580      	push	{r7, lr}
 801ced6:	b084      	sub	sp, #16
 801ced8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 801ceda:	68fa      	ldr	r2, [r7, #12]
 801cedc:	68bb      	ldr	r3, [r7, #8]
 801cede:	4413      	add	r3, r2
 801cee0:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d009      	beq.n	801cefc <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cee8:	2208      	movs	r2, #8
 801ceea:	4906      	ldr	r1, [pc, #24]	@ (801cf04 <Get_SerialNum+0x30>)
 801ceec:	68f8      	ldr	r0, [r7, #12]
 801ceee:	f000 f80d 	bl	801cf0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cef2:	2204      	movs	r2, #4
 801cef4:	4904      	ldr	r1, [pc, #16]	@ (801cf08 <Get_SerialNum+0x34>)
 801cef6:	6878      	ldr	r0, [r7, #4]
 801cef8:	f000 f808 	bl	801cf0c <IntToUnicode>
  }
}
 801cefc:	bf00      	nop
 801cefe:	3710      	adds	r7, #16
 801cf00:	46bd      	mov	sp, r7
 801cf02:	bd80      	pop	{r7, pc}
 801cf04:	20000102 	.word	0x20000102
 801cf08:	20000112 	.word	0x20000112

0801cf0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cf0c:	b480      	push	{r7}
 801cf0e:	b087      	sub	sp, #28
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	60f8      	str	r0, [r7, #12]
 801cf14:	60b9      	str	r1, [r7, #8]
 801cf16:	4613      	mov	r3, r2
 801cf18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801cf1e:	2300      	movs	r3, #0
 801cf20:	75fb      	strb	r3, [r7, #23]
 801cf22:	e027      	b.n	801cf74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	0f1b      	lsrs	r3, r3, #28
 801cf28:	2b09      	cmp	r3, #9
 801cf2a:	d80b      	bhi.n	801cf44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	0f1b      	lsrs	r3, r3, #28
 801cf30:	b2da      	uxtb	r2, r3
 801cf32:	7dfb      	ldrb	r3, [r7, #23]
 801cf34:	005b      	lsls	r3, r3, #1
 801cf36:	4619      	mov	r1, r3
 801cf38:	68bb      	ldr	r3, [r7, #8]
 801cf3a:	440b      	add	r3, r1
 801cf3c:	3230      	adds	r2, #48	@ 0x30
 801cf3e:	b2d2      	uxtb	r2, r2
 801cf40:	701a      	strb	r2, [r3, #0]
 801cf42:	e00a      	b.n	801cf5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cf44:	68fb      	ldr	r3, [r7, #12]
 801cf46:	0f1b      	lsrs	r3, r3, #28
 801cf48:	b2da      	uxtb	r2, r3
 801cf4a:	7dfb      	ldrb	r3, [r7, #23]
 801cf4c:	005b      	lsls	r3, r3, #1
 801cf4e:	4619      	mov	r1, r3
 801cf50:	68bb      	ldr	r3, [r7, #8]
 801cf52:	440b      	add	r3, r1
 801cf54:	3237      	adds	r2, #55	@ 0x37
 801cf56:	b2d2      	uxtb	r2, r2
 801cf58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	011b      	lsls	r3, r3, #4
 801cf5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cf60:	7dfb      	ldrb	r3, [r7, #23]
 801cf62:	005b      	lsls	r3, r3, #1
 801cf64:	3301      	adds	r3, #1
 801cf66:	68ba      	ldr	r2, [r7, #8]
 801cf68:	4413      	add	r3, r2
 801cf6a:	2200      	movs	r2, #0
 801cf6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cf6e:	7dfb      	ldrb	r3, [r7, #23]
 801cf70:	3301      	adds	r3, #1
 801cf72:	75fb      	strb	r3, [r7, #23]
 801cf74:	7dfa      	ldrb	r2, [r7, #23]
 801cf76:	79fb      	ldrb	r3, [r7, #7]
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	d3d3      	bcc.n	801cf24 <IntToUnicode+0x18>
  }
}
 801cf7c:	bf00      	nop
 801cf7e:	bf00      	nop
 801cf80:	371c      	adds	r7, #28
 801cf82:	46bd      	mov	sp, r7
 801cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf88:	4770      	bx	lr

0801cf8a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801cf8a:	b480      	push	{r7}
 801cf8c:	b083      	sub	sp, #12
 801cf8e:	af00      	add	r7, sp, #0
 801cf90:	4603      	mov	r3, r0
 801cf92:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801cf94:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801cf96:	4618      	mov	r0, r3
 801cf98:	370c      	adds	r7, #12
 801cf9a:	46bd      	mov	sp, r7
 801cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfa0:	4770      	bx	lr
	...

0801cfa4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801cfa4:	b580      	push	{r7, lr}
 801cfa6:	b08e      	sub	sp, #56	@ 0x38
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	4603      	mov	r3, r0
 801cfac:	60b9      	str	r1, [r7, #8]
 801cfae:	607a      	str	r2, [r7, #4]
 801cfb0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801cfb2:	23ff      	movs	r3, #255	@ 0xff
 801cfb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801cfb8:	f107 0314 	add.w	r3, r7, #20
 801cfbc:	4619      	mov	r1, r3
 801cfbe:	480a      	ldr	r0, [pc, #40]	@ (801cfe8 <STORAGE_GetCapacity_FS+0x44>)
 801cfc0:	f7ed fe5c 	bl	800ac7c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801cfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfc6:	1e5a      	subs	r2, r3, #1
 801cfc8:	68bb      	ldr	r3, [r7, #8]
 801cfca:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801cfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfce:	b29a      	uxth	r2, r3
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  return ret;
 801cfda:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE END 3 */
}
 801cfde:	4618      	mov	r0, r3
 801cfe0:	3738      	adds	r7, #56	@ 0x38
 801cfe2:	46bd      	mov	sp, r7
 801cfe4:	bd80      	pop	{r7, pc}
 801cfe6:	bf00      	nop
 801cfe8:	200018b8 	.word	0x200018b8

0801cfec <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801cfec:	b480      	push	{r7}
 801cfee:	b083      	sub	sp, #12
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	4603      	mov	r3, r0
 801cff4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801cff6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cff8:	4618      	mov	r0, r3
 801cffa:	370c      	adds	r7, #12
 801cffc:	46bd      	mov	sp, r7
 801cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d002:	4770      	bx	lr

0801d004 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801d004:	b480      	push	{r7}
 801d006:	b083      	sub	sp, #12
 801d008:	af00      	add	r7, sp, #0
 801d00a:	4603      	mov	r3, r0
 801d00c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801d00e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d010:	4618      	mov	r0, r3
 801d012:	370c      	adds	r7, #12
 801d014:	46bd      	mov	sp, r7
 801d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d01a:	4770      	bx	lr

0801d01c <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d01c:	b580      	push	{r7, lr}
 801d01e:	b088      	sub	sp, #32
 801d020:	af02      	add	r7, sp, #8
 801d022:	60b9      	str	r1, [r7, #8]
 801d024:	607a      	str	r2, [r7, #4]
 801d026:	461a      	mov	r2, r3
 801d028:	4603      	mov	r3, r0
 801d02a:	73fb      	strb	r3, [r7, #15]
 801d02c:	4613      	mov	r3, r2
 801d02e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801d030:	23ff      	movs	r3, #255	@ 0xff
 801d032:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801d034:	f7e7 f868 	bl	8004108 <HAL_GetTick>
 801d038:	4603      	mov	r3, r0
 801d03a:	4a0d      	ldr	r2, [pc, #52]	@ (801d070 <STORAGE_Read_FS+0x54>)
 801d03c:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d03e:	89bb      	ldrh	r3, [r7, #12]
 801d040:	f04f 32ff 	mov.w	r2, #4294967295
 801d044:	9200      	str	r2, [sp, #0]
 801d046:	687a      	ldr	r2, [r7, #4]
 801d048:	68b9      	ldr	r1, [r7, #8]
 801d04a:	480a      	ldr	r0, [pc, #40]	@ (801d074 <STORAGE_Read_FS+0x58>)
 801d04c:	f7ed f8fe 	bl	800a24c <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d050:	bf00      	nop
 801d052:	4808      	ldr	r0, [pc, #32]	@ (801d074 <STORAGE_Read_FS+0x58>)
 801d054:	f7ed fe3e 	bl	800acd4 <HAL_SD_GetCardState>
 801d058:	4603      	mov	r3, r0
 801d05a:	2b04      	cmp	r3, #4
 801d05c:	d1f9      	bne.n	801d052 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801d05e:	2300      	movs	r3, #0
 801d060:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d062:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801d066:	4618      	mov	r0, r3
 801d068:	3718      	adds	r7, #24
 801d06a:	46bd      	mov	sp, r7
 801d06c:	bd80      	pop	{r7, pc}
 801d06e:	bf00      	nop
 801d070:	200017c0 	.word	0x200017c0
 801d074:	200018b8 	.word	0x200018b8

0801d078 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801d078:	b580      	push	{r7, lr}
 801d07a:	b088      	sub	sp, #32
 801d07c:	af02      	add	r7, sp, #8
 801d07e:	60b9      	str	r1, [r7, #8]
 801d080:	607a      	str	r2, [r7, #4]
 801d082:	461a      	mov	r2, r3
 801d084:	4603      	mov	r3, r0
 801d086:	73fb      	strb	r3, [r7, #15]
 801d088:	4613      	mov	r3, r2
 801d08a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801d08c:	23ff      	movs	r3, #255	@ 0xff
 801d08e:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801d090:	89bb      	ldrh	r3, [r7, #12]
 801d092:	f04f 32ff 	mov.w	r2, #4294967295
 801d096:	9200      	str	r2, [sp, #0]
 801d098:	687a      	ldr	r2, [r7, #4]
 801d09a:	68b9      	ldr	r1, [r7, #8]
 801d09c:	4808      	ldr	r0, [pc, #32]	@ (801d0c0 <STORAGE_Write_FS+0x48>)
 801d09e:	f7ed fabb 	bl	800a618 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801d0a2:	bf00      	nop
 801d0a4:	4806      	ldr	r0, [pc, #24]	@ (801d0c0 <STORAGE_Write_FS+0x48>)
 801d0a6:	f7ed fe15 	bl	800acd4 <HAL_SD_GetCardState>
 801d0aa:	4603      	mov	r3, r0
 801d0ac:	2b04      	cmp	r3, #4
 801d0ae:	d1f9      	bne.n	801d0a4 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801d0b0:	2300      	movs	r3, #0
 801d0b2:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801d0b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	3718      	adds	r7, #24
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bd80      	pop	{r7, pc}
 801d0c0:	200018b8 	.word	0x200018b8

0801d0c4 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801d0c4:	b480      	push	{r7}
 801d0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801d0c8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	46bd      	mov	sp, r7
 801d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0d2:	4770      	bx	lr

0801d0d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b08a      	sub	sp, #40	@ 0x28
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d0dc:	f107 0314 	add.w	r3, r7, #20
 801d0e0:	2200      	movs	r2, #0
 801d0e2:	601a      	str	r2, [r3, #0]
 801d0e4:	605a      	str	r2, [r3, #4]
 801d0e6:	609a      	str	r2, [r3, #8]
 801d0e8:	60da      	str	r2, [r3, #12]
 801d0ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d0f4:	d13a      	bne.n	801d16c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d0f6:	2300      	movs	r3, #0
 801d0f8:	613b      	str	r3, [r7, #16]
 801d0fa:	4b1e      	ldr	r3, [pc, #120]	@ (801d174 <HAL_PCD_MspInit+0xa0>)
 801d0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0fe:	4a1d      	ldr	r2, [pc, #116]	@ (801d174 <HAL_PCD_MspInit+0xa0>)
 801d100:	f043 0301 	orr.w	r3, r3, #1
 801d104:	6313      	str	r3, [r2, #48]	@ 0x30
 801d106:	4b1b      	ldr	r3, [pc, #108]	@ (801d174 <HAL_PCD_MspInit+0xa0>)
 801d108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d10a:	f003 0301 	and.w	r3, r3, #1
 801d10e:	613b      	str	r3, [r7, #16]
 801d110:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801d112:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801d116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d118:	2302      	movs	r3, #2
 801d11a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d11c:	2300      	movs	r3, #0
 801d11e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d120:	2303      	movs	r3, #3
 801d122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801d124:	230a      	movs	r3, #10
 801d126:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d128:	f107 0314 	add.w	r3, r7, #20
 801d12c:	4619      	mov	r1, r3
 801d12e:	4812      	ldr	r0, [pc, #72]	@ (801d178 <HAL_PCD_MspInit+0xa4>)
 801d130:	f7e8 fd4e 	bl	8005bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801d134:	4b0f      	ldr	r3, [pc, #60]	@ (801d174 <HAL_PCD_MspInit+0xa0>)
 801d136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d138:	4a0e      	ldr	r2, [pc, #56]	@ (801d174 <HAL_PCD_MspInit+0xa0>)
 801d13a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d13e:	6353      	str	r3, [r2, #52]	@ 0x34
 801d140:	2300      	movs	r3, #0
 801d142:	60fb      	str	r3, [r7, #12]
 801d144:	4b0b      	ldr	r3, [pc, #44]	@ (801d174 <HAL_PCD_MspInit+0xa0>)
 801d146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d148:	4a0a      	ldr	r2, [pc, #40]	@ (801d174 <HAL_PCD_MspInit+0xa0>)
 801d14a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d14e:	6453      	str	r3, [r2, #68]	@ 0x44
 801d150:	4b08      	ldr	r3, [pc, #32]	@ (801d174 <HAL_PCD_MspInit+0xa0>)
 801d152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801d158:	60fb      	str	r3, [r7, #12]
 801d15a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801d15c:	2200      	movs	r2, #0
 801d15e:	2100      	movs	r1, #0
 801d160:	2043      	movs	r0, #67	@ 0x43
 801d162:	f7e7 fdb4 	bl	8004cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801d166:	2043      	movs	r0, #67	@ 0x43
 801d168:	f7e7 fdcd 	bl	8004d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801d16c:	bf00      	nop
 801d16e:	3728      	adds	r7, #40	@ 0x28
 801d170:	46bd      	mov	sp, r7
 801d172:	bd80      	pop	{r7, pc}
 801d174:	40023800 	.word	0x40023800
 801d178:	40020000 	.word	0x40020000

0801d17c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801d17c:	b580      	push	{r7, lr}
 801d17e:	b082      	sub	sp, #8
 801d180:	af00      	add	r7, sp, #0
 801d182:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	681b      	ldr	r3, [r3, #0]
 801d188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d18c:	d10d      	bne.n	801d1aa <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801d18e:	4b09      	ldr	r3, [pc, #36]	@ (801d1b4 <HAL_PCD_MspDeInit+0x38>)
 801d190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d192:	4a08      	ldr	r2, [pc, #32]	@ (801d1b4 <HAL_PCD_MspDeInit+0x38>)
 801d194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d198:	6353      	str	r3, [r2, #52]	@ 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801d19a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 801d19e:	4806      	ldr	r0, [pc, #24]	@ (801d1b8 <HAL_PCD_MspDeInit+0x3c>)
 801d1a0:	f7e8 fe9a 	bl	8005ed8 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801d1a4:	2043      	movs	r0, #67	@ 0x43
 801d1a6:	f7e7 fdbc 	bl	8004d22 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801d1aa:	bf00      	nop
 801d1ac:	3708      	adds	r7, #8
 801d1ae:	46bd      	mov	sp, r7
 801d1b0:	bd80      	pop	{r7, pc}
 801d1b2:	bf00      	nop
 801d1b4:	40023800 	.word	0x40023800
 801d1b8:	40020000 	.word	0x40020000

0801d1bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1bc:	b580      	push	{r7, lr}
 801d1be:	b082      	sub	sp, #8
 801d1c0:	af00      	add	r7, sp, #0
 801d1c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801d1d0:	4619      	mov	r1, r3
 801d1d2:	4610      	mov	r0, r2
 801d1d4:	f7fa fd83 	bl	8017cde <USBD_LL_SetupStage>
}
 801d1d8:	bf00      	nop
 801d1da:	3708      	adds	r7, #8
 801d1dc:	46bd      	mov	sp, r7
 801d1de:	bd80      	pop	{r7, pc}

0801d1e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	b082      	sub	sp, #8
 801d1e4:	af00      	add	r7, sp, #0
 801d1e6:	6078      	str	r0, [r7, #4]
 801d1e8:	460b      	mov	r3, r1
 801d1ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d1f2:	78fa      	ldrb	r2, [r7, #3]
 801d1f4:	6879      	ldr	r1, [r7, #4]
 801d1f6:	4613      	mov	r3, r2
 801d1f8:	00db      	lsls	r3, r3, #3
 801d1fa:	4413      	add	r3, r2
 801d1fc:	009b      	lsls	r3, r3, #2
 801d1fe:	440b      	add	r3, r1
 801d200:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801d204:	681a      	ldr	r2, [r3, #0]
 801d206:	78fb      	ldrb	r3, [r7, #3]
 801d208:	4619      	mov	r1, r3
 801d20a:	f7fa fdbd 	bl	8017d88 <USBD_LL_DataOutStage>
}
 801d20e:	bf00      	nop
 801d210:	3708      	adds	r7, #8
 801d212:	46bd      	mov	sp, r7
 801d214:	bd80      	pop	{r7, pc}

0801d216 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d216:	b580      	push	{r7, lr}
 801d218:	b082      	sub	sp, #8
 801d21a:	af00      	add	r7, sp, #0
 801d21c:	6078      	str	r0, [r7, #4]
 801d21e:	460b      	mov	r3, r1
 801d220:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801d228:	78fa      	ldrb	r2, [r7, #3]
 801d22a:	6879      	ldr	r1, [r7, #4]
 801d22c:	4613      	mov	r3, r2
 801d22e:	00db      	lsls	r3, r3, #3
 801d230:	4413      	add	r3, r2
 801d232:	009b      	lsls	r3, r3, #2
 801d234:	440b      	add	r3, r1
 801d236:	3320      	adds	r3, #32
 801d238:	681a      	ldr	r2, [r3, #0]
 801d23a:	78fb      	ldrb	r3, [r7, #3]
 801d23c:	4619      	mov	r1, r3
 801d23e:	f7fa fe56 	bl	8017eee <USBD_LL_DataInStage>
}
 801d242:	bf00      	nop
 801d244:	3708      	adds	r7, #8
 801d246:	46bd      	mov	sp, r7
 801d248:	bd80      	pop	{r7, pc}

0801d24a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d24a:	b580      	push	{r7, lr}
 801d24c:	b082      	sub	sp, #8
 801d24e:	af00      	add	r7, sp, #0
 801d250:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d258:	4618      	mov	r0, r3
 801d25a:	f7fa ff90 	bl	801817e <USBD_LL_SOF>
}
 801d25e:	bf00      	nop
 801d260:	3708      	adds	r7, #8
 801d262:	46bd      	mov	sp, r7
 801d264:	bd80      	pop	{r7, pc}

0801d266 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d266:	b580      	push	{r7, lr}
 801d268:	b084      	sub	sp, #16
 801d26a:	af00      	add	r7, sp, #0
 801d26c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d26e:	2301      	movs	r3, #1
 801d270:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	79db      	ldrb	r3, [r3, #7]
 801d276:	2b00      	cmp	r3, #0
 801d278:	d102      	bne.n	801d280 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801d27a:	2300      	movs	r3, #0
 801d27c:	73fb      	strb	r3, [r7, #15]
 801d27e:	e008      	b.n	801d292 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	79db      	ldrb	r3, [r3, #7]
 801d284:	2b02      	cmp	r3, #2
 801d286:	d102      	bne.n	801d28e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801d288:	2301      	movs	r3, #1
 801d28a:	73fb      	strb	r3, [r7, #15]
 801d28c:	e001      	b.n	801d292 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801d28e:	f7e6 f9f1 	bl	8003674 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d298:	7bfa      	ldrb	r2, [r7, #15]
 801d29a:	4611      	mov	r1, r2
 801d29c:	4618      	mov	r0, r3
 801d29e:	f7fa ff2a 	bl	80180f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d2a8:	4618      	mov	r0, r3
 801d2aa:	f7fa fed2 	bl	8018052 <USBD_LL_Reset>
}
 801d2ae:	bf00      	nop
 801d2b0:	3710      	adds	r7, #16
 801d2b2:	46bd      	mov	sp, r7
 801d2b4:	bd80      	pop	{r7, pc}
	...

0801d2b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d2b8:	b580      	push	{r7, lr}
 801d2ba:	b082      	sub	sp, #8
 801d2bc:	af00      	add	r7, sp, #0
 801d2be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d2c0:	687b      	ldr	r3, [r7, #4]
 801d2c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f7fa ff25 	bl	8018116 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	681b      	ldr	r3, [r3, #0]
 801d2d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	687a      	ldr	r2, [r7, #4]
 801d2d8:	6812      	ldr	r2, [r2, #0]
 801d2da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801d2de:	f043 0301 	orr.w	r3, r3, #1
 801d2e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	7adb      	ldrb	r3, [r3, #11]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d005      	beq.n	801d2f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d2ec:	4b04      	ldr	r3, [pc, #16]	@ (801d300 <HAL_PCD_SuspendCallback+0x48>)
 801d2ee:	691b      	ldr	r3, [r3, #16]
 801d2f0:	4a03      	ldr	r2, [pc, #12]	@ (801d300 <HAL_PCD_SuspendCallback+0x48>)
 801d2f2:	f043 0306 	orr.w	r3, r3, #6
 801d2f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801d2f8:	bf00      	nop
 801d2fa:	3708      	adds	r7, #8
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	bd80      	pop	{r7, pc}
 801d300:	e000ed00 	.word	0xe000ed00

0801d304 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d304:	b580      	push	{r7, lr}
 801d306:	b082      	sub	sp, #8
 801d308:	af00      	add	r7, sp, #0
 801d30a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d312:	4618      	mov	r0, r3
 801d314:	f7fa ff1b 	bl	801814e <USBD_LL_Resume>
}
 801d318:	bf00      	nop
 801d31a:	3708      	adds	r7, #8
 801d31c:	46bd      	mov	sp, r7
 801d31e:	bd80      	pop	{r7, pc}

0801d320 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b082      	sub	sp, #8
 801d324:	af00      	add	r7, sp, #0
 801d326:	6078      	str	r0, [r7, #4]
 801d328:	460b      	mov	r3, r1
 801d32a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d332:	78fa      	ldrb	r2, [r7, #3]
 801d334:	4611      	mov	r1, r2
 801d336:	4618      	mov	r0, r3
 801d338:	f7fa ff73 	bl	8018222 <USBD_LL_IsoOUTIncomplete>
}
 801d33c:	bf00      	nop
 801d33e:	3708      	adds	r7, #8
 801d340:	46bd      	mov	sp, r7
 801d342:	bd80      	pop	{r7, pc}

0801d344 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d344:	b580      	push	{r7, lr}
 801d346:	b082      	sub	sp, #8
 801d348:	af00      	add	r7, sp, #0
 801d34a:	6078      	str	r0, [r7, #4]
 801d34c:	460b      	mov	r3, r1
 801d34e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d356:	78fa      	ldrb	r2, [r7, #3]
 801d358:	4611      	mov	r1, r2
 801d35a:	4618      	mov	r0, r3
 801d35c:	f7fa ff2f 	bl	80181be <USBD_LL_IsoINIncomplete>
}
 801d360:	bf00      	nop
 801d362:	3708      	adds	r7, #8
 801d364:	46bd      	mov	sp, r7
 801d366:	bd80      	pop	{r7, pc}

0801d368 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d368:	b580      	push	{r7, lr}
 801d36a:	b082      	sub	sp, #8
 801d36c:	af00      	add	r7, sp, #0
 801d36e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d376:	4618      	mov	r0, r3
 801d378:	f7fa ff85 	bl	8018286 <USBD_LL_DevConnected>
}
 801d37c:	bf00      	nop
 801d37e:	3708      	adds	r7, #8
 801d380:	46bd      	mov	sp, r7
 801d382:	bd80      	pop	{r7, pc}

0801d384 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d384:	b580      	push	{r7, lr}
 801d386:	b082      	sub	sp, #8
 801d388:	af00      	add	r7, sp, #0
 801d38a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d392:	4618      	mov	r0, r3
 801d394:	f7fa ff82 	bl	801829c <USBD_LL_DevDisconnected>
}
 801d398:	bf00      	nop
 801d39a:	3708      	adds	r7, #8
 801d39c:	46bd      	mov	sp, r7
 801d39e:	bd80      	pop	{r7, pc}

0801d3a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d3a0:	b580      	push	{r7, lr}
 801d3a2:	b082      	sub	sp, #8
 801d3a4:	af00      	add	r7, sp, #0
 801d3a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	781b      	ldrb	r3, [r3, #0]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d13c      	bne.n	801d42a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d3b0:	4a20      	ldr	r2, [pc, #128]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	4a1e      	ldr	r2, [pc, #120]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d3c0:	4b1c      	ldr	r3, [pc, #112]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d3c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d3c8:	4b1a      	ldr	r3, [pc, #104]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3ca:	2204      	movs	r2, #4
 801d3cc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d3ce:	4b19      	ldr	r3, [pc, #100]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3d0:	2202      	movs	r2, #2
 801d3d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d3d4:	4b17      	ldr	r3, [pc, #92]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d3da:	4b16      	ldr	r3, [pc, #88]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3dc:	2202      	movs	r2, #2
 801d3de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d3e0:	4b14      	ldr	r3, [pc, #80]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3e2:	2200      	movs	r2, #0
 801d3e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d3e6:	4b13      	ldr	r3, [pc, #76]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3e8:	2200      	movs	r2, #0
 801d3ea:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d3ec:	4b11      	ldr	r3, [pc, #68]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3ee:	2200      	movs	r2, #0
 801d3f0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d3f2:	4b10      	ldr	r3, [pc, #64]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3f4:	2200      	movs	r2, #0
 801d3f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d3f8:	4b0e      	ldr	r3, [pc, #56]	@ (801d434 <USBD_LL_Init+0x94>)
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d3fe:	480d      	ldr	r0, [pc, #52]	@ (801d434 <USBD_LL_Init+0x94>)
 801d400:	f7ea f842 	bl	8007488 <HAL_PCD_Init>
 801d404:	4603      	mov	r3, r0
 801d406:	2b00      	cmp	r3, #0
 801d408:	d001      	beq.n	801d40e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d40a:	f7e6 f933 	bl	8003674 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d40e:	2180      	movs	r1, #128	@ 0x80
 801d410:	4808      	ldr	r0, [pc, #32]	@ (801d434 <USBD_LL_Init+0x94>)
 801d412:	f7eb faf8 	bl	8008a06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d416:	2240      	movs	r2, #64	@ 0x40
 801d418:	2100      	movs	r1, #0
 801d41a:	4806      	ldr	r0, [pc, #24]	@ (801d434 <USBD_LL_Init+0x94>)
 801d41c:	f7eb faac 	bl	8008978 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d420:	2280      	movs	r2, #128	@ 0x80
 801d422:	2101      	movs	r1, #1
 801d424:	4803      	ldr	r0, [pc, #12]	@ (801d434 <USBD_LL_Init+0x94>)
 801d426:	f7eb faa7 	bl	8008978 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d42a:	2300      	movs	r3, #0
}
 801d42c:	4618      	mov	r0, r3
 801d42e:	3708      	adds	r7, #8
 801d430:	46bd      	mov	sp, r7
 801d432:	bd80      	pop	{r7, pc}
 801d434:	20002908 	.word	0x20002908

0801d438 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801d438:	b580      	push	{r7, lr}
 801d43a:	b084      	sub	sp, #16
 801d43c:	af00      	add	r7, sp, #0
 801d43e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d440:	2300      	movs	r3, #0
 801d442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d444:	2300      	movs	r3, #0
 801d446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d44e:	4618      	mov	r0, r3
 801d450:	f7ea f929 	bl	80076a6 <HAL_PCD_DeInit>
 801d454:	4603      	mov	r3, r0
 801d456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d458:	7bfb      	ldrb	r3, [r7, #15]
 801d45a:	4618      	mov	r0, r3
 801d45c:	f000 f998 	bl	801d790 <USBD_Get_USB_Status>
 801d460:	4603      	mov	r3, r0
 801d462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d464:	7bbb      	ldrb	r3, [r7, #14]
}
 801d466:	4618      	mov	r0, r3
 801d468:	3710      	adds	r7, #16
 801d46a:	46bd      	mov	sp, r7
 801d46c:	bd80      	pop	{r7, pc}

0801d46e <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d46e:	b580      	push	{r7, lr}
 801d470:	b084      	sub	sp, #16
 801d472:	af00      	add	r7, sp, #0
 801d474:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d476:	2300      	movs	r3, #0
 801d478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d47a:	2300      	movs	r3, #0
 801d47c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d484:	4618      	mov	r0, r3
 801d486:	f7ea f931 	bl	80076ec <HAL_PCD_Start>
 801d48a:	4603      	mov	r3, r0
 801d48c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d48e:	7bfb      	ldrb	r3, [r7, #15]
 801d490:	4618      	mov	r0, r3
 801d492:	f000 f97d 	bl	801d790 <USBD_Get_USB_Status>
 801d496:	4603      	mov	r3, r0
 801d498:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d49a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d49c:	4618      	mov	r0, r3
 801d49e:	3710      	adds	r7, #16
 801d4a0:	46bd      	mov	sp, r7
 801d4a2:	bd80      	pop	{r7, pc}

0801d4a4 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801d4a4:	b580      	push	{r7, lr}
 801d4a6:	b084      	sub	sp, #16
 801d4a8:	af00      	add	r7, sp, #0
 801d4aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7ea f94b 	bl	8007756 <HAL_PCD_Stop>
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4c4:	7bfb      	ldrb	r3, [r7, #15]
 801d4c6:	4618      	mov	r0, r3
 801d4c8:	f000 f962 	bl	801d790 <USBD_Get_USB_Status>
 801d4cc:	4603      	mov	r3, r0
 801d4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 801d4d2:	4618      	mov	r0, r3
 801d4d4:	3710      	adds	r7, #16
 801d4d6:	46bd      	mov	sp, r7
 801d4d8:	bd80      	pop	{r7, pc}

0801d4da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d4da:	b580      	push	{r7, lr}
 801d4dc:	b084      	sub	sp, #16
 801d4de:	af00      	add	r7, sp, #0
 801d4e0:	6078      	str	r0, [r7, #4]
 801d4e2:	4608      	mov	r0, r1
 801d4e4:	4611      	mov	r1, r2
 801d4e6:	461a      	mov	r2, r3
 801d4e8:	4603      	mov	r3, r0
 801d4ea:	70fb      	strb	r3, [r7, #3]
 801d4ec:	460b      	mov	r3, r1
 801d4ee:	70bb      	strb	r3, [r7, #2]
 801d4f0:	4613      	mov	r3, r2
 801d4f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4f8:	2300      	movs	r3, #0
 801d4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d502:	78bb      	ldrb	r3, [r7, #2]
 801d504:	883a      	ldrh	r2, [r7, #0]
 801d506:	78f9      	ldrb	r1, [r7, #3]
 801d508:	f7ea fe25 	bl	8008156 <HAL_PCD_EP_Open>
 801d50c:	4603      	mov	r3, r0
 801d50e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d510:	7bfb      	ldrb	r3, [r7, #15]
 801d512:	4618      	mov	r0, r3
 801d514:	f000 f93c 	bl	801d790 <USBD_Get_USB_Status>
 801d518:	4603      	mov	r3, r0
 801d51a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d51c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d51e:	4618      	mov	r0, r3
 801d520:	3710      	adds	r7, #16
 801d522:	46bd      	mov	sp, r7
 801d524:	bd80      	pop	{r7, pc}

0801d526 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d526:	b580      	push	{r7, lr}
 801d528:	b084      	sub	sp, #16
 801d52a:	af00      	add	r7, sp, #0
 801d52c:	6078      	str	r0, [r7, #4]
 801d52e:	460b      	mov	r3, r1
 801d530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d532:	2300      	movs	r3, #0
 801d534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d536:	2300      	movs	r3, #0
 801d538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d540:	78fa      	ldrb	r2, [r7, #3]
 801d542:	4611      	mov	r1, r2
 801d544:	4618      	mov	r0, r3
 801d546:	f7ea fe6e 	bl	8008226 <HAL_PCD_EP_Close>
 801d54a:	4603      	mov	r3, r0
 801d54c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d54e:	7bfb      	ldrb	r3, [r7, #15]
 801d550:	4618      	mov	r0, r3
 801d552:	f000 f91d 	bl	801d790 <USBD_Get_USB_Status>
 801d556:	4603      	mov	r3, r0
 801d558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d55a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	3710      	adds	r7, #16
 801d560:	46bd      	mov	sp, r7
 801d562:	bd80      	pop	{r7, pc}

0801d564 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b084      	sub	sp, #16
 801d568:	af00      	add	r7, sp, #0
 801d56a:	6078      	str	r0, [r7, #4]
 801d56c:	460b      	mov	r3, r1
 801d56e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d570:	2300      	movs	r3, #0
 801d572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d574:	2300      	movs	r3, #0
 801d576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d57e:	78fa      	ldrb	r2, [r7, #3]
 801d580:	4611      	mov	r1, r2
 801d582:	4618      	mov	r0, r3
 801d584:	f7eb f810 	bl	80085a8 <HAL_PCD_EP_Flush>
 801d588:	4603      	mov	r3, r0
 801d58a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d58c:	7bfb      	ldrb	r3, [r7, #15]
 801d58e:	4618      	mov	r0, r3
 801d590:	f000 f8fe 	bl	801d790 <USBD_Get_USB_Status>
 801d594:	4603      	mov	r3, r0
 801d596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d598:	7bbb      	ldrb	r3, [r7, #14]
}
 801d59a:	4618      	mov	r0, r3
 801d59c:	3710      	adds	r7, #16
 801d59e:	46bd      	mov	sp, r7
 801d5a0:	bd80      	pop	{r7, pc}

0801d5a2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5a2:	b580      	push	{r7, lr}
 801d5a4:	b084      	sub	sp, #16
 801d5a6:	af00      	add	r7, sp, #0
 801d5a8:	6078      	str	r0, [r7, #4]
 801d5aa:	460b      	mov	r3, r1
 801d5ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d5bc:	78fa      	ldrb	r2, [r7, #3]
 801d5be:	4611      	mov	r1, r2
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	f7ea ff07 	bl	80083d4 <HAL_PCD_EP_SetStall>
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5ca:	7bfb      	ldrb	r3, [r7, #15]
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	f000 f8df 	bl	801d790 <USBD_Get_USB_Status>
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d5d6:	7bbb      	ldrb	r3, [r7, #14]
}
 801d5d8:	4618      	mov	r0, r3
 801d5da:	3710      	adds	r7, #16
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	bd80      	pop	{r7, pc}

0801d5e0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5e0:	b580      	push	{r7, lr}
 801d5e2:	b084      	sub	sp, #16
 801d5e4:	af00      	add	r7, sp, #0
 801d5e6:	6078      	str	r0, [r7, #4]
 801d5e8:	460b      	mov	r3, r1
 801d5ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d5fa:	78fa      	ldrb	r2, [r7, #3]
 801d5fc:	4611      	mov	r1, r2
 801d5fe:	4618      	mov	r0, r3
 801d600:	f7ea ff4b 	bl	800849a <HAL_PCD_EP_ClrStall>
 801d604:	4603      	mov	r3, r0
 801d606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d608:	7bfb      	ldrb	r3, [r7, #15]
 801d60a:	4618      	mov	r0, r3
 801d60c:	f000 f8c0 	bl	801d790 <USBD_Get_USB_Status>
 801d610:	4603      	mov	r3, r0
 801d612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d614:	7bbb      	ldrb	r3, [r7, #14]
}
 801d616:	4618      	mov	r0, r3
 801d618:	3710      	adds	r7, #16
 801d61a:	46bd      	mov	sp, r7
 801d61c:	bd80      	pop	{r7, pc}

0801d61e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d61e:	b480      	push	{r7}
 801d620:	b085      	sub	sp, #20
 801d622:	af00      	add	r7, sp, #0
 801d624:	6078      	str	r0, [r7, #4]
 801d626:	460b      	mov	r3, r1
 801d628:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d630:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d636:	2b00      	cmp	r3, #0
 801d638:	da0b      	bge.n	801d652 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d63a:	78fb      	ldrb	r3, [r7, #3]
 801d63c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d640:	68f9      	ldr	r1, [r7, #12]
 801d642:	4613      	mov	r3, r2
 801d644:	00db      	lsls	r3, r3, #3
 801d646:	4413      	add	r3, r2
 801d648:	009b      	lsls	r3, r3, #2
 801d64a:	440b      	add	r3, r1
 801d64c:	3316      	adds	r3, #22
 801d64e:	781b      	ldrb	r3, [r3, #0]
 801d650:	e00b      	b.n	801d66a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d652:	78fb      	ldrb	r3, [r7, #3]
 801d654:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d658:	68f9      	ldr	r1, [r7, #12]
 801d65a:	4613      	mov	r3, r2
 801d65c:	00db      	lsls	r3, r3, #3
 801d65e:	4413      	add	r3, r2
 801d660:	009b      	lsls	r3, r3, #2
 801d662:	440b      	add	r3, r1
 801d664:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801d668:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d66a:	4618      	mov	r0, r3
 801d66c:	3714      	adds	r7, #20
 801d66e:	46bd      	mov	sp, r7
 801d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d674:	4770      	bx	lr

0801d676 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d676:	b580      	push	{r7, lr}
 801d678:	b084      	sub	sp, #16
 801d67a:	af00      	add	r7, sp, #0
 801d67c:	6078      	str	r0, [r7, #4]
 801d67e:	460b      	mov	r3, r1
 801d680:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d682:	2300      	movs	r3, #0
 801d684:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d686:	2300      	movs	r3, #0
 801d688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d690:	78fa      	ldrb	r2, [r7, #3]
 801d692:	4611      	mov	r1, r2
 801d694:	4618      	mov	r0, r3
 801d696:	f7ea fd3a 	bl	800810e <HAL_PCD_SetAddress>
 801d69a:	4603      	mov	r3, r0
 801d69c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d69e:	7bfb      	ldrb	r3, [r7, #15]
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	f000 f875 	bl	801d790 <USBD_Get_USB_Status>
 801d6a6:	4603      	mov	r3, r0
 801d6a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d6aa:	7bbb      	ldrb	r3, [r7, #14]
}
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	3710      	adds	r7, #16
 801d6b0:	46bd      	mov	sp, r7
 801d6b2:	bd80      	pop	{r7, pc}

0801d6b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d6b4:	b580      	push	{r7, lr}
 801d6b6:	b086      	sub	sp, #24
 801d6b8:	af00      	add	r7, sp, #0
 801d6ba:	60f8      	str	r0, [r7, #12]
 801d6bc:	607a      	str	r2, [r7, #4]
 801d6be:	603b      	str	r3, [r7, #0]
 801d6c0:	460b      	mov	r3, r1
 801d6c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d6c4:	2300      	movs	r3, #0
 801d6c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d6cc:	68fb      	ldr	r3, [r7, #12]
 801d6ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d6d2:	7af9      	ldrb	r1, [r7, #11]
 801d6d4:	683b      	ldr	r3, [r7, #0]
 801d6d6:	687a      	ldr	r2, [r7, #4]
 801d6d8:	f7ea fe42 	bl	8008360 <HAL_PCD_EP_Transmit>
 801d6dc:	4603      	mov	r3, r0
 801d6de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d6e0:	7dfb      	ldrb	r3, [r7, #23]
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f000 f854 	bl	801d790 <USBD_Get_USB_Status>
 801d6e8:	4603      	mov	r3, r0
 801d6ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d6ec:	7dbb      	ldrb	r3, [r7, #22]
}
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	3718      	adds	r7, #24
 801d6f2:	46bd      	mov	sp, r7
 801d6f4:	bd80      	pop	{r7, pc}

0801d6f6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d6f6:	b580      	push	{r7, lr}
 801d6f8:	b086      	sub	sp, #24
 801d6fa:	af00      	add	r7, sp, #0
 801d6fc:	60f8      	str	r0, [r7, #12]
 801d6fe:	607a      	str	r2, [r7, #4]
 801d700:	603b      	str	r3, [r7, #0]
 801d702:	460b      	mov	r3, r1
 801d704:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d706:	2300      	movs	r3, #0
 801d708:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d70a:	2300      	movs	r3, #0
 801d70c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d714:	7af9      	ldrb	r1, [r7, #11]
 801d716:	683b      	ldr	r3, [r7, #0]
 801d718:	687a      	ldr	r2, [r7, #4]
 801d71a:	f7ea fdce 	bl	80082ba <HAL_PCD_EP_Receive>
 801d71e:	4603      	mov	r3, r0
 801d720:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d722:	7dfb      	ldrb	r3, [r7, #23]
 801d724:	4618      	mov	r0, r3
 801d726:	f000 f833 	bl	801d790 <USBD_Get_USB_Status>
 801d72a:	4603      	mov	r3, r0
 801d72c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d72e:	7dbb      	ldrb	r3, [r7, #22]
}
 801d730:	4618      	mov	r0, r3
 801d732:	3718      	adds	r7, #24
 801d734:	46bd      	mov	sp, r7
 801d736:	bd80      	pop	{r7, pc}

0801d738 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d738:	b580      	push	{r7, lr}
 801d73a:	b082      	sub	sp, #8
 801d73c:	af00      	add	r7, sp, #0
 801d73e:	6078      	str	r0, [r7, #4]
 801d740:	460b      	mov	r3, r1
 801d742:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d74a:	78fa      	ldrb	r2, [r7, #3]
 801d74c:	4611      	mov	r1, r2
 801d74e:	4618      	mov	r0, r3
 801d750:	f7ea fdee 	bl	8008330 <HAL_PCD_EP_GetRxCount>
 801d754:	4603      	mov	r3, r0
}
 801d756:	4618      	mov	r0, r3
 801d758:	3708      	adds	r7, #8
 801d75a:	46bd      	mov	sp, r7
 801d75c:	bd80      	pop	{r7, pc}
	...

0801d760 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d760:	b480      	push	{r7}
 801d762:	b083      	sub	sp, #12
 801d764:	af00      	add	r7, sp, #0
 801d766:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d768:	4b03      	ldr	r3, [pc, #12]	@ (801d778 <USBD_static_malloc+0x18>)
}
 801d76a:	4618      	mov	r0, r3
 801d76c:	370c      	adds	r7, #12
 801d76e:	46bd      	mov	sp, r7
 801d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d774:	4770      	bx	lr
 801d776:	bf00      	nop
 801d778:	20002dec 	.word	0x20002dec

0801d77c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d77c:	b480      	push	{r7}
 801d77e:	b083      	sub	sp, #12
 801d780:	af00      	add	r7, sp, #0
 801d782:	6078      	str	r0, [r7, #4]

}
 801d784:	bf00      	nop
 801d786:	370c      	adds	r7, #12
 801d788:	46bd      	mov	sp, r7
 801d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d78e:	4770      	bx	lr

0801d790 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d790:	b480      	push	{r7}
 801d792:	b085      	sub	sp, #20
 801d794:	af00      	add	r7, sp, #0
 801d796:	4603      	mov	r3, r0
 801d798:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d79a:	2300      	movs	r3, #0
 801d79c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d79e:	79fb      	ldrb	r3, [r7, #7]
 801d7a0:	2b03      	cmp	r3, #3
 801d7a2:	d817      	bhi.n	801d7d4 <USBD_Get_USB_Status+0x44>
 801d7a4:	a201      	add	r2, pc, #4	@ (adr r2, 801d7ac <USBD_Get_USB_Status+0x1c>)
 801d7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7aa:	bf00      	nop
 801d7ac:	0801d7bd 	.word	0x0801d7bd
 801d7b0:	0801d7c3 	.word	0x0801d7c3
 801d7b4:	0801d7c9 	.word	0x0801d7c9
 801d7b8:	0801d7cf 	.word	0x0801d7cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d7bc:	2300      	movs	r3, #0
 801d7be:	73fb      	strb	r3, [r7, #15]
    break;
 801d7c0:	e00b      	b.n	801d7da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d7c2:	2303      	movs	r3, #3
 801d7c4:	73fb      	strb	r3, [r7, #15]
    break;
 801d7c6:	e008      	b.n	801d7da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d7c8:	2301      	movs	r3, #1
 801d7ca:	73fb      	strb	r3, [r7, #15]
    break;
 801d7cc:	e005      	b.n	801d7da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d7ce:	2303      	movs	r3, #3
 801d7d0:	73fb      	strb	r3, [r7, #15]
    break;
 801d7d2:	e002      	b.n	801d7da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d7d4:	2303      	movs	r3, #3
 801d7d6:	73fb      	strb	r3, [r7, #15]
    break;
 801d7d8:	bf00      	nop
  }
  return usb_status;
 801d7da:	7bfb      	ldrb	r3, [r7, #15]
}
 801d7dc:	4618      	mov	r0, r3
 801d7de:	3714      	adds	r7, #20
 801d7e0:	46bd      	mov	sp, r7
 801d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7e6:	4770      	bx	lr

0801d7e8 <atoi>:
 801d7e8:	220a      	movs	r2, #10
 801d7ea:	2100      	movs	r1, #0
 801d7ec:	f000 b932 	b.w	801da54 <strtol>

0801d7f0 <malloc>:
 801d7f0:	4b02      	ldr	r3, [pc, #8]	@ (801d7fc <malloc+0xc>)
 801d7f2:	4601      	mov	r1, r0
 801d7f4:	6818      	ldr	r0, [r3, #0]
 801d7f6:	f000 b825 	b.w	801d844 <_malloc_r>
 801d7fa:	bf00      	nop
 801d7fc:	20000148 	.word	0x20000148

0801d800 <sbrk_aligned>:
 801d800:	b570      	push	{r4, r5, r6, lr}
 801d802:	4e0f      	ldr	r6, [pc, #60]	@ (801d840 <sbrk_aligned+0x40>)
 801d804:	460c      	mov	r4, r1
 801d806:	6831      	ldr	r1, [r6, #0]
 801d808:	4605      	mov	r5, r0
 801d80a:	b911      	cbnz	r1, 801d812 <sbrk_aligned+0x12>
 801d80c:	f001 fb2e 	bl	801ee6c <_sbrk_r>
 801d810:	6030      	str	r0, [r6, #0]
 801d812:	4621      	mov	r1, r4
 801d814:	4628      	mov	r0, r5
 801d816:	f001 fb29 	bl	801ee6c <_sbrk_r>
 801d81a:	1c43      	adds	r3, r0, #1
 801d81c:	d103      	bne.n	801d826 <sbrk_aligned+0x26>
 801d81e:	f04f 34ff 	mov.w	r4, #4294967295
 801d822:	4620      	mov	r0, r4
 801d824:	bd70      	pop	{r4, r5, r6, pc}
 801d826:	1cc4      	adds	r4, r0, #3
 801d828:	f024 0403 	bic.w	r4, r4, #3
 801d82c:	42a0      	cmp	r0, r4
 801d82e:	d0f8      	beq.n	801d822 <sbrk_aligned+0x22>
 801d830:	1a21      	subs	r1, r4, r0
 801d832:	4628      	mov	r0, r5
 801d834:	f001 fb1a 	bl	801ee6c <_sbrk_r>
 801d838:	3001      	adds	r0, #1
 801d83a:	d1f2      	bne.n	801d822 <sbrk_aligned+0x22>
 801d83c:	e7ef      	b.n	801d81e <sbrk_aligned+0x1e>
 801d83e:	bf00      	nop
 801d840:	20003664 	.word	0x20003664

0801d844 <_malloc_r>:
 801d844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d848:	1ccd      	adds	r5, r1, #3
 801d84a:	f025 0503 	bic.w	r5, r5, #3
 801d84e:	3508      	adds	r5, #8
 801d850:	2d0c      	cmp	r5, #12
 801d852:	bf38      	it	cc
 801d854:	250c      	movcc	r5, #12
 801d856:	2d00      	cmp	r5, #0
 801d858:	4606      	mov	r6, r0
 801d85a:	db01      	blt.n	801d860 <_malloc_r+0x1c>
 801d85c:	42a9      	cmp	r1, r5
 801d85e:	d904      	bls.n	801d86a <_malloc_r+0x26>
 801d860:	230c      	movs	r3, #12
 801d862:	6033      	str	r3, [r6, #0]
 801d864:	2000      	movs	r0, #0
 801d866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d86a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d940 <_malloc_r+0xfc>
 801d86e:	f000 f869 	bl	801d944 <__malloc_lock>
 801d872:	f8d8 3000 	ldr.w	r3, [r8]
 801d876:	461c      	mov	r4, r3
 801d878:	bb44      	cbnz	r4, 801d8cc <_malloc_r+0x88>
 801d87a:	4629      	mov	r1, r5
 801d87c:	4630      	mov	r0, r6
 801d87e:	f7ff ffbf 	bl	801d800 <sbrk_aligned>
 801d882:	1c43      	adds	r3, r0, #1
 801d884:	4604      	mov	r4, r0
 801d886:	d158      	bne.n	801d93a <_malloc_r+0xf6>
 801d888:	f8d8 4000 	ldr.w	r4, [r8]
 801d88c:	4627      	mov	r7, r4
 801d88e:	2f00      	cmp	r7, #0
 801d890:	d143      	bne.n	801d91a <_malloc_r+0xd6>
 801d892:	2c00      	cmp	r4, #0
 801d894:	d04b      	beq.n	801d92e <_malloc_r+0xea>
 801d896:	6823      	ldr	r3, [r4, #0]
 801d898:	4639      	mov	r1, r7
 801d89a:	4630      	mov	r0, r6
 801d89c:	eb04 0903 	add.w	r9, r4, r3
 801d8a0:	f001 fae4 	bl	801ee6c <_sbrk_r>
 801d8a4:	4581      	cmp	r9, r0
 801d8a6:	d142      	bne.n	801d92e <_malloc_r+0xea>
 801d8a8:	6821      	ldr	r1, [r4, #0]
 801d8aa:	1a6d      	subs	r5, r5, r1
 801d8ac:	4629      	mov	r1, r5
 801d8ae:	4630      	mov	r0, r6
 801d8b0:	f7ff ffa6 	bl	801d800 <sbrk_aligned>
 801d8b4:	3001      	adds	r0, #1
 801d8b6:	d03a      	beq.n	801d92e <_malloc_r+0xea>
 801d8b8:	6823      	ldr	r3, [r4, #0]
 801d8ba:	442b      	add	r3, r5
 801d8bc:	6023      	str	r3, [r4, #0]
 801d8be:	f8d8 3000 	ldr.w	r3, [r8]
 801d8c2:	685a      	ldr	r2, [r3, #4]
 801d8c4:	bb62      	cbnz	r2, 801d920 <_malloc_r+0xdc>
 801d8c6:	f8c8 7000 	str.w	r7, [r8]
 801d8ca:	e00f      	b.n	801d8ec <_malloc_r+0xa8>
 801d8cc:	6822      	ldr	r2, [r4, #0]
 801d8ce:	1b52      	subs	r2, r2, r5
 801d8d0:	d420      	bmi.n	801d914 <_malloc_r+0xd0>
 801d8d2:	2a0b      	cmp	r2, #11
 801d8d4:	d917      	bls.n	801d906 <_malloc_r+0xc2>
 801d8d6:	1961      	adds	r1, r4, r5
 801d8d8:	42a3      	cmp	r3, r4
 801d8da:	6025      	str	r5, [r4, #0]
 801d8dc:	bf18      	it	ne
 801d8de:	6059      	strne	r1, [r3, #4]
 801d8e0:	6863      	ldr	r3, [r4, #4]
 801d8e2:	bf08      	it	eq
 801d8e4:	f8c8 1000 	streq.w	r1, [r8]
 801d8e8:	5162      	str	r2, [r4, r5]
 801d8ea:	604b      	str	r3, [r1, #4]
 801d8ec:	4630      	mov	r0, r6
 801d8ee:	f000 f82f 	bl	801d950 <__malloc_unlock>
 801d8f2:	f104 000b 	add.w	r0, r4, #11
 801d8f6:	1d23      	adds	r3, r4, #4
 801d8f8:	f020 0007 	bic.w	r0, r0, #7
 801d8fc:	1ac2      	subs	r2, r0, r3
 801d8fe:	bf1c      	itt	ne
 801d900:	1a1b      	subne	r3, r3, r0
 801d902:	50a3      	strne	r3, [r4, r2]
 801d904:	e7af      	b.n	801d866 <_malloc_r+0x22>
 801d906:	6862      	ldr	r2, [r4, #4]
 801d908:	42a3      	cmp	r3, r4
 801d90a:	bf0c      	ite	eq
 801d90c:	f8c8 2000 	streq.w	r2, [r8]
 801d910:	605a      	strne	r2, [r3, #4]
 801d912:	e7eb      	b.n	801d8ec <_malloc_r+0xa8>
 801d914:	4623      	mov	r3, r4
 801d916:	6864      	ldr	r4, [r4, #4]
 801d918:	e7ae      	b.n	801d878 <_malloc_r+0x34>
 801d91a:	463c      	mov	r4, r7
 801d91c:	687f      	ldr	r7, [r7, #4]
 801d91e:	e7b6      	b.n	801d88e <_malloc_r+0x4a>
 801d920:	461a      	mov	r2, r3
 801d922:	685b      	ldr	r3, [r3, #4]
 801d924:	42a3      	cmp	r3, r4
 801d926:	d1fb      	bne.n	801d920 <_malloc_r+0xdc>
 801d928:	2300      	movs	r3, #0
 801d92a:	6053      	str	r3, [r2, #4]
 801d92c:	e7de      	b.n	801d8ec <_malloc_r+0xa8>
 801d92e:	230c      	movs	r3, #12
 801d930:	6033      	str	r3, [r6, #0]
 801d932:	4630      	mov	r0, r6
 801d934:	f000 f80c 	bl	801d950 <__malloc_unlock>
 801d938:	e794      	b.n	801d864 <_malloc_r+0x20>
 801d93a:	6005      	str	r5, [r0, #0]
 801d93c:	e7d6      	b.n	801d8ec <_malloc_r+0xa8>
 801d93e:	bf00      	nop
 801d940:	20003668 	.word	0x20003668

0801d944 <__malloc_lock>:
 801d944:	4801      	ldr	r0, [pc, #4]	@ (801d94c <__malloc_lock+0x8>)
 801d946:	f001 bade 	b.w	801ef06 <__retarget_lock_acquire_recursive>
 801d94a:	bf00      	nop
 801d94c:	200037ac 	.word	0x200037ac

0801d950 <__malloc_unlock>:
 801d950:	4801      	ldr	r0, [pc, #4]	@ (801d958 <__malloc_unlock+0x8>)
 801d952:	f001 bad9 	b.w	801ef08 <__retarget_lock_release_recursive>
 801d956:	bf00      	nop
 801d958:	200037ac 	.word	0x200037ac

0801d95c <_strtol_l.constprop.0>:
 801d95c:	2b24      	cmp	r3, #36	@ 0x24
 801d95e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d962:	4686      	mov	lr, r0
 801d964:	4690      	mov	r8, r2
 801d966:	d801      	bhi.n	801d96c <_strtol_l.constprop.0+0x10>
 801d968:	2b01      	cmp	r3, #1
 801d96a:	d106      	bne.n	801d97a <_strtol_l.constprop.0+0x1e>
 801d96c:	f001 faa0 	bl	801eeb0 <__errno>
 801d970:	2316      	movs	r3, #22
 801d972:	6003      	str	r3, [r0, #0]
 801d974:	2000      	movs	r0, #0
 801d976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d97a:	4834      	ldr	r0, [pc, #208]	@ (801da4c <_strtol_l.constprop.0+0xf0>)
 801d97c:	460d      	mov	r5, r1
 801d97e:	462a      	mov	r2, r5
 801d980:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d984:	5d06      	ldrb	r6, [r0, r4]
 801d986:	f016 0608 	ands.w	r6, r6, #8
 801d98a:	d1f8      	bne.n	801d97e <_strtol_l.constprop.0+0x22>
 801d98c:	2c2d      	cmp	r4, #45	@ 0x2d
 801d98e:	d12d      	bne.n	801d9ec <_strtol_l.constprop.0+0x90>
 801d990:	782c      	ldrb	r4, [r5, #0]
 801d992:	2601      	movs	r6, #1
 801d994:	1c95      	adds	r5, r2, #2
 801d996:	f033 0210 	bics.w	r2, r3, #16
 801d99a:	d109      	bne.n	801d9b0 <_strtol_l.constprop.0+0x54>
 801d99c:	2c30      	cmp	r4, #48	@ 0x30
 801d99e:	d12a      	bne.n	801d9f6 <_strtol_l.constprop.0+0x9a>
 801d9a0:	782a      	ldrb	r2, [r5, #0]
 801d9a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d9a6:	2a58      	cmp	r2, #88	@ 0x58
 801d9a8:	d125      	bne.n	801d9f6 <_strtol_l.constprop.0+0x9a>
 801d9aa:	786c      	ldrb	r4, [r5, #1]
 801d9ac:	2310      	movs	r3, #16
 801d9ae:	3502      	adds	r5, #2
 801d9b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d9b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d9b8:	2200      	movs	r2, #0
 801d9ba:	fbbc f9f3 	udiv	r9, ip, r3
 801d9be:	4610      	mov	r0, r2
 801d9c0:	fb03 ca19 	mls	sl, r3, r9, ip
 801d9c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d9c8:	2f09      	cmp	r7, #9
 801d9ca:	d81b      	bhi.n	801da04 <_strtol_l.constprop.0+0xa8>
 801d9cc:	463c      	mov	r4, r7
 801d9ce:	42a3      	cmp	r3, r4
 801d9d0:	dd27      	ble.n	801da22 <_strtol_l.constprop.0+0xc6>
 801d9d2:	1c57      	adds	r7, r2, #1
 801d9d4:	d007      	beq.n	801d9e6 <_strtol_l.constprop.0+0x8a>
 801d9d6:	4581      	cmp	r9, r0
 801d9d8:	d320      	bcc.n	801da1c <_strtol_l.constprop.0+0xc0>
 801d9da:	d101      	bne.n	801d9e0 <_strtol_l.constprop.0+0x84>
 801d9dc:	45a2      	cmp	sl, r4
 801d9de:	db1d      	blt.n	801da1c <_strtol_l.constprop.0+0xc0>
 801d9e0:	fb00 4003 	mla	r0, r0, r3, r4
 801d9e4:	2201      	movs	r2, #1
 801d9e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d9ea:	e7eb      	b.n	801d9c4 <_strtol_l.constprop.0+0x68>
 801d9ec:	2c2b      	cmp	r4, #43	@ 0x2b
 801d9ee:	bf04      	itt	eq
 801d9f0:	782c      	ldrbeq	r4, [r5, #0]
 801d9f2:	1c95      	addeq	r5, r2, #2
 801d9f4:	e7cf      	b.n	801d996 <_strtol_l.constprop.0+0x3a>
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d1da      	bne.n	801d9b0 <_strtol_l.constprop.0+0x54>
 801d9fa:	2c30      	cmp	r4, #48	@ 0x30
 801d9fc:	bf0c      	ite	eq
 801d9fe:	2308      	moveq	r3, #8
 801da00:	230a      	movne	r3, #10
 801da02:	e7d5      	b.n	801d9b0 <_strtol_l.constprop.0+0x54>
 801da04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801da08:	2f19      	cmp	r7, #25
 801da0a:	d801      	bhi.n	801da10 <_strtol_l.constprop.0+0xb4>
 801da0c:	3c37      	subs	r4, #55	@ 0x37
 801da0e:	e7de      	b.n	801d9ce <_strtol_l.constprop.0+0x72>
 801da10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801da14:	2f19      	cmp	r7, #25
 801da16:	d804      	bhi.n	801da22 <_strtol_l.constprop.0+0xc6>
 801da18:	3c57      	subs	r4, #87	@ 0x57
 801da1a:	e7d8      	b.n	801d9ce <_strtol_l.constprop.0+0x72>
 801da1c:	f04f 32ff 	mov.w	r2, #4294967295
 801da20:	e7e1      	b.n	801d9e6 <_strtol_l.constprop.0+0x8a>
 801da22:	1c53      	adds	r3, r2, #1
 801da24:	d108      	bne.n	801da38 <_strtol_l.constprop.0+0xdc>
 801da26:	2322      	movs	r3, #34	@ 0x22
 801da28:	f8ce 3000 	str.w	r3, [lr]
 801da2c:	4660      	mov	r0, ip
 801da2e:	f1b8 0f00 	cmp.w	r8, #0
 801da32:	d0a0      	beq.n	801d976 <_strtol_l.constprop.0+0x1a>
 801da34:	1e69      	subs	r1, r5, #1
 801da36:	e006      	b.n	801da46 <_strtol_l.constprop.0+0xea>
 801da38:	b106      	cbz	r6, 801da3c <_strtol_l.constprop.0+0xe0>
 801da3a:	4240      	negs	r0, r0
 801da3c:	f1b8 0f00 	cmp.w	r8, #0
 801da40:	d099      	beq.n	801d976 <_strtol_l.constprop.0+0x1a>
 801da42:	2a00      	cmp	r2, #0
 801da44:	d1f6      	bne.n	801da34 <_strtol_l.constprop.0+0xd8>
 801da46:	f8c8 1000 	str.w	r1, [r8]
 801da4a:	e794      	b.n	801d976 <_strtol_l.constprop.0+0x1a>
 801da4c:	08025455 	.word	0x08025455

0801da50 <_strtol_r>:
 801da50:	f7ff bf84 	b.w	801d95c <_strtol_l.constprop.0>

0801da54 <strtol>:
 801da54:	4613      	mov	r3, r2
 801da56:	460a      	mov	r2, r1
 801da58:	4601      	mov	r1, r0
 801da5a:	4802      	ldr	r0, [pc, #8]	@ (801da64 <strtol+0x10>)
 801da5c:	6800      	ldr	r0, [r0, #0]
 801da5e:	f7ff bf7d 	b.w	801d95c <_strtol_l.constprop.0>
 801da62:	bf00      	nop
 801da64:	20000148 	.word	0x20000148

0801da68 <__cvt>:
 801da68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801da6c:	ec57 6b10 	vmov	r6, r7, d0
 801da70:	2f00      	cmp	r7, #0
 801da72:	460c      	mov	r4, r1
 801da74:	4619      	mov	r1, r3
 801da76:	463b      	mov	r3, r7
 801da78:	bfbb      	ittet	lt
 801da7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801da7e:	461f      	movlt	r7, r3
 801da80:	2300      	movge	r3, #0
 801da82:	232d      	movlt	r3, #45	@ 0x2d
 801da84:	700b      	strb	r3, [r1, #0]
 801da86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801da8c:	4691      	mov	r9, r2
 801da8e:	f023 0820 	bic.w	r8, r3, #32
 801da92:	bfbc      	itt	lt
 801da94:	4632      	movlt	r2, r6
 801da96:	4616      	movlt	r6, r2
 801da98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801da9c:	d005      	beq.n	801daaa <__cvt+0x42>
 801da9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801daa2:	d100      	bne.n	801daa6 <__cvt+0x3e>
 801daa4:	3401      	adds	r4, #1
 801daa6:	2102      	movs	r1, #2
 801daa8:	e000      	b.n	801daac <__cvt+0x44>
 801daaa:	2103      	movs	r1, #3
 801daac:	ab03      	add	r3, sp, #12
 801daae:	9301      	str	r3, [sp, #4]
 801dab0:	ab02      	add	r3, sp, #8
 801dab2:	9300      	str	r3, [sp, #0]
 801dab4:	ec47 6b10 	vmov	d0, r6, r7
 801dab8:	4653      	mov	r3, sl
 801daba:	4622      	mov	r2, r4
 801dabc:	f001 fae8 	bl	801f090 <_dtoa_r>
 801dac0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801dac4:	4605      	mov	r5, r0
 801dac6:	d119      	bne.n	801dafc <__cvt+0x94>
 801dac8:	f019 0f01 	tst.w	r9, #1
 801dacc:	d00e      	beq.n	801daec <__cvt+0x84>
 801dace:	eb00 0904 	add.w	r9, r0, r4
 801dad2:	2200      	movs	r2, #0
 801dad4:	2300      	movs	r3, #0
 801dad6:	4630      	mov	r0, r6
 801dad8:	4639      	mov	r1, r7
 801dada:	f7e3 f80d 	bl	8000af8 <__aeabi_dcmpeq>
 801dade:	b108      	cbz	r0, 801dae4 <__cvt+0x7c>
 801dae0:	f8cd 900c 	str.w	r9, [sp, #12]
 801dae4:	2230      	movs	r2, #48	@ 0x30
 801dae6:	9b03      	ldr	r3, [sp, #12]
 801dae8:	454b      	cmp	r3, r9
 801daea:	d31e      	bcc.n	801db2a <__cvt+0xc2>
 801daec:	9b03      	ldr	r3, [sp, #12]
 801daee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801daf0:	1b5b      	subs	r3, r3, r5
 801daf2:	4628      	mov	r0, r5
 801daf4:	6013      	str	r3, [r2, #0]
 801daf6:	b004      	add	sp, #16
 801daf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dafc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801db00:	eb00 0904 	add.w	r9, r0, r4
 801db04:	d1e5      	bne.n	801dad2 <__cvt+0x6a>
 801db06:	7803      	ldrb	r3, [r0, #0]
 801db08:	2b30      	cmp	r3, #48	@ 0x30
 801db0a:	d10a      	bne.n	801db22 <__cvt+0xba>
 801db0c:	2200      	movs	r2, #0
 801db0e:	2300      	movs	r3, #0
 801db10:	4630      	mov	r0, r6
 801db12:	4639      	mov	r1, r7
 801db14:	f7e2 fff0 	bl	8000af8 <__aeabi_dcmpeq>
 801db18:	b918      	cbnz	r0, 801db22 <__cvt+0xba>
 801db1a:	f1c4 0401 	rsb	r4, r4, #1
 801db1e:	f8ca 4000 	str.w	r4, [sl]
 801db22:	f8da 3000 	ldr.w	r3, [sl]
 801db26:	4499      	add	r9, r3
 801db28:	e7d3      	b.n	801dad2 <__cvt+0x6a>
 801db2a:	1c59      	adds	r1, r3, #1
 801db2c:	9103      	str	r1, [sp, #12]
 801db2e:	701a      	strb	r2, [r3, #0]
 801db30:	e7d9      	b.n	801dae6 <__cvt+0x7e>

0801db32 <__exponent>:
 801db32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db34:	2900      	cmp	r1, #0
 801db36:	bfba      	itte	lt
 801db38:	4249      	neglt	r1, r1
 801db3a:	232d      	movlt	r3, #45	@ 0x2d
 801db3c:	232b      	movge	r3, #43	@ 0x2b
 801db3e:	2909      	cmp	r1, #9
 801db40:	7002      	strb	r2, [r0, #0]
 801db42:	7043      	strb	r3, [r0, #1]
 801db44:	dd29      	ble.n	801db9a <__exponent+0x68>
 801db46:	f10d 0307 	add.w	r3, sp, #7
 801db4a:	461d      	mov	r5, r3
 801db4c:	270a      	movs	r7, #10
 801db4e:	461a      	mov	r2, r3
 801db50:	fbb1 f6f7 	udiv	r6, r1, r7
 801db54:	fb07 1416 	mls	r4, r7, r6, r1
 801db58:	3430      	adds	r4, #48	@ 0x30
 801db5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801db5e:	460c      	mov	r4, r1
 801db60:	2c63      	cmp	r4, #99	@ 0x63
 801db62:	f103 33ff 	add.w	r3, r3, #4294967295
 801db66:	4631      	mov	r1, r6
 801db68:	dcf1      	bgt.n	801db4e <__exponent+0x1c>
 801db6a:	3130      	adds	r1, #48	@ 0x30
 801db6c:	1e94      	subs	r4, r2, #2
 801db6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801db72:	1c41      	adds	r1, r0, #1
 801db74:	4623      	mov	r3, r4
 801db76:	42ab      	cmp	r3, r5
 801db78:	d30a      	bcc.n	801db90 <__exponent+0x5e>
 801db7a:	f10d 0309 	add.w	r3, sp, #9
 801db7e:	1a9b      	subs	r3, r3, r2
 801db80:	42ac      	cmp	r4, r5
 801db82:	bf88      	it	hi
 801db84:	2300      	movhi	r3, #0
 801db86:	3302      	adds	r3, #2
 801db88:	4403      	add	r3, r0
 801db8a:	1a18      	subs	r0, r3, r0
 801db8c:	b003      	add	sp, #12
 801db8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db90:	f813 6b01 	ldrb.w	r6, [r3], #1
 801db94:	f801 6f01 	strb.w	r6, [r1, #1]!
 801db98:	e7ed      	b.n	801db76 <__exponent+0x44>
 801db9a:	2330      	movs	r3, #48	@ 0x30
 801db9c:	3130      	adds	r1, #48	@ 0x30
 801db9e:	7083      	strb	r3, [r0, #2]
 801dba0:	70c1      	strb	r1, [r0, #3]
 801dba2:	1d03      	adds	r3, r0, #4
 801dba4:	e7f1      	b.n	801db8a <__exponent+0x58>
	...

0801dba8 <_printf_float>:
 801dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbac:	b08d      	sub	sp, #52	@ 0x34
 801dbae:	460c      	mov	r4, r1
 801dbb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801dbb4:	4616      	mov	r6, r2
 801dbb6:	461f      	mov	r7, r3
 801dbb8:	4605      	mov	r5, r0
 801dbba:	f001 f91f 	bl	801edfc <_localeconv_r>
 801dbbe:	6803      	ldr	r3, [r0, #0]
 801dbc0:	9304      	str	r3, [sp, #16]
 801dbc2:	4618      	mov	r0, r3
 801dbc4:	f7e2 fb6c 	bl	80002a0 <strlen>
 801dbc8:	2300      	movs	r3, #0
 801dbca:	930a      	str	r3, [sp, #40]	@ 0x28
 801dbcc:	f8d8 3000 	ldr.w	r3, [r8]
 801dbd0:	9005      	str	r0, [sp, #20]
 801dbd2:	3307      	adds	r3, #7
 801dbd4:	f023 0307 	bic.w	r3, r3, #7
 801dbd8:	f103 0208 	add.w	r2, r3, #8
 801dbdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 801dbe0:	f8d4 b000 	ldr.w	fp, [r4]
 801dbe4:	f8c8 2000 	str.w	r2, [r8]
 801dbe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dbec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801dbf0:	9307      	str	r3, [sp, #28]
 801dbf2:	f8cd 8018 	str.w	r8, [sp, #24]
 801dbf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801dbfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dbfe:	4b9c      	ldr	r3, [pc, #624]	@ (801de70 <_printf_float+0x2c8>)
 801dc00:	f04f 32ff 	mov.w	r2, #4294967295
 801dc04:	f7e2 ffaa 	bl	8000b5c <__aeabi_dcmpun>
 801dc08:	bb70      	cbnz	r0, 801dc68 <_printf_float+0xc0>
 801dc0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801dc0e:	4b98      	ldr	r3, [pc, #608]	@ (801de70 <_printf_float+0x2c8>)
 801dc10:	f04f 32ff 	mov.w	r2, #4294967295
 801dc14:	f7e2 ff84 	bl	8000b20 <__aeabi_dcmple>
 801dc18:	bb30      	cbnz	r0, 801dc68 <_printf_float+0xc0>
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	2300      	movs	r3, #0
 801dc1e:	4640      	mov	r0, r8
 801dc20:	4649      	mov	r1, r9
 801dc22:	f7e2 ff73 	bl	8000b0c <__aeabi_dcmplt>
 801dc26:	b110      	cbz	r0, 801dc2e <_printf_float+0x86>
 801dc28:	232d      	movs	r3, #45	@ 0x2d
 801dc2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dc2e:	4a91      	ldr	r2, [pc, #580]	@ (801de74 <_printf_float+0x2cc>)
 801dc30:	4b91      	ldr	r3, [pc, #580]	@ (801de78 <_printf_float+0x2d0>)
 801dc32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801dc36:	bf94      	ite	ls
 801dc38:	4690      	movls	r8, r2
 801dc3a:	4698      	movhi	r8, r3
 801dc3c:	2303      	movs	r3, #3
 801dc3e:	6123      	str	r3, [r4, #16]
 801dc40:	f02b 0304 	bic.w	r3, fp, #4
 801dc44:	6023      	str	r3, [r4, #0]
 801dc46:	f04f 0900 	mov.w	r9, #0
 801dc4a:	9700      	str	r7, [sp, #0]
 801dc4c:	4633      	mov	r3, r6
 801dc4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801dc50:	4621      	mov	r1, r4
 801dc52:	4628      	mov	r0, r5
 801dc54:	f000 f9d2 	bl	801dffc <_printf_common>
 801dc58:	3001      	adds	r0, #1
 801dc5a:	f040 808d 	bne.w	801dd78 <_printf_float+0x1d0>
 801dc5e:	f04f 30ff 	mov.w	r0, #4294967295
 801dc62:	b00d      	add	sp, #52	@ 0x34
 801dc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc68:	4642      	mov	r2, r8
 801dc6a:	464b      	mov	r3, r9
 801dc6c:	4640      	mov	r0, r8
 801dc6e:	4649      	mov	r1, r9
 801dc70:	f7e2 ff74 	bl	8000b5c <__aeabi_dcmpun>
 801dc74:	b140      	cbz	r0, 801dc88 <_printf_float+0xe0>
 801dc76:	464b      	mov	r3, r9
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	bfbc      	itt	lt
 801dc7c:	232d      	movlt	r3, #45	@ 0x2d
 801dc7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801dc82:	4a7e      	ldr	r2, [pc, #504]	@ (801de7c <_printf_float+0x2d4>)
 801dc84:	4b7e      	ldr	r3, [pc, #504]	@ (801de80 <_printf_float+0x2d8>)
 801dc86:	e7d4      	b.n	801dc32 <_printf_float+0x8a>
 801dc88:	6863      	ldr	r3, [r4, #4]
 801dc8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801dc8e:	9206      	str	r2, [sp, #24]
 801dc90:	1c5a      	adds	r2, r3, #1
 801dc92:	d13b      	bne.n	801dd0c <_printf_float+0x164>
 801dc94:	2306      	movs	r3, #6
 801dc96:	6063      	str	r3, [r4, #4]
 801dc98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801dc9c:	2300      	movs	r3, #0
 801dc9e:	6022      	str	r2, [r4, #0]
 801dca0:	9303      	str	r3, [sp, #12]
 801dca2:	ab0a      	add	r3, sp, #40	@ 0x28
 801dca4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801dca8:	ab09      	add	r3, sp, #36	@ 0x24
 801dcaa:	9300      	str	r3, [sp, #0]
 801dcac:	6861      	ldr	r1, [r4, #4]
 801dcae:	ec49 8b10 	vmov	d0, r8, r9
 801dcb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801dcb6:	4628      	mov	r0, r5
 801dcb8:	f7ff fed6 	bl	801da68 <__cvt>
 801dcbc:	9b06      	ldr	r3, [sp, #24]
 801dcbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dcc0:	2b47      	cmp	r3, #71	@ 0x47
 801dcc2:	4680      	mov	r8, r0
 801dcc4:	d129      	bne.n	801dd1a <_printf_float+0x172>
 801dcc6:	1cc8      	adds	r0, r1, #3
 801dcc8:	db02      	blt.n	801dcd0 <_printf_float+0x128>
 801dcca:	6863      	ldr	r3, [r4, #4]
 801dccc:	4299      	cmp	r1, r3
 801dcce:	dd41      	ble.n	801dd54 <_printf_float+0x1ac>
 801dcd0:	f1aa 0a02 	sub.w	sl, sl, #2
 801dcd4:	fa5f fa8a 	uxtb.w	sl, sl
 801dcd8:	3901      	subs	r1, #1
 801dcda:	4652      	mov	r2, sl
 801dcdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801dce0:	9109      	str	r1, [sp, #36]	@ 0x24
 801dce2:	f7ff ff26 	bl	801db32 <__exponent>
 801dce6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dce8:	1813      	adds	r3, r2, r0
 801dcea:	2a01      	cmp	r2, #1
 801dcec:	4681      	mov	r9, r0
 801dcee:	6123      	str	r3, [r4, #16]
 801dcf0:	dc02      	bgt.n	801dcf8 <_printf_float+0x150>
 801dcf2:	6822      	ldr	r2, [r4, #0]
 801dcf4:	07d2      	lsls	r2, r2, #31
 801dcf6:	d501      	bpl.n	801dcfc <_printf_float+0x154>
 801dcf8:	3301      	adds	r3, #1
 801dcfa:	6123      	str	r3, [r4, #16]
 801dcfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d0a2      	beq.n	801dc4a <_printf_float+0xa2>
 801dd04:	232d      	movs	r3, #45	@ 0x2d
 801dd06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801dd0a:	e79e      	b.n	801dc4a <_printf_float+0xa2>
 801dd0c:	9a06      	ldr	r2, [sp, #24]
 801dd0e:	2a47      	cmp	r2, #71	@ 0x47
 801dd10:	d1c2      	bne.n	801dc98 <_printf_float+0xf0>
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d1c0      	bne.n	801dc98 <_printf_float+0xf0>
 801dd16:	2301      	movs	r3, #1
 801dd18:	e7bd      	b.n	801dc96 <_printf_float+0xee>
 801dd1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801dd1e:	d9db      	bls.n	801dcd8 <_printf_float+0x130>
 801dd20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801dd24:	d118      	bne.n	801dd58 <_printf_float+0x1b0>
 801dd26:	2900      	cmp	r1, #0
 801dd28:	6863      	ldr	r3, [r4, #4]
 801dd2a:	dd0b      	ble.n	801dd44 <_printf_float+0x19c>
 801dd2c:	6121      	str	r1, [r4, #16]
 801dd2e:	b913      	cbnz	r3, 801dd36 <_printf_float+0x18e>
 801dd30:	6822      	ldr	r2, [r4, #0]
 801dd32:	07d0      	lsls	r0, r2, #31
 801dd34:	d502      	bpl.n	801dd3c <_printf_float+0x194>
 801dd36:	3301      	adds	r3, #1
 801dd38:	440b      	add	r3, r1
 801dd3a:	6123      	str	r3, [r4, #16]
 801dd3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801dd3e:	f04f 0900 	mov.w	r9, #0
 801dd42:	e7db      	b.n	801dcfc <_printf_float+0x154>
 801dd44:	b913      	cbnz	r3, 801dd4c <_printf_float+0x1a4>
 801dd46:	6822      	ldr	r2, [r4, #0]
 801dd48:	07d2      	lsls	r2, r2, #31
 801dd4a:	d501      	bpl.n	801dd50 <_printf_float+0x1a8>
 801dd4c:	3302      	adds	r3, #2
 801dd4e:	e7f4      	b.n	801dd3a <_printf_float+0x192>
 801dd50:	2301      	movs	r3, #1
 801dd52:	e7f2      	b.n	801dd3a <_printf_float+0x192>
 801dd54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801dd58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd5a:	4299      	cmp	r1, r3
 801dd5c:	db05      	blt.n	801dd6a <_printf_float+0x1c2>
 801dd5e:	6823      	ldr	r3, [r4, #0]
 801dd60:	6121      	str	r1, [r4, #16]
 801dd62:	07d8      	lsls	r0, r3, #31
 801dd64:	d5ea      	bpl.n	801dd3c <_printf_float+0x194>
 801dd66:	1c4b      	adds	r3, r1, #1
 801dd68:	e7e7      	b.n	801dd3a <_printf_float+0x192>
 801dd6a:	2900      	cmp	r1, #0
 801dd6c:	bfd4      	ite	le
 801dd6e:	f1c1 0202 	rsble	r2, r1, #2
 801dd72:	2201      	movgt	r2, #1
 801dd74:	4413      	add	r3, r2
 801dd76:	e7e0      	b.n	801dd3a <_printf_float+0x192>
 801dd78:	6823      	ldr	r3, [r4, #0]
 801dd7a:	055a      	lsls	r2, r3, #21
 801dd7c:	d407      	bmi.n	801dd8e <_printf_float+0x1e6>
 801dd7e:	6923      	ldr	r3, [r4, #16]
 801dd80:	4642      	mov	r2, r8
 801dd82:	4631      	mov	r1, r6
 801dd84:	4628      	mov	r0, r5
 801dd86:	47b8      	blx	r7
 801dd88:	3001      	adds	r0, #1
 801dd8a:	d12b      	bne.n	801dde4 <_printf_float+0x23c>
 801dd8c:	e767      	b.n	801dc5e <_printf_float+0xb6>
 801dd8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801dd92:	f240 80dd 	bls.w	801df50 <_printf_float+0x3a8>
 801dd96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801dd9a:	2200      	movs	r2, #0
 801dd9c:	2300      	movs	r3, #0
 801dd9e:	f7e2 feab 	bl	8000af8 <__aeabi_dcmpeq>
 801dda2:	2800      	cmp	r0, #0
 801dda4:	d033      	beq.n	801de0e <_printf_float+0x266>
 801dda6:	4a37      	ldr	r2, [pc, #220]	@ (801de84 <_printf_float+0x2dc>)
 801dda8:	2301      	movs	r3, #1
 801ddaa:	4631      	mov	r1, r6
 801ddac:	4628      	mov	r0, r5
 801ddae:	47b8      	blx	r7
 801ddb0:	3001      	adds	r0, #1
 801ddb2:	f43f af54 	beq.w	801dc5e <_printf_float+0xb6>
 801ddb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ddba:	4543      	cmp	r3, r8
 801ddbc:	db02      	blt.n	801ddc4 <_printf_float+0x21c>
 801ddbe:	6823      	ldr	r3, [r4, #0]
 801ddc0:	07d8      	lsls	r0, r3, #31
 801ddc2:	d50f      	bpl.n	801dde4 <_printf_float+0x23c>
 801ddc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ddc8:	4631      	mov	r1, r6
 801ddca:	4628      	mov	r0, r5
 801ddcc:	47b8      	blx	r7
 801ddce:	3001      	adds	r0, #1
 801ddd0:	f43f af45 	beq.w	801dc5e <_printf_float+0xb6>
 801ddd4:	f04f 0900 	mov.w	r9, #0
 801ddd8:	f108 38ff 	add.w	r8, r8, #4294967295
 801dddc:	f104 0a1a 	add.w	sl, r4, #26
 801dde0:	45c8      	cmp	r8, r9
 801dde2:	dc09      	bgt.n	801ddf8 <_printf_float+0x250>
 801dde4:	6823      	ldr	r3, [r4, #0]
 801dde6:	079b      	lsls	r3, r3, #30
 801dde8:	f100 8103 	bmi.w	801dff2 <_printf_float+0x44a>
 801ddec:	68e0      	ldr	r0, [r4, #12]
 801ddee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ddf0:	4298      	cmp	r0, r3
 801ddf2:	bfb8      	it	lt
 801ddf4:	4618      	movlt	r0, r3
 801ddf6:	e734      	b.n	801dc62 <_printf_float+0xba>
 801ddf8:	2301      	movs	r3, #1
 801ddfa:	4652      	mov	r2, sl
 801ddfc:	4631      	mov	r1, r6
 801ddfe:	4628      	mov	r0, r5
 801de00:	47b8      	blx	r7
 801de02:	3001      	adds	r0, #1
 801de04:	f43f af2b 	beq.w	801dc5e <_printf_float+0xb6>
 801de08:	f109 0901 	add.w	r9, r9, #1
 801de0c:	e7e8      	b.n	801dde0 <_printf_float+0x238>
 801de0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de10:	2b00      	cmp	r3, #0
 801de12:	dc39      	bgt.n	801de88 <_printf_float+0x2e0>
 801de14:	4a1b      	ldr	r2, [pc, #108]	@ (801de84 <_printf_float+0x2dc>)
 801de16:	2301      	movs	r3, #1
 801de18:	4631      	mov	r1, r6
 801de1a:	4628      	mov	r0, r5
 801de1c:	47b8      	blx	r7
 801de1e:	3001      	adds	r0, #1
 801de20:	f43f af1d 	beq.w	801dc5e <_printf_float+0xb6>
 801de24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801de28:	ea59 0303 	orrs.w	r3, r9, r3
 801de2c:	d102      	bne.n	801de34 <_printf_float+0x28c>
 801de2e:	6823      	ldr	r3, [r4, #0]
 801de30:	07d9      	lsls	r1, r3, #31
 801de32:	d5d7      	bpl.n	801dde4 <_printf_float+0x23c>
 801de34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801de38:	4631      	mov	r1, r6
 801de3a:	4628      	mov	r0, r5
 801de3c:	47b8      	blx	r7
 801de3e:	3001      	adds	r0, #1
 801de40:	f43f af0d 	beq.w	801dc5e <_printf_float+0xb6>
 801de44:	f04f 0a00 	mov.w	sl, #0
 801de48:	f104 0b1a 	add.w	fp, r4, #26
 801de4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de4e:	425b      	negs	r3, r3
 801de50:	4553      	cmp	r3, sl
 801de52:	dc01      	bgt.n	801de58 <_printf_float+0x2b0>
 801de54:	464b      	mov	r3, r9
 801de56:	e793      	b.n	801dd80 <_printf_float+0x1d8>
 801de58:	2301      	movs	r3, #1
 801de5a:	465a      	mov	r2, fp
 801de5c:	4631      	mov	r1, r6
 801de5e:	4628      	mov	r0, r5
 801de60:	47b8      	blx	r7
 801de62:	3001      	adds	r0, #1
 801de64:	f43f aefb 	beq.w	801dc5e <_printf_float+0xb6>
 801de68:	f10a 0a01 	add.w	sl, sl, #1
 801de6c:	e7ee      	b.n	801de4c <_printf_float+0x2a4>
 801de6e:	bf00      	nop
 801de70:	7fefffff 	.word	0x7fefffff
 801de74:	08025555 	.word	0x08025555
 801de78:	08025559 	.word	0x08025559
 801de7c:	0802555d 	.word	0x0802555d
 801de80:	08025561 	.word	0x08025561
 801de84:	08025565 	.word	0x08025565
 801de88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801de8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801de8e:	4553      	cmp	r3, sl
 801de90:	bfa8      	it	ge
 801de92:	4653      	movge	r3, sl
 801de94:	2b00      	cmp	r3, #0
 801de96:	4699      	mov	r9, r3
 801de98:	dc36      	bgt.n	801df08 <_printf_float+0x360>
 801de9a:	f04f 0b00 	mov.w	fp, #0
 801de9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dea2:	f104 021a 	add.w	r2, r4, #26
 801dea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801dea8:	9306      	str	r3, [sp, #24]
 801deaa:	eba3 0309 	sub.w	r3, r3, r9
 801deae:	455b      	cmp	r3, fp
 801deb0:	dc31      	bgt.n	801df16 <_printf_float+0x36e>
 801deb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801deb4:	459a      	cmp	sl, r3
 801deb6:	dc3a      	bgt.n	801df2e <_printf_float+0x386>
 801deb8:	6823      	ldr	r3, [r4, #0]
 801deba:	07da      	lsls	r2, r3, #31
 801debc:	d437      	bmi.n	801df2e <_printf_float+0x386>
 801debe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dec0:	ebaa 0903 	sub.w	r9, sl, r3
 801dec4:	9b06      	ldr	r3, [sp, #24]
 801dec6:	ebaa 0303 	sub.w	r3, sl, r3
 801deca:	4599      	cmp	r9, r3
 801decc:	bfa8      	it	ge
 801dece:	4699      	movge	r9, r3
 801ded0:	f1b9 0f00 	cmp.w	r9, #0
 801ded4:	dc33      	bgt.n	801df3e <_printf_float+0x396>
 801ded6:	f04f 0800 	mov.w	r8, #0
 801deda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801dede:	f104 0b1a 	add.w	fp, r4, #26
 801dee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dee4:	ebaa 0303 	sub.w	r3, sl, r3
 801dee8:	eba3 0309 	sub.w	r3, r3, r9
 801deec:	4543      	cmp	r3, r8
 801deee:	f77f af79 	ble.w	801dde4 <_printf_float+0x23c>
 801def2:	2301      	movs	r3, #1
 801def4:	465a      	mov	r2, fp
 801def6:	4631      	mov	r1, r6
 801def8:	4628      	mov	r0, r5
 801defa:	47b8      	blx	r7
 801defc:	3001      	adds	r0, #1
 801defe:	f43f aeae 	beq.w	801dc5e <_printf_float+0xb6>
 801df02:	f108 0801 	add.w	r8, r8, #1
 801df06:	e7ec      	b.n	801dee2 <_printf_float+0x33a>
 801df08:	4642      	mov	r2, r8
 801df0a:	4631      	mov	r1, r6
 801df0c:	4628      	mov	r0, r5
 801df0e:	47b8      	blx	r7
 801df10:	3001      	adds	r0, #1
 801df12:	d1c2      	bne.n	801de9a <_printf_float+0x2f2>
 801df14:	e6a3      	b.n	801dc5e <_printf_float+0xb6>
 801df16:	2301      	movs	r3, #1
 801df18:	4631      	mov	r1, r6
 801df1a:	4628      	mov	r0, r5
 801df1c:	9206      	str	r2, [sp, #24]
 801df1e:	47b8      	blx	r7
 801df20:	3001      	adds	r0, #1
 801df22:	f43f ae9c 	beq.w	801dc5e <_printf_float+0xb6>
 801df26:	9a06      	ldr	r2, [sp, #24]
 801df28:	f10b 0b01 	add.w	fp, fp, #1
 801df2c:	e7bb      	b.n	801dea6 <_printf_float+0x2fe>
 801df2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df32:	4631      	mov	r1, r6
 801df34:	4628      	mov	r0, r5
 801df36:	47b8      	blx	r7
 801df38:	3001      	adds	r0, #1
 801df3a:	d1c0      	bne.n	801debe <_printf_float+0x316>
 801df3c:	e68f      	b.n	801dc5e <_printf_float+0xb6>
 801df3e:	9a06      	ldr	r2, [sp, #24]
 801df40:	464b      	mov	r3, r9
 801df42:	4442      	add	r2, r8
 801df44:	4631      	mov	r1, r6
 801df46:	4628      	mov	r0, r5
 801df48:	47b8      	blx	r7
 801df4a:	3001      	adds	r0, #1
 801df4c:	d1c3      	bne.n	801ded6 <_printf_float+0x32e>
 801df4e:	e686      	b.n	801dc5e <_printf_float+0xb6>
 801df50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801df54:	f1ba 0f01 	cmp.w	sl, #1
 801df58:	dc01      	bgt.n	801df5e <_printf_float+0x3b6>
 801df5a:	07db      	lsls	r3, r3, #31
 801df5c:	d536      	bpl.n	801dfcc <_printf_float+0x424>
 801df5e:	2301      	movs	r3, #1
 801df60:	4642      	mov	r2, r8
 801df62:	4631      	mov	r1, r6
 801df64:	4628      	mov	r0, r5
 801df66:	47b8      	blx	r7
 801df68:	3001      	adds	r0, #1
 801df6a:	f43f ae78 	beq.w	801dc5e <_printf_float+0xb6>
 801df6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801df72:	4631      	mov	r1, r6
 801df74:	4628      	mov	r0, r5
 801df76:	47b8      	blx	r7
 801df78:	3001      	adds	r0, #1
 801df7a:	f43f ae70 	beq.w	801dc5e <_printf_float+0xb6>
 801df7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801df82:	2200      	movs	r2, #0
 801df84:	2300      	movs	r3, #0
 801df86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df8a:	f7e2 fdb5 	bl	8000af8 <__aeabi_dcmpeq>
 801df8e:	b9c0      	cbnz	r0, 801dfc2 <_printf_float+0x41a>
 801df90:	4653      	mov	r3, sl
 801df92:	f108 0201 	add.w	r2, r8, #1
 801df96:	4631      	mov	r1, r6
 801df98:	4628      	mov	r0, r5
 801df9a:	47b8      	blx	r7
 801df9c:	3001      	adds	r0, #1
 801df9e:	d10c      	bne.n	801dfba <_printf_float+0x412>
 801dfa0:	e65d      	b.n	801dc5e <_printf_float+0xb6>
 801dfa2:	2301      	movs	r3, #1
 801dfa4:	465a      	mov	r2, fp
 801dfa6:	4631      	mov	r1, r6
 801dfa8:	4628      	mov	r0, r5
 801dfaa:	47b8      	blx	r7
 801dfac:	3001      	adds	r0, #1
 801dfae:	f43f ae56 	beq.w	801dc5e <_printf_float+0xb6>
 801dfb2:	f108 0801 	add.w	r8, r8, #1
 801dfb6:	45d0      	cmp	r8, sl
 801dfb8:	dbf3      	blt.n	801dfa2 <_printf_float+0x3fa>
 801dfba:	464b      	mov	r3, r9
 801dfbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801dfc0:	e6df      	b.n	801dd82 <_printf_float+0x1da>
 801dfc2:	f04f 0800 	mov.w	r8, #0
 801dfc6:	f104 0b1a 	add.w	fp, r4, #26
 801dfca:	e7f4      	b.n	801dfb6 <_printf_float+0x40e>
 801dfcc:	2301      	movs	r3, #1
 801dfce:	4642      	mov	r2, r8
 801dfd0:	e7e1      	b.n	801df96 <_printf_float+0x3ee>
 801dfd2:	2301      	movs	r3, #1
 801dfd4:	464a      	mov	r2, r9
 801dfd6:	4631      	mov	r1, r6
 801dfd8:	4628      	mov	r0, r5
 801dfda:	47b8      	blx	r7
 801dfdc:	3001      	adds	r0, #1
 801dfde:	f43f ae3e 	beq.w	801dc5e <_printf_float+0xb6>
 801dfe2:	f108 0801 	add.w	r8, r8, #1
 801dfe6:	68e3      	ldr	r3, [r4, #12]
 801dfe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dfea:	1a5b      	subs	r3, r3, r1
 801dfec:	4543      	cmp	r3, r8
 801dfee:	dcf0      	bgt.n	801dfd2 <_printf_float+0x42a>
 801dff0:	e6fc      	b.n	801ddec <_printf_float+0x244>
 801dff2:	f04f 0800 	mov.w	r8, #0
 801dff6:	f104 0919 	add.w	r9, r4, #25
 801dffa:	e7f4      	b.n	801dfe6 <_printf_float+0x43e>

0801dffc <_printf_common>:
 801dffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e000:	4616      	mov	r6, r2
 801e002:	4698      	mov	r8, r3
 801e004:	688a      	ldr	r2, [r1, #8]
 801e006:	690b      	ldr	r3, [r1, #16]
 801e008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e00c:	4293      	cmp	r3, r2
 801e00e:	bfb8      	it	lt
 801e010:	4613      	movlt	r3, r2
 801e012:	6033      	str	r3, [r6, #0]
 801e014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e018:	4607      	mov	r7, r0
 801e01a:	460c      	mov	r4, r1
 801e01c:	b10a      	cbz	r2, 801e022 <_printf_common+0x26>
 801e01e:	3301      	adds	r3, #1
 801e020:	6033      	str	r3, [r6, #0]
 801e022:	6823      	ldr	r3, [r4, #0]
 801e024:	0699      	lsls	r1, r3, #26
 801e026:	bf42      	ittt	mi
 801e028:	6833      	ldrmi	r3, [r6, #0]
 801e02a:	3302      	addmi	r3, #2
 801e02c:	6033      	strmi	r3, [r6, #0]
 801e02e:	6825      	ldr	r5, [r4, #0]
 801e030:	f015 0506 	ands.w	r5, r5, #6
 801e034:	d106      	bne.n	801e044 <_printf_common+0x48>
 801e036:	f104 0a19 	add.w	sl, r4, #25
 801e03a:	68e3      	ldr	r3, [r4, #12]
 801e03c:	6832      	ldr	r2, [r6, #0]
 801e03e:	1a9b      	subs	r3, r3, r2
 801e040:	42ab      	cmp	r3, r5
 801e042:	dc26      	bgt.n	801e092 <_printf_common+0x96>
 801e044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e048:	6822      	ldr	r2, [r4, #0]
 801e04a:	3b00      	subs	r3, #0
 801e04c:	bf18      	it	ne
 801e04e:	2301      	movne	r3, #1
 801e050:	0692      	lsls	r2, r2, #26
 801e052:	d42b      	bmi.n	801e0ac <_printf_common+0xb0>
 801e054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e058:	4641      	mov	r1, r8
 801e05a:	4638      	mov	r0, r7
 801e05c:	47c8      	blx	r9
 801e05e:	3001      	adds	r0, #1
 801e060:	d01e      	beq.n	801e0a0 <_printf_common+0xa4>
 801e062:	6823      	ldr	r3, [r4, #0]
 801e064:	6922      	ldr	r2, [r4, #16]
 801e066:	f003 0306 	and.w	r3, r3, #6
 801e06a:	2b04      	cmp	r3, #4
 801e06c:	bf02      	ittt	eq
 801e06e:	68e5      	ldreq	r5, [r4, #12]
 801e070:	6833      	ldreq	r3, [r6, #0]
 801e072:	1aed      	subeq	r5, r5, r3
 801e074:	68a3      	ldr	r3, [r4, #8]
 801e076:	bf0c      	ite	eq
 801e078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e07c:	2500      	movne	r5, #0
 801e07e:	4293      	cmp	r3, r2
 801e080:	bfc4      	itt	gt
 801e082:	1a9b      	subgt	r3, r3, r2
 801e084:	18ed      	addgt	r5, r5, r3
 801e086:	2600      	movs	r6, #0
 801e088:	341a      	adds	r4, #26
 801e08a:	42b5      	cmp	r5, r6
 801e08c:	d11a      	bne.n	801e0c4 <_printf_common+0xc8>
 801e08e:	2000      	movs	r0, #0
 801e090:	e008      	b.n	801e0a4 <_printf_common+0xa8>
 801e092:	2301      	movs	r3, #1
 801e094:	4652      	mov	r2, sl
 801e096:	4641      	mov	r1, r8
 801e098:	4638      	mov	r0, r7
 801e09a:	47c8      	blx	r9
 801e09c:	3001      	adds	r0, #1
 801e09e:	d103      	bne.n	801e0a8 <_printf_common+0xac>
 801e0a0:	f04f 30ff 	mov.w	r0, #4294967295
 801e0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0a8:	3501      	adds	r5, #1
 801e0aa:	e7c6      	b.n	801e03a <_printf_common+0x3e>
 801e0ac:	18e1      	adds	r1, r4, r3
 801e0ae:	1c5a      	adds	r2, r3, #1
 801e0b0:	2030      	movs	r0, #48	@ 0x30
 801e0b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e0b6:	4422      	add	r2, r4
 801e0b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e0bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e0c0:	3302      	adds	r3, #2
 801e0c2:	e7c7      	b.n	801e054 <_printf_common+0x58>
 801e0c4:	2301      	movs	r3, #1
 801e0c6:	4622      	mov	r2, r4
 801e0c8:	4641      	mov	r1, r8
 801e0ca:	4638      	mov	r0, r7
 801e0cc:	47c8      	blx	r9
 801e0ce:	3001      	adds	r0, #1
 801e0d0:	d0e6      	beq.n	801e0a0 <_printf_common+0xa4>
 801e0d2:	3601      	adds	r6, #1
 801e0d4:	e7d9      	b.n	801e08a <_printf_common+0x8e>
	...

0801e0d8 <_printf_i>:
 801e0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e0dc:	7e0f      	ldrb	r7, [r1, #24]
 801e0de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e0e0:	2f78      	cmp	r7, #120	@ 0x78
 801e0e2:	4691      	mov	r9, r2
 801e0e4:	4680      	mov	r8, r0
 801e0e6:	460c      	mov	r4, r1
 801e0e8:	469a      	mov	sl, r3
 801e0ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e0ee:	d807      	bhi.n	801e100 <_printf_i+0x28>
 801e0f0:	2f62      	cmp	r7, #98	@ 0x62
 801e0f2:	d80a      	bhi.n	801e10a <_printf_i+0x32>
 801e0f4:	2f00      	cmp	r7, #0
 801e0f6:	f000 80d2 	beq.w	801e29e <_printf_i+0x1c6>
 801e0fa:	2f58      	cmp	r7, #88	@ 0x58
 801e0fc:	f000 80b9 	beq.w	801e272 <_printf_i+0x19a>
 801e100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e108:	e03a      	b.n	801e180 <_printf_i+0xa8>
 801e10a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e10e:	2b15      	cmp	r3, #21
 801e110:	d8f6      	bhi.n	801e100 <_printf_i+0x28>
 801e112:	a101      	add	r1, pc, #4	@ (adr r1, 801e118 <_printf_i+0x40>)
 801e114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e118:	0801e171 	.word	0x0801e171
 801e11c:	0801e185 	.word	0x0801e185
 801e120:	0801e101 	.word	0x0801e101
 801e124:	0801e101 	.word	0x0801e101
 801e128:	0801e101 	.word	0x0801e101
 801e12c:	0801e101 	.word	0x0801e101
 801e130:	0801e185 	.word	0x0801e185
 801e134:	0801e101 	.word	0x0801e101
 801e138:	0801e101 	.word	0x0801e101
 801e13c:	0801e101 	.word	0x0801e101
 801e140:	0801e101 	.word	0x0801e101
 801e144:	0801e285 	.word	0x0801e285
 801e148:	0801e1af 	.word	0x0801e1af
 801e14c:	0801e23f 	.word	0x0801e23f
 801e150:	0801e101 	.word	0x0801e101
 801e154:	0801e101 	.word	0x0801e101
 801e158:	0801e2a7 	.word	0x0801e2a7
 801e15c:	0801e101 	.word	0x0801e101
 801e160:	0801e1af 	.word	0x0801e1af
 801e164:	0801e101 	.word	0x0801e101
 801e168:	0801e101 	.word	0x0801e101
 801e16c:	0801e247 	.word	0x0801e247
 801e170:	6833      	ldr	r3, [r6, #0]
 801e172:	1d1a      	adds	r2, r3, #4
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	6032      	str	r2, [r6, #0]
 801e178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e17c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e180:	2301      	movs	r3, #1
 801e182:	e09d      	b.n	801e2c0 <_printf_i+0x1e8>
 801e184:	6833      	ldr	r3, [r6, #0]
 801e186:	6820      	ldr	r0, [r4, #0]
 801e188:	1d19      	adds	r1, r3, #4
 801e18a:	6031      	str	r1, [r6, #0]
 801e18c:	0606      	lsls	r6, r0, #24
 801e18e:	d501      	bpl.n	801e194 <_printf_i+0xbc>
 801e190:	681d      	ldr	r5, [r3, #0]
 801e192:	e003      	b.n	801e19c <_printf_i+0xc4>
 801e194:	0645      	lsls	r5, r0, #25
 801e196:	d5fb      	bpl.n	801e190 <_printf_i+0xb8>
 801e198:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e19c:	2d00      	cmp	r5, #0
 801e19e:	da03      	bge.n	801e1a8 <_printf_i+0xd0>
 801e1a0:	232d      	movs	r3, #45	@ 0x2d
 801e1a2:	426d      	negs	r5, r5
 801e1a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e1a8:	4859      	ldr	r0, [pc, #356]	@ (801e310 <_printf_i+0x238>)
 801e1aa:	230a      	movs	r3, #10
 801e1ac:	e011      	b.n	801e1d2 <_printf_i+0xfa>
 801e1ae:	6821      	ldr	r1, [r4, #0]
 801e1b0:	6833      	ldr	r3, [r6, #0]
 801e1b2:	0608      	lsls	r0, r1, #24
 801e1b4:	f853 5b04 	ldr.w	r5, [r3], #4
 801e1b8:	d402      	bmi.n	801e1c0 <_printf_i+0xe8>
 801e1ba:	0649      	lsls	r1, r1, #25
 801e1bc:	bf48      	it	mi
 801e1be:	b2ad      	uxthmi	r5, r5
 801e1c0:	2f6f      	cmp	r7, #111	@ 0x6f
 801e1c2:	4853      	ldr	r0, [pc, #332]	@ (801e310 <_printf_i+0x238>)
 801e1c4:	6033      	str	r3, [r6, #0]
 801e1c6:	bf14      	ite	ne
 801e1c8:	230a      	movne	r3, #10
 801e1ca:	2308      	moveq	r3, #8
 801e1cc:	2100      	movs	r1, #0
 801e1ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e1d2:	6866      	ldr	r6, [r4, #4]
 801e1d4:	60a6      	str	r6, [r4, #8]
 801e1d6:	2e00      	cmp	r6, #0
 801e1d8:	bfa2      	ittt	ge
 801e1da:	6821      	ldrge	r1, [r4, #0]
 801e1dc:	f021 0104 	bicge.w	r1, r1, #4
 801e1e0:	6021      	strge	r1, [r4, #0]
 801e1e2:	b90d      	cbnz	r5, 801e1e8 <_printf_i+0x110>
 801e1e4:	2e00      	cmp	r6, #0
 801e1e6:	d04b      	beq.n	801e280 <_printf_i+0x1a8>
 801e1e8:	4616      	mov	r6, r2
 801e1ea:	fbb5 f1f3 	udiv	r1, r5, r3
 801e1ee:	fb03 5711 	mls	r7, r3, r1, r5
 801e1f2:	5dc7      	ldrb	r7, [r0, r7]
 801e1f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e1f8:	462f      	mov	r7, r5
 801e1fa:	42bb      	cmp	r3, r7
 801e1fc:	460d      	mov	r5, r1
 801e1fe:	d9f4      	bls.n	801e1ea <_printf_i+0x112>
 801e200:	2b08      	cmp	r3, #8
 801e202:	d10b      	bne.n	801e21c <_printf_i+0x144>
 801e204:	6823      	ldr	r3, [r4, #0]
 801e206:	07df      	lsls	r7, r3, #31
 801e208:	d508      	bpl.n	801e21c <_printf_i+0x144>
 801e20a:	6923      	ldr	r3, [r4, #16]
 801e20c:	6861      	ldr	r1, [r4, #4]
 801e20e:	4299      	cmp	r1, r3
 801e210:	bfde      	ittt	le
 801e212:	2330      	movle	r3, #48	@ 0x30
 801e214:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e218:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e21c:	1b92      	subs	r2, r2, r6
 801e21e:	6122      	str	r2, [r4, #16]
 801e220:	f8cd a000 	str.w	sl, [sp]
 801e224:	464b      	mov	r3, r9
 801e226:	aa03      	add	r2, sp, #12
 801e228:	4621      	mov	r1, r4
 801e22a:	4640      	mov	r0, r8
 801e22c:	f7ff fee6 	bl	801dffc <_printf_common>
 801e230:	3001      	adds	r0, #1
 801e232:	d14a      	bne.n	801e2ca <_printf_i+0x1f2>
 801e234:	f04f 30ff 	mov.w	r0, #4294967295
 801e238:	b004      	add	sp, #16
 801e23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e23e:	6823      	ldr	r3, [r4, #0]
 801e240:	f043 0320 	orr.w	r3, r3, #32
 801e244:	6023      	str	r3, [r4, #0]
 801e246:	4833      	ldr	r0, [pc, #204]	@ (801e314 <_printf_i+0x23c>)
 801e248:	2778      	movs	r7, #120	@ 0x78
 801e24a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e24e:	6823      	ldr	r3, [r4, #0]
 801e250:	6831      	ldr	r1, [r6, #0]
 801e252:	061f      	lsls	r7, r3, #24
 801e254:	f851 5b04 	ldr.w	r5, [r1], #4
 801e258:	d402      	bmi.n	801e260 <_printf_i+0x188>
 801e25a:	065f      	lsls	r7, r3, #25
 801e25c:	bf48      	it	mi
 801e25e:	b2ad      	uxthmi	r5, r5
 801e260:	6031      	str	r1, [r6, #0]
 801e262:	07d9      	lsls	r1, r3, #31
 801e264:	bf44      	itt	mi
 801e266:	f043 0320 	orrmi.w	r3, r3, #32
 801e26a:	6023      	strmi	r3, [r4, #0]
 801e26c:	b11d      	cbz	r5, 801e276 <_printf_i+0x19e>
 801e26e:	2310      	movs	r3, #16
 801e270:	e7ac      	b.n	801e1cc <_printf_i+0xf4>
 801e272:	4827      	ldr	r0, [pc, #156]	@ (801e310 <_printf_i+0x238>)
 801e274:	e7e9      	b.n	801e24a <_printf_i+0x172>
 801e276:	6823      	ldr	r3, [r4, #0]
 801e278:	f023 0320 	bic.w	r3, r3, #32
 801e27c:	6023      	str	r3, [r4, #0]
 801e27e:	e7f6      	b.n	801e26e <_printf_i+0x196>
 801e280:	4616      	mov	r6, r2
 801e282:	e7bd      	b.n	801e200 <_printf_i+0x128>
 801e284:	6833      	ldr	r3, [r6, #0]
 801e286:	6825      	ldr	r5, [r4, #0]
 801e288:	6961      	ldr	r1, [r4, #20]
 801e28a:	1d18      	adds	r0, r3, #4
 801e28c:	6030      	str	r0, [r6, #0]
 801e28e:	062e      	lsls	r6, r5, #24
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	d501      	bpl.n	801e298 <_printf_i+0x1c0>
 801e294:	6019      	str	r1, [r3, #0]
 801e296:	e002      	b.n	801e29e <_printf_i+0x1c6>
 801e298:	0668      	lsls	r0, r5, #25
 801e29a:	d5fb      	bpl.n	801e294 <_printf_i+0x1bc>
 801e29c:	8019      	strh	r1, [r3, #0]
 801e29e:	2300      	movs	r3, #0
 801e2a0:	6123      	str	r3, [r4, #16]
 801e2a2:	4616      	mov	r6, r2
 801e2a4:	e7bc      	b.n	801e220 <_printf_i+0x148>
 801e2a6:	6833      	ldr	r3, [r6, #0]
 801e2a8:	1d1a      	adds	r2, r3, #4
 801e2aa:	6032      	str	r2, [r6, #0]
 801e2ac:	681e      	ldr	r6, [r3, #0]
 801e2ae:	6862      	ldr	r2, [r4, #4]
 801e2b0:	2100      	movs	r1, #0
 801e2b2:	4630      	mov	r0, r6
 801e2b4:	f7e1 ffa4 	bl	8000200 <memchr>
 801e2b8:	b108      	cbz	r0, 801e2be <_printf_i+0x1e6>
 801e2ba:	1b80      	subs	r0, r0, r6
 801e2bc:	6060      	str	r0, [r4, #4]
 801e2be:	6863      	ldr	r3, [r4, #4]
 801e2c0:	6123      	str	r3, [r4, #16]
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e2c8:	e7aa      	b.n	801e220 <_printf_i+0x148>
 801e2ca:	6923      	ldr	r3, [r4, #16]
 801e2cc:	4632      	mov	r2, r6
 801e2ce:	4649      	mov	r1, r9
 801e2d0:	4640      	mov	r0, r8
 801e2d2:	47d0      	blx	sl
 801e2d4:	3001      	adds	r0, #1
 801e2d6:	d0ad      	beq.n	801e234 <_printf_i+0x15c>
 801e2d8:	6823      	ldr	r3, [r4, #0]
 801e2da:	079b      	lsls	r3, r3, #30
 801e2dc:	d413      	bmi.n	801e306 <_printf_i+0x22e>
 801e2de:	68e0      	ldr	r0, [r4, #12]
 801e2e0:	9b03      	ldr	r3, [sp, #12]
 801e2e2:	4298      	cmp	r0, r3
 801e2e4:	bfb8      	it	lt
 801e2e6:	4618      	movlt	r0, r3
 801e2e8:	e7a6      	b.n	801e238 <_printf_i+0x160>
 801e2ea:	2301      	movs	r3, #1
 801e2ec:	4632      	mov	r2, r6
 801e2ee:	4649      	mov	r1, r9
 801e2f0:	4640      	mov	r0, r8
 801e2f2:	47d0      	blx	sl
 801e2f4:	3001      	adds	r0, #1
 801e2f6:	d09d      	beq.n	801e234 <_printf_i+0x15c>
 801e2f8:	3501      	adds	r5, #1
 801e2fa:	68e3      	ldr	r3, [r4, #12]
 801e2fc:	9903      	ldr	r1, [sp, #12]
 801e2fe:	1a5b      	subs	r3, r3, r1
 801e300:	42ab      	cmp	r3, r5
 801e302:	dcf2      	bgt.n	801e2ea <_printf_i+0x212>
 801e304:	e7eb      	b.n	801e2de <_printf_i+0x206>
 801e306:	2500      	movs	r5, #0
 801e308:	f104 0619 	add.w	r6, r4, #25
 801e30c:	e7f5      	b.n	801e2fa <_printf_i+0x222>
 801e30e:	bf00      	nop
 801e310:	08025567 	.word	0x08025567
 801e314:	08025578 	.word	0x08025578

0801e318 <_scanf_float>:
 801e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e31c:	b087      	sub	sp, #28
 801e31e:	4617      	mov	r7, r2
 801e320:	9303      	str	r3, [sp, #12]
 801e322:	688b      	ldr	r3, [r1, #8]
 801e324:	1e5a      	subs	r2, r3, #1
 801e326:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e32a:	bf81      	itttt	hi
 801e32c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e330:	eb03 0b05 	addhi.w	fp, r3, r5
 801e334:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e338:	608b      	strhi	r3, [r1, #8]
 801e33a:	680b      	ldr	r3, [r1, #0]
 801e33c:	460a      	mov	r2, r1
 801e33e:	f04f 0500 	mov.w	r5, #0
 801e342:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e346:	f842 3b1c 	str.w	r3, [r2], #28
 801e34a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e34e:	4680      	mov	r8, r0
 801e350:	460c      	mov	r4, r1
 801e352:	bf98      	it	ls
 801e354:	f04f 0b00 	movls.w	fp, #0
 801e358:	9201      	str	r2, [sp, #4]
 801e35a:	4616      	mov	r6, r2
 801e35c:	46aa      	mov	sl, r5
 801e35e:	46a9      	mov	r9, r5
 801e360:	9502      	str	r5, [sp, #8]
 801e362:	68a2      	ldr	r2, [r4, #8]
 801e364:	b152      	cbz	r2, 801e37c <_scanf_float+0x64>
 801e366:	683b      	ldr	r3, [r7, #0]
 801e368:	781b      	ldrb	r3, [r3, #0]
 801e36a:	2b4e      	cmp	r3, #78	@ 0x4e
 801e36c:	d864      	bhi.n	801e438 <_scanf_float+0x120>
 801e36e:	2b40      	cmp	r3, #64	@ 0x40
 801e370:	d83c      	bhi.n	801e3ec <_scanf_float+0xd4>
 801e372:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e376:	b2c8      	uxtb	r0, r1
 801e378:	280e      	cmp	r0, #14
 801e37a:	d93a      	bls.n	801e3f2 <_scanf_float+0xda>
 801e37c:	f1b9 0f00 	cmp.w	r9, #0
 801e380:	d003      	beq.n	801e38a <_scanf_float+0x72>
 801e382:	6823      	ldr	r3, [r4, #0]
 801e384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e388:	6023      	str	r3, [r4, #0]
 801e38a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e38e:	f1ba 0f01 	cmp.w	sl, #1
 801e392:	f200 8117 	bhi.w	801e5c4 <_scanf_float+0x2ac>
 801e396:	9b01      	ldr	r3, [sp, #4]
 801e398:	429e      	cmp	r6, r3
 801e39a:	f200 8108 	bhi.w	801e5ae <_scanf_float+0x296>
 801e39e:	2001      	movs	r0, #1
 801e3a0:	b007      	add	sp, #28
 801e3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3a6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e3aa:	2a0d      	cmp	r2, #13
 801e3ac:	d8e6      	bhi.n	801e37c <_scanf_float+0x64>
 801e3ae:	a101      	add	r1, pc, #4	@ (adr r1, 801e3b4 <_scanf_float+0x9c>)
 801e3b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e3b4:	0801e4fb 	.word	0x0801e4fb
 801e3b8:	0801e37d 	.word	0x0801e37d
 801e3bc:	0801e37d 	.word	0x0801e37d
 801e3c0:	0801e37d 	.word	0x0801e37d
 801e3c4:	0801e55b 	.word	0x0801e55b
 801e3c8:	0801e533 	.word	0x0801e533
 801e3cc:	0801e37d 	.word	0x0801e37d
 801e3d0:	0801e37d 	.word	0x0801e37d
 801e3d4:	0801e509 	.word	0x0801e509
 801e3d8:	0801e37d 	.word	0x0801e37d
 801e3dc:	0801e37d 	.word	0x0801e37d
 801e3e0:	0801e37d 	.word	0x0801e37d
 801e3e4:	0801e37d 	.word	0x0801e37d
 801e3e8:	0801e4c1 	.word	0x0801e4c1
 801e3ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e3f0:	e7db      	b.n	801e3aa <_scanf_float+0x92>
 801e3f2:	290e      	cmp	r1, #14
 801e3f4:	d8c2      	bhi.n	801e37c <_scanf_float+0x64>
 801e3f6:	a001      	add	r0, pc, #4	@ (adr r0, 801e3fc <_scanf_float+0xe4>)
 801e3f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e3fc:	0801e4b1 	.word	0x0801e4b1
 801e400:	0801e37d 	.word	0x0801e37d
 801e404:	0801e4b1 	.word	0x0801e4b1
 801e408:	0801e547 	.word	0x0801e547
 801e40c:	0801e37d 	.word	0x0801e37d
 801e410:	0801e459 	.word	0x0801e459
 801e414:	0801e497 	.word	0x0801e497
 801e418:	0801e497 	.word	0x0801e497
 801e41c:	0801e497 	.word	0x0801e497
 801e420:	0801e497 	.word	0x0801e497
 801e424:	0801e497 	.word	0x0801e497
 801e428:	0801e497 	.word	0x0801e497
 801e42c:	0801e497 	.word	0x0801e497
 801e430:	0801e497 	.word	0x0801e497
 801e434:	0801e497 	.word	0x0801e497
 801e438:	2b6e      	cmp	r3, #110	@ 0x6e
 801e43a:	d809      	bhi.n	801e450 <_scanf_float+0x138>
 801e43c:	2b60      	cmp	r3, #96	@ 0x60
 801e43e:	d8b2      	bhi.n	801e3a6 <_scanf_float+0x8e>
 801e440:	2b54      	cmp	r3, #84	@ 0x54
 801e442:	d07b      	beq.n	801e53c <_scanf_float+0x224>
 801e444:	2b59      	cmp	r3, #89	@ 0x59
 801e446:	d199      	bne.n	801e37c <_scanf_float+0x64>
 801e448:	2d07      	cmp	r5, #7
 801e44a:	d197      	bne.n	801e37c <_scanf_float+0x64>
 801e44c:	2508      	movs	r5, #8
 801e44e:	e02c      	b.n	801e4aa <_scanf_float+0x192>
 801e450:	2b74      	cmp	r3, #116	@ 0x74
 801e452:	d073      	beq.n	801e53c <_scanf_float+0x224>
 801e454:	2b79      	cmp	r3, #121	@ 0x79
 801e456:	e7f6      	b.n	801e446 <_scanf_float+0x12e>
 801e458:	6821      	ldr	r1, [r4, #0]
 801e45a:	05c8      	lsls	r0, r1, #23
 801e45c:	d51b      	bpl.n	801e496 <_scanf_float+0x17e>
 801e45e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e462:	6021      	str	r1, [r4, #0]
 801e464:	f109 0901 	add.w	r9, r9, #1
 801e468:	f1bb 0f00 	cmp.w	fp, #0
 801e46c:	d003      	beq.n	801e476 <_scanf_float+0x15e>
 801e46e:	3201      	adds	r2, #1
 801e470:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e474:	60a2      	str	r2, [r4, #8]
 801e476:	68a3      	ldr	r3, [r4, #8]
 801e478:	3b01      	subs	r3, #1
 801e47a:	60a3      	str	r3, [r4, #8]
 801e47c:	6923      	ldr	r3, [r4, #16]
 801e47e:	3301      	adds	r3, #1
 801e480:	6123      	str	r3, [r4, #16]
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	3b01      	subs	r3, #1
 801e486:	2b00      	cmp	r3, #0
 801e488:	607b      	str	r3, [r7, #4]
 801e48a:	f340 8087 	ble.w	801e59c <_scanf_float+0x284>
 801e48e:	683b      	ldr	r3, [r7, #0]
 801e490:	3301      	adds	r3, #1
 801e492:	603b      	str	r3, [r7, #0]
 801e494:	e765      	b.n	801e362 <_scanf_float+0x4a>
 801e496:	eb1a 0105 	adds.w	r1, sl, r5
 801e49a:	f47f af6f 	bne.w	801e37c <_scanf_float+0x64>
 801e49e:	6822      	ldr	r2, [r4, #0]
 801e4a0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e4a4:	6022      	str	r2, [r4, #0]
 801e4a6:	460d      	mov	r5, r1
 801e4a8:	468a      	mov	sl, r1
 801e4aa:	f806 3b01 	strb.w	r3, [r6], #1
 801e4ae:	e7e2      	b.n	801e476 <_scanf_float+0x15e>
 801e4b0:	6822      	ldr	r2, [r4, #0]
 801e4b2:	0610      	lsls	r0, r2, #24
 801e4b4:	f57f af62 	bpl.w	801e37c <_scanf_float+0x64>
 801e4b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e4bc:	6022      	str	r2, [r4, #0]
 801e4be:	e7f4      	b.n	801e4aa <_scanf_float+0x192>
 801e4c0:	f1ba 0f00 	cmp.w	sl, #0
 801e4c4:	d10e      	bne.n	801e4e4 <_scanf_float+0x1cc>
 801e4c6:	f1b9 0f00 	cmp.w	r9, #0
 801e4ca:	d10e      	bne.n	801e4ea <_scanf_float+0x1d2>
 801e4cc:	6822      	ldr	r2, [r4, #0]
 801e4ce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e4d2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e4d6:	d108      	bne.n	801e4ea <_scanf_float+0x1d2>
 801e4d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e4dc:	6022      	str	r2, [r4, #0]
 801e4de:	f04f 0a01 	mov.w	sl, #1
 801e4e2:	e7e2      	b.n	801e4aa <_scanf_float+0x192>
 801e4e4:	f1ba 0f02 	cmp.w	sl, #2
 801e4e8:	d055      	beq.n	801e596 <_scanf_float+0x27e>
 801e4ea:	2d01      	cmp	r5, #1
 801e4ec:	d002      	beq.n	801e4f4 <_scanf_float+0x1dc>
 801e4ee:	2d04      	cmp	r5, #4
 801e4f0:	f47f af44 	bne.w	801e37c <_scanf_float+0x64>
 801e4f4:	3501      	adds	r5, #1
 801e4f6:	b2ed      	uxtb	r5, r5
 801e4f8:	e7d7      	b.n	801e4aa <_scanf_float+0x192>
 801e4fa:	f1ba 0f01 	cmp.w	sl, #1
 801e4fe:	f47f af3d 	bne.w	801e37c <_scanf_float+0x64>
 801e502:	f04f 0a02 	mov.w	sl, #2
 801e506:	e7d0      	b.n	801e4aa <_scanf_float+0x192>
 801e508:	b97d      	cbnz	r5, 801e52a <_scanf_float+0x212>
 801e50a:	f1b9 0f00 	cmp.w	r9, #0
 801e50e:	f47f af38 	bne.w	801e382 <_scanf_float+0x6a>
 801e512:	6822      	ldr	r2, [r4, #0]
 801e514:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e518:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e51c:	f040 8108 	bne.w	801e730 <_scanf_float+0x418>
 801e520:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e524:	6022      	str	r2, [r4, #0]
 801e526:	2501      	movs	r5, #1
 801e528:	e7bf      	b.n	801e4aa <_scanf_float+0x192>
 801e52a:	2d03      	cmp	r5, #3
 801e52c:	d0e2      	beq.n	801e4f4 <_scanf_float+0x1dc>
 801e52e:	2d05      	cmp	r5, #5
 801e530:	e7de      	b.n	801e4f0 <_scanf_float+0x1d8>
 801e532:	2d02      	cmp	r5, #2
 801e534:	f47f af22 	bne.w	801e37c <_scanf_float+0x64>
 801e538:	2503      	movs	r5, #3
 801e53a:	e7b6      	b.n	801e4aa <_scanf_float+0x192>
 801e53c:	2d06      	cmp	r5, #6
 801e53e:	f47f af1d 	bne.w	801e37c <_scanf_float+0x64>
 801e542:	2507      	movs	r5, #7
 801e544:	e7b1      	b.n	801e4aa <_scanf_float+0x192>
 801e546:	6822      	ldr	r2, [r4, #0]
 801e548:	0591      	lsls	r1, r2, #22
 801e54a:	f57f af17 	bpl.w	801e37c <_scanf_float+0x64>
 801e54e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e552:	6022      	str	r2, [r4, #0]
 801e554:	f8cd 9008 	str.w	r9, [sp, #8]
 801e558:	e7a7      	b.n	801e4aa <_scanf_float+0x192>
 801e55a:	6822      	ldr	r2, [r4, #0]
 801e55c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e560:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e564:	d006      	beq.n	801e574 <_scanf_float+0x25c>
 801e566:	0550      	lsls	r0, r2, #21
 801e568:	f57f af08 	bpl.w	801e37c <_scanf_float+0x64>
 801e56c:	f1b9 0f00 	cmp.w	r9, #0
 801e570:	f000 80de 	beq.w	801e730 <_scanf_float+0x418>
 801e574:	0591      	lsls	r1, r2, #22
 801e576:	bf58      	it	pl
 801e578:	9902      	ldrpl	r1, [sp, #8]
 801e57a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e57e:	bf58      	it	pl
 801e580:	eba9 0101 	subpl.w	r1, r9, r1
 801e584:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e588:	bf58      	it	pl
 801e58a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e58e:	6022      	str	r2, [r4, #0]
 801e590:	f04f 0900 	mov.w	r9, #0
 801e594:	e789      	b.n	801e4aa <_scanf_float+0x192>
 801e596:	f04f 0a03 	mov.w	sl, #3
 801e59a:	e786      	b.n	801e4aa <_scanf_float+0x192>
 801e59c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e5a0:	4639      	mov	r1, r7
 801e5a2:	4640      	mov	r0, r8
 801e5a4:	4798      	blx	r3
 801e5a6:	2800      	cmp	r0, #0
 801e5a8:	f43f aedb 	beq.w	801e362 <_scanf_float+0x4a>
 801e5ac:	e6e6      	b.n	801e37c <_scanf_float+0x64>
 801e5ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e5b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e5b6:	463a      	mov	r2, r7
 801e5b8:	4640      	mov	r0, r8
 801e5ba:	4798      	blx	r3
 801e5bc:	6923      	ldr	r3, [r4, #16]
 801e5be:	3b01      	subs	r3, #1
 801e5c0:	6123      	str	r3, [r4, #16]
 801e5c2:	e6e8      	b.n	801e396 <_scanf_float+0x7e>
 801e5c4:	1e6b      	subs	r3, r5, #1
 801e5c6:	2b06      	cmp	r3, #6
 801e5c8:	d824      	bhi.n	801e614 <_scanf_float+0x2fc>
 801e5ca:	2d02      	cmp	r5, #2
 801e5cc:	d836      	bhi.n	801e63c <_scanf_float+0x324>
 801e5ce:	9b01      	ldr	r3, [sp, #4]
 801e5d0:	429e      	cmp	r6, r3
 801e5d2:	f67f aee4 	bls.w	801e39e <_scanf_float+0x86>
 801e5d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e5da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e5de:	463a      	mov	r2, r7
 801e5e0:	4640      	mov	r0, r8
 801e5e2:	4798      	blx	r3
 801e5e4:	6923      	ldr	r3, [r4, #16]
 801e5e6:	3b01      	subs	r3, #1
 801e5e8:	6123      	str	r3, [r4, #16]
 801e5ea:	e7f0      	b.n	801e5ce <_scanf_float+0x2b6>
 801e5ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e5f0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e5f4:	463a      	mov	r2, r7
 801e5f6:	4640      	mov	r0, r8
 801e5f8:	4798      	blx	r3
 801e5fa:	6923      	ldr	r3, [r4, #16]
 801e5fc:	3b01      	subs	r3, #1
 801e5fe:	6123      	str	r3, [r4, #16]
 801e600:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e604:	fa5f fa8a 	uxtb.w	sl, sl
 801e608:	f1ba 0f02 	cmp.w	sl, #2
 801e60c:	d1ee      	bne.n	801e5ec <_scanf_float+0x2d4>
 801e60e:	3d03      	subs	r5, #3
 801e610:	b2ed      	uxtb	r5, r5
 801e612:	1b76      	subs	r6, r6, r5
 801e614:	6823      	ldr	r3, [r4, #0]
 801e616:	05da      	lsls	r2, r3, #23
 801e618:	d530      	bpl.n	801e67c <_scanf_float+0x364>
 801e61a:	055b      	lsls	r3, r3, #21
 801e61c:	d511      	bpl.n	801e642 <_scanf_float+0x32a>
 801e61e:	9b01      	ldr	r3, [sp, #4]
 801e620:	429e      	cmp	r6, r3
 801e622:	f67f aebc 	bls.w	801e39e <_scanf_float+0x86>
 801e626:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e62a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e62e:	463a      	mov	r2, r7
 801e630:	4640      	mov	r0, r8
 801e632:	4798      	blx	r3
 801e634:	6923      	ldr	r3, [r4, #16]
 801e636:	3b01      	subs	r3, #1
 801e638:	6123      	str	r3, [r4, #16]
 801e63a:	e7f0      	b.n	801e61e <_scanf_float+0x306>
 801e63c:	46aa      	mov	sl, r5
 801e63e:	46b3      	mov	fp, r6
 801e640:	e7de      	b.n	801e600 <_scanf_float+0x2e8>
 801e642:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e646:	6923      	ldr	r3, [r4, #16]
 801e648:	2965      	cmp	r1, #101	@ 0x65
 801e64a:	f103 33ff 	add.w	r3, r3, #4294967295
 801e64e:	f106 35ff 	add.w	r5, r6, #4294967295
 801e652:	6123      	str	r3, [r4, #16]
 801e654:	d00c      	beq.n	801e670 <_scanf_float+0x358>
 801e656:	2945      	cmp	r1, #69	@ 0x45
 801e658:	d00a      	beq.n	801e670 <_scanf_float+0x358>
 801e65a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e65e:	463a      	mov	r2, r7
 801e660:	4640      	mov	r0, r8
 801e662:	4798      	blx	r3
 801e664:	6923      	ldr	r3, [r4, #16]
 801e666:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e66a:	3b01      	subs	r3, #1
 801e66c:	1eb5      	subs	r5, r6, #2
 801e66e:	6123      	str	r3, [r4, #16]
 801e670:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e674:	463a      	mov	r2, r7
 801e676:	4640      	mov	r0, r8
 801e678:	4798      	blx	r3
 801e67a:	462e      	mov	r6, r5
 801e67c:	6822      	ldr	r2, [r4, #0]
 801e67e:	f012 0210 	ands.w	r2, r2, #16
 801e682:	d001      	beq.n	801e688 <_scanf_float+0x370>
 801e684:	2000      	movs	r0, #0
 801e686:	e68b      	b.n	801e3a0 <_scanf_float+0x88>
 801e688:	7032      	strb	r2, [r6, #0]
 801e68a:	6823      	ldr	r3, [r4, #0]
 801e68c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e694:	d11c      	bne.n	801e6d0 <_scanf_float+0x3b8>
 801e696:	9b02      	ldr	r3, [sp, #8]
 801e698:	454b      	cmp	r3, r9
 801e69a:	eba3 0209 	sub.w	r2, r3, r9
 801e69e:	d123      	bne.n	801e6e8 <_scanf_float+0x3d0>
 801e6a0:	9901      	ldr	r1, [sp, #4]
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	4640      	mov	r0, r8
 801e6a6:	f002 fdb7 	bl	8021218 <_strtod_r>
 801e6aa:	9b03      	ldr	r3, [sp, #12]
 801e6ac:	6821      	ldr	r1, [r4, #0]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	f011 0f02 	tst.w	r1, #2
 801e6b4:	ec57 6b10 	vmov	r6, r7, d0
 801e6b8:	f103 0204 	add.w	r2, r3, #4
 801e6bc:	d01f      	beq.n	801e6fe <_scanf_float+0x3e6>
 801e6be:	9903      	ldr	r1, [sp, #12]
 801e6c0:	600a      	str	r2, [r1, #0]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	e9c3 6700 	strd	r6, r7, [r3]
 801e6c8:	68e3      	ldr	r3, [r4, #12]
 801e6ca:	3301      	adds	r3, #1
 801e6cc:	60e3      	str	r3, [r4, #12]
 801e6ce:	e7d9      	b.n	801e684 <_scanf_float+0x36c>
 801e6d0:	9b04      	ldr	r3, [sp, #16]
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d0e4      	beq.n	801e6a0 <_scanf_float+0x388>
 801e6d6:	9905      	ldr	r1, [sp, #20]
 801e6d8:	230a      	movs	r3, #10
 801e6da:	3101      	adds	r1, #1
 801e6dc:	4640      	mov	r0, r8
 801e6de:	f7ff f9b7 	bl	801da50 <_strtol_r>
 801e6e2:	9b04      	ldr	r3, [sp, #16]
 801e6e4:	9e05      	ldr	r6, [sp, #20]
 801e6e6:	1ac2      	subs	r2, r0, r3
 801e6e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e6ec:	429e      	cmp	r6, r3
 801e6ee:	bf28      	it	cs
 801e6f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e6f4:	4910      	ldr	r1, [pc, #64]	@ (801e738 <_scanf_float+0x420>)
 801e6f6:	4630      	mov	r0, r6
 801e6f8:	f000 f9ae 	bl	801ea58 <siprintf>
 801e6fc:	e7d0      	b.n	801e6a0 <_scanf_float+0x388>
 801e6fe:	f011 0f04 	tst.w	r1, #4
 801e702:	9903      	ldr	r1, [sp, #12]
 801e704:	600a      	str	r2, [r1, #0]
 801e706:	d1dc      	bne.n	801e6c2 <_scanf_float+0x3aa>
 801e708:	681d      	ldr	r5, [r3, #0]
 801e70a:	4632      	mov	r2, r6
 801e70c:	463b      	mov	r3, r7
 801e70e:	4630      	mov	r0, r6
 801e710:	4639      	mov	r1, r7
 801e712:	f7e2 fa23 	bl	8000b5c <__aeabi_dcmpun>
 801e716:	b128      	cbz	r0, 801e724 <_scanf_float+0x40c>
 801e718:	4808      	ldr	r0, [pc, #32]	@ (801e73c <_scanf_float+0x424>)
 801e71a:	f000 fc0d 	bl	801ef38 <nanf>
 801e71e:	ed85 0a00 	vstr	s0, [r5]
 801e722:	e7d1      	b.n	801e6c8 <_scanf_float+0x3b0>
 801e724:	4630      	mov	r0, r6
 801e726:	4639      	mov	r1, r7
 801e728:	f7e2 fa76 	bl	8000c18 <__aeabi_d2f>
 801e72c:	6028      	str	r0, [r5, #0]
 801e72e:	e7cb      	b.n	801e6c8 <_scanf_float+0x3b0>
 801e730:	f04f 0900 	mov.w	r9, #0
 801e734:	e629      	b.n	801e38a <_scanf_float+0x72>
 801e736:	bf00      	nop
 801e738:	08025589 	.word	0x08025589
 801e73c:	0802563a 	.word	0x0802563a

0801e740 <std>:
 801e740:	2300      	movs	r3, #0
 801e742:	b510      	push	{r4, lr}
 801e744:	4604      	mov	r4, r0
 801e746:	e9c0 3300 	strd	r3, r3, [r0]
 801e74a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e74e:	6083      	str	r3, [r0, #8]
 801e750:	8181      	strh	r1, [r0, #12]
 801e752:	6643      	str	r3, [r0, #100]	@ 0x64
 801e754:	81c2      	strh	r2, [r0, #14]
 801e756:	6183      	str	r3, [r0, #24]
 801e758:	4619      	mov	r1, r3
 801e75a:	2208      	movs	r2, #8
 801e75c:	305c      	adds	r0, #92	@ 0x5c
 801e75e:	f000 fac5 	bl	801ecec <memset>
 801e762:	4b0d      	ldr	r3, [pc, #52]	@ (801e798 <std+0x58>)
 801e764:	6263      	str	r3, [r4, #36]	@ 0x24
 801e766:	4b0d      	ldr	r3, [pc, #52]	@ (801e79c <std+0x5c>)
 801e768:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e76a:	4b0d      	ldr	r3, [pc, #52]	@ (801e7a0 <std+0x60>)
 801e76c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e76e:	4b0d      	ldr	r3, [pc, #52]	@ (801e7a4 <std+0x64>)
 801e770:	6323      	str	r3, [r4, #48]	@ 0x30
 801e772:	4b0d      	ldr	r3, [pc, #52]	@ (801e7a8 <std+0x68>)
 801e774:	6224      	str	r4, [r4, #32]
 801e776:	429c      	cmp	r4, r3
 801e778:	d006      	beq.n	801e788 <std+0x48>
 801e77a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e77e:	4294      	cmp	r4, r2
 801e780:	d002      	beq.n	801e788 <std+0x48>
 801e782:	33d0      	adds	r3, #208	@ 0xd0
 801e784:	429c      	cmp	r4, r3
 801e786:	d105      	bne.n	801e794 <std+0x54>
 801e788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e790:	f000 bbb8 	b.w	801ef04 <__retarget_lock_init_recursive>
 801e794:	bd10      	pop	{r4, pc}
 801e796:	bf00      	nop
 801e798:	0801ea99 	.word	0x0801ea99
 801e79c:	0801eabb 	.word	0x0801eabb
 801e7a0:	0801eaf3 	.word	0x0801eaf3
 801e7a4:	0801eb17 	.word	0x0801eb17
 801e7a8:	2000366c 	.word	0x2000366c

0801e7ac <stdio_exit_handler>:
 801e7ac:	4a02      	ldr	r2, [pc, #8]	@ (801e7b8 <stdio_exit_handler+0xc>)
 801e7ae:	4903      	ldr	r1, [pc, #12]	@ (801e7bc <stdio_exit_handler+0x10>)
 801e7b0:	4803      	ldr	r0, [pc, #12]	@ (801e7c0 <stdio_exit_handler+0x14>)
 801e7b2:	f000 b869 	b.w	801e888 <_fwalk_sglue>
 801e7b6:	bf00      	nop
 801e7b8:	2000013c 	.word	0x2000013c
 801e7bc:	08021861 	.word	0x08021861
 801e7c0:	2000014c 	.word	0x2000014c

0801e7c4 <cleanup_stdio>:
 801e7c4:	6841      	ldr	r1, [r0, #4]
 801e7c6:	4b0c      	ldr	r3, [pc, #48]	@ (801e7f8 <cleanup_stdio+0x34>)
 801e7c8:	4299      	cmp	r1, r3
 801e7ca:	b510      	push	{r4, lr}
 801e7cc:	4604      	mov	r4, r0
 801e7ce:	d001      	beq.n	801e7d4 <cleanup_stdio+0x10>
 801e7d0:	f003 f846 	bl	8021860 <_fflush_r>
 801e7d4:	68a1      	ldr	r1, [r4, #8]
 801e7d6:	4b09      	ldr	r3, [pc, #36]	@ (801e7fc <cleanup_stdio+0x38>)
 801e7d8:	4299      	cmp	r1, r3
 801e7da:	d002      	beq.n	801e7e2 <cleanup_stdio+0x1e>
 801e7dc:	4620      	mov	r0, r4
 801e7de:	f003 f83f 	bl	8021860 <_fflush_r>
 801e7e2:	68e1      	ldr	r1, [r4, #12]
 801e7e4:	4b06      	ldr	r3, [pc, #24]	@ (801e800 <cleanup_stdio+0x3c>)
 801e7e6:	4299      	cmp	r1, r3
 801e7e8:	d004      	beq.n	801e7f4 <cleanup_stdio+0x30>
 801e7ea:	4620      	mov	r0, r4
 801e7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7f0:	f003 b836 	b.w	8021860 <_fflush_r>
 801e7f4:	bd10      	pop	{r4, pc}
 801e7f6:	bf00      	nop
 801e7f8:	2000366c 	.word	0x2000366c
 801e7fc:	200036d4 	.word	0x200036d4
 801e800:	2000373c 	.word	0x2000373c

0801e804 <global_stdio_init.part.0>:
 801e804:	b510      	push	{r4, lr}
 801e806:	4b0b      	ldr	r3, [pc, #44]	@ (801e834 <global_stdio_init.part.0+0x30>)
 801e808:	4c0b      	ldr	r4, [pc, #44]	@ (801e838 <global_stdio_init.part.0+0x34>)
 801e80a:	4a0c      	ldr	r2, [pc, #48]	@ (801e83c <global_stdio_init.part.0+0x38>)
 801e80c:	601a      	str	r2, [r3, #0]
 801e80e:	4620      	mov	r0, r4
 801e810:	2200      	movs	r2, #0
 801e812:	2104      	movs	r1, #4
 801e814:	f7ff ff94 	bl	801e740 <std>
 801e818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e81c:	2201      	movs	r2, #1
 801e81e:	2109      	movs	r1, #9
 801e820:	f7ff ff8e 	bl	801e740 <std>
 801e824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e828:	2202      	movs	r2, #2
 801e82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e82e:	2112      	movs	r1, #18
 801e830:	f7ff bf86 	b.w	801e740 <std>
 801e834:	200037a4 	.word	0x200037a4
 801e838:	2000366c 	.word	0x2000366c
 801e83c:	0801e7ad 	.word	0x0801e7ad

0801e840 <__sfp_lock_acquire>:
 801e840:	4801      	ldr	r0, [pc, #4]	@ (801e848 <__sfp_lock_acquire+0x8>)
 801e842:	f000 bb60 	b.w	801ef06 <__retarget_lock_acquire_recursive>
 801e846:	bf00      	nop
 801e848:	200037ad 	.word	0x200037ad

0801e84c <__sfp_lock_release>:
 801e84c:	4801      	ldr	r0, [pc, #4]	@ (801e854 <__sfp_lock_release+0x8>)
 801e84e:	f000 bb5b 	b.w	801ef08 <__retarget_lock_release_recursive>
 801e852:	bf00      	nop
 801e854:	200037ad 	.word	0x200037ad

0801e858 <__sinit>:
 801e858:	b510      	push	{r4, lr}
 801e85a:	4604      	mov	r4, r0
 801e85c:	f7ff fff0 	bl	801e840 <__sfp_lock_acquire>
 801e860:	6a23      	ldr	r3, [r4, #32]
 801e862:	b11b      	cbz	r3, 801e86c <__sinit+0x14>
 801e864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e868:	f7ff bff0 	b.w	801e84c <__sfp_lock_release>
 801e86c:	4b04      	ldr	r3, [pc, #16]	@ (801e880 <__sinit+0x28>)
 801e86e:	6223      	str	r3, [r4, #32]
 801e870:	4b04      	ldr	r3, [pc, #16]	@ (801e884 <__sinit+0x2c>)
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	2b00      	cmp	r3, #0
 801e876:	d1f5      	bne.n	801e864 <__sinit+0xc>
 801e878:	f7ff ffc4 	bl	801e804 <global_stdio_init.part.0>
 801e87c:	e7f2      	b.n	801e864 <__sinit+0xc>
 801e87e:	bf00      	nop
 801e880:	0801e7c5 	.word	0x0801e7c5
 801e884:	200037a4 	.word	0x200037a4

0801e888 <_fwalk_sglue>:
 801e888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e88c:	4607      	mov	r7, r0
 801e88e:	4688      	mov	r8, r1
 801e890:	4614      	mov	r4, r2
 801e892:	2600      	movs	r6, #0
 801e894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e898:	f1b9 0901 	subs.w	r9, r9, #1
 801e89c:	d505      	bpl.n	801e8aa <_fwalk_sglue+0x22>
 801e89e:	6824      	ldr	r4, [r4, #0]
 801e8a0:	2c00      	cmp	r4, #0
 801e8a2:	d1f7      	bne.n	801e894 <_fwalk_sglue+0xc>
 801e8a4:	4630      	mov	r0, r6
 801e8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e8aa:	89ab      	ldrh	r3, [r5, #12]
 801e8ac:	2b01      	cmp	r3, #1
 801e8ae:	d907      	bls.n	801e8c0 <_fwalk_sglue+0x38>
 801e8b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e8b4:	3301      	adds	r3, #1
 801e8b6:	d003      	beq.n	801e8c0 <_fwalk_sglue+0x38>
 801e8b8:	4629      	mov	r1, r5
 801e8ba:	4638      	mov	r0, r7
 801e8bc:	47c0      	blx	r8
 801e8be:	4306      	orrs	r6, r0
 801e8c0:	3568      	adds	r5, #104	@ 0x68
 801e8c2:	e7e9      	b.n	801e898 <_fwalk_sglue+0x10>

0801e8c4 <_fwrite_r>:
 801e8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8c8:	9c08      	ldr	r4, [sp, #32]
 801e8ca:	468a      	mov	sl, r1
 801e8cc:	4690      	mov	r8, r2
 801e8ce:	fb02 f903 	mul.w	r9, r2, r3
 801e8d2:	4606      	mov	r6, r0
 801e8d4:	b118      	cbz	r0, 801e8de <_fwrite_r+0x1a>
 801e8d6:	6a03      	ldr	r3, [r0, #32]
 801e8d8:	b90b      	cbnz	r3, 801e8de <_fwrite_r+0x1a>
 801e8da:	f7ff ffbd 	bl	801e858 <__sinit>
 801e8de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e8e0:	07dd      	lsls	r5, r3, #31
 801e8e2:	d405      	bmi.n	801e8f0 <_fwrite_r+0x2c>
 801e8e4:	89a3      	ldrh	r3, [r4, #12]
 801e8e6:	0598      	lsls	r0, r3, #22
 801e8e8:	d402      	bmi.n	801e8f0 <_fwrite_r+0x2c>
 801e8ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e8ec:	f000 fb0b 	bl	801ef06 <__retarget_lock_acquire_recursive>
 801e8f0:	89a3      	ldrh	r3, [r4, #12]
 801e8f2:	0719      	lsls	r1, r3, #28
 801e8f4:	d516      	bpl.n	801e924 <_fwrite_r+0x60>
 801e8f6:	6923      	ldr	r3, [r4, #16]
 801e8f8:	b1a3      	cbz	r3, 801e924 <_fwrite_r+0x60>
 801e8fa:	2500      	movs	r5, #0
 801e8fc:	454d      	cmp	r5, r9
 801e8fe:	d01f      	beq.n	801e940 <_fwrite_r+0x7c>
 801e900:	68a7      	ldr	r7, [r4, #8]
 801e902:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801e906:	3f01      	subs	r7, #1
 801e908:	2f00      	cmp	r7, #0
 801e90a:	60a7      	str	r7, [r4, #8]
 801e90c:	da04      	bge.n	801e918 <_fwrite_r+0x54>
 801e90e:	69a3      	ldr	r3, [r4, #24]
 801e910:	429f      	cmp	r7, r3
 801e912:	db0f      	blt.n	801e934 <_fwrite_r+0x70>
 801e914:	290a      	cmp	r1, #10
 801e916:	d00d      	beq.n	801e934 <_fwrite_r+0x70>
 801e918:	6823      	ldr	r3, [r4, #0]
 801e91a:	1c5a      	adds	r2, r3, #1
 801e91c:	6022      	str	r2, [r4, #0]
 801e91e:	7019      	strb	r1, [r3, #0]
 801e920:	3501      	adds	r5, #1
 801e922:	e7eb      	b.n	801e8fc <_fwrite_r+0x38>
 801e924:	4621      	mov	r1, r4
 801e926:	4630      	mov	r0, r6
 801e928:	f000 f970 	bl	801ec0c <__swsetup_r>
 801e92c:	2800      	cmp	r0, #0
 801e92e:	d0e4      	beq.n	801e8fa <_fwrite_r+0x36>
 801e930:	2500      	movs	r5, #0
 801e932:	e005      	b.n	801e940 <_fwrite_r+0x7c>
 801e934:	4622      	mov	r2, r4
 801e936:	4630      	mov	r0, r6
 801e938:	f000 f92a 	bl	801eb90 <__swbuf_r>
 801e93c:	3001      	adds	r0, #1
 801e93e:	d1ef      	bne.n	801e920 <_fwrite_r+0x5c>
 801e940:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e942:	07da      	lsls	r2, r3, #31
 801e944:	d405      	bmi.n	801e952 <_fwrite_r+0x8e>
 801e946:	89a3      	ldrh	r3, [r4, #12]
 801e948:	059b      	lsls	r3, r3, #22
 801e94a:	d402      	bmi.n	801e952 <_fwrite_r+0x8e>
 801e94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e94e:	f000 fadb 	bl	801ef08 <__retarget_lock_release_recursive>
 801e952:	fbb5 f0f8 	udiv	r0, r5, r8
 801e956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801e95c <fwrite>:
 801e95c:	b507      	push	{r0, r1, r2, lr}
 801e95e:	9300      	str	r3, [sp, #0]
 801e960:	4613      	mov	r3, r2
 801e962:	460a      	mov	r2, r1
 801e964:	4601      	mov	r1, r0
 801e966:	4803      	ldr	r0, [pc, #12]	@ (801e974 <fwrite+0x18>)
 801e968:	6800      	ldr	r0, [r0, #0]
 801e96a:	f7ff ffab 	bl	801e8c4 <_fwrite_r>
 801e96e:	b003      	add	sp, #12
 801e970:	f85d fb04 	ldr.w	pc, [sp], #4
 801e974:	20000148 	.word	0x20000148

0801e978 <iprintf>:
 801e978:	b40f      	push	{r0, r1, r2, r3}
 801e97a:	b507      	push	{r0, r1, r2, lr}
 801e97c:	4906      	ldr	r1, [pc, #24]	@ (801e998 <iprintf+0x20>)
 801e97e:	ab04      	add	r3, sp, #16
 801e980:	6808      	ldr	r0, [r1, #0]
 801e982:	f853 2b04 	ldr.w	r2, [r3], #4
 801e986:	6881      	ldr	r1, [r0, #8]
 801e988:	9301      	str	r3, [sp, #4]
 801e98a:	f002 fdcd 	bl	8021528 <_vfiprintf_r>
 801e98e:	b003      	add	sp, #12
 801e990:	f85d eb04 	ldr.w	lr, [sp], #4
 801e994:	b004      	add	sp, #16
 801e996:	4770      	bx	lr
 801e998:	20000148 	.word	0x20000148

0801e99c <_puts_r>:
 801e99c:	6a03      	ldr	r3, [r0, #32]
 801e99e:	b570      	push	{r4, r5, r6, lr}
 801e9a0:	6884      	ldr	r4, [r0, #8]
 801e9a2:	4605      	mov	r5, r0
 801e9a4:	460e      	mov	r6, r1
 801e9a6:	b90b      	cbnz	r3, 801e9ac <_puts_r+0x10>
 801e9a8:	f7ff ff56 	bl	801e858 <__sinit>
 801e9ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9ae:	07db      	lsls	r3, r3, #31
 801e9b0:	d405      	bmi.n	801e9be <_puts_r+0x22>
 801e9b2:	89a3      	ldrh	r3, [r4, #12]
 801e9b4:	0598      	lsls	r0, r3, #22
 801e9b6:	d402      	bmi.n	801e9be <_puts_r+0x22>
 801e9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9ba:	f000 faa4 	bl	801ef06 <__retarget_lock_acquire_recursive>
 801e9be:	89a3      	ldrh	r3, [r4, #12]
 801e9c0:	0719      	lsls	r1, r3, #28
 801e9c2:	d502      	bpl.n	801e9ca <_puts_r+0x2e>
 801e9c4:	6923      	ldr	r3, [r4, #16]
 801e9c6:	2b00      	cmp	r3, #0
 801e9c8:	d135      	bne.n	801ea36 <_puts_r+0x9a>
 801e9ca:	4621      	mov	r1, r4
 801e9cc:	4628      	mov	r0, r5
 801e9ce:	f000 f91d 	bl	801ec0c <__swsetup_r>
 801e9d2:	b380      	cbz	r0, 801ea36 <_puts_r+0x9a>
 801e9d4:	f04f 35ff 	mov.w	r5, #4294967295
 801e9d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9da:	07da      	lsls	r2, r3, #31
 801e9dc:	d405      	bmi.n	801e9ea <_puts_r+0x4e>
 801e9de:	89a3      	ldrh	r3, [r4, #12]
 801e9e0:	059b      	lsls	r3, r3, #22
 801e9e2:	d402      	bmi.n	801e9ea <_puts_r+0x4e>
 801e9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9e6:	f000 fa8f 	bl	801ef08 <__retarget_lock_release_recursive>
 801e9ea:	4628      	mov	r0, r5
 801e9ec:	bd70      	pop	{r4, r5, r6, pc}
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	da04      	bge.n	801e9fc <_puts_r+0x60>
 801e9f2:	69a2      	ldr	r2, [r4, #24]
 801e9f4:	429a      	cmp	r2, r3
 801e9f6:	dc17      	bgt.n	801ea28 <_puts_r+0x8c>
 801e9f8:	290a      	cmp	r1, #10
 801e9fa:	d015      	beq.n	801ea28 <_puts_r+0x8c>
 801e9fc:	6823      	ldr	r3, [r4, #0]
 801e9fe:	1c5a      	adds	r2, r3, #1
 801ea00:	6022      	str	r2, [r4, #0]
 801ea02:	7019      	strb	r1, [r3, #0]
 801ea04:	68a3      	ldr	r3, [r4, #8]
 801ea06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ea0a:	3b01      	subs	r3, #1
 801ea0c:	60a3      	str	r3, [r4, #8]
 801ea0e:	2900      	cmp	r1, #0
 801ea10:	d1ed      	bne.n	801e9ee <_puts_r+0x52>
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	da11      	bge.n	801ea3a <_puts_r+0x9e>
 801ea16:	4622      	mov	r2, r4
 801ea18:	210a      	movs	r1, #10
 801ea1a:	4628      	mov	r0, r5
 801ea1c:	f000 f8b8 	bl	801eb90 <__swbuf_r>
 801ea20:	3001      	adds	r0, #1
 801ea22:	d0d7      	beq.n	801e9d4 <_puts_r+0x38>
 801ea24:	250a      	movs	r5, #10
 801ea26:	e7d7      	b.n	801e9d8 <_puts_r+0x3c>
 801ea28:	4622      	mov	r2, r4
 801ea2a:	4628      	mov	r0, r5
 801ea2c:	f000 f8b0 	bl	801eb90 <__swbuf_r>
 801ea30:	3001      	adds	r0, #1
 801ea32:	d1e7      	bne.n	801ea04 <_puts_r+0x68>
 801ea34:	e7ce      	b.n	801e9d4 <_puts_r+0x38>
 801ea36:	3e01      	subs	r6, #1
 801ea38:	e7e4      	b.n	801ea04 <_puts_r+0x68>
 801ea3a:	6823      	ldr	r3, [r4, #0]
 801ea3c:	1c5a      	adds	r2, r3, #1
 801ea3e:	6022      	str	r2, [r4, #0]
 801ea40:	220a      	movs	r2, #10
 801ea42:	701a      	strb	r2, [r3, #0]
 801ea44:	e7ee      	b.n	801ea24 <_puts_r+0x88>
	...

0801ea48 <puts>:
 801ea48:	4b02      	ldr	r3, [pc, #8]	@ (801ea54 <puts+0xc>)
 801ea4a:	4601      	mov	r1, r0
 801ea4c:	6818      	ldr	r0, [r3, #0]
 801ea4e:	f7ff bfa5 	b.w	801e99c <_puts_r>
 801ea52:	bf00      	nop
 801ea54:	20000148 	.word	0x20000148

0801ea58 <siprintf>:
 801ea58:	b40e      	push	{r1, r2, r3}
 801ea5a:	b500      	push	{lr}
 801ea5c:	b09c      	sub	sp, #112	@ 0x70
 801ea5e:	ab1d      	add	r3, sp, #116	@ 0x74
 801ea60:	9002      	str	r0, [sp, #8]
 801ea62:	9006      	str	r0, [sp, #24]
 801ea64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ea68:	4809      	ldr	r0, [pc, #36]	@ (801ea90 <siprintf+0x38>)
 801ea6a:	9107      	str	r1, [sp, #28]
 801ea6c:	9104      	str	r1, [sp, #16]
 801ea6e:	4909      	ldr	r1, [pc, #36]	@ (801ea94 <siprintf+0x3c>)
 801ea70:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea74:	9105      	str	r1, [sp, #20]
 801ea76:	6800      	ldr	r0, [r0, #0]
 801ea78:	9301      	str	r3, [sp, #4]
 801ea7a:	a902      	add	r1, sp, #8
 801ea7c:	f002 fc2e 	bl	80212dc <_svfiprintf_r>
 801ea80:	9b02      	ldr	r3, [sp, #8]
 801ea82:	2200      	movs	r2, #0
 801ea84:	701a      	strb	r2, [r3, #0]
 801ea86:	b01c      	add	sp, #112	@ 0x70
 801ea88:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea8c:	b003      	add	sp, #12
 801ea8e:	4770      	bx	lr
 801ea90:	20000148 	.word	0x20000148
 801ea94:	ffff0208 	.word	0xffff0208

0801ea98 <__sread>:
 801ea98:	b510      	push	{r4, lr}
 801ea9a:	460c      	mov	r4, r1
 801ea9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eaa0:	f000 f9d2 	bl	801ee48 <_read_r>
 801eaa4:	2800      	cmp	r0, #0
 801eaa6:	bfab      	itete	ge
 801eaa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801eaaa:	89a3      	ldrhlt	r3, [r4, #12]
 801eaac:	181b      	addge	r3, r3, r0
 801eaae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801eab2:	bfac      	ite	ge
 801eab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801eab6:	81a3      	strhlt	r3, [r4, #12]
 801eab8:	bd10      	pop	{r4, pc}

0801eaba <__swrite>:
 801eaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eabe:	461f      	mov	r7, r3
 801eac0:	898b      	ldrh	r3, [r1, #12]
 801eac2:	05db      	lsls	r3, r3, #23
 801eac4:	4605      	mov	r5, r0
 801eac6:	460c      	mov	r4, r1
 801eac8:	4616      	mov	r6, r2
 801eaca:	d505      	bpl.n	801ead8 <__swrite+0x1e>
 801eacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ead0:	2302      	movs	r3, #2
 801ead2:	2200      	movs	r2, #0
 801ead4:	f000 f9a6 	bl	801ee24 <_lseek_r>
 801ead8:	89a3      	ldrh	r3, [r4, #12]
 801eada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801eae2:	81a3      	strh	r3, [r4, #12]
 801eae4:	4632      	mov	r2, r6
 801eae6:	463b      	mov	r3, r7
 801eae8:	4628      	mov	r0, r5
 801eaea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eaee:	f000 b9cd 	b.w	801ee8c <_write_r>

0801eaf2 <__sseek>:
 801eaf2:	b510      	push	{r4, lr}
 801eaf4:	460c      	mov	r4, r1
 801eaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eafa:	f000 f993 	bl	801ee24 <_lseek_r>
 801eafe:	1c43      	adds	r3, r0, #1
 801eb00:	89a3      	ldrh	r3, [r4, #12]
 801eb02:	bf15      	itete	ne
 801eb04:	6560      	strne	r0, [r4, #84]	@ 0x54
 801eb06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801eb0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801eb0e:	81a3      	strheq	r3, [r4, #12]
 801eb10:	bf18      	it	ne
 801eb12:	81a3      	strhne	r3, [r4, #12]
 801eb14:	bd10      	pop	{r4, pc}

0801eb16 <__sclose>:
 801eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb1a:	f000 b973 	b.w	801ee04 <_close_r>

0801eb1e <_vsniprintf_r>:
 801eb1e:	b530      	push	{r4, r5, lr}
 801eb20:	4614      	mov	r4, r2
 801eb22:	2c00      	cmp	r4, #0
 801eb24:	b09b      	sub	sp, #108	@ 0x6c
 801eb26:	4605      	mov	r5, r0
 801eb28:	461a      	mov	r2, r3
 801eb2a:	da05      	bge.n	801eb38 <_vsniprintf_r+0x1a>
 801eb2c:	238b      	movs	r3, #139	@ 0x8b
 801eb2e:	6003      	str	r3, [r0, #0]
 801eb30:	f04f 30ff 	mov.w	r0, #4294967295
 801eb34:	b01b      	add	sp, #108	@ 0x6c
 801eb36:	bd30      	pop	{r4, r5, pc}
 801eb38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801eb3c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801eb40:	bf14      	ite	ne
 801eb42:	f104 33ff 	addne.w	r3, r4, #4294967295
 801eb46:	4623      	moveq	r3, r4
 801eb48:	9302      	str	r3, [sp, #8]
 801eb4a:	9305      	str	r3, [sp, #20]
 801eb4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801eb50:	9100      	str	r1, [sp, #0]
 801eb52:	9104      	str	r1, [sp, #16]
 801eb54:	f8ad 300e 	strh.w	r3, [sp, #14]
 801eb58:	4669      	mov	r1, sp
 801eb5a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801eb5c:	f002 fbbe 	bl	80212dc <_svfiprintf_r>
 801eb60:	1c43      	adds	r3, r0, #1
 801eb62:	bfbc      	itt	lt
 801eb64:	238b      	movlt	r3, #139	@ 0x8b
 801eb66:	602b      	strlt	r3, [r5, #0]
 801eb68:	2c00      	cmp	r4, #0
 801eb6a:	d0e3      	beq.n	801eb34 <_vsniprintf_r+0x16>
 801eb6c:	9b00      	ldr	r3, [sp, #0]
 801eb6e:	2200      	movs	r2, #0
 801eb70:	701a      	strb	r2, [r3, #0]
 801eb72:	e7df      	b.n	801eb34 <_vsniprintf_r+0x16>

0801eb74 <vsniprintf>:
 801eb74:	b507      	push	{r0, r1, r2, lr}
 801eb76:	9300      	str	r3, [sp, #0]
 801eb78:	4613      	mov	r3, r2
 801eb7a:	460a      	mov	r2, r1
 801eb7c:	4601      	mov	r1, r0
 801eb7e:	4803      	ldr	r0, [pc, #12]	@ (801eb8c <vsniprintf+0x18>)
 801eb80:	6800      	ldr	r0, [r0, #0]
 801eb82:	f7ff ffcc 	bl	801eb1e <_vsniprintf_r>
 801eb86:	b003      	add	sp, #12
 801eb88:	f85d fb04 	ldr.w	pc, [sp], #4
 801eb8c:	20000148 	.word	0x20000148

0801eb90 <__swbuf_r>:
 801eb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb92:	460e      	mov	r6, r1
 801eb94:	4614      	mov	r4, r2
 801eb96:	4605      	mov	r5, r0
 801eb98:	b118      	cbz	r0, 801eba2 <__swbuf_r+0x12>
 801eb9a:	6a03      	ldr	r3, [r0, #32]
 801eb9c:	b90b      	cbnz	r3, 801eba2 <__swbuf_r+0x12>
 801eb9e:	f7ff fe5b 	bl	801e858 <__sinit>
 801eba2:	69a3      	ldr	r3, [r4, #24]
 801eba4:	60a3      	str	r3, [r4, #8]
 801eba6:	89a3      	ldrh	r3, [r4, #12]
 801eba8:	071a      	lsls	r2, r3, #28
 801ebaa:	d501      	bpl.n	801ebb0 <__swbuf_r+0x20>
 801ebac:	6923      	ldr	r3, [r4, #16]
 801ebae:	b943      	cbnz	r3, 801ebc2 <__swbuf_r+0x32>
 801ebb0:	4621      	mov	r1, r4
 801ebb2:	4628      	mov	r0, r5
 801ebb4:	f000 f82a 	bl	801ec0c <__swsetup_r>
 801ebb8:	b118      	cbz	r0, 801ebc2 <__swbuf_r+0x32>
 801ebba:	f04f 37ff 	mov.w	r7, #4294967295
 801ebbe:	4638      	mov	r0, r7
 801ebc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ebc2:	6823      	ldr	r3, [r4, #0]
 801ebc4:	6922      	ldr	r2, [r4, #16]
 801ebc6:	1a98      	subs	r0, r3, r2
 801ebc8:	6963      	ldr	r3, [r4, #20]
 801ebca:	b2f6      	uxtb	r6, r6
 801ebcc:	4283      	cmp	r3, r0
 801ebce:	4637      	mov	r7, r6
 801ebd0:	dc05      	bgt.n	801ebde <__swbuf_r+0x4e>
 801ebd2:	4621      	mov	r1, r4
 801ebd4:	4628      	mov	r0, r5
 801ebd6:	f002 fe43 	bl	8021860 <_fflush_r>
 801ebda:	2800      	cmp	r0, #0
 801ebdc:	d1ed      	bne.n	801ebba <__swbuf_r+0x2a>
 801ebde:	68a3      	ldr	r3, [r4, #8]
 801ebe0:	3b01      	subs	r3, #1
 801ebe2:	60a3      	str	r3, [r4, #8]
 801ebe4:	6823      	ldr	r3, [r4, #0]
 801ebe6:	1c5a      	adds	r2, r3, #1
 801ebe8:	6022      	str	r2, [r4, #0]
 801ebea:	701e      	strb	r6, [r3, #0]
 801ebec:	6962      	ldr	r2, [r4, #20]
 801ebee:	1c43      	adds	r3, r0, #1
 801ebf0:	429a      	cmp	r2, r3
 801ebf2:	d004      	beq.n	801ebfe <__swbuf_r+0x6e>
 801ebf4:	89a3      	ldrh	r3, [r4, #12]
 801ebf6:	07db      	lsls	r3, r3, #31
 801ebf8:	d5e1      	bpl.n	801ebbe <__swbuf_r+0x2e>
 801ebfa:	2e0a      	cmp	r6, #10
 801ebfc:	d1df      	bne.n	801ebbe <__swbuf_r+0x2e>
 801ebfe:	4621      	mov	r1, r4
 801ec00:	4628      	mov	r0, r5
 801ec02:	f002 fe2d 	bl	8021860 <_fflush_r>
 801ec06:	2800      	cmp	r0, #0
 801ec08:	d0d9      	beq.n	801ebbe <__swbuf_r+0x2e>
 801ec0a:	e7d6      	b.n	801ebba <__swbuf_r+0x2a>

0801ec0c <__swsetup_r>:
 801ec0c:	b538      	push	{r3, r4, r5, lr}
 801ec0e:	4b29      	ldr	r3, [pc, #164]	@ (801ecb4 <__swsetup_r+0xa8>)
 801ec10:	4605      	mov	r5, r0
 801ec12:	6818      	ldr	r0, [r3, #0]
 801ec14:	460c      	mov	r4, r1
 801ec16:	b118      	cbz	r0, 801ec20 <__swsetup_r+0x14>
 801ec18:	6a03      	ldr	r3, [r0, #32]
 801ec1a:	b90b      	cbnz	r3, 801ec20 <__swsetup_r+0x14>
 801ec1c:	f7ff fe1c 	bl	801e858 <__sinit>
 801ec20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec24:	0719      	lsls	r1, r3, #28
 801ec26:	d422      	bmi.n	801ec6e <__swsetup_r+0x62>
 801ec28:	06da      	lsls	r2, r3, #27
 801ec2a:	d407      	bmi.n	801ec3c <__swsetup_r+0x30>
 801ec2c:	2209      	movs	r2, #9
 801ec2e:	602a      	str	r2, [r5, #0]
 801ec30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ec34:	81a3      	strh	r3, [r4, #12]
 801ec36:	f04f 30ff 	mov.w	r0, #4294967295
 801ec3a:	e033      	b.n	801eca4 <__swsetup_r+0x98>
 801ec3c:	0758      	lsls	r0, r3, #29
 801ec3e:	d512      	bpl.n	801ec66 <__swsetup_r+0x5a>
 801ec40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ec42:	b141      	cbz	r1, 801ec56 <__swsetup_r+0x4a>
 801ec44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ec48:	4299      	cmp	r1, r3
 801ec4a:	d002      	beq.n	801ec52 <__swsetup_r+0x46>
 801ec4c:	4628      	mov	r0, r5
 801ec4e:	f000 ffe3 	bl	801fc18 <_free_r>
 801ec52:	2300      	movs	r3, #0
 801ec54:	6363      	str	r3, [r4, #52]	@ 0x34
 801ec56:	89a3      	ldrh	r3, [r4, #12]
 801ec58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ec5c:	81a3      	strh	r3, [r4, #12]
 801ec5e:	2300      	movs	r3, #0
 801ec60:	6063      	str	r3, [r4, #4]
 801ec62:	6923      	ldr	r3, [r4, #16]
 801ec64:	6023      	str	r3, [r4, #0]
 801ec66:	89a3      	ldrh	r3, [r4, #12]
 801ec68:	f043 0308 	orr.w	r3, r3, #8
 801ec6c:	81a3      	strh	r3, [r4, #12]
 801ec6e:	6923      	ldr	r3, [r4, #16]
 801ec70:	b94b      	cbnz	r3, 801ec86 <__swsetup_r+0x7a>
 801ec72:	89a3      	ldrh	r3, [r4, #12]
 801ec74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ec78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ec7c:	d003      	beq.n	801ec86 <__swsetup_r+0x7a>
 801ec7e:	4621      	mov	r1, r4
 801ec80:	4628      	mov	r0, r5
 801ec82:	f002 fe4d 	bl	8021920 <__smakebuf_r>
 801ec86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec8a:	f013 0201 	ands.w	r2, r3, #1
 801ec8e:	d00a      	beq.n	801eca6 <__swsetup_r+0x9a>
 801ec90:	2200      	movs	r2, #0
 801ec92:	60a2      	str	r2, [r4, #8]
 801ec94:	6962      	ldr	r2, [r4, #20]
 801ec96:	4252      	negs	r2, r2
 801ec98:	61a2      	str	r2, [r4, #24]
 801ec9a:	6922      	ldr	r2, [r4, #16]
 801ec9c:	b942      	cbnz	r2, 801ecb0 <__swsetup_r+0xa4>
 801ec9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801eca2:	d1c5      	bne.n	801ec30 <__swsetup_r+0x24>
 801eca4:	bd38      	pop	{r3, r4, r5, pc}
 801eca6:	0799      	lsls	r1, r3, #30
 801eca8:	bf58      	it	pl
 801ecaa:	6962      	ldrpl	r2, [r4, #20]
 801ecac:	60a2      	str	r2, [r4, #8]
 801ecae:	e7f4      	b.n	801ec9a <__swsetup_r+0x8e>
 801ecb0:	2000      	movs	r0, #0
 801ecb2:	e7f7      	b.n	801eca4 <__swsetup_r+0x98>
 801ecb4:	20000148 	.word	0x20000148

0801ecb8 <memmove>:
 801ecb8:	4288      	cmp	r0, r1
 801ecba:	b510      	push	{r4, lr}
 801ecbc:	eb01 0402 	add.w	r4, r1, r2
 801ecc0:	d902      	bls.n	801ecc8 <memmove+0x10>
 801ecc2:	4284      	cmp	r4, r0
 801ecc4:	4623      	mov	r3, r4
 801ecc6:	d807      	bhi.n	801ecd8 <memmove+0x20>
 801ecc8:	1e43      	subs	r3, r0, #1
 801ecca:	42a1      	cmp	r1, r4
 801eccc:	d008      	beq.n	801ece0 <memmove+0x28>
 801ecce:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ecd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ecd6:	e7f8      	b.n	801ecca <memmove+0x12>
 801ecd8:	4402      	add	r2, r0
 801ecda:	4601      	mov	r1, r0
 801ecdc:	428a      	cmp	r2, r1
 801ecde:	d100      	bne.n	801ece2 <memmove+0x2a>
 801ece0:	bd10      	pop	{r4, pc}
 801ece2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ece6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ecea:	e7f7      	b.n	801ecdc <memmove+0x24>

0801ecec <memset>:
 801ecec:	4402      	add	r2, r0
 801ecee:	4603      	mov	r3, r0
 801ecf0:	4293      	cmp	r3, r2
 801ecf2:	d100      	bne.n	801ecf6 <memset+0xa>
 801ecf4:	4770      	bx	lr
 801ecf6:	f803 1b01 	strb.w	r1, [r3], #1
 801ecfa:	e7f9      	b.n	801ecf0 <memset+0x4>

0801ecfc <strchr>:
 801ecfc:	b2c9      	uxtb	r1, r1
 801ecfe:	4603      	mov	r3, r0
 801ed00:	4618      	mov	r0, r3
 801ed02:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ed06:	b112      	cbz	r2, 801ed0e <strchr+0x12>
 801ed08:	428a      	cmp	r2, r1
 801ed0a:	d1f9      	bne.n	801ed00 <strchr+0x4>
 801ed0c:	4770      	bx	lr
 801ed0e:	2900      	cmp	r1, #0
 801ed10:	bf18      	it	ne
 801ed12:	2000      	movne	r0, #0
 801ed14:	4770      	bx	lr
	...

0801ed18 <strtok>:
 801ed18:	4b16      	ldr	r3, [pc, #88]	@ (801ed74 <strtok+0x5c>)
 801ed1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed1e:	681f      	ldr	r7, [r3, #0]
 801ed20:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801ed22:	4605      	mov	r5, r0
 801ed24:	460e      	mov	r6, r1
 801ed26:	b9ec      	cbnz	r4, 801ed64 <strtok+0x4c>
 801ed28:	2050      	movs	r0, #80	@ 0x50
 801ed2a:	f7fe fd61 	bl	801d7f0 <malloc>
 801ed2e:	4602      	mov	r2, r0
 801ed30:	6478      	str	r0, [r7, #68]	@ 0x44
 801ed32:	b920      	cbnz	r0, 801ed3e <strtok+0x26>
 801ed34:	4b10      	ldr	r3, [pc, #64]	@ (801ed78 <strtok+0x60>)
 801ed36:	4811      	ldr	r0, [pc, #68]	@ (801ed7c <strtok+0x64>)
 801ed38:	215b      	movs	r1, #91	@ 0x5b
 801ed3a:	f000 f903 	bl	801ef44 <__assert_func>
 801ed3e:	e9c0 4400 	strd	r4, r4, [r0]
 801ed42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801ed46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801ed4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801ed4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801ed52:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801ed56:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801ed5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801ed5e:	6184      	str	r4, [r0, #24]
 801ed60:	7704      	strb	r4, [r0, #28]
 801ed62:	6244      	str	r4, [r0, #36]	@ 0x24
 801ed64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ed66:	4631      	mov	r1, r6
 801ed68:	4628      	mov	r0, r5
 801ed6a:	2301      	movs	r3, #1
 801ed6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ed70:	f000 b806 	b.w	801ed80 <__strtok_r>
 801ed74:	20000148 	.word	0x20000148
 801ed78:	0802558e 	.word	0x0802558e
 801ed7c:	080255a5 	.word	0x080255a5

0801ed80 <__strtok_r>:
 801ed80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed82:	4604      	mov	r4, r0
 801ed84:	b908      	cbnz	r0, 801ed8a <__strtok_r+0xa>
 801ed86:	6814      	ldr	r4, [r2, #0]
 801ed88:	b144      	cbz	r4, 801ed9c <__strtok_r+0x1c>
 801ed8a:	4620      	mov	r0, r4
 801ed8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ed90:	460f      	mov	r7, r1
 801ed92:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ed96:	b91e      	cbnz	r6, 801eda0 <__strtok_r+0x20>
 801ed98:	b965      	cbnz	r5, 801edb4 <__strtok_r+0x34>
 801ed9a:	6015      	str	r5, [r2, #0]
 801ed9c:	2000      	movs	r0, #0
 801ed9e:	e005      	b.n	801edac <__strtok_r+0x2c>
 801eda0:	42b5      	cmp	r5, r6
 801eda2:	d1f6      	bne.n	801ed92 <__strtok_r+0x12>
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d1f0      	bne.n	801ed8a <__strtok_r+0xa>
 801eda8:	6014      	str	r4, [r2, #0]
 801edaa:	7003      	strb	r3, [r0, #0]
 801edac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801edae:	461c      	mov	r4, r3
 801edb0:	e00c      	b.n	801edcc <__strtok_r+0x4c>
 801edb2:	b915      	cbnz	r5, 801edba <__strtok_r+0x3a>
 801edb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801edb8:	460e      	mov	r6, r1
 801edba:	f816 5b01 	ldrb.w	r5, [r6], #1
 801edbe:	42ab      	cmp	r3, r5
 801edc0:	d1f7      	bne.n	801edb2 <__strtok_r+0x32>
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d0f3      	beq.n	801edae <__strtok_r+0x2e>
 801edc6:	2300      	movs	r3, #0
 801edc8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801edcc:	6014      	str	r4, [r2, #0]
 801edce:	e7ed      	b.n	801edac <__strtok_r+0x2c>

0801edd0 <strstr>:
 801edd0:	780a      	ldrb	r2, [r1, #0]
 801edd2:	b570      	push	{r4, r5, r6, lr}
 801edd4:	b96a      	cbnz	r2, 801edf2 <strstr+0x22>
 801edd6:	bd70      	pop	{r4, r5, r6, pc}
 801edd8:	429a      	cmp	r2, r3
 801edda:	d109      	bne.n	801edf0 <strstr+0x20>
 801eddc:	460c      	mov	r4, r1
 801edde:	4605      	mov	r5, r0
 801ede0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ede4:	2b00      	cmp	r3, #0
 801ede6:	d0f6      	beq.n	801edd6 <strstr+0x6>
 801ede8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801edec:	429e      	cmp	r6, r3
 801edee:	d0f7      	beq.n	801ede0 <strstr+0x10>
 801edf0:	3001      	adds	r0, #1
 801edf2:	7803      	ldrb	r3, [r0, #0]
 801edf4:	2b00      	cmp	r3, #0
 801edf6:	d1ef      	bne.n	801edd8 <strstr+0x8>
 801edf8:	4618      	mov	r0, r3
 801edfa:	e7ec      	b.n	801edd6 <strstr+0x6>

0801edfc <_localeconv_r>:
 801edfc:	4800      	ldr	r0, [pc, #0]	@ (801ee00 <_localeconv_r+0x4>)
 801edfe:	4770      	bx	lr
 801ee00:	20000288 	.word	0x20000288

0801ee04 <_close_r>:
 801ee04:	b538      	push	{r3, r4, r5, lr}
 801ee06:	4d06      	ldr	r5, [pc, #24]	@ (801ee20 <_close_r+0x1c>)
 801ee08:	2300      	movs	r3, #0
 801ee0a:	4604      	mov	r4, r0
 801ee0c:	4608      	mov	r0, r1
 801ee0e:	602b      	str	r3, [r5, #0]
 801ee10:	f7e5 f86e 	bl	8003ef0 <_close>
 801ee14:	1c43      	adds	r3, r0, #1
 801ee16:	d102      	bne.n	801ee1e <_close_r+0x1a>
 801ee18:	682b      	ldr	r3, [r5, #0]
 801ee1a:	b103      	cbz	r3, 801ee1e <_close_r+0x1a>
 801ee1c:	6023      	str	r3, [r4, #0]
 801ee1e:	bd38      	pop	{r3, r4, r5, pc}
 801ee20:	200037a8 	.word	0x200037a8

0801ee24 <_lseek_r>:
 801ee24:	b538      	push	{r3, r4, r5, lr}
 801ee26:	4d07      	ldr	r5, [pc, #28]	@ (801ee44 <_lseek_r+0x20>)
 801ee28:	4604      	mov	r4, r0
 801ee2a:	4608      	mov	r0, r1
 801ee2c:	4611      	mov	r1, r2
 801ee2e:	2200      	movs	r2, #0
 801ee30:	602a      	str	r2, [r5, #0]
 801ee32:	461a      	mov	r2, r3
 801ee34:	f7e5 f883 	bl	8003f3e <_lseek>
 801ee38:	1c43      	adds	r3, r0, #1
 801ee3a:	d102      	bne.n	801ee42 <_lseek_r+0x1e>
 801ee3c:	682b      	ldr	r3, [r5, #0]
 801ee3e:	b103      	cbz	r3, 801ee42 <_lseek_r+0x1e>
 801ee40:	6023      	str	r3, [r4, #0]
 801ee42:	bd38      	pop	{r3, r4, r5, pc}
 801ee44:	200037a8 	.word	0x200037a8

0801ee48 <_read_r>:
 801ee48:	b538      	push	{r3, r4, r5, lr}
 801ee4a:	4d07      	ldr	r5, [pc, #28]	@ (801ee68 <_read_r+0x20>)
 801ee4c:	4604      	mov	r4, r0
 801ee4e:	4608      	mov	r0, r1
 801ee50:	4611      	mov	r1, r2
 801ee52:	2200      	movs	r2, #0
 801ee54:	602a      	str	r2, [r5, #0]
 801ee56:	461a      	mov	r2, r3
 801ee58:	f7e5 f811 	bl	8003e7e <_read>
 801ee5c:	1c43      	adds	r3, r0, #1
 801ee5e:	d102      	bne.n	801ee66 <_read_r+0x1e>
 801ee60:	682b      	ldr	r3, [r5, #0]
 801ee62:	b103      	cbz	r3, 801ee66 <_read_r+0x1e>
 801ee64:	6023      	str	r3, [r4, #0]
 801ee66:	bd38      	pop	{r3, r4, r5, pc}
 801ee68:	200037a8 	.word	0x200037a8

0801ee6c <_sbrk_r>:
 801ee6c:	b538      	push	{r3, r4, r5, lr}
 801ee6e:	4d06      	ldr	r5, [pc, #24]	@ (801ee88 <_sbrk_r+0x1c>)
 801ee70:	2300      	movs	r3, #0
 801ee72:	4604      	mov	r4, r0
 801ee74:	4608      	mov	r0, r1
 801ee76:	602b      	str	r3, [r5, #0]
 801ee78:	f7e5 f86e 	bl	8003f58 <_sbrk>
 801ee7c:	1c43      	adds	r3, r0, #1
 801ee7e:	d102      	bne.n	801ee86 <_sbrk_r+0x1a>
 801ee80:	682b      	ldr	r3, [r5, #0]
 801ee82:	b103      	cbz	r3, 801ee86 <_sbrk_r+0x1a>
 801ee84:	6023      	str	r3, [r4, #0]
 801ee86:	bd38      	pop	{r3, r4, r5, pc}
 801ee88:	200037a8 	.word	0x200037a8

0801ee8c <_write_r>:
 801ee8c:	b538      	push	{r3, r4, r5, lr}
 801ee8e:	4d07      	ldr	r5, [pc, #28]	@ (801eeac <_write_r+0x20>)
 801ee90:	4604      	mov	r4, r0
 801ee92:	4608      	mov	r0, r1
 801ee94:	4611      	mov	r1, r2
 801ee96:	2200      	movs	r2, #0
 801ee98:	602a      	str	r2, [r5, #0]
 801ee9a:	461a      	mov	r2, r3
 801ee9c:	f7e5 f80c 	bl	8003eb8 <_write>
 801eea0:	1c43      	adds	r3, r0, #1
 801eea2:	d102      	bne.n	801eeaa <_write_r+0x1e>
 801eea4:	682b      	ldr	r3, [r5, #0]
 801eea6:	b103      	cbz	r3, 801eeaa <_write_r+0x1e>
 801eea8:	6023      	str	r3, [r4, #0]
 801eeaa:	bd38      	pop	{r3, r4, r5, pc}
 801eeac:	200037a8 	.word	0x200037a8

0801eeb0 <__errno>:
 801eeb0:	4b01      	ldr	r3, [pc, #4]	@ (801eeb8 <__errno+0x8>)
 801eeb2:	6818      	ldr	r0, [r3, #0]
 801eeb4:	4770      	bx	lr
 801eeb6:	bf00      	nop
 801eeb8:	20000148 	.word	0x20000148

0801eebc <__libc_init_array>:
 801eebc:	b570      	push	{r4, r5, r6, lr}
 801eebe:	4d0d      	ldr	r5, [pc, #52]	@ (801eef4 <__libc_init_array+0x38>)
 801eec0:	4c0d      	ldr	r4, [pc, #52]	@ (801eef8 <__libc_init_array+0x3c>)
 801eec2:	1b64      	subs	r4, r4, r5
 801eec4:	10a4      	asrs	r4, r4, #2
 801eec6:	2600      	movs	r6, #0
 801eec8:	42a6      	cmp	r6, r4
 801eeca:	d109      	bne.n	801eee0 <__libc_init_array+0x24>
 801eecc:	4d0b      	ldr	r5, [pc, #44]	@ (801eefc <__libc_init_array+0x40>)
 801eece:	4c0c      	ldr	r4, [pc, #48]	@ (801ef00 <__libc_init_array+0x44>)
 801eed0:	f003 f98a 	bl	80221e8 <_init>
 801eed4:	1b64      	subs	r4, r4, r5
 801eed6:	10a4      	asrs	r4, r4, #2
 801eed8:	2600      	movs	r6, #0
 801eeda:	42a6      	cmp	r6, r4
 801eedc:	d105      	bne.n	801eeea <__libc_init_array+0x2e>
 801eede:	bd70      	pop	{r4, r5, r6, pc}
 801eee0:	f855 3b04 	ldr.w	r3, [r5], #4
 801eee4:	4798      	blx	r3
 801eee6:	3601      	adds	r6, #1
 801eee8:	e7ee      	b.n	801eec8 <__libc_init_array+0xc>
 801eeea:	f855 3b04 	ldr.w	r3, [r5], #4
 801eeee:	4798      	blx	r3
 801eef0:	3601      	adds	r6, #1
 801eef2:	e7f2      	b.n	801eeda <__libc_init_array+0x1e>
 801eef4:	080258e4 	.word	0x080258e4
 801eef8:	080258e4 	.word	0x080258e4
 801eefc:	080258e4 	.word	0x080258e4
 801ef00:	080258e8 	.word	0x080258e8

0801ef04 <__retarget_lock_init_recursive>:
 801ef04:	4770      	bx	lr

0801ef06 <__retarget_lock_acquire_recursive>:
 801ef06:	4770      	bx	lr

0801ef08 <__retarget_lock_release_recursive>:
 801ef08:	4770      	bx	lr

0801ef0a <strcpy>:
 801ef0a:	4603      	mov	r3, r0
 801ef0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef10:	f803 2b01 	strb.w	r2, [r3], #1
 801ef14:	2a00      	cmp	r2, #0
 801ef16:	d1f9      	bne.n	801ef0c <strcpy+0x2>
 801ef18:	4770      	bx	lr

0801ef1a <memcpy>:
 801ef1a:	440a      	add	r2, r1
 801ef1c:	4291      	cmp	r1, r2
 801ef1e:	f100 33ff 	add.w	r3, r0, #4294967295
 801ef22:	d100      	bne.n	801ef26 <memcpy+0xc>
 801ef24:	4770      	bx	lr
 801ef26:	b510      	push	{r4, lr}
 801ef28:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ef2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ef30:	4291      	cmp	r1, r2
 801ef32:	d1f9      	bne.n	801ef28 <memcpy+0xe>
 801ef34:	bd10      	pop	{r4, pc}
	...

0801ef38 <nanf>:
 801ef38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ef40 <nanf+0x8>
 801ef3c:	4770      	bx	lr
 801ef3e:	bf00      	nop
 801ef40:	7fc00000 	.word	0x7fc00000

0801ef44 <__assert_func>:
 801ef44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ef46:	4614      	mov	r4, r2
 801ef48:	461a      	mov	r2, r3
 801ef4a:	4b09      	ldr	r3, [pc, #36]	@ (801ef70 <__assert_func+0x2c>)
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	4605      	mov	r5, r0
 801ef50:	68d8      	ldr	r0, [r3, #12]
 801ef52:	b954      	cbnz	r4, 801ef6a <__assert_func+0x26>
 801ef54:	4b07      	ldr	r3, [pc, #28]	@ (801ef74 <__assert_func+0x30>)
 801ef56:	461c      	mov	r4, r3
 801ef58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ef5c:	9100      	str	r1, [sp, #0]
 801ef5e:	462b      	mov	r3, r5
 801ef60:	4905      	ldr	r1, [pc, #20]	@ (801ef78 <__assert_func+0x34>)
 801ef62:	f002 fca5 	bl	80218b0 <fiprintf>
 801ef66:	f002 fd53 	bl	8021a10 <abort>
 801ef6a:	4b04      	ldr	r3, [pc, #16]	@ (801ef7c <__assert_func+0x38>)
 801ef6c:	e7f4      	b.n	801ef58 <__assert_func+0x14>
 801ef6e:	bf00      	nop
 801ef70:	20000148 	.word	0x20000148
 801ef74:	0802563a 	.word	0x0802563a
 801ef78:	0802560c 	.word	0x0802560c
 801ef7c:	080255ff 	.word	0x080255ff

0801ef80 <quorem>:
 801ef80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef84:	6903      	ldr	r3, [r0, #16]
 801ef86:	690c      	ldr	r4, [r1, #16]
 801ef88:	42a3      	cmp	r3, r4
 801ef8a:	4607      	mov	r7, r0
 801ef8c:	db7e      	blt.n	801f08c <quorem+0x10c>
 801ef8e:	3c01      	subs	r4, #1
 801ef90:	f101 0814 	add.w	r8, r1, #20
 801ef94:	00a3      	lsls	r3, r4, #2
 801ef96:	f100 0514 	add.w	r5, r0, #20
 801ef9a:	9300      	str	r3, [sp, #0]
 801ef9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801efa0:	9301      	str	r3, [sp, #4]
 801efa2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801efa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801efaa:	3301      	adds	r3, #1
 801efac:	429a      	cmp	r2, r3
 801efae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801efb2:	fbb2 f6f3 	udiv	r6, r2, r3
 801efb6:	d32e      	bcc.n	801f016 <quorem+0x96>
 801efb8:	f04f 0a00 	mov.w	sl, #0
 801efbc:	46c4      	mov	ip, r8
 801efbe:	46ae      	mov	lr, r5
 801efc0:	46d3      	mov	fp, sl
 801efc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801efc6:	b298      	uxth	r0, r3
 801efc8:	fb06 a000 	mla	r0, r6, r0, sl
 801efcc:	0c02      	lsrs	r2, r0, #16
 801efce:	0c1b      	lsrs	r3, r3, #16
 801efd0:	fb06 2303 	mla	r3, r6, r3, r2
 801efd4:	f8de 2000 	ldr.w	r2, [lr]
 801efd8:	b280      	uxth	r0, r0
 801efda:	b292      	uxth	r2, r2
 801efdc:	1a12      	subs	r2, r2, r0
 801efde:	445a      	add	r2, fp
 801efe0:	f8de 0000 	ldr.w	r0, [lr]
 801efe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801efe8:	b29b      	uxth	r3, r3
 801efea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801efee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801eff2:	b292      	uxth	r2, r2
 801eff4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801eff8:	45e1      	cmp	r9, ip
 801effa:	f84e 2b04 	str.w	r2, [lr], #4
 801effe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f002:	d2de      	bcs.n	801efc2 <quorem+0x42>
 801f004:	9b00      	ldr	r3, [sp, #0]
 801f006:	58eb      	ldr	r3, [r5, r3]
 801f008:	b92b      	cbnz	r3, 801f016 <quorem+0x96>
 801f00a:	9b01      	ldr	r3, [sp, #4]
 801f00c:	3b04      	subs	r3, #4
 801f00e:	429d      	cmp	r5, r3
 801f010:	461a      	mov	r2, r3
 801f012:	d32f      	bcc.n	801f074 <quorem+0xf4>
 801f014:	613c      	str	r4, [r7, #16]
 801f016:	4638      	mov	r0, r7
 801f018:	f001 f90c 	bl	8020234 <__mcmp>
 801f01c:	2800      	cmp	r0, #0
 801f01e:	db25      	blt.n	801f06c <quorem+0xec>
 801f020:	4629      	mov	r1, r5
 801f022:	2000      	movs	r0, #0
 801f024:	f858 2b04 	ldr.w	r2, [r8], #4
 801f028:	f8d1 c000 	ldr.w	ip, [r1]
 801f02c:	fa1f fe82 	uxth.w	lr, r2
 801f030:	fa1f f38c 	uxth.w	r3, ip
 801f034:	eba3 030e 	sub.w	r3, r3, lr
 801f038:	4403      	add	r3, r0
 801f03a:	0c12      	lsrs	r2, r2, #16
 801f03c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f040:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f044:	b29b      	uxth	r3, r3
 801f046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f04a:	45c1      	cmp	r9, r8
 801f04c:	f841 3b04 	str.w	r3, [r1], #4
 801f050:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f054:	d2e6      	bcs.n	801f024 <quorem+0xa4>
 801f056:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f05a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f05e:	b922      	cbnz	r2, 801f06a <quorem+0xea>
 801f060:	3b04      	subs	r3, #4
 801f062:	429d      	cmp	r5, r3
 801f064:	461a      	mov	r2, r3
 801f066:	d30b      	bcc.n	801f080 <quorem+0x100>
 801f068:	613c      	str	r4, [r7, #16]
 801f06a:	3601      	adds	r6, #1
 801f06c:	4630      	mov	r0, r6
 801f06e:	b003      	add	sp, #12
 801f070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f074:	6812      	ldr	r2, [r2, #0]
 801f076:	3b04      	subs	r3, #4
 801f078:	2a00      	cmp	r2, #0
 801f07a:	d1cb      	bne.n	801f014 <quorem+0x94>
 801f07c:	3c01      	subs	r4, #1
 801f07e:	e7c6      	b.n	801f00e <quorem+0x8e>
 801f080:	6812      	ldr	r2, [r2, #0]
 801f082:	3b04      	subs	r3, #4
 801f084:	2a00      	cmp	r2, #0
 801f086:	d1ef      	bne.n	801f068 <quorem+0xe8>
 801f088:	3c01      	subs	r4, #1
 801f08a:	e7ea      	b.n	801f062 <quorem+0xe2>
 801f08c:	2000      	movs	r0, #0
 801f08e:	e7ee      	b.n	801f06e <quorem+0xee>

0801f090 <_dtoa_r>:
 801f090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f094:	69c7      	ldr	r7, [r0, #28]
 801f096:	b099      	sub	sp, #100	@ 0x64
 801f098:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f09c:	ec55 4b10 	vmov	r4, r5, d0
 801f0a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f0a2:	9109      	str	r1, [sp, #36]	@ 0x24
 801f0a4:	4683      	mov	fp, r0
 801f0a6:	920e      	str	r2, [sp, #56]	@ 0x38
 801f0a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f0aa:	b97f      	cbnz	r7, 801f0cc <_dtoa_r+0x3c>
 801f0ac:	2010      	movs	r0, #16
 801f0ae:	f7fe fb9f 	bl	801d7f0 <malloc>
 801f0b2:	4602      	mov	r2, r0
 801f0b4:	f8cb 001c 	str.w	r0, [fp, #28]
 801f0b8:	b920      	cbnz	r0, 801f0c4 <_dtoa_r+0x34>
 801f0ba:	4ba7      	ldr	r3, [pc, #668]	@ (801f358 <_dtoa_r+0x2c8>)
 801f0bc:	21ef      	movs	r1, #239	@ 0xef
 801f0be:	48a7      	ldr	r0, [pc, #668]	@ (801f35c <_dtoa_r+0x2cc>)
 801f0c0:	f7ff ff40 	bl	801ef44 <__assert_func>
 801f0c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801f0c8:	6007      	str	r7, [r0, #0]
 801f0ca:	60c7      	str	r7, [r0, #12]
 801f0cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f0d0:	6819      	ldr	r1, [r3, #0]
 801f0d2:	b159      	cbz	r1, 801f0ec <_dtoa_r+0x5c>
 801f0d4:	685a      	ldr	r2, [r3, #4]
 801f0d6:	604a      	str	r2, [r1, #4]
 801f0d8:	2301      	movs	r3, #1
 801f0da:	4093      	lsls	r3, r2
 801f0dc:	608b      	str	r3, [r1, #8]
 801f0de:	4658      	mov	r0, fp
 801f0e0:	f000 fe24 	bl	801fd2c <_Bfree>
 801f0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f0e8:	2200      	movs	r2, #0
 801f0ea:	601a      	str	r2, [r3, #0]
 801f0ec:	1e2b      	subs	r3, r5, #0
 801f0ee:	bfb9      	ittee	lt
 801f0f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f0f4:	9303      	strlt	r3, [sp, #12]
 801f0f6:	2300      	movge	r3, #0
 801f0f8:	6033      	strge	r3, [r6, #0]
 801f0fa:	9f03      	ldr	r7, [sp, #12]
 801f0fc:	4b98      	ldr	r3, [pc, #608]	@ (801f360 <_dtoa_r+0x2d0>)
 801f0fe:	bfbc      	itt	lt
 801f100:	2201      	movlt	r2, #1
 801f102:	6032      	strlt	r2, [r6, #0]
 801f104:	43bb      	bics	r3, r7
 801f106:	d112      	bne.n	801f12e <_dtoa_r+0x9e>
 801f108:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f10a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f10e:	6013      	str	r3, [r2, #0]
 801f110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f114:	4323      	orrs	r3, r4
 801f116:	f000 854d 	beq.w	801fbb4 <_dtoa_r+0xb24>
 801f11a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f11c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f374 <_dtoa_r+0x2e4>
 801f120:	2b00      	cmp	r3, #0
 801f122:	f000 854f 	beq.w	801fbc4 <_dtoa_r+0xb34>
 801f126:	f10a 0303 	add.w	r3, sl, #3
 801f12a:	f000 bd49 	b.w	801fbc0 <_dtoa_r+0xb30>
 801f12e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f132:	2200      	movs	r2, #0
 801f134:	ec51 0b17 	vmov	r0, r1, d7
 801f138:	2300      	movs	r3, #0
 801f13a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f13e:	f7e1 fcdb 	bl	8000af8 <__aeabi_dcmpeq>
 801f142:	4680      	mov	r8, r0
 801f144:	b158      	cbz	r0, 801f15e <_dtoa_r+0xce>
 801f146:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f148:	2301      	movs	r3, #1
 801f14a:	6013      	str	r3, [r2, #0]
 801f14c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f14e:	b113      	cbz	r3, 801f156 <_dtoa_r+0xc6>
 801f150:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f152:	4b84      	ldr	r3, [pc, #528]	@ (801f364 <_dtoa_r+0x2d4>)
 801f154:	6013      	str	r3, [r2, #0]
 801f156:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801f378 <_dtoa_r+0x2e8>
 801f15a:	f000 bd33 	b.w	801fbc4 <_dtoa_r+0xb34>
 801f15e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f162:	aa16      	add	r2, sp, #88	@ 0x58
 801f164:	a917      	add	r1, sp, #92	@ 0x5c
 801f166:	4658      	mov	r0, fp
 801f168:	f001 f984 	bl	8020474 <__d2b>
 801f16c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f170:	4681      	mov	r9, r0
 801f172:	2e00      	cmp	r6, #0
 801f174:	d077      	beq.n	801f266 <_dtoa_r+0x1d6>
 801f176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f178:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f17c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f184:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f188:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f18c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f190:	4619      	mov	r1, r3
 801f192:	2200      	movs	r2, #0
 801f194:	4b74      	ldr	r3, [pc, #464]	@ (801f368 <_dtoa_r+0x2d8>)
 801f196:	f7e1 f88f 	bl	80002b8 <__aeabi_dsub>
 801f19a:	a369      	add	r3, pc, #420	@ (adr r3, 801f340 <_dtoa_r+0x2b0>)
 801f19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1a0:	f7e1 fa42 	bl	8000628 <__aeabi_dmul>
 801f1a4:	a368      	add	r3, pc, #416	@ (adr r3, 801f348 <_dtoa_r+0x2b8>)
 801f1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1aa:	f7e1 f887 	bl	80002bc <__adddf3>
 801f1ae:	4604      	mov	r4, r0
 801f1b0:	4630      	mov	r0, r6
 801f1b2:	460d      	mov	r5, r1
 801f1b4:	f7e1 f9ce 	bl	8000554 <__aeabi_i2d>
 801f1b8:	a365      	add	r3, pc, #404	@ (adr r3, 801f350 <_dtoa_r+0x2c0>)
 801f1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1be:	f7e1 fa33 	bl	8000628 <__aeabi_dmul>
 801f1c2:	4602      	mov	r2, r0
 801f1c4:	460b      	mov	r3, r1
 801f1c6:	4620      	mov	r0, r4
 801f1c8:	4629      	mov	r1, r5
 801f1ca:	f7e1 f877 	bl	80002bc <__adddf3>
 801f1ce:	4604      	mov	r4, r0
 801f1d0:	460d      	mov	r5, r1
 801f1d2:	f7e1 fcd9 	bl	8000b88 <__aeabi_d2iz>
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	4607      	mov	r7, r0
 801f1da:	2300      	movs	r3, #0
 801f1dc:	4620      	mov	r0, r4
 801f1de:	4629      	mov	r1, r5
 801f1e0:	f7e1 fc94 	bl	8000b0c <__aeabi_dcmplt>
 801f1e4:	b140      	cbz	r0, 801f1f8 <_dtoa_r+0x168>
 801f1e6:	4638      	mov	r0, r7
 801f1e8:	f7e1 f9b4 	bl	8000554 <__aeabi_i2d>
 801f1ec:	4622      	mov	r2, r4
 801f1ee:	462b      	mov	r3, r5
 801f1f0:	f7e1 fc82 	bl	8000af8 <__aeabi_dcmpeq>
 801f1f4:	b900      	cbnz	r0, 801f1f8 <_dtoa_r+0x168>
 801f1f6:	3f01      	subs	r7, #1
 801f1f8:	2f16      	cmp	r7, #22
 801f1fa:	d851      	bhi.n	801f2a0 <_dtoa_r+0x210>
 801f1fc:	4b5b      	ldr	r3, [pc, #364]	@ (801f36c <_dtoa_r+0x2dc>)
 801f1fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f20a:	f7e1 fc7f 	bl	8000b0c <__aeabi_dcmplt>
 801f20e:	2800      	cmp	r0, #0
 801f210:	d048      	beq.n	801f2a4 <_dtoa_r+0x214>
 801f212:	3f01      	subs	r7, #1
 801f214:	2300      	movs	r3, #0
 801f216:	9312      	str	r3, [sp, #72]	@ 0x48
 801f218:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f21a:	1b9b      	subs	r3, r3, r6
 801f21c:	1e5a      	subs	r2, r3, #1
 801f21e:	bf44      	itt	mi
 801f220:	f1c3 0801 	rsbmi	r8, r3, #1
 801f224:	2300      	movmi	r3, #0
 801f226:	9208      	str	r2, [sp, #32]
 801f228:	bf54      	ite	pl
 801f22a:	f04f 0800 	movpl.w	r8, #0
 801f22e:	9308      	strmi	r3, [sp, #32]
 801f230:	2f00      	cmp	r7, #0
 801f232:	db39      	blt.n	801f2a8 <_dtoa_r+0x218>
 801f234:	9b08      	ldr	r3, [sp, #32]
 801f236:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f238:	443b      	add	r3, r7
 801f23a:	9308      	str	r3, [sp, #32]
 801f23c:	2300      	movs	r3, #0
 801f23e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f242:	2b09      	cmp	r3, #9
 801f244:	d864      	bhi.n	801f310 <_dtoa_r+0x280>
 801f246:	2b05      	cmp	r3, #5
 801f248:	bfc4      	itt	gt
 801f24a:	3b04      	subgt	r3, #4
 801f24c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f250:	f1a3 0302 	sub.w	r3, r3, #2
 801f254:	bfcc      	ite	gt
 801f256:	2400      	movgt	r4, #0
 801f258:	2401      	movle	r4, #1
 801f25a:	2b03      	cmp	r3, #3
 801f25c:	d863      	bhi.n	801f326 <_dtoa_r+0x296>
 801f25e:	e8df f003 	tbb	[pc, r3]
 801f262:	372a      	.short	0x372a
 801f264:	5535      	.short	0x5535
 801f266:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f26a:	441e      	add	r6, r3
 801f26c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f270:	2b20      	cmp	r3, #32
 801f272:	bfc1      	itttt	gt
 801f274:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f278:	409f      	lslgt	r7, r3
 801f27a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f27e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f282:	bfd6      	itet	le
 801f284:	f1c3 0320 	rsble	r3, r3, #32
 801f288:	ea47 0003 	orrgt.w	r0, r7, r3
 801f28c:	fa04 f003 	lslle.w	r0, r4, r3
 801f290:	f7e1 f950 	bl	8000534 <__aeabi_ui2d>
 801f294:	2201      	movs	r2, #1
 801f296:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f29a:	3e01      	subs	r6, #1
 801f29c:	9214      	str	r2, [sp, #80]	@ 0x50
 801f29e:	e777      	b.n	801f190 <_dtoa_r+0x100>
 801f2a0:	2301      	movs	r3, #1
 801f2a2:	e7b8      	b.n	801f216 <_dtoa_r+0x186>
 801f2a4:	9012      	str	r0, [sp, #72]	@ 0x48
 801f2a6:	e7b7      	b.n	801f218 <_dtoa_r+0x188>
 801f2a8:	427b      	negs	r3, r7
 801f2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 801f2ac:	2300      	movs	r3, #0
 801f2ae:	eba8 0807 	sub.w	r8, r8, r7
 801f2b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f2b4:	e7c4      	b.n	801f240 <_dtoa_r+0x1b0>
 801f2b6:	2300      	movs	r3, #0
 801f2b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f2ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	dc35      	bgt.n	801f32c <_dtoa_r+0x29c>
 801f2c0:	2301      	movs	r3, #1
 801f2c2:	9300      	str	r3, [sp, #0]
 801f2c4:	9307      	str	r3, [sp, #28]
 801f2c6:	461a      	mov	r2, r3
 801f2c8:	920e      	str	r2, [sp, #56]	@ 0x38
 801f2ca:	e00b      	b.n	801f2e4 <_dtoa_r+0x254>
 801f2cc:	2301      	movs	r3, #1
 801f2ce:	e7f3      	b.n	801f2b8 <_dtoa_r+0x228>
 801f2d0:	2300      	movs	r3, #0
 801f2d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2d6:	18fb      	adds	r3, r7, r3
 801f2d8:	9300      	str	r3, [sp, #0]
 801f2da:	3301      	adds	r3, #1
 801f2dc:	2b01      	cmp	r3, #1
 801f2de:	9307      	str	r3, [sp, #28]
 801f2e0:	bfb8      	it	lt
 801f2e2:	2301      	movlt	r3, #1
 801f2e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801f2e8:	2100      	movs	r1, #0
 801f2ea:	2204      	movs	r2, #4
 801f2ec:	f102 0514 	add.w	r5, r2, #20
 801f2f0:	429d      	cmp	r5, r3
 801f2f2:	d91f      	bls.n	801f334 <_dtoa_r+0x2a4>
 801f2f4:	6041      	str	r1, [r0, #4]
 801f2f6:	4658      	mov	r0, fp
 801f2f8:	f000 fcd8 	bl	801fcac <_Balloc>
 801f2fc:	4682      	mov	sl, r0
 801f2fe:	2800      	cmp	r0, #0
 801f300:	d13c      	bne.n	801f37c <_dtoa_r+0x2ec>
 801f302:	4b1b      	ldr	r3, [pc, #108]	@ (801f370 <_dtoa_r+0x2e0>)
 801f304:	4602      	mov	r2, r0
 801f306:	f240 11af 	movw	r1, #431	@ 0x1af
 801f30a:	e6d8      	b.n	801f0be <_dtoa_r+0x2e>
 801f30c:	2301      	movs	r3, #1
 801f30e:	e7e0      	b.n	801f2d2 <_dtoa_r+0x242>
 801f310:	2401      	movs	r4, #1
 801f312:	2300      	movs	r3, #0
 801f314:	9309      	str	r3, [sp, #36]	@ 0x24
 801f316:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f318:	f04f 33ff 	mov.w	r3, #4294967295
 801f31c:	9300      	str	r3, [sp, #0]
 801f31e:	9307      	str	r3, [sp, #28]
 801f320:	2200      	movs	r2, #0
 801f322:	2312      	movs	r3, #18
 801f324:	e7d0      	b.n	801f2c8 <_dtoa_r+0x238>
 801f326:	2301      	movs	r3, #1
 801f328:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f32a:	e7f5      	b.n	801f318 <_dtoa_r+0x288>
 801f32c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f32e:	9300      	str	r3, [sp, #0]
 801f330:	9307      	str	r3, [sp, #28]
 801f332:	e7d7      	b.n	801f2e4 <_dtoa_r+0x254>
 801f334:	3101      	adds	r1, #1
 801f336:	0052      	lsls	r2, r2, #1
 801f338:	e7d8      	b.n	801f2ec <_dtoa_r+0x25c>
 801f33a:	bf00      	nop
 801f33c:	f3af 8000 	nop.w
 801f340:	636f4361 	.word	0x636f4361
 801f344:	3fd287a7 	.word	0x3fd287a7
 801f348:	8b60c8b3 	.word	0x8b60c8b3
 801f34c:	3fc68a28 	.word	0x3fc68a28
 801f350:	509f79fb 	.word	0x509f79fb
 801f354:	3fd34413 	.word	0x3fd34413
 801f358:	0802558e 	.word	0x0802558e
 801f35c:	08025648 	.word	0x08025648
 801f360:	7ff00000 	.word	0x7ff00000
 801f364:	08025566 	.word	0x08025566
 801f368:	3ff80000 	.word	0x3ff80000
 801f36c:	08025740 	.word	0x08025740
 801f370:	080256a0 	.word	0x080256a0
 801f374:	08025644 	.word	0x08025644
 801f378:	08025565 	.word	0x08025565
 801f37c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f380:	6018      	str	r0, [r3, #0]
 801f382:	9b07      	ldr	r3, [sp, #28]
 801f384:	2b0e      	cmp	r3, #14
 801f386:	f200 80a4 	bhi.w	801f4d2 <_dtoa_r+0x442>
 801f38a:	2c00      	cmp	r4, #0
 801f38c:	f000 80a1 	beq.w	801f4d2 <_dtoa_r+0x442>
 801f390:	2f00      	cmp	r7, #0
 801f392:	dd33      	ble.n	801f3fc <_dtoa_r+0x36c>
 801f394:	4bad      	ldr	r3, [pc, #692]	@ (801f64c <_dtoa_r+0x5bc>)
 801f396:	f007 020f 	and.w	r2, r7, #15
 801f39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f39e:	ed93 7b00 	vldr	d7, [r3]
 801f3a2:	05f8      	lsls	r0, r7, #23
 801f3a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f3a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f3ac:	d516      	bpl.n	801f3dc <_dtoa_r+0x34c>
 801f3ae:	4ba8      	ldr	r3, [pc, #672]	@ (801f650 <_dtoa_r+0x5c0>)
 801f3b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f3b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f3b8:	f7e1 fa60 	bl	800087c <__aeabi_ddiv>
 801f3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f3c0:	f004 040f 	and.w	r4, r4, #15
 801f3c4:	2603      	movs	r6, #3
 801f3c6:	4da2      	ldr	r5, [pc, #648]	@ (801f650 <_dtoa_r+0x5c0>)
 801f3c8:	b954      	cbnz	r4, 801f3e0 <_dtoa_r+0x350>
 801f3ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f3d2:	f7e1 fa53 	bl	800087c <__aeabi_ddiv>
 801f3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f3da:	e028      	b.n	801f42e <_dtoa_r+0x39e>
 801f3dc:	2602      	movs	r6, #2
 801f3de:	e7f2      	b.n	801f3c6 <_dtoa_r+0x336>
 801f3e0:	07e1      	lsls	r1, r4, #31
 801f3e2:	d508      	bpl.n	801f3f6 <_dtoa_r+0x366>
 801f3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f3e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f3ec:	f7e1 f91c 	bl	8000628 <__aeabi_dmul>
 801f3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f3f4:	3601      	adds	r6, #1
 801f3f6:	1064      	asrs	r4, r4, #1
 801f3f8:	3508      	adds	r5, #8
 801f3fa:	e7e5      	b.n	801f3c8 <_dtoa_r+0x338>
 801f3fc:	f000 80d2 	beq.w	801f5a4 <_dtoa_r+0x514>
 801f400:	427c      	negs	r4, r7
 801f402:	4b92      	ldr	r3, [pc, #584]	@ (801f64c <_dtoa_r+0x5bc>)
 801f404:	4d92      	ldr	r5, [pc, #584]	@ (801f650 <_dtoa_r+0x5c0>)
 801f406:	f004 020f 	and.w	r2, r4, #15
 801f40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f412:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f416:	f7e1 f907 	bl	8000628 <__aeabi_dmul>
 801f41a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f41e:	1124      	asrs	r4, r4, #4
 801f420:	2300      	movs	r3, #0
 801f422:	2602      	movs	r6, #2
 801f424:	2c00      	cmp	r4, #0
 801f426:	f040 80b2 	bne.w	801f58e <_dtoa_r+0x4fe>
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d1d3      	bne.n	801f3d6 <_dtoa_r+0x346>
 801f42e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f430:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f434:	2b00      	cmp	r3, #0
 801f436:	f000 80b7 	beq.w	801f5a8 <_dtoa_r+0x518>
 801f43a:	4b86      	ldr	r3, [pc, #536]	@ (801f654 <_dtoa_r+0x5c4>)
 801f43c:	2200      	movs	r2, #0
 801f43e:	4620      	mov	r0, r4
 801f440:	4629      	mov	r1, r5
 801f442:	f7e1 fb63 	bl	8000b0c <__aeabi_dcmplt>
 801f446:	2800      	cmp	r0, #0
 801f448:	f000 80ae 	beq.w	801f5a8 <_dtoa_r+0x518>
 801f44c:	9b07      	ldr	r3, [sp, #28]
 801f44e:	2b00      	cmp	r3, #0
 801f450:	f000 80aa 	beq.w	801f5a8 <_dtoa_r+0x518>
 801f454:	9b00      	ldr	r3, [sp, #0]
 801f456:	2b00      	cmp	r3, #0
 801f458:	dd37      	ble.n	801f4ca <_dtoa_r+0x43a>
 801f45a:	1e7b      	subs	r3, r7, #1
 801f45c:	9304      	str	r3, [sp, #16]
 801f45e:	4620      	mov	r0, r4
 801f460:	4b7d      	ldr	r3, [pc, #500]	@ (801f658 <_dtoa_r+0x5c8>)
 801f462:	2200      	movs	r2, #0
 801f464:	4629      	mov	r1, r5
 801f466:	f7e1 f8df 	bl	8000628 <__aeabi_dmul>
 801f46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f46e:	9c00      	ldr	r4, [sp, #0]
 801f470:	3601      	adds	r6, #1
 801f472:	4630      	mov	r0, r6
 801f474:	f7e1 f86e 	bl	8000554 <__aeabi_i2d>
 801f478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f47c:	f7e1 f8d4 	bl	8000628 <__aeabi_dmul>
 801f480:	4b76      	ldr	r3, [pc, #472]	@ (801f65c <_dtoa_r+0x5cc>)
 801f482:	2200      	movs	r2, #0
 801f484:	f7e0 ff1a 	bl	80002bc <__adddf3>
 801f488:	4605      	mov	r5, r0
 801f48a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f48e:	2c00      	cmp	r4, #0
 801f490:	f040 808d 	bne.w	801f5ae <_dtoa_r+0x51e>
 801f494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f498:	4b71      	ldr	r3, [pc, #452]	@ (801f660 <_dtoa_r+0x5d0>)
 801f49a:	2200      	movs	r2, #0
 801f49c:	f7e0 ff0c 	bl	80002b8 <__aeabi_dsub>
 801f4a0:	4602      	mov	r2, r0
 801f4a2:	460b      	mov	r3, r1
 801f4a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f4a8:	462a      	mov	r2, r5
 801f4aa:	4633      	mov	r3, r6
 801f4ac:	f7e1 fb4c 	bl	8000b48 <__aeabi_dcmpgt>
 801f4b0:	2800      	cmp	r0, #0
 801f4b2:	f040 828b 	bne.w	801f9cc <_dtoa_r+0x93c>
 801f4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f4ba:	462a      	mov	r2, r5
 801f4bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f4c0:	f7e1 fb24 	bl	8000b0c <__aeabi_dcmplt>
 801f4c4:	2800      	cmp	r0, #0
 801f4c6:	f040 8128 	bne.w	801f71a <_dtoa_r+0x68a>
 801f4ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f4ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f4d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	f2c0 815a 	blt.w	801f78e <_dtoa_r+0x6fe>
 801f4da:	2f0e      	cmp	r7, #14
 801f4dc:	f300 8157 	bgt.w	801f78e <_dtoa_r+0x6fe>
 801f4e0:	4b5a      	ldr	r3, [pc, #360]	@ (801f64c <_dtoa_r+0x5bc>)
 801f4e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f4e6:	ed93 7b00 	vldr	d7, [r3]
 801f4ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	ed8d 7b00 	vstr	d7, [sp]
 801f4f2:	da03      	bge.n	801f4fc <_dtoa_r+0x46c>
 801f4f4:	9b07      	ldr	r3, [sp, #28]
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	f340 8101 	ble.w	801f6fe <_dtoa_r+0x66e>
 801f4fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f500:	4656      	mov	r6, sl
 801f502:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f506:	4620      	mov	r0, r4
 801f508:	4629      	mov	r1, r5
 801f50a:	f7e1 f9b7 	bl	800087c <__aeabi_ddiv>
 801f50e:	f7e1 fb3b 	bl	8000b88 <__aeabi_d2iz>
 801f512:	4680      	mov	r8, r0
 801f514:	f7e1 f81e 	bl	8000554 <__aeabi_i2d>
 801f518:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f51c:	f7e1 f884 	bl	8000628 <__aeabi_dmul>
 801f520:	4602      	mov	r2, r0
 801f522:	460b      	mov	r3, r1
 801f524:	4620      	mov	r0, r4
 801f526:	4629      	mov	r1, r5
 801f528:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f52c:	f7e0 fec4 	bl	80002b8 <__aeabi_dsub>
 801f530:	f806 4b01 	strb.w	r4, [r6], #1
 801f534:	9d07      	ldr	r5, [sp, #28]
 801f536:	eba6 040a 	sub.w	r4, r6, sl
 801f53a:	42a5      	cmp	r5, r4
 801f53c:	4602      	mov	r2, r0
 801f53e:	460b      	mov	r3, r1
 801f540:	f040 8117 	bne.w	801f772 <_dtoa_r+0x6e2>
 801f544:	f7e0 feba 	bl	80002bc <__adddf3>
 801f548:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f54c:	4604      	mov	r4, r0
 801f54e:	460d      	mov	r5, r1
 801f550:	f7e1 fafa 	bl	8000b48 <__aeabi_dcmpgt>
 801f554:	2800      	cmp	r0, #0
 801f556:	f040 80f9 	bne.w	801f74c <_dtoa_r+0x6bc>
 801f55a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f55e:	4620      	mov	r0, r4
 801f560:	4629      	mov	r1, r5
 801f562:	f7e1 fac9 	bl	8000af8 <__aeabi_dcmpeq>
 801f566:	b118      	cbz	r0, 801f570 <_dtoa_r+0x4e0>
 801f568:	f018 0f01 	tst.w	r8, #1
 801f56c:	f040 80ee 	bne.w	801f74c <_dtoa_r+0x6bc>
 801f570:	4649      	mov	r1, r9
 801f572:	4658      	mov	r0, fp
 801f574:	f000 fbda 	bl	801fd2c <_Bfree>
 801f578:	2300      	movs	r3, #0
 801f57a:	7033      	strb	r3, [r6, #0]
 801f57c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f57e:	3701      	adds	r7, #1
 801f580:	601f      	str	r7, [r3, #0]
 801f582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f584:	2b00      	cmp	r3, #0
 801f586:	f000 831d 	beq.w	801fbc4 <_dtoa_r+0xb34>
 801f58a:	601e      	str	r6, [r3, #0]
 801f58c:	e31a      	b.n	801fbc4 <_dtoa_r+0xb34>
 801f58e:	07e2      	lsls	r2, r4, #31
 801f590:	d505      	bpl.n	801f59e <_dtoa_r+0x50e>
 801f592:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f596:	f7e1 f847 	bl	8000628 <__aeabi_dmul>
 801f59a:	3601      	adds	r6, #1
 801f59c:	2301      	movs	r3, #1
 801f59e:	1064      	asrs	r4, r4, #1
 801f5a0:	3508      	adds	r5, #8
 801f5a2:	e73f      	b.n	801f424 <_dtoa_r+0x394>
 801f5a4:	2602      	movs	r6, #2
 801f5a6:	e742      	b.n	801f42e <_dtoa_r+0x39e>
 801f5a8:	9c07      	ldr	r4, [sp, #28]
 801f5aa:	9704      	str	r7, [sp, #16]
 801f5ac:	e761      	b.n	801f472 <_dtoa_r+0x3e2>
 801f5ae:	4b27      	ldr	r3, [pc, #156]	@ (801f64c <_dtoa_r+0x5bc>)
 801f5b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f5b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f5b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f5ba:	4454      	add	r4, sl
 801f5bc:	2900      	cmp	r1, #0
 801f5be:	d053      	beq.n	801f668 <_dtoa_r+0x5d8>
 801f5c0:	4928      	ldr	r1, [pc, #160]	@ (801f664 <_dtoa_r+0x5d4>)
 801f5c2:	2000      	movs	r0, #0
 801f5c4:	f7e1 f95a 	bl	800087c <__aeabi_ddiv>
 801f5c8:	4633      	mov	r3, r6
 801f5ca:	462a      	mov	r2, r5
 801f5cc:	f7e0 fe74 	bl	80002b8 <__aeabi_dsub>
 801f5d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f5d4:	4656      	mov	r6, sl
 801f5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5da:	f7e1 fad5 	bl	8000b88 <__aeabi_d2iz>
 801f5de:	4605      	mov	r5, r0
 801f5e0:	f7e0 ffb8 	bl	8000554 <__aeabi_i2d>
 801f5e4:	4602      	mov	r2, r0
 801f5e6:	460b      	mov	r3, r1
 801f5e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f5ec:	f7e0 fe64 	bl	80002b8 <__aeabi_dsub>
 801f5f0:	3530      	adds	r5, #48	@ 0x30
 801f5f2:	4602      	mov	r2, r0
 801f5f4:	460b      	mov	r3, r1
 801f5f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f5fa:	f806 5b01 	strb.w	r5, [r6], #1
 801f5fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f602:	f7e1 fa83 	bl	8000b0c <__aeabi_dcmplt>
 801f606:	2800      	cmp	r0, #0
 801f608:	d171      	bne.n	801f6ee <_dtoa_r+0x65e>
 801f60a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f60e:	4911      	ldr	r1, [pc, #68]	@ (801f654 <_dtoa_r+0x5c4>)
 801f610:	2000      	movs	r0, #0
 801f612:	f7e0 fe51 	bl	80002b8 <__aeabi_dsub>
 801f616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f61a:	f7e1 fa77 	bl	8000b0c <__aeabi_dcmplt>
 801f61e:	2800      	cmp	r0, #0
 801f620:	f040 8095 	bne.w	801f74e <_dtoa_r+0x6be>
 801f624:	42a6      	cmp	r6, r4
 801f626:	f43f af50 	beq.w	801f4ca <_dtoa_r+0x43a>
 801f62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f62e:	4b0a      	ldr	r3, [pc, #40]	@ (801f658 <_dtoa_r+0x5c8>)
 801f630:	2200      	movs	r2, #0
 801f632:	f7e0 fff9 	bl	8000628 <__aeabi_dmul>
 801f636:	4b08      	ldr	r3, [pc, #32]	@ (801f658 <_dtoa_r+0x5c8>)
 801f638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f63c:	2200      	movs	r2, #0
 801f63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f642:	f7e0 fff1 	bl	8000628 <__aeabi_dmul>
 801f646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f64a:	e7c4      	b.n	801f5d6 <_dtoa_r+0x546>
 801f64c:	08025740 	.word	0x08025740
 801f650:	08025718 	.word	0x08025718
 801f654:	3ff00000 	.word	0x3ff00000
 801f658:	40240000 	.word	0x40240000
 801f65c:	401c0000 	.word	0x401c0000
 801f660:	40140000 	.word	0x40140000
 801f664:	3fe00000 	.word	0x3fe00000
 801f668:	4631      	mov	r1, r6
 801f66a:	4628      	mov	r0, r5
 801f66c:	f7e0 ffdc 	bl	8000628 <__aeabi_dmul>
 801f670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f674:	9415      	str	r4, [sp, #84]	@ 0x54
 801f676:	4656      	mov	r6, sl
 801f678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f67c:	f7e1 fa84 	bl	8000b88 <__aeabi_d2iz>
 801f680:	4605      	mov	r5, r0
 801f682:	f7e0 ff67 	bl	8000554 <__aeabi_i2d>
 801f686:	4602      	mov	r2, r0
 801f688:	460b      	mov	r3, r1
 801f68a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f68e:	f7e0 fe13 	bl	80002b8 <__aeabi_dsub>
 801f692:	3530      	adds	r5, #48	@ 0x30
 801f694:	f806 5b01 	strb.w	r5, [r6], #1
 801f698:	4602      	mov	r2, r0
 801f69a:	460b      	mov	r3, r1
 801f69c:	42a6      	cmp	r6, r4
 801f69e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f6a2:	f04f 0200 	mov.w	r2, #0
 801f6a6:	d124      	bne.n	801f6f2 <_dtoa_r+0x662>
 801f6a8:	4bac      	ldr	r3, [pc, #688]	@ (801f95c <_dtoa_r+0x8cc>)
 801f6aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f6ae:	f7e0 fe05 	bl	80002bc <__adddf3>
 801f6b2:	4602      	mov	r2, r0
 801f6b4:	460b      	mov	r3, r1
 801f6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6ba:	f7e1 fa45 	bl	8000b48 <__aeabi_dcmpgt>
 801f6be:	2800      	cmp	r0, #0
 801f6c0:	d145      	bne.n	801f74e <_dtoa_r+0x6be>
 801f6c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f6c6:	49a5      	ldr	r1, [pc, #660]	@ (801f95c <_dtoa_r+0x8cc>)
 801f6c8:	2000      	movs	r0, #0
 801f6ca:	f7e0 fdf5 	bl	80002b8 <__aeabi_dsub>
 801f6ce:	4602      	mov	r2, r0
 801f6d0:	460b      	mov	r3, r1
 801f6d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f6d6:	f7e1 fa19 	bl	8000b0c <__aeabi_dcmplt>
 801f6da:	2800      	cmp	r0, #0
 801f6dc:	f43f aef5 	beq.w	801f4ca <_dtoa_r+0x43a>
 801f6e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f6e2:	1e73      	subs	r3, r6, #1
 801f6e4:	9315      	str	r3, [sp, #84]	@ 0x54
 801f6e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f6ea:	2b30      	cmp	r3, #48	@ 0x30
 801f6ec:	d0f8      	beq.n	801f6e0 <_dtoa_r+0x650>
 801f6ee:	9f04      	ldr	r7, [sp, #16]
 801f6f0:	e73e      	b.n	801f570 <_dtoa_r+0x4e0>
 801f6f2:	4b9b      	ldr	r3, [pc, #620]	@ (801f960 <_dtoa_r+0x8d0>)
 801f6f4:	f7e0 ff98 	bl	8000628 <__aeabi_dmul>
 801f6f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f6fc:	e7bc      	b.n	801f678 <_dtoa_r+0x5e8>
 801f6fe:	d10c      	bne.n	801f71a <_dtoa_r+0x68a>
 801f700:	4b98      	ldr	r3, [pc, #608]	@ (801f964 <_dtoa_r+0x8d4>)
 801f702:	2200      	movs	r2, #0
 801f704:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f708:	f7e0 ff8e 	bl	8000628 <__aeabi_dmul>
 801f70c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f710:	f7e1 fa10 	bl	8000b34 <__aeabi_dcmpge>
 801f714:	2800      	cmp	r0, #0
 801f716:	f000 8157 	beq.w	801f9c8 <_dtoa_r+0x938>
 801f71a:	2400      	movs	r4, #0
 801f71c:	4625      	mov	r5, r4
 801f71e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f720:	43db      	mvns	r3, r3
 801f722:	9304      	str	r3, [sp, #16]
 801f724:	4656      	mov	r6, sl
 801f726:	2700      	movs	r7, #0
 801f728:	4621      	mov	r1, r4
 801f72a:	4658      	mov	r0, fp
 801f72c:	f000 fafe 	bl	801fd2c <_Bfree>
 801f730:	2d00      	cmp	r5, #0
 801f732:	d0dc      	beq.n	801f6ee <_dtoa_r+0x65e>
 801f734:	b12f      	cbz	r7, 801f742 <_dtoa_r+0x6b2>
 801f736:	42af      	cmp	r7, r5
 801f738:	d003      	beq.n	801f742 <_dtoa_r+0x6b2>
 801f73a:	4639      	mov	r1, r7
 801f73c:	4658      	mov	r0, fp
 801f73e:	f000 faf5 	bl	801fd2c <_Bfree>
 801f742:	4629      	mov	r1, r5
 801f744:	4658      	mov	r0, fp
 801f746:	f000 faf1 	bl	801fd2c <_Bfree>
 801f74a:	e7d0      	b.n	801f6ee <_dtoa_r+0x65e>
 801f74c:	9704      	str	r7, [sp, #16]
 801f74e:	4633      	mov	r3, r6
 801f750:	461e      	mov	r6, r3
 801f752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f756:	2a39      	cmp	r2, #57	@ 0x39
 801f758:	d107      	bne.n	801f76a <_dtoa_r+0x6da>
 801f75a:	459a      	cmp	sl, r3
 801f75c:	d1f8      	bne.n	801f750 <_dtoa_r+0x6c0>
 801f75e:	9a04      	ldr	r2, [sp, #16]
 801f760:	3201      	adds	r2, #1
 801f762:	9204      	str	r2, [sp, #16]
 801f764:	2230      	movs	r2, #48	@ 0x30
 801f766:	f88a 2000 	strb.w	r2, [sl]
 801f76a:	781a      	ldrb	r2, [r3, #0]
 801f76c:	3201      	adds	r2, #1
 801f76e:	701a      	strb	r2, [r3, #0]
 801f770:	e7bd      	b.n	801f6ee <_dtoa_r+0x65e>
 801f772:	4b7b      	ldr	r3, [pc, #492]	@ (801f960 <_dtoa_r+0x8d0>)
 801f774:	2200      	movs	r2, #0
 801f776:	f7e0 ff57 	bl	8000628 <__aeabi_dmul>
 801f77a:	2200      	movs	r2, #0
 801f77c:	2300      	movs	r3, #0
 801f77e:	4604      	mov	r4, r0
 801f780:	460d      	mov	r5, r1
 801f782:	f7e1 f9b9 	bl	8000af8 <__aeabi_dcmpeq>
 801f786:	2800      	cmp	r0, #0
 801f788:	f43f aebb 	beq.w	801f502 <_dtoa_r+0x472>
 801f78c:	e6f0      	b.n	801f570 <_dtoa_r+0x4e0>
 801f78e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f790:	2a00      	cmp	r2, #0
 801f792:	f000 80db 	beq.w	801f94c <_dtoa_r+0x8bc>
 801f796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f798:	2a01      	cmp	r2, #1
 801f79a:	f300 80bf 	bgt.w	801f91c <_dtoa_r+0x88c>
 801f79e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f7a0:	2a00      	cmp	r2, #0
 801f7a2:	f000 80b7 	beq.w	801f914 <_dtoa_r+0x884>
 801f7a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f7aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f7ac:	4646      	mov	r6, r8
 801f7ae:	9a08      	ldr	r2, [sp, #32]
 801f7b0:	2101      	movs	r1, #1
 801f7b2:	441a      	add	r2, r3
 801f7b4:	4658      	mov	r0, fp
 801f7b6:	4498      	add	r8, r3
 801f7b8:	9208      	str	r2, [sp, #32]
 801f7ba:	f000 fbb5 	bl	801ff28 <__i2b>
 801f7be:	4605      	mov	r5, r0
 801f7c0:	b15e      	cbz	r6, 801f7da <_dtoa_r+0x74a>
 801f7c2:	9b08      	ldr	r3, [sp, #32]
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	dd08      	ble.n	801f7da <_dtoa_r+0x74a>
 801f7c8:	42b3      	cmp	r3, r6
 801f7ca:	9a08      	ldr	r2, [sp, #32]
 801f7cc:	bfa8      	it	ge
 801f7ce:	4633      	movge	r3, r6
 801f7d0:	eba8 0803 	sub.w	r8, r8, r3
 801f7d4:	1af6      	subs	r6, r6, r3
 801f7d6:	1ad3      	subs	r3, r2, r3
 801f7d8:	9308      	str	r3, [sp, #32]
 801f7da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f7dc:	b1f3      	cbz	r3, 801f81c <_dtoa_r+0x78c>
 801f7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	f000 80b7 	beq.w	801f954 <_dtoa_r+0x8c4>
 801f7e6:	b18c      	cbz	r4, 801f80c <_dtoa_r+0x77c>
 801f7e8:	4629      	mov	r1, r5
 801f7ea:	4622      	mov	r2, r4
 801f7ec:	4658      	mov	r0, fp
 801f7ee:	f000 fc5b 	bl	80200a8 <__pow5mult>
 801f7f2:	464a      	mov	r2, r9
 801f7f4:	4601      	mov	r1, r0
 801f7f6:	4605      	mov	r5, r0
 801f7f8:	4658      	mov	r0, fp
 801f7fa:	f000 fbab 	bl	801ff54 <__multiply>
 801f7fe:	4649      	mov	r1, r9
 801f800:	9004      	str	r0, [sp, #16]
 801f802:	4658      	mov	r0, fp
 801f804:	f000 fa92 	bl	801fd2c <_Bfree>
 801f808:	9b04      	ldr	r3, [sp, #16]
 801f80a:	4699      	mov	r9, r3
 801f80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f80e:	1b1a      	subs	r2, r3, r4
 801f810:	d004      	beq.n	801f81c <_dtoa_r+0x78c>
 801f812:	4649      	mov	r1, r9
 801f814:	4658      	mov	r0, fp
 801f816:	f000 fc47 	bl	80200a8 <__pow5mult>
 801f81a:	4681      	mov	r9, r0
 801f81c:	2101      	movs	r1, #1
 801f81e:	4658      	mov	r0, fp
 801f820:	f000 fb82 	bl	801ff28 <__i2b>
 801f824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f826:	4604      	mov	r4, r0
 801f828:	2b00      	cmp	r3, #0
 801f82a:	f000 81cf 	beq.w	801fbcc <_dtoa_r+0xb3c>
 801f82e:	461a      	mov	r2, r3
 801f830:	4601      	mov	r1, r0
 801f832:	4658      	mov	r0, fp
 801f834:	f000 fc38 	bl	80200a8 <__pow5mult>
 801f838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f83a:	2b01      	cmp	r3, #1
 801f83c:	4604      	mov	r4, r0
 801f83e:	f300 8095 	bgt.w	801f96c <_dtoa_r+0x8dc>
 801f842:	9b02      	ldr	r3, [sp, #8]
 801f844:	2b00      	cmp	r3, #0
 801f846:	f040 8087 	bne.w	801f958 <_dtoa_r+0x8c8>
 801f84a:	9b03      	ldr	r3, [sp, #12]
 801f84c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f850:	2b00      	cmp	r3, #0
 801f852:	f040 8089 	bne.w	801f968 <_dtoa_r+0x8d8>
 801f856:	9b03      	ldr	r3, [sp, #12]
 801f858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f85c:	0d1b      	lsrs	r3, r3, #20
 801f85e:	051b      	lsls	r3, r3, #20
 801f860:	b12b      	cbz	r3, 801f86e <_dtoa_r+0x7de>
 801f862:	9b08      	ldr	r3, [sp, #32]
 801f864:	3301      	adds	r3, #1
 801f866:	9308      	str	r3, [sp, #32]
 801f868:	f108 0801 	add.w	r8, r8, #1
 801f86c:	2301      	movs	r3, #1
 801f86e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f872:	2b00      	cmp	r3, #0
 801f874:	f000 81b0 	beq.w	801fbd8 <_dtoa_r+0xb48>
 801f878:	6923      	ldr	r3, [r4, #16]
 801f87a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f87e:	6918      	ldr	r0, [r3, #16]
 801f880:	f000 fb06 	bl	801fe90 <__hi0bits>
 801f884:	f1c0 0020 	rsb	r0, r0, #32
 801f888:	9b08      	ldr	r3, [sp, #32]
 801f88a:	4418      	add	r0, r3
 801f88c:	f010 001f 	ands.w	r0, r0, #31
 801f890:	d077      	beq.n	801f982 <_dtoa_r+0x8f2>
 801f892:	f1c0 0320 	rsb	r3, r0, #32
 801f896:	2b04      	cmp	r3, #4
 801f898:	dd6b      	ble.n	801f972 <_dtoa_r+0x8e2>
 801f89a:	9b08      	ldr	r3, [sp, #32]
 801f89c:	f1c0 001c 	rsb	r0, r0, #28
 801f8a0:	4403      	add	r3, r0
 801f8a2:	4480      	add	r8, r0
 801f8a4:	4406      	add	r6, r0
 801f8a6:	9308      	str	r3, [sp, #32]
 801f8a8:	f1b8 0f00 	cmp.w	r8, #0
 801f8ac:	dd05      	ble.n	801f8ba <_dtoa_r+0x82a>
 801f8ae:	4649      	mov	r1, r9
 801f8b0:	4642      	mov	r2, r8
 801f8b2:	4658      	mov	r0, fp
 801f8b4:	f000 fc52 	bl	802015c <__lshift>
 801f8b8:	4681      	mov	r9, r0
 801f8ba:	9b08      	ldr	r3, [sp, #32]
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	dd05      	ble.n	801f8cc <_dtoa_r+0x83c>
 801f8c0:	4621      	mov	r1, r4
 801f8c2:	461a      	mov	r2, r3
 801f8c4:	4658      	mov	r0, fp
 801f8c6:	f000 fc49 	bl	802015c <__lshift>
 801f8ca:	4604      	mov	r4, r0
 801f8cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	d059      	beq.n	801f986 <_dtoa_r+0x8f6>
 801f8d2:	4621      	mov	r1, r4
 801f8d4:	4648      	mov	r0, r9
 801f8d6:	f000 fcad 	bl	8020234 <__mcmp>
 801f8da:	2800      	cmp	r0, #0
 801f8dc:	da53      	bge.n	801f986 <_dtoa_r+0x8f6>
 801f8de:	1e7b      	subs	r3, r7, #1
 801f8e0:	9304      	str	r3, [sp, #16]
 801f8e2:	4649      	mov	r1, r9
 801f8e4:	2300      	movs	r3, #0
 801f8e6:	220a      	movs	r2, #10
 801f8e8:	4658      	mov	r0, fp
 801f8ea:	f000 fa41 	bl	801fd70 <__multadd>
 801f8ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f8f0:	4681      	mov	r9, r0
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	f000 8172 	beq.w	801fbdc <_dtoa_r+0xb4c>
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	4629      	mov	r1, r5
 801f8fc:	220a      	movs	r2, #10
 801f8fe:	4658      	mov	r0, fp
 801f900:	f000 fa36 	bl	801fd70 <__multadd>
 801f904:	9b00      	ldr	r3, [sp, #0]
 801f906:	2b00      	cmp	r3, #0
 801f908:	4605      	mov	r5, r0
 801f90a:	dc67      	bgt.n	801f9dc <_dtoa_r+0x94c>
 801f90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f90e:	2b02      	cmp	r3, #2
 801f910:	dc41      	bgt.n	801f996 <_dtoa_r+0x906>
 801f912:	e063      	b.n	801f9dc <_dtoa_r+0x94c>
 801f914:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f916:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f91a:	e746      	b.n	801f7aa <_dtoa_r+0x71a>
 801f91c:	9b07      	ldr	r3, [sp, #28]
 801f91e:	1e5c      	subs	r4, r3, #1
 801f920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f922:	42a3      	cmp	r3, r4
 801f924:	bfbf      	itttt	lt
 801f926:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f928:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f92a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f92c:	1ae3      	sublt	r3, r4, r3
 801f92e:	bfb4      	ite	lt
 801f930:	18d2      	addlt	r2, r2, r3
 801f932:	1b1c      	subge	r4, r3, r4
 801f934:	9b07      	ldr	r3, [sp, #28]
 801f936:	bfbc      	itt	lt
 801f938:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f93a:	2400      	movlt	r4, #0
 801f93c:	2b00      	cmp	r3, #0
 801f93e:	bfb5      	itete	lt
 801f940:	eba8 0603 	sublt.w	r6, r8, r3
 801f944:	9b07      	ldrge	r3, [sp, #28]
 801f946:	2300      	movlt	r3, #0
 801f948:	4646      	movge	r6, r8
 801f94a:	e730      	b.n	801f7ae <_dtoa_r+0x71e>
 801f94c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f94e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f950:	4646      	mov	r6, r8
 801f952:	e735      	b.n	801f7c0 <_dtoa_r+0x730>
 801f954:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f956:	e75c      	b.n	801f812 <_dtoa_r+0x782>
 801f958:	2300      	movs	r3, #0
 801f95a:	e788      	b.n	801f86e <_dtoa_r+0x7de>
 801f95c:	3fe00000 	.word	0x3fe00000
 801f960:	40240000 	.word	0x40240000
 801f964:	40140000 	.word	0x40140000
 801f968:	9b02      	ldr	r3, [sp, #8]
 801f96a:	e780      	b.n	801f86e <_dtoa_r+0x7de>
 801f96c:	2300      	movs	r3, #0
 801f96e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f970:	e782      	b.n	801f878 <_dtoa_r+0x7e8>
 801f972:	d099      	beq.n	801f8a8 <_dtoa_r+0x818>
 801f974:	9a08      	ldr	r2, [sp, #32]
 801f976:	331c      	adds	r3, #28
 801f978:	441a      	add	r2, r3
 801f97a:	4498      	add	r8, r3
 801f97c:	441e      	add	r6, r3
 801f97e:	9208      	str	r2, [sp, #32]
 801f980:	e792      	b.n	801f8a8 <_dtoa_r+0x818>
 801f982:	4603      	mov	r3, r0
 801f984:	e7f6      	b.n	801f974 <_dtoa_r+0x8e4>
 801f986:	9b07      	ldr	r3, [sp, #28]
 801f988:	9704      	str	r7, [sp, #16]
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	dc20      	bgt.n	801f9d0 <_dtoa_r+0x940>
 801f98e:	9300      	str	r3, [sp, #0]
 801f990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f992:	2b02      	cmp	r3, #2
 801f994:	dd1e      	ble.n	801f9d4 <_dtoa_r+0x944>
 801f996:	9b00      	ldr	r3, [sp, #0]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	f47f aec0 	bne.w	801f71e <_dtoa_r+0x68e>
 801f99e:	4621      	mov	r1, r4
 801f9a0:	2205      	movs	r2, #5
 801f9a2:	4658      	mov	r0, fp
 801f9a4:	f000 f9e4 	bl	801fd70 <__multadd>
 801f9a8:	4601      	mov	r1, r0
 801f9aa:	4604      	mov	r4, r0
 801f9ac:	4648      	mov	r0, r9
 801f9ae:	f000 fc41 	bl	8020234 <__mcmp>
 801f9b2:	2800      	cmp	r0, #0
 801f9b4:	f77f aeb3 	ble.w	801f71e <_dtoa_r+0x68e>
 801f9b8:	4656      	mov	r6, sl
 801f9ba:	2331      	movs	r3, #49	@ 0x31
 801f9bc:	f806 3b01 	strb.w	r3, [r6], #1
 801f9c0:	9b04      	ldr	r3, [sp, #16]
 801f9c2:	3301      	adds	r3, #1
 801f9c4:	9304      	str	r3, [sp, #16]
 801f9c6:	e6ae      	b.n	801f726 <_dtoa_r+0x696>
 801f9c8:	9c07      	ldr	r4, [sp, #28]
 801f9ca:	9704      	str	r7, [sp, #16]
 801f9cc:	4625      	mov	r5, r4
 801f9ce:	e7f3      	b.n	801f9b8 <_dtoa_r+0x928>
 801f9d0:	9b07      	ldr	r3, [sp, #28]
 801f9d2:	9300      	str	r3, [sp, #0]
 801f9d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	f000 8104 	beq.w	801fbe4 <_dtoa_r+0xb54>
 801f9dc:	2e00      	cmp	r6, #0
 801f9de:	dd05      	ble.n	801f9ec <_dtoa_r+0x95c>
 801f9e0:	4629      	mov	r1, r5
 801f9e2:	4632      	mov	r2, r6
 801f9e4:	4658      	mov	r0, fp
 801f9e6:	f000 fbb9 	bl	802015c <__lshift>
 801f9ea:	4605      	mov	r5, r0
 801f9ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d05a      	beq.n	801faa8 <_dtoa_r+0xa18>
 801f9f2:	6869      	ldr	r1, [r5, #4]
 801f9f4:	4658      	mov	r0, fp
 801f9f6:	f000 f959 	bl	801fcac <_Balloc>
 801f9fa:	4606      	mov	r6, r0
 801f9fc:	b928      	cbnz	r0, 801fa0a <_dtoa_r+0x97a>
 801f9fe:	4b84      	ldr	r3, [pc, #528]	@ (801fc10 <_dtoa_r+0xb80>)
 801fa00:	4602      	mov	r2, r0
 801fa02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801fa06:	f7ff bb5a 	b.w	801f0be <_dtoa_r+0x2e>
 801fa0a:	692a      	ldr	r2, [r5, #16]
 801fa0c:	3202      	adds	r2, #2
 801fa0e:	0092      	lsls	r2, r2, #2
 801fa10:	f105 010c 	add.w	r1, r5, #12
 801fa14:	300c      	adds	r0, #12
 801fa16:	f7ff fa80 	bl	801ef1a <memcpy>
 801fa1a:	2201      	movs	r2, #1
 801fa1c:	4631      	mov	r1, r6
 801fa1e:	4658      	mov	r0, fp
 801fa20:	f000 fb9c 	bl	802015c <__lshift>
 801fa24:	f10a 0301 	add.w	r3, sl, #1
 801fa28:	9307      	str	r3, [sp, #28]
 801fa2a:	9b00      	ldr	r3, [sp, #0]
 801fa2c:	4453      	add	r3, sl
 801fa2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fa30:	9b02      	ldr	r3, [sp, #8]
 801fa32:	f003 0301 	and.w	r3, r3, #1
 801fa36:	462f      	mov	r7, r5
 801fa38:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa3a:	4605      	mov	r5, r0
 801fa3c:	9b07      	ldr	r3, [sp, #28]
 801fa3e:	4621      	mov	r1, r4
 801fa40:	3b01      	subs	r3, #1
 801fa42:	4648      	mov	r0, r9
 801fa44:	9300      	str	r3, [sp, #0]
 801fa46:	f7ff fa9b 	bl	801ef80 <quorem>
 801fa4a:	4639      	mov	r1, r7
 801fa4c:	9002      	str	r0, [sp, #8]
 801fa4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fa52:	4648      	mov	r0, r9
 801fa54:	f000 fbee 	bl	8020234 <__mcmp>
 801fa58:	462a      	mov	r2, r5
 801fa5a:	9008      	str	r0, [sp, #32]
 801fa5c:	4621      	mov	r1, r4
 801fa5e:	4658      	mov	r0, fp
 801fa60:	f000 fc04 	bl	802026c <__mdiff>
 801fa64:	68c2      	ldr	r2, [r0, #12]
 801fa66:	4606      	mov	r6, r0
 801fa68:	bb02      	cbnz	r2, 801faac <_dtoa_r+0xa1c>
 801fa6a:	4601      	mov	r1, r0
 801fa6c:	4648      	mov	r0, r9
 801fa6e:	f000 fbe1 	bl	8020234 <__mcmp>
 801fa72:	4602      	mov	r2, r0
 801fa74:	4631      	mov	r1, r6
 801fa76:	4658      	mov	r0, fp
 801fa78:	920e      	str	r2, [sp, #56]	@ 0x38
 801fa7a:	f000 f957 	bl	801fd2c <_Bfree>
 801fa7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fa82:	9e07      	ldr	r6, [sp, #28]
 801fa84:	ea43 0102 	orr.w	r1, r3, r2
 801fa88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa8a:	4319      	orrs	r1, r3
 801fa8c:	d110      	bne.n	801fab0 <_dtoa_r+0xa20>
 801fa8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fa92:	d029      	beq.n	801fae8 <_dtoa_r+0xa58>
 801fa94:	9b08      	ldr	r3, [sp, #32]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	dd02      	ble.n	801faa0 <_dtoa_r+0xa10>
 801fa9a:	9b02      	ldr	r3, [sp, #8]
 801fa9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801faa0:	9b00      	ldr	r3, [sp, #0]
 801faa2:	f883 8000 	strb.w	r8, [r3]
 801faa6:	e63f      	b.n	801f728 <_dtoa_r+0x698>
 801faa8:	4628      	mov	r0, r5
 801faaa:	e7bb      	b.n	801fa24 <_dtoa_r+0x994>
 801faac:	2201      	movs	r2, #1
 801faae:	e7e1      	b.n	801fa74 <_dtoa_r+0x9e4>
 801fab0:	9b08      	ldr	r3, [sp, #32]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	db04      	blt.n	801fac0 <_dtoa_r+0xa30>
 801fab6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fab8:	430b      	orrs	r3, r1
 801faba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fabc:	430b      	orrs	r3, r1
 801fabe:	d120      	bne.n	801fb02 <_dtoa_r+0xa72>
 801fac0:	2a00      	cmp	r2, #0
 801fac2:	dded      	ble.n	801faa0 <_dtoa_r+0xa10>
 801fac4:	4649      	mov	r1, r9
 801fac6:	2201      	movs	r2, #1
 801fac8:	4658      	mov	r0, fp
 801faca:	f000 fb47 	bl	802015c <__lshift>
 801face:	4621      	mov	r1, r4
 801fad0:	4681      	mov	r9, r0
 801fad2:	f000 fbaf 	bl	8020234 <__mcmp>
 801fad6:	2800      	cmp	r0, #0
 801fad8:	dc03      	bgt.n	801fae2 <_dtoa_r+0xa52>
 801fada:	d1e1      	bne.n	801faa0 <_dtoa_r+0xa10>
 801fadc:	f018 0f01 	tst.w	r8, #1
 801fae0:	d0de      	beq.n	801faa0 <_dtoa_r+0xa10>
 801fae2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fae6:	d1d8      	bne.n	801fa9a <_dtoa_r+0xa0a>
 801fae8:	9a00      	ldr	r2, [sp, #0]
 801faea:	2339      	movs	r3, #57	@ 0x39
 801faec:	7013      	strb	r3, [r2, #0]
 801faee:	4633      	mov	r3, r6
 801faf0:	461e      	mov	r6, r3
 801faf2:	3b01      	subs	r3, #1
 801faf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801faf8:	2a39      	cmp	r2, #57	@ 0x39
 801fafa:	d052      	beq.n	801fba2 <_dtoa_r+0xb12>
 801fafc:	3201      	adds	r2, #1
 801fafe:	701a      	strb	r2, [r3, #0]
 801fb00:	e612      	b.n	801f728 <_dtoa_r+0x698>
 801fb02:	2a00      	cmp	r2, #0
 801fb04:	dd07      	ble.n	801fb16 <_dtoa_r+0xa86>
 801fb06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fb0a:	d0ed      	beq.n	801fae8 <_dtoa_r+0xa58>
 801fb0c:	9a00      	ldr	r2, [sp, #0]
 801fb0e:	f108 0301 	add.w	r3, r8, #1
 801fb12:	7013      	strb	r3, [r2, #0]
 801fb14:	e608      	b.n	801f728 <_dtoa_r+0x698>
 801fb16:	9b07      	ldr	r3, [sp, #28]
 801fb18:	9a07      	ldr	r2, [sp, #28]
 801fb1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fb1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb20:	4293      	cmp	r3, r2
 801fb22:	d028      	beq.n	801fb76 <_dtoa_r+0xae6>
 801fb24:	4649      	mov	r1, r9
 801fb26:	2300      	movs	r3, #0
 801fb28:	220a      	movs	r2, #10
 801fb2a:	4658      	mov	r0, fp
 801fb2c:	f000 f920 	bl	801fd70 <__multadd>
 801fb30:	42af      	cmp	r7, r5
 801fb32:	4681      	mov	r9, r0
 801fb34:	f04f 0300 	mov.w	r3, #0
 801fb38:	f04f 020a 	mov.w	r2, #10
 801fb3c:	4639      	mov	r1, r7
 801fb3e:	4658      	mov	r0, fp
 801fb40:	d107      	bne.n	801fb52 <_dtoa_r+0xac2>
 801fb42:	f000 f915 	bl	801fd70 <__multadd>
 801fb46:	4607      	mov	r7, r0
 801fb48:	4605      	mov	r5, r0
 801fb4a:	9b07      	ldr	r3, [sp, #28]
 801fb4c:	3301      	adds	r3, #1
 801fb4e:	9307      	str	r3, [sp, #28]
 801fb50:	e774      	b.n	801fa3c <_dtoa_r+0x9ac>
 801fb52:	f000 f90d 	bl	801fd70 <__multadd>
 801fb56:	4629      	mov	r1, r5
 801fb58:	4607      	mov	r7, r0
 801fb5a:	2300      	movs	r3, #0
 801fb5c:	220a      	movs	r2, #10
 801fb5e:	4658      	mov	r0, fp
 801fb60:	f000 f906 	bl	801fd70 <__multadd>
 801fb64:	4605      	mov	r5, r0
 801fb66:	e7f0      	b.n	801fb4a <_dtoa_r+0xaba>
 801fb68:	9b00      	ldr	r3, [sp, #0]
 801fb6a:	2b00      	cmp	r3, #0
 801fb6c:	bfcc      	ite	gt
 801fb6e:	461e      	movgt	r6, r3
 801fb70:	2601      	movle	r6, #1
 801fb72:	4456      	add	r6, sl
 801fb74:	2700      	movs	r7, #0
 801fb76:	4649      	mov	r1, r9
 801fb78:	2201      	movs	r2, #1
 801fb7a:	4658      	mov	r0, fp
 801fb7c:	f000 faee 	bl	802015c <__lshift>
 801fb80:	4621      	mov	r1, r4
 801fb82:	4681      	mov	r9, r0
 801fb84:	f000 fb56 	bl	8020234 <__mcmp>
 801fb88:	2800      	cmp	r0, #0
 801fb8a:	dcb0      	bgt.n	801faee <_dtoa_r+0xa5e>
 801fb8c:	d102      	bne.n	801fb94 <_dtoa_r+0xb04>
 801fb8e:	f018 0f01 	tst.w	r8, #1
 801fb92:	d1ac      	bne.n	801faee <_dtoa_r+0xa5e>
 801fb94:	4633      	mov	r3, r6
 801fb96:	461e      	mov	r6, r3
 801fb98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801fb9c:	2a30      	cmp	r2, #48	@ 0x30
 801fb9e:	d0fa      	beq.n	801fb96 <_dtoa_r+0xb06>
 801fba0:	e5c2      	b.n	801f728 <_dtoa_r+0x698>
 801fba2:	459a      	cmp	sl, r3
 801fba4:	d1a4      	bne.n	801faf0 <_dtoa_r+0xa60>
 801fba6:	9b04      	ldr	r3, [sp, #16]
 801fba8:	3301      	adds	r3, #1
 801fbaa:	9304      	str	r3, [sp, #16]
 801fbac:	2331      	movs	r3, #49	@ 0x31
 801fbae:	f88a 3000 	strb.w	r3, [sl]
 801fbb2:	e5b9      	b.n	801f728 <_dtoa_r+0x698>
 801fbb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fbb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801fc14 <_dtoa_r+0xb84>
 801fbba:	b11b      	cbz	r3, 801fbc4 <_dtoa_r+0xb34>
 801fbbc:	f10a 0308 	add.w	r3, sl, #8
 801fbc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fbc2:	6013      	str	r3, [r2, #0]
 801fbc4:	4650      	mov	r0, sl
 801fbc6:	b019      	add	sp, #100	@ 0x64
 801fbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbce:	2b01      	cmp	r3, #1
 801fbd0:	f77f ae37 	ble.w	801f842 <_dtoa_r+0x7b2>
 801fbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbd6:	930a      	str	r3, [sp, #40]	@ 0x28
 801fbd8:	2001      	movs	r0, #1
 801fbda:	e655      	b.n	801f888 <_dtoa_r+0x7f8>
 801fbdc:	9b00      	ldr	r3, [sp, #0]
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	f77f aed6 	ble.w	801f990 <_dtoa_r+0x900>
 801fbe4:	4656      	mov	r6, sl
 801fbe6:	4621      	mov	r1, r4
 801fbe8:	4648      	mov	r0, r9
 801fbea:	f7ff f9c9 	bl	801ef80 <quorem>
 801fbee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fbf2:	f806 8b01 	strb.w	r8, [r6], #1
 801fbf6:	9b00      	ldr	r3, [sp, #0]
 801fbf8:	eba6 020a 	sub.w	r2, r6, sl
 801fbfc:	4293      	cmp	r3, r2
 801fbfe:	ddb3      	ble.n	801fb68 <_dtoa_r+0xad8>
 801fc00:	4649      	mov	r1, r9
 801fc02:	2300      	movs	r3, #0
 801fc04:	220a      	movs	r2, #10
 801fc06:	4658      	mov	r0, fp
 801fc08:	f000 f8b2 	bl	801fd70 <__multadd>
 801fc0c:	4681      	mov	r9, r0
 801fc0e:	e7ea      	b.n	801fbe6 <_dtoa_r+0xb56>
 801fc10:	080256a0 	.word	0x080256a0
 801fc14:	0802563b 	.word	0x0802563b

0801fc18 <_free_r>:
 801fc18:	b538      	push	{r3, r4, r5, lr}
 801fc1a:	4605      	mov	r5, r0
 801fc1c:	2900      	cmp	r1, #0
 801fc1e:	d041      	beq.n	801fca4 <_free_r+0x8c>
 801fc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fc24:	1f0c      	subs	r4, r1, #4
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	bfb8      	it	lt
 801fc2a:	18e4      	addlt	r4, r4, r3
 801fc2c:	f7fd fe8a 	bl	801d944 <__malloc_lock>
 801fc30:	4a1d      	ldr	r2, [pc, #116]	@ (801fca8 <_free_r+0x90>)
 801fc32:	6813      	ldr	r3, [r2, #0]
 801fc34:	b933      	cbnz	r3, 801fc44 <_free_r+0x2c>
 801fc36:	6063      	str	r3, [r4, #4]
 801fc38:	6014      	str	r4, [r2, #0]
 801fc3a:	4628      	mov	r0, r5
 801fc3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc40:	f7fd be86 	b.w	801d950 <__malloc_unlock>
 801fc44:	42a3      	cmp	r3, r4
 801fc46:	d908      	bls.n	801fc5a <_free_r+0x42>
 801fc48:	6820      	ldr	r0, [r4, #0]
 801fc4a:	1821      	adds	r1, r4, r0
 801fc4c:	428b      	cmp	r3, r1
 801fc4e:	bf01      	itttt	eq
 801fc50:	6819      	ldreq	r1, [r3, #0]
 801fc52:	685b      	ldreq	r3, [r3, #4]
 801fc54:	1809      	addeq	r1, r1, r0
 801fc56:	6021      	streq	r1, [r4, #0]
 801fc58:	e7ed      	b.n	801fc36 <_free_r+0x1e>
 801fc5a:	461a      	mov	r2, r3
 801fc5c:	685b      	ldr	r3, [r3, #4]
 801fc5e:	b10b      	cbz	r3, 801fc64 <_free_r+0x4c>
 801fc60:	42a3      	cmp	r3, r4
 801fc62:	d9fa      	bls.n	801fc5a <_free_r+0x42>
 801fc64:	6811      	ldr	r1, [r2, #0]
 801fc66:	1850      	adds	r0, r2, r1
 801fc68:	42a0      	cmp	r0, r4
 801fc6a:	d10b      	bne.n	801fc84 <_free_r+0x6c>
 801fc6c:	6820      	ldr	r0, [r4, #0]
 801fc6e:	4401      	add	r1, r0
 801fc70:	1850      	adds	r0, r2, r1
 801fc72:	4283      	cmp	r3, r0
 801fc74:	6011      	str	r1, [r2, #0]
 801fc76:	d1e0      	bne.n	801fc3a <_free_r+0x22>
 801fc78:	6818      	ldr	r0, [r3, #0]
 801fc7a:	685b      	ldr	r3, [r3, #4]
 801fc7c:	6053      	str	r3, [r2, #4]
 801fc7e:	4408      	add	r0, r1
 801fc80:	6010      	str	r0, [r2, #0]
 801fc82:	e7da      	b.n	801fc3a <_free_r+0x22>
 801fc84:	d902      	bls.n	801fc8c <_free_r+0x74>
 801fc86:	230c      	movs	r3, #12
 801fc88:	602b      	str	r3, [r5, #0]
 801fc8a:	e7d6      	b.n	801fc3a <_free_r+0x22>
 801fc8c:	6820      	ldr	r0, [r4, #0]
 801fc8e:	1821      	adds	r1, r4, r0
 801fc90:	428b      	cmp	r3, r1
 801fc92:	bf04      	itt	eq
 801fc94:	6819      	ldreq	r1, [r3, #0]
 801fc96:	685b      	ldreq	r3, [r3, #4]
 801fc98:	6063      	str	r3, [r4, #4]
 801fc9a:	bf04      	itt	eq
 801fc9c:	1809      	addeq	r1, r1, r0
 801fc9e:	6021      	streq	r1, [r4, #0]
 801fca0:	6054      	str	r4, [r2, #4]
 801fca2:	e7ca      	b.n	801fc3a <_free_r+0x22>
 801fca4:	bd38      	pop	{r3, r4, r5, pc}
 801fca6:	bf00      	nop
 801fca8:	20003668 	.word	0x20003668

0801fcac <_Balloc>:
 801fcac:	b570      	push	{r4, r5, r6, lr}
 801fcae:	69c6      	ldr	r6, [r0, #28]
 801fcb0:	4604      	mov	r4, r0
 801fcb2:	460d      	mov	r5, r1
 801fcb4:	b976      	cbnz	r6, 801fcd4 <_Balloc+0x28>
 801fcb6:	2010      	movs	r0, #16
 801fcb8:	f7fd fd9a 	bl	801d7f0 <malloc>
 801fcbc:	4602      	mov	r2, r0
 801fcbe:	61e0      	str	r0, [r4, #28]
 801fcc0:	b920      	cbnz	r0, 801fccc <_Balloc+0x20>
 801fcc2:	4b18      	ldr	r3, [pc, #96]	@ (801fd24 <_Balloc+0x78>)
 801fcc4:	4818      	ldr	r0, [pc, #96]	@ (801fd28 <_Balloc+0x7c>)
 801fcc6:	216b      	movs	r1, #107	@ 0x6b
 801fcc8:	f7ff f93c 	bl	801ef44 <__assert_func>
 801fccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fcd0:	6006      	str	r6, [r0, #0]
 801fcd2:	60c6      	str	r6, [r0, #12]
 801fcd4:	69e6      	ldr	r6, [r4, #28]
 801fcd6:	68f3      	ldr	r3, [r6, #12]
 801fcd8:	b183      	cbz	r3, 801fcfc <_Balloc+0x50>
 801fcda:	69e3      	ldr	r3, [r4, #28]
 801fcdc:	68db      	ldr	r3, [r3, #12]
 801fcde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fce2:	b9b8      	cbnz	r0, 801fd14 <_Balloc+0x68>
 801fce4:	2101      	movs	r1, #1
 801fce6:	fa01 f605 	lsl.w	r6, r1, r5
 801fcea:	1d72      	adds	r2, r6, #5
 801fcec:	0092      	lsls	r2, r2, #2
 801fcee:	4620      	mov	r0, r4
 801fcf0:	f001 fe95 	bl	8021a1e <_calloc_r>
 801fcf4:	b160      	cbz	r0, 801fd10 <_Balloc+0x64>
 801fcf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fcfa:	e00e      	b.n	801fd1a <_Balloc+0x6e>
 801fcfc:	2221      	movs	r2, #33	@ 0x21
 801fcfe:	2104      	movs	r1, #4
 801fd00:	4620      	mov	r0, r4
 801fd02:	f001 fe8c 	bl	8021a1e <_calloc_r>
 801fd06:	69e3      	ldr	r3, [r4, #28]
 801fd08:	60f0      	str	r0, [r6, #12]
 801fd0a:	68db      	ldr	r3, [r3, #12]
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d1e4      	bne.n	801fcda <_Balloc+0x2e>
 801fd10:	2000      	movs	r0, #0
 801fd12:	bd70      	pop	{r4, r5, r6, pc}
 801fd14:	6802      	ldr	r2, [r0, #0]
 801fd16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fd1a:	2300      	movs	r3, #0
 801fd1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fd20:	e7f7      	b.n	801fd12 <_Balloc+0x66>
 801fd22:	bf00      	nop
 801fd24:	0802558e 	.word	0x0802558e
 801fd28:	080256b1 	.word	0x080256b1

0801fd2c <_Bfree>:
 801fd2c:	b570      	push	{r4, r5, r6, lr}
 801fd2e:	69c6      	ldr	r6, [r0, #28]
 801fd30:	4605      	mov	r5, r0
 801fd32:	460c      	mov	r4, r1
 801fd34:	b976      	cbnz	r6, 801fd54 <_Bfree+0x28>
 801fd36:	2010      	movs	r0, #16
 801fd38:	f7fd fd5a 	bl	801d7f0 <malloc>
 801fd3c:	4602      	mov	r2, r0
 801fd3e:	61e8      	str	r0, [r5, #28]
 801fd40:	b920      	cbnz	r0, 801fd4c <_Bfree+0x20>
 801fd42:	4b09      	ldr	r3, [pc, #36]	@ (801fd68 <_Bfree+0x3c>)
 801fd44:	4809      	ldr	r0, [pc, #36]	@ (801fd6c <_Bfree+0x40>)
 801fd46:	218f      	movs	r1, #143	@ 0x8f
 801fd48:	f7ff f8fc 	bl	801ef44 <__assert_func>
 801fd4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fd50:	6006      	str	r6, [r0, #0]
 801fd52:	60c6      	str	r6, [r0, #12]
 801fd54:	b13c      	cbz	r4, 801fd66 <_Bfree+0x3a>
 801fd56:	69eb      	ldr	r3, [r5, #28]
 801fd58:	6862      	ldr	r2, [r4, #4]
 801fd5a:	68db      	ldr	r3, [r3, #12]
 801fd5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fd60:	6021      	str	r1, [r4, #0]
 801fd62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fd66:	bd70      	pop	{r4, r5, r6, pc}
 801fd68:	0802558e 	.word	0x0802558e
 801fd6c:	080256b1 	.word	0x080256b1

0801fd70 <__multadd>:
 801fd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd74:	690d      	ldr	r5, [r1, #16]
 801fd76:	4607      	mov	r7, r0
 801fd78:	460c      	mov	r4, r1
 801fd7a:	461e      	mov	r6, r3
 801fd7c:	f101 0c14 	add.w	ip, r1, #20
 801fd80:	2000      	movs	r0, #0
 801fd82:	f8dc 3000 	ldr.w	r3, [ip]
 801fd86:	b299      	uxth	r1, r3
 801fd88:	fb02 6101 	mla	r1, r2, r1, r6
 801fd8c:	0c1e      	lsrs	r6, r3, #16
 801fd8e:	0c0b      	lsrs	r3, r1, #16
 801fd90:	fb02 3306 	mla	r3, r2, r6, r3
 801fd94:	b289      	uxth	r1, r1
 801fd96:	3001      	adds	r0, #1
 801fd98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801fd9c:	4285      	cmp	r5, r0
 801fd9e:	f84c 1b04 	str.w	r1, [ip], #4
 801fda2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801fda6:	dcec      	bgt.n	801fd82 <__multadd+0x12>
 801fda8:	b30e      	cbz	r6, 801fdee <__multadd+0x7e>
 801fdaa:	68a3      	ldr	r3, [r4, #8]
 801fdac:	42ab      	cmp	r3, r5
 801fdae:	dc19      	bgt.n	801fde4 <__multadd+0x74>
 801fdb0:	6861      	ldr	r1, [r4, #4]
 801fdb2:	4638      	mov	r0, r7
 801fdb4:	3101      	adds	r1, #1
 801fdb6:	f7ff ff79 	bl	801fcac <_Balloc>
 801fdba:	4680      	mov	r8, r0
 801fdbc:	b928      	cbnz	r0, 801fdca <__multadd+0x5a>
 801fdbe:	4602      	mov	r2, r0
 801fdc0:	4b0c      	ldr	r3, [pc, #48]	@ (801fdf4 <__multadd+0x84>)
 801fdc2:	480d      	ldr	r0, [pc, #52]	@ (801fdf8 <__multadd+0x88>)
 801fdc4:	21ba      	movs	r1, #186	@ 0xba
 801fdc6:	f7ff f8bd 	bl	801ef44 <__assert_func>
 801fdca:	6922      	ldr	r2, [r4, #16]
 801fdcc:	3202      	adds	r2, #2
 801fdce:	f104 010c 	add.w	r1, r4, #12
 801fdd2:	0092      	lsls	r2, r2, #2
 801fdd4:	300c      	adds	r0, #12
 801fdd6:	f7ff f8a0 	bl	801ef1a <memcpy>
 801fdda:	4621      	mov	r1, r4
 801fddc:	4638      	mov	r0, r7
 801fdde:	f7ff ffa5 	bl	801fd2c <_Bfree>
 801fde2:	4644      	mov	r4, r8
 801fde4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801fde8:	3501      	adds	r5, #1
 801fdea:	615e      	str	r6, [r3, #20]
 801fdec:	6125      	str	r5, [r4, #16]
 801fdee:	4620      	mov	r0, r4
 801fdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fdf4:	080256a0 	.word	0x080256a0
 801fdf8:	080256b1 	.word	0x080256b1

0801fdfc <__s2b>:
 801fdfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe00:	460c      	mov	r4, r1
 801fe02:	4615      	mov	r5, r2
 801fe04:	461f      	mov	r7, r3
 801fe06:	2209      	movs	r2, #9
 801fe08:	3308      	adds	r3, #8
 801fe0a:	4606      	mov	r6, r0
 801fe0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801fe10:	2100      	movs	r1, #0
 801fe12:	2201      	movs	r2, #1
 801fe14:	429a      	cmp	r2, r3
 801fe16:	db09      	blt.n	801fe2c <__s2b+0x30>
 801fe18:	4630      	mov	r0, r6
 801fe1a:	f7ff ff47 	bl	801fcac <_Balloc>
 801fe1e:	b940      	cbnz	r0, 801fe32 <__s2b+0x36>
 801fe20:	4602      	mov	r2, r0
 801fe22:	4b19      	ldr	r3, [pc, #100]	@ (801fe88 <__s2b+0x8c>)
 801fe24:	4819      	ldr	r0, [pc, #100]	@ (801fe8c <__s2b+0x90>)
 801fe26:	21d3      	movs	r1, #211	@ 0xd3
 801fe28:	f7ff f88c 	bl	801ef44 <__assert_func>
 801fe2c:	0052      	lsls	r2, r2, #1
 801fe2e:	3101      	adds	r1, #1
 801fe30:	e7f0      	b.n	801fe14 <__s2b+0x18>
 801fe32:	9b08      	ldr	r3, [sp, #32]
 801fe34:	6143      	str	r3, [r0, #20]
 801fe36:	2d09      	cmp	r5, #9
 801fe38:	f04f 0301 	mov.w	r3, #1
 801fe3c:	6103      	str	r3, [r0, #16]
 801fe3e:	dd16      	ble.n	801fe6e <__s2b+0x72>
 801fe40:	f104 0909 	add.w	r9, r4, #9
 801fe44:	46c8      	mov	r8, r9
 801fe46:	442c      	add	r4, r5
 801fe48:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fe4c:	4601      	mov	r1, r0
 801fe4e:	3b30      	subs	r3, #48	@ 0x30
 801fe50:	220a      	movs	r2, #10
 801fe52:	4630      	mov	r0, r6
 801fe54:	f7ff ff8c 	bl	801fd70 <__multadd>
 801fe58:	45a0      	cmp	r8, r4
 801fe5a:	d1f5      	bne.n	801fe48 <__s2b+0x4c>
 801fe5c:	f1a5 0408 	sub.w	r4, r5, #8
 801fe60:	444c      	add	r4, r9
 801fe62:	1b2d      	subs	r5, r5, r4
 801fe64:	1963      	adds	r3, r4, r5
 801fe66:	42bb      	cmp	r3, r7
 801fe68:	db04      	blt.n	801fe74 <__s2b+0x78>
 801fe6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe6e:	340a      	adds	r4, #10
 801fe70:	2509      	movs	r5, #9
 801fe72:	e7f6      	b.n	801fe62 <__s2b+0x66>
 801fe74:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fe78:	4601      	mov	r1, r0
 801fe7a:	3b30      	subs	r3, #48	@ 0x30
 801fe7c:	220a      	movs	r2, #10
 801fe7e:	4630      	mov	r0, r6
 801fe80:	f7ff ff76 	bl	801fd70 <__multadd>
 801fe84:	e7ee      	b.n	801fe64 <__s2b+0x68>
 801fe86:	bf00      	nop
 801fe88:	080256a0 	.word	0x080256a0
 801fe8c:	080256b1 	.word	0x080256b1

0801fe90 <__hi0bits>:
 801fe90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801fe94:	4603      	mov	r3, r0
 801fe96:	bf36      	itet	cc
 801fe98:	0403      	lslcc	r3, r0, #16
 801fe9a:	2000      	movcs	r0, #0
 801fe9c:	2010      	movcc	r0, #16
 801fe9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fea2:	bf3c      	itt	cc
 801fea4:	021b      	lslcc	r3, r3, #8
 801fea6:	3008      	addcc	r0, #8
 801fea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801feac:	bf3c      	itt	cc
 801feae:	011b      	lslcc	r3, r3, #4
 801feb0:	3004      	addcc	r0, #4
 801feb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801feb6:	bf3c      	itt	cc
 801feb8:	009b      	lslcc	r3, r3, #2
 801feba:	3002      	addcc	r0, #2
 801febc:	2b00      	cmp	r3, #0
 801febe:	db05      	blt.n	801fecc <__hi0bits+0x3c>
 801fec0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801fec4:	f100 0001 	add.w	r0, r0, #1
 801fec8:	bf08      	it	eq
 801feca:	2020      	moveq	r0, #32
 801fecc:	4770      	bx	lr

0801fece <__lo0bits>:
 801fece:	6803      	ldr	r3, [r0, #0]
 801fed0:	4602      	mov	r2, r0
 801fed2:	f013 0007 	ands.w	r0, r3, #7
 801fed6:	d00b      	beq.n	801fef0 <__lo0bits+0x22>
 801fed8:	07d9      	lsls	r1, r3, #31
 801feda:	d421      	bmi.n	801ff20 <__lo0bits+0x52>
 801fedc:	0798      	lsls	r0, r3, #30
 801fede:	bf49      	itett	mi
 801fee0:	085b      	lsrmi	r3, r3, #1
 801fee2:	089b      	lsrpl	r3, r3, #2
 801fee4:	2001      	movmi	r0, #1
 801fee6:	6013      	strmi	r3, [r2, #0]
 801fee8:	bf5c      	itt	pl
 801feea:	6013      	strpl	r3, [r2, #0]
 801feec:	2002      	movpl	r0, #2
 801feee:	4770      	bx	lr
 801fef0:	b299      	uxth	r1, r3
 801fef2:	b909      	cbnz	r1, 801fef8 <__lo0bits+0x2a>
 801fef4:	0c1b      	lsrs	r3, r3, #16
 801fef6:	2010      	movs	r0, #16
 801fef8:	b2d9      	uxtb	r1, r3
 801fefa:	b909      	cbnz	r1, 801ff00 <__lo0bits+0x32>
 801fefc:	3008      	adds	r0, #8
 801fefe:	0a1b      	lsrs	r3, r3, #8
 801ff00:	0719      	lsls	r1, r3, #28
 801ff02:	bf04      	itt	eq
 801ff04:	091b      	lsreq	r3, r3, #4
 801ff06:	3004      	addeq	r0, #4
 801ff08:	0799      	lsls	r1, r3, #30
 801ff0a:	bf04      	itt	eq
 801ff0c:	089b      	lsreq	r3, r3, #2
 801ff0e:	3002      	addeq	r0, #2
 801ff10:	07d9      	lsls	r1, r3, #31
 801ff12:	d403      	bmi.n	801ff1c <__lo0bits+0x4e>
 801ff14:	085b      	lsrs	r3, r3, #1
 801ff16:	f100 0001 	add.w	r0, r0, #1
 801ff1a:	d003      	beq.n	801ff24 <__lo0bits+0x56>
 801ff1c:	6013      	str	r3, [r2, #0]
 801ff1e:	4770      	bx	lr
 801ff20:	2000      	movs	r0, #0
 801ff22:	4770      	bx	lr
 801ff24:	2020      	movs	r0, #32
 801ff26:	4770      	bx	lr

0801ff28 <__i2b>:
 801ff28:	b510      	push	{r4, lr}
 801ff2a:	460c      	mov	r4, r1
 801ff2c:	2101      	movs	r1, #1
 801ff2e:	f7ff febd 	bl	801fcac <_Balloc>
 801ff32:	4602      	mov	r2, r0
 801ff34:	b928      	cbnz	r0, 801ff42 <__i2b+0x1a>
 801ff36:	4b05      	ldr	r3, [pc, #20]	@ (801ff4c <__i2b+0x24>)
 801ff38:	4805      	ldr	r0, [pc, #20]	@ (801ff50 <__i2b+0x28>)
 801ff3a:	f240 1145 	movw	r1, #325	@ 0x145
 801ff3e:	f7ff f801 	bl	801ef44 <__assert_func>
 801ff42:	2301      	movs	r3, #1
 801ff44:	6144      	str	r4, [r0, #20]
 801ff46:	6103      	str	r3, [r0, #16]
 801ff48:	bd10      	pop	{r4, pc}
 801ff4a:	bf00      	nop
 801ff4c:	080256a0 	.word	0x080256a0
 801ff50:	080256b1 	.word	0x080256b1

0801ff54 <__multiply>:
 801ff54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff58:	4614      	mov	r4, r2
 801ff5a:	690a      	ldr	r2, [r1, #16]
 801ff5c:	6923      	ldr	r3, [r4, #16]
 801ff5e:	429a      	cmp	r2, r3
 801ff60:	bfa8      	it	ge
 801ff62:	4623      	movge	r3, r4
 801ff64:	460f      	mov	r7, r1
 801ff66:	bfa4      	itt	ge
 801ff68:	460c      	movge	r4, r1
 801ff6a:	461f      	movge	r7, r3
 801ff6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ff70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ff74:	68a3      	ldr	r3, [r4, #8]
 801ff76:	6861      	ldr	r1, [r4, #4]
 801ff78:	eb0a 0609 	add.w	r6, sl, r9
 801ff7c:	42b3      	cmp	r3, r6
 801ff7e:	b085      	sub	sp, #20
 801ff80:	bfb8      	it	lt
 801ff82:	3101      	addlt	r1, #1
 801ff84:	f7ff fe92 	bl	801fcac <_Balloc>
 801ff88:	b930      	cbnz	r0, 801ff98 <__multiply+0x44>
 801ff8a:	4602      	mov	r2, r0
 801ff8c:	4b44      	ldr	r3, [pc, #272]	@ (80200a0 <__multiply+0x14c>)
 801ff8e:	4845      	ldr	r0, [pc, #276]	@ (80200a4 <__multiply+0x150>)
 801ff90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ff94:	f7fe ffd6 	bl	801ef44 <__assert_func>
 801ff98:	f100 0514 	add.w	r5, r0, #20
 801ff9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ffa0:	462b      	mov	r3, r5
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	4543      	cmp	r3, r8
 801ffa6:	d321      	bcc.n	801ffec <__multiply+0x98>
 801ffa8:	f107 0114 	add.w	r1, r7, #20
 801ffac:	f104 0214 	add.w	r2, r4, #20
 801ffb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ffb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ffb8:	9302      	str	r3, [sp, #8]
 801ffba:	1b13      	subs	r3, r2, r4
 801ffbc:	3b15      	subs	r3, #21
 801ffbe:	f023 0303 	bic.w	r3, r3, #3
 801ffc2:	3304      	adds	r3, #4
 801ffc4:	f104 0715 	add.w	r7, r4, #21
 801ffc8:	42ba      	cmp	r2, r7
 801ffca:	bf38      	it	cc
 801ffcc:	2304      	movcc	r3, #4
 801ffce:	9301      	str	r3, [sp, #4]
 801ffd0:	9b02      	ldr	r3, [sp, #8]
 801ffd2:	9103      	str	r1, [sp, #12]
 801ffd4:	428b      	cmp	r3, r1
 801ffd6:	d80c      	bhi.n	801fff2 <__multiply+0x9e>
 801ffd8:	2e00      	cmp	r6, #0
 801ffda:	dd03      	ble.n	801ffe4 <__multiply+0x90>
 801ffdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d05b      	beq.n	802009c <__multiply+0x148>
 801ffe4:	6106      	str	r6, [r0, #16]
 801ffe6:	b005      	add	sp, #20
 801ffe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffec:	f843 2b04 	str.w	r2, [r3], #4
 801fff0:	e7d8      	b.n	801ffa4 <__multiply+0x50>
 801fff2:	f8b1 a000 	ldrh.w	sl, [r1]
 801fff6:	f1ba 0f00 	cmp.w	sl, #0
 801fffa:	d024      	beq.n	8020046 <__multiply+0xf2>
 801fffc:	f104 0e14 	add.w	lr, r4, #20
 8020000:	46a9      	mov	r9, r5
 8020002:	f04f 0c00 	mov.w	ip, #0
 8020006:	f85e 7b04 	ldr.w	r7, [lr], #4
 802000a:	f8d9 3000 	ldr.w	r3, [r9]
 802000e:	fa1f fb87 	uxth.w	fp, r7
 8020012:	b29b      	uxth	r3, r3
 8020014:	fb0a 330b 	mla	r3, sl, fp, r3
 8020018:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802001c:	f8d9 7000 	ldr.w	r7, [r9]
 8020020:	4463      	add	r3, ip
 8020022:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020026:	fb0a c70b 	mla	r7, sl, fp, ip
 802002a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802002e:	b29b      	uxth	r3, r3
 8020030:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020034:	4572      	cmp	r2, lr
 8020036:	f849 3b04 	str.w	r3, [r9], #4
 802003a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802003e:	d8e2      	bhi.n	8020006 <__multiply+0xb2>
 8020040:	9b01      	ldr	r3, [sp, #4]
 8020042:	f845 c003 	str.w	ip, [r5, r3]
 8020046:	9b03      	ldr	r3, [sp, #12]
 8020048:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802004c:	3104      	adds	r1, #4
 802004e:	f1b9 0f00 	cmp.w	r9, #0
 8020052:	d021      	beq.n	8020098 <__multiply+0x144>
 8020054:	682b      	ldr	r3, [r5, #0]
 8020056:	f104 0c14 	add.w	ip, r4, #20
 802005a:	46ae      	mov	lr, r5
 802005c:	f04f 0a00 	mov.w	sl, #0
 8020060:	f8bc b000 	ldrh.w	fp, [ip]
 8020064:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020068:	fb09 770b 	mla	r7, r9, fp, r7
 802006c:	4457      	add	r7, sl
 802006e:	b29b      	uxth	r3, r3
 8020070:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020074:	f84e 3b04 	str.w	r3, [lr], #4
 8020078:	f85c 3b04 	ldr.w	r3, [ip], #4
 802007c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020080:	f8be 3000 	ldrh.w	r3, [lr]
 8020084:	fb09 330a 	mla	r3, r9, sl, r3
 8020088:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802008c:	4562      	cmp	r2, ip
 802008e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020092:	d8e5      	bhi.n	8020060 <__multiply+0x10c>
 8020094:	9f01      	ldr	r7, [sp, #4]
 8020096:	51eb      	str	r3, [r5, r7]
 8020098:	3504      	adds	r5, #4
 802009a:	e799      	b.n	801ffd0 <__multiply+0x7c>
 802009c:	3e01      	subs	r6, #1
 802009e:	e79b      	b.n	801ffd8 <__multiply+0x84>
 80200a0:	080256a0 	.word	0x080256a0
 80200a4:	080256b1 	.word	0x080256b1

080200a8 <__pow5mult>:
 80200a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80200ac:	4615      	mov	r5, r2
 80200ae:	f012 0203 	ands.w	r2, r2, #3
 80200b2:	4607      	mov	r7, r0
 80200b4:	460e      	mov	r6, r1
 80200b6:	d007      	beq.n	80200c8 <__pow5mult+0x20>
 80200b8:	4c25      	ldr	r4, [pc, #148]	@ (8020150 <__pow5mult+0xa8>)
 80200ba:	3a01      	subs	r2, #1
 80200bc:	2300      	movs	r3, #0
 80200be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80200c2:	f7ff fe55 	bl	801fd70 <__multadd>
 80200c6:	4606      	mov	r6, r0
 80200c8:	10ad      	asrs	r5, r5, #2
 80200ca:	d03d      	beq.n	8020148 <__pow5mult+0xa0>
 80200cc:	69fc      	ldr	r4, [r7, #28]
 80200ce:	b97c      	cbnz	r4, 80200f0 <__pow5mult+0x48>
 80200d0:	2010      	movs	r0, #16
 80200d2:	f7fd fb8d 	bl	801d7f0 <malloc>
 80200d6:	4602      	mov	r2, r0
 80200d8:	61f8      	str	r0, [r7, #28]
 80200da:	b928      	cbnz	r0, 80200e8 <__pow5mult+0x40>
 80200dc:	4b1d      	ldr	r3, [pc, #116]	@ (8020154 <__pow5mult+0xac>)
 80200de:	481e      	ldr	r0, [pc, #120]	@ (8020158 <__pow5mult+0xb0>)
 80200e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80200e4:	f7fe ff2e 	bl	801ef44 <__assert_func>
 80200e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80200ec:	6004      	str	r4, [r0, #0]
 80200ee:	60c4      	str	r4, [r0, #12]
 80200f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80200f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80200f8:	b94c      	cbnz	r4, 802010e <__pow5mult+0x66>
 80200fa:	f240 2171 	movw	r1, #625	@ 0x271
 80200fe:	4638      	mov	r0, r7
 8020100:	f7ff ff12 	bl	801ff28 <__i2b>
 8020104:	2300      	movs	r3, #0
 8020106:	f8c8 0008 	str.w	r0, [r8, #8]
 802010a:	4604      	mov	r4, r0
 802010c:	6003      	str	r3, [r0, #0]
 802010e:	f04f 0900 	mov.w	r9, #0
 8020112:	07eb      	lsls	r3, r5, #31
 8020114:	d50a      	bpl.n	802012c <__pow5mult+0x84>
 8020116:	4631      	mov	r1, r6
 8020118:	4622      	mov	r2, r4
 802011a:	4638      	mov	r0, r7
 802011c:	f7ff ff1a 	bl	801ff54 <__multiply>
 8020120:	4631      	mov	r1, r6
 8020122:	4680      	mov	r8, r0
 8020124:	4638      	mov	r0, r7
 8020126:	f7ff fe01 	bl	801fd2c <_Bfree>
 802012a:	4646      	mov	r6, r8
 802012c:	106d      	asrs	r5, r5, #1
 802012e:	d00b      	beq.n	8020148 <__pow5mult+0xa0>
 8020130:	6820      	ldr	r0, [r4, #0]
 8020132:	b938      	cbnz	r0, 8020144 <__pow5mult+0x9c>
 8020134:	4622      	mov	r2, r4
 8020136:	4621      	mov	r1, r4
 8020138:	4638      	mov	r0, r7
 802013a:	f7ff ff0b 	bl	801ff54 <__multiply>
 802013e:	6020      	str	r0, [r4, #0]
 8020140:	f8c0 9000 	str.w	r9, [r0]
 8020144:	4604      	mov	r4, r0
 8020146:	e7e4      	b.n	8020112 <__pow5mult+0x6a>
 8020148:	4630      	mov	r0, r6
 802014a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802014e:	bf00      	nop
 8020150:	0802570c 	.word	0x0802570c
 8020154:	0802558e 	.word	0x0802558e
 8020158:	080256b1 	.word	0x080256b1

0802015c <__lshift>:
 802015c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020160:	460c      	mov	r4, r1
 8020162:	6849      	ldr	r1, [r1, #4]
 8020164:	6923      	ldr	r3, [r4, #16]
 8020166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802016a:	68a3      	ldr	r3, [r4, #8]
 802016c:	4607      	mov	r7, r0
 802016e:	4691      	mov	r9, r2
 8020170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020174:	f108 0601 	add.w	r6, r8, #1
 8020178:	42b3      	cmp	r3, r6
 802017a:	db0b      	blt.n	8020194 <__lshift+0x38>
 802017c:	4638      	mov	r0, r7
 802017e:	f7ff fd95 	bl	801fcac <_Balloc>
 8020182:	4605      	mov	r5, r0
 8020184:	b948      	cbnz	r0, 802019a <__lshift+0x3e>
 8020186:	4602      	mov	r2, r0
 8020188:	4b28      	ldr	r3, [pc, #160]	@ (802022c <__lshift+0xd0>)
 802018a:	4829      	ldr	r0, [pc, #164]	@ (8020230 <__lshift+0xd4>)
 802018c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020190:	f7fe fed8 	bl	801ef44 <__assert_func>
 8020194:	3101      	adds	r1, #1
 8020196:	005b      	lsls	r3, r3, #1
 8020198:	e7ee      	b.n	8020178 <__lshift+0x1c>
 802019a:	2300      	movs	r3, #0
 802019c:	f100 0114 	add.w	r1, r0, #20
 80201a0:	f100 0210 	add.w	r2, r0, #16
 80201a4:	4618      	mov	r0, r3
 80201a6:	4553      	cmp	r3, sl
 80201a8:	db33      	blt.n	8020212 <__lshift+0xb6>
 80201aa:	6920      	ldr	r0, [r4, #16]
 80201ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80201b0:	f104 0314 	add.w	r3, r4, #20
 80201b4:	f019 091f 	ands.w	r9, r9, #31
 80201b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80201bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80201c0:	d02b      	beq.n	802021a <__lshift+0xbe>
 80201c2:	f1c9 0e20 	rsb	lr, r9, #32
 80201c6:	468a      	mov	sl, r1
 80201c8:	2200      	movs	r2, #0
 80201ca:	6818      	ldr	r0, [r3, #0]
 80201cc:	fa00 f009 	lsl.w	r0, r0, r9
 80201d0:	4310      	orrs	r0, r2
 80201d2:	f84a 0b04 	str.w	r0, [sl], #4
 80201d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80201da:	459c      	cmp	ip, r3
 80201dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80201e0:	d8f3      	bhi.n	80201ca <__lshift+0x6e>
 80201e2:	ebac 0304 	sub.w	r3, ip, r4
 80201e6:	3b15      	subs	r3, #21
 80201e8:	f023 0303 	bic.w	r3, r3, #3
 80201ec:	3304      	adds	r3, #4
 80201ee:	f104 0015 	add.w	r0, r4, #21
 80201f2:	4584      	cmp	ip, r0
 80201f4:	bf38      	it	cc
 80201f6:	2304      	movcc	r3, #4
 80201f8:	50ca      	str	r2, [r1, r3]
 80201fa:	b10a      	cbz	r2, 8020200 <__lshift+0xa4>
 80201fc:	f108 0602 	add.w	r6, r8, #2
 8020200:	3e01      	subs	r6, #1
 8020202:	4638      	mov	r0, r7
 8020204:	612e      	str	r6, [r5, #16]
 8020206:	4621      	mov	r1, r4
 8020208:	f7ff fd90 	bl	801fd2c <_Bfree>
 802020c:	4628      	mov	r0, r5
 802020e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020212:	f842 0f04 	str.w	r0, [r2, #4]!
 8020216:	3301      	adds	r3, #1
 8020218:	e7c5      	b.n	80201a6 <__lshift+0x4a>
 802021a:	3904      	subs	r1, #4
 802021c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020220:	f841 2f04 	str.w	r2, [r1, #4]!
 8020224:	459c      	cmp	ip, r3
 8020226:	d8f9      	bhi.n	802021c <__lshift+0xc0>
 8020228:	e7ea      	b.n	8020200 <__lshift+0xa4>
 802022a:	bf00      	nop
 802022c:	080256a0 	.word	0x080256a0
 8020230:	080256b1 	.word	0x080256b1

08020234 <__mcmp>:
 8020234:	690a      	ldr	r2, [r1, #16]
 8020236:	4603      	mov	r3, r0
 8020238:	6900      	ldr	r0, [r0, #16]
 802023a:	1a80      	subs	r0, r0, r2
 802023c:	b530      	push	{r4, r5, lr}
 802023e:	d10e      	bne.n	802025e <__mcmp+0x2a>
 8020240:	3314      	adds	r3, #20
 8020242:	3114      	adds	r1, #20
 8020244:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020248:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802024c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020250:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8020254:	4295      	cmp	r5, r2
 8020256:	d003      	beq.n	8020260 <__mcmp+0x2c>
 8020258:	d205      	bcs.n	8020266 <__mcmp+0x32>
 802025a:	f04f 30ff 	mov.w	r0, #4294967295
 802025e:	bd30      	pop	{r4, r5, pc}
 8020260:	42a3      	cmp	r3, r4
 8020262:	d3f3      	bcc.n	802024c <__mcmp+0x18>
 8020264:	e7fb      	b.n	802025e <__mcmp+0x2a>
 8020266:	2001      	movs	r0, #1
 8020268:	e7f9      	b.n	802025e <__mcmp+0x2a>
	...

0802026c <__mdiff>:
 802026c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020270:	4689      	mov	r9, r1
 8020272:	4606      	mov	r6, r0
 8020274:	4611      	mov	r1, r2
 8020276:	4648      	mov	r0, r9
 8020278:	4614      	mov	r4, r2
 802027a:	f7ff ffdb 	bl	8020234 <__mcmp>
 802027e:	1e05      	subs	r5, r0, #0
 8020280:	d112      	bne.n	80202a8 <__mdiff+0x3c>
 8020282:	4629      	mov	r1, r5
 8020284:	4630      	mov	r0, r6
 8020286:	f7ff fd11 	bl	801fcac <_Balloc>
 802028a:	4602      	mov	r2, r0
 802028c:	b928      	cbnz	r0, 802029a <__mdiff+0x2e>
 802028e:	4b3f      	ldr	r3, [pc, #252]	@ (802038c <__mdiff+0x120>)
 8020290:	f240 2137 	movw	r1, #567	@ 0x237
 8020294:	483e      	ldr	r0, [pc, #248]	@ (8020390 <__mdiff+0x124>)
 8020296:	f7fe fe55 	bl	801ef44 <__assert_func>
 802029a:	2301      	movs	r3, #1
 802029c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80202a0:	4610      	mov	r0, r2
 80202a2:	b003      	add	sp, #12
 80202a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202a8:	bfbc      	itt	lt
 80202aa:	464b      	movlt	r3, r9
 80202ac:	46a1      	movlt	r9, r4
 80202ae:	4630      	mov	r0, r6
 80202b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80202b4:	bfba      	itte	lt
 80202b6:	461c      	movlt	r4, r3
 80202b8:	2501      	movlt	r5, #1
 80202ba:	2500      	movge	r5, #0
 80202bc:	f7ff fcf6 	bl	801fcac <_Balloc>
 80202c0:	4602      	mov	r2, r0
 80202c2:	b918      	cbnz	r0, 80202cc <__mdiff+0x60>
 80202c4:	4b31      	ldr	r3, [pc, #196]	@ (802038c <__mdiff+0x120>)
 80202c6:	f240 2145 	movw	r1, #581	@ 0x245
 80202ca:	e7e3      	b.n	8020294 <__mdiff+0x28>
 80202cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80202d0:	6926      	ldr	r6, [r4, #16]
 80202d2:	60c5      	str	r5, [r0, #12]
 80202d4:	f109 0310 	add.w	r3, r9, #16
 80202d8:	f109 0514 	add.w	r5, r9, #20
 80202dc:	f104 0e14 	add.w	lr, r4, #20
 80202e0:	f100 0b14 	add.w	fp, r0, #20
 80202e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80202e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80202ec:	9301      	str	r3, [sp, #4]
 80202ee:	46d9      	mov	r9, fp
 80202f0:	f04f 0c00 	mov.w	ip, #0
 80202f4:	9b01      	ldr	r3, [sp, #4]
 80202f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80202fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80202fe:	9301      	str	r3, [sp, #4]
 8020300:	fa1f f38a 	uxth.w	r3, sl
 8020304:	4619      	mov	r1, r3
 8020306:	b283      	uxth	r3, r0
 8020308:	1acb      	subs	r3, r1, r3
 802030a:	0c00      	lsrs	r0, r0, #16
 802030c:	4463      	add	r3, ip
 802030e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8020312:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8020316:	b29b      	uxth	r3, r3
 8020318:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802031c:	4576      	cmp	r6, lr
 802031e:	f849 3b04 	str.w	r3, [r9], #4
 8020322:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020326:	d8e5      	bhi.n	80202f4 <__mdiff+0x88>
 8020328:	1b33      	subs	r3, r6, r4
 802032a:	3b15      	subs	r3, #21
 802032c:	f023 0303 	bic.w	r3, r3, #3
 8020330:	3415      	adds	r4, #21
 8020332:	3304      	adds	r3, #4
 8020334:	42a6      	cmp	r6, r4
 8020336:	bf38      	it	cc
 8020338:	2304      	movcc	r3, #4
 802033a:	441d      	add	r5, r3
 802033c:	445b      	add	r3, fp
 802033e:	461e      	mov	r6, r3
 8020340:	462c      	mov	r4, r5
 8020342:	4544      	cmp	r4, r8
 8020344:	d30e      	bcc.n	8020364 <__mdiff+0xf8>
 8020346:	f108 0103 	add.w	r1, r8, #3
 802034a:	1b49      	subs	r1, r1, r5
 802034c:	f021 0103 	bic.w	r1, r1, #3
 8020350:	3d03      	subs	r5, #3
 8020352:	45a8      	cmp	r8, r5
 8020354:	bf38      	it	cc
 8020356:	2100      	movcc	r1, #0
 8020358:	440b      	add	r3, r1
 802035a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802035e:	b191      	cbz	r1, 8020386 <__mdiff+0x11a>
 8020360:	6117      	str	r7, [r2, #16]
 8020362:	e79d      	b.n	80202a0 <__mdiff+0x34>
 8020364:	f854 1b04 	ldr.w	r1, [r4], #4
 8020368:	46e6      	mov	lr, ip
 802036a:	0c08      	lsrs	r0, r1, #16
 802036c:	fa1c fc81 	uxtah	ip, ip, r1
 8020370:	4471      	add	r1, lr
 8020372:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8020376:	b289      	uxth	r1, r1
 8020378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802037c:	f846 1b04 	str.w	r1, [r6], #4
 8020380:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8020384:	e7dd      	b.n	8020342 <__mdiff+0xd6>
 8020386:	3f01      	subs	r7, #1
 8020388:	e7e7      	b.n	802035a <__mdiff+0xee>
 802038a:	bf00      	nop
 802038c:	080256a0 	.word	0x080256a0
 8020390:	080256b1 	.word	0x080256b1

08020394 <__ulp>:
 8020394:	b082      	sub	sp, #8
 8020396:	ed8d 0b00 	vstr	d0, [sp]
 802039a:	9a01      	ldr	r2, [sp, #4]
 802039c:	4b0f      	ldr	r3, [pc, #60]	@ (80203dc <__ulp+0x48>)
 802039e:	4013      	ands	r3, r2
 80203a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	dc08      	bgt.n	80203ba <__ulp+0x26>
 80203a8:	425b      	negs	r3, r3
 80203aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80203ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80203b2:	da04      	bge.n	80203be <__ulp+0x2a>
 80203b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80203b8:	4113      	asrs	r3, r2
 80203ba:	2200      	movs	r2, #0
 80203bc:	e008      	b.n	80203d0 <__ulp+0x3c>
 80203be:	f1a2 0314 	sub.w	r3, r2, #20
 80203c2:	2b1e      	cmp	r3, #30
 80203c4:	bfda      	itte	le
 80203c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80203ca:	40da      	lsrle	r2, r3
 80203cc:	2201      	movgt	r2, #1
 80203ce:	2300      	movs	r3, #0
 80203d0:	4619      	mov	r1, r3
 80203d2:	4610      	mov	r0, r2
 80203d4:	ec41 0b10 	vmov	d0, r0, r1
 80203d8:	b002      	add	sp, #8
 80203da:	4770      	bx	lr
 80203dc:	7ff00000 	.word	0x7ff00000

080203e0 <__b2d>:
 80203e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203e4:	6906      	ldr	r6, [r0, #16]
 80203e6:	f100 0814 	add.w	r8, r0, #20
 80203ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80203ee:	1f37      	subs	r7, r6, #4
 80203f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80203f4:	4610      	mov	r0, r2
 80203f6:	f7ff fd4b 	bl	801fe90 <__hi0bits>
 80203fa:	f1c0 0320 	rsb	r3, r0, #32
 80203fe:	280a      	cmp	r0, #10
 8020400:	600b      	str	r3, [r1, #0]
 8020402:	491b      	ldr	r1, [pc, #108]	@ (8020470 <__b2d+0x90>)
 8020404:	dc15      	bgt.n	8020432 <__b2d+0x52>
 8020406:	f1c0 0c0b 	rsb	ip, r0, #11
 802040a:	fa22 f30c 	lsr.w	r3, r2, ip
 802040e:	45b8      	cmp	r8, r7
 8020410:	ea43 0501 	orr.w	r5, r3, r1
 8020414:	bf34      	ite	cc
 8020416:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802041a:	2300      	movcs	r3, #0
 802041c:	3015      	adds	r0, #21
 802041e:	fa02 f000 	lsl.w	r0, r2, r0
 8020422:	fa23 f30c 	lsr.w	r3, r3, ip
 8020426:	4303      	orrs	r3, r0
 8020428:	461c      	mov	r4, r3
 802042a:	ec45 4b10 	vmov	d0, r4, r5
 802042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020432:	45b8      	cmp	r8, r7
 8020434:	bf3a      	itte	cc
 8020436:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802043a:	f1a6 0708 	subcc.w	r7, r6, #8
 802043e:	2300      	movcs	r3, #0
 8020440:	380b      	subs	r0, #11
 8020442:	d012      	beq.n	802046a <__b2d+0x8a>
 8020444:	f1c0 0120 	rsb	r1, r0, #32
 8020448:	fa23 f401 	lsr.w	r4, r3, r1
 802044c:	4082      	lsls	r2, r0
 802044e:	4322      	orrs	r2, r4
 8020450:	4547      	cmp	r7, r8
 8020452:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8020456:	bf8c      	ite	hi
 8020458:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802045c:	2200      	movls	r2, #0
 802045e:	4083      	lsls	r3, r0
 8020460:	40ca      	lsrs	r2, r1
 8020462:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8020466:	4313      	orrs	r3, r2
 8020468:	e7de      	b.n	8020428 <__b2d+0x48>
 802046a:	ea42 0501 	orr.w	r5, r2, r1
 802046e:	e7db      	b.n	8020428 <__b2d+0x48>
 8020470:	3ff00000 	.word	0x3ff00000

08020474 <__d2b>:
 8020474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020478:	460f      	mov	r7, r1
 802047a:	2101      	movs	r1, #1
 802047c:	ec59 8b10 	vmov	r8, r9, d0
 8020480:	4616      	mov	r6, r2
 8020482:	f7ff fc13 	bl	801fcac <_Balloc>
 8020486:	4604      	mov	r4, r0
 8020488:	b930      	cbnz	r0, 8020498 <__d2b+0x24>
 802048a:	4602      	mov	r2, r0
 802048c:	4b23      	ldr	r3, [pc, #140]	@ (802051c <__d2b+0xa8>)
 802048e:	4824      	ldr	r0, [pc, #144]	@ (8020520 <__d2b+0xac>)
 8020490:	f240 310f 	movw	r1, #783	@ 0x30f
 8020494:	f7fe fd56 	bl	801ef44 <__assert_func>
 8020498:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802049c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80204a0:	b10d      	cbz	r5, 80204a6 <__d2b+0x32>
 80204a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80204a6:	9301      	str	r3, [sp, #4]
 80204a8:	f1b8 0300 	subs.w	r3, r8, #0
 80204ac:	d023      	beq.n	80204f6 <__d2b+0x82>
 80204ae:	4668      	mov	r0, sp
 80204b0:	9300      	str	r3, [sp, #0]
 80204b2:	f7ff fd0c 	bl	801fece <__lo0bits>
 80204b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80204ba:	b1d0      	cbz	r0, 80204f2 <__d2b+0x7e>
 80204bc:	f1c0 0320 	rsb	r3, r0, #32
 80204c0:	fa02 f303 	lsl.w	r3, r2, r3
 80204c4:	430b      	orrs	r3, r1
 80204c6:	40c2      	lsrs	r2, r0
 80204c8:	6163      	str	r3, [r4, #20]
 80204ca:	9201      	str	r2, [sp, #4]
 80204cc:	9b01      	ldr	r3, [sp, #4]
 80204ce:	61a3      	str	r3, [r4, #24]
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	bf0c      	ite	eq
 80204d4:	2201      	moveq	r2, #1
 80204d6:	2202      	movne	r2, #2
 80204d8:	6122      	str	r2, [r4, #16]
 80204da:	b1a5      	cbz	r5, 8020506 <__d2b+0x92>
 80204dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80204e0:	4405      	add	r5, r0
 80204e2:	603d      	str	r5, [r7, #0]
 80204e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80204e8:	6030      	str	r0, [r6, #0]
 80204ea:	4620      	mov	r0, r4
 80204ec:	b003      	add	sp, #12
 80204ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80204f2:	6161      	str	r1, [r4, #20]
 80204f4:	e7ea      	b.n	80204cc <__d2b+0x58>
 80204f6:	a801      	add	r0, sp, #4
 80204f8:	f7ff fce9 	bl	801fece <__lo0bits>
 80204fc:	9b01      	ldr	r3, [sp, #4]
 80204fe:	6163      	str	r3, [r4, #20]
 8020500:	3020      	adds	r0, #32
 8020502:	2201      	movs	r2, #1
 8020504:	e7e8      	b.n	80204d8 <__d2b+0x64>
 8020506:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802050a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802050e:	6038      	str	r0, [r7, #0]
 8020510:	6918      	ldr	r0, [r3, #16]
 8020512:	f7ff fcbd 	bl	801fe90 <__hi0bits>
 8020516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802051a:	e7e5      	b.n	80204e8 <__d2b+0x74>
 802051c:	080256a0 	.word	0x080256a0
 8020520:	080256b1 	.word	0x080256b1

08020524 <__ratio>:
 8020524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020528:	b085      	sub	sp, #20
 802052a:	e9cd 1000 	strd	r1, r0, [sp]
 802052e:	a902      	add	r1, sp, #8
 8020530:	f7ff ff56 	bl	80203e0 <__b2d>
 8020534:	9800      	ldr	r0, [sp, #0]
 8020536:	a903      	add	r1, sp, #12
 8020538:	ec55 4b10 	vmov	r4, r5, d0
 802053c:	f7ff ff50 	bl	80203e0 <__b2d>
 8020540:	9b01      	ldr	r3, [sp, #4]
 8020542:	6919      	ldr	r1, [r3, #16]
 8020544:	9b00      	ldr	r3, [sp, #0]
 8020546:	691b      	ldr	r3, [r3, #16]
 8020548:	1ac9      	subs	r1, r1, r3
 802054a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802054e:	1a9b      	subs	r3, r3, r2
 8020550:	ec5b ab10 	vmov	sl, fp, d0
 8020554:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020558:	2b00      	cmp	r3, #0
 802055a:	bfce      	itee	gt
 802055c:	462a      	movgt	r2, r5
 802055e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8020562:	465a      	movle	r2, fp
 8020564:	462f      	mov	r7, r5
 8020566:	46d9      	mov	r9, fp
 8020568:	bfcc      	ite	gt
 802056a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802056e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8020572:	464b      	mov	r3, r9
 8020574:	4652      	mov	r2, sl
 8020576:	4620      	mov	r0, r4
 8020578:	4639      	mov	r1, r7
 802057a:	f7e0 f97f 	bl	800087c <__aeabi_ddiv>
 802057e:	ec41 0b10 	vmov	d0, r0, r1
 8020582:	b005      	add	sp, #20
 8020584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020588 <__copybits>:
 8020588:	3901      	subs	r1, #1
 802058a:	b570      	push	{r4, r5, r6, lr}
 802058c:	1149      	asrs	r1, r1, #5
 802058e:	6914      	ldr	r4, [r2, #16]
 8020590:	3101      	adds	r1, #1
 8020592:	f102 0314 	add.w	r3, r2, #20
 8020596:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802059a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802059e:	1f05      	subs	r5, r0, #4
 80205a0:	42a3      	cmp	r3, r4
 80205a2:	d30c      	bcc.n	80205be <__copybits+0x36>
 80205a4:	1aa3      	subs	r3, r4, r2
 80205a6:	3b11      	subs	r3, #17
 80205a8:	f023 0303 	bic.w	r3, r3, #3
 80205ac:	3211      	adds	r2, #17
 80205ae:	42a2      	cmp	r2, r4
 80205b0:	bf88      	it	hi
 80205b2:	2300      	movhi	r3, #0
 80205b4:	4418      	add	r0, r3
 80205b6:	2300      	movs	r3, #0
 80205b8:	4288      	cmp	r0, r1
 80205ba:	d305      	bcc.n	80205c8 <__copybits+0x40>
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	f853 6b04 	ldr.w	r6, [r3], #4
 80205c2:	f845 6f04 	str.w	r6, [r5, #4]!
 80205c6:	e7eb      	b.n	80205a0 <__copybits+0x18>
 80205c8:	f840 3b04 	str.w	r3, [r0], #4
 80205cc:	e7f4      	b.n	80205b8 <__copybits+0x30>

080205ce <__any_on>:
 80205ce:	f100 0214 	add.w	r2, r0, #20
 80205d2:	6900      	ldr	r0, [r0, #16]
 80205d4:	114b      	asrs	r3, r1, #5
 80205d6:	4298      	cmp	r0, r3
 80205d8:	b510      	push	{r4, lr}
 80205da:	db11      	blt.n	8020600 <__any_on+0x32>
 80205dc:	dd0a      	ble.n	80205f4 <__any_on+0x26>
 80205de:	f011 011f 	ands.w	r1, r1, #31
 80205e2:	d007      	beq.n	80205f4 <__any_on+0x26>
 80205e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80205e8:	fa24 f001 	lsr.w	r0, r4, r1
 80205ec:	fa00 f101 	lsl.w	r1, r0, r1
 80205f0:	428c      	cmp	r4, r1
 80205f2:	d10b      	bne.n	802060c <__any_on+0x3e>
 80205f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80205f8:	4293      	cmp	r3, r2
 80205fa:	d803      	bhi.n	8020604 <__any_on+0x36>
 80205fc:	2000      	movs	r0, #0
 80205fe:	bd10      	pop	{r4, pc}
 8020600:	4603      	mov	r3, r0
 8020602:	e7f7      	b.n	80205f4 <__any_on+0x26>
 8020604:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020608:	2900      	cmp	r1, #0
 802060a:	d0f5      	beq.n	80205f8 <__any_on+0x2a>
 802060c:	2001      	movs	r0, #1
 802060e:	e7f6      	b.n	80205fe <__any_on+0x30>

08020610 <sulp>:
 8020610:	b570      	push	{r4, r5, r6, lr}
 8020612:	4604      	mov	r4, r0
 8020614:	460d      	mov	r5, r1
 8020616:	ec45 4b10 	vmov	d0, r4, r5
 802061a:	4616      	mov	r6, r2
 802061c:	f7ff feba 	bl	8020394 <__ulp>
 8020620:	ec51 0b10 	vmov	r0, r1, d0
 8020624:	b17e      	cbz	r6, 8020646 <sulp+0x36>
 8020626:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802062a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802062e:	2b00      	cmp	r3, #0
 8020630:	dd09      	ble.n	8020646 <sulp+0x36>
 8020632:	051b      	lsls	r3, r3, #20
 8020634:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8020638:	2400      	movs	r4, #0
 802063a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802063e:	4622      	mov	r2, r4
 8020640:	462b      	mov	r3, r5
 8020642:	f7df fff1 	bl	8000628 <__aeabi_dmul>
 8020646:	ec41 0b10 	vmov	d0, r0, r1
 802064a:	bd70      	pop	{r4, r5, r6, pc}
 802064c:	0000      	movs	r0, r0
	...

08020650 <_strtod_l>:
 8020650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020654:	b09f      	sub	sp, #124	@ 0x7c
 8020656:	460c      	mov	r4, r1
 8020658:	9217      	str	r2, [sp, #92]	@ 0x5c
 802065a:	2200      	movs	r2, #0
 802065c:	921a      	str	r2, [sp, #104]	@ 0x68
 802065e:	9005      	str	r0, [sp, #20]
 8020660:	f04f 0a00 	mov.w	sl, #0
 8020664:	f04f 0b00 	mov.w	fp, #0
 8020668:	460a      	mov	r2, r1
 802066a:	9219      	str	r2, [sp, #100]	@ 0x64
 802066c:	7811      	ldrb	r1, [r2, #0]
 802066e:	292b      	cmp	r1, #43	@ 0x2b
 8020670:	d04a      	beq.n	8020708 <_strtod_l+0xb8>
 8020672:	d838      	bhi.n	80206e6 <_strtod_l+0x96>
 8020674:	290d      	cmp	r1, #13
 8020676:	d832      	bhi.n	80206de <_strtod_l+0x8e>
 8020678:	2908      	cmp	r1, #8
 802067a:	d832      	bhi.n	80206e2 <_strtod_l+0x92>
 802067c:	2900      	cmp	r1, #0
 802067e:	d03b      	beq.n	80206f8 <_strtod_l+0xa8>
 8020680:	2200      	movs	r2, #0
 8020682:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020684:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8020686:	782a      	ldrb	r2, [r5, #0]
 8020688:	2a30      	cmp	r2, #48	@ 0x30
 802068a:	f040 80b3 	bne.w	80207f4 <_strtod_l+0x1a4>
 802068e:	786a      	ldrb	r2, [r5, #1]
 8020690:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8020694:	2a58      	cmp	r2, #88	@ 0x58
 8020696:	d16e      	bne.n	8020776 <_strtod_l+0x126>
 8020698:	9302      	str	r3, [sp, #8]
 802069a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802069c:	9301      	str	r3, [sp, #4]
 802069e:	ab1a      	add	r3, sp, #104	@ 0x68
 80206a0:	9300      	str	r3, [sp, #0]
 80206a2:	4a8e      	ldr	r2, [pc, #568]	@ (80208dc <_strtod_l+0x28c>)
 80206a4:	9805      	ldr	r0, [sp, #20]
 80206a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80206a8:	a919      	add	r1, sp, #100	@ 0x64
 80206aa:	f001 fa33 	bl	8021b14 <__gethex>
 80206ae:	f010 060f 	ands.w	r6, r0, #15
 80206b2:	4604      	mov	r4, r0
 80206b4:	d005      	beq.n	80206c2 <_strtod_l+0x72>
 80206b6:	2e06      	cmp	r6, #6
 80206b8:	d128      	bne.n	802070c <_strtod_l+0xbc>
 80206ba:	3501      	adds	r5, #1
 80206bc:	2300      	movs	r3, #0
 80206be:	9519      	str	r5, [sp, #100]	@ 0x64
 80206c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80206c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	f040 858e 	bne.w	80211e6 <_strtod_l+0xb96>
 80206ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80206cc:	b1cb      	cbz	r3, 8020702 <_strtod_l+0xb2>
 80206ce:	4652      	mov	r2, sl
 80206d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80206d4:	ec43 2b10 	vmov	d0, r2, r3
 80206d8:	b01f      	add	sp, #124	@ 0x7c
 80206da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206de:	2920      	cmp	r1, #32
 80206e0:	d1ce      	bne.n	8020680 <_strtod_l+0x30>
 80206e2:	3201      	adds	r2, #1
 80206e4:	e7c1      	b.n	802066a <_strtod_l+0x1a>
 80206e6:	292d      	cmp	r1, #45	@ 0x2d
 80206e8:	d1ca      	bne.n	8020680 <_strtod_l+0x30>
 80206ea:	2101      	movs	r1, #1
 80206ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80206ee:	1c51      	adds	r1, r2, #1
 80206f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80206f2:	7852      	ldrb	r2, [r2, #1]
 80206f4:	2a00      	cmp	r2, #0
 80206f6:	d1c5      	bne.n	8020684 <_strtod_l+0x34>
 80206f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80206fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	f040 8570 	bne.w	80211e2 <_strtod_l+0xb92>
 8020702:	4652      	mov	r2, sl
 8020704:	465b      	mov	r3, fp
 8020706:	e7e5      	b.n	80206d4 <_strtod_l+0x84>
 8020708:	2100      	movs	r1, #0
 802070a:	e7ef      	b.n	80206ec <_strtod_l+0x9c>
 802070c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802070e:	b13a      	cbz	r2, 8020720 <_strtod_l+0xd0>
 8020710:	2135      	movs	r1, #53	@ 0x35
 8020712:	a81c      	add	r0, sp, #112	@ 0x70
 8020714:	f7ff ff38 	bl	8020588 <__copybits>
 8020718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802071a:	9805      	ldr	r0, [sp, #20]
 802071c:	f7ff fb06 	bl	801fd2c <_Bfree>
 8020720:	3e01      	subs	r6, #1
 8020722:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020724:	2e04      	cmp	r6, #4
 8020726:	d806      	bhi.n	8020736 <_strtod_l+0xe6>
 8020728:	e8df f006 	tbb	[pc, r6]
 802072c:	201d0314 	.word	0x201d0314
 8020730:	14          	.byte	0x14
 8020731:	00          	.byte	0x00
 8020732:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8020736:	05e1      	lsls	r1, r4, #23
 8020738:	bf48      	it	mi
 802073a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802073e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020742:	0d1b      	lsrs	r3, r3, #20
 8020744:	051b      	lsls	r3, r3, #20
 8020746:	2b00      	cmp	r3, #0
 8020748:	d1bb      	bne.n	80206c2 <_strtod_l+0x72>
 802074a:	f7fe fbb1 	bl	801eeb0 <__errno>
 802074e:	2322      	movs	r3, #34	@ 0x22
 8020750:	6003      	str	r3, [r0, #0]
 8020752:	e7b6      	b.n	80206c2 <_strtod_l+0x72>
 8020754:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8020758:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802075c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8020760:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8020764:	e7e7      	b.n	8020736 <_strtod_l+0xe6>
 8020766:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80208e4 <_strtod_l+0x294>
 802076a:	e7e4      	b.n	8020736 <_strtod_l+0xe6>
 802076c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8020770:	f04f 3aff 	mov.w	sl, #4294967295
 8020774:	e7df      	b.n	8020736 <_strtod_l+0xe6>
 8020776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020778:	1c5a      	adds	r2, r3, #1
 802077a:	9219      	str	r2, [sp, #100]	@ 0x64
 802077c:	785b      	ldrb	r3, [r3, #1]
 802077e:	2b30      	cmp	r3, #48	@ 0x30
 8020780:	d0f9      	beq.n	8020776 <_strtod_l+0x126>
 8020782:	2b00      	cmp	r3, #0
 8020784:	d09d      	beq.n	80206c2 <_strtod_l+0x72>
 8020786:	2301      	movs	r3, #1
 8020788:	9309      	str	r3, [sp, #36]	@ 0x24
 802078a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802078c:	930c      	str	r3, [sp, #48]	@ 0x30
 802078e:	2300      	movs	r3, #0
 8020790:	9308      	str	r3, [sp, #32]
 8020792:	930a      	str	r3, [sp, #40]	@ 0x28
 8020794:	461f      	mov	r7, r3
 8020796:	220a      	movs	r2, #10
 8020798:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802079a:	7805      	ldrb	r5, [r0, #0]
 802079c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80207a0:	b2d9      	uxtb	r1, r3
 80207a2:	2909      	cmp	r1, #9
 80207a4:	d928      	bls.n	80207f8 <_strtod_l+0x1a8>
 80207a6:	494e      	ldr	r1, [pc, #312]	@ (80208e0 <_strtod_l+0x290>)
 80207a8:	2201      	movs	r2, #1
 80207aa:	f001 f8f5 	bl	8021998 <strncmp>
 80207ae:	2800      	cmp	r0, #0
 80207b0:	d032      	beq.n	8020818 <_strtod_l+0x1c8>
 80207b2:	2000      	movs	r0, #0
 80207b4:	462a      	mov	r2, r5
 80207b6:	4681      	mov	r9, r0
 80207b8:	463d      	mov	r5, r7
 80207ba:	4603      	mov	r3, r0
 80207bc:	2a65      	cmp	r2, #101	@ 0x65
 80207be:	d001      	beq.n	80207c4 <_strtod_l+0x174>
 80207c0:	2a45      	cmp	r2, #69	@ 0x45
 80207c2:	d114      	bne.n	80207ee <_strtod_l+0x19e>
 80207c4:	b91d      	cbnz	r5, 80207ce <_strtod_l+0x17e>
 80207c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80207c8:	4302      	orrs	r2, r0
 80207ca:	d095      	beq.n	80206f8 <_strtod_l+0xa8>
 80207cc:	2500      	movs	r5, #0
 80207ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80207d0:	1c62      	adds	r2, r4, #1
 80207d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80207d4:	7862      	ldrb	r2, [r4, #1]
 80207d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80207d8:	d077      	beq.n	80208ca <_strtod_l+0x27a>
 80207da:	2a2d      	cmp	r2, #45	@ 0x2d
 80207dc:	d07b      	beq.n	80208d6 <_strtod_l+0x286>
 80207de:	f04f 0c00 	mov.w	ip, #0
 80207e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80207e6:	2909      	cmp	r1, #9
 80207e8:	f240 8082 	bls.w	80208f0 <_strtod_l+0x2a0>
 80207ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80207ee:	f04f 0800 	mov.w	r8, #0
 80207f2:	e0a2      	b.n	802093a <_strtod_l+0x2ea>
 80207f4:	2300      	movs	r3, #0
 80207f6:	e7c7      	b.n	8020788 <_strtod_l+0x138>
 80207f8:	2f08      	cmp	r7, #8
 80207fa:	bfd5      	itete	le
 80207fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80207fe:	9908      	ldrgt	r1, [sp, #32]
 8020800:	fb02 3301 	mlale	r3, r2, r1, r3
 8020804:	fb02 3301 	mlagt	r3, r2, r1, r3
 8020808:	f100 0001 	add.w	r0, r0, #1
 802080c:	bfd4      	ite	le
 802080e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8020810:	9308      	strgt	r3, [sp, #32]
 8020812:	3701      	adds	r7, #1
 8020814:	9019      	str	r0, [sp, #100]	@ 0x64
 8020816:	e7bf      	b.n	8020798 <_strtod_l+0x148>
 8020818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802081a:	1c5a      	adds	r2, r3, #1
 802081c:	9219      	str	r2, [sp, #100]	@ 0x64
 802081e:	785a      	ldrb	r2, [r3, #1]
 8020820:	b37f      	cbz	r7, 8020882 <_strtod_l+0x232>
 8020822:	4681      	mov	r9, r0
 8020824:	463d      	mov	r5, r7
 8020826:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802082a:	2b09      	cmp	r3, #9
 802082c:	d912      	bls.n	8020854 <_strtod_l+0x204>
 802082e:	2301      	movs	r3, #1
 8020830:	e7c4      	b.n	80207bc <_strtod_l+0x16c>
 8020832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020834:	1c5a      	adds	r2, r3, #1
 8020836:	9219      	str	r2, [sp, #100]	@ 0x64
 8020838:	785a      	ldrb	r2, [r3, #1]
 802083a:	3001      	adds	r0, #1
 802083c:	2a30      	cmp	r2, #48	@ 0x30
 802083e:	d0f8      	beq.n	8020832 <_strtod_l+0x1e2>
 8020840:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8020844:	2b08      	cmp	r3, #8
 8020846:	f200 84d3 	bhi.w	80211f0 <_strtod_l+0xba0>
 802084a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802084c:	930c      	str	r3, [sp, #48]	@ 0x30
 802084e:	4681      	mov	r9, r0
 8020850:	2000      	movs	r0, #0
 8020852:	4605      	mov	r5, r0
 8020854:	3a30      	subs	r2, #48	@ 0x30
 8020856:	f100 0301 	add.w	r3, r0, #1
 802085a:	d02a      	beq.n	80208b2 <_strtod_l+0x262>
 802085c:	4499      	add	r9, r3
 802085e:	eb00 0c05 	add.w	ip, r0, r5
 8020862:	462b      	mov	r3, r5
 8020864:	210a      	movs	r1, #10
 8020866:	4563      	cmp	r3, ip
 8020868:	d10d      	bne.n	8020886 <_strtod_l+0x236>
 802086a:	1c69      	adds	r1, r5, #1
 802086c:	4401      	add	r1, r0
 802086e:	4428      	add	r0, r5
 8020870:	2808      	cmp	r0, #8
 8020872:	dc16      	bgt.n	80208a2 <_strtod_l+0x252>
 8020874:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020876:	230a      	movs	r3, #10
 8020878:	fb03 2300 	mla	r3, r3, r0, r2
 802087c:	930a      	str	r3, [sp, #40]	@ 0x28
 802087e:	2300      	movs	r3, #0
 8020880:	e018      	b.n	80208b4 <_strtod_l+0x264>
 8020882:	4638      	mov	r0, r7
 8020884:	e7da      	b.n	802083c <_strtod_l+0x1ec>
 8020886:	2b08      	cmp	r3, #8
 8020888:	f103 0301 	add.w	r3, r3, #1
 802088c:	dc03      	bgt.n	8020896 <_strtod_l+0x246>
 802088e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020890:	434e      	muls	r6, r1
 8020892:	960a      	str	r6, [sp, #40]	@ 0x28
 8020894:	e7e7      	b.n	8020866 <_strtod_l+0x216>
 8020896:	2b10      	cmp	r3, #16
 8020898:	bfde      	ittt	le
 802089a:	9e08      	ldrle	r6, [sp, #32]
 802089c:	434e      	mulle	r6, r1
 802089e:	9608      	strle	r6, [sp, #32]
 80208a0:	e7e1      	b.n	8020866 <_strtod_l+0x216>
 80208a2:	280f      	cmp	r0, #15
 80208a4:	dceb      	bgt.n	802087e <_strtod_l+0x22e>
 80208a6:	9808      	ldr	r0, [sp, #32]
 80208a8:	230a      	movs	r3, #10
 80208aa:	fb03 2300 	mla	r3, r3, r0, r2
 80208ae:	9308      	str	r3, [sp, #32]
 80208b0:	e7e5      	b.n	802087e <_strtod_l+0x22e>
 80208b2:	4629      	mov	r1, r5
 80208b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80208b6:	1c50      	adds	r0, r2, #1
 80208b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80208ba:	7852      	ldrb	r2, [r2, #1]
 80208bc:	4618      	mov	r0, r3
 80208be:	460d      	mov	r5, r1
 80208c0:	e7b1      	b.n	8020826 <_strtod_l+0x1d6>
 80208c2:	f04f 0900 	mov.w	r9, #0
 80208c6:	2301      	movs	r3, #1
 80208c8:	e77d      	b.n	80207c6 <_strtod_l+0x176>
 80208ca:	f04f 0c00 	mov.w	ip, #0
 80208ce:	1ca2      	adds	r2, r4, #2
 80208d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80208d2:	78a2      	ldrb	r2, [r4, #2]
 80208d4:	e785      	b.n	80207e2 <_strtod_l+0x192>
 80208d6:	f04f 0c01 	mov.w	ip, #1
 80208da:	e7f8      	b.n	80208ce <_strtod_l+0x27e>
 80208dc:	08025820 	.word	0x08025820
 80208e0:	08025808 	.word	0x08025808
 80208e4:	7ff00000 	.word	0x7ff00000
 80208e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80208ea:	1c51      	adds	r1, r2, #1
 80208ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80208ee:	7852      	ldrb	r2, [r2, #1]
 80208f0:	2a30      	cmp	r2, #48	@ 0x30
 80208f2:	d0f9      	beq.n	80208e8 <_strtod_l+0x298>
 80208f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80208f8:	2908      	cmp	r1, #8
 80208fa:	f63f af78 	bhi.w	80207ee <_strtod_l+0x19e>
 80208fe:	3a30      	subs	r2, #48	@ 0x30
 8020900:	920e      	str	r2, [sp, #56]	@ 0x38
 8020902:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020904:	920f      	str	r2, [sp, #60]	@ 0x3c
 8020906:	f04f 080a 	mov.w	r8, #10
 802090a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802090c:	1c56      	adds	r6, r2, #1
 802090e:	9619      	str	r6, [sp, #100]	@ 0x64
 8020910:	7852      	ldrb	r2, [r2, #1]
 8020912:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8020916:	f1be 0f09 	cmp.w	lr, #9
 802091a:	d939      	bls.n	8020990 <_strtod_l+0x340>
 802091c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802091e:	1a76      	subs	r6, r6, r1
 8020920:	2e08      	cmp	r6, #8
 8020922:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8020926:	dc03      	bgt.n	8020930 <_strtod_l+0x2e0>
 8020928:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802092a:	4588      	cmp	r8, r1
 802092c:	bfa8      	it	ge
 802092e:	4688      	movge	r8, r1
 8020930:	f1bc 0f00 	cmp.w	ip, #0
 8020934:	d001      	beq.n	802093a <_strtod_l+0x2ea>
 8020936:	f1c8 0800 	rsb	r8, r8, #0
 802093a:	2d00      	cmp	r5, #0
 802093c:	d14e      	bne.n	80209dc <_strtod_l+0x38c>
 802093e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020940:	4308      	orrs	r0, r1
 8020942:	f47f aebe 	bne.w	80206c2 <_strtod_l+0x72>
 8020946:	2b00      	cmp	r3, #0
 8020948:	f47f aed6 	bne.w	80206f8 <_strtod_l+0xa8>
 802094c:	2a69      	cmp	r2, #105	@ 0x69
 802094e:	d028      	beq.n	80209a2 <_strtod_l+0x352>
 8020950:	dc25      	bgt.n	802099e <_strtod_l+0x34e>
 8020952:	2a49      	cmp	r2, #73	@ 0x49
 8020954:	d025      	beq.n	80209a2 <_strtod_l+0x352>
 8020956:	2a4e      	cmp	r2, #78	@ 0x4e
 8020958:	f47f aece 	bne.w	80206f8 <_strtod_l+0xa8>
 802095c:	499b      	ldr	r1, [pc, #620]	@ (8020bcc <_strtod_l+0x57c>)
 802095e:	a819      	add	r0, sp, #100	@ 0x64
 8020960:	f001 fafa 	bl	8021f58 <__match>
 8020964:	2800      	cmp	r0, #0
 8020966:	f43f aec7 	beq.w	80206f8 <_strtod_l+0xa8>
 802096a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802096c:	781b      	ldrb	r3, [r3, #0]
 802096e:	2b28      	cmp	r3, #40	@ 0x28
 8020970:	d12e      	bne.n	80209d0 <_strtod_l+0x380>
 8020972:	4997      	ldr	r1, [pc, #604]	@ (8020bd0 <_strtod_l+0x580>)
 8020974:	aa1c      	add	r2, sp, #112	@ 0x70
 8020976:	a819      	add	r0, sp, #100	@ 0x64
 8020978:	f001 fb02 	bl	8021f80 <__hexnan>
 802097c:	2805      	cmp	r0, #5
 802097e:	d127      	bne.n	80209d0 <_strtod_l+0x380>
 8020980:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020982:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8020986:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802098a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802098e:	e698      	b.n	80206c2 <_strtod_l+0x72>
 8020990:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020992:	fb08 2101 	mla	r1, r8, r1, r2
 8020996:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802099a:	920e      	str	r2, [sp, #56]	@ 0x38
 802099c:	e7b5      	b.n	802090a <_strtod_l+0x2ba>
 802099e:	2a6e      	cmp	r2, #110	@ 0x6e
 80209a0:	e7da      	b.n	8020958 <_strtod_l+0x308>
 80209a2:	498c      	ldr	r1, [pc, #560]	@ (8020bd4 <_strtod_l+0x584>)
 80209a4:	a819      	add	r0, sp, #100	@ 0x64
 80209a6:	f001 fad7 	bl	8021f58 <__match>
 80209aa:	2800      	cmp	r0, #0
 80209ac:	f43f aea4 	beq.w	80206f8 <_strtod_l+0xa8>
 80209b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80209b2:	4989      	ldr	r1, [pc, #548]	@ (8020bd8 <_strtod_l+0x588>)
 80209b4:	3b01      	subs	r3, #1
 80209b6:	a819      	add	r0, sp, #100	@ 0x64
 80209b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80209ba:	f001 facd 	bl	8021f58 <__match>
 80209be:	b910      	cbnz	r0, 80209c6 <_strtod_l+0x376>
 80209c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80209c2:	3301      	adds	r3, #1
 80209c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80209c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020be8 <_strtod_l+0x598>
 80209ca:	f04f 0a00 	mov.w	sl, #0
 80209ce:	e678      	b.n	80206c2 <_strtod_l+0x72>
 80209d0:	4882      	ldr	r0, [pc, #520]	@ (8020bdc <_strtod_l+0x58c>)
 80209d2:	f001 f815 	bl	8021a00 <nan>
 80209d6:	ec5b ab10 	vmov	sl, fp, d0
 80209da:	e672      	b.n	80206c2 <_strtod_l+0x72>
 80209dc:	eba8 0309 	sub.w	r3, r8, r9
 80209e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80209e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80209e4:	2f00      	cmp	r7, #0
 80209e6:	bf08      	it	eq
 80209e8:	462f      	moveq	r7, r5
 80209ea:	2d10      	cmp	r5, #16
 80209ec:	462c      	mov	r4, r5
 80209ee:	bfa8      	it	ge
 80209f0:	2410      	movge	r4, #16
 80209f2:	f7df fd9f 	bl	8000534 <__aeabi_ui2d>
 80209f6:	2d09      	cmp	r5, #9
 80209f8:	4682      	mov	sl, r0
 80209fa:	468b      	mov	fp, r1
 80209fc:	dc13      	bgt.n	8020a26 <_strtod_l+0x3d6>
 80209fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a00:	2b00      	cmp	r3, #0
 8020a02:	f43f ae5e 	beq.w	80206c2 <_strtod_l+0x72>
 8020a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a08:	dd78      	ble.n	8020afc <_strtod_l+0x4ac>
 8020a0a:	2b16      	cmp	r3, #22
 8020a0c:	dc5f      	bgt.n	8020ace <_strtod_l+0x47e>
 8020a0e:	4974      	ldr	r1, [pc, #464]	@ (8020be0 <_strtod_l+0x590>)
 8020a10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a18:	4652      	mov	r2, sl
 8020a1a:	465b      	mov	r3, fp
 8020a1c:	f7df fe04 	bl	8000628 <__aeabi_dmul>
 8020a20:	4682      	mov	sl, r0
 8020a22:	468b      	mov	fp, r1
 8020a24:	e64d      	b.n	80206c2 <_strtod_l+0x72>
 8020a26:	4b6e      	ldr	r3, [pc, #440]	@ (8020be0 <_strtod_l+0x590>)
 8020a28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020a2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020a30:	f7df fdfa 	bl	8000628 <__aeabi_dmul>
 8020a34:	4682      	mov	sl, r0
 8020a36:	9808      	ldr	r0, [sp, #32]
 8020a38:	468b      	mov	fp, r1
 8020a3a:	f7df fd7b 	bl	8000534 <__aeabi_ui2d>
 8020a3e:	4602      	mov	r2, r0
 8020a40:	460b      	mov	r3, r1
 8020a42:	4650      	mov	r0, sl
 8020a44:	4659      	mov	r1, fp
 8020a46:	f7df fc39 	bl	80002bc <__adddf3>
 8020a4a:	2d0f      	cmp	r5, #15
 8020a4c:	4682      	mov	sl, r0
 8020a4e:	468b      	mov	fp, r1
 8020a50:	ddd5      	ble.n	80209fe <_strtod_l+0x3ae>
 8020a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a54:	1b2c      	subs	r4, r5, r4
 8020a56:	441c      	add	r4, r3
 8020a58:	2c00      	cmp	r4, #0
 8020a5a:	f340 8096 	ble.w	8020b8a <_strtod_l+0x53a>
 8020a5e:	f014 030f 	ands.w	r3, r4, #15
 8020a62:	d00a      	beq.n	8020a7a <_strtod_l+0x42a>
 8020a64:	495e      	ldr	r1, [pc, #376]	@ (8020be0 <_strtod_l+0x590>)
 8020a66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020a6a:	4652      	mov	r2, sl
 8020a6c:	465b      	mov	r3, fp
 8020a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020a72:	f7df fdd9 	bl	8000628 <__aeabi_dmul>
 8020a76:	4682      	mov	sl, r0
 8020a78:	468b      	mov	fp, r1
 8020a7a:	f034 040f 	bics.w	r4, r4, #15
 8020a7e:	d073      	beq.n	8020b68 <_strtod_l+0x518>
 8020a80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8020a84:	dd48      	ble.n	8020b18 <_strtod_l+0x4c8>
 8020a86:	2400      	movs	r4, #0
 8020a88:	46a0      	mov	r8, r4
 8020a8a:	940a      	str	r4, [sp, #40]	@ 0x28
 8020a8c:	46a1      	mov	r9, r4
 8020a8e:	9a05      	ldr	r2, [sp, #20]
 8020a90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020be8 <_strtod_l+0x598>
 8020a94:	2322      	movs	r3, #34	@ 0x22
 8020a96:	6013      	str	r3, [r2, #0]
 8020a98:	f04f 0a00 	mov.w	sl, #0
 8020a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	f43f ae0f 	beq.w	80206c2 <_strtod_l+0x72>
 8020aa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020aa6:	9805      	ldr	r0, [sp, #20]
 8020aa8:	f7ff f940 	bl	801fd2c <_Bfree>
 8020aac:	9805      	ldr	r0, [sp, #20]
 8020aae:	4649      	mov	r1, r9
 8020ab0:	f7ff f93c 	bl	801fd2c <_Bfree>
 8020ab4:	9805      	ldr	r0, [sp, #20]
 8020ab6:	4641      	mov	r1, r8
 8020ab8:	f7ff f938 	bl	801fd2c <_Bfree>
 8020abc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020abe:	9805      	ldr	r0, [sp, #20]
 8020ac0:	f7ff f934 	bl	801fd2c <_Bfree>
 8020ac4:	9805      	ldr	r0, [sp, #20]
 8020ac6:	4621      	mov	r1, r4
 8020ac8:	f7ff f930 	bl	801fd2c <_Bfree>
 8020acc:	e5f9      	b.n	80206c2 <_strtod_l+0x72>
 8020ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ad0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8020ad4:	4293      	cmp	r3, r2
 8020ad6:	dbbc      	blt.n	8020a52 <_strtod_l+0x402>
 8020ad8:	4c41      	ldr	r4, [pc, #260]	@ (8020be0 <_strtod_l+0x590>)
 8020ada:	f1c5 050f 	rsb	r5, r5, #15
 8020ade:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020ae2:	4652      	mov	r2, sl
 8020ae4:	465b      	mov	r3, fp
 8020ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020aea:	f7df fd9d 	bl	8000628 <__aeabi_dmul>
 8020aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020af0:	1b5d      	subs	r5, r3, r5
 8020af2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020af6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020afa:	e78f      	b.n	8020a1c <_strtod_l+0x3cc>
 8020afc:	3316      	adds	r3, #22
 8020afe:	dba8      	blt.n	8020a52 <_strtod_l+0x402>
 8020b00:	4b37      	ldr	r3, [pc, #220]	@ (8020be0 <_strtod_l+0x590>)
 8020b02:	eba9 0808 	sub.w	r8, r9, r8
 8020b06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8020b0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8020b0e:	4650      	mov	r0, sl
 8020b10:	4659      	mov	r1, fp
 8020b12:	f7df feb3 	bl	800087c <__aeabi_ddiv>
 8020b16:	e783      	b.n	8020a20 <_strtod_l+0x3d0>
 8020b18:	4b32      	ldr	r3, [pc, #200]	@ (8020be4 <_strtod_l+0x594>)
 8020b1a:	9308      	str	r3, [sp, #32]
 8020b1c:	2300      	movs	r3, #0
 8020b1e:	1124      	asrs	r4, r4, #4
 8020b20:	4650      	mov	r0, sl
 8020b22:	4659      	mov	r1, fp
 8020b24:	461e      	mov	r6, r3
 8020b26:	2c01      	cmp	r4, #1
 8020b28:	dc21      	bgt.n	8020b6e <_strtod_l+0x51e>
 8020b2a:	b10b      	cbz	r3, 8020b30 <_strtod_l+0x4e0>
 8020b2c:	4682      	mov	sl, r0
 8020b2e:	468b      	mov	fp, r1
 8020b30:	492c      	ldr	r1, [pc, #176]	@ (8020be4 <_strtod_l+0x594>)
 8020b32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8020b36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020b3a:	4652      	mov	r2, sl
 8020b3c:	465b      	mov	r3, fp
 8020b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020b42:	f7df fd71 	bl	8000628 <__aeabi_dmul>
 8020b46:	4b28      	ldr	r3, [pc, #160]	@ (8020be8 <_strtod_l+0x598>)
 8020b48:	460a      	mov	r2, r1
 8020b4a:	400b      	ands	r3, r1
 8020b4c:	4927      	ldr	r1, [pc, #156]	@ (8020bec <_strtod_l+0x59c>)
 8020b4e:	428b      	cmp	r3, r1
 8020b50:	4682      	mov	sl, r0
 8020b52:	d898      	bhi.n	8020a86 <_strtod_l+0x436>
 8020b54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8020b58:	428b      	cmp	r3, r1
 8020b5a:	bf86      	itte	hi
 8020b5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020bf0 <_strtod_l+0x5a0>
 8020b60:	f04f 3aff 	movhi.w	sl, #4294967295
 8020b64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020b68:	2300      	movs	r3, #0
 8020b6a:	9308      	str	r3, [sp, #32]
 8020b6c:	e07a      	b.n	8020c64 <_strtod_l+0x614>
 8020b6e:	07e2      	lsls	r2, r4, #31
 8020b70:	d505      	bpl.n	8020b7e <_strtod_l+0x52e>
 8020b72:	9b08      	ldr	r3, [sp, #32]
 8020b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b78:	f7df fd56 	bl	8000628 <__aeabi_dmul>
 8020b7c:	2301      	movs	r3, #1
 8020b7e:	9a08      	ldr	r2, [sp, #32]
 8020b80:	3208      	adds	r2, #8
 8020b82:	3601      	adds	r6, #1
 8020b84:	1064      	asrs	r4, r4, #1
 8020b86:	9208      	str	r2, [sp, #32]
 8020b88:	e7cd      	b.n	8020b26 <_strtod_l+0x4d6>
 8020b8a:	d0ed      	beq.n	8020b68 <_strtod_l+0x518>
 8020b8c:	4264      	negs	r4, r4
 8020b8e:	f014 020f 	ands.w	r2, r4, #15
 8020b92:	d00a      	beq.n	8020baa <_strtod_l+0x55a>
 8020b94:	4b12      	ldr	r3, [pc, #72]	@ (8020be0 <_strtod_l+0x590>)
 8020b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020b9a:	4650      	mov	r0, sl
 8020b9c:	4659      	mov	r1, fp
 8020b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ba2:	f7df fe6b 	bl	800087c <__aeabi_ddiv>
 8020ba6:	4682      	mov	sl, r0
 8020ba8:	468b      	mov	fp, r1
 8020baa:	1124      	asrs	r4, r4, #4
 8020bac:	d0dc      	beq.n	8020b68 <_strtod_l+0x518>
 8020bae:	2c1f      	cmp	r4, #31
 8020bb0:	dd20      	ble.n	8020bf4 <_strtod_l+0x5a4>
 8020bb2:	2400      	movs	r4, #0
 8020bb4:	46a0      	mov	r8, r4
 8020bb6:	940a      	str	r4, [sp, #40]	@ 0x28
 8020bb8:	46a1      	mov	r9, r4
 8020bba:	9a05      	ldr	r2, [sp, #20]
 8020bbc:	2322      	movs	r3, #34	@ 0x22
 8020bbe:	f04f 0a00 	mov.w	sl, #0
 8020bc2:	f04f 0b00 	mov.w	fp, #0
 8020bc6:	6013      	str	r3, [r2, #0]
 8020bc8:	e768      	b.n	8020a9c <_strtod_l+0x44c>
 8020bca:	bf00      	nop
 8020bcc:	08025562 	.word	0x08025562
 8020bd0:	0802580c 	.word	0x0802580c
 8020bd4:	0802555a 	.word	0x0802555a
 8020bd8:	0802563e 	.word	0x0802563e
 8020bdc:	0802563a 	.word	0x0802563a
 8020be0:	08025740 	.word	0x08025740
 8020be4:	08025718 	.word	0x08025718
 8020be8:	7ff00000 	.word	0x7ff00000
 8020bec:	7ca00000 	.word	0x7ca00000
 8020bf0:	7fefffff 	.word	0x7fefffff
 8020bf4:	f014 0310 	ands.w	r3, r4, #16
 8020bf8:	bf18      	it	ne
 8020bfa:	236a      	movne	r3, #106	@ 0x6a
 8020bfc:	4ea9      	ldr	r6, [pc, #676]	@ (8020ea4 <_strtod_l+0x854>)
 8020bfe:	9308      	str	r3, [sp, #32]
 8020c00:	4650      	mov	r0, sl
 8020c02:	4659      	mov	r1, fp
 8020c04:	2300      	movs	r3, #0
 8020c06:	07e2      	lsls	r2, r4, #31
 8020c08:	d504      	bpl.n	8020c14 <_strtod_l+0x5c4>
 8020c0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020c0e:	f7df fd0b 	bl	8000628 <__aeabi_dmul>
 8020c12:	2301      	movs	r3, #1
 8020c14:	1064      	asrs	r4, r4, #1
 8020c16:	f106 0608 	add.w	r6, r6, #8
 8020c1a:	d1f4      	bne.n	8020c06 <_strtod_l+0x5b6>
 8020c1c:	b10b      	cbz	r3, 8020c22 <_strtod_l+0x5d2>
 8020c1e:	4682      	mov	sl, r0
 8020c20:	468b      	mov	fp, r1
 8020c22:	9b08      	ldr	r3, [sp, #32]
 8020c24:	b1b3      	cbz	r3, 8020c54 <_strtod_l+0x604>
 8020c26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020c2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	4659      	mov	r1, fp
 8020c32:	dd0f      	ble.n	8020c54 <_strtod_l+0x604>
 8020c34:	2b1f      	cmp	r3, #31
 8020c36:	dd55      	ble.n	8020ce4 <_strtod_l+0x694>
 8020c38:	2b34      	cmp	r3, #52	@ 0x34
 8020c3a:	bfde      	ittt	le
 8020c3c:	f04f 33ff 	movle.w	r3, #4294967295
 8020c40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8020c44:	4093      	lslle	r3, r2
 8020c46:	f04f 0a00 	mov.w	sl, #0
 8020c4a:	bfcc      	ite	gt
 8020c4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020c50:	ea03 0b01 	andle.w	fp, r3, r1
 8020c54:	2200      	movs	r2, #0
 8020c56:	2300      	movs	r3, #0
 8020c58:	4650      	mov	r0, sl
 8020c5a:	4659      	mov	r1, fp
 8020c5c:	f7df ff4c 	bl	8000af8 <__aeabi_dcmpeq>
 8020c60:	2800      	cmp	r0, #0
 8020c62:	d1a6      	bne.n	8020bb2 <_strtod_l+0x562>
 8020c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c66:	9300      	str	r3, [sp, #0]
 8020c68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020c6a:	9805      	ldr	r0, [sp, #20]
 8020c6c:	462b      	mov	r3, r5
 8020c6e:	463a      	mov	r2, r7
 8020c70:	f7ff f8c4 	bl	801fdfc <__s2b>
 8020c74:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c76:	2800      	cmp	r0, #0
 8020c78:	f43f af05 	beq.w	8020a86 <_strtod_l+0x436>
 8020c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020c7e:	2a00      	cmp	r2, #0
 8020c80:	eba9 0308 	sub.w	r3, r9, r8
 8020c84:	bfa8      	it	ge
 8020c86:	2300      	movge	r3, #0
 8020c88:	9312      	str	r3, [sp, #72]	@ 0x48
 8020c8a:	2400      	movs	r4, #0
 8020c8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020c90:	9316      	str	r3, [sp, #88]	@ 0x58
 8020c92:	46a0      	mov	r8, r4
 8020c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c96:	9805      	ldr	r0, [sp, #20]
 8020c98:	6859      	ldr	r1, [r3, #4]
 8020c9a:	f7ff f807 	bl	801fcac <_Balloc>
 8020c9e:	4681      	mov	r9, r0
 8020ca0:	2800      	cmp	r0, #0
 8020ca2:	f43f aef4 	beq.w	8020a8e <_strtod_l+0x43e>
 8020ca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020ca8:	691a      	ldr	r2, [r3, #16]
 8020caa:	3202      	adds	r2, #2
 8020cac:	f103 010c 	add.w	r1, r3, #12
 8020cb0:	0092      	lsls	r2, r2, #2
 8020cb2:	300c      	adds	r0, #12
 8020cb4:	f7fe f931 	bl	801ef1a <memcpy>
 8020cb8:	ec4b ab10 	vmov	d0, sl, fp
 8020cbc:	9805      	ldr	r0, [sp, #20]
 8020cbe:	aa1c      	add	r2, sp, #112	@ 0x70
 8020cc0:	a91b      	add	r1, sp, #108	@ 0x6c
 8020cc2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020cc6:	f7ff fbd5 	bl	8020474 <__d2b>
 8020cca:	901a      	str	r0, [sp, #104]	@ 0x68
 8020ccc:	2800      	cmp	r0, #0
 8020cce:	f43f aede 	beq.w	8020a8e <_strtod_l+0x43e>
 8020cd2:	9805      	ldr	r0, [sp, #20]
 8020cd4:	2101      	movs	r1, #1
 8020cd6:	f7ff f927 	bl	801ff28 <__i2b>
 8020cda:	4680      	mov	r8, r0
 8020cdc:	b948      	cbnz	r0, 8020cf2 <_strtod_l+0x6a2>
 8020cde:	f04f 0800 	mov.w	r8, #0
 8020ce2:	e6d4      	b.n	8020a8e <_strtod_l+0x43e>
 8020ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8020ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8020cec:	ea03 0a0a 	and.w	sl, r3, sl
 8020cf0:	e7b0      	b.n	8020c54 <_strtod_l+0x604>
 8020cf2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020cf4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020cf6:	2d00      	cmp	r5, #0
 8020cf8:	bfab      	itete	ge
 8020cfa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020cfc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020cfe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020d00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020d02:	bfac      	ite	ge
 8020d04:	18ef      	addge	r7, r5, r3
 8020d06:	1b5e      	sublt	r6, r3, r5
 8020d08:	9b08      	ldr	r3, [sp, #32]
 8020d0a:	1aed      	subs	r5, r5, r3
 8020d0c:	4415      	add	r5, r2
 8020d0e:	4b66      	ldr	r3, [pc, #408]	@ (8020ea8 <_strtod_l+0x858>)
 8020d10:	3d01      	subs	r5, #1
 8020d12:	429d      	cmp	r5, r3
 8020d14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020d18:	da50      	bge.n	8020dbc <_strtod_l+0x76c>
 8020d1a:	1b5b      	subs	r3, r3, r5
 8020d1c:	2b1f      	cmp	r3, #31
 8020d1e:	eba2 0203 	sub.w	r2, r2, r3
 8020d22:	f04f 0101 	mov.w	r1, #1
 8020d26:	dc3d      	bgt.n	8020da4 <_strtod_l+0x754>
 8020d28:	fa01 f303 	lsl.w	r3, r1, r3
 8020d2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020d2e:	2300      	movs	r3, #0
 8020d30:	9310      	str	r3, [sp, #64]	@ 0x40
 8020d32:	18bd      	adds	r5, r7, r2
 8020d34:	9b08      	ldr	r3, [sp, #32]
 8020d36:	42af      	cmp	r7, r5
 8020d38:	4416      	add	r6, r2
 8020d3a:	441e      	add	r6, r3
 8020d3c:	463b      	mov	r3, r7
 8020d3e:	bfa8      	it	ge
 8020d40:	462b      	movge	r3, r5
 8020d42:	42b3      	cmp	r3, r6
 8020d44:	bfa8      	it	ge
 8020d46:	4633      	movge	r3, r6
 8020d48:	2b00      	cmp	r3, #0
 8020d4a:	bfc2      	ittt	gt
 8020d4c:	1aed      	subgt	r5, r5, r3
 8020d4e:	1af6      	subgt	r6, r6, r3
 8020d50:	1aff      	subgt	r7, r7, r3
 8020d52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	dd16      	ble.n	8020d86 <_strtod_l+0x736>
 8020d58:	4641      	mov	r1, r8
 8020d5a:	9805      	ldr	r0, [sp, #20]
 8020d5c:	461a      	mov	r2, r3
 8020d5e:	f7ff f9a3 	bl	80200a8 <__pow5mult>
 8020d62:	4680      	mov	r8, r0
 8020d64:	2800      	cmp	r0, #0
 8020d66:	d0ba      	beq.n	8020cde <_strtod_l+0x68e>
 8020d68:	4601      	mov	r1, r0
 8020d6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020d6c:	9805      	ldr	r0, [sp, #20]
 8020d6e:	f7ff f8f1 	bl	801ff54 <__multiply>
 8020d72:	900e      	str	r0, [sp, #56]	@ 0x38
 8020d74:	2800      	cmp	r0, #0
 8020d76:	f43f ae8a 	beq.w	8020a8e <_strtod_l+0x43e>
 8020d7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020d7c:	9805      	ldr	r0, [sp, #20]
 8020d7e:	f7fe ffd5 	bl	801fd2c <_Bfree>
 8020d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d84:	931a      	str	r3, [sp, #104]	@ 0x68
 8020d86:	2d00      	cmp	r5, #0
 8020d88:	dc1d      	bgt.n	8020dc6 <_strtod_l+0x776>
 8020d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	dd23      	ble.n	8020dd8 <_strtod_l+0x788>
 8020d90:	4649      	mov	r1, r9
 8020d92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020d94:	9805      	ldr	r0, [sp, #20]
 8020d96:	f7ff f987 	bl	80200a8 <__pow5mult>
 8020d9a:	4681      	mov	r9, r0
 8020d9c:	b9e0      	cbnz	r0, 8020dd8 <_strtod_l+0x788>
 8020d9e:	f04f 0900 	mov.w	r9, #0
 8020da2:	e674      	b.n	8020a8e <_strtod_l+0x43e>
 8020da4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020da8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020dac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020db0:	35e2      	adds	r5, #226	@ 0xe2
 8020db2:	fa01 f305 	lsl.w	r3, r1, r5
 8020db6:	9310      	str	r3, [sp, #64]	@ 0x40
 8020db8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020dba:	e7ba      	b.n	8020d32 <_strtod_l+0x6e2>
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8020dc0:	2301      	movs	r3, #1
 8020dc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020dc4:	e7b5      	b.n	8020d32 <_strtod_l+0x6e2>
 8020dc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020dc8:	9805      	ldr	r0, [sp, #20]
 8020dca:	462a      	mov	r2, r5
 8020dcc:	f7ff f9c6 	bl	802015c <__lshift>
 8020dd0:	901a      	str	r0, [sp, #104]	@ 0x68
 8020dd2:	2800      	cmp	r0, #0
 8020dd4:	d1d9      	bne.n	8020d8a <_strtod_l+0x73a>
 8020dd6:	e65a      	b.n	8020a8e <_strtod_l+0x43e>
 8020dd8:	2e00      	cmp	r6, #0
 8020dda:	dd07      	ble.n	8020dec <_strtod_l+0x79c>
 8020ddc:	4649      	mov	r1, r9
 8020dde:	9805      	ldr	r0, [sp, #20]
 8020de0:	4632      	mov	r2, r6
 8020de2:	f7ff f9bb 	bl	802015c <__lshift>
 8020de6:	4681      	mov	r9, r0
 8020de8:	2800      	cmp	r0, #0
 8020dea:	d0d8      	beq.n	8020d9e <_strtod_l+0x74e>
 8020dec:	2f00      	cmp	r7, #0
 8020dee:	dd08      	ble.n	8020e02 <_strtod_l+0x7b2>
 8020df0:	4641      	mov	r1, r8
 8020df2:	9805      	ldr	r0, [sp, #20]
 8020df4:	463a      	mov	r2, r7
 8020df6:	f7ff f9b1 	bl	802015c <__lshift>
 8020dfa:	4680      	mov	r8, r0
 8020dfc:	2800      	cmp	r0, #0
 8020dfe:	f43f ae46 	beq.w	8020a8e <_strtod_l+0x43e>
 8020e02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020e04:	9805      	ldr	r0, [sp, #20]
 8020e06:	464a      	mov	r2, r9
 8020e08:	f7ff fa30 	bl	802026c <__mdiff>
 8020e0c:	4604      	mov	r4, r0
 8020e0e:	2800      	cmp	r0, #0
 8020e10:	f43f ae3d 	beq.w	8020a8e <_strtod_l+0x43e>
 8020e14:	68c3      	ldr	r3, [r0, #12]
 8020e16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e18:	2300      	movs	r3, #0
 8020e1a:	60c3      	str	r3, [r0, #12]
 8020e1c:	4641      	mov	r1, r8
 8020e1e:	f7ff fa09 	bl	8020234 <__mcmp>
 8020e22:	2800      	cmp	r0, #0
 8020e24:	da46      	bge.n	8020eb4 <_strtod_l+0x864>
 8020e26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e28:	ea53 030a 	orrs.w	r3, r3, sl
 8020e2c:	d16c      	bne.n	8020f08 <_strtod_l+0x8b8>
 8020e2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020e32:	2b00      	cmp	r3, #0
 8020e34:	d168      	bne.n	8020f08 <_strtod_l+0x8b8>
 8020e36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020e3a:	0d1b      	lsrs	r3, r3, #20
 8020e3c:	051b      	lsls	r3, r3, #20
 8020e3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020e42:	d961      	bls.n	8020f08 <_strtod_l+0x8b8>
 8020e44:	6963      	ldr	r3, [r4, #20]
 8020e46:	b913      	cbnz	r3, 8020e4e <_strtod_l+0x7fe>
 8020e48:	6923      	ldr	r3, [r4, #16]
 8020e4a:	2b01      	cmp	r3, #1
 8020e4c:	dd5c      	ble.n	8020f08 <_strtod_l+0x8b8>
 8020e4e:	4621      	mov	r1, r4
 8020e50:	2201      	movs	r2, #1
 8020e52:	9805      	ldr	r0, [sp, #20]
 8020e54:	f7ff f982 	bl	802015c <__lshift>
 8020e58:	4641      	mov	r1, r8
 8020e5a:	4604      	mov	r4, r0
 8020e5c:	f7ff f9ea 	bl	8020234 <__mcmp>
 8020e60:	2800      	cmp	r0, #0
 8020e62:	dd51      	ble.n	8020f08 <_strtod_l+0x8b8>
 8020e64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020e68:	9a08      	ldr	r2, [sp, #32]
 8020e6a:	0d1b      	lsrs	r3, r3, #20
 8020e6c:	051b      	lsls	r3, r3, #20
 8020e6e:	2a00      	cmp	r2, #0
 8020e70:	d06b      	beq.n	8020f4a <_strtod_l+0x8fa>
 8020e72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020e76:	d868      	bhi.n	8020f4a <_strtod_l+0x8fa>
 8020e78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020e7c:	f67f ae9d 	bls.w	8020bba <_strtod_l+0x56a>
 8020e80:	4b0a      	ldr	r3, [pc, #40]	@ (8020eac <_strtod_l+0x85c>)
 8020e82:	4650      	mov	r0, sl
 8020e84:	4659      	mov	r1, fp
 8020e86:	2200      	movs	r2, #0
 8020e88:	f7df fbce 	bl	8000628 <__aeabi_dmul>
 8020e8c:	4b08      	ldr	r3, [pc, #32]	@ (8020eb0 <_strtod_l+0x860>)
 8020e8e:	400b      	ands	r3, r1
 8020e90:	4682      	mov	sl, r0
 8020e92:	468b      	mov	fp, r1
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	f47f ae05 	bne.w	8020aa4 <_strtod_l+0x454>
 8020e9a:	9a05      	ldr	r2, [sp, #20]
 8020e9c:	2322      	movs	r3, #34	@ 0x22
 8020e9e:	6013      	str	r3, [r2, #0]
 8020ea0:	e600      	b.n	8020aa4 <_strtod_l+0x454>
 8020ea2:	bf00      	nop
 8020ea4:	08025838 	.word	0x08025838
 8020ea8:	fffffc02 	.word	0xfffffc02
 8020eac:	39500000 	.word	0x39500000
 8020eb0:	7ff00000 	.word	0x7ff00000
 8020eb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020eb8:	d165      	bne.n	8020f86 <_strtod_l+0x936>
 8020eba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020ebc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020ec0:	b35a      	cbz	r2, 8020f1a <_strtod_l+0x8ca>
 8020ec2:	4a9f      	ldr	r2, [pc, #636]	@ (8021140 <_strtod_l+0xaf0>)
 8020ec4:	4293      	cmp	r3, r2
 8020ec6:	d12b      	bne.n	8020f20 <_strtod_l+0x8d0>
 8020ec8:	9b08      	ldr	r3, [sp, #32]
 8020eca:	4651      	mov	r1, sl
 8020ecc:	b303      	cbz	r3, 8020f10 <_strtod_l+0x8c0>
 8020ece:	4b9d      	ldr	r3, [pc, #628]	@ (8021144 <_strtod_l+0xaf4>)
 8020ed0:	465a      	mov	r2, fp
 8020ed2:	4013      	ands	r3, r2
 8020ed4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8020edc:	d81b      	bhi.n	8020f16 <_strtod_l+0x8c6>
 8020ede:	0d1b      	lsrs	r3, r3, #20
 8020ee0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8020ee8:	4299      	cmp	r1, r3
 8020eea:	d119      	bne.n	8020f20 <_strtod_l+0x8d0>
 8020eec:	4b96      	ldr	r3, [pc, #600]	@ (8021148 <_strtod_l+0xaf8>)
 8020eee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ef0:	429a      	cmp	r2, r3
 8020ef2:	d102      	bne.n	8020efa <_strtod_l+0x8aa>
 8020ef4:	3101      	adds	r1, #1
 8020ef6:	f43f adca 	beq.w	8020a8e <_strtod_l+0x43e>
 8020efa:	4b92      	ldr	r3, [pc, #584]	@ (8021144 <_strtod_l+0xaf4>)
 8020efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020efe:	401a      	ands	r2, r3
 8020f00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020f04:	f04f 0a00 	mov.w	sl, #0
 8020f08:	9b08      	ldr	r3, [sp, #32]
 8020f0a:	2b00      	cmp	r3, #0
 8020f0c:	d1b8      	bne.n	8020e80 <_strtod_l+0x830>
 8020f0e:	e5c9      	b.n	8020aa4 <_strtod_l+0x454>
 8020f10:	f04f 33ff 	mov.w	r3, #4294967295
 8020f14:	e7e8      	b.n	8020ee8 <_strtod_l+0x898>
 8020f16:	4613      	mov	r3, r2
 8020f18:	e7e6      	b.n	8020ee8 <_strtod_l+0x898>
 8020f1a:	ea53 030a 	orrs.w	r3, r3, sl
 8020f1e:	d0a1      	beq.n	8020e64 <_strtod_l+0x814>
 8020f20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020f22:	b1db      	cbz	r3, 8020f5c <_strtod_l+0x90c>
 8020f24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f26:	4213      	tst	r3, r2
 8020f28:	d0ee      	beq.n	8020f08 <_strtod_l+0x8b8>
 8020f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f2c:	9a08      	ldr	r2, [sp, #32]
 8020f2e:	4650      	mov	r0, sl
 8020f30:	4659      	mov	r1, fp
 8020f32:	b1bb      	cbz	r3, 8020f64 <_strtod_l+0x914>
 8020f34:	f7ff fb6c 	bl	8020610 <sulp>
 8020f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020f3c:	ec53 2b10 	vmov	r2, r3, d0
 8020f40:	f7df f9bc 	bl	80002bc <__adddf3>
 8020f44:	4682      	mov	sl, r0
 8020f46:	468b      	mov	fp, r1
 8020f48:	e7de      	b.n	8020f08 <_strtod_l+0x8b8>
 8020f4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8020f4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020f52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020f56:	f04f 3aff 	mov.w	sl, #4294967295
 8020f5a:	e7d5      	b.n	8020f08 <_strtod_l+0x8b8>
 8020f5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020f5e:	ea13 0f0a 	tst.w	r3, sl
 8020f62:	e7e1      	b.n	8020f28 <_strtod_l+0x8d8>
 8020f64:	f7ff fb54 	bl	8020610 <sulp>
 8020f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020f6c:	ec53 2b10 	vmov	r2, r3, d0
 8020f70:	f7df f9a2 	bl	80002b8 <__aeabi_dsub>
 8020f74:	2200      	movs	r2, #0
 8020f76:	2300      	movs	r3, #0
 8020f78:	4682      	mov	sl, r0
 8020f7a:	468b      	mov	fp, r1
 8020f7c:	f7df fdbc 	bl	8000af8 <__aeabi_dcmpeq>
 8020f80:	2800      	cmp	r0, #0
 8020f82:	d0c1      	beq.n	8020f08 <_strtod_l+0x8b8>
 8020f84:	e619      	b.n	8020bba <_strtod_l+0x56a>
 8020f86:	4641      	mov	r1, r8
 8020f88:	4620      	mov	r0, r4
 8020f8a:	f7ff facb 	bl	8020524 <__ratio>
 8020f8e:	ec57 6b10 	vmov	r6, r7, d0
 8020f92:	2200      	movs	r2, #0
 8020f94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020f98:	4630      	mov	r0, r6
 8020f9a:	4639      	mov	r1, r7
 8020f9c:	f7df fdc0 	bl	8000b20 <__aeabi_dcmple>
 8020fa0:	2800      	cmp	r0, #0
 8020fa2:	d06f      	beq.n	8021084 <_strtod_l+0xa34>
 8020fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	d17a      	bne.n	80210a0 <_strtod_l+0xa50>
 8020faa:	f1ba 0f00 	cmp.w	sl, #0
 8020fae:	d158      	bne.n	8021062 <_strtod_l+0xa12>
 8020fb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d15a      	bne.n	8021070 <_strtod_l+0xa20>
 8020fba:	4b64      	ldr	r3, [pc, #400]	@ (802114c <_strtod_l+0xafc>)
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	4630      	mov	r0, r6
 8020fc0:	4639      	mov	r1, r7
 8020fc2:	f7df fda3 	bl	8000b0c <__aeabi_dcmplt>
 8020fc6:	2800      	cmp	r0, #0
 8020fc8:	d159      	bne.n	802107e <_strtod_l+0xa2e>
 8020fca:	4630      	mov	r0, r6
 8020fcc:	4639      	mov	r1, r7
 8020fce:	4b60      	ldr	r3, [pc, #384]	@ (8021150 <_strtod_l+0xb00>)
 8020fd0:	2200      	movs	r2, #0
 8020fd2:	f7df fb29 	bl	8000628 <__aeabi_dmul>
 8020fd6:	4606      	mov	r6, r0
 8020fd8:	460f      	mov	r7, r1
 8020fda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020fde:	9606      	str	r6, [sp, #24]
 8020fe0:	9307      	str	r3, [sp, #28]
 8020fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020fe6:	4d57      	ldr	r5, [pc, #348]	@ (8021144 <_strtod_l+0xaf4>)
 8020fe8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020fee:	401d      	ands	r5, r3
 8020ff0:	4b58      	ldr	r3, [pc, #352]	@ (8021154 <_strtod_l+0xb04>)
 8020ff2:	429d      	cmp	r5, r3
 8020ff4:	f040 80b2 	bne.w	802115c <_strtod_l+0xb0c>
 8020ff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020ffa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020ffe:	ec4b ab10 	vmov	d0, sl, fp
 8021002:	f7ff f9c7 	bl	8020394 <__ulp>
 8021006:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802100a:	ec51 0b10 	vmov	r0, r1, d0
 802100e:	f7df fb0b 	bl	8000628 <__aeabi_dmul>
 8021012:	4652      	mov	r2, sl
 8021014:	465b      	mov	r3, fp
 8021016:	f7df f951 	bl	80002bc <__adddf3>
 802101a:	460b      	mov	r3, r1
 802101c:	4949      	ldr	r1, [pc, #292]	@ (8021144 <_strtod_l+0xaf4>)
 802101e:	4a4e      	ldr	r2, [pc, #312]	@ (8021158 <_strtod_l+0xb08>)
 8021020:	4019      	ands	r1, r3
 8021022:	4291      	cmp	r1, r2
 8021024:	4682      	mov	sl, r0
 8021026:	d942      	bls.n	80210ae <_strtod_l+0xa5e>
 8021028:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802102a:	4b47      	ldr	r3, [pc, #284]	@ (8021148 <_strtod_l+0xaf8>)
 802102c:	429a      	cmp	r2, r3
 802102e:	d103      	bne.n	8021038 <_strtod_l+0x9e8>
 8021030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021032:	3301      	adds	r3, #1
 8021034:	f43f ad2b 	beq.w	8020a8e <_strtod_l+0x43e>
 8021038:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8021148 <_strtod_l+0xaf8>
 802103c:	f04f 3aff 	mov.w	sl, #4294967295
 8021040:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8021042:	9805      	ldr	r0, [sp, #20]
 8021044:	f7fe fe72 	bl	801fd2c <_Bfree>
 8021048:	9805      	ldr	r0, [sp, #20]
 802104a:	4649      	mov	r1, r9
 802104c:	f7fe fe6e 	bl	801fd2c <_Bfree>
 8021050:	9805      	ldr	r0, [sp, #20]
 8021052:	4641      	mov	r1, r8
 8021054:	f7fe fe6a 	bl	801fd2c <_Bfree>
 8021058:	9805      	ldr	r0, [sp, #20]
 802105a:	4621      	mov	r1, r4
 802105c:	f7fe fe66 	bl	801fd2c <_Bfree>
 8021060:	e618      	b.n	8020c94 <_strtod_l+0x644>
 8021062:	f1ba 0f01 	cmp.w	sl, #1
 8021066:	d103      	bne.n	8021070 <_strtod_l+0xa20>
 8021068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802106a:	2b00      	cmp	r3, #0
 802106c:	f43f ada5 	beq.w	8020bba <_strtod_l+0x56a>
 8021070:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8021120 <_strtod_l+0xad0>
 8021074:	4f35      	ldr	r7, [pc, #212]	@ (802114c <_strtod_l+0xafc>)
 8021076:	ed8d 7b06 	vstr	d7, [sp, #24]
 802107a:	2600      	movs	r6, #0
 802107c:	e7b1      	b.n	8020fe2 <_strtod_l+0x992>
 802107e:	4f34      	ldr	r7, [pc, #208]	@ (8021150 <_strtod_l+0xb00>)
 8021080:	2600      	movs	r6, #0
 8021082:	e7aa      	b.n	8020fda <_strtod_l+0x98a>
 8021084:	4b32      	ldr	r3, [pc, #200]	@ (8021150 <_strtod_l+0xb00>)
 8021086:	4630      	mov	r0, r6
 8021088:	4639      	mov	r1, r7
 802108a:	2200      	movs	r2, #0
 802108c:	f7df facc 	bl	8000628 <__aeabi_dmul>
 8021090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021092:	4606      	mov	r6, r0
 8021094:	460f      	mov	r7, r1
 8021096:	2b00      	cmp	r3, #0
 8021098:	d09f      	beq.n	8020fda <_strtod_l+0x98a>
 802109a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802109e:	e7a0      	b.n	8020fe2 <_strtod_l+0x992>
 80210a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8021128 <_strtod_l+0xad8>
 80210a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80210a8:	ec57 6b17 	vmov	r6, r7, d7
 80210ac:	e799      	b.n	8020fe2 <_strtod_l+0x992>
 80210ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80210b2:	9b08      	ldr	r3, [sp, #32]
 80210b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d1c1      	bne.n	8021040 <_strtod_l+0x9f0>
 80210bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80210c0:	0d1b      	lsrs	r3, r3, #20
 80210c2:	051b      	lsls	r3, r3, #20
 80210c4:	429d      	cmp	r5, r3
 80210c6:	d1bb      	bne.n	8021040 <_strtod_l+0x9f0>
 80210c8:	4630      	mov	r0, r6
 80210ca:	4639      	mov	r1, r7
 80210cc:	f7df fe0c 	bl	8000ce8 <__aeabi_d2lz>
 80210d0:	f7df fa7c 	bl	80005cc <__aeabi_l2d>
 80210d4:	4602      	mov	r2, r0
 80210d6:	460b      	mov	r3, r1
 80210d8:	4630      	mov	r0, r6
 80210da:	4639      	mov	r1, r7
 80210dc:	f7df f8ec 	bl	80002b8 <__aeabi_dsub>
 80210e0:	460b      	mov	r3, r1
 80210e2:	4602      	mov	r2, r0
 80210e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80210e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80210ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210ee:	ea46 060a 	orr.w	r6, r6, sl
 80210f2:	431e      	orrs	r6, r3
 80210f4:	d06f      	beq.n	80211d6 <_strtod_l+0xb86>
 80210f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8021130 <_strtod_l+0xae0>)
 80210f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210fc:	f7df fd06 	bl	8000b0c <__aeabi_dcmplt>
 8021100:	2800      	cmp	r0, #0
 8021102:	f47f accf 	bne.w	8020aa4 <_strtod_l+0x454>
 8021106:	a30c      	add	r3, pc, #48	@ (adr r3, 8021138 <_strtod_l+0xae8>)
 8021108:	e9d3 2300 	ldrd	r2, r3, [r3]
 802110c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8021110:	f7df fd1a 	bl	8000b48 <__aeabi_dcmpgt>
 8021114:	2800      	cmp	r0, #0
 8021116:	d093      	beq.n	8021040 <_strtod_l+0x9f0>
 8021118:	e4c4      	b.n	8020aa4 <_strtod_l+0x454>
 802111a:	bf00      	nop
 802111c:	f3af 8000 	nop.w
 8021120:	00000000 	.word	0x00000000
 8021124:	bff00000 	.word	0xbff00000
 8021128:	00000000 	.word	0x00000000
 802112c:	3ff00000 	.word	0x3ff00000
 8021130:	94a03595 	.word	0x94a03595
 8021134:	3fdfffff 	.word	0x3fdfffff
 8021138:	35afe535 	.word	0x35afe535
 802113c:	3fe00000 	.word	0x3fe00000
 8021140:	000fffff 	.word	0x000fffff
 8021144:	7ff00000 	.word	0x7ff00000
 8021148:	7fefffff 	.word	0x7fefffff
 802114c:	3ff00000 	.word	0x3ff00000
 8021150:	3fe00000 	.word	0x3fe00000
 8021154:	7fe00000 	.word	0x7fe00000
 8021158:	7c9fffff 	.word	0x7c9fffff
 802115c:	9b08      	ldr	r3, [sp, #32]
 802115e:	b323      	cbz	r3, 80211aa <_strtod_l+0xb5a>
 8021160:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8021164:	d821      	bhi.n	80211aa <_strtod_l+0xb5a>
 8021166:	a328      	add	r3, pc, #160	@ (adr r3, 8021208 <_strtod_l+0xbb8>)
 8021168:	e9d3 2300 	ldrd	r2, r3, [r3]
 802116c:	4630      	mov	r0, r6
 802116e:	4639      	mov	r1, r7
 8021170:	f7df fcd6 	bl	8000b20 <__aeabi_dcmple>
 8021174:	b1a0      	cbz	r0, 80211a0 <_strtod_l+0xb50>
 8021176:	4639      	mov	r1, r7
 8021178:	4630      	mov	r0, r6
 802117a:	f7df fd2d 	bl	8000bd8 <__aeabi_d2uiz>
 802117e:	2801      	cmp	r0, #1
 8021180:	bf38      	it	cc
 8021182:	2001      	movcc	r0, #1
 8021184:	f7df f9d6 	bl	8000534 <__aeabi_ui2d>
 8021188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802118a:	4606      	mov	r6, r0
 802118c:	460f      	mov	r7, r1
 802118e:	b9fb      	cbnz	r3, 80211d0 <_strtod_l+0xb80>
 8021190:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8021194:	9014      	str	r0, [sp, #80]	@ 0x50
 8021196:	9315      	str	r3, [sp, #84]	@ 0x54
 8021198:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 802119c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80211a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80211a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80211a6:	1b5b      	subs	r3, r3, r5
 80211a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80211aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80211ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80211b2:	f7ff f8ef 	bl	8020394 <__ulp>
 80211b6:	4650      	mov	r0, sl
 80211b8:	ec53 2b10 	vmov	r2, r3, d0
 80211bc:	4659      	mov	r1, fp
 80211be:	f7df fa33 	bl	8000628 <__aeabi_dmul>
 80211c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80211c6:	f7df f879 	bl	80002bc <__adddf3>
 80211ca:	4682      	mov	sl, r0
 80211cc:	468b      	mov	fp, r1
 80211ce:	e770      	b.n	80210b2 <_strtod_l+0xa62>
 80211d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80211d4:	e7e0      	b.n	8021198 <_strtod_l+0xb48>
 80211d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8021210 <_strtod_l+0xbc0>)
 80211d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211dc:	f7df fc96 	bl	8000b0c <__aeabi_dcmplt>
 80211e0:	e798      	b.n	8021114 <_strtod_l+0xac4>
 80211e2:	2300      	movs	r3, #0
 80211e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80211e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80211e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80211ea:	6013      	str	r3, [r2, #0]
 80211ec:	f7ff ba6d 	b.w	80206ca <_strtod_l+0x7a>
 80211f0:	2a65      	cmp	r2, #101	@ 0x65
 80211f2:	f43f ab66 	beq.w	80208c2 <_strtod_l+0x272>
 80211f6:	2a45      	cmp	r2, #69	@ 0x45
 80211f8:	f43f ab63 	beq.w	80208c2 <_strtod_l+0x272>
 80211fc:	2301      	movs	r3, #1
 80211fe:	f7ff bb9e 	b.w	802093e <_strtod_l+0x2ee>
 8021202:	bf00      	nop
 8021204:	f3af 8000 	nop.w
 8021208:	ffc00000 	.word	0xffc00000
 802120c:	41dfffff 	.word	0x41dfffff
 8021210:	94a03595 	.word	0x94a03595
 8021214:	3fcfffff 	.word	0x3fcfffff

08021218 <_strtod_r>:
 8021218:	4b01      	ldr	r3, [pc, #4]	@ (8021220 <_strtod_r+0x8>)
 802121a:	f7ff ba19 	b.w	8020650 <_strtod_l>
 802121e:	bf00      	nop
 8021220:	20000198 	.word	0x20000198

08021224 <__ssputs_r>:
 8021224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021228:	688e      	ldr	r6, [r1, #8]
 802122a:	461f      	mov	r7, r3
 802122c:	42be      	cmp	r6, r7
 802122e:	680b      	ldr	r3, [r1, #0]
 8021230:	4682      	mov	sl, r0
 8021232:	460c      	mov	r4, r1
 8021234:	4690      	mov	r8, r2
 8021236:	d82d      	bhi.n	8021294 <__ssputs_r+0x70>
 8021238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802123c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021240:	d026      	beq.n	8021290 <__ssputs_r+0x6c>
 8021242:	6965      	ldr	r5, [r4, #20]
 8021244:	6909      	ldr	r1, [r1, #16]
 8021246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802124a:	eba3 0901 	sub.w	r9, r3, r1
 802124e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021252:	1c7b      	adds	r3, r7, #1
 8021254:	444b      	add	r3, r9
 8021256:	106d      	asrs	r5, r5, #1
 8021258:	429d      	cmp	r5, r3
 802125a:	bf38      	it	cc
 802125c:	461d      	movcc	r5, r3
 802125e:	0553      	lsls	r3, r2, #21
 8021260:	d527      	bpl.n	80212b2 <__ssputs_r+0x8e>
 8021262:	4629      	mov	r1, r5
 8021264:	f7fc faee 	bl	801d844 <_malloc_r>
 8021268:	4606      	mov	r6, r0
 802126a:	b360      	cbz	r0, 80212c6 <__ssputs_r+0xa2>
 802126c:	6921      	ldr	r1, [r4, #16]
 802126e:	464a      	mov	r2, r9
 8021270:	f7fd fe53 	bl	801ef1a <memcpy>
 8021274:	89a3      	ldrh	r3, [r4, #12]
 8021276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802127a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802127e:	81a3      	strh	r3, [r4, #12]
 8021280:	6126      	str	r6, [r4, #16]
 8021282:	6165      	str	r5, [r4, #20]
 8021284:	444e      	add	r6, r9
 8021286:	eba5 0509 	sub.w	r5, r5, r9
 802128a:	6026      	str	r6, [r4, #0]
 802128c:	60a5      	str	r5, [r4, #8]
 802128e:	463e      	mov	r6, r7
 8021290:	42be      	cmp	r6, r7
 8021292:	d900      	bls.n	8021296 <__ssputs_r+0x72>
 8021294:	463e      	mov	r6, r7
 8021296:	6820      	ldr	r0, [r4, #0]
 8021298:	4632      	mov	r2, r6
 802129a:	4641      	mov	r1, r8
 802129c:	f7fd fd0c 	bl	801ecb8 <memmove>
 80212a0:	68a3      	ldr	r3, [r4, #8]
 80212a2:	1b9b      	subs	r3, r3, r6
 80212a4:	60a3      	str	r3, [r4, #8]
 80212a6:	6823      	ldr	r3, [r4, #0]
 80212a8:	4433      	add	r3, r6
 80212aa:	6023      	str	r3, [r4, #0]
 80212ac:	2000      	movs	r0, #0
 80212ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212b2:	462a      	mov	r2, r5
 80212b4:	f000 ff11 	bl	80220da <_realloc_r>
 80212b8:	4606      	mov	r6, r0
 80212ba:	2800      	cmp	r0, #0
 80212bc:	d1e0      	bne.n	8021280 <__ssputs_r+0x5c>
 80212be:	6921      	ldr	r1, [r4, #16]
 80212c0:	4650      	mov	r0, sl
 80212c2:	f7fe fca9 	bl	801fc18 <_free_r>
 80212c6:	230c      	movs	r3, #12
 80212c8:	f8ca 3000 	str.w	r3, [sl]
 80212cc:	89a3      	ldrh	r3, [r4, #12]
 80212ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80212d2:	81a3      	strh	r3, [r4, #12]
 80212d4:	f04f 30ff 	mov.w	r0, #4294967295
 80212d8:	e7e9      	b.n	80212ae <__ssputs_r+0x8a>
	...

080212dc <_svfiprintf_r>:
 80212dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212e0:	4698      	mov	r8, r3
 80212e2:	898b      	ldrh	r3, [r1, #12]
 80212e4:	061b      	lsls	r3, r3, #24
 80212e6:	b09d      	sub	sp, #116	@ 0x74
 80212e8:	4607      	mov	r7, r0
 80212ea:	460d      	mov	r5, r1
 80212ec:	4614      	mov	r4, r2
 80212ee:	d510      	bpl.n	8021312 <_svfiprintf_r+0x36>
 80212f0:	690b      	ldr	r3, [r1, #16]
 80212f2:	b973      	cbnz	r3, 8021312 <_svfiprintf_r+0x36>
 80212f4:	2140      	movs	r1, #64	@ 0x40
 80212f6:	f7fc faa5 	bl	801d844 <_malloc_r>
 80212fa:	6028      	str	r0, [r5, #0]
 80212fc:	6128      	str	r0, [r5, #16]
 80212fe:	b930      	cbnz	r0, 802130e <_svfiprintf_r+0x32>
 8021300:	230c      	movs	r3, #12
 8021302:	603b      	str	r3, [r7, #0]
 8021304:	f04f 30ff 	mov.w	r0, #4294967295
 8021308:	b01d      	add	sp, #116	@ 0x74
 802130a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802130e:	2340      	movs	r3, #64	@ 0x40
 8021310:	616b      	str	r3, [r5, #20]
 8021312:	2300      	movs	r3, #0
 8021314:	9309      	str	r3, [sp, #36]	@ 0x24
 8021316:	2320      	movs	r3, #32
 8021318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802131c:	f8cd 800c 	str.w	r8, [sp, #12]
 8021320:	2330      	movs	r3, #48	@ 0x30
 8021322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80214c0 <_svfiprintf_r+0x1e4>
 8021326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802132a:	f04f 0901 	mov.w	r9, #1
 802132e:	4623      	mov	r3, r4
 8021330:	469a      	mov	sl, r3
 8021332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021336:	b10a      	cbz	r2, 802133c <_svfiprintf_r+0x60>
 8021338:	2a25      	cmp	r2, #37	@ 0x25
 802133a:	d1f9      	bne.n	8021330 <_svfiprintf_r+0x54>
 802133c:	ebba 0b04 	subs.w	fp, sl, r4
 8021340:	d00b      	beq.n	802135a <_svfiprintf_r+0x7e>
 8021342:	465b      	mov	r3, fp
 8021344:	4622      	mov	r2, r4
 8021346:	4629      	mov	r1, r5
 8021348:	4638      	mov	r0, r7
 802134a:	f7ff ff6b 	bl	8021224 <__ssputs_r>
 802134e:	3001      	adds	r0, #1
 8021350:	f000 80a7 	beq.w	80214a2 <_svfiprintf_r+0x1c6>
 8021354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021356:	445a      	add	r2, fp
 8021358:	9209      	str	r2, [sp, #36]	@ 0x24
 802135a:	f89a 3000 	ldrb.w	r3, [sl]
 802135e:	2b00      	cmp	r3, #0
 8021360:	f000 809f 	beq.w	80214a2 <_svfiprintf_r+0x1c6>
 8021364:	2300      	movs	r3, #0
 8021366:	f04f 32ff 	mov.w	r2, #4294967295
 802136a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802136e:	f10a 0a01 	add.w	sl, sl, #1
 8021372:	9304      	str	r3, [sp, #16]
 8021374:	9307      	str	r3, [sp, #28]
 8021376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802137a:	931a      	str	r3, [sp, #104]	@ 0x68
 802137c:	4654      	mov	r4, sl
 802137e:	2205      	movs	r2, #5
 8021380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021384:	484e      	ldr	r0, [pc, #312]	@ (80214c0 <_svfiprintf_r+0x1e4>)
 8021386:	f7de ff3b 	bl	8000200 <memchr>
 802138a:	9a04      	ldr	r2, [sp, #16]
 802138c:	b9d8      	cbnz	r0, 80213c6 <_svfiprintf_r+0xea>
 802138e:	06d0      	lsls	r0, r2, #27
 8021390:	bf44      	itt	mi
 8021392:	2320      	movmi	r3, #32
 8021394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021398:	0711      	lsls	r1, r2, #28
 802139a:	bf44      	itt	mi
 802139c:	232b      	movmi	r3, #43	@ 0x2b
 802139e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80213a2:	f89a 3000 	ldrb.w	r3, [sl]
 80213a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80213a8:	d015      	beq.n	80213d6 <_svfiprintf_r+0xfa>
 80213aa:	9a07      	ldr	r2, [sp, #28]
 80213ac:	4654      	mov	r4, sl
 80213ae:	2000      	movs	r0, #0
 80213b0:	f04f 0c0a 	mov.w	ip, #10
 80213b4:	4621      	mov	r1, r4
 80213b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80213ba:	3b30      	subs	r3, #48	@ 0x30
 80213bc:	2b09      	cmp	r3, #9
 80213be:	d94b      	bls.n	8021458 <_svfiprintf_r+0x17c>
 80213c0:	b1b0      	cbz	r0, 80213f0 <_svfiprintf_r+0x114>
 80213c2:	9207      	str	r2, [sp, #28]
 80213c4:	e014      	b.n	80213f0 <_svfiprintf_r+0x114>
 80213c6:	eba0 0308 	sub.w	r3, r0, r8
 80213ca:	fa09 f303 	lsl.w	r3, r9, r3
 80213ce:	4313      	orrs	r3, r2
 80213d0:	9304      	str	r3, [sp, #16]
 80213d2:	46a2      	mov	sl, r4
 80213d4:	e7d2      	b.n	802137c <_svfiprintf_r+0xa0>
 80213d6:	9b03      	ldr	r3, [sp, #12]
 80213d8:	1d19      	adds	r1, r3, #4
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	9103      	str	r1, [sp, #12]
 80213de:	2b00      	cmp	r3, #0
 80213e0:	bfbb      	ittet	lt
 80213e2:	425b      	neglt	r3, r3
 80213e4:	f042 0202 	orrlt.w	r2, r2, #2
 80213e8:	9307      	strge	r3, [sp, #28]
 80213ea:	9307      	strlt	r3, [sp, #28]
 80213ec:	bfb8      	it	lt
 80213ee:	9204      	strlt	r2, [sp, #16]
 80213f0:	7823      	ldrb	r3, [r4, #0]
 80213f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80213f4:	d10a      	bne.n	802140c <_svfiprintf_r+0x130>
 80213f6:	7863      	ldrb	r3, [r4, #1]
 80213f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80213fa:	d132      	bne.n	8021462 <_svfiprintf_r+0x186>
 80213fc:	9b03      	ldr	r3, [sp, #12]
 80213fe:	1d1a      	adds	r2, r3, #4
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	9203      	str	r2, [sp, #12]
 8021404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021408:	3402      	adds	r4, #2
 802140a:	9305      	str	r3, [sp, #20]
 802140c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80214d0 <_svfiprintf_r+0x1f4>
 8021410:	7821      	ldrb	r1, [r4, #0]
 8021412:	2203      	movs	r2, #3
 8021414:	4650      	mov	r0, sl
 8021416:	f7de fef3 	bl	8000200 <memchr>
 802141a:	b138      	cbz	r0, 802142c <_svfiprintf_r+0x150>
 802141c:	9b04      	ldr	r3, [sp, #16]
 802141e:	eba0 000a 	sub.w	r0, r0, sl
 8021422:	2240      	movs	r2, #64	@ 0x40
 8021424:	4082      	lsls	r2, r0
 8021426:	4313      	orrs	r3, r2
 8021428:	3401      	adds	r4, #1
 802142a:	9304      	str	r3, [sp, #16]
 802142c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021430:	4824      	ldr	r0, [pc, #144]	@ (80214c4 <_svfiprintf_r+0x1e8>)
 8021432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021436:	2206      	movs	r2, #6
 8021438:	f7de fee2 	bl	8000200 <memchr>
 802143c:	2800      	cmp	r0, #0
 802143e:	d036      	beq.n	80214ae <_svfiprintf_r+0x1d2>
 8021440:	4b21      	ldr	r3, [pc, #132]	@ (80214c8 <_svfiprintf_r+0x1ec>)
 8021442:	bb1b      	cbnz	r3, 802148c <_svfiprintf_r+0x1b0>
 8021444:	9b03      	ldr	r3, [sp, #12]
 8021446:	3307      	adds	r3, #7
 8021448:	f023 0307 	bic.w	r3, r3, #7
 802144c:	3308      	adds	r3, #8
 802144e:	9303      	str	r3, [sp, #12]
 8021450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021452:	4433      	add	r3, r6
 8021454:	9309      	str	r3, [sp, #36]	@ 0x24
 8021456:	e76a      	b.n	802132e <_svfiprintf_r+0x52>
 8021458:	fb0c 3202 	mla	r2, ip, r2, r3
 802145c:	460c      	mov	r4, r1
 802145e:	2001      	movs	r0, #1
 8021460:	e7a8      	b.n	80213b4 <_svfiprintf_r+0xd8>
 8021462:	2300      	movs	r3, #0
 8021464:	3401      	adds	r4, #1
 8021466:	9305      	str	r3, [sp, #20]
 8021468:	4619      	mov	r1, r3
 802146a:	f04f 0c0a 	mov.w	ip, #10
 802146e:	4620      	mov	r0, r4
 8021470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021474:	3a30      	subs	r2, #48	@ 0x30
 8021476:	2a09      	cmp	r2, #9
 8021478:	d903      	bls.n	8021482 <_svfiprintf_r+0x1a6>
 802147a:	2b00      	cmp	r3, #0
 802147c:	d0c6      	beq.n	802140c <_svfiprintf_r+0x130>
 802147e:	9105      	str	r1, [sp, #20]
 8021480:	e7c4      	b.n	802140c <_svfiprintf_r+0x130>
 8021482:	fb0c 2101 	mla	r1, ip, r1, r2
 8021486:	4604      	mov	r4, r0
 8021488:	2301      	movs	r3, #1
 802148a:	e7f0      	b.n	802146e <_svfiprintf_r+0x192>
 802148c:	ab03      	add	r3, sp, #12
 802148e:	9300      	str	r3, [sp, #0]
 8021490:	462a      	mov	r2, r5
 8021492:	4b0e      	ldr	r3, [pc, #56]	@ (80214cc <_svfiprintf_r+0x1f0>)
 8021494:	a904      	add	r1, sp, #16
 8021496:	4638      	mov	r0, r7
 8021498:	f7fc fb86 	bl	801dba8 <_printf_float>
 802149c:	1c42      	adds	r2, r0, #1
 802149e:	4606      	mov	r6, r0
 80214a0:	d1d6      	bne.n	8021450 <_svfiprintf_r+0x174>
 80214a2:	89ab      	ldrh	r3, [r5, #12]
 80214a4:	065b      	lsls	r3, r3, #25
 80214a6:	f53f af2d 	bmi.w	8021304 <_svfiprintf_r+0x28>
 80214aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80214ac:	e72c      	b.n	8021308 <_svfiprintf_r+0x2c>
 80214ae:	ab03      	add	r3, sp, #12
 80214b0:	9300      	str	r3, [sp, #0]
 80214b2:	462a      	mov	r2, r5
 80214b4:	4b05      	ldr	r3, [pc, #20]	@ (80214cc <_svfiprintf_r+0x1f0>)
 80214b6:	a904      	add	r1, sp, #16
 80214b8:	4638      	mov	r0, r7
 80214ba:	f7fc fe0d 	bl	801e0d8 <_printf_i>
 80214be:	e7ed      	b.n	802149c <_svfiprintf_r+0x1c0>
 80214c0:	08025860 	.word	0x08025860
 80214c4:	0802586a 	.word	0x0802586a
 80214c8:	0801dba9 	.word	0x0801dba9
 80214cc:	08021225 	.word	0x08021225
 80214d0:	08025866 	.word	0x08025866

080214d4 <__sfputc_r>:
 80214d4:	6893      	ldr	r3, [r2, #8]
 80214d6:	3b01      	subs	r3, #1
 80214d8:	2b00      	cmp	r3, #0
 80214da:	b410      	push	{r4}
 80214dc:	6093      	str	r3, [r2, #8]
 80214de:	da08      	bge.n	80214f2 <__sfputc_r+0x1e>
 80214e0:	6994      	ldr	r4, [r2, #24]
 80214e2:	42a3      	cmp	r3, r4
 80214e4:	db01      	blt.n	80214ea <__sfputc_r+0x16>
 80214e6:	290a      	cmp	r1, #10
 80214e8:	d103      	bne.n	80214f2 <__sfputc_r+0x1e>
 80214ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80214ee:	f7fd bb4f 	b.w	801eb90 <__swbuf_r>
 80214f2:	6813      	ldr	r3, [r2, #0]
 80214f4:	1c58      	adds	r0, r3, #1
 80214f6:	6010      	str	r0, [r2, #0]
 80214f8:	7019      	strb	r1, [r3, #0]
 80214fa:	4608      	mov	r0, r1
 80214fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021500:	4770      	bx	lr

08021502 <__sfputs_r>:
 8021502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021504:	4606      	mov	r6, r0
 8021506:	460f      	mov	r7, r1
 8021508:	4614      	mov	r4, r2
 802150a:	18d5      	adds	r5, r2, r3
 802150c:	42ac      	cmp	r4, r5
 802150e:	d101      	bne.n	8021514 <__sfputs_r+0x12>
 8021510:	2000      	movs	r0, #0
 8021512:	e007      	b.n	8021524 <__sfputs_r+0x22>
 8021514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021518:	463a      	mov	r2, r7
 802151a:	4630      	mov	r0, r6
 802151c:	f7ff ffda 	bl	80214d4 <__sfputc_r>
 8021520:	1c43      	adds	r3, r0, #1
 8021522:	d1f3      	bne.n	802150c <__sfputs_r+0xa>
 8021524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021528 <_vfiprintf_r>:
 8021528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802152c:	460d      	mov	r5, r1
 802152e:	b09d      	sub	sp, #116	@ 0x74
 8021530:	4614      	mov	r4, r2
 8021532:	4698      	mov	r8, r3
 8021534:	4606      	mov	r6, r0
 8021536:	b118      	cbz	r0, 8021540 <_vfiprintf_r+0x18>
 8021538:	6a03      	ldr	r3, [r0, #32]
 802153a:	b90b      	cbnz	r3, 8021540 <_vfiprintf_r+0x18>
 802153c:	f7fd f98c 	bl	801e858 <__sinit>
 8021540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021542:	07d9      	lsls	r1, r3, #31
 8021544:	d405      	bmi.n	8021552 <_vfiprintf_r+0x2a>
 8021546:	89ab      	ldrh	r3, [r5, #12]
 8021548:	059a      	lsls	r2, r3, #22
 802154a:	d402      	bmi.n	8021552 <_vfiprintf_r+0x2a>
 802154c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802154e:	f7fd fcda 	bl	801ef06 <__retarget_lock_acquire_recursive>
 8021552:	89ab      	ldrh	r3, [r5, #12]
 8021554:	071b      	lsls	r3, r3, #28
 8021556:	d501      	bpl.n	802155c <_vfiprintf_r+0x34>
 8021558:	692b      	ldr	r3, [r5, #16]
 802155a:	b99b      	cbnz	r3, 8021584 <_vfiprintf_r+0x5c>
 802155c:	4629      	mov	r1, r5
 802155e:	4630      	mov	r0, r6
 8021560:	f7fd fb54 	bl	801ec0c <__swsetup_r>
 8021564:	b170      	cbz	r0, 8021584 <_vfiprintf_r+0x5c>
 8021566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021568:	07dc      	lsls	r4, r3, #31
 802156a:	d504      	bpl.n	8021576 <_vfiprintf_r+0x4e>
 802156c:	f04f 30ff 	mov.w	r0, #4294967295
 8021570:	b01d      	add	sp, #116	@ 0x74
 8021572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021576:	89ab      	ldrh	r3, [r5, #12]
 8021578:	0598      	lsls	r0, r3, #22
 802157a:	d4f7      	bmi.n	802156c <_vfiprintf_r+0x44>
 802157c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802157e:	f7fd fcc3 	bl	801ef08 <__retarget_lock_release_recursive>
 8021582:	e7f3      	b.n	802156c <_vfiprintf_r+0x44>
 8021584:	2300      	movs	r3, #0
 8021586:	9309      	str	r3, [sp, #36]	@ 0x24
 8021588:	2320      	movs	r3, #32
 802158a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802158e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021592:	2330      	movs	r3, #48	@ 0x30
 8021594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021744 <_vfiprintf_r+0x21c>
 8021598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802159c:	f04f 0901 	mov.w	r9, #1
 80215a0:	4623      	mov	r3, r4
 80215a2:	469a      	mov	sl, r3
 80215a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80215a8:	b10a      	cbz	r2, 80215ae <_vfiprintf_r+0x86>
 80215aa:	2a25      	cmp	r2, #37	@ 0x25
 80215ac:	d1f9      	bne.n	80215a2 <_vfiprintf_r+0x7a>
 80215ae:	ebba 0b04 	subs.w	fp, sl, r4
 80215b2:	d00b      	beq.n	80215cc <_vfiprintf_r+0xa4>
 80215b4:	465b      	mov	r3, fp
 80215b6:	4622      	mov	r2, r4
 80215b8:	4629      	mov	r1, r5
 80215ba:	4630      	mov	r0, r6
 80215bc:	f7ff ffa1 	bl	8021502 <__sfputs_r>
 80215c0:	3001      	adds	r0, #1
 80215c2:	f000 80a7 	beq.w	8021714 <_vfiprintf_r+0x1ec>
 80215c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80215c8:	445a      	add	r2, fp
 80215ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80215cc:	f89a 3000 	ldrb.w	r3, [sl]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	f000 809f 	beq.w	8021714 <_vfiprintf_r+0x1ec>
 80215d6:	2300      	movs	r3, #0
 80215d8:	f04f 32ff 	mov.w	r2, #4294967295
 80215dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80215e0:	f10a 0a01 	add.w	sl, sl, #1
 80215e4:	9304      	str	r3, [sp, #16]
 80215e6:	9307      	str	r3, [sp, #28]
 80215e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80215ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80215ee:	4654      	mov	r4, sl
 80215f0:	2205      	movs	r2, #5
 80215f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215f6:	4853      	ldr	r0, [pc, #332]	@ (8021744 <_vfiprintf_r+0x21c>)
 80215f8:	f7de fe02 	bl	8000200 <memchr>
 80215fc:	9a04      	ldr	r2, [sp, #16]
 80215fe:	b9d8      	cbnz	r0, 8021638 <_vfiprintf_r+0x110>
 8021600:	06d1      	lsls	r1, r2, #27
 8021602:	bf44      	itt	mi
 8021604:	2320      	movmi	r3, #32
 8021606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802160a:	0713      	lsls	r3, r2, #28
 802160c:	bf44      	itt	mi
 802160e:	232b      	movmi	r3, #43	@ 0x2b
 8021610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021614:	f89a 3000 	ldrb.w	r3, [sl]
 8021618:	2b2a      	cmp	r3, #42	@ 0x2a
 802161a:	d015      	beq.n	8021648 <_vfiprintf_r+0x120>
 802161c:	9a07      	ldr	r2, [sp, #28]
 802161e:	4654      	mov	r4, sl
 8021620:	2000      	movs	r0, #0
 8021622:	f04f 0c0a 	mov.w	ip, #10
 8021626:	4621      	mov	r1, r4
 8021628:	f811 3b01 	ldrb.w	r3, [r1], #1
 802162c:	3b30      	subs	r3, #48	@ 0x30
 802162e:	2b09      	cmp	r3, #9
 8021630:	d94b      	bls.n	80216ca <_vfiprintf_r+0x1a2>
 8021632:	b1b0      	cbz	r0, 8021662 <_vfiprintf_r+0x13a>
 8021634:	9207      	str	r2, [sp, #28]
 8021636:	e014      	b.n	8021662 <_vfiprintf_r+0x13a>
 8021638:	eba0 0308 	sub.w	r3, r0, r8
 802163c:	fa09 f303 	lsl.w	r3, r9, r3
 8021640:	4313      	orrs	r3, r2
 8021642:	9304      	str	r3, [sp, #16]
 8021644:	46a2      	mov	sl, r4
 8021646:	e7d2      	b.n	80215ee <_vfiprintf_r+0xc6>
 8021648:	9b03      	ldr	r3, [sp, #12]
 802164a:	1d19      	adds	r1, r3, #4
 802164c:	681b      	ldr	r3, [r3, #0]
 802164e:	9103      	str	r1, [sp, #12]
 8021650:	2b00      	cmp	r3, #0
 8021652:	bfbb      	ittet	lt
 8021654:	425b      	neglt	r3, r3
 8021656:	f042 0202 	orrlt.w	r2, r2, #2
 802165a:	9307      	strge	r3, [sp, #28]
 802165c:	9307      	strlt	r3, [sp, #28]
 802165e:	bfb8      	it	lt
 8021660:	9204      	strlt	r2, [sp, #16]
 8021662:	7823      	ldrb	r3, [r4, #0]
 8021664:	2b2e      	cmp	r3, #46	@ 0x2e
 8021666:	d10a      	bne.n	802167e <_vfiprintf_r+0x156>
 8021668:	7863      	ldrb	r3, [r4, #1]
 802166a:	2b2a      	cmp	r3, #42	@ 0x2a
 802166c:	d132      	bne.n	80216d4 <_vfiprintf_r+0x1ac>
 802166e:	9b03      	ldr	r3, [sp, #12]
 8021670:	1d1a      	adds	r2, r3, #4
 8021672:	681b      	ldr	r3, [r3, #0]
 8021674:	9203      	str	r2, [sp, #12]
 8021676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802167a:	3402      	adds	r4, #2
 802167c:	9305      	str	r3, [sp, #20]
 802167e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021754 <_vfiprintf_r+0x22c>
 8021682:	7821      	ldrb	r1, [r4, #0]
 8021684:	2203      	movs	r2, #3
 8021686:	4650      	mov	r0, sl
 8021688:	f7de fdba 	bl	8000200 <memchr>
 802168c:	b138      	cbz	r0, 802169e <_vfiprintf_r+0x176>
 802168e:	9b04      	ldr	r3, [sp, #16]
 8021690:	eba0 000a 	sub.w	r0, r0, sl
 8021694:	2240      	movs	r2, #64	@ 0x40
 8021696:	4082      	lsls	r2, r0
 8021698:	4313      	orrs	r3, r2
 802169a:	3401      	adds	r4, #1
 802169c:	9304      	str	r3, [sp, #16]
 802169e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216a2:	4829      	ldr	r0, [pc, #164]	@ (8021748 <_vfiprintf_r+0x220>)
 80216a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80216a8:	2206      	movs	r2, #6
 80216aa:	f7de fda9 	bl	8000200 <memchr>
 80216ae:	2800      	cmp	r0, #0
 80216b0:	d03f      	beq.n	8021732 <_vfiprintf_r+0x20a>
 80216b2:	4b26      	ldr	r3, [pc, #152]	@ (802174c <_vfiprintf_r+0x224>)
 80216b4:	bb1b      	cbnz	r3, 80216fe <_vfiprintf_r+0x1d6>
 80216b6:	9b03      	ldr	r3, [sp, #12]
 80216b8:	3307      	adds	r3, #7
 80216ba:	f023 0307 	bic.w	r3, r3, #7
 80216be:	3308      	adds	r3, #8
 80216c0:	9303      	str	r3, [sp, #12]
 80216c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80216c4:	443b      	add	r3, r7
 80216c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80216c8:	e76a      	b.n	80215a0 <_vfiprintf_r+0x78>
 80216ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80216ce:	460c      	mov	r4, r1
 80216d0:	2001      	movs	r0, #1
 80216d2:	e7a8      	b.n	8021626 <_vfiprintf_r+0xfe>
 80216d4:	2300      	movs	r3, #0
 80216d6:	3401      	adds	r4, #1
 80216d8:	9305      	str	r3, [sp, #20]
 80216da:	4619      	mov	r1, r3
 80216dc:	f04f 0c0a 	mov.w	ip, #10
 80216e0:	4620      	mov	r0, r4
 80216e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80216e6:	3a30      	subs	r2, #48	@ 0x30
 80216e8:	2a09      	cmp	r2, #9
 80216ea:	d903      	bls.n	80216f4 <_vfiprintf_r+0x1cc>
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	d0c6      	beq.n	802167e <_vfiprintf_r+0x156>
 80216f0:	9105      	str	r1, [sp, #20]
 80216f2:	e7c4      	b.n	802167e <_vfiprintf_r+0x156>
 80216f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80216f8:	4604      	mov	r4, r0
 80216fa:	2301      	movs	r3, #1
 80216fc:	e7f0      	b.n	80216e0 <_vfiprintf_r+0x1b8>
 80216fe:	ab03      	add	r3, sp, #12
 8021700:	9300      	str	r3, [sp, #0]
 8021702:	462a      	mov	r2, r5
 8021704:	4b12      	ldr	r3, [pc, #72]	@ (8021750 <_vfiprintf_r+0x228>)
 8021706:	a904      	add	r1, sp, #16
 8021708:	4630      	mov	r0, r6
 802170a:	f7fc fa4d 	bl	801dba8 <_printf_float>
 802170e:	4607      	mov	r7, r0
 8021710:	1c78      	adds	r0, r7, #1
 8021712:	d1d6      	bne.n	80216c2 <_vfiprintf_r+0x19a>
 8021714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021716:	07d9      	lsls	r1, r3, #31
 8021718:	d405      	bmi.n	8021726 <_vfiprintf_r+0x1fe>
 802171a:	89ab      	ldrh	r3, [r5, #12]
 802171c:	059a      	lsls	r2, r3, #22
 802171e:	d402      	bmi.n	8021726 <_vfiprintf_r+0x1fe>
 8021720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021722:	f7fd fbf1 	bl	801ef08 <__retarget_lock_release_recursive>
 8021726:	89ab      	ldrh	r3, [r5, #12]
 8021728:	065b      	lsls	r3, r3, #25
 802172a:	f53f af1f 	bmi.w	802156c <_vfiprintf_r+0x44>
 802172e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021730:	e71e      	b.n	8021570 <_vfiprintf_r+0x48>
 8021732:	ab03      	add	r3, sp, #12
 8021734:	9300      	str	r3, [sp, #0]
 8021736:	462a      	mov	r2, r5
 8021738:	4b05      	ldr	r3, [pc, #20]	@ (8021750 <_vfiprintf_r+0x228>)
 802173a:	a904      	add	r1, sp, #16
 802173c:	4630      	mov	r0, r6
 802173e:	f7fc fccb 	bl	801e0d8 <_printf_i>
 8021742:	e7e4      	b.n	802170e <_vfiprintf_r+0x1e6>
 8021744:	08025860 	.word	0x08025860
 8021748:	0802586a 	.word	0x0802586a
 802174c:	0801dba9 	.word	0x0801dba9
 8021750:	08021503 	.word	0x08021503
 8021754:	08025866 	.word	0x08025866

08021758 <__sflush_r>:
 8021758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802175c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021760:	0716      	lsls	r6, r2, #28
 8021762:	4605      	mov	r5, r0
 8021764:	460c      	mov	r4, r1
 8021766:	d454      	bmi.n	8021812 <__sflush_r+0xba>
 8021768:	684b      	ldr	r3, [r1, #4]
 802176a:	2b00      	cmp	r3, #0
 802176c:	dc02      	bgt.n	8021774 <__sflush_r+0x1c>
 802176e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021770:	2b00      	cmp	r3, #0
 8021772:	dd48      	ble.n	8021806 <__sflush_r+0xae>
 8021774:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021776:	2e00      	cmp	r6, #0
 8021778:	d045      	beq.n	8021806 <__sflush_r+0xae>
 802177a:	2300      	movs	r3, #0
 802177c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021780:	682f      	ldr	r7, [r5, #0]
 8021782:	6a21      	ldr	r1, [r4, #32]
 8021784:	602b      	str	r3, [r5, #0]
 8021786:	d030      	beq.n	80217ea <__sflush_r+0x92>
 8021788:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802178a:	89a3      	ldrh	r3, [r4, #12]
 802178c:	0759      	lsls	r1, r3, #29
 802178e:	d505      	bpl.n	802179c <__sflush_r+0x44>
 8021790:	6863      	ldr	r3, [r4, #4]
 8021792:	1ad2      	subs	r2, r2, r3
 8021794:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021796:	b10b      	cbz	r3, 802179c <__sflush_r+0x44>
 8021798:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802179a:	1ad2      	subs	r2, r2, r3
 802179c:	2300      	movs	r3, #0
 802179e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80217a0:	6a21      	ldr	r1, [r4, #32]
 80217a2:	4628      	mov	r0, r5
 80217a4:	47b0      	blx	r6
 80217a6:	1c43      	adds	r3, r0, #1
 80217a8:	89a3      	ldrh	r3, [r4, #12]
 80217aa:	d106      	bne.n	80217ba <__sflush_r+0x62>
 80217ac:	6829      	ldr	r1, [r5, #0]
 80217ae:	291d      	cmp	r1, #29
 80217b0:	d82b      	bhi.n	802180a <__sflush_r+0xb2>
 80217b2:	4a2a      	ldr	r2, [pc, #168]	@ (802185c <__sflush_r+0x104>)
 80217b4:	410a      	asrs	r2, r1
 80217b6:	07d6      	lsls	r6, r2, #31
 80217b8:	d427      	bmi.n	802180a <__sflush_r+0xb2>
 80217ba:	2200      	movs	r2, #0
 80217bc:	6062      	str	r2, [r4, #4]
 80217be:	04d9      	lsls	r1, r3, #19
 80217c0:	6922      	ldr	r2, [r4, #16]
 80217c2:	6022      	str	r2, [r4, #0]
 80217c4:	d504      	bpl.n	80217d0 <__sflush_r+0x78>
 80217c6:	1c42      	adds	r2, r0, #1
 80217c8:	d101      	bne.n	80217ce <__sflush_r+0x76>
 80217ca:	682b      	ldr	r3, [r5, #0]
 80217cc:	b903      	cbnz	r3, 80217d0 <__sflush_r+0x78>
 80217ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80217d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80217d2:	602f      	str	r7, [r5, #0]
 80217d4:	b1b9      	cbz	r1, 8021806 <__sflush_r+0xae>
 80217d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80217da:	4299      	cmp	r1, r3
 80217dc:	d002      	beq.n	80217e4 <__sflush_r+0x8c>
 80217de:	4628      	mov	r0, r5
 80217e0:	f7fe fa1a 	bl	801fc18 <_free_r>
 80217e4:	2300      	movs	r3, #0
 80217e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80217e8:	e00d      	b.n	8021806 <__sflush_r+0xae>
 80217ea:	2301      	movs	r3, #1
 80217ec:	4628      	mov	r0, r5
 80217ee:	47b0      	blx	r6
 80217f0:	4602      	mov	r2, r0
 80217f2:	1c50      	adds	r0, r2, #1
 80217f4:	d1c9      	bne.n	802178a <__sflush_r+0x32>
 80217f6:	682b      	ldr	r3, [r5, #0]
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	d0c6      	beq.n	802178a <__sflush_r+0x32>
 80217fc:	2b1d      	cmp	r3, #29
 80217fe:	d001      	beq.n	8021804 <__sflush_r+0xac>
 8021800:	2b16      	cmp	r3, #22
 8021802:	d11e      	bne.n	8021842 <__sflush_r+0xea>
 8021804:	602f      	str	r7, [r5, #0]
 8021806:	2000      	movs	r0, #0
 8021808:	e022      	b.n	8021850 <__sflush_r+0xf8>
 802180a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802180e:	b21b      	sxth	r3, r3
 8021810:	e01b      	b.n	802184a <__sflush_r+0xf2>
 8021812:	690f      	ldr	r7, [r1, #16]
 8021814:	2f00      	cmp	r7, #0
 8021816:	d0f6      	beq.n	8021806 <__sflush_r+0xae>
 8021818:	0793      	lsls	r3, r2, #30
 802181a:	680e      	ldr	r6, [r1, #0]
 802181c:	bf08      	it	eq
 802181e:	694b      	ldreq	r3, [r1, #20]
 8021820:	600f      	str	r7, [r1, #0]
 8021822:	bf18      	it	ne
 8021824:	2300      	movne	r3, #0
 8021826:	eba6 0807 	sub.w	r8, r6, r7
 802182a:	608b      	str	r3, [r1, #8]
 802182c:	f1b8 0f00 	cmp.w	r8, #0
 8021830:	dde9      	ble.n	8021806 <__sflush_r+0xae>
 8021832:	6a21      	ldr	r1, [r4, #32]
 8021834:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021836:	4643      	mov	r3, r8
 8021838:	463a      	mov	r2, r7
 802183a:	4628      	mov	r0, r5
 802183c:	47b0      	blx	r6
 802183e:	2800      	cmp	r0, #0
 8021840:	dc08      	bgt.n	8021854 <__sflush_r+0xfc>
 8021842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802184a:	81a3      	strh	r3, [r4, #12]
 802184c:	f04f 30ff 	mov.w	r0, #4294967295
 8021850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021854:	4407      	add	r7, r0
 8021856:	eba8 0800 	sub.w	r8, r8, r0
 802185a:	e7e7      	b.n	802182c <__sflush_r+0xd4>
 802185c:	dfbffffe 	.word	0xdfbffffe

08021860 <_fflush_r>:
 8021860:	b538      	push	{r3, r4, r5, lr}
 8021862:	690b      	ldr	r3, [r1, #16]
 8021864:	4605      	mov	r5, r0
 8021866:	460c      	mov	r4, r1
 8021868:	b913      	cbnz	r3, 8021870 <_fflush_r+0x10>
 802186a:	2500      	movs	r5, #0
 802186c:	4628      	mov	r0, r5
 802186e:	bd38      	pop	{r3, r4, r5, pc}
 8021870:	b118      	cbz	r0, 802187a <_fflush_r+0x1a>
 8021872:	6a03      	ldr	r3, [r0, #32]
 8021874:	b90b      	cbnz	r3, 802187a <_fflush_r+0x1a>
 8021876:	f7fc ffef 	bl	801e858 <__sinit>
 802187a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802187e:	2b00      	cmp	r3, #0
 8021880:	d0f3      	beq.n	802186a <_fflush_r+0xa>
 8021882:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021884:	07d0      	lsls	r0, r2, #31
 8021886:	d404      	bmi.n	8021892 <_fflush_r+0x32>
 8021888:	0599      	lsls	r1, r3, #22
 802188a:	d402      	bmi.n	8021892 <_fflush_r+0x32>
 802188c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802188e:	f7fd fb3a 	bl	801ef06 <__retarget_lock_acquire_recursive>
 8021892:	4628      	mov	r0, r5
 8021894:	4621      	mov	r1, r4
 8021896:	f7ff ff5f 	bl	8021758 <__sflush_r>
 802189a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802189c:	07da      	lsls	r2, r3, #31
 802189e:	4605      	mov	r5, r0
 80218a0:	d4e4      	bmi.n	802186c <_fflush_r+0xc>
 80218a2:	89a3      	ldrh	r3, [r4, #12]
 80218a4:	059b      	lsls	r3, r3, #22
 80218a6:	d4e1      	bmi.n	802186c <_fflush_r+0xc>
 80218a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80218aa:	f7fd fb2d 	bl	801ef08 <__retarget_lock_release_recursive>
 80218ae:	e7dd      	b.n	802186c <_fflush_r+0xc>

080218b0 <fiprintf>:
 80218b0:	b40e      	push	{r1, r2, r3}
 80218b2:	b503      	push	{r0, r1, lr}
 80218b4:	4601      	mov	r1, r0
 80218b6:	ab03      	add	r3, sp, #12
 80218b8:	4805      	ldr	r0, [pc, #20]	@ (80218d0 <fiprintf+0x20>)
 80218ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80218be:	6800      	ldr	r0, [r0, #0]
 80218c0:	9301      	str	r3, [sp, #4]
 80218c2:	f7ff fe31 	bl	8021528 <_vfiprintf_r>
 80218c6:	b002      	add	sp, #8
 80218c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80218cc:	b003      	add	sp, #12
 80218ce:	4770      	bx	lr
 80218d0:	20000148 	.word	0x20000148

080218d4 <__swhatbuf_r>:
 80218d4:	b570      	push	{r4, r5, r6, lr}
 80218d6:	460c      	mov	r4, r1
 80218d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218dc:	2900      	cmp	r1, #0
 80218de:	b096      	sub	sp, #88	@ 0x58
 80218e0:	4615      	mov	r5, r2
 80218e2:	461e      	mov	r6, r3
 80218e4:	da0d      	bge.n	8021902 <__swhatbuf_r+0x2e>
 80218e6:	89a3      	ldrh	r3, [r4, #12]
 80218e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80218ec:	f04f 0100 	mov.w	r1, #0
 80218f0:	bf14      	ite	ne
 80218f2:	2340      	movne	r3, #64	@ 0x40
 80218f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80218f8:	2000      	movs	r0, #0
 80218fa:	6031      	str	r1, [r6, #0]
 80218fc:	602b      	str	r3, [r5, #0]
 80218fe:	b016      	add	sp, #88	@ 0x58
 8021900:	bd70      	pop	{r4, r5, r6, pc}
 8021902:	466a      	mov	r2, sp
 8021904:	f000 f85a 	bl	80219bc <_fstat_r>
 8021908:	2800      	cmp	r0, #0
 802190a:	dbec      	blt.n	80218e6 <__swhatbuf_r+0x12>
 802190c:	9901      	ldr	r1, [sp, #4]
 802190e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021912:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021916:	4259      	negs	r1, r3
 8021918:	4159      	adcs	r1, r3
 802191a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802191e:	e7eb      	b.n	80218f8 <__swhatbuf_r+0x24>

08021920 <__smakebuf_r>:
 8021920:	898b      	ldrh	r3, [r1, #12]
 8021922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021924:	079d      	lsls	r5, r3, #30
 8021926:	4606      	mov	r6, r0
 8021928:	460c      	mov	r4, r1
 802192a:	d507      	bpl.n	802193c <__smakebuf_r+0x1c>
 802192c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021930:	6023      	str	r3, [r4, #0]
 8021932:	6123      	str	r3, [r4, #16]
 8021934:	2301      	movs	r3, #1
 8021936:	6163      	str	r3, [r4, #20]
 8021938:	b003      	add	sp, #12
 802193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802193c:	ab01      	add	r3, sp, #4
 802193e:	466a      	mov	r2, sp
 8021940:	f7ff ffc8 	bl	80218d4 <__swhatbuf_r>
 8021944:	9f00      	ldr	r7, [sp, #0]
 8021946:	4605      	mov	r5, r0
 8021948:	4639      	mov	r1, r7
 802194a:	4630      	mov	r0, r6
 802194c:	f7fb ff7a 	bl	801d844 <_malloc_r>
 8021950:	b948      	cbnz	r0, 8021966 <__smakebuf_r+0x46>
 8021952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021956:	059a      	lsls	r2, r3, #22
 8021958:	d4ee      	bmi.n	8021938 <__smakebuf_r+0x18>
 802195a:	f023 0303 	bic.w	r3, r3, #3
 802195e:	f043 0302 	orr.w	r3, r3, #2
 8021962:	81a3      	strh	r3, [r4, #12]
 8021964:	e7e2      	b.n	802192c <__smakebuf_r+0xc>
 8021966:	89a3      	ldrh	r3, [r4, #12]
 8021968:	6020      	str	r0, [r4, #0]
 802196a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802196e:	81a3      	strh	r3, [r4, #12]
 8021970:	9b01      	ldr	r3, [sp, #4]
 8021972:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021976:	b15b      	cbz	r3, 8021990 <__smakebuf_r+0x70>
 8021978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802197c:	4630      	mov	r0, r6
 802197e:	f000 f82f 	bl	80219e0 <_isatty_r>
 8021982:	b128      	cbz	r0, 8021990 <__smakebuf_r+0x70>
 8021984:	89a3      	ldrh	r3, [r4, #12]
 8021986:	f023 0303 	bic.w	r3, r3, #3
 802198a:	f043 0301 	orr.w	r3, r3, #1
 802198e:	81a3      	strh	r3, [r4, #12]
 8021990:	89a3      	ldrh	r3, [r4, #12]
 8021992:	431d      	orrs	r5, r3
 8021994:	81a5      	strh	r5, [r4, #12]
 8021996:	e7cf      	b.n	8021938 <__smakebuf_r+0x18>

08021998 <strncmp>:
 8021998:	b510      	push	{r4, lr}
 802199a:	b16a      	cbz	r2, 80219b8 <strncmp+0x20>
 802199c:	3901      	subs	r1, #1
 802199e:	1884      	adds	r4, r0, r2
 80219a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80219a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80219a8:	429a      	cmp	r2, r3
 80219aa:	d103      	bne.n	80219b4 <strncmp+0x1c>
 80219ac:	42a0      	cmp	r0, r4
 80219ae:	d001      	beq.n	80219b4 <strncmp+0x1c>
 80219b0:	2a00      	cmp	r2, #0
 80219b2:	d1f5      	bne.n	80219a0 <strncmp+0x8>
 80219b4:	1ad0      	subs	r0, r2, r3
 80219b6:	bd10      	pop	{r4, pc}
 80219b8:	4610      	mov	r0, r2
 80219ba:	e7fc      	b.n	80219b6 <strncmp+0x1e>

080219bc <_fstat_r>:
 80219bc:	b538      	push	{r3, r4, r5, lr}
 80219be:	4d07      	ldr	r5, [pc, #28]	@ (80219dc <_fstat_r+0x20>)
 80219c0:	2300      	movs	r3, #0
 80219c2:	4604      	mov	r4, r0
 80219c4:	4608      	mov	r0, r1
 80219c6:	4611      	mov	r1, r2
 80219c8:	602b      	str	r3, [r5, #0]
 80219ca:	f7e2 fa9d 	bl	8003f08 <_fstat>
 80219ce:	1c43      	adds	r3, r0, #1
 80219d0:	d102      	bne.n	80219d8 <_fstat_r+0x1c>
 80219d2:	682b      	ldr	r3, [r5, #0]
 80219d4:	b103      	cbz	r3, 80219d8 <_fstat_r+0x1c>
 80219d6:	6023      	str	r3, [r4, #0]
 80219d8:	bd38      	pop	{r3, r4, r5, pc}
 80219da:	bf00      	nop
 80219dc:	200037a8 	.word	0x200037a8

080219e0 <_isatty_r>:
 80219e0:	b538      	push	{r3, r4, r5, lr}
 80219e2:	4d06      	ldr	r5, [pc, #24]	@ (80219fc <_isatty_r+0x1c>)
 80219e4:	2300      	movs	r3, #0
 80219e6:	4604      	mov	r4, r0
 80219e8:	4608      	mov	r0, r1
 80219ea:	602b      	str	r3, [r5, #0]
 80219ec:	f7e2 fa9c 	bl	8003f28 <_isatty>
 80219f0:	1c43      	adds	r3, r0, #1
 80219f2:	d102      	bne.n	80219fa <_isatty_r+0x1a>
 80219f4:	682b      	ldr	r3, [r5, #0]
 80219f6:	b103      	cbz	r3, 80219fa <_isatty_r+0x1a>
 80219f8:	6023      	str	r3, [r4, #0]
 80219fa:	bd38      	pop	{r3, r4, r5, pc}
 80219fc:	200037a8 	.word	0x200037a8

08021a00 <nan>:
 8021a00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021a08 <nan+0x8>
 8021a04:	4770      	bx	lr
 8021a06:	bf00      	nop
 8021a08:	00000000 	.word	0x00000000
 8021a0c:	7ff80000 	.word	0x7ff80000

08021a10 <abort>:
 8021a10:	b508      	push	{r3, lr}
 8021a12:	2006      	movs	r0, #6
 8021a14:	f000 fbc4 	bl	80221a0 <raise>
 8021a18:	2001      	movs	r0, #1
 8021a1a:	f7e2 fa25 	bl	8003e68 <_exit>

08021a1e <_calloc_r>:
 8021a1e:	b570      	push	{r4, r5, r6, lr}
 8021a20:	fba1 5402 	umull	r5, r4, r1, r2
 8021a24:	b93c      	cbnz	r4, 8021a36 <_calloc_r+0x18>
 8021a26:	4629      	mov	r1, r5
 8021a28:	f7fb ff0c 	bl	801d844 <_malloc_r>
 8021a2c:	4606      	mov	r6, r0
 8021a2e:	b928      	cbnz	r0, 8021a3c <_calloc_r+0x1e>
 8021a30:	2600      	movs	r6, #0
 8021a32:	4630      	mov	r0, r6
 8021a34:	bd70      	pop	{r4, r5, r6, pc}
 8021a36:	220c      	movs	r2, #12
 8021a38:	6002      	str	r2, [r0, #0]
 8021a3a:	e7f9      	b.n	8021a30 <_calloc_r+0x12>
 8021a3c:	462a      	mov	r2, r5
 8021a3e:	4621      	mov	r1, r4
 8021a40:	f7fd f954 	bl	801ecec <memset>
 8021a44:	e7f5      	b.n	8021a32 <_calloc_r+0x14>

08021a46 <rshift>:
 8021a46:	6903      	ldr	r3, [r0, #16]
 8021a48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021a50:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021a54:	f100 0414 	add.w	r4, r0, #20
 8021a58:	dd45      	ble.n	8021ae6 <rshift+0xa0>
 8021a5a:	f011 011f 	ands.w	r1, r1, #31
 8021a5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021a62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021a66:	d10c      	bne.n	8021a82 <rshift+0x3c>
 8021a68:	f100 0710 	add.w	r7, r0, #16
 8021a6c:	4629      	mov	r1, r5
 8021a6e:	42b1      	cmp	r1, r6
 8021a70:	d334      	bcc.n	8021adc <rshift+0x96>
 8021a72:	1a9b      	subs	r3, r3, r2
 8021a74:	009b      	lsls	r3, r3, #2
 8021a76:	1eea      	subs	r2, r5, #3
 8021a78:	4296      	cmp	r6, r2
 8021a7a:	bf38      	it	cc
 8021a7c:	2300      	movcc	r3, #0
 8021a7e:	4423      	add	r3, r4
 8021a80:	e015      	b.n	8021aae <rshift+0x68>
 8021a82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021a86:	f1c1 0820 	rsb	r8, r1, #32
 8021a8a:	40cf      	lsrs	r7, r1
 8021a8c:	f105 0e04 	add.w	lr, r5, #4
 8021a90:	46a1      	mov	r9, r4
 8021a92:	4576      	cmp	r6, lr
 8021a94:	46f4      	mov	ip, lr
 8021a96:	d815      	bhi.n	8021ac4 <rshift+0x7e>
 8021a98:	1a9a      	subs	r2, r3, r2
 8021a9a:	0092      	lsls	r2, r2, #2
 8021a9c:	3a04      	subs	r2, #4
 8021a9e:	3501      	adds	r5, #1
 8021aa0:	42ae      	cmp	r6, r5
 8021aa2:	bf38      	it	cc
 8021aa4:	2200      	movcc	r2, #0
 8021aa6:	18a3      	adds	r3, r4, r2
 8021aa8:	50a7      	str	r7, [r4, r2]
 8021aaa:	b107      	cbz	r7, 8021aae <rshift+0x68>
 8021aac:	3304      	adds	r3, #4
 8021aae:	1b1a      	subs	r2, r3, r4
 8021ab0:	42a3      	cmp	r3, r4
 8021ab2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021ab6:	bf08      	it	eq
 8021ab8:	2300      	moveq	r3, #0
 8021aba:	6102      	str	r2, [r0, #16]
 8021abc:	bf08      	it	eq
 8021abe:	6143      	streq	r3, [r0, #20]
 8021ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ac4:	f8dc c000 	ldr.w	ip, [ip]
 8021ac8:	fa0c fc08 	lsl.w	ip, ip, r8
 8021acc:	ea4c 0707 	orr.w	r7, ip, r7
 8021ad0:	f849 7b04 	str.w	r7, [r9], #4
 8021ad4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021ad8:	40cf      	lsrs	r7, r1
 8021ada:	e7da      	b.n	8021a92 <rshift+0x4c>
 8021adc:	f851 cb04 	ldr.w	ip, [r1], #4
 8021ae0:	f847 cf04 	str.w	ip, [r7, #4]!
 8021ae4:	e7c3      	b.n	8021a6e <rshift+0x28>
 8021ae6:	4623      	mov	r3, r4
 8021ae8:	e7e1      	b.n	8021aae <rshift+0x68>

08021aea <__hexdig_fun>:
 8021aea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021aee:	2b09      	cmp	r3, #9
 8021af0:	d802      	bhi.n	8021af8 <__hexdig_fun+0xe>
 8021af2:	3820      	subs	r0, #32
 8021af4:	b2c0      	uxtb	r0, r0
 8021af6:	4770      	bx	lr
 8021af8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021afc:	2b05      	cmp	r3, #5
 8021afe:	d801      	bhi.n	8021b04 <__hexdig_fun+0x1a>
 8021b00:	3847      	subs	r0, #71	@ 0x47
 8021b02:	e7f7      	b.n	8021af4 <__hexdig_fun+0xa>
 8021b04:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021b08:	2b05      	cmp	r3, #5
 8021b0a:	d801      	bhi.n	8021b10 <__hexdig_fun+0x26>
 8021b0c:	3827      	subs	r0, #39	@ 0x27
 8021b0e:	e7f1      	b.n	8021af4 <__hexdig_fun+0xa>
 8021b10:	2000      	movs	r0, #0
 8021b12:	4770      	bx	lr

08021b14 <__gethex>:
 8021b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b18:	b085      	sub	sp, #20
 8021b1a:	468a      	mov	sl, r1
 8021b1c:	9302      	str	r3, [sp, #8]
 8021b1e:	680b      	ldr	r3, [r1, #0]
 8021b20:	9001      	str	r0, [sp, #4]
 8021b22:	4690      	mov	r8, r2
 8021b24:	1c9c      	adds	r4, r3, #2
 8021b26:	46a1      	mov	r9, r4
 8021b28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021b2c:	2830      	cmp	r0, #48	@ 0x30
 8021b2e:	d0fa      	beq.n	8021b26 <__gethex+0x12>
 8021b30:	eba9 0303 	sub.w	r3, r9, r3
 8021b34:	f1a3 0b02 	sub.w	fp, r3, #2
 8021b38:	f7ff ffd7 	bl	8021aea <__hexdig_fun>
 8021b3c:	4605      	mov	r5, r0
 8021b3e:	2800      	cmp	r0, #0
 8021b40:	d168      	bne.n	8021c14 <__gethex+0x100>
 8021b42:	49a0      	ldr	r1, [pc, #640]	@ (8021dc4 <__gethex+0x2b0>)
 8021b44:	2201      	movs	r2, #1
 8021b46:	4648      	mov	r0, r9
 8021b48:	f7ff ff26 	bl	8021998 <strncmp>
 8021b4c:	4607      	mov	r7, r0
 8021b4e:	2800      	cmp	r0, #0
 8021b50:	d167      	bne.n	8021c22 <__gethex+0x10e>
 8021b52:	f899 0001 	ldrb.w	r0, [r9, #1]
 8021b56:	4626      	mov	r6, r4
 8021b58:	f7ff ffc7 	bl	8021aea <__hexdig_fun>
 8021b5c:	2800      	cmp	r0, #0
 8021b5e:	d062      	beq.n	8021c26 <__gethex+0x112>
 8021b60:	4623      	mov	r3, r4
 8021b62:	7818      	ldrb	r0, [r3, #0]
 8021b64:	2830      	cmp	r0, #48	@ 0x30
 8021b66:	4699      	mov	r9, r3
 8021b68:	f103 0301 	add.w	r3, r3, #1
 8021b6c:	d0f9      	beq.n	8021b62 <__gethex+0x4e>
 8021b6e:	f7ff ffbc 	bl	8021aea <__hexdig_fun>
 8021b72:	fab0 f580 	clz	r5, r0
 8021b76:	096d      	lsrs	r5, r5, #5
 8021b78:	f04f 0b01 	mov.w	fp, #1
 8021b7c:	464a      	mov	r2, r9
 8021b7e:	4616      	mov	r6, r2
 8021b80:	3201      	adds	r2, #1
 8021b82:	7830      	ldrb	r0, [r6, #0]
 8021b84:	f7ff ffb1 	bl	8021aea <__hexdig_fun>
 8021b88:	2800      	cmp	r0, #0
 8021b8a:	d1f8      	bne.n	8021b7e <__gethex+0x6a>
 8021b8c:	498d      	ldr	r1, [pc, #564]	@ (8021dc4 <__gethex+0x2b0>)
 8021b8e:	2201      	movs	r2, #1
 8021b90:	4630      	mov	r0, r6
 8021b92:	f7ff ff01 	bl	8021998 <strncmp>
 8021b96:	2800      	cmp	r0, #0
 8021b98:	d13f      	bne.n	8021c1a <__gethex+0x106>
 8021b9a:	b944      	cbnz	r4, 8021bae <__gethex+0x9a>
 8021b9c:	1c74      	adds	r4, r6, #1
 8021b9e:	4622      	mov	r2, r4
 8021ba0:	4616      	mov	r6, r2
 8021ba2:	3201      	adds	r2, #1
 8021ba4:	7830      	ldrb	r0, [r6, #0]
 8021ba6:	f7ff ffa0 	bl	8021aea <__hexdig_fun>
 8021baa:	2800      	cmp	r0, #0
 8021bac:	d1f8      	bne.n	8021ba0 <__gethex+0x8c>
 8021bae:	1ba4      	subs	r4, r4, r6
 8021bb0:	00a7      	lsls	r7, r4, #2
 8021bb2:	7833      	ldrb	r3, [r6, #0]
 8021bb4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8021bb8:	2b50      	cmp	r3, #80	@ 0x50
 8021bba:	d13e      	bne.n	8021c3a <__gethex+0x126>
 8021bbc:	7873      	ldrb	r3, [r6, #1]
 8021bbe:	2b2b      	cmp	r3, #43	@ 0x2b
 8021bc0:	d033      	beq.n	8021c2a <__gethex+0x116>
 8021bc2:	2b2d      	cmp	r3, #45	@ 0x2d
 8021bc4:	d034      	beq.n	8021c30 <__gethex+0x11c>
 8021bc6:	1c71      	adds	r1, r6, #1
 8021bc8:	2400      	movs	r4, #0
 8021bca:	7808      	ldrb	r0, [r1, #0]
 8021bcc:	f7ff ff8d 	bl	8021aea <__hexdig_fun>
 8021bd0:	1e43      	subs	r3, r0, #1
 8021bd2:	b2db      	uxtb	r3, r3
 8021bd4:	2b18      	cmp	r3, #24
 8021bd6:	d830      	bhi.n	8021c3a <__gethex+0x126>
 8021bd8:	f1a0 0210 	sub.w	r2, r0, #16
 8021bdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021be0:	f7ff ff83 	bl	8021aea <__hexdig_fun>
 8021be4:	f100 3cff 	add.w	ip, r0, #4294967295
 8021be8:	fa5f fc8c 	uxtb.w	ip, ip
 8021bec:	f1bc 0f18 	cmp.w	ip, #24
 8021bf0:	f04f 030a 	mov.w	r3, #10
 8021bf4:	d91e      	bls.n	8021c34 <__gethex+0x120>
 8021bf6:	b104      	cbz	r4, 8021bfa <__gethex+0xe6>
 8021bf8:	4252      	negs	r2, r2
 8021bfa:	4417      	add	r7, r2
 8021bfc:	f8ca 1000 	str.w	r1, [sl]
 8021c00:	b1ed      	cbz	r5, 8021c3e <__gethex+0x12a>
 8021c02:	f1bb 0f00 	cmp.w	fp, #0
 8021c06:	bf0c      	ite	eq
 8021c08:	2506      	moveq	r5, #6
 8021c0a:	2500      	movne	r5, #0
 8021c0c:	4628      	mov	r0, r5
 8021c0e:	b005      	add	sp, #20
 8021c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c14:	2500      	movs	r5, #0
 8021c16:	462c      	mov	r4, r5
 8021c18:	e7b0      	b.n	8021b7c <__gethex+0x68>
 8021c1a:	2c00      	cmp	r4, #0
 8021c1c:	d1c7      	bne.n	8021bae <__gethex+0x9a>
 8021c1e:	4627      	mov	r7, r4
 8021c20:	e7c7      	b.n	8021bb2 <__gethex+0x9e>
 8021c22:	464e      	mov	r6, r9
 8021c24:	462f      	mov	r7, r5
 8021c26:	2501      	movs	r5, #1
 8021c28:	e7c3      	b.n	8021bb2 <__gethex+0x9e>
 8021c2a:	2400      	movs	r4, #0
 8021c2c:	1cb1      	adds	r1, r6, #2
 8021c2e:	e7cc      	b.n	8021bca <__gethex+0xb6>
 8021c30:	2401      	movs	r4, #1
 8021c32:	e7fb      	b.n	8021c2c <__gethex+0x118>
 8021c34:	fb03 0002 	mla	r0, r3, r2, r0
 8021c38:	e7ce      	b.n	8021bd8 <__gethex+0xc4>
 8021c3a:	4631      	mov	r1, r6
 8021c3c:	e7de      	b.n	8021bfc <__gethex+0xe8>
 8021c3e:	eba6 0309 	sub.w	r3, r6, r9
 8021c42:	3b01      	subs	r3, #1
 8021c44:	4629      	mov	r1, r5
 8021c46:	2b07      	cmp	r3, #7
 8021c48:	dc0a      	bgt.n	8021c60 <__gethex+0x14c>
 8021c4a:	9801      	ldr	r0, [sp, #4]
 8021c4c:	f7fe f82e 	bl	801fcac <_Balloc>
 8021c50:	4604      	mov	r4, r0
 8021c52:	b940      	cbnz	r0, 8021c66 <__gethex+0x152>
 8021c54:	4b5c      	ldr	r3, [pc, #368]	@ (8021dc8 <__gethex+0x2b4>)
 8021c56:	4602      	mov	r2, r0
 8021c58:	21e4      	movs	r1, #228	@ 0xe4
 8021c5a:	485c      	ldr	r0, [pc, #368]	@ (8021dcc <__gethex+0x2b8>)
 8021c5c:	f7fd f972 	bl	801ef44 <__assert_func>
 8021c60:	3101      	adds	r1, #1
 8021c62:	105b      	asrs	r3, r3, #1
 8021c64:	e7ef      	b.n	8021c46 <__gethex+0x132>
 8021c66:	f100 0a14 	add.w	sl, r0, #20
 8021c6a:	2300      	movs	r3, #0
 8021c6c:	4655      	mov	r5, sl
 8021c6e:	469b      	mov	fp, r3
 8021c70:	45b1      	cmp	r9, r6
 8021c72:	d337      	bcc.n	8021ce4 <__gethex+0x1d0>
 8021c74:	f845 bb04 	str.w	fp, [r5], #4
 8021c78:	eba5 050a 	sub.w	r5, r5, sl
 8021c7c:	10ad      	asrs	r5, r5, #2
 8021c7e:	6125      	str	r5, [r4, #16]
 8021c80:	4658      	mov	r0, fp
 8021c82:	f7fe f905 	bl	801fe90 <__hi0bits>
 8021c86:	016d      	lsls	r5, r5, #5
 8021c88:	f8d8 6000 	ldr.w	r6, [r8]
 8021c8c:	1a2d      	subs	r5, r5, r0
 8021c8e:	42b5      	cmp	r5, r6
 8021c90:	dd54      	ble.n	8021d3c <__gethex+0x228>
 8021c92:	1bad      	subs	r5, r5, r6
 8021c94:	4629      	mov	r1, r5
 8021c96:	4620      	mov	r0, r4
 8021c98:	f7fe fc99 	bl	80205ce <__any_on>
 8021c9c:	4681      	mov	r9, r0
 8021c9e:	b178      	cbz	r0, 8021cc0 <__gethex+0x1ac>
 8021ca0:	1e6b      	subs	r3, r5, #1
 8021ca2:	1159      	asrs	r1, r3, #5
 8021ca4:	f003 021f 	and.w	r2, r3, #31
 8021ca8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021cac:	f04f 0901 	mov.w	r9, #1
 8021cb0:	fa09 f202 	lsl.w	r2, r9, r2
 8021cb4:	420a      	tst	r2, r1
 8021cb6:	d003      	beq.n	8021cc0 <__gethex+0x1ac>
 8021cb8:	454b      	cmp	r3, r9
 8021cba:	dc36      	bgt.n	8021d2a <__gethex+0x216>
 8021cbc:	f04f 0902 	mov.w	r9, #2
 8021cc0:	4629      	mov	r1, r5
 8021cc2:	4620      	mov	r0, r4
 8021cc4:	f7ff febf 	bl	8021a46 <rshift>
 8021cc8:	442f      	add	r7, r5
 8021cca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021cce:	42bb      	cmp	r3, r7
 8021cd0:	da42      	bge.n	8021d58 <__gethex+0x244>
 8021cd2:	9801      	ldr	r0, [sp, #4]
 8021cd4:	4621      	mov	r1, r4
 8021cd6:	f7fe f829 	bl	801fd2c <_Bfree>
 8021cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021cdc:	2300      	movs	r3, #0
 8021cde:	6013      	str	r3, [r2, #0]
 8021ce0:	25a3      	movs	r5, #163	@ 0xa3
 8021ce2:	e793      	b.n	8021c0c <__gethex+0xf8>
 8021ce4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021ce8:	2a2e      	cmp	r2, #46	@ 0x2e
 8021cea:	d012      	beq.n	8021d12 <__gethex+0x1fe>
 8021cec:	2b20      	cmp	r3, #32
 8021cee:	d104      	bne.n	8021cfa <__gethex+0x1e6>
 8021cf0:	f845 bb04 	str.w	fp, [r5], #4
 8021cf4:	f04f 0b00 	mov.w	fp, #0
 8021cf8:	465b      	mov	r3, fp
 8021cfa:	7830      	ldrb	r0, [r6, #0]
 8021cfc:	9303      	str	r3, [sp, #12]
 8021cfe:	f7ff fef4 	bl	8021aea <__hexdig_fun>
 8021d02:	9b03      	ldr	r3, [sp, #12]
 8021d04:	f000 000f 	and.w	r0, r0, #15
 8021d08:	4098      	lsls	r0, r3
 8021d0a:	ea4b 0b00 	orr.w	fp, fp, r0
 8021d0e:	3304      	adds	r3, #4
 8021d10:	e7ae      	b.n	8021c70 <__gethex+0x15c>
 8021d12:	45b1      	cmp	r9, r6
 8021d14:	d8ea      	bhi.n	8021cec <__gethex+0x1d8>
 8021d16:	492b      	ldr	r1, [pc, #172]	@ (8021dc4 <__gethex+0x2b0>)
 8021d18:	9303      	str	r3, [sp, #12]
 8021d1a:	2201      	movs	r2, #1
 8021d1c:	4630      	mov	r0, r6
 8021d1e:	f7ff fe3b 	bl	8021998 <strncmp>
 8021d22:	9b03      	ldr	r3, [sp, #12]
 8021d24:	2800      	cmp	r0, #0
 8021d26:	d1e1      	bne.n	8021cec <__gethex+0x1d8>
 8021d28:	e7a2      	b.n	8021c70 <__gethex+0x15c>
 8021d2a:	1ea9      	subs	r1, r5, #2
 8021d2c:	4620      	mov	r0, r4
 8021d2e:	f7fe fc4e 	bl	80205ce <__any_on>
 8021d32:	2800      	cmp	r0, #0
 8021d34:	d0c2      	beq.n	8021cbc <__gethex+0x1a8>
 8021d36:	f04f 0903 	mov.w	r9, #3
 8021d3a:	e7c1      	b.n	8021cc0 <__gethex+0x1ac>
 8021d3c:	da09      	bge.n	8021d52 <__gethex+0x23e>
 8021d3e:	1b75      	subs	r5, r6, r5
 8021d40:	4621      	mov	r1, r4
 8021d42:	9801      	ldr	r0, [sp, #4]
 8021d44:	462a      	mov	r2, r5
 8021d46:	f7fe fa09 	bl	802015c <__lshift>
 8021d4a:	1b7f      	subs	r7, r7, r5
 8021d4c:	4604      	mov	r4, r0
 8021d4e:	f100 0a14 	add.w	sl, r0, #20
 8021d52:	f04f 0900 	mov.w	r9, #0
 8021d56:	e7b8      	b.n	8021cca <__gethex+0x1b6>
 8021d58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021d5c:	42bd      	cmp	r5, r7
 8021d5e:	dd6f      	ble.n	8021e40 <__gethex+0x32c>
 8021d60:	1bed      	subs	r5, r5, r7
 8021d62:	42ae      	cmp	r6, r5
 8021d64:	dc34      	bgt.n	8021dd0 <__gethex+0x2bc>
 8021d66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021d6a:	2b02      	cmp	r3, #2
 8021d6c:	d022      	beq.n	8021db4 <__gethex+0x2a0>
 8021d6e:	2b03      	cmp	r3, #3
 8021d70:	d024      	beq.n	8021dbc <__gethex+0x2a8>
 8021d72:	2b01      	cmp	r3, #1
 8021d74:	d115      	bne.n	8021da2 <__gethex+0x28e>
 8021d76:	42ae      	cmp	r6, r5
 8021d78:	d113      	bne.n	8021da2 <__gethex+0x28e>
 8021d7a:	2e01      	cmp	r6, #1
 8021d7c:	d10b      	bne.n	8021d96 <__gethex+0x282>
 8021d7e:	9a02      	ldr	r2, [sp, #8]
 8021d80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021d84:	6013      	str	r3, [r2, #0]
 8021d86:	2301      	movs	r3, #1
 8021d88:	6123      	str	r3, [r4, #16]
 8021d8a:	f8ca 3000 	str.w	r3, [sl]
 8021d8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021d90:	2562      	movs	r5, #98	@ 0x62
 8021d92:	601c      	str	r4, [r3, #0]
 8021d94:	e73a      	b.n	8021c0c <__gethex+0xf8>
 8021d96:	1e71      	subs	r1, r6, #1
 8021d98:	4620      	mov	r0, r4
 8021d9a:	f7fe fc18 	bl	80205ce <__any_on>
 8021d9e:	2800      	cmp	r0, #0
 8021da0:	d1ed      	bne.n	8021d7e <__gethex+0x26a>
 8021da2:	9801      	ldr	r0, [sp, #4]
 8021da4:	4621      	mov	r1, r4
 8021da6:	f7fd ffc1 	bl	801fd2c <_Bfree>
 8021daa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021dac:	2300      	movs	r3, #0
 8021dae:	6013      	str	r3, [r2, #0]
 8021db0:	2550      	movs	r5, #80	@ 0x50
 8021db2:	e72b      	b.n	8021c0c <__gethex+0xf8>
 8021db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d1f3      	bne.n	8021da2 <__gethex+0x28e>
 8021dba:	e7e0      	b.n	8021d7e <__gethex+0x26a>
 8021dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	d1dd      	bne.n	8021d7e <__gethex+0x26a>
 8021dc2:	e7ee      	b.n	8021da2 <__gethex+0x28e>
 8021dc4:	08025808 	.word	0x08025808
 8021dc8:	080256a0 	.word	0x080256a0
 8021dcc:	08025879 	.word	0x08025879
 8021dd0:	1e6f      	subs	r7, r5, #1
 8021dd2:	f1b9 0f00 	cmp.w	r9, #0
 8021dd6:	d130      	bne.n	8021e3a <__gethex+0x326>
 8021dd8:	b127      	cbz	r7, 8021de4 <__gethex+0x2d0>
 8021dda:	4639      	mov	r1, r7
 8021ddc:	4620      	mov	r0, r4
 8021dde:	f7fe fbf6 	bl	80205ce <__any_on>
 8021de2:	4681      	mov	r9, r0
 8021de4:	117a      	asrs	r2, r7, #5
 8021de6:	2301      	movs	r3, #1
 8021de8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021dec:	f007 071f 	and.w	r7, r7, #31
 8021df0:	40bb      	lsls	r3, r7
 8021df2:	4213      	tst	r3, r2
 8021df4:	4629      	mov	r1, r5
 8021df6:	4620      	mov	r0, r4
 8021df8:	bf18      	it	ne
 8021dfa:	f049 0902 	orrne.w	r9, r9, #2
 8021dfe:	f7ff fe22 	bl	8021a46 <rshift>
 8021e02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8021e06:	1b76      	subs	r6, r6, r5
 8021e08:	2502      	movs	r5, #2
 8021e0a:	f1b9 0f00 	cmp.w	r9, #0
 8021e0e:	d047      	beq.n	8021ea0 <__gethex+0x38c>
 8021e10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021e14:	2b02      	cmp	r3, #2
 8021e16:	d015      	beq.n	8021e44 <__gethex+0x330>
 8021e18:	2b03      	cmp	r3, #3
 8021e1a:	d017      	beq.n	8021e4c <__gethex+0x338>
 8021e1c:	2b01      	cmp	r3, #1
 8021e1e:	d109      	bne.n	8021e34 <__gethex+0x320>
 8021e20:	f019 0f02 	tst.w	r9, #2
 8021e24:	d006      	beq.n	8021e34 <__gethex+0x320>
 8021e26:	f8da 3000 	ldr.w	r3, [sl]
 8021e2a:	ea49 0903 	orr.w	r9, r9, r3
 8021e2e:	f019 0f01 	tst.w	r9, #1
 8021e32:	d10e      	bne.n	8021e52 <__gethex+0x33e>
 8021e34:	f045 0510 	orr.w	r5, r5, #16
 8021e38:	e032      	b.n	8021ea0 <__gethex+0x38c>
 8021e3a:	f04f 0901 	mov.w	r9, #1
 8021e3e:	e7d1      	b.n	8021de4 <__gethex+0x2d0>
 8021e40:	2501      	movs	r5, #1
 8021e42:	e7e2      	b.n	8021e0a <__gethex+0x2f6>
 8021e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e46:	f1c3 0301 	rsb	r3, r3, #1
 8021e4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d0f0      	beq.n	8021e34 <__gethex+0x320>
 8021e52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021e56:	f104 0314 	add.w	r3, r4, #20
 8021e5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021e5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021e62:	f04f 0c00 	mov.w	ip, #0
 8021e66:	4618      	mov	r0, r3
 8021e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021e70:	d01b      	beq.n	8021eaa <__gethex+0x396>
 8021e72:	3201      	adds	r2, #1
 8021e74:	6002      	str	r2, [r0, #0]
 8021e76:	2d02      	cmp	r5, #2
 8021e78:	f104 0314 	add.w	r3, r4, #20
 8021e7c:	d13c      	bne.n	8021ef8 <__gethex+0x3e4>
 8021e7e:	f8d8 2000 	ldr.w	r2, [r8]
 8021e82:	3a01      	subs	r2, #1
 8021e84:	42b2      	cmp	r2, r6
 8021e86:	d109      	bne.n	8021e9c <__gethex+0x388>
 8021e88:	1171      	asrs	r1, r6, #5
 8021e8a:	2201      	movs	r2, #1
 8021e8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021e90:	f006 061f 	and.w	r6, r6, #31
 8021e94:	fa02 f606 	lsl.w	r6, r2, r6
 8021e98:	421e      	tst	r6, r3
 8021e9a:	d13a      	bne.n	8021f12 <__gethex+0x3fe>
 8021e9c:	f045 0520 	orr.w	r5, r5, #32
 8021ea0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021ea2:	601c      	str	r4, [r3, #0]
 8021ea4:	9b02      	ldr	r3, [sp, #8]
 8021ea6:	601f      	str	r7, [r3, #0]
 8021ea8:	e6b0      	b.n	8021c0c <__gethex+0xf8>
 8021eaa:	4299      	cmp	r1, r3
 8021eac:	f843 cc04 	str.w	ip, [r3, #-4]
 8021eb0:	d8d9      	bhi.n	8021e66 <__gethex+0x352>
 8021eb2:	68a3      	ldr	r3, [r4, #8]
 8021eb4:	459b      	cmp	fp, r3
 8021eb6:	db17      	blt.n	8021ee8 <__gethex+0x3d4>
 8021eb8:	6861      	ldr	r1, [r4, #4]
 8021eba:	9801      	ldr	r0, [sp, #4]
 8021ebc:	3101      	adds	r1, #1
 8021ebe:	f7fd fef5 	bl	801fcac <_Balloc>
 8021ec2:	4681      	mov	r9, r0
 8021ec4:	b918      	cbnz	r0, 8021ece <__gethex+0x3ba>
 8021ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8021f30 <__gethex+0x41c>)
 8021ec8:	4602      	mov	r2, r0
 8021eca:	2184      	movs	r1, #132	@ 0x84
 8021ecc:	e6c5      	b.n	8021c5a <__gethex+0x146>
 8021ece:	6922      	ldr	r2, [r4, #16]
 8021ed0:	3202      	adds	r2, #2
 8021ed2:	f104 010c 	add.w	r1, r4, #12
 8021ed6:	0092      	lsls	r2, r2, #2
 8021ed8:	300c      	adds	r0, #12
 8021eda:	f7fd f81e 	bl	801ef1a <memcpy>
 8021ede:	4621      	mov	r1, r4
 8021ee0:	9801      	ldr	r0, [sp, #4]
 8021ee2:	f7fd ff23 	bl	801fd2c <_Bfree>
 8021ee6:	464c      	mov	r4, r9
 8021ee8:	6923      	ldr	r3, [r4, #16]
 8021eea:	1c5a      	adds	r2, r3, #1
 8021eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021ef0:	6122      	str	r2, [r4, #16]
 8021ef2:	2201      	movs	r2, #1
 8021ef4:	615a      	str	r2, [r3, #20]
 8021ef6:	e7be      	b.n	8021e76 <__gethex+0x362>
 8021ef8:	6922      	ldr	r2, [r4, #16]
 8021efa:	455a      	cmp	r2, fp
 8021efc:	dd0b      	ble.n	8021f16 <__gethex+0x402>
 8021efe:	2101      	movs	r1, #1
 8021f00:	4620      	mov	r0, r4
 8021f02:	f7ff fda0 	bl	8021a46 <rshift>
 8021f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021f0a:	3701      	adds	r7, #1
 8021f0c:	42bb      	cmp	r3, r7
 8021f0e:	f6ff aee0 	blt.w	8021cd2 <__gethex+0x1be>
 8021f12:	2501      	movs	r5, #1
 8021f14:	e7c2      	b.n	8021e9c <__gethex+0x388>
 8021f16:	f016 061f 	ands.w	r6, r6, #31
 8021f1a:	d0fa      	beq.n	8021f12 <__gethex+0x3fe>
 8021f1c:	4453      	add	r3, sl
 8021f1e:	f1c6 0620 	rsb	r6, r6, #32
 8021f22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021f26:	f7fd ffb3 	bl	801fe90 <__hi0bits>
 8021f2a:	42b0      	cmp	r0, r6
 8021f2c:	dbe7      	blt.n	8021efe <__gethex+0x3ea>
 8021f2e:	e7f0      	b.n	8021f12 <__gethex+0x3fe>
 8021f30:	080256a0 	.word	0x080256a0

08021f34 <L_shift>:
 8021f34:	f1c2 0208 	rsb	r2, r2, #8
 8021f38:	0092      	lsls	r2, r2, #2
 8021f3a:	b570      	push	{r4, r5, r6, lr}
 8021f3c:	f1c2 0620 	rsb	r6, r2, #32
 8021f40:	6843      	ldr	r3, [r0, #4]
 8021f42:	6804      	ldr	r4, [r0, #0]
 8021f44:	fa03 f506 	lsl.w	r5, r3, r6
 8021f48:	432c      	orrs	r4, r5
 8021f4a:	40d3      	lsrs	r3, r2
 8021f4c:	6004      	str	r4, [r0, #0]
 8021f4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8021f52:	4288      	cmp	r0, r1
 8021f54:	d3f4      	bcc.n	8021f40 <L_shift+0xc>
 8021f56:	bd70      	pop	{r4, r5, r6, pc}

08021f58 <__match>:
 8021f58:	b530      	push	{r4, r5, lr}
 8021f5a:	6803      	ldr	r3, [r0, #0]
 8021f5c:	3301      	adds	r3, #1
 8021f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021f62:	b914      	cbnz	r4, 8021f6a <__match+0x12>
 8021f64:	6003      	str	r3, [r0, #0]
 8021f66:	2001      	movs	r0, #1
 8021f68:	bd30      	pop	{r4, r5, pc}
 8021f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8021f72:	2d19      	cmp	r5, #25
 8021f74:	bf98      	it	ls
 8021f76:	3220      	addls	r2, #32
 8021f78:	42a2      	cmp	r2, r4
 8021f7a:	d0f0      	beq.n	8021f5e <__match+0x6>
 8021f7c:	2000      	movs	r0, #0
 8021f7e:	e7f3      	b.n	8021f68 <__match+0x10>

08021f80 <__hexnan>:
 8021f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f84:	680b      	ldr	r3, [r1, #0]
 8021f86:	6801      	ldr	r1, [r0, #0]
 8021f88:	115e      	asrs	r6, r3, #5
 8021f8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021f8e:	f013 031f 	ands.w	r3, r3, #31
 8021f92:	b087      	sub	sp, #28
 8021f94:	bf18      	it	ne
 8021f96:	3604      	addne	r6, #4
 8021f98:	2500      	movs	r5, #0
 8021f9a:	1f37      	subs	r7, r6, #4
 8021f9c:	4682      	mov	sl, r0
 8021f9e:	4690      	mov	r8, r2
 8021fa0:	9301      	str	r3, [sp, #4]
 8021fa2:	f846 5c04 	str.w	r5, [r6, #-4]
 8021fa6:	46b9      	mov	r9, r7
 8021fa8:	463c      	mov	r4, r7
 8021faa:	9502      	str	r5, [sp, #8]
 8021fac:	46ab      	mov	fp, r5
 8021fae:	784a      	ldrb	r2, [r1, #1]
 8021fb0:	1c4b      	adds	r3, r1, #1
 8021fb2:	9303      	str	r3, [sp, #12]
 8021fb4:	b342      	cbz	r2, 8022008 <__hexnan+0x88>
 8021fb6:	4610      	mov	r0, r2
 8021fb8:	9105      	str	r1, [sp, #20]
 8021fba:	9204      	str	r2, [sp, #16]
 8021fbc:	f7ff fd95 	bl	8021aea <__hexdig_fun>
 8021fc0:	2800      	cmp	r0, #0
 8021fc2:	d151      	bne.n	8022068 <__hexnan+0xe8>
 8021fc4:	9a04      	ldr	r2, [sp, #16]
 8021fc6:	9905      	ldr	r1, [sp, #20]
 8021fc8:	2a20      	cmp	r2, #32
 8021fca:	d818      	bhi.n	8021ffe <__hexnan+0x7e>
 8021fcc:	9b02      	ldr	r3, [sp, #8]
 8021fce:	459b      	cmp	fp, r3
 8021fd0:	dd13      	ble.n	8021ffa <__hexnan+0x7a>
 8021fd2:	454c      	cmp	r4, r9
 8021fd4:	d206      	bcs.n	8021fe4 <__hexnan+0x64>
 8021fd6:	2d07      	cmp	r5, #7
 8021fd8:	dc04      	bgt.n	8021fe4 <__hexnan+0x64>
 8021fda:	462a      	mov	r2, r5
 8021fdc:	4649      	mov	r1, r9
 8021fde:	4620      	mov	r0, r4
 8021fe0:	f7ff ffa8 	bl	8021f34 <L_shift>
 8021fe4:	4544      	cmp	r4, r8
 8021fe6:	d952      	bls.n	802208e <__hexnan+0x10e>
 8021fe8:	2300      	movs	r3, #0
 8021fea:	f1a4 0904 	sub.w	r9, r4, #4
 8021fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8021ff2:	f8cd b008 	str.w	fp, [sp, #8]
 8021ff6:	464c      	mov	r4, r9
 8021ff8:	461d      	mov	r5, r3
 8021ffa:	9903      	ldr	r1, [sp, #12]
 8021ffc:	e7d7      	b.n	8021fae <__hexnan+0x2e>
 8021ffe:	2a29      	cmp	r2, #41	@ 0x29
 8022000:	d157      	bne.n	80220b2 <__hexnan+0x132>
 8022002:	3102      	adds	r1, #2
 8022004:	f8ca 1000 	str.w	r1, [sl]
 8022008:	f1bb 0f00 	cmp.w	fp, #0
 802200c:	d051      	beq.n	80220b2 <__hexnan+0x132>
 802200e:	454c      	cmp	r4, r9
 8022010:	d206      	bcs.n	8022020 <__hexnan+0xa0>
 8022012:	2d07      	cmp	r5, #7
 8022014:	dc04      	bgt.n	8022020 <__hexnan+0xa0>
 8022016:	462a      	mov	r2, r5
 8022018:	4649      	mov	r1, r9
 802201a:	4620      	mov	r0, r4
 802201c:	f7ff ff8a 	bl	8021f34 <L_shift>
 8022020:	4544      	cmp	r4, r8
 8022022:	d936      	bls.n	8022092 <__hexnan+0x112>
 8022024:	f1a8 0204 	sub.w	r2, r8, #4
 8022028:	4623      	mov	r3, r4
 802202a:	f853 1b04 	ldr.w	r1, [r3], #4
 802202e:	f842 1f04 	str.w	r1, [r2, #4]!
 8022032:	429f      	cmp	r7, r3
 8022034:	d2f9      	bcs.n	802202a <__hexnan+0xaa>
 8022036:	1b3b      	subs	r3, r7, r4
 8022038:	f023 0303 	bic.w	r3, r3, #3
 802203c:	3304      	adds	r3, #4
 802203e:	3401      	adds	r4, #1
 8022040:	3e03      	subs	r6, #3
 8022042:	42b4      	cmp	r4, r6
 8022044:	bf88      	it	hi
 8022046:	2304      	movhi	r3, #4
 8022048:	4443      	add	r3, r8
 802204a:	2200      	movs	r2, #0
 802204c:	f843 2b04 	str.w	r2, [r3], #4
 8022050:	429f      	cmp	r7, r3
 8022052:	d2fb      	bcs.n	802204c <__hexnan+0xcc>
 8022054:	683b      	ldr	r3, [r7, #0]
 8022056:	b91b      	cbnz	r3, 8022060 <__hexnan+0xe0>
 8022058:	4547      	cmp	r7, r8
 802205a:	d128      	bne.n	80220ae <__hexnan+0x12e>
 802205c:	2301      	movs	r3, #1
 802205e:	603b      	str	r3, [r7, #0]
 8022060:	2005      	movs	r0, #5
 8022062:	b007      	add	sp, #28
 8022064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022068:	3501      	adds	r5, #1
 802206a:	2d08      	cmp	r5, #8
 802206c:	f10b 0b01 	add.w	fp, fp, #1
 8022070:	dd06      	ble.n	8022080 <__hexnan+0x100>
 8022072:	4544      	cmp	r4, r8
 8022074:	d9c1      	bls.n	8021ffa <__hexnan+0x7a>
 8022076:	2300      	movs	r3, #0
 8022078:	f844 3c04 	str.w	r3, [r4, #-4]
 802207c:	2501      	movs	r5, #1
 802207e:	3c04      	subs	r4, #4
 8022080:	6822      	ldr	r2, [r4, #0]
 8022082:	f000 000f 	and.w	r0, r0, #15
 8022086:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802208a:	6020      	str	r0, [r4, #0]
 802208c:	e7b5      	b.n	8021ffa <__hexnan+0x7a>
 802208e:	2508      	movs	r5, #8
 8022090:	e7b3      	b.n	8021ffa <__hexnan+0x7a>
 8022092:	9b01      	ldr	r3, [sp, #4]
 8022094:	2b00      	cmp	r3, #0
 8022096:	d0dd      	beq.n	8022054 <__hexnan+0xd4>
 8022098:	f1c3 0320 	rsb	r3, r3, #32
 802209c:	f04f 32ff 	mov.w	r2, #4294967295
 80220a0:	40da      	lsrs	r2, r3
 80220a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80220a6:	4013      	ands	r3, r2
 80220a8:	f846 3c04 	str.w	r3, [r6, #-4]
 80220ac:	e7d2      	b.n	8022054 <__hexnan+0xd4>
 80220ae:	3f04      	subs	r7, #4
 80220b0:	e7d0      	b.n	8022054 <__hexnan+0xd4>
 80220b2:	2004      	movs	r0, #4
 80220b4:	e7d5      	b.n	8022062 <__hexnan+0xe2>

080220b6 <__ascii_mbtowc>:
 80220b6:	b082      	sub	sp, #8
 80220b8:	b901      	cbnz	r1, 80220bc <__ascii_mbtowc+0x6>
 80220ba:	a901      	add	r1, sp, #4
 80220bc:	b142      	cbz	r2, 80220d0 <__ascii_mbtowc+0x1a>
 80220be:	b14b      	cbz	r3, 80220d4 <__ascii_mbtowc+0x1e>
 80220c0:	7813      	ldrb	r3, [r2, #0]
 80220c2:	600b      	str	r3, [r1, #0]
 80220c4:	7812      	ldrb	r2, [r2, #0]
 80220c6:	1e10      	subs	r0, r2, #0
 80220c8:	bf18      	it	ne
 80220ca:	2001      	movne	r0, #1
 80220cc:	b002      	add	sp, #8
 80220ce:	4770      	bx	lr
 80220d0:	4610      	mov	r0, r2
 80220d2:	e7fb      	b.n	80220cc <__ascii_mbtowc+0x16>
 80220d4:	f06f 0001 	mvn.w	r0, #1
 80220d8:	e7f8      	b.n	80220cc <__ascii_mbtowc+0x16>

080220da <_realloc_r>:
 80220da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220de:	4680      	mov	r8, r0
 80220e0:	4615      	mov	r5, r2
 80220e2:	460c      	mov	r4, r1
 80220e4:	b921      	cbnz	r1, 80220f0 <_realloc_r+0x16>
 80220e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80220ea:	4611      	mov	r1, r2
 80220ec:	f7fb bbaa 	b.w	801d844 <_malloc_r>
 80220f0:	b92a      	cbnz	r2, 80220fe <_realloc_r+0x24>
 80220f2:	f7fd fd91 	bl	801fc18 <_free_r>
 80220f6:	2400      	movs	r4, #0
 80220f8:	4620      	mov	r0, r4
 80220fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80220fe:	f000 f86b 	bl	80221d8 <_malloc_usable_size_r>
 8022102:	4285      	cmp	r5, r0
 8022104:	4606      	mov	r6, r0
 8022106:	d802      	bhi.n	802210e <_realloc_r+0x34>
 8022108:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802210c:	d8f4      	bhi.n	80220f8 <_realloc_r+0x1e>
 802210e:	4629      	mov	r1, r5
 8022110:	4640      	mov	r0, r8
 8022112:	f7fb fb97 	bl	801d844 <_malloc_r>
 8022116:	4607      	mov	r7, r0
 8022118:	2800      	cmp	r0, #0
 802211a:	d0ec      	beq.n	80220f6 <_realloc_r+0x1c>
 802211c:	42b5      	cmp	r5, r6
 802211e:	462a      	mov	r2, r5
 8022120:	4621      	mov	r1, r4
 8022122:	bf28      	it	cs
 8022124:	4632      	movcs	r2, r6
 8022126:	f7fc fef8 	bl	801ef1a <memcpy>
 802212a:	4621      	mov	r1, r4
 802212c:	4640      	mov	r0, r8
 802212e:	f7fd fd73 	bl	801fc18 <_free_r>
 8022132:	463c      	mov	r4, r7
 8022134:	e7e0      	b.n	80220f8 <_realloc_r+0x1e>

08022136 <__ascii_wctomb>:
 8022136:	4603      	mov	r3, r0
 8022138:	4608      	mov	r0, r1
 802213a:	b141      	cbz	r1, 802214e <__ascii_wctomb+0x18>
 802213c:	2aff      	cmp	r2, #255	@ 0xff
 802213e:	d904      	bls.n	802214a <__ascii_wctomb+0x14>
 8022140:	228a      	movs	r2, #138	@ 0x8a
 8022142:	601a      	str	r2, [r3, #0]
 8022144:	f04f 30ff 	mov.w	r0, #4294967295
 8022148:	4770      	bx	lr
 802214a:	700a      	strb	r2, [r1, #0]
 802214c:	2001      	movs	r0, #1
 802214e:	4770      	bx	lr

08022150 <_raise_r>:
 8022150:	291f      	cmp	r1, #31
 8022152:	b538      	push	{r3, r4, r5, lr}
 8022154:	4605      	mov	r5, r0
 8022156:	460c      	mov	r4, r1
 8022158:	d904      	bls.n	8022164 <_raise_r+0x14>
 802215a:	2316      	movs	r3, #22
 802215c:	6003      	str	r3, [r0, #0]
 802215e:	f04f 30ff 	mov.w	r0, #4294967295
 8022162:	bd38      	pop	{r3, r4, r5, pc}
 8022164:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022166:	b112      	cbz	r2, 802216e <_raise_r+0x1e>
 8022168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802216c:	b94b      	cbnz	r3, 8022182 <_raise_r+0x32>
 802216e:	4628      	mov	r0, r5
 8022170:	f000 f830 	bl	80221d4 <_getpid_r>
 8022174:	4622      	mov	r2, r4
 8022176:	4601      	mov	r1, r0
 8022178:	4628      	mov	r0, r5
 802217a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802217e:	f000 b817 	b.w	80221b0 <_kill_r>
 8022182:	2b01      	cmp	r3, #1
 8022184:	d00a      	beq.n	802219c <_raise_r+0x4c>
 8022186:	1c59      	adds	r1, r3, #1
 8022188:	d103      	bne.n	8022192 <_raise_r+0x42>
 802218a:	2316      	movs	r3, #22
 802218c:	6003      	str	r3, [r0, #0]
 802218e:	2001      	movs	r0, #1
 8022190:	e7e7      	b.n	8022162 <_raise_r+0x12>
 8022192:	2100      	movs	r1, #0
 8022194:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022198:	4620      	mov	r0, r4
 802219a:	4798      	blx	r3
 802219c:	2000      	movs	r0, #0
 802219e:	e7e0      	b.n	8022162 <_raise_r+0x12>

080221a0 <raise>:
 80221a0:	4b02      	ldr	r3, [pc, #8]	@ (80221ac <raise+0xc>)
 80221a2:	4601      	mov	r1, r0
 80221a4:	6818      	ldr	r0, [r3, #0]
 80221a6:	f7ff bfd3 	b.w	8022150 <_raise_r>
 80221aa:	bf00      	nop
 80221ac:	20000148 	.word	0x20000148

080221b0 <_kill_r>:
 80221b0:	b538      	push	{r3, r4, r5, lr}
 80221b2:	4d07      	ldr	r5, [pc, #28]	@ (80221d0 <_kill_r+0x20>)
 80221b4:	2300      	movs	r3, #0
 80221b6:	4604      	mov	r4, r0
 80221b8:	4608      	mov	r0, r1
 80221ba:	4611      	mov	r1, r2
 80221bc:	602b      	str	r3, [r5, #0]
 80221be:	f7e1 fe43 	bl	8003e48 <_kill>
 80221c2:	1c43      	adds	r3, r0, #1
 80221c4:	d102      	bne.n	80221cc <_kill_r+0x1c>
 80221c6:	682b      	ldr	r3, [r5, #0]
 80221c8:	b103      	cbz	r3, 80221cc <_kill_r+0x1c>
 80221ca:	6023      	str	r3, [r4, #0]
 80221cc:	bd38      	pop	{r3, r4, r5, pc}
 80221ce:	bf00      	nop
 80221d0:	200037a8 	.word	0x200037a8

080221d4 <_getpid_r>:
 80221d4:	f7e1 be30 	b.w	8003e38 <_getpid>

080221d8 <_malloc_usable_size_r>:
 80221d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80221dc:	1f18      	subs	r0, r3, #4
 80221de:	2b00      	cmp	r3, #0
 80221e0:	bfbc      	itt	lt
 80221e2:	580b      	ldrlt	r3, [r1, r0]
 80221e4:	18c0      	addlt	r0, r0, r3
 80221e6:	4770      	bx	lr

080221e8 <_init>:
 80221e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221ea:	bf00      	nop
 80221ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221ee:	bc08      	pop	{r3}
 80221f0:	469e      	mov	lr, r3
 80221f2:	4770      	bx	lr

080221f4 <_fini>:
 80221f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221f6:	bf00      	nop
 80221f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80221fa:	bc08      	pop	{r3}
 80221fc:	469e      	mov	lr, r3
 80221fe:	4770      	bx	lr
