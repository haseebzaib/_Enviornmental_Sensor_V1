
_Enviornmental_Sensor_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020570  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002990  08020710  08020710  00030710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080230a0  080230a0  00040338  2**0
                  CONTENTS
  4 .ARM          00000008  080230a0  080230a0  000330a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080230a8  080230a8  00040338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080230a8  080230a8  000330a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080230ac  080230ac  000330ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  080230b0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003370  20000338  080233e8  00040338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036a8  080233e8  000436a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040338  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037b47  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008177  00000000  00000000  00077eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e08  00000000  00000000  00080028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ac8  00000000  00000000  00082e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f79  00000000  00000000  000858f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003fd93  00000000  00000000  000ab871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b36d4  00000000  00000000  000eb604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ecd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d714  00000000  00000000  0019ed28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000338 	.word	0x20000338
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080206f8 	.word	0x080206f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000033c 	.word	0x2000033c
 80001dc:	080206f8 	.word	0x080206f8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <setSoftPWM>:
#define battery_Low  3.5f
#define battery_very_low 3.3f

#define lengthSoftPWMbuffer 1000
uint32_t dataA[lengthSoftPWMbuffer];
static void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	81fb      	strh	r3, [r7, #14]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e03d      	b.n	80010b8 <setSoftPWM+0x90>
		if (i < duty) { //set pin
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	429a      	cmp	r2, r3
 8001042:	d21b      	bcs.n	800107c <setSoftPWM+0x54>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	43db      	mvns	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	440b      	add	r3, r1
 800105e:	4002      	ands	r2, r0
 8001060:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	6819      	ldr	r1, [r3, #0]
 800106c:	89fa      	ldrh	r2, [r7, #14]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4403      	add	r3, r0
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e01a      	b.n	80010b2 <setSoftPWM+0x8a>
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	43db      	mvns	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	440b      	add	r3, r1
 8001094:	4002      	ands	r2, r0
 8001096:	601a      	str	r2, [r3, #0]
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4403      	add	r3, r0
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < lengthSoftPWMbuffer; ++i) {
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010be:	d3bd      	bcc.n	800103c <setSoftPWM+0x14>
		}
	}

}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <toggle_blue_led>:

uint32_t usb_time_ = 50000;
uint32_t prev_usb_time_ = 0;
uint8_t stop_measurement = 1;

void toggle_blue_led() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	if (blue_led_pwm_val != 0) {
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <toggle_blue_led+0x34>)
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <toggle_blue_led+0x16>
		blue_led_pwm_val = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <toggle_blue_led+0x34>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	801a      	strh	r2, [r3, #0]
 80010e4:	e003      	b.n	80010ee <toggle_blue_led+0x1e>
	} else {
		blue_led_pwm_val = 1000;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <toggle_blue_led+0x34>)
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	801a      	strh	r2, [r3, #0]
	}
	BLUE_LED_PWM(blue_led_pwm_val); //we toggle red led
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <toggle_blue_led+0x34>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <toggle_blue_led+0x38>)
 80010f6:	4619      	mov	r1, r3
 80010f8:	2008      	movs	r0, #8
 80010fa:	f7ff ff95 	bl	8001028 <setSoftPWM>
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200012fa 	.word	0x200012fa
 8001108:	20000354 	.word	0x20000354

0800110c <pir_interrupt>:

//##############Interrupts###############
void pir_interrupt() {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	debug_pir_motion = 1;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <pir_interrupt+0x2c>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8001116:	2101      	movs	r1, #1
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <pir_interrupt+0x30>)
 800111a:	f004 fd57 	bl	8005bcc <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <pir_interrupt+0x20>
		pir_motion_flag = 1;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <pir_interrupt+0x34>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	} else {
		pir_motion_flag = 0;
	}
}
 800112a:	e002      	b.n	8001132 <pir_interrupt+0x26>
		pir_motion_flag = 0;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <pir_interrupt+0x34>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200014e1 	.word	0x200014e1
 800113c:	40020000 	.word	0x40020000
 8001140:	200014e0 	.word	0x200014e0

08001144 <timer_interrupt>:

void timer_interrupt() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	time_keep = time_keep + 1;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <timer_interrupt+0x2c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <timer_interrupt+0x2c>)
 8001150:	6013      	str	r3, [r2, #0]
	if (time_keep > 65535) {
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <timer_interrupt+0x2c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115a:	d302      	bcc.n	8001162 <timer_interrupt+0x1e>
		time_keep = 0;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <timer_interrupt+0x2c>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
//
//	if(!save_param && !start_usb_timer)//if both are off and for some reason timer is still on we shut it down
//	{
//		HAL_TIM_Base_Stop_IT(&htim2);
//	}
	prev_sleep_time = HAL_GetTick();
 8001162:	f002 fd67 	bl	8003c34 <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	4a02      	ldr	r2, [pc, #8]	; (8001174 <timer_interrupt+0x30>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200014d4 	.word	0x200014d4
 8001174:	20001718 	.word	0x20001718

08001178 <power_off_detect>:

void power_off_detect() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(SW_DET_GPIO_Port, SW_DET_Pin)) {
 800117c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <power_off_detect+0x3c>)
 8001182:	f004 fd23 	bl	8005bcc <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d110      	bne.n	80011ae <power_off_detect+0x36>
		_RunTime_Packet.pwr_off_det = 1;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <power_off_detect+0x40>)
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		GREEN_LED_PWM(disable_led);
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <power_off_detect+0x44>)
 8001196:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
		RED_LED_PWM(disable_led);
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <power_off_detect+0x44>)
 800119e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
		BLUE_LED_PWM(0);
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <power_off_detect+0x48>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	2008      	movs	r0, #8
 80011aa:	f7ff ff3d 	bl	8001028 <setSoftPWM>
	}
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020000 	.word	0x40020000
 80011b8:	20001494 	.word	0x20001494
 80011bc:	40000400 	.word	0x40000400
 80011c0:	20000354 	.word	0x20000354

080011c4 <MX_DMA_Init>:

//######################################

static void MX_DMA_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_DMA_Init+0x3c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <MX_DMA_Init+0x3c>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_DMA_Init+0x3c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2044      	movs	r0, #68	; 0x44
 80011ec:	f003 fb05 	bl	80047fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80011f0:	2044      	movs	r0, #68	; 0x44
 80011f2:	f003 fb1e 	bl	8004832 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <pwr_off_detected>:

static void pwr_off_detected() {
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.pwr_off_det) {
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <pwr_off_detected+0x3c>)
 800120a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800120e:	2b00      	cmp	r3, #0
 8001210:	d014      	beq.n	800123c <pwr_off_detected+0x38>
		_RunTime_Packet.pwr_off_det = 0;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <pwr_off_detected+0x3c>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		GREEN_LED_PWM(disable_led);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <pwr_off_detected+0x40>)
 800121c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
		RED_LED_PWM(disable_led);
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <pwr_off_detected+0x40>)
 8001224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
		BLUE_LED_PWM(0);
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <pwr_off_detected+0x44>)
 800122c:	2100      	movs	r1, #0
 800122e:	2008      	movs	r0, #8
 8001230:	f7ff fefa 	bl	8001028 <setSoftPWM>
		HAL_Delay(5000);
 8001234:	f241 3088 	movw	r0, #5000	; 0x1388
 8001238:	f002 fd08 	bl	8003c4c <HAL_Delay>

	}
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20001494 	.word	0x20001494
 8001244:	40000400 	.word	0x40000400
 8001248:	20000354 	.word	0x20000354

0800124c <clock_speed_slow>:
/*
 * setting clock speed to 250khz
 */
static void clock_speed_slow() {
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	; 0x50
 8001250:	af00      	add	r7, sp, #0
//
//	/* Disable PLL */
//	RCC->CR &= ~RCC_CR_PLLON;

//we will set clock speed to 250khz
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2230      	movs	r2, #48	; 0x30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f01a fcae 	bl	801bbbc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <clock_speed_slow+0xbc>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	4a23      	ldr	r2, [pc, #140]	; (8001308 <clock_speed_slow+0xbc>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127e:	6413      	str	r3, [r2, #64]	; 0x40
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <clock_speed_slow+0xbc>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <clock_speed_slow+0xc0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001298:	4a1c      	ldr	r2, [pc, #112]	; (800130c <clock_speed_slow+0xc0>)
 800129a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <clock_speed_slow+0xc0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80012ac:	2306      	movs	r3, #6
 80012ae:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b4:	2301      	movs	r3, #1
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b8:	2310      	movs	r3, #16
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4618      	mov	r0, r3
 80012c6:	f007 f8f1 	bl	80084ac <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <clock_speed_slow+0x88>
		Error_Handler();
 80012d0:	f001 ff70 	bl	80031b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80012dc:	23c0      	movs	r3, #192	; 0xc0
 80012de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 fb54 	bl	800899c <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <clock_speed_slow+0xb2>
		Error_Handler();
 80012fa:	f001 ff5b 	bl	80031b4 <Error_Handler>
	}

}
 80012fe:	bf00      	nop
 8001300:	3750      	adds	r7, #80	; 0x50
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <clock_speed_high>:

/**
 * setting clock speed to 84Mhz
 */
static void clock_speed_high() {
 8001310:	b580      	push	{r7, lr}
 8001312:	b094      	sub	sp, #80	; 0x50
 8001314:	af00      	add	r7, sp, #0
	//we will set clock speed to 84Mhz
	uint16_t timeout;

	/* Enable HSI clock */
	RCC->CR |= RCC_CR_HSION;
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <clock_speed_high+0x11c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a44      	ldr	r2, [pc, #272]	; (800142c <clock_speed_high+0x11c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is ready */
	timeout = 0xFFFF;
 8001322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001326:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	while (!(RCC->CR & RCC_CR_HSIRDY) && timeout--)
 800132a:	bf00      	nop
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <clock_speed_high+0x11c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <clock_speed_high+0x36>
 8001338:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	f8a7 204e 	strh.w	r2, [r7, #78]	; 0x4e
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f2      	bne.n	800132c <clock_speed_high+0x1c>
		;

	/* Select HSI clock as main clock */
	RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_SW)) | RCC_CFGR_SW_HSI;
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <clock_speed_high+0x11c>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4a38      	ldr	r2, [pc, #224]	; (800142c <clock_speed_high+0x11c>)
 800134c:	f023 0303 	bic.w	r3, r3, #3
 8001350:	6093      	str	r3, [r2, #8]

	/* Disable PLL */
	RCC->CR &= ~RCC_CR_PLLON;
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <clock_speed_high+0x11c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a35      	ldr	r2, [pc, #212]	; (800142c <clock_speed_high+0x11c>)
 8001358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800135c:	6013      	str	r3, [r2, #0]

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f01a fc28 	bl	801bbbc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <clock_speed_high+0x11c>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a29      	ldr	r2, [pc, #164]	; (800142c <clock_speed_high+0x11c>)
 8001386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <clock_speed_high+0x11c>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001398:	2300      	movs	r3, #0
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <clock_speed_high+0x120>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a4:	4a22      	ldr	r2, [pc, #136]	; (8001430 <clock_speed_high+0x120>)
 80013a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <clock_speed_high+0x120>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 80013b8:	2305      	movs	r3, #5
 80013ba:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013c2:	2301      	movs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c6:	2302      	movs	r3, #2
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 80013d0:	2319      	movs	r3, #25
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80013d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013d8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013da:	2304      	movs	r3, #4
 80013dc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80013de:	2307      	movs	r3, #7
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4618      	mov	r0, r3
 80013e8:	f007 f860 	bl	80084ac <HAL_RCC_OscConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <clock_speed_high+0xe6>
		Error_Handler();
 80013f2:	f001 fedf 	bl	80031b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013f6:	230f      	movs	r3, #15
 80013f8:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fa:	2302      	movs	r3, #2
 80013fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2102      	movs	r1, #2
 8001412:	4618      	mov	r0, r3
 8001414:	f007 fac2 	bl	800899c <HAL_RCC_ClockConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <clock_speed_high+0x112>
		Error_Handler();
 800141e:	f001 fec9 	bl	80031b4 <Error_Handler>
	}

}
 8001422:	bf00      	nop
 8001424:	3750      	adds	r7, #80	; 0x50
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40007000 	.word	0x40007000

08001434 <load_param>:
/*
 * we check if there is anything stored inside internal flash
 * if nothing in available then we store our default values
 * else we take the values stroed inside the flash
 */
static void load_param() {
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

	Flash_Packet *ipFlaPar;
	ipFlaPar = (Flash_Packet*) Address_Mem;
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <load_param+0xa4>)
 800143c:	607b      	str	r3, [r7, #4]

	if (ipFlaPar->valid_pattern == m_Flash_Packet.valid_pattern) // 1. Sentence, pattern valid ?
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8b3 3195 	ldrh.w	r3, [r3, #405]	; 0x195
 8001444:	b29b      	uxth	r3, r3
 8001446:	f44f 52c2 	mov.w	r2, #6208	; 0x1840
 800144a:	4293      	cmp	r3, r2
 800144c:	d118      	bne.n	8001480 <load_param+0x4c>
			{
		memcpy(&_Flash_Packet, ipFlaPar, sizeof(Flash_Packet));
 800144e:	4a23      	ldr	r2, [pc, #140]	; (80014dc <load_param+0xa8>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f240 1397 	movw	r3, #407	; 0x197
 800145a:	461a      	mov	r2, r3
 800145c:	f01a fb86 	bl	801bb6c <memcpy>

		if (strstr(_Flash_Packet.File_Name, "devEUI")) {
 8001460:	491f      	ldr	r1, [pc, #124]	; (80014e0 <load_param+0xac>)
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <load_param+0xa8>)
 8001464:	f01b fbe5 	bl	801cc32 <strstr>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d019      	beq.n	80014a2 <load_param+0x6e>
			sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 800146e:	f000 ff73 	bl	8002358 <ver_GetUid>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	491b      	ldr	r1, [pc, #108]	; (80014e4 <load_param+0xb0>)
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <load_param+0xa8>)
 800147a:	f01b fba5 	bl	801cbc8 <siprintf>
 800147e:	e010      	b.n	80014a2 <load_param+0x6e>

	}

	else //load default param
	{
		memcpy(&_Flash_Packet, &m_Flash_Packet, sizeof(Flash_Packet));
 8001480:	4a16      	ldr	r2, [pc, #88]	; (80014dc <load_param+0xa8>)
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <load_param+0xb4>)
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f240 1397 	movw	r3, #407	; 0x197
 800148c:	461a      	mov	r2, r3
 800148e:	f01a fb6d 	bl	801bb6c <memcpy>
		sprintf(_Flash_Packet.File_Name, "%s", ver_GetUid());
 8001492:	f000 ff61 	bl	8002358 <ver_GetUid>
 8001496:	4603      	mov	r3, r0
 8001498:	461a      	mov	r2, r3
 800149a:	4912      	ldr	r1, [pc, #72]	; (80014e4 <load_param+0xb0>)
 800149c:	480f      	ldr	r0, [pc, #60]	; (80014dc <load_param+0xa8>)
 800149e:	f01b fb93 	bl	801cbc8 <siprintf>
	}

	if (strstr(_Flash_Packet.File_Format, ".CSV")) {
 80014a2:	4912      	ldr	r1, [pc, #72]	; (80014ec <load_param+0xb8>)
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <load_param+0xbc>)
 80014a6:	f01b fbc4 	bl	801cc32 <strstr>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d004      	beq.n	80014ba <load_param+0x86>
		_RunTime_Packet.fileformat_selection = 1;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <load_param+0xc0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
		_RunTime_Packet.fileformat_selection = 0;
	}

}
 80014b8:	e00a      	b.n	80014d0 <load_param+0x9c>
	} else if (strstr(_Flash_Packet.File_Format, ".JSON")) {
 80014ba:	490f      	ldr	r1, [pc, #60]	; (80014f8 <load_param+0xc4>)
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <load_param+0xbc>)
 80014be:	f01b fbb8 	bl	801cc32 <strstr>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <load_param+0x9c>
		_RunTime_Packet.fileformat_selection = 0;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <load_param+0xc0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	08060000 	.word	0x08060000
 80014dc:	200012fc 	.word	0x200012fc
 80014e0:	08020710 	.word	0x08020710
 80014e4:	08020718 	.word	0x08020718
 80014e8:	08022554 	.word	0x08022554
 80014ec:	0802071c 	.word	0x0802071c
 80014f0:	20001360 	.word	0x20001360
 80014f4:	20001494 	.word	0x20001494
 80014f8:	08020724 	.word	0x08020724

080014fc <store_param>:

/*
 * we store the whole structure inside the internal flash
 */
static uint32_t store_param() {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001502:	b672      	cpsid	i
}
 8001504:	bf00      	nop
	__disable_irq();

	uint32_t ZielAdr;
	uint32_t WrAdr;
	uint32_t QuellAdr = (uint32_t) &_Flash_Packet;
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <store_param+0xc0>)
 8001508:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 800150a:	f003 fe57 	bl	80051bc <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <store_param+0xc4>)
 8001510:	2201      	movs	r2, #1
 8001512:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <store_param+0xc4>)
 8001516:	2202      	movs	r2, #2
 8001518:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <store_param+0xc4>)
 800151c:	2210      	movs	r2, #16
 800151e:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <store_param+0xc4>)
 8001522:	2220      	movs	r2, #32
 8001524:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <store_param+0xc4>)
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <store_param+0xc4>)
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	60da      	str	r2, [r3, #12]
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001532:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <store_param+0xc4>)
 8001534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001538:	60da      	str	r2, [r3, #12]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <store_param+0xc8>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <store_param+0xc8>)
 8001542:	2202      	movs	r2, #2
 8001544:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector = FLASH_SECTOR_7;
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <store_param+0xc8>)
 8001548:	2207      	movs	r2, #7
 800154a:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = 1;
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <store_param+0xc8>)
 800154e:	2201      	movs	r2, #1
 8001550:	60da      	str	r2, [r3, #12]

	/* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	 you have to make sure that these data are rewritten before they are accessed during code
	 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	 DCRST and ICRST bits in the FLASH_CR register. */
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8001552:	463b      	mov	r3, r7
 8001554:	4619      	mov	r1, r3
 8001556:	481b      	ldr	r0, [pc, #108]	; (80015c4 <store_param+0xc8>)
 8001558:	f003 ffae 	bl	80054b8 <HAL_FLASHEx_Erase>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <store_param+0x6e>
		return HAL_FLASH_GetError();
 8001562:	f003 fe5d 	bl	8005220 <HAL_FLASH_GetError>
 8001566:	4603      	mov	r3, r0
 8001568:	e024      	b.n	80015b4 <store_param+0xb8>
	}

	ZielAdr = Address_Mem + sizeof(Flash_Packet); /* - FLASH_DOUBLE_SIZE))*/
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <store_param+0xcc>)
 800156c:	607b      	str	r3, [r7, #4]
	WrAdr = Address_Mem; // Pointer on 1st entry
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <store_param+0xd0>)
 8001570:	60fb      	str	r3, [r7, #12]

	while (WrAdr < ZielAdr) {
 8001572:	e016      	b.n	80015a2 <store_param+0xa6>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
				*(uint64_t*) QuellAdr) == HAL_OK)
 8001574:	68bb      	ldr	r3, [r7, #8]
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, WrAdr,
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	2002      	movs	r0, #2
 800157e:	f003 fdc9 	bl	8005114 <HAL_FLASH_Program>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d106      	bne.n	8001596 <store_param+0x9a>

		{
			WrAdr += 4;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3304      	adds	r3, #4
 800158c:	60fb      	str	r3, [r7, #12]
			QuellAdr += 4;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3304      	adds	r3, #4
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	e005      	b.n	80015a2 <store_param+0xa6>

		} else {

			HAL_FLASH_Lock();
 8001596:	f003 fe33 	bl	8005200 <HAL_FLASH_Lock>
			return HAL_FLASH_GetError();
 800159a:	f003 fe41 	bl	8005220 <HAL_FLASH_GetError>
 800159e:	4603      	mov	r3, r0
 80015a0:	e008      	b.n	80015b4 <store_param+0xb8>
	while (WrAdr < ZielAdr) {
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3e4      	bcc.n	8001574 <store_param+0x78>

		}

	}
	HAL_FLASH_Lock();
 80015aa:	f003 fe29 	bl	8005200 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80015ae:	b662      	cpsie	i
}
 80015b0:	bf00      	nop
//	if(start_usb_timer)
//	{
//		HAL_TIM_Base_Start_IT(&htim2);
//	}

	return 0;
 80015b2:	2300      	movs	r3, #0

}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200012fc 	.word	0x200012fc
 80015c0:	40023c00 	.word	0x40023c00
 80015c4:	20001734 	.word	0x20001734
 80015c8:	08060197 	.word	0x08060197
 80015cc:	08060000 	.word	0x08060000

080015d0 <save_data>:
/*
 * This is to save data in internal flash. when user change something that needs to be saved in flash for future use
 * we wait for 30seconds, so in this time if user also changes something else we write to flash at once then
 */
static void save_data() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	if (save_param) {
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <save_data+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d022      	beq.n	8001622 <save_data+0x52>
		if (start_timer) {
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <save_data+0x5c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00b      	beq.n	80015fc <save_data+0x2c>
			HAL_TIM_Base_Stop_IT(&htim2);
 80015e4:	4812      	ldr	r0, [pc, #72]	; (8001630 <save_data+0x60>)
 80015e6:	f009 fa21 	bl	800aa2c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 80015ea:	4811      	ldr	r0, [pc, #68]	; (8001630 <save_data+0x60>)
 80015ec:	f009 f9bc 	bl	800a968 <HAL_TIM_Base_Start_IT>
			time_keep = 0;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <save_data+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
			start_timer = 0;
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <save_data+0x5c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
		}

		if (time_keep >= 300) //save after 30secs when data occur happens
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <save_data+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001604:	d30d      	bcc.n	8001622 <save_data+0x52>
				{
			//if(!start_usb_timer) //if usb timer is on dont stop timer as usb will stop itself when its operation will end
			//{
			HAL_TIM_Base_Stop_IT(&htim2);
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <save_data+0x60>)
 8001608:	f009 fa10 	bl	800aa2c <HAL_TIM_Base_Stop_IT>
			//}
			store_param();
 800160c:	f7ff ff76 	bl	80014fc <store_param>
			time_keep = 0;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <save_data+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
			save_param = 0;
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <save_data+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
			start_timer = 0;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <save_data+0x5c>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200014d1 	.word	0x200014d1
 800162c:	200014d2 	.word	0x200014d2
 8001630:	200018d0 	.word	0x200018d0
 8001634:	200014d4 	.word	0x200014d4

08001638 <init_scd4x_i2c>:
static void init_scd4x_i2c() {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

	sensirion_i2c_hal_init();
 800163e:	f011 fdf7 	bl	8013230 <sensirion_i2c_hal_init>
	scd4x_wake_up();
 8001642:	f011 fca7 	bl	8012f94 <scd4x_wake_up>
	scd4x_stop_periodic_measurement();
 8001646:	f011 fb3f 	bl	8012cc8 <scd4x_stop_periodic_measurement>
	scd4x_reinit();
 800164a:	f011 fc57 	bl	8012efc <scd4x_reinit>
	uint16_t serial_0;
	uint16_t serial_1;
	uint16_t serial_2;
	scd4x_get_serial_number(&serial_0, &serial_1, &serial_2);
 800164e:	1cba      	adds	r2, r7, #2
 8001650:	1d39      	adds	r1, r7, #4
 8001652:	1dbb      	adds	r3, r7, #6
 8001654:	4618      	mov	r0, r3
 8001656:	f011 fbf9 	bl	8012e4c <scd4x_get_serial_number>

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <get_scd4x_measurement>:
void get_scd4x_measurement() {
 8001664:	b580      	push	{r7, lr}
 8001666:	b090      	sub	sp, #64	; 0x40
 8001668:	af02      	add	r7, sp, #8
	int16_t error = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	86fb      	strh	r3, [r7, #54]	; 0x36

	error = scd4x_start_periodic_measurement();
 800166e:	f011 fa7b 	bl	8012b68 <scd4x_start_periodic_measurement>
 8001672:	4603      	mov	r3, r0
 8001674:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensirion_i2c_hal_sleep_usec(100000);
 8001676:	483e      	ldr	r0, [pc, #248]	; (8001770 <get_scd4x_measurement+0x10c>)
 8001678:	f011 fe50 	bl	801331c <sensirion_i2c_hal_sleep_usec>
	bool data_ready_flag = false;
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	error = scd4x_get_data_ready_flag(&data_ready_flag);
 8001682:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8001686:	4618      	mov	r0, r3
 8001688:	f011 fb94 	bl	8012db4 <scd4x_get_data_ready_flag>
 800168c:	4603      	mov	r3, r0
 800168e:	86fb      	strh	r3, [r7, #54]	; 0x36

	if (data_ready_flag) {
 8001690:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001694:	2b00      	cmp	r3, #0
 8001696:	d066      	beq.n	8001766 <get_scd4x_measurement+0x102>
		error = scd4x_read_measurement(&_RunTime_Packet.co2,
 8001698:	4a36      	ldr	r2, [pc, #216]	; (8001774 <get_scd4x_measurement+0x110>)
 800169a:	4937      	ldr	r1, [pc, #220]	; (8001778 <get_scd4x_measurement+0x114>)
 800169c:	4837      	ldr	r0, [pc, #220]	; (800177c <get_scd4x_measurement+0x118>)
 800169e:	f011 fae1 	bl	8012c64 <scd4x_read_measurement>
 80016a2:	4603      	mov	r3, r0
 80016a4:	86fb      	strh	r3, [r7, #54]	; 0x36
				&_RunTime_Packet.temperature, &_RunTime_Packet.humidity);
		_RunTime_Packet.temperature = _RunTime_Packet.temperature / 1000;
 80016a6:	4b35      	ldr	r3, [pc, #212]	; (800177c <get_scd4x_measurement+0x118>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a35      	ldr	r2, [pc, #212]	; (8001780 <get_scd4x_measurement+0x11c>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1192      	asrs	r2, r2, #6
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a31      	ldr	r2, [pc, #196]	; (800177c <get_scd4x_measurement+0x118>)
 80016b8:	6053      	str	r3, [r2, #4]
		_RunTime_Packet.humidity = _RunTime_Packet.humidity / 1000;
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <get_scd4x_measurement+0x118>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4a30      	ldr	r2, [pc, #192]	; (8001780 <get_scd4x_measurement+0x11c>)
 80016c0:	fb82 1203 	smull	r1, r2, r2, r3
 80016c4:	1192      	asrs	r2, r2, #6
 80016c6:	17db      	asrs	r3, r3, #31
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	4a2c      	ldr	r2, [pc, #176]	; (800177c <get_scd4x_measurement+0x118>)
 80016cc:	6093      	str	r3, [r2, #8]

		if (debug_scd_pm) {
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <get_scd4x_measurement+0x120>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d047      	beq.n	8001766 <get_scd4x_measurement+0x102>
			char buf[50];
			if (error) {
 80016d6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d013      	beq.n	8001706 <get_scd4x_measurement+0xa2>
				sprintf(buf, "Error executing scd4x_read_measurement(): %i\n",
 80016de:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80016e2:	463b      	mov	r3, r7
 80016e4:	4928      	ldr	r1, [pc, #160]	; (8001788 <get_scd4x_measurement+0x124>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f01b fa6e 	bl	801cbc8 <siprintf>
						error);
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 80016ec:	463b      	mov	r3, r7
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd80 	bl	80001f4 <strlen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4639      	mov	r1, r7
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	4823      	ldr	r0, [pc, #140]	; (800178c <get_scd4x_measurement+0x128>)
 8001700:	f00a f950 	bl	800b9a4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
			}
		}
	}
	//error = scd4x_stop_periodic_measurement();
}
 8001704:	e02f      	b.n	8001766 <get_scd4x_measurement+0x102>
			} else if (_RunTime_Packet.co2 == 0) {
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <get_scd4x_measurement+0x118>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d111      	bne.n	8001732 <get_scd4x_measurement+0xce>
				sprintf(buf, "Invalid sample detected, skipping.\n");
 800170e:	463b      	mov	r3, r7
 8001710:	491f      	ldr	r1, [pc, #124]	; (8001790 <get_scd4x_measurement+0x12c>)
 8001712:	4618      	mov	r0, r3
 8001714:	f01b fa58 	bl	801cbc8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 8001718:	463b      	mov	r3, r7
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd6a 	bl	80001f4 <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	b29a      	uxth	r2, r3
 8001724:	4639      	mov	r1, r7
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	4818      	ldr	r0, [pc, #96]	; (800178c <get_scd4x_measurement+0x128>)
 800172c:	f00a f93a 	bl	800b9a4 <HAL_UART_Transmit>
}
 8001730:	e019      	b.n	8001766 <get_scd4x_measurement+0x102>
						_RunTime_Packet.co2, _RunTime_Packet.temperature,
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <get_scd4x_measurement+0x118>)
 8001734:	881b      	ldrh	r3, [r3, #0]
				sprintf(buf, "Co2: %d, Temperature: %ld C, Humidity: %ld \r\n",
 8001736:	4619      	mov	r1, r3
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <get_scd4x_measurement+0x118>)
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <get_scd4x_measurement+0x118>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4638      	mov	r0, r7
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	460a      	mov	r2, r1
 8001748:	4912      	ldr	r1, [pc, #72]	; (8001794 <get_scd4x_measurement+0x130>)
 800174a:	f01b fa3d 	bl	801cbc8 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800174e:	463b      	mov	r3, r7
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fd4f 	bl	80001f4 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	4639      	mov	r1, r7
 800175c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001760:	480a      	ldr	r0, [pc, #40]	; (800178c <get_scd4x_measurement+0x128>)
 8001762:	f00a f91f 	bl	800b9a4 <HAL_UART_Transmit>
}
 8001766:	bf00      	nop
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	000186a0 	.word	0x000186a0
 8001774:	2000149c 	.word	0x2000149c
 8001778:	20001498 	.word	0x20001498
 800177c:	20001494 	.word	0x20001494
 8001780:	10624dd3 	.word	0x10624dd3
 8001784:	200014d0 	.word	0x200014d0
 8001788:	0802072c 	.word	0x0802072c
 800178c:	200019c0 	.word	0x200019c0
 8001790:	0802075c 	.word	0x0802075c
 8001794:	08020780 	.word	0x08020780

08001798 <init_sps30>:
static void init_sps30() {
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af00      	add	r7, sp, #0
	char serial[SPS30_MAX_SERIAL_LEN];

	int16_t ret;
	sensirion_sleep_usec(1000000); /* sleep for 1s */
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <init_sps30+0x34>)
 80017a0:	f012 f9b0 	bl	8013b04 <sensirion_sleep_usec>

	sensirion_uart_open();
 80017a4:	f012 f8f8 	bl	8013998 <sensirion_uart_open>

	//printf("SPS30 sensor probing successful\r\n");

	struct sps30_version_information version_information;
	ret = sps30_read_version(&version_information);
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4618      	mov	r0, r3
 80017ac:	f012 fac9 	bl	8013d42 <sps30_read_version>
 80017b0:	4603      	mov	r3, r0
 80017b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
//				version_information.hardware_revision,
//				version_information.shdlc_major,
//				version_information.shdlc_minor);
	}

	ret = sps30_get_serial(serial);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4618      	mov	r0, r3
 80017ba:	f012 f9b7 	bl	8013b2c <sps30_get_serial>
 80017be:	4603      	mov	r3, r0
 80017c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
//	if (ret)
//	{
//		//printf("error %d setting the auto-clean interval\r\n", ret);
//	}

}
 80017c2:	bf00      	nop
 80017c4:	3730      	adds	r7, #48	; 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	000f4240 	.word	0x000f4240

080017d0 <get_sps30_measurement>:
void get_sps30_measurement() {
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b0a0      	sub	sp, #128	; 0x80
 80017d6:	af06      	add	r7, sp, #24

	int16_t ret;
	char buffer[100];
	ret = sps30_start_measurement();
 80017d8:	f012 f9d4 	bl	8013b84 <sps30_start_measurement>
 80017dc:	4603      	mov	r3, r0
 80017de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
//			sprintf(buffer,"error starting measurement\r\n");
//			HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);

	}

	ret = sps30_read_measurement(&m);
 80017e2:	483a      	ldr	r0, [pc, #232]	; (80018cc <get_sps30_measurement+0xfc>)
 80017e4:	f012 f9fa 	bl	8013bdc <sps30_read_measurement>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	_RunTime_Packet.pm1_0 = m.mc_1p0;
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <get_sps30_measurement+0xfc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a37      	ldr	r2, [pc, #220]	; (80018d0 <get_sps30_measurement+0x100>)
 80017f4:	6113      	str	r3, [r2, #16]
	_RunTime_Packet.pm2_5 = m.mc_2p5;
 80017f6:	4b35      	ldr	r3, [pc, #212]	; (80018cc <get_sps30_measurement+0xfc>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a35      	ldr	r2, [pc, #212]	; (80018d0 <get_sps30_measurement+0x100>)
 80017fc:	6153      	str	r3, [r2, #20]
	_RunTime_Packet.pm4_0 = m.mc_4p0;
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <get_sps30_measurement+0xfc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4a33      	ldr	r2, [pc, #204]	; (80018d0 <get_sps30_measurement+0x100>)
 8001804:	6193      	str	r3, [r2, #24]
	_RunTime_Packet.pm10_0 = m.mc_10p0;
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <get_sps30_measurement+0xfc>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	4a31      	ldr	r2, [pc, #196]	; (80018d0 <get_sps30_measurement+0x100>)
 800180c:	61d3      	str	r3, [r2, #28]

	if (ret < 0) {
 800180e:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8001812:	2b00      	cmp	r3, #0
 8001814:	db54      	blt.n	80018c0 <get_sps30_measurement+0xf0>
//				printf("error reading measurement\r\n");
//				HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
//				}

	} else {
		if (debug_scd_pm) {
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <get_sps30_measurement+0x104>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d050      	beq.n	80018c0 <get_sps30_measurement+0xf0>
			if (SPS30_IS_ERR_STATE(ret)) {
 800181e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001822:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001826:	b21b      	sxth	r3, r3
 8001828:	f240 12ff 	movw	r2, #511	; 0x1ff
 800182c:	4293      	cmp	r3, r2
 800182e:	d113      	bne.n	8001858 <get_sps30_measurement+0x88>
				sprintf(buffer,
 8001830:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001834:	b2da      	uxtb	r2, r3
 8001836:	463b      	mov	r3, r7
 8001838:	4927      	ldr	r1, [pc, #156]	; (80018d8 <get_sps30_measurement+0x108>)
 800183a:	4618      	mov	r0, r3
 800183c:	f01b f9c4 	bl	801cbc8 <siprintf>
						"Chip state: %u - measurements may not be accurate\r\n",
						SPS30_GET_ERR_STATE(ret));
				HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 8001840:	463b      	mov	r3, r7
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fcd6 	bl	80001f4 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	4639      	mov	r1, r7
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	4822      	ldr	r0, [pc, #136]	; (80018dc <get_sps30_measurement+0x10c>)
 8001854:	f00a f8a6 	bl	800b9a4 <HAL_UART_Transmit>
						1000);
			}
			sprintf(buffer,
					"%0.2f pm1.0\r\n%0.2f pm2.5\r\n%0.2f pm4.0\r\n%0.2f pm10.0\r\n",
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <get_sps30_measurement+0xfc>)
 800185a:	681b      	ldr	r3, [r3, #0]
			sprintf(buffer,
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe8b 	bl	8000578 <__aeabi_f2d>
 8001862:	4682      	mov	sl, r0
 8001864:	468b      	mov	fp, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <get_sps30_measurement+0xfc>)
 8001868:	685b      	ldr	r3, [r3, #4]
			sprintf(buffer,
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe84 	bl	8000578 <__aeabi_f2d>
 8001870:	4604      	mov	r4, r0
 8001872:	460d      	mov	r5, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <get_sps30_measurement+0xfc>)
 8001876:	689b      	ldr	r3, [r3, #8]
			sprintf(buffer,
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe7d 	bl	8000578 <__aeabi_f2d>
 800187e:	4680      	mov	r8, r0
 8001880:	4689      	mov	r9, r1
					m.mc_1p0, m.mc_2p5, m.mc_4p0, m.mc_10p0);
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <get_sps30_measurement+0xfc>)
 8001884:	68db      	ldr	r3, [r3, #12]
			sprintf(buffer,
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe76 	bl	8000578 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4638      	mov	r0, r7
 8001892:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001896:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800189a:	e9cd 4500 	strd	r4, r5, [sp]
 800189e:	4652      	mov	r2, sl
 80018a0:	465b      	mov	r3, fp
 80018a2:	490f      	ldr	r1, [pc, #60]	; (80018e0 <get_sps30_measurement+0x110>)
 80018a4:	f01b f990 	bl	801cbc8 <siprintf>

			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 1000);
 80018a8:	463b      	mov	r3, r7
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fca2 	bl	80001f4 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4639      	mov	r1, r7
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <get_sps30_measurement+0x10c>)
 80018bc:	f00a f872 	bl	800b9a4 <HAL_UART_Transmit>
		}
	}

	//	ret =	sps30_stop_measurement();

}
 80018c0:	bf00      	nop
 80018c2:	3768      	adds	r7, #104	; 0x68
 80018c4:	46bd      	mov	sp, r7
 80018c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ca:	bf00      	nop
 80018cc:	200016f0 	.word	0x200016f0
 80018d0:	20001494 	.word	0x20001494
 80018d4:	200014d0 	.word	0x200014d0
 80018d8:	080207b0 	.word	0x080207b0
 80018dc:	200019c0 	.word	0x200019c0
 80018e0:	080207e4 	.word	0x080207e4

080018e4 <check_peripheral_error>:
static void check_peripheral_error() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	if (_RunTime_Packet.console_uart_error) {
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <check_peripheral_error+0x70>)
 80018ea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <check_peripheral_error+0x1a>
		_RunTime_Packet.console_uart_error = 0; //we clear it and reset the peripherals
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <check_peripheral_error+0x70>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		console_uart_init();
 80018fa:	f00f f9f9 	bl	8010cf0 <console_uart_init>
	}

	if (_RunTime_Packet.sps30_uart_error) {
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <check_peripheral_error+0x70>)
 8001900:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <check_peripheral_error+0x50>
		_RunTime_Packet.sps30_uart_error = 0;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <check_peripheral_error+0x70>)
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		disable_5v();
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	4810      	ldr	r0, [pc, #64]	; (8001958 <check_peripheral_error+0x74>)
 8001918:	f004 f970 	bl	8005bfc <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800191c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001920:	f002 f994 	bl	8003c4c <HAL_Delay>
		enable_5v();
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <check_peripheral_error+0x74>)
 800192c:	f004 f966 	bl	8005bfc <HAL_GPIO_WritePin>
		init_sps30();
 8001930:	f7ff ff32 	bl	8001798 <init_sps30>
	}

	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (0x62 << 1), 5, 100)
 8001934:	2364      	movs	r3, #100	; 0x64
 8001936:	2205      	movs	r2, #5
 8001938:	21c4      	movs	r1, #196	; 0xc4
 800193a:	4808      	ldr	r0, [pc, #32]	; (800195c <check_peripheral_error+0x78>)
 800193c:	f004 fe28 	bl	8006590 <HAL_I2C_IsDeviceReady>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <check_peripheral_error+0x6a>
			!= HAL_OK) {

		_RunTime_Packet.scd4x_i2c_error = 1;
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <check_peripheral_error+0x70>)
 8001948:	2201      	movs	r2, #1
 800194a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20001494 	.word	0x20001494
 8001958:	40020400 	.word	0x40020400
 800195c:	20001790 	.word	0x20001790

08001960 <sensor_calibration>:
static void sensor_calibration() {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.PM_calibration && !_RunTime_Packet.usb_detection) {
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <sensor_calibration+0x28>)
 8001966:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <sensor_calibration+0x24>
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <sensor_calibration+0x28>)
 8001970:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <sensor_calibration+0x24>
		_RunTime_Packet.PM_calibration = 0;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <sensor_calibration+0x28>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		sps30_start_manual_fan_cleaning();
 8001980:	f012 f9cb 	bl	8013d1a <sps30_start_manual_fan_cleaning>
//		scd4x_perform_forced_recalibration(
//				_RunTime_Packet._target_co2_concentration,
//				&_RunTime_Packet._frc_correction);
//	}

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20001494 	.word	0x20001494

0800198c <sleep>:
static void sleep() {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

//save stuff to sd card right here then go to sleep
	GREEN_LED_PWM(disable_led);
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <sleep+0x90>)
 8001992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001996:	635a      	str	r2, [r3, #52]	; 0x34
	RED_LED_PWM(disable_led);
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <sleep+0x90>)
 800199a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800199e:	639a      	str	r2, [r3, #56]	; 0x38
	BLUE_LED_PWM(disable_led);
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <sleep+0x94>)
 80019a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019a6:	2008      	movs	r0, #8
 80019a8:	f7ff fb3e 	bl	8001028 <setSoftPWM>

	HAL_ADC_DeInit(&hadc1);
 80019ac:	481d      	ldr	r0, [pc, #116]	; (8001a24 <sleep+0x98>)
 80019ae:	f002 f9f8 	bl	8003da2 <HAL_ADC_DeInit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "sleepTime\r\n", 11, 1000);
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	220b      	movs	r2, #11
 80019b8:	491b      	ldr	r1, [pc, #108]	; (8001a28 <sleep+0x9c>)
 80019ba:	481c      	ldr	r0, [pc, #112]	; (8001a2c <sleep+0xa0>)
 80019bc:	f009 fff2 	bl	800b9a4 <HAL_UART_Transmit>
	disable_5v();
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c6:	481a      	ldr	r0, [pc, #104]	; (8001a30 <sleep+0xa4>)
 80019c8:	f004 f918 	bl	8005bfc <HAL_GPIO_WritePin>
	disable_motion();
 80019cc:	2201      	movs	r2, #1
 80019ce:	2102      	movs	r1, #2
 80019d0:	4818      	ldr	r0, [pc, #96]	; (8001a34 <sleep+0xa8>)
 80019d2:	f004 f913 	bl	8005bfc <HAL_GPIO_WritePin>
	scd4x_stop_periodic_measurement();
 80019d6:	f011 f977 	bl	8012cc8 <scd4x_stop_periodic_measurement>
	scd4x_power_down();
 80019da:	f011 fab5 	bl	8012f48 <scd4x_power_down>
	console_uart_deinit();
 80019de:	f00f f97b 	bl	8010cd8 <console_uart_deinit>
	sensirion_i2c_hal_free();
 80019e2:	f011 fc57 	bl	8013294 <sensirion_i2c_hal_free>
	sensirion_uart_close();
 80019e6:	f012 f817 	bl	8013a18 <sensirion_uart_close>
	MX_USB_DEVICE_DeInit();
 80019ea:	f019 fa97 	bl	801af1c <MX_USB_DEVICE_DeInit>

	HAL_TIM_Base_DeInit(&htim1);
 80019ee:	4812      	ldr	r0, [pc, #72]	; (8001a38 <sleep+0xac>)
 80019f0:	f008 ff0b 	bl	800a80a <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 80019f4:	4811      	ldr	r0, [pc, #68]	; (8001a3c <sleep+0xb0>)
 80019f6:	f008 ff08 	bl	800a80a <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 80019fa:	4811      	ldr	r0, [pc, #68]	; (8001a40 <sleep+0xb4>)
 80019fc:	f008 ff05 	bl	800a80a <HAL_TIM_Base_DeInit>
	HAL_DMA_DeInit(&hdma_tim1_up);
 8001a00:	4810      	ldr	r0, [pc, #64]	; (8001a44 <sleep+0xb8>)
 8001a02:	f002 fff1 	bl	80049e8 <HAL_DMA_DeInit>

	clock_speed_slow();
 8001a06:	f7ff fc21 	bl	800124c <clock_speed_slow>

	HAL_SuspendTick();
 8001a0a:	f002 f943 	bl	8003c94 <HAL_SuspendTick>

	/*## Enter Stop Mode #######################################################*/
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2001      	movs	r0, #1
 8001a12:	f006 fd1f 	bl	8008454 <HAL_PWR_EnterSTOPMode>

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	20000354 	.word	0x20000354
 8001a24:	20001748 	.word	0x20001748
 8001a28:	0802081c 	.word	0x0802081c
 8001a2c:	200019c0 	.word	0x200019c0
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020000 	.word	0x40020000
 8001a38:	20001888 	.word	0x20001888
 8001a3c:	200018d0 	.word	0x200018d0
 8001a40:	20001918 	.word	0x20001918
 8001a44:	20001960 	.word	0x20001960

08001a48 <wakeup>:
static void wakeup() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

	//also add usb stuff

	HAL_ResumeTick();
 8001a4c:	f002 f932 	bl	8003cb4 <HAL_ResumeTick>
	clock_speed_high();
 8001a50:	f7ff fc5e 	bl	8001310 <clock_speed_high>
	enable_5v();
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5a:	4838      	ldr	r0, [pc, #224]	; (8001b3c <wakeup+0xf4>)
 8001a5c:	f004 f8ce 	bl	8005bfc <HAL_GPIO_WritePin>
	enable_motion();
 8001a60:	2200      	movs	r2, #0
 8001a62:	2102      	movs	r1, #2
 8001a64:	4836      	ldr	r0, [pc, #216]	; (8001b40 <wakeup+0xf8>)
 8001a66:	f004 f8c9 	bl	8005bfc <HAL_GPIO_WritePin>
	console_uart_init();
 8001a6a:	f00f f941 	bl	8010cf0 <console_uart_init>

	MX_DMA_Init();
 8001a6e:	f7ff fba9 	bl	80011c4 <MX_DMA_Init>
	MX_TIM1_Init();
 8001a72:	f001 f89f 	bl	8002bb4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001a76:	f001 f8ed 	bl	8002c54 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001a7a:	f001 f939 	bl	8002cf0 <MX_TIM3_Init>

	init_scd4x_i2c();
 8001a7e:	f7ff fddb 	bl	8001638 <init_scd4x_i2c>

	if (Mount_SD("/") == FR_OK) {
 8001a82:	4830      	ldr	r0, [pc, #192]	; (8001b44 <wakeup+0xfc>)
 8001a84:	f018 fbf0 	bl	801a268 <Mount_SD>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <wakeup+0x52>
		Unmount_SD("/");
 8001a8e:	482d      	ldr	r0, [pc, #180]	; (8001b44 <wakeup+0xfc>)
 8001a90:	f018 fc16 	bl	801a2c0 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 8001a94:	f019 fa54 	bl	801af40 <MX_USB_DEVICE_Init>
 8001a98:	e002      	b.n	8001aa0 <wakeup+0x58>
	} else {
		datawritten = 2;
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <wakeup+0x100>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	701a      	strb	r2, [r3, #0]
	}

	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8001aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa4:	4826      	ldr	r0, [pc, #152]	; (8001b40 <wakeup+0xf8>)
 8001aa6:	f004 f891 	bl	8005bcc <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <wakeup+0x6e>
		init_sps30();
 8001ab0:	f7ff fe72 	bl	8001798 <init_sps30>
 8001ab4:	e00f      	b.n	8001ad6 <wakeup+0x8e>
	} else {
		_RunTime_Packet.usb_detection = 1;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <wakeup+0x104>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_start_timer = 1;
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <wakeup+0x104>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 8001ac6:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <wakeup+0x108>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
		prev_usb_time_ = HAL_GetTick();
 8001acc:	f002 f8b2 	bl	8003c34 <HAL_GetTick>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a20      	ldr	r2, [pc, #128]	; (8001b54 <wakeup+0x10c>)
 8001ad4:	6013      	str	r3, [r2, #0]
	}

	HAL_TIM_Base_Start(&htim1);
 8001ad6:	4820      	ldr	r0, [pc, #128]	; (8001b58 <wakeup+0x110>)
 8001ad8:	f008 feec 	bl	800a8b4 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 8001adc:	491f      	ldr	r1, [pc, #124]	; (8001b5c <wakeup+0x114>)
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <wakeup+0x118>)
 8001ae4:	481f      	ldr	r0, [pc, #124]	; (8001b64 <wakeup+0x11c>)
 8001ae6:	f002 ffdd 	bl	8004aa4 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <wakeup+0x110>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <wakeup+0x110>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af8:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <wakeup+0x114>)
 8001afc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b00:	2008      	movs	r0, #8
 8001b02:	f7ff fa91 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8001b06:	2100      	movs	r1, #0
 8001b08:	4817      	ldr	r0, [pc, #92]	; (8001b68 <wakeup+0x120>)
 8001b0a:	f009 f817 	bl	800ab3c <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <wakeup+0x124>)
 8001b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8001b16:	2104      	movs	r1, #4
 8001b18:	4813      	ldr	r0, [pc, #76]	; (8001b68 <wakeup+0x120>)
 8001b1a:	f009 f80f 	bl	800ab3c <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <wakeup+0x124>)
 8001b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38

	pwr_off_detected();
 8001b26:	f7ff fb6d 	bl	8001204 <pwr_off_detected>

	HAL_UART_Transmit(&huart1, (uint8_t*) "wakeTime\r\n", 10, 1000);
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	220a      	movs	r2, #10
 8001b30:	490f      	ldr	r1, [pc, #60]	; (8001b70 <wakeup+0x128>)
 8001b32:	4810      	ldr	r0, [pc, #64]	; (8001b74 <wakeup+0x12c>)
 8001b34:	f009 ff36 	bl	800b9a4 <HAL_UART_Transmit>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40020000 	.word	0x40020000
 8001b44:	08020828 	.word	0x08020828
 8001b48:	20002337 	.word	0x20002337
 8001b4c:	20001494 	.word	0x20001494
 8001b50:	200014dc 	.word	0x200014dc
 8001b54:	20001720 	.word	0x20001720
 8001b58:	20001888 	.word	0x20001888
 8001b5c:	20000354 	.word	0x20000354
 8001b60:	40020418 	.word	0x40020418
 8001b64:	20001960 	.word	0x20001960
 8001b68:	20001918 	.word	0x20001918
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	0802082c 	.word	0x0802082c
 8001b74:	200019c0 	.word	0x200019c0

08001b78 <green_led_blink>:

static void green_led_blink() {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

	GREEN_LED_PWM(0);
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <green_led_blink+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b82:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b86:	f002 f861 	bl	8003c4c <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <green_led_blink+0x4c>)
 8001b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001b92:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b96:	f002 f859 	bl	8003c4c <HAL_Delay>

	GREEN_LED_PWM(0);
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <green_led_blink+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001ba0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ba4:	f002 f852 	bl	8003c4c <HAL_Delay>

	GREEN_LED_PWM(disable_led);
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <green_led_blink+0x4c>)
 8001baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(800);
 8001bb0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001bb4:	f002 f84a 	bl	8003c4c <HAL_Delay>

	GREEN_LED_PWM(0);
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <green_led_blink+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40000400 	.word	0x40000400

08001bc8 <led_awake_routine>:

static void led_awake_routine() {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001bcc:	4ba6      	ldr	r3, [pc, #664]	; (8001e68 <led_awake_routine+0x2a0>)
 8001bce:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 8195 	bne.w	8001f02 <led_awake_routine+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bdc:	48a3      	ldr	r0, [pc, #652]	; (8001e6c <led_awake_routine+0x2a4>)
 8001bde:	f003 fff5 	bl	8005bcc <HAL_GPIO_ReadPin>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d025      	beq.n	8001c34 <led_awake_routine+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001be8:	4b9f      	ldr	r3, [pc, #636]	; (8001e68 <led_awake_routine+0x2a0>)
 8001bea:	edd3 7a08 	vldr	s15, [r3, #32]
 8001bee:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001e70 <led_awake_routine+0x2a8>
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	db0d      	blt.n	8001c18 <led_awake_routine+0x50>
				GREEN_LED_PWM(0);
 8001bfc:	4b9d      	ldr	r3, [pc, #628]	; (8001e74 <led_awake_routine+0x2ac>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34
				RED_LED_PWM(disable_led);
 8001c02:	4b9c      	ldr	r3, [pc, #624]	; (8001e74 <led_awake_routine+0x2ac>)
 8001c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(disable_led);
 8001c0a:	4a9b      	ldr	r2, [pc, #620]	; (8001e78 <led_awake_routine+0x2b0>)
 8001c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c10:	2008      	movs	r0, #8
 8001c12:	f7ff fa09 	bl	8001028 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8001c16:	e196      	b.n	8001f46 <led_awake_routine+0x37e>
				GREEN_LED_PWM(disable_led);
 8001c18:	4b96      	ldr	r3, [pc, #600]	; (8001e74 <led_awake_routine+0x2ac>)
 8001c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1e:	635a      	str	r2, [r3, #52]	; 0x34
				RED_LED_PWM(disable_led);
 8001c20:	4b94      	ldr	r3, [pc, #592]	; (8001e74 <led_awake_routine+0x2ac>)
 8001c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c26:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(0);
 8001c28:	4a93      	ldr	r2, [pc, #588]	; (8001e78 <led_awake_routine+0x2b0>)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2008      	movs	r0, #8
 8001c2e:	f7ff f9fb 	bl	8001028 <setSoftPWM>
}
 8001c32:	e188      	b.n	8001f46 <led_awake_routine+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8001c34:	4a90      	ldr	r2, [pc, #576]	; (8001e78 <led_awake_routine+0x2b0>)
 8001c36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c3a:	2008      	movs	r0, #8
 8001c3c:	f7ff f9f4 	bl	8001028 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001c40:	4b89      	ldr	r3, [pc, #548]	; (8001e68 <led_awake_routine+0x2a0>)
 8001c42:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c46:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001e70 <led_awake_routine+0x2a8>
 8001c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	db38      	blt.n	8001cc6 <led_awake_routine+0xfe>
				RED_LED_PWM(disable_led);
 8001c54:	4b87      	ldr	r3, [pc, #540]	; (8001e74 <led_awake_routine+0x2ac>)
 8001c56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(disable_led);
 8001c5c:	4a86      	ldr	r2, [pc, #536]	; (8001e78 <led_awake_routine+0x2b0>)
 8001c5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c62:	2008      	movs	r0, #8
 8001c64:	f7ff f9e0 	bl	8001028 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001c68:	4b84      	ldr	r3, [pc, #528]	; (8001e7c <led_awake_routine+0x2b4>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <led_awake_routine+0xbc>
					green_led_pwm_val += 5;
 8001c70:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <led_awake_routine+0x2b8>)
 8001c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3305      	adds	r3, #5
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <led_awake_routine+0x2b8>)
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	e008      	b.n	8001c96 <led_awake_routine+0xce>
					green_led_pwm_val -= 5;
 8001c84:	4b7e      	ldr	r3, [pc, #504]	; (8001e80 <led_awake_routine+0x2b8>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b05      	subs	r3, #5
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <led_awake_routine+0x2b8>)
 8001c94:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001c96:	4b7a      	ldr	r3, [pc, #488]	; (8001e80 <led_awake_routine+0x2b8>)
 8001c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ca0:	dd03      	ble.n	8001caa <led_awake_routine+0xe2>
					green_led_pwm_flag = 1;
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <led_awake_routine+0x2b4>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e007      	b.n	8001cba <led_awake_routine+0xf2>
				} else if (green_led_pwm_val <= 0) {
 8001caa:	4b75      	ldr	r3, [pc, #468]	; (8001e80 <led_awake_routine+0x2b8>)
 8001cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	dc02      	bgt.n	8001cba <led_awake_routine+0xf2>
					green_led_pwm_flag = 0;
 8001cb4:	4b71      	ldr	r3, [pc, #452]	; (8001e7c <led_awake_routine+0x2b4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001cba:	4b71      	ldr	r3, [pc, #452]	; (8001e80 <led_awake_routine+0x2b8>)
 8001cbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cc0:	4b6c      	ldr	r3, [pc, #432]	; (8001e74 <led_awake_routine+0x2ac>)
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cc4:	e13f      	b.n	8001f46 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 8001cc6:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <led_awake_routine+0x2a0>)
 8001cc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ccc:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	dd42      	ble.n	8001d60 <led_awake_routine+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <led_awake_routine+0x2a0>)
 8001cdc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ce0:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001e70 <led_awake_routine+0x2a8>
 8001ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	d838      	bhi.n	8001d60 <led_awake_routine+0x198>
				RED_LED_PWM(disable_led);
 8001cee:	4b61      	ldr	r3, [pc, #388]	; (8001e74 <led_awake_routine+0x2ac>)
 8001cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(disable_led);
 8001cf6:	4a60      	ldr	r2, [pc, #384]	; (8001e78 <led_awake_routine+0x2b0>)
 8001cf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cfc:	2008      	movs	r0, #8
 8001cfe:	f7ff f993 	bl	8001028 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001d02:	4b5e      	ldr	r3, [pc, #376]	; (8001e7c <led_awake_routine+0x2b4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <led_awake_routine+0x156>
					green_led_pwm_val += 5;
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <led_awake_routine+0x2b8>)
 8001d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3305      	adds	r3, #5
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <led_awake_routine+0x2b8>)
 8001d1a:	801a      	strh	r2, [r3, #0]
 8001d1c:	e008      	b.n	8001d30 <led_awake_routine+0x168>
					green_led_pwm_val -= 5;
 8001d1e:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <led_awake_routine+0x2b8>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b05      	subs	r3, #5
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <led_awake_routine+0x2b8>)
 8001d2e:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <led_awake_routine+0x2b8>)
 8001d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d3a:	dd03      	ble.n	8001d44 <led_awake_routine+0x17c>
					green_led_pwm_flag = 1;
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <led_awake_routine+0x2b4>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e007      	b.n	8001d54 <led_awake_routine+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8001d44:	4b4e      	ldr	r3, [pc, #312]	; (8001e80 <led_awake_routine+0x2b8>)
 8001d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	dc02      	bgt.n	8001d54 <led_awake_routine+0x18c>
					green_led_pwm_flag = 0;
 8001d4e:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <led_awake_routine+0x2b4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001d54:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <led_awake_routine+0x2b8>)
 8001d56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <led_awake_routine+0x2ac>)
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d5e:	e0f2      	b.n	8001f46 <led_awake_routine+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 8001d60:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <led_awake_routine+0x2a0>)
 8001d62:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d66:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e84 <led_awake_routine+0x2bc>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	f340 808d 	ble.w	8001e90 <led_awake_routine+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <led_awake_routine+0x2a0>)
 8001d78:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d7c:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 8001d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	f200 8082 	bhi.w	8001e90 <led_awake_routine+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <led_awake_routine+0x2b4>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <led_awake_routine+0x2c0>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d003      	beq.n	8001da0 <led_awake_routine+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <led_awake_routine+0x2c0>)
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <led_awake_routine+0x2b4>)
 8001d9e:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 8001da0:	4a35      	ldr	r2, [pc, #212]	; (8001e78 <led_awake_routine+0x2b0>)
 8001da2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001da6:	2008      	movs	r0, #8
 8001da8:	f7ff f93e 	bl	8001028 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <led_awake_routine+0x2b4>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <led_awake_routine+0x200>
					green_led_pwm_val += 5;
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <led_awake_routine+0x2b8>)
 8001db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3305      	adds	r3, #5
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <led_awake_routine+0x2b8>)
 8001dc4:	801a      	strh	r2, [r3, #0]
 8001dc6:	e008      	b.n	8001dda <led_awake_routine+0x212>
					green_led_pwm_val -= 5;
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <led_awake_routine+0x2b8>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b05      	subs	r3, #5
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <led_awake_routine+0x2b8>)
 8001dd8:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <led_awake_routine+0x2b8>)
 8001ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de4:	dd03      	ble.n	8001dee <led_awake_routine+0x226>
					green_led_pwm_flag = 1;
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <led_awake_routine+0x2b4>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e007      	b.n	8001dfe <led_awake_routine+0x236>
				} else if (green_led_pwm_val <= 0) {
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <led_awake_routine+0x2b8>)
 8001df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	dc02      	bgt.n	8001dfe <led_awake_routine+0x236>
					green_led_pwm_flag = 0;
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <led_awake_routine+0x2b4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <led_awake_routine+0x2c0>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <led_awake_routine+0x252>
					red_led_pwm_val += 5;
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <led_awake_routine+0x2c4>)
 8001e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3305      	adds	r3, #5
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <led_awake_routine+0x2c4>)
 8001e16:	801a      	strh	r2, [r3, #0]
 8001e18:	e008      	b.n	8001e2c <led_awake_routine+0x264>
					red_led_pwm_val -= 5;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <led_awake_routine+0x2c4>)
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b05      	subs	r3, #5
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <led_awake_routine+0x2c4>)
 8001e2a:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <led_awake_routine+0x2c4>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e36:	dd03      	ble.n	8001e40 <led_awake_routine+0x278>
					red_led_pwm_flag = 1;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <led_awake_routine+0x2c0>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e007      	b.n	8001e50 <led_awake_routine+0x288>
				} else if (red_led_pwm_val <= 0) {
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <led_awake_routine+0x2c4>)
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dc02      	bgt.n	8001e50 <led_awake_routine+0x288>
					red_led_pwm_flag = 0;
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <led_awake_routine+0x2c0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <led_awake_routine+0x2b8>)
 8001e52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <led_awake_routine+0x2ac>)
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <led_awake_routine+0x2c4>)
 8001e5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <led_awake_routine+0x2ac>)
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38
 8001e64:	e06f      	b.n	8001f46 <led_awake_routine+0x37e>
 8001e66:	bf00      	nop
 8001e68:	20001494 	.word	0x20001494
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40833333 	.word	0x40833333
 8001e74:	40000400 	.word	0x40000400
 8001e78:	20000354 	.word	0x20000354
 8001e7c:	200012f4 	.word	0x200012f4
 8001e80:	200012f6 	.word	0x200012f6
 8001e84:	40533333 	.word	0x40533333
 8001e88:	200012f5 	.word	0x200012f5
 8001e8c:	200012f8 	.word	0x200012f8
				GREEN_LED_PWM(disable_led);
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <led_awake_routine+0x384>)
 8001e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
				BLUE_LED_PWM(disable_led);
 8001e98:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <led_awake_routine+0x388>)
 8001e9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e9e:	2008      	movs	r0, #8
 8001ea0:	f7ff f8c2 	bl	8001028 <setSoftPWM>
				if (!red_led_pwm_flag) {
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <led_awake_routine+0x38c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <led_awake_routine+0x2f8>
					red_led_pwm_val += 5;
 8001eac:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <led_awake_routine+0x390>)
 8001eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3305      	adds	r3, #5
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <led_awake_routine+0x390>)
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	e008      	b.n	8001ed2 <led_awake_routine+0x30a>
					red_led_pwm_val -= 5;
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <led_awake_routine+0x390>)
 8001ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b05      	subs	r3, #5
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <led_awake_routine+0x390>)
 8001ed0:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8001ed2:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <led_awake_routine+0x390>)
 8001ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001edc:	dd03      	ble.n	8001ee6 <led_awake_routine+0x31e>
					red_led_pwm_flag = 1;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <led_awake_routine+0x38c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	e007      	b.n	8001ef6 <led_awake_routine+0x32e>
				} else if (red_led_pwm_val <= 0) {
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <led_awake_routine+0x390>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dc02      	bgt.n	8001ef6 <led_awake_routine+0x32e>
					red_led_pwm_flag = 0;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <led_awake_routine+0x38c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <led_awake_routine+0x390>)
 8001ef8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <led_awake_routine+0x384>)
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f00:	e021      	b.n	8001f46 <led_awake_routine+0x37e>
		GREEN_LED_PWM(disable_led);
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <led_awake_routine+0x384>)
 8001f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
		BLUE_LED_PWM(disable_led);
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <led_awake_routine+0x388>)
 8001f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f10:	2008      	movs	r0, #8
 8001f12:	f7ff f889 	bl	8001028 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <led_awake_routine+0x390>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f20:	d004      	beq.n	8001f2c <led_awake_routine+0x364>
			red_led_pwm_val = disable_led;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <led_awake_routine+0x390>)
 8001f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f28:	801a      	strh	r2, [r3, #0]
 8001f2a:	e002      	b.n	8001f32 <led_awake_routine+0x36a>
			red_led_pwm_val = 0;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <led_awake_routine+0x390>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <led_awake_routine+0x390>)
 8001f34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <led_awake_routine+0x384>)
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(300);
 8001f3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f40:	f001 fe84 	bl	8003c4c <HAL_Delay>
}
 8001f44:	e7ff      	b.n	8001f46 <led_awake_routine+0x37e>
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	20000354 	.word	0x20000354
 8001f54:	200012f5 	.word	0x200012f5
 8001f58:	200012f8 	.word	0x200012f8

08001f5c <blink_red>:

void blink_red() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	GREEN_LED_PWM(disable_led);
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <blink_red+0x60>)
 8001f62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34
	BLUE_LED_PWM(disable_led);
 8001f68:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <blink_red+0x64>)
 8001f6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f6e:	2008      	movs	r0, #8
 8001f70:	f7ff f85a 	bl	8001028 <setSoftPWM>
	RED_LED_PWM(0); //we toggle red led
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <blink_red+0x60>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f7e:	f001 fe65 	bl	8003c4c <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <blink_red+0x60>)
 8001f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f8e:	f001 fe5d 	bl	8003c4c <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <blink_red+0x60>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f9c:	f001 fe56 	bl	8003c4c <HAL_Delay>
	RED_LED_PWM(disable_led); //we toggle red led
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <blink_red+0x60>)
 8001fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8001fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fac:	f001 fe4e 	bl	8003c4c <HAL_Delay>
	RED_LED_PWM(0); //we toggle red led
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <blink_red+0x60>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	20000354 	.word	0x20000354

08001fc4 <led_awake_routine1>:

static void led_awake_routine1() {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0

	if (_RunTime_Packet.sd_card_disk_write_error == 0) //no errors in sdcard
 8001fc8:	4ba6      	ldr	r3, [pc, #664]	; (8002264 <led_awake_routine1+0x2a0>)
 8001fca:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 8195 	bne.w	80022fe <led_awake_routine1+0x33a>
			{
		if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is detected, then just turn the blue led on
 8001fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd8:	48a3      	ldr	r0, [pc, #652]	; (8002268 <led_awake_routine1+0x2a4>)
 8001fda:	f003 fdf7 	bl	8005bcc <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d025      	beq.n	8002030 <led_awake_routine1+0x6c>
				{

			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 8001fe4:	4b9f      	ldr	r3, [pc, #636]	; (8002264 <led_awake_routine1+0x2a0>)
 8001fe6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fea:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800226c <led_awake_routine1+0x2a8>
 8001fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	db0d      	blt.n	8002014 <led_awake_routine1+0x50>
				GREEN_LED_PWM(0);
 8001ff8:	4b9d      	ldr	r3, [pc, #628]	; (8002270 <led_awake_routine1+0x2ac>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
				RED_LED_PWM(disable_led);
 8001ffe:	4b9c      	ldr	r3, [pc, #624]	; (8002270 <led_awake_routine1+0x2ac>)
 8002000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(disable_led);
 8002006:	4a9b      	ldr	r2, [pc, #620]	; (8002274 <led_awake_routine1+0x2b0>)
 8002008:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800200c:	2008      	movs	r0, #8
 800200e:	f7ff f80b 	bl	8001028 <setSoftPWM>
			red_led_pwm_val = 0;
		}
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
		HAL_Delay(300);
	}
}
 8002012:	e196      	b.n	8002342 <led_awake_routine1+0x37e>
				GREEN_LED_PWM(disable_led);
 8002014:	4b96      	ldr	r3, [pc, #600]	; (8002270 <led_awake_routine1+0x2ac>)
 8002016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800201a:	635a      	str	r2, [r3, #52]	; 0x34
				RED_LED_PWM(disable_led);
 800201c:	4b94      	ldr	r3, [pc, #592]	; (8002270 <led_awake_routine1+0x2ac>)
 800201e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(0);
 8002024:	4a93      	ldr	r2, [pc, #588]	; (8002274 <led_awake_routine1+0x2b0>)
 8002026:	2100      	movs	r1, #0
 8002028:	2008      	movs	r0, #8
 800202a:	f7fe fffd 	bl	8001028 <setSoftPWM>
}
 800202e:	e188      	b.n	8002342 <led_awake_routine1+0x37e>
			BLUE_LED_PWM(disable_led); //we turn off the blue led incase it was on before
 8002030:	4a90      	ldr	r2, [pc, #576]	; (8002274 <led_awake_routine1+0x2b0>)
 8002032:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002036:	2008      	movs	r0, #8
 8002038:	f7fe fff6 	bl	8001028 <setSoftPWM>
			if (_RunTime_Packet.battery_voltage >= battery_Full) {
 800203c:	4b89      	ldr	r3, [pc, #548]	; (8002264 <led_awake_routine1+0x2a0>)
 800203e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002042:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800226c <led_awake_routine1+0x2a8>
 8002046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204e:	db38      	blt.n	80020c2 <led_awake_routine1+0xfe>
				RED_LED_PWM(disable_led);
 8002050:	4b87      	ldr	r3, [pc, #540]	; (8002270 <led_awake_routine1+0x2ac>)
 8002052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002056:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(disable_led);
 8002058:	4a86      	ldr	r2, [pc, #536]	; (8002274 <led_awake_routine1+0x2b0>)
 800205a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800205e:	2008      	movs	r0, #8
 8002060:	f7fe ffe2 	bl	8001028 <setSoftPWM>
				if (!green_led_pwm_flag) {
 8002064:	4b84      	ldr	r3, [pc, #528]	; (8002278 <led_awake_routine1+0x2b4>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <led_awake_routine1+0xbc>
					green_led_pwm_val += 40;
 800206c:	4b83      	ldr	r3, [pc, #524]	; (800227c <led_awake_routine1+0x2b8>)
 800206e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002072:	b29b      	uxth	r3, r3
 8002074:	3328      	adds	r3, #40	; 0x28
 8002076:	b29b      	uxth	r3, r3
 8002078:	b21a      	sxth	r2, r3
 800207a:	4b80      	ldr	r3, [pc, #512]	; (800227c <led_awake_routine1+0x2b8>)
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	e008      	b.n	8002092 <led_awake_routine1+0xce>
					green_led_pwm_val -= 40;
 8002080:	4b7e      	ldr	r3, [pc, #504]	; (800227c <led_awake_routine1+0x2b8>)
 8002082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b28      	subs	r3, #40	; 0x28
 800208a:	b29b      	uxth	r3, r3
 800208c:	b21a      	sxth	r2, r3
 800208e:	4b7b      	ldr	r3, [pc, #492]	; (800227c <led_awake_routine1+0x2b8>)
 8002090:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 8002092:	4b7a      	ldr	r3, [pc, #488]	; (800227c <led_awake_routine1+0x2b8>)
 8002094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800209c:	dd03      	ble.n	80020a6 <led_awake_routine1+0xe2>
					green_led_pwm_flag = 1;
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <led_awake_routine1+0x2b4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	e007      	b.n	80020b6 <led_awake_routine1+0xf2>
				} else if (green_led_pwm_val <= 0) {
 80020a6:	4b75      	ldr	r3, [pc, #468]	; (800227c <led_awake_routine1+0x2b8>)
 80020a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	dc02      	bgt.n	80020b6 <led_awake_routine1+0xf2>
					green_led_pwm_flag = 0;
 80020b0:	4b71      	ldr	r3, [pc, #452]	; (8002278 <led_awake_routine1+0x2b4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 80020b6:	4b71      	ldr	r3, [pc, #452]	; (800227c <led_awake_routine1+0x2b8>)
 80020b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020bc:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <led_awake_routine1+0x2ac>)
 80020be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020c0:	e13f      	b.n	8002342 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_Low
 80020c2:	4b68      	ldr	r3, [pc, #416]	; (8002264 <led_awake_routine1+0x2a0>)
 80020c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80020c8:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 80020cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	dd42      	ble.n	800215c <led_awake_routine1+0x198>
					&& _RunTime_Packet.battery_voltage <= battery_Full) {
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <led_awake_routine1+0x2a0>)
 80020d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80020dc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800226c <led_awake_routine1+0x2a8>
 80020e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d838      	bhi.n	800215c <led_awake_routine1+0x198>
				RED_LED_PWM(disable_led);
 80020ea:	4b61      	ldr	r3, [pc, #388]	; (8002270 <led_awake_routine1+0x2ac>)
 80020ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
				BLUE_LED_PWM(disable_led);
 80020f2:	4a60      	ldr	r2, [pc, #384]	; (8002274 <led_awake_routine1+0x2b0>)
 80020f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020f8:	2008      	movs	r0, #8
 80020fa:	f7fe ff95 	bl	8001028 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80020fe:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <led_awake_routine1+0x2b4>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <led_awake_routine1+0x156>
					green_led_pwm_val += 40;
 8002106:	4b5d      	ldr	r3, [pc, #372]	; (800227c <led_awake_routine1+0x2b8>)
 8002108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210c:	b29b      	uxth	r3, r3
 800210e:	3328      	adds	r3, #40	; 0x28
 8002110:	b29b      	uxth	r3, r3
 8002112:	b21a      	sxth	r2, r3
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <led_awake_routine1+0x2b8>)
 8002116:	801a      	strh	r2, [r3, #0]
 8002118:	e008      	b.n	800212c <led_awake_routine1+0x168>
					green_led_pwm_val -= 40;
 800211a:	4b58      	ldr	r3, [pc, #352]	; (800227c <led_awake_routine1+0x2b8>)
 800211c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b28      	subs	r3, #40	; 0x28
 8002124:	b29b      	uxth	r3, r3
 8002126:	b21a      	sxth	r2, r3
 8002128:	4b54      	ldr	r3, [pc, #336]	; (800227c <led_awake_routine1+0x2b8>)
 800212a:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <led_awake_routine1+0x2b8>)
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002136:	dd03      	ble.n	8002140 <led_awake_routine1+0x17c>
					green_led_pwm_flag = 1;
 8002138:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <led_awake_routine1+0x2b4>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e007      	b.n	8002150 <led_awake_routine1+0x18c>
				} else if (green_led_pwm_val <= 0) {
 8002140:	4b4e      	ldr	r3, [pc, #312]	; (800227c <led_awake_routine1+0x2b8>)
 8002142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002146:	2b00      	cmp	r3, #0
 8002148:	dc02      	bgt.n	8002150 <led_awake_routine1+0x18c>
					green_led_pwm_flag = 0;
 800214a:	4b4b      	ldr	r3, [pc, #300]	; (8002278 <led_awake_routine1+0x2b4>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 8002150:	4b4a      	ldr	r3, [pc, #296]	; (800227c <led_awake_routine1+0x2b8>)
 8002152:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <led_awake_routine1+0x2ac>)
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
 800215a:	e0f2      	b.n	8002342 <led_awake_routine1+0x37e>
			} else if (_RunTime_Packet.battery_voltage > battery_very_low
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <led_awake_routine1+0x2a0>)
 800215e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002162:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002280 <led_awake_routine1+0x2bc>
 8002166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	f340 808d 	ble.w	800228c <led_awake_routine1+0x2c8>
					&& _RunTime_Packet.battery_voltage <= battery_Low) {
 8002172:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <led_awake_routine1+0x2a0>)
 8002174:	edd3 7a08 	vldr	s15, [r3, #32]
 8002178:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
 800217c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	f200 8082 	bhi.w	800228c <led_awake_routine1+0x2c8>
				if (green_led_pwm_flag != red_led_pwm_flag) //for this we need flags to be sync with each other
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <led_awake_routine1+0x2b4>)
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <led_awake_routine1+0x2c0>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d003      	beq.n	800219c <led_awake_routine1+0x1d8>
					green_led_pwm_flag = red_led_pwm_flag;
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <led_awake_routine1+0x2c0>)
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	4b37      	ldr	r3, [pc, #220]	; (8002278 <led_awake_routine1+0x2b4>)
 800219a:	701a      	strb	r2, [r3, #0]
				BLUE_LED_PWM(disable_led);
 800219c:	4a35      	ldr	r2, [pc, #212]	; (8002274 <led_awake_routine1+0x2b0>)
 800219e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021a2:	2008      	movs	r0, #8
 80021a4:	f7fe ff40 	bl	8001028 <setSoftPWM>
				if (!green_led_pwm_flag) {
 80021a8:	4b33      	ldr	r3, [pc, #204]	; (8002278 <led_awake_routine1+0x2b4>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <led_awake_routine1+0x200>
					green_led_pwm_val += 40;
 80021b0:	4b32      	ldr	r3, [pc, #200]	; (800227c <led_awake_routine1+0x2b8>)
 80021b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3328      	adds	r3, #40	; 0x28
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	b21a      	sxth	r2, r3
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <led_awake_routine1+0x2b8>)
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	e008      	b.n	80021d6 <led_awake_routine1+0x212>
					green_led_pwm_val -= 40;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <led_awake_routine1+0x2b8>)
 80021c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b28      	subs	r3, #40	; 0x28
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <led_awake_routine1+0x2b8>)
 80021d4:	801a      	strh	r2, [r3, #0]
				if (green_led_pwm_val > 1000) {
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <led_awake_routine1+0x2b8>)
 80021d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e0:	dd03      	ble.n	80021ea <led_awake_routine1+0x226>
					green_led_pwm_flag = 1;
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <led_awake_routine1+0x2b4>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e007      	b.n	80021fa <led_awake_routine1+0x236>
				} else if (green_led_pwm_val <= 0) {
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <led_awake_routine1+0x2b8>)
 80021ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	dc02      	bgt.n	80021fa <led_awake_routine1+0x236>
					green_led_pwm_flag = 0;
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <led_awake_routine1+0x2b4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
				if (!red_led_pwm_flag) {
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <led_awake_routine1+0x2c0>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <led_awake_routine1+0x252>
					red_led_pwm_val += 40;
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <led_awake_routine1+0x2c4>)
 8002204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002208:	b29b      	uxth	r3, r3
 800220a:	3328      	adds	r3, #40	; 0x28
 800220c:	b29b      	uxth	r3, r3
 800220e:	b21a      	sxth	r2, r3
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <led_awake_routine1+0x2c4>)
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	e008      	b.n	8002228 <led_awake_routine1+0x264>
					red_led_pwm_val -= 40;
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <led_awake_routine1+0x2c4>)
 8002218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b28      	subs	r3, #40	; 0x28
 8002220:	b29b      	uxth	r3, r3
 8002222:	b21a      	sxth	r2, r3
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <led_awake_routine1+0x2c4>)
 8002226:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <led_awake_routine1+0x2c4>)
 800222a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002232:	dd03      	ble.n	800223c <led_awake_routine1+0x278>
					red_led_pwm_flag = 1;
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <led_awake_routine1+0x2c0>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <led_awake_routine1+0x288>
				} else if (red_led_pwm_val <= 0) {
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <led_awake_routine1+0x2c4>)
 800223e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002242:	2b00      	cmp	r3, #0
 8002244:	dc02      	bgt.n	800224c <led_awake_routine1+0x288>
					red_led_pwm_flag = 0;
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <led_awake_routine1+0x2c0>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
				GREEN_LED_PWM(green_led_pwm_val); //we breathe the greem led
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <led_awake_routine1+0x2b8>)
 800224e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <led_awake_routine1+0x2ac>)
 8002254:	635a      	str	r2, [r3, #52]	; 0x34
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <led_awake_routine1+0x2c4>)
 8002258:	f9b3 2000 	ldrsh.w	r2, [r3]
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <led_awake_routine1+0x2ac>)
 800225e:	639a      	str	r2, [r3, #56]	; 0x38
 8002260:	e06f      	b.n	8002342 <led_awake_routine1+0x37e>
 8002262:	bf00      	nop
 8002264:	20001494 	.word	0x20001494
 8002268:	40020000 	.word	0x40020000
 800226c:	40833333 	.word	0x40833333
 8002270:	40000400 	.word	0x40000400
 8002274:	20000354 	.word	0x20000354
 8002278:	200012f4 	.word	0x200012f4
 800227c:	200012f6 	.word	0x200012f6
 8002280:	40533333 	.word	0x40533333
 8002284:	200012f5 	.word	0x200012f5
 8002288:	200012f8 	.word	0x200012f8
				GREEN_LED_PWM(disable_led);
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <led_awake_routine1+0x384>)
 800228e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002292:	635a      	str	r2, [r3, #52]	; 0x34
				BLUE_LED_PWM(disable_led);
 8002294:	4a2d      	ldr	r2, [pc, #180]	; (800234c <led_awake_routine1+0x388>)
 8002296:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800229a:	2008      	movs	r0, #8
 800229c:	f7fe fec4 	bl	8001028 <setSoftPWM>
				if (!red_led_pwm_flag) {
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <led_awake_routine1+0x38c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <led_awake_routine1+0x2f8>
					red_led_pwm_val += 40;
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <led_awake_routine1+0x390>)
 80022aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3328      	adds	r3, #40	; 0x28
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <led_awake_routine1+0x390>)
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	e008      	b.n	80022ce <led_awake_routine1+0x30a>
					red_led_pwm_val -= 40;
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <led_awake_routine1+0x390>)
 80022be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b28      	subs	r3, #40	; 0x28
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <led_awake_routine1+0x390>)
 80022cc:	801a      	strh	r2, [r3, #0]
				if (red_led_pwm_val > 1000) {
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <led_awake_routine1+0x390>)
 80022d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d8:	dd03      	ble.n	80022e2 <led_awake_routine1+0x31e>
					red_led_pwm_flag = 1;
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <led_awake_routine1+0x38c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e007      	b.n	80022f2 <led_awake_routine1+0x32e>
				} else if (red_led_pwm_val <= 0) {
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <led_awake_routine1+0x390>)
 80022e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	dc02      	bgt.n	80022f2 <led_awake_routine1+0x32e>
					red_led_pwm_flag = 0;
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <led_awake_routine1+0x38c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
				RED_LED_PWM(red_led_pwm_val); //we breathe red led
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <led_awake_routine1+0x390>)
 80022f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <led_awake_routine1+0x384>)
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022fc:	e021      	b.n	8002342 <led_awake_routine1+0x37e>
		GREEN_LED_PWM(disable_led);
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <led_awake_routine1+0x384>)
 8002300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002304:	635a      	str	r2, [r3, #52]	; 0x34
		BLUE_LED_PWM(disable_led);
 8002306:	4a11      	ldr	r2, [pc, #68]	; (800234c <led_awake_routine1+0x388>)
 8002308:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800230c:	2008      	movs	r0, #8
 800230e:	f7fe fe8b 	bl	8001028 <setSoftPWM>
		if (red_led_pwm_val != disable_led) {
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <led_awake_routine1+0x390>)
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800231c:	d004      	beq.n	8002328 <led_awake_routine1+0x364>
			red_led_pwm_val = disable_led;
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <led_awake_routine1+0x390>)
 8002320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002324:	801a      	strh	r2, [r3, #0]
 8002326:	e002      	b.n	800232e <led_awake_routine1+0x36a>
			red_led_pwm_val = 0;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <led_awake_routine1+0x390>)
 800232a:	2200      	movs	r2, #0
 800232c:	801a      	strh	r2, [r3, #0]
		RED_LED_PWM(red_led_pwm_val); //we toggle red led
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <led_awake_routine1+0x390>)
 8002330:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <led_awake_routine1+0x384>)
 8002336:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(300);
 8002338:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800233c:	f001 fc86 	bl	8003c4c <HAL_Delay>
}
 8002340:	e7ff      	b.n	8002342 <led_awake_routine1+0x37e>
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40000400 	.word	0x40000400
 800234c:	20000354 	.word	0x20000354
 8002350:	200012f5 	.word	0x200012f5
 8002354:	200012f8 	.word	0x200012f8

08002358 <ver_GetUid>:

static uint8_t sUid[13];	//12-bit asci

//unique ID from MCU
char* ver_GetUid(void) {
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
	uint32_t iWafer;

	iWafer = HAL_GetUIDw1() & 0x00FFul;
 800235e:	f001 fcc5 	bl	8003cec <HAL_GetUIDw1>
 8002362:	4603      	mov	r3, r0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	607b      	str	r3, [r7, #4]
	// 7 lot numbers are already in ASCII
	*(uint32_t*) (&sUid[0]) = HAL_GetUIDw1() >> 8;
 8002368:	f001 fcc0 	bl	8003cec <HAL_GetUIDw1>
 800236c:	4603      	mov	r3, r0
 800236e:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <ver_GetUid+0x8c>)
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	6013      	str	r3, [r2, #0]
	*(uint32_t*) (&sUid[3]) = HAL_GetUIDw2();
 8002374:	4c1c      	ldr	r4, [pc, #112]	; (80023e8 <ver_GetUid+0x90>)
 8002376:	f001 fcc5 	bl	8003d04 <HAL_GetUIDw2>
 800237a:	4603      	mov	r3, r0
 800237c:	6023      	str	r3, [r4, #0]

	// Convert wafer number to 1 ASCII character
	if (iWafer >= 36)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b23      	cmp	r3, #35	; 0x23
 8002382:	d909      	bls.n	8002398 <ver_GetUid+0x40>
		sUid[7] = (iWafer >= 62) ? 'z' : ('a' + (iWafer - 36));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b3d      	cmp	r3, #61	; 0x3d
 8002388:	bf28      	it	cs
 800238a:	233d      	movcs	r3, #61	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	333d      	adds	r3, #61	; 0x3d
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <ver_GetUid+0x8c>)
 8002394:	71da      	strb	r2, [r3, #7]
 8002396:	e00b      	b.n	80023b0 <ver_GetUid+0x58>
	// Display with 10 + 26 + 26 symbols
	else
		sUid[7] = ((iWafer >= 10) ? 'A' : '0') + iWafer;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b09      	cmp	r3, #9
 800239c:	d901      	bls.n	80023a2 <ver_GetUid+0x4a>
 800239e:	2241      	movs	r2, #65	; 0x41
 80023a0:	e000      	b.n	80023a4 <ver_GetUid+0x4c>
 80023a2:	2230      	movs	r2, #48	; 0x30
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <ver_GetUid+0x8c>)
 80023ae:	71da      	strb	r2, [r3, #7]

	// Convert X and Y to 4 ASCII-HEX
	CharToHexasc(&sUid[8], (HAL_GetUIDw0() >> 16) & 0x00FFul);
 80023b0:	f001 fc90 	bl	8003cd4 <HAL_GetUIDw0>
 80023b4:	4603      	mov	r3, r0
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4619      	mov	r1, r3
 80023bc:	480b      	ldr	r0, [pc, #44]	; (80023ec <ver_GetUid+0x94>)
 80023be:	f010 faa1 	bl	8012904 <CharToHexasc>
	CharToHexasc(&sUid[10], HAL_GetUIDw0() & 0x00FFul);
 80023c2:	f001 fc87 	bl	8003cd4 <HAL_GetUIDw0>
 80023c6:	4603      	mov	r3, r0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	4619      	mov	r1, r3
 80023cc:	4808      	ldr	r0, [pc, #32]	; (80023f0 <ver_GetUid+0x98>)
 80023ce:	f010 fa99 	bl	8012904 <CharToHexasc>
	sUid[12] = 0;
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <ver_GetUid+0x8c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	731a      	strb	r2, [r3, #12]
	return ((char*) sUid);
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <ver_GetUid+0x8c>)
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20001724 	.word	0x20001724
 80023e8:	20001727 	.word	0x20001727
 80023ec:	2000172c 	.word	0x2000172c
 80023f0:	2000172e 	.word	0x2000172e

080023f4 <app_main>:

void app_main() {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0

	memset(&_RunTime_Packet, 0, sizeof(_RunTime_Packet));
 80023fa:	223c      	movs	r2, #60	; 0x3c
 80023fc:	2100      	movs	r1, #0
 80023fe:	488e      	ldr	r0, [pc, #568]	; (8002638 <app_main+0x244>)
 8002400:	f019 fbdc 	bl	801bbbc <memset>

	load_param();
 8002404:	f7ff f816 	bl	8001434 <load_param>

	HAL_TIM_Base_Start(&htim1);
 8002408:	488c      	ldr	r0, [pc, #560]	; (800263c <app_main+0x248>)
 800240a:	f008 fa53 	bl	800a8b4 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) &(dataA[0]),
 800240e:	498c      	ldr	r1, [pc, #560]	; (8002640 <app_main+0x24c>)
 8002410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002414:	4a8b      	ldr	r2, [pc, #556]	; (8002644 <app_main+0x250>)
 8002416:	488c      	ldr	r0, [pc, #560]	; (8002648 <app_main+0x254>)
 8002418:	f002 fb44 	bl	8004aa4 <HAL_DMA_Start>
			(uint32_t) &(BLUE_LED_GPIO_Port->BSRR),
			sizeof(dataA) / sizeof(dataA[0]));
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 800241c:	4b87      	ldr	r3, [pc, #540]	; (800263c <app_main+0x248>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	4b86      	ldr	r3, [pc, #536]	; (800263c <app_main+0x248>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242a:	60da      	str	r2, [r3, #12]
	BLUE_LED_PWM(disable_led);
 800242c:	4a84      	ldr	r2, [pc, #528]	; (8002640 <app_main+0x24c>)
 800242e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002432:	2008      	movs	r0, #8
 8002434:	f7fe fdf8 	bl	8001028 <setSoftPWM>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //for green led
 8002438:	2100      	movs	r1, #0
 800243a:	4884      	ldr	r0, [pc, #528]	; (800264c <app_main+0x258>)
 800243c:	f008 fb7e 	bl	800ab3c <HAL_TIM_PWM_Start>
	GREEN_LED_PWM(disable_led);
 8002440:	4b83      	ldr	r3, [pc, #524]	; (8002650 <app_main+0x25c>)
 8002442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002446:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //for red led
 8002448:	2104      	movs	r1, #4
 800244a:	4880      	ldr	r0, [pc, #512]	; (800264c <app_main+0x258>)
 800244c:	f008 fb76 	bl	800ab3c <HAL_TIM_PWM_Start>
	RED_LED_PWM(disable_led);
 8002450:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <app_main+0x25c>)
 8002452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002456:	639a      	str	r2, [r3, #56]	; 0x38

	if (Mount_SD("/") == FR_OK) {
 8002458:	487e      	ldr	r0, [pc, #504]	; (8002654 <app_main+0x260>)
 800245a:	f017 ff05 	bl	801a268 <Mount_SD>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d105      	bne.n	8002470 <app_main+0x7c>

		Unmount_SD("/");
 8002464:	487b      	ldr	r0, [pc, #492]	; (8002654 <app_main+0x260>)
 8002466:	f017 ff2b 	bl	801a2c0 <Unmount_SD>
		MX_USB_DEVICE_Init(); //initialize usb anyways
 800246a:	f018 fd69 	bl	801af40 <MX_USB_DEVICE_Init>
 800246e:	e002      	b.n	8002476 <app_main+0x82>

	} else {
		datawritten = 2;
 8002470:	4b79      	ldr	r3, [pc, #484]	; (8002658 <app_main+0x264>)
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
	}
	prev_usb_time_ = HAL_GetTick();
 8002476:	f001 fbdd 	bl	8003c34 <HAL_GetTick>
 800247a:	4603      	mov	r3, r0
 800247c:	4a77      	ldr	r2, [pc, #476]	; (800265c <app_main+0x268>)
 800247e:	6013      	str	r3, [r2, #0]
//
//
	if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 8002480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002484:	4876      	ldr	r0, [pc, #472]	; (8002660 <app_main+0x26c>)
 8002486:	f003 fba1 	bl	8005bcc <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <app_main+0xa2>
		init_sps30();
 8002490:	f7ff f982 	bl	8001798 <init_sps30>
 8002494:	e012      	b.n	80024bc <app_main+0xc8>
	} else {
		_RunTime_Packet.usb_detection = 0;
 8002496:	4b68      	ldr	r3, [pc, #416]	; (8002638 <app_main+0x244>)
 8002498:	2200      	movs	r2, #0
 800249a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		_RunTime_Packet.usb_first_start = 1;
 800249e:	4b66      	ldr	r3, [pc, #408]	; (8002638 <app_main+0x244>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		_RunTime_Packet.usb_active_disable_pm = 1;
 80024a6:	4b64      	ldr	r3, [pc, #400]	; (8002638 <app_main+0x244>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		_RunTime_Packet.usb_start_timer = 1;
 80024ae:	4b62      	ldr	r3, [pc, #392]	; (8002638 <app_main+0x244>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		usb_time_keep = 0;
 80024b6:	4b6b      	ldr	r3, [pc, #428]	; (8002664 <app_main+0x270>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
	}

	//init_sps30();
	init_scd4x_i2c();
 80024bc:	f7ff f8bc 	bl	8001638 <init_scd4x_i2c>
	console_init();
 80024c0:	f00e fc4a 	bl	8010d58 <console_init>
	Rtc_set_alarm();
 80024c4:	f010 f88c 	bl	80125e0 <Rtc_set_alarm>

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	2200      	movs	r2, #0
 80024ce:	4619      	mov	r1, r3
 80024d0:	4865      	ldr	r0, [pc, #404]	; (8002668 <app_main+0x274>)
 80024d2:	f006 ff23 	bl	800931c <HAL_RTC_GetDate>
	_RunTime_Packet.prev_day = sDate.Date;
 80024d6:	7fba      	ldrb	r2, [r7, #30]
 80024d8:	4b57      	ldr	r3, [pc, #348]	; (8002638 <app_main+0x244>)
 80024da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//therefore we will run file creation again when usb operation is completed. it takes about 30second
	//untill that 30second we wont even go to sleep as usb is connected so power is not the issue

	//if(!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin))
	//{
	_RunTime_Packet.sd_file_creation = createfile(_Flash_Packet.File_Name,
 80024de:	4963      	ldr	r1, [pc, #396]	; (800266c <app_main+0x278>)
 80024e0:	4863      	ldr	r0, [pc, #396]	; (8002670 <app_main+0x27c>)
 80024e2:	f018 fca1 	bl	801ae28 <createfile>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b53      	ldr	r3, [pc, #332]	; (8002638 <app_main+0x244>)
 80024ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	// else
	// {
	// 	 _RunTime_Packet.sd_file_creation = -1;
	// }

	green_led_blink();
 80024f0:	f7ff fb42 	bl	8001b78 <green_led_blink>

//MX_USB_DEVICE_DeInit();
	HAL_UART_Transmit(&huart1, (uint8_t*) "System Has Started \r\n", 21, 200);
 80024f4:	23c8      	movs	r3, #200	; 0xc8
 80024f6:	2215      	movs	r2, #21
 80024f8:	495e      	ldr	r1, [pc, #376]	; (8002674 <app_main+0x280>)
 80024fa:	485f      	ldr	r0, [pc, #380]	; (8002678 <app_main+0x284>)
 80024fc:	f009 fa52 	bl	800b9a4 <HAL_UART_Transmit>

	while (1) {

		prev_sleep_time = HAL_GetTick();
 8002500:	f001 fb98 	bl	8003c34 <HAL_GetTick>
 8002504:	4603      	mov	r3, r0
 8002506:	4a5d      	ldr	r2, [pc, #372]	; (800267c <app_main+0x288>)
 8002508:	6013      	str	r3, [r2, #0]
		prev_sleep_time_pm_co2 = HAL_GetTick();
 800250a:	f001 fb93 	bl	8003c34 <HAL_GetTick>
 800250e:	4603      	mov	r3, r0
 8002510:	4a5b      	ldr	r2, [pc, #364]	; (8002680 <app_main+0x28c>)
 8002512:	6013      	str	r3, [r2, #0]
		stop_measurement = 1;
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <app_main+0x290>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
		pwr_off_detected();
 800251a:	f7fe fe73 	bl	8001204 <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 800251e:	e174      	b.n	800280a <app_main+0x416>
		{
			pwr_off_detected();
 8002520:	f7fe fe70 	bl	8001204 <pwr_off_detected>
//
//				HAL_UART_Transmit(&huart1, (uint8_t*)buf_sdcard, strlen(buf_sdcard), 1000);
//
//			}

			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) //if usb is active dont go to sleep
 8002524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002528:	484d      	ldr	r0, [pc, #308]	; (8002660 <app_main+0x26c>)
 800252a:	f003 fb4f 	bl	8005bcc <HAL_GPIO_ReadPin>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <app_main+0x14a>
					{
				prev_sleep_time = HAL_GetTick();
 8002534:	f001 fb7e 	bl	8003c34 <HAL_GetTick>
 8002538:	4603      	mov	r3, r0
 800253a:	4a50      	ldr	r2, [pc, #320]	; (800267c <app_main+0x288>)
 800253c:	6013      	str	r3, [r2, #0]
			 * sometimes it does but this is the solution to solve it.

			 */

			RTC_TimeTypeDef gTime;
			HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	2200      	movs	r2, #0
 8002544:	4619      	mov	r1, r3
 8002546:	4848      	ldr	r0, [pc, #288]	; (8002668 <app_main+0x274>)
 8002548:	f006 fe06 	bl	8009158 <HAL_RTC_GetTime>
			RTC_DateTypeDef sDate;
			HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2200      	movs	r2, #0
 8002550:	4619      	mov	r1, r3
 8002552:	4845      	ldr	r0, [pc, #276]	; (8002668 <app_main+0x274>)
 8002554:	f006 fee2 	bl	800931c <HAL_RTC_GetDate>

			_RunTime_Packet.day = sDate.Date;
 8002558:	79ba      	ldrb	r2, [r7, #6]
 800255a:	4b37      	ldr	r3, [pc, #220]	; (8002638 <app_main+0x244>)
 800255c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			_RunTime_Packet.month = sDate.Month;
 8002560:	797a      	ldrb	r2, [r7, #5]
 8002562:	4b35      	ldr	r3, [pc, #212]	; (8002638 <app_main+0x244>)
 8002564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			_RunTime_Packet.year = sDate.Year;
 8002568:	79fa      	ldrb	r2, [r7, #7]
 800256a:	4b33      	ldr	r3, [pc, #204]	; (8002638 <app_main+0x244>)
 800256c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

			if (_RunTime_Packet.prev_day != sDate.Date) {
 8002570:	4b31      	ldr	r3, [pc, #196]	; (8002638 <app_main+0x244>)
 8002572:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002576:	79bb      	ldrb	r3, [r7, #6]
 8002578:	429a      	cmp	r2, r3
 800257a:	d007      	beq.n	800258c <app_main+0x198>
				_RunTime_Packet.day_changed = 1;
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <app_main+0x244>)
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				_RunTime_Packet.prev_day = sDate.Date;
 8002584:	79ba      	ldrb	r2, [r7, #6]
 8002586:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <app_main+0x244>)
 8002588:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			}

			check_peripheral_error();
 800258c:	f7ff f9aa 	bl	80018e4 <check_peripheral_error>

//this routine is for when usb is detected
//the time calculated right now for mass storage to do its operation is about 30second but time is kept about 50sec to be on safe side
//this routine is specifically made for sps30 as for some reason sps30 uart stops working when usb is connected
			if (_RunTime_Packet.usb_detection
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <app_main+0x244>)
 8002592:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <app_main+0x1b0>
					|| _RunTime_Packet.usb_first_start) {
 800259a:	4b27      	ldr	r3, [pc, #156]	; (8002638 <app_main+0x244>)
 800259c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d045      	beq.n	8002630 <app_main+0x23c>

				if (_RunTime_Packet.usb_first_start) //part of old implementation not being used
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <app_main+0x244>)
 80025a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <app_main+0x1c2>
				{

					start_usb_timer = 1;
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <app_main+0x294>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e003      	b.n	80025be <app_main+0x1ca>
				} else {
					_RunTime_Packet.usb_active_disable_pm = 1; //old implementation not being used
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <app_main+0x244>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				}

				if ((HAL_GetTick() - prev_usb_time_ >= usb_time_)) //50sec has passed our usb must have initialized now
 80025be:	f001 fb39 	bl	8003c34 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <app_main+0x268>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	1ad2      	subs	r2, r2, r3
 80025ca:	4b30      	ldr	r3, [pc, #192]	; (800268c <app_main+0x298>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d329      	bcc.n	8002626 <app_main+0x232>
				{
					if (_RunTime_Packet.sd_file_creation == -1
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <app_main+0x244>)
 80025d4:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d10d      	bne.n	80025fa <app_main+0x206>
							&& _RunTime_Packet.usb_first_start) {
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <app_main+0x244>)
 80025e0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <app_main+0x206>
						_RunTime_Packet.sd_file_creation = createfile(
 80025e8:	4920      	ldr	r1, [pc, #128]	; (800266c <app_main+0x278>)
 80025ea:	4821      	ldr	r0, [pc, #132]	; (8002670 <app_main+0x27c>)
 80025ec:	f018 fc1c 	bl	801ae28 <createfile>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <app_main+0x244>)
 80025f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
								_Flash_Packet.File_Name,
								_Flash_Packet.File_Format);
					}

					_RunTime_Packet.usb_first_start = 0;
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <app_main+0x244>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					_RunTime_Packet.usb_detection = 0;
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <app_main+0x244>)
 8002604:	2200      	movs	r2, #0
 8002606:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					_RunTime_Packet.usb_active_disable_pm = 0;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <app_main+0x244>)
 800260c:	2200      	movs	r2, #0
 800260e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					start_usb_timer = 0;
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <app_main+0x294>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]

					init_sps30();
 8002618:	f7ff f8be 	bl	8001798 <init_sps30>
					//now as after connection of usb the 50seconds have passed now we can enable PM uart to access it

					prev_sleep_time_pm_co2 = HAL_GetTick(); //as we need to take measurements now
 800261c:	f001 fb0a 	bl	8003c34 <HAL_GetTick>
 8002620:	4603      	mov	r3, r0
 8002622:	4a17      	ldr	r2, [pc, #92]	; (8002680 <app_main+0x28c>)
 8002624:	6013      	str	r3, [r2, #0]
				}

				prev_sleep_time = HAL_GetTick();
 8002626:	f001 fb05 	bl	8003c34 <HAL_GetTick>
 800262a:	4603      	mov	r3, r0
 800262c:	4a13      	ldr	r2, [pc, #76]	; (800267c <app_main+0x288>)
 800262e:	6013      	str	r3, [r2, #0]
			}

			console_process();
 8002630:	f00e fb46 	bl	8010cc0 <console_process>

			//we wont take measurement until usb_detection flag disables. this flag means usb is in operation right now.
			//reason of doing this is when usb is in operation sps30 does not work so we wait for usb operation to end and then take the readings
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 8002634:	e03e      	b.n	80026b4 <app_main+0x2c0>
 8002636:	bf00      	nop
 8002638:	20001494 	.word	0x20001494
 800263c:	20001888 	.word	0x20001888
 8002640:	20000354 	.word	0x20000354
 8002644:	40020418 	.word	0x40020418
 8002648:	20001960 	.word	0x20001960
 800264c:	20001918 	.word	0x20001918
 8002650:	40000400 	.word	0x40000400
 8002654:	08020828 	.word	0x08020828
 8002658:	20002337 	.word	0x20002337
 800265c:	20001720 	.word	0x20001720
 8002660:	40020000 	.word	0x40020000
 8002664:	200014dc 	.word	0x200014dc
 8002668:	200017e4 	.word	0x200017e4
 800266c:	20001360 	.word	0x20001360
 8002670:	200012fc 	.word	0x200012fc
 8002674:	08020838 	.word	0x08020838
 8002678:	200019c0 	.word	0x200019c0
 800267c:	20001718 	.word	0x20001718
 8002680:	2000171c 	.word	0x2000171c
 8002684:	2000000c 	.word	0x2000000c
 8002688:	200014d8 	.word	0x200014d8
 800268c:	20000008 	.word	0x20000008
					&& !_RunTime_Packet.usb_detection
					&& !_RunTime_Packet.usb_first_start)
			//if(!_RunTime_Packet.usb_detection && !_RunTime_Packet.usb_first_start)
			{

				console_process(); //run console here also so user can still access it
 8002690:	f00e fb16 	bl	8010cc0 <console_process>
				if (!_RunTime_Packet.scd4x_i2c_error) {
 8002694:	4b8e      	ldr	r3, [pc, #568]	; (80028d0 <app_main+0x4dc>)
 8002696:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <app_main+0x2ae>
					get_scd4x_measurement();
 800269e:	f7fe ffe1 	bl	8001664 <get_scd4x_measurement>
				}

				get_sps30_measurement();
 80026a2:	f7ff f895 	bl	80017d0 <get_sps30_measurement>

				adc_Measure(&_RunTime_Packet.battery_voltage);
 80026a6:	488b      	ldr	r0, [pc, #556]	; (80028d4 <app_main+0x4e0>)
 80026a8:	f010 f9c2 	bl	8012a30 <adc_Measure>
				led_awake_routine1();
 80026ac:	f7ff fc8a 	bl	8001fc4 <led_awake_routine1>
				pwr_off_detected();
 80026b0:	f7fe fda8 	bl	8001204 <pwr_off_detected>
			while ((HAL_GetTick() - prev_sleep_time_pm_co2 <= sleep_time_pm_co2)
 80026b4:	f001 fabe 	bl	8003c34 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b87      	ldr	r3, [pc, #540]	; (80028d8 <app_main+0x4e4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	1ad2      	subs	r2, r2, r3
 80026c0:	4b86      	ldr	r3, [pc, #536]	; (80028dc <app_main+0x4e8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d809      	bhi.n	80026dc <app_main+0x2e8>
					&& !_RunTime_Packet.usb_detection
 80026c8:	4b81      	ldr	r3, [pc, #516]	; (80028d0 <app_main+0x4dc>)
 80026ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <app_main+0x2e8>
					&& !_RunTime_Packet.usb_first_start)
 80026d2:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <app_main+0x4dc>)
 80026d4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0d9      	beq.n	8002690 <app_main+0x29c>
			}

			/*
			 * if user performs calibration
			 */
			sensor_calibration();
 80026dc:	f7ff f940 	bl	8001960 <sensor_calibration>

			//dont stop measurement if USB is detected, we keep taking measurement after interval as power is not an issue if usb is active
			if (stop_measurement && !_RunTime_Packet.usb_detection
 80026e0:	4b7f      	ldr	r3, [pc, #508]	; (80028e0 <app_main+0x4ec>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d018      	beq.n	800271a <app_main+0x326>
 80026e8:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <app_main+0x4dc>)
 80026ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d113      	bne.n	800271a <app_main+0x326>
					&& !_RunTime_Packet.usb_first_start
 80026f2:	4b77      	ldr	r3, [pc, #476]	; (80028d0 <app_main+0x4dc>)
 80026f4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10e      	bne.n	800271a <app_main+0x326>
					&& !HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port,
 80026fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002700:	4878      	ldr	r0, [pc, #480]	; (80028e4 <app_main+0x4f0>)
 8002702:	f003 fa63 	bl	8005bcc <HAL_GPIO_ReadPin>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <app_main+0x326>
					USB_DETECT_Pin)) {
				scd4x_stop_periodic_measurement();
 800270c:	f010 fadc 	bl	8012cc8 <scd4x_stop_periodic_measurement>
				sps30_stop_measurement();
 8002710:	f011 fa50 	bl	8013bb4 <sps30_stop_measurement>
				stop_measurement = 0;
 8002714:	4b72      	ldr	r3, [pc, #456]	; (80028e0 <app_main+0x4ec>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]

//if USB is active and time interval is passed then we still save into the file, but make sure usb is not working at that time otherwise sdcard wont take data
//thats why usb_Detection flag is used
//this routine is specifically to table the issue, if user keeps the usb plugged in for somereason
//because the mostly the system will save data before going to sleep. if usb cable is plugged in it wont go to sleep, but with routine we still save the data after set intervals
			if (HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)
 800271a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800271e:	4871      	ldr	r0, [pc, #452]	; (80028e4 <app_main+0x4f0>)
 8002720:	f003 fa54 	bl	8005bcc <HAL_GPIO_ReadPin>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d050      	beq.n	80027cc <app_main+0x3d8>
					&& set_alarm_Time && !_RunTime_Packet.usb_detection) {
 800272a:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <app_main+0x4f4>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04c      	beq.n	80027cc <app_main+0x3d8>
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <app_main+0x4dc>)
 8002734:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d147      	bne.n	80027cc <app_main+0x3d8>
				//if day changes create new file
				//if user change filename or fileformat then also create new file with that format or name
				if (_RunTime_Packet.day_changed
 800273c:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <app_main+0x4dc>)
 800273e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <app_main+0x372>
						|| _RunTime_Packet.filename_changed
 8002746:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <app_main+0x4dc>)
 8002748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <app_main+0x372>
						|| _RunTime_Packet.fileformat_changed
 8002750:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <app_main+0x4dc>)
 8002752:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <app_main+0x372>
						|| _RunTime_Packet.sd_file_creation == -1) {
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <app_main+0x4dc>)
 800275c:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d114      	bne.n	8002790 <app_main+0x39c>
					_RunTime_Packet.day_changed = 0;
 8002766:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <app_main+0x4dc>)
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					_RunTime_Packet.filename_changed = 0;
 800276e:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <app_main+0x4dc>)
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					_RunTime_Packet.fileformat_changed = 0;
 8002776:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <app_main+0x4dc>)
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					_RunTime_Packet.sd_file_creation = createfile(
 800277e:	495b      	ldr	r1, [pc, #364]	; (80028ec <app_main+0x4f8>)
 8002780:	485b      	ldr	r0, [pc, #364]	; (80028f0 <app_main+0x4fc>)
 8002782:	f018 fb51 	bl	801ae28 <createfile>
 8002786:	4603      	mov	r3, r0
 8002788:	461a      	mov	r2, r3
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <app_main+0x4dc>)
 800278c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
							_Flash_Packet.File_Name, _Flash_Packet.File_Format);
				}
				if (filesaving_process()) {
 8002790:	f018 fb20 	bl	801add4 <filesaving_process>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d013      	beq.n	80027c2 <app_main+0x3ce>
					HAL_Delay(1500);
 800279a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800279e:	f001 fa55 	bl	8003c4c <HAL_Delay>
					if (filesaving_process()) {
 80027a2:	f018 fb17 	bl	801add4 <filesaving_process>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <app_main+0x3ce>
						HAL_Delay(1500);
 80027ac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80027b0:	f001 fa4c 	bl	8003c4c <HAL_Delay>
						if (filesaving_process()) {
 80027b4:	f018 fb0e 	bl	801add4 <filesaving_process>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <app_main+0x3ce>
							HAL_NVIC_SystemReset();
 80027be:	f002 f854 	bl	800486a <HAL_NVIC_SystemReset>
						}
					}
				}

				prev_sleep_time_pm_co2 = HAL_GetTick(); //we also enable sensors to take reading then
 80027c2:	f001 fa37 	bl	8003c34 <HAL_GetTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4a43      	ldr	r2, [pc, #268]	; (80028d8 <app_main+0x4e4>)
 80027ca:	6013      	str	r3, [r2, #0]
			}

			Rtc_set_alarm();
 80027cc:	f00f ff08 	bl	80125e0 <Rtc_set_alarm>

			adc_Measure(&_RunTime_Packet.battery_voltage);
 80027d0:	4840      	ldr	r0, [pc, #256]	; (80028d4 <app_main+0x4e0>)
 80027d2:	f010 f92d 	bl	8012a30 <adc_Measure>
			led_awake_routine();
 80027d6:	f7ff f9f7 	bl	8001bc8 <led_awake_routine>
			save_data();
 80027da:	f7fe fef9 	bl	80015d0 <save_data>

			if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80027de:	2101      	movs	r1, #1
 80027e0:	4840      	ldr	r0, [pc, #256]	; (80028e4 <app_main+0x4f0>)
 80027e2:	f003 f9f3 	bl	8005bcc <HAL_GPIO_ReadPin>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <app_main+0x406>
				_RunTime_Packet.motion_detection = 1;
 80027ec:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <app_main+0x4dc>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 80027f2:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <app_main+0x500>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e005      	b.n	8002806 <app_main+0x412>
			} else {
				_RunTime_Packet.motion_detection = 0;
 80027fa:	4b35      	ldr	r3, [pc, #212]	; (80028d0 <app_main+0x4dc>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	731a      	strb	r2, [r3, #12]
				debug_pir_motion = 1;
 8002800:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <app_main+0x500>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]

			}
			pwr_off_detected();
 8002806:	f7fe fcfd 	bl	8001204 <pwr_off_detected>
		while (HAL_GetTick() - prev_sleep_time <= sleep_time) //stay awake for only 1min and then sleep
 800280a:	f001 fa13 	bl	8003c34 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <app_main+0x504>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	1ad2      	subs	r2, r2, r3
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <app_main+0x508>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	f67f ae80 	bls.w	8002520 <app_main+0x12c>

		}

		//if day changes create new file
		//if user change filename or fileformat then also create new file with that format or name
		if (_RunTime_Packet.day_changed || _RunTime_Packet.filename_changed
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <app_main+0x4dc>)
 8002822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <app_main+0x456>
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <app_main+0x4dc>)
 800282c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <app_main+0x456>
				|| _RunTime_Packet.fileformat_changed
 8002834:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <app_main+0x4dc>)
 8002836:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <app_main+0x456>
				|| _RunTime_Packet.sd_file_creation == -1) {
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <app_main+0x4dc>)
 8002840:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d114      	bne.n	8002874 <app_main+0x480>
			_RunTime_Packet.day_changed = 0;
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <app_main+0x4dc>)
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			_RunTime_Packet.filename_changed = 0;
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <app_main+0x4dc>)
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			_RunTime_Packet.fileformat_changed = 0;
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <app_main+0x4dc>)
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			_RunTime_Packet.sd_file_creation = createfile(
 8002862:	4922      	ldr	r1, [pc, #136]	; (80028ec <app_main+0x4f8>)
 8002864:	4822      	ldr	r0, [pc, #136]	; (80028f0 <app_main+0x4fc>)
 8002866:	f018 fadf 	bl	801ae28 <createfile>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <app_main+0x4dc>)
 8002870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					_Flash_Packet.File_Name, _Flash_Packet.File_Format);
		}
		if (filesaving_process()) {
 8002874:	f018 faae 	bl	801add4 <filesaving_process>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d013      	beq.n	80028a6 <app_main+0x4b2>
			HAL_Delay(1500);
 800287e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002882:	f001 f9e3 	bl	8003c4c <HAL_Delay>
			if (filesaving_process()) {
 8002886:	f018 faa5 	bl	801add4 <filesaving_process>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <app_main+0x4b2>
				HAL_Delay(1500);
 8002890:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002894:	f001 f9da 	bl	8003c4c <HAL_Delay>
				if (filesaving_process()) {
 8002898:	f018 fa9c 	bl	801add4 <filesaving_process>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <app_main+0x4b2>
					HAL_NVIC_SystemReset();
 80028a2:	f001 ffe2 	bl	800486a <HAL_NVIC_SystemReset>
				}
			}
		}
		prev_sleep_time = HAL_GetTick();
 80028a6:	f001 f9c5 	bl	8003c34 <HAL_GetTick>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <app_main+0x504>)
 80028ae:	6013      	str	r3, [r2, #0]

		if (!HAL_GPIO_ReadPin(USB_DETECT_GPIO_Port, USB_DETECT_Pin)) {
 80028b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028b4:	480b      	ldr	r0, [pc, #44]	; (80028e4 <app_main+0x4f0>)
 80028b6:	f003 f989 	bl	8005bcc <HAL_GPIO_ReadPin>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <app_main+0x4d4>

			sleep();
 80028c0:	f7ff f864 	bl	800198c <sleep>
			wakeup();
 80028c4:	f7ff f8c0 	bl	8001a48 <wakeup>

		}
		pwr_off_detected();
 80028c8:	f7fe fc9c 	bl	8001204 <pwr_off_detected>
		prev_sleep_time = HAL_GetTick();
 80028cc:	e618      	b.n	8002500 <app_main+0x10c>
 80028ce:	bf00      	nop
 80028d0:	20001494 	.word	0x20001494
 80028d4:	200014b4 	.word	0x200014b4
 80028d8:	2000171c 	.word	0x2000171c
 80028dc:	20000004 	.word	0x20000004
 80028e0:	2000000c 	.word	0x2000000c
 80028e4:	40020000 	.word	0x40020000
 80028e8:	20000029 	.word	0x20000029
 80028ec:	20001360 	.word	0x20001360
 80028f0:	200012fc 	.word	0x200012fc
 80028f4:	200014e1 	.word	0x200014e1
 80028f8:	20001718 	.word	0x20001718
 80028fc:	20000000 	.word	0x20000000

08002900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002904:	f001 f930 	bl	8003b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002908:	f000 f820 	bl	800294c <SystemClock_Config>
  MX_FATFS_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
#endif
HAL_Delay(1000);
 800290c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002910:	f001 f99c 	bl	8003c4c <HAL_Delay>
  MX_GPIO_Init();
 8002914:	f000 fae2 	bl	8002edc <MX_GPIO_Init>
  MX_DMA_Init();
 8002918:	f000 fac0 	bl	8002e9c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800291c:	f000 f92a 	bl	8002b74 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 8002920:	f000 fa68 	bl	8002df4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002924:	f000 f900 	bl	8002b28 <MX_RTC_Init>
  MX_I2C1_Init();
 8002928:	f000 f8d0 	bl	8002acc <MX_I2C1_Init>
  MX_TIM2_Init();
 800292c:	f000 f992 	bl	8002c54 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002930:	f000 fa8a 	bl	8002e48 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002934:	f000 f878 	bl	8002a28 <MX_ADC1_Init>
  MX_FATFS_Init();
 8002938:	f00f fca2 	bl	8012280 <MX_FATFS_Init>
  MX_TIM1_Init();
 800293c:	f000 f93a 	bl	8002bb4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002940:	f000 f9d6 	bl	8002cf0 <MX_TIM3_Init>


  app_main(); //keep mx_usb_device_init off here
 8002944:	f7ff fd56 	bl	80023f4 <app_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002948:	e7fe      	b.n	8002948 <main+0x48>
	...

0800294c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b094      	sub	sp, #80	; 0x50
 8002950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002952:	f107 0320 	add.w	r3, r7, #32
 8002956:	2230      	movs	r2, #48	; 0x30
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f019 f92e 	bl	801bbbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <SystemClock_Config+0xd4>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <SystemClock_Config+0xd4>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <SystemClock_Config+0xd4>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <SystemClock_Config+0xd8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <SystemClock_Config+0xd8>)
 800299a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <SystemClock_Config+0xd8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80029ac:	2305      	movs	r3, #5
 80029ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029b6:	2301      	movs	r3, #1
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ba:	2302      	movs	r3, #2
 80029bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80029c4:	2319      	movs	r3, #25
 80029c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80029c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80029cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80029ce:	2304      	movs	r3, #4
 80029d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029d2:	2307      	movs	r3, #7
 80029d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	4618      	mov	r0, r3
 80029dc:	f005 fd66 	bl	80084ac <HAL_RCC_OscConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80029e6:	f000 fbe5 	bl	80031b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ea:	230f      	movs	r3, #15
 80029ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029ee:	2302      	movs	r3, #2
 80029f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f005 ffc8 	bl	800899c <HAL_RCC_ClockConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002a12:	f000 fbcf 	bl	80031b4 <Error_Handler>
  }
}
 8002a16:	bf00      	nop
 8002a18:	3750      	adds	r7, #80	; 0x50
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40007000 	.word	0x40007000

08002a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a2e:	463b      	mov	r3, r7
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a3c:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <MX_ADC1_Init+0x9c>)
 8002a3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a40:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a68:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <MX_ADC1_Init+0xa0>)
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a88:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002a8a:	f001 f947 	bl	8003d1c <HAL_ADC_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a94:	f000 fb8e 	bl	80031b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002a98:	230a      	movs	r3, #10
 8002a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002aa4:	463b      	mov	r3, r7
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <MX_ADC1_Init+0x98>)
 8002aaa:	f001 fb2d 	bl	8004108 <HAL_ADC_ConfigChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ab4:	f000 fb7e 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20001748 	.word	0x20001748
 8002ac4:	40012000 	.word	0x40012000
 8002ac8:	0f000001 	.word	0x0f000001

08002acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ad0:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <MX_I2C1_Init+0x54>)
 8002ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <MX_I2C1_Init+0x58>)
 8002ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b08:	4804      	ldr	r0, [pc, #16]	; (8002b1c <MX_I2C1_Init+0x50>)
 8002b0a:	f003 f8a9 	bl	8005c60 <HAL_I2C_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b14:	f000 fb4e 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20001790 	.word	0x20001790
 8002b20:	40005400 	.word	0x40005400
 8002b24:	00061a80 	.word	0x00061a80

08002b28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <MX_RTC_Init+0x44>)
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <MX_RTC_Init+0x48>)
 8002b30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_RTC_Init+0x44>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_RTC_Init+0x44>)
 8002b3a:	227f      	movs	r2, #127	; 0x7f
 8002b3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_RTC_Init+0x44>)
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_RTC_Init+0x44>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <MX_RTC_Init+0x44>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_RTC_Init+0x44>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_RTC_Init+0x44>)
 8002b58:	f006 f9ee 	bl	8008f38 <HAL_RTC_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002b62:	f000 fb27 	bl	80031b4 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */
#endif

  /* USER CODE END RTC_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200017e4 	.word	0x200017e4
 8002b70:	40002800 	.word	0x40002800

08002b74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
void MX_SDIO_SD_Init(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_SDIO_SD_Init+0x38>)
 8002b7a:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <MX_SDIO_SD_Init+0x3c>)
 8002b7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_SDIO_SD_Init+0x38>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_SDIO_SD_Init+0x38>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_SDIO_SD_Init+0x38>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_SDIO_SD_Init+0x38>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <MX_SDIO_SD_Init+0x38>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <MX_SDIO_SD_Init+0x38>)
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	20001804 	.word	0x20001804
 8002bb0:	40012c00 	.word	0x40012c00

08002bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bba:	f107 0308 	add.w	r3, r7, #8
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <MX_TIM1_Init+0x9c>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bfc:	4813      	ldr	r0, [pc, #76]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002bfe:	f007 fdb5 	bl	800a76c <HAL_TIM_Base_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002c08:	f000 fad4 	bl	80031b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	4619      	mov	r1, r3
 8002c18:	480c      	ldr	r0, [pc, #48]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002c1a:	f008 fa09 	bl	800b030 <HAL_TIM_ConfigClockSource>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002c24:	f000 fac6 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c30:	463b      	mov	r3, r7
 8002c32:	4619      	mov	r1, r3
 8002c34:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_TIM1_Init+0x98>)
 8002c36:	f008 fdb7 	bl	800b7a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c40:	f000 fab8 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20001888 	.word	0x20001888
 8002c50:	40010000 	.word	0x40010000

08002c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	463b      	mov	r3, r7
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <MX_TIM2_Init+0x98>)
 8002c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <MX_TIM2_Init+0x98>)
 8002c7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <MX_TIM2_Init+0x98>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <MX_TIM2_Init+0x98>)
 8002c88:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002c8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c8e:	4b17      	ldr	r3, [pc, #92]	; (8002cec <MX_TIM2_Init+0x98>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c94:	4b15      	ldr	r3, [pc, #84]	; (8002cec <MX_TIM2_Init+0x98>)
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c9a:	4814      	ldr	r0, [pc, #80]	; (8002cec <MX_TIM2_Init+0x98>)
 8002c9c:	f007 fd66 	bl	800a76c <HAL_TIM_Base_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002ca6:	f000 fa85 	bl	80031b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480d      	ldr	r0, [pc, #52]	; (8002cec <MX_TIM2_Init+0x98>)
 8002cb8:	f008 f9ba 	bl	800b030 <HAL_TIM_ConfigClockSource>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002cc2:	f000 fa77 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cce:	463b      	mov	r3, r7
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4806      	ldr	r0, [pc, #24]	; (8002cec <MX_TIM2_Init+0x98>)
 8002cd4:	f008 fd68 	bl	800b7a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002cde:	f000 fa69 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200018d0 	.word	0x200018d0

08002cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d04:	f107 0320 	add.w	r3, r7, #32
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
 8002d1c:	615a      	str	r2, [r3, #20]
 8002d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d22:	4a33      	ldr	r2, [pc, #204]	; (8002df0 <MX_TIM3_Init+0x100>)
 8002d24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d26:	4b31      	ldr	r3, [pc, #196]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002d32:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3a:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d46:	4829      	ldr	r0, [pc, #164]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d48:	f007 fd10 	bl	800a76c <HAL_TIM_Base_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d52:	f000 fa2f 	bl	80031b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d60:	4619      	mov	r1, r3
 8002d62:	4822      	ldr	r0, [pc, #136]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d64:	f008 f964 	bl	800b030 <HAL_TIM_ConfigClockSource>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002d6e:	f000 fa21 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d72:	481e      	ldr	r0, [pc, #120]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d74:	f007 fe89 	bl	800aa8a <HAL_TIM_PWM_Init>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d7e:	f000 fa19 	bl	80031b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d8a:	f107 0320 	add.w	r3, r7, #32
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4816      	ldr	r0, [pc, #88]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002d92:	f008 fd09 	bl	800b7a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002d9c:	f000 fa0a 	bl	80031b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da0:	2360      	movs	r3, #96	; 0x60
 8002da2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	2200      	movs	r2, #0
 8002db4:	4619      	mov	r1, r3
 8002db6:	480d      	ldr	r0, [pc, #52]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002db8:	f008 f878 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002dc2:	f000 f9f7 	bl	80031b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	2204      	movs	r2, #4
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4807      	ldr	r0, [pc, #28]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002dce:	f008 f86d 	bl	800aeac <HAL_TIM_PWM_ConfigChannel>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002dd8:	f000 f9ec 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ddc:	4803      	ldr	r0, [pc, #12]	; (8002dec <MX_TIM3_Init+0xfc>)
 8002dde:	f000 fc09 	bl	80035f4 <HAL_TIM_MspPostInit>

}
 8002de2:	bf00      	nop
 8002de4:	3738      	adds	r7, #56	; 0x38
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20001918 	.word	0x20001918
 8002df0:	40000400 	.word	0x40000400

08002df4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <MX_USART1_UART_Init+0x50>)
 8002dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_USART1_UART_Init+0x4c>)
 8002e2c:	f008 fd3e 	bl	800b8ac <HAL_UART_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e36:	f000 f9bd 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200019c0 	.word	0x200019c0
 8002e44:	40011000 	.word	0x40011000

08002e48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <MX_USART2_UART_Init+0x50>)
 8002e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e6e:	220c      	movs	r2, #12
 8002e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e72:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e7e:	4805      	ldr	r0, [pc, #20]	; (8002e94 <MX_USART2_UART_Init+0x4c>)
 8002e80:	f008 fd14 	bl	800b8ac <HAL_UART_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e8a:	f000 f993 	bl	80031b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20001a04 	.word	0x20001a04
 8002e98:	40004400 	.word	0x40004400

08002e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <MX_DMA_Init+0x3c>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <MX_DMA_Init+0x3c>)
 8002eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <MX_DMA_Init+0x3c>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2044      	movs	r0, #68	; 0x44
 8002ec4:	f001 fc99 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002ec8:	2044      	movs	r0, #68	; 0x44
 8002eca:	f001 fcb2 	bl	8004832 <HAL_NVIC_EnableIRQ>

}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800

08002edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee2:	f107 0314 	add.w	r3, r7, #20
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b71      	ldr	r3, [pc, #452]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a70      	ldr	r2, [pc, #448]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b6e      	ldr	r3, [pc, #440]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b6a      	ldr	r3, [pc, #424]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a69      	ldr	r2, [pc, #420]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	4b63      	ldr	r3, [pc, #396]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a62      	ldr	r2, [pc, #392]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b60      	ldr	r3, [pc, #384]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	4b5c      	ldr	r3, [pc, #368]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a5b      	ldr	r2, [pc, #364]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b59      	ldr	r3, [pc, #356]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	4b55      	ldr	r3, [pc, #340]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a54      	ldr	r2, [pc, #336]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b52      	ldr	r3, [pc, #328]	; (80030bc <MX_GPIO_Init+0x1e0>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_MOTION_GPIO_Port, EN_MOTION_Pin, GPIO_PIN_RESET);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2102      	movs	r1, #2
 8002f82:	484f      	ldr	r0, [pc, #316]	; (80030c0 <MX_GPIO_Init+0x1e4>)
 8002f84:	f002 fe3a 	bl	8005bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f8e:	484d      	ldr	r0, [pc, #308]	; (80030c4 <MX_GPIO_Init+0x1e8>)
 8002f90:	f002 fe34 	bl	8005bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8002f94:	2200      	movs	r2, #0
 8002f96:	2108      	movs	r1, #8
 8002f98:	484a      	ldr	r0, [pc, #296]	; (80030c4 <MX_GPIO_Init+0x1e8>)
 8002f9a:	f002 fe2f 	bl	8005bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002f9e:	f642 63fe 	movw	r3, #12030	; 0x2efe
 8002fa2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4845      	ldr	r0, [pc, #276]	; (80030c8 <MX_GPIO_Init+0x1ec>)
 8002fb4:	f002 fba2 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_MOTION_Pin */
  GPIO_InitStruct.Pin = OUT_MOTION_Pin;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	483d      	ldr	r0, [pc, #244]	; (80030c0 <MX_GPIO_Init+0x1e4>)
 8002fcc:	f002 fb96 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_MOTION_Pin */
  GPIO_InitStruct.Pin = EN_MOTION_Pin;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_MOTION_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4836      	ldr	r0, [pc, #216]	; (80030c0 <MX_GPIO_Init+0x1e4>)
 8002fe8:	f002 fb88 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002fec:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8002ff0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	482f      	ldr	r0, [pc, #188]	; (80030c0 <MX_GPIO_Init+0x1e4>)
 8003002:	f002 fb7b 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003006:	f247 4307 	movw	r3, #29703	; 0x7407
 800300a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800300c:	2303      	movs	r3, #3
 800300e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	4619      	mov	r1, r3
 800301a:	482a      	ldr	r0, [pc, #168]	; (80030c4 <MX_GPIO_Init+0x1e8>)
 800301c:	f002 fb6e 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_5V_Pin */
  GPIO_InitStruct.Pin = EN_5V_Pin;
 8003020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003026:	2301      	movs	r3, #1
 8003028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800302e:	2302      	movs	r3, #2
 8003030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_5V_GPIO_Port, &GPIO_InitStruct);
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	4822      	ldr	r0, [pc, #136]	; (80030c4 <MX_GPIO_Init+0x1e8>)
 800303a:	f002 fb5f 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_DETECT_Pin */
  GPIO_InitStruct.Pin = USB_DETECT_Pin;
 800303e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003044:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800304a:	2302      	movs	r3, #2
 800304c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DETECT_GPIO_Port, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	481a      	ldr	r0, [pc, #104]	; (80030c0 <MX_GPIO_Init+0x1e4>)
 8003056:	f002 fb51 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_DET_Pin */
  GPIO_InitStruct.Pin = SW_DET_Pin;
 800305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003060:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003066:	2301      	movs	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_DET_GPIO_Port, &GPIO_InitStruct);
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	4619      	mov	r1, r3
 8003070:	4813      	ldr	r0, [pc, #76]	; (80030c0 <MX_GPIO_Init+0x1e4>)
 8003072:	f002 fb43 	bl	80056fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8003076:	2308      	movs	r3, #8
 8003078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	480d      	ldr	r0, [pc, #52]	; (80030c4 <MX_GPIO_Init+0x1e8>)
 800308e:	f002 fb35 	bl	80056fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	2017      	movs	r0, #23
 8003098:	f001 fbaf 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800309c:	2017      	movs	r0, #23
 800309e:	f001 fbc8 	bl	8004832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	2028      	movs	r0, #40	; 0x28
 80030a8:	f001 fba7 	bl	80047fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030ac:	2028      	movs	r0, #40	; 0x28
 80030ae:	f001 fbc0 	bl	8004832 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020800 	.word	0x40020800

080030cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

if(htim->Instance == TIM2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_PeriodElapsedCallback+0x16>
{
	timer_interrupt();
 80030de:	f7fe f831 	bl	8001144 <timer_interrupt>
}

}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == OUT_MOTION_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_GPIO_EXTI_Callback+0x14>
    {
    	pir_interrupt();
 80030fc:	f7fe f806 	bl	800110c <pir_interrupt>
    }
    if(GPIO_Pin == USB_DETECT_Pin)
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003106:	d114      	bne.n	8003132 <HAL_GPIO_EXTI_Callback+0x46>
    {
        _RunTime_Packet.usb_detection = 1;
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_GPIO_EXTI_Callback+0x5c>)
 800310a:	2201      	movs	r2, #1
 800310c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        _RunTime_Packet.usb_start_timer = 1;
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003112:	2201      	movs	r2, #1
 8003114:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        usb_time_keep = 0;
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_GPIO_EXTI_Callback+0x60>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
        prev_usb_time_ = HAL_GetTick();
 800311e:	f000 fd89 	bl	8003c34 <HAL_GetTick>
 8003122:	4603      	mov	r3, r0
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_GPIO_EXTI_Callback+0x64>)
 8003126:	6013      	str	r3, [r2, #0]
		prev_sleep_time = HAL_GetTick();
 8003128:	f000 fd84 	bl	8003c34 <HAL_GetTick>
 800312c:	4603      	mov	r3, r0
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_GPIO_EXTI_Callback+0x68>)
 8003130:	6013      	str	r3, [r2, #0]
    }
    if(GPIO_Pin == SW_DET_Pin)
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d101      	bne.n	800313e <HAL_GPIO_EXTI_Callback+0x52>
    {
    	power_off_detect();
 800313a:	f7fe f81d 	bl	8001178 <power_off_detect>
    }
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20001494 	.word	0x20001494
 800314c:	200014dc 	.word	0x200014dc
 8003150:	20001720 	.word	0x20001720
 8003154:	20001718 	.word	0x20001718

08003158 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	RtcInt();
 8003160:	f00f fa0c 	bl	801257c <RtcInt>
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]


  if(huart == &huart1) //console uart
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_UART_ErrorCallback+0x40>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d106      	bne.n	800318a <HAL_UART_ErrorCallback+0x1e>
    {

      //HMI_uart_err = 1;
	 // _RunTime_Packet.console_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	43d2      	mvns	r2, r2
 8003186:	601a      	str	r2, [r3, #0]
   //   _RunTime_Packet.sps30_uart_error = 1;
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
    }


}
 8003188:	e009      	b.n	800319e <HAL_UART_ErrorCallback+0x32>
  else if(huart == &huart2) //sps30 uart
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <HAL_UART_ErrorCallback+0x44>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d105      	bne.n	800319e <HAL_UART_ErrorCallback+0x32>
      __HAL_UART_CLEAR_FLAG(huart,huart->ErrorCode);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	43d2      	mvns	r2, r2
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	200019c0 	.word	0x200019c0
 80031b0:	20001a04 	.word	0x20001a04

080031b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031b8:	b672      	cpsid	i
}
 80031ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_NVIC_SystemReset();
 80031bc:	f001 fb55 	bl	800486a <HAL_NVIC_SystemReset>
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <Error_Handler+0xc>
	...

080031c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_MspInit+0x4c>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <HAL_MspInit+0x4c>)
 80031d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d8:	6453      	str	r3, [r2, #68]	; 0x44
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <HAL_MspInit+0x4c>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e2:	607b      	str	r3, [r7, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_MspInit+0x4c>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_MspInit+0x4c>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_MspInit+0x4c>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800

08003214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	; 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_ADC_MspInit+0x7c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d127      	bne.n	8003286 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_ADC_MspInit+0x80>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_ADC_MspInit+0x80>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6453      	str	r3, [r2, #68]	; 0x44
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_ADC_MspInit+0x80>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_ADC_MspInit+0x80>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <HAL_ADC_MspInit+0x80>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <HAL_ADC_MspInit+0x80>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = BATT_ADC_IN10_Pin;
 800326e:	2301      	movs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003272:	2303      	movs	r3, #3
 8003274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_ADC_IN10_GPIO_Port, &GPIO_InitStruct);
 800327a:	f107 0314 	add.w	r3, r7, #20
 800327e:	4619      	mov	r1, r3
 8003280:	4805      	ldr	r0, [pc, #20]	; (8003298 <HAL_ADC_MspInit+0x84>)
 8003282:	f002 fa3b 	bl	80056fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003286:	bf00      	nop
 8003288:	3728      	adds	r7, #40	; 0x28
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40012000 	.word	0x40012000
 8003294:	40023800 	.word	0x40023800
 8003298:	40020800 	.word	0x40020800

0800329c <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a08      	ldr	r2, [pc, #32]	; (80032cc <HAL_ADC_MspDeInit+0x30>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d109      	bne.n	80032c2 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_ADC_MspDeInit+0x34>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_ADC_MspDeInit+0x34>)
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    HAL_GPIO_DeInit(BATT_ADC_IN10_GPIO_Port, BATT_ADC_IN10_Pin);
 80032ba:	2101      	movs	r1, #1
 80032bc:	4805      	ldr	r0, [pc, #20]	; (80032d4 <HAL_ADC_MspDeInit+0x38>)
 80032be:	f002 fba1 	bl	8005a04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40012000 	.word	0x40012000
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40020800 	.word	0x40020800

080032d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	; 0x28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a19      	ldr	r2, [pc, #100]	; (800335c <HAL_I2C_MspInit+0x84>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d12c      	bne.n	8003354 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_I2C_MspInit+0x88>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a17      	ldr	r2, [pc, #92]	; (8003360 <HAL_I2C_MspInit+0x88>)
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_I2C_MspInit+0x88>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCD4x_SCL_Pin|SCD4x_SDA_Pin;
 8003316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800331a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800331c:	2312      	movs	r3, #18
 800331e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003324:	2303      	movs	r3, #3
 8003326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003328:	2304      	movs	r3, #4
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4619      	mov	r1, r3
 8003332:	480c      	ldr	r0, [pc, #48]	; (8003364 <HAL_I2C_MspInit+0x8c>)
 8003334:	f002 f9e2 	bl	80056fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_I2C_MspInit+0x88>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_I2C_MspInit+0x88>)
 8003342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003346:	6413      	str	r3, [r2, #64]	; 0x40
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_I2C_MspInit+0x88>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003354:	bf00      	nop
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40005400 	.word	0x40005400
 8003360:	40023800 	.word	0x40023800
 8003364:	40020400 	.word	0x40020400

08003368 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <HAL_I2C_MspDeInit+0x3c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10f      	bne.n	800339a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_I2C_MspDeInit+0x40>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <HAL_I2C_MspDeInit+0x40>)
 8003380:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003384:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCD4x_SCL_GPIO_Port, SCD4x_SCL_Pin);
 8003386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800338a:	4808      	ldr	r0, [pc, #32]	; (80033ac <HAL_I2C_MspDeInit+0x44>)
 800338c:	f002 fb3a 	bl	8005a04 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SCD4x_SDA_GPIO_Port, SCD4x_SDA_Pin);
 8003390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003394:	4805      	ldr	r0, [pc, #20]	; (80033ac <HAL_I2C_MspDeInit+0x44>)
 8003396:	f002 fb35 	bl	8005a04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40005400 	.word	0x40005400
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020400 	.word	0x40020400

080033b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a10      	ldr	r2, [pc, #64]	; (8003410 <HAL_RTC_MspInit+0x60>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d119      	bne.n	8003406 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80033d2:	2302      	movs	r3, #2
 80033d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80033d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033da:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	4618      	mov	r0, r3
 80033e2:	f005 fcbb 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80033ec:	f7ff fee2 	bl	80031b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_RTC_MspInit+0x64>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	2029      	movs	r0, #41	; 0x29
 80033fc:	f001 f9fd 	bl	80047fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003400:	2029      	movs	r0, #41	; 0x29
 8003402:	f001 fa16 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003406:	bf00      	nop
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40002800 	.word	0x40002800
 8003414:	42470e3c 	.word	0x42470e3c

08003418 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 0314 	add.w	r3, r7, #20
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <HAL_SD_MspInit+0xc0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d14a      	bne.n	80034d0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <HAL_SD_MspInit+0xc4>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	4a26      	ldr	r2, [pc, #152]	; (80034dc <HAL_SD_MspInit+0xc4>)
 8003444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003448:	6453      	str	r3, [r2, #68]	; 0x44
 800344a:	4b24      	ldr	r3, [pc, #144]	; (80034dc <HAL_SD_MspInit+0xc4>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_SD_MspInit+0xc4>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <HAL_SD_MspInit+0xc4>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_SD_MspInit+0xc4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_SD_MspInit+0xc4>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_SD_MspInit+0xc4>)
 800347c:	f043 0308 	orr.w	r3, r3, #8
 8003480:	6313      	str	r3, [r2, #48]	; 0x30
 8003482:	4b16      	ldr	r3, [pc, #88]	; (80034dc <HAL_SD_MspInit+0xc4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800348e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034a0:	230c      	movs	r3, #12
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4619      	mov	r1, r3
 80034aa:	480d      	ldr	r0, [pc, #52]	; (80034e0 <HAL_SD_MspInit+0xc8>)
 80034ac:	f002 f926 	bl	80056fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034b0:	2304      	movs	r3, #4
 80034b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034c0:	230c      	movs	r3, #12
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4619      	mov	r1, r3
 80034ca:	4806      	ldr	r0, [pc, #24]	; (80034e4 <HAL_SD_MspInit+0xcc>)
 80034cc:	f002 f916 	bl	80056fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80034d0:	bf00      	nop
 80034d2:	3728      	adds	r7, #40	; 0x28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020c00 	.word	0x40020c00

080034e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3a      	ldr	r2, [pc, #232]	; (80035e0 <HAL_TIM_Base_MspInit+0xf8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d13f      	bne.n	800357a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
 800350a:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 8003518:	4a34      	ldr	r2, [pc, #208]	; (80035ec <HAL_TIM_Base_MspInit+0x104>)
 800351a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 800351e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003522:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 8003526:	2240      	movs	r2, #64	; 0x40
 8003528:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800352a:	4b2f      	ldr	r3, [pc, #188]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 800352c:	2200      	movs	r2, #0
 800352e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 8003532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003536:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 800353a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800353e:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003540:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 8003542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003546:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 800354a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800354e:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003550:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 8003552:	2200      	movs	r2, #0
 8003554:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003556:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 8003558:	2200      	movs	r2, #0
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800355c:	4822      	ldr	r0, [pc, #136]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 800355e:	f001 f995 	bl	800488c <HAL_DMA_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8003568:	f7ff fe24 	bl	80031b4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 8003570:	621a      	str	r2, [r3, #32]
 8003572:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <HAL_TIM_Base_MspInit+0x100>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003578:	e02e      	b.n	80035d8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d116      	bne.n	80035b2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6413      	str	r3, [r2, #64]	; 0x40
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2100      	movs	r1, #0
 80035a4:	201c      	movs	r0, #28
 80035a6:	f001 f928 	bl	80047fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035aa:	201c      	movs	r0, #28
 80035ac:	f001 f941 	bl	8004832 <HAL_NVIC_EnableIRQ>
}
 80035b0:	e012      	b.n	80035d8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10d      	bne.n	80035d8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 80035c6:	f043 0302 	orr.w	r3, r3, #2
 80035ca:	6413      	str	r3, [r2, #64]	; 0x40
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_TIM_Base_MspInit+0xfc>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	bf00      	nop
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40023800 	.word	0x40023800
 80035e8:	20001960 	.word	0x20001960
 80035ec:	40026488 	.word	0x40026488
 80035f0:	40000400 	.word	0x40000400

080035f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a12      	ldr	r2, [pc, #72]	; (800365c <HAL_TIM_MspPostInit+0x68>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d11d      	bne.n	8003652 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_TIM_MspPostInit+0x6c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a10      	ldr	r2, [pc, #64]	; (8003660 <HAL_TIM_MspPostInit+0x6c>)
 8003620:	f043 0302 	orr.w	r3, r3, #2
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <HAL_TIM_MspPostInit+0x6c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003632:	2330      	movs	r3, #48	; 0x30
 8003634:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003642:	2302      	movs	r3, #2
 8003644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	4619      	mov	r1, r3
 800364c:	4805      	ldr	r0, [pc, #20]	; (8003664 <HAL_TIM_MspPostInit+0x70>)
 800364e:	f002 f855 	bl	80056fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003652:	bf00      	nop
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40000400 	.word	0x40000400
 8003660:	40023800 	.word	0x40023800
 8003664:	40020400 	.word	0x40020400

08003668 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <HAL_TIM_Base_MspDeInit+0x68>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10b      	bne.n	8003692 <HAL_TIM_Base_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_TIM_Base_MspDeInit+0x6c>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <HAL_TIM_Base_MspDeInit+0x6c>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	6453      	str	r3, [r2, #68]	; 0x44

    /* TIM1 DMA DeInit */
    HAL_DMA_DeInit(htim_base->hdma[TIM_DMA_ID_UPDATE]);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4618      	mov	r0, r3
 800368c:	f001 f9ac 	bl	80049e8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8003690:	e019      	b.n	80036c6 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369a:	d109      	bne.n	80036b0 <HAL_TIM_Base_MspDeInit+0x48>
    __HAL_RCC_TIM2_CLK_DISABLE();
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <HAL_TIM_Base_MspDeInit+0x6c>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	4a0c      	ldr	r2, [pc, #48]	; (80036d4 <HAL_TIM_Base_MspDeInit+0x6c>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80036a8:	201c      	movs	r0, #28
 80036aa:	f001 f8d0 	bl	800484e <HAL_NVIC_DisableIRQ>
}
 80036ae:	e00a      	b.n	80036c6 <HAL_TIM_Base_MspDeInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <HAL_TIM_Base_MspDeInit+0x70>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d105      	bne.n	80036c6 <HAL_TIM_Base_MspDeInit+0x5e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_TIM_Base_MspDeInit+0x6c>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <HAL_TIM_Base_MspDeInit+0x6c>)
 80036c0:	f023 0302 	bic.w	r3, r3, #2
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40000400 	.word	0x40000400

080036dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a3a      	ldr	r2, [pc, #232]	; (80037e4 <HAL_UART_MspInit+0x108>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d134      	bne.n	8003768 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003708:	f043 0310 	orr.w	r3, r3, #16
 800370c:	6453      	str	r3, [r2, #68]	; 0x44
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a31      	ldr	r2, [pc, #196]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLI_UART1_TX_Pin|CLI_UART1_RX_Pin;
 8003736:	23c0      	movs	r3, #192	; 0xc0
 8003738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373a:	2302      	movs	r3, #2
 800373c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003742:	2303      	movs	r3, #3
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003746:	2307      	movs	r3, #7
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374a:	f107 031c 	add.w	r3, r7, #28
 800374e:	4619      	mov	r1, r3
 8003750:	4826      	ldr	r0, [pc, #152]	; (80037ec <HAL_UART_MspInit+0x110>)
 8003752:	f001 ffd3 	bl	80056fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	2025      	movs	r0, #37	; 0x25
 800375c:	f001 f84d 	bl	80047fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003760:	2025      	movs	r0, #37	; 0x25
 8003762:	f001 f866 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003766:	e038      	b.n	80037da <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <HAL_UART_MspInit+0x114>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d133      	bne.n	80037da <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	4a1b      	ldr	r2, [pc, #108]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	6413      	str	r3, [r2, #64]	; 0x40
 8003782:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6313      	str	r3, [r2, #48]	; 0x30
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_UART_MspInit+0x10c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PM_USART2_TX_Pin|PM_USART2_RX_Pin;
 80037aa:	230c      	movs	r3, #12
 80037ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ae:	2302      	movs	r3, #2
 80037b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b6:	2303      	movs	r3, #3
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037ba:	2307      	movs	r3, #7
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037be:	f107 031c 	add.w	r3, r7, #28
 80037c2:	4619      	mov	r1, r3
 80037c4:	480b      	ldr	r0, [pc, #44]	; (80037f4 <HAL_UART_MspInit+0x118>)
 80037c6:	f001 ff99 	bl	80056fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	2026      	movs	r0, #38	; 0x26
 80037d0:	f001 f813 	bl	80047fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037d4:	2026      	movs	r0, #38	; 0x26
 80037d6:	f001 f82c 	bl	8004832 <HAL_NVIC_EnableIRQ>
}
 80037da:	bf00      	nop
 80037dc:	3730      	adds	r7, #48	; 0x30
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40011000 	.word	0x40011000
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40020400 	.word	0x40020400
 80037f0:	40004400 	.word	0x40004400
 80037f4:	40020000 	.word	0x40020000

080037f8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <HAL_UART_MspDeInit+0x5c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10d      	bne.n	8003826 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_UART_MspDeInit+0x60>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	4a12      	ldr	r2, [pc, #72]	; (8003858 <HAL_UART_MspDeInit+0x60>)
 8003810:	f023 0310 	bic.w	r3, r3, #16
 8003814:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, CLI_UART1_TX_Pin|CLI_UART1_RX_Pin);
 8003816:	21c0      	movs	r1, #192	; 0xc0
 8003818:	4810      	ldr	r0, [pc, #64]	; (800385c <HAL_UART_MspDeInit+0x64>)
 800381a:	f002 f8f3 	bl	8005a04 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800381e:	2025      	movs	r0, #37	; 0x25
 8003820:	f001 f815 	bl	800484e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003824:	e011      	b.n	800384a <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_UART_MspDeInit+0x68>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10c      	bne.n	800384a <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_UART_MspDeInit+0x60>)
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	4a08      	ldr	r2, [pc, #32]	; (8003858 <HAL_UART_MspDeInit+0x60>)
 8003836:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800383a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PM_USART2_TX_Pin|PM_USART2_RX_Pin);
 800383c:	210c      	movs	r1, #12
 800383e:	4809      	ldr	r0, [pc, #36]	; (8003864 <HAL_UART_MspDeInit+0x6c>)
 8003840:	f002 f8e0 	bl	8005a04 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003844:	2026      	movs	r0, #38	; 0x26
 8003846:	f001 f802 	bl	800484e <HAL_NVIC_DisableIRQ>
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40011000 	.word	0x40011000
 8003858:	40023800 	.word	0x40023800
 800385c:	40020400 	.word	0x40020400
 8003860:	40004400 	.word	0x40004400
 8003864:	40020000 	.word	0x40020000

08003868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_NVIC_SystemReset();
 800386c:	f000 fffd 	bl	800486a <HAL_NVIC_SystemReset>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003870:	e7fe      	b.n	8003870 <NMI_Handler+0x8>

08003872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003876:	f000 fff8 	bl	800486a <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800387a:	e7fe      	b.n	800387a <HardFault_Handler+0x8>

0800387c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003880:	f000 fff3 	bl	800486a <HAL_NVIC_SystemReset>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003884:	e7fe      	b.n	8003884 <MemManage_Handler+0x8>

08003886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800388a:	f000 ffee 	bl	800486a <HAL_NVIC_SystemReset>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800388e:	e7fe      	b.n	800388e <BusFault_Handler+0x8>

08003890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8003894:	f000 ffe9 	bl	800486a <HAL_NVIC_SystemReset>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003898:	e7fe      	b.n	8003898 <UsageFault_Handler+0x8>

0800389a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
	HAL_NVIC_SystemReset();
 800389e:	f000 ffe4 	bl	800486a <HAL_NVIC_SystemReset>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038aa:	f000 ffde 	bl	800486a <HAL_NVIC_SystemReset>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	HAL_NVIC_SystemReset();
 80038b6:	f000 ffd8 	bl	800486a <HAL_NVIC_SystemReset>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}

080038be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c2:	f000 f9a3 	bl	8003c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}

080038ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DETECT_Pin);
 80038ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80038d2:	f002 f9ad 	bl	8005c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <TIM2_IRQHandler+0x10>)
 80038e2:	f007 f9db 	bl	800ac9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200018d0 	.word	0x200018d0

080038f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <USART1_IRQHandler+0x10>)
 80038f6:	f008 f97d 	bl	800bbf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200019c0 	.word	0x200019c0

08003904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <USART2_IRQHandler+0x10>)
 800390a:	f008 f973 	bl	800bbf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20001a04 	.word	0x20001a04

08003918 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_DET_Pin);
 800391c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003920:	f002 f986 	bl	8005c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}

08003928 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800392c:	4802      	ldr	r0, [pc, #8]	; (8003938 <RTC_Alarm_IRQHandler+0x10>)
 800392e:	f005 fe87 	bl	8009640 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200017e4 	.word	0x200017e4

0800393c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <OTG_FS_IRQHandler+0x10>)
 8003942:	f003 fc2c 	bl	800719e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20002914 	.word	0x20002914

08003950 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <DMA2_Stream5_IRQHandler+0x10>)
 8003956:	f001 f973 	bl	8004c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20001960 	.word	0x20001960

08003964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return 1;
 8003968:	2301      	movs	r3, #1
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_kill>:

int _kill(int pid, int sig)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800397e:	f018 f851 	bl	801ba24 <__errno>
 8003982:	4603      	mov	r3, r0
 8003984:	2216      	movs	r2, #22
 8003986:	601a      	str	r2, [r3, #0]
  return -1;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_exit>:

void _exit (int status)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800399c:	f04f 31ff 	mov.w	r1, #4294967295
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ffe7 	bl	8003974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039a6:	e7fe      	b.n	80039a6 <_exit+0x12>

080039a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e00a      	b.n	80039d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039ba:	f3af 8000 	nop.w
 80039be:	4601      	mov	r1, r0
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	60ba      	str	r2, [r7, #8]
 80039c6:	b2ca      	uxtb	r2, r1
 80039c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3301      	adds	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	dbf0      	blt.n	80039ba <_read+0x12>
  }

  return len;
 80039d8:	687b      	ldr	r3, [r7, #4]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e009      	b.n	8003a08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	60ba      	str	r2, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	3301      	adds	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	dbf1      	blt.n	80039f4 <_write+0x12>
  }
  return len;
 8003a10:	687b      	ldr	r3, [r7, #4]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <_close>:

int _close(int file)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a42:	605a      	str	r2, [r3, #4]
  return 0;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_isatty>:

int _isatty(int file)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <_sbrk+0x5c>)
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <_sbrk+0x60>)
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <_sbrk+0x64>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <_sbrk+0x68>)
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d207      	bcs.n	8003ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ab4:	f017 ffb6 	bl	801ba24 <__errno>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	220c      	movs	r2, #12
 8003abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	e009      	b.n	8003ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4a05      	ldr	r2, [pc, #20]	; (8003ae8 <_sbrk+0x64>)
 8003ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20018000 	.word	0x20018000
 8003ae4:	00000400 	.word	0x00000400
 8003ae8:	20001a48 	.word	0x20001a48
 8003aec:	200036a8 	.word	0x200036a8

08003af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <SystemInit+0x20>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <SystemInit+0x20>)
 8003afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b18:	480d      	ldr	r0, [pc, #52]	; (8003b50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b1a:	490e      	ldr	r1, [pc, #56]	; (8003b54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b1c:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b20:	e002      	b.n	8003b28 <LoopCopyDataInit>

08003b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b26:	3304      	adds	r3, #4

08003b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b2c:	d3f9      	bcc.n	8003b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b2e:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b30:	4c0b      	ldr	r4, [pc, #44]	; (8003b60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b34:	e001      	b.n	8003b3a <LoopFillZerobss>

08003b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b38:	3204      	adds	r2, #4

08003b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b3c:	d3fb      	bcc.n	8003b36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b3e:	f7ff ffd7 	bl	8003af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b42:	f017 ffe3 	bl	801bb0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b46:	f7fe fedb 	bl	8002900 <main>
  bx  lr    
 8003b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b54:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8003b58:	080230b0 	.word	0x080230b0
  ldr r2, =_sbss
 8003b5c:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8003b60:	200036a8 	.word	0x200036a8

08003b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b64:	e7fe      	b.n	8003b64 <ADC_IRQHandler>
	...

08003b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <HAL_Init+0x40>)
 8003b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_Init+0x40>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <HAL_Init+0x40>)
 8003b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <HAL_Init+0x40>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <HAL_Init+0x40>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b90:	2003      	movs	r0, #3
 8003b92:	f000 fe27 	bl	80047e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b96:	200f      	movs	r0, #15
 8003b98:	f000 f808 	bl	8003bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b9c:	f7ff fb12 	bl	80031c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023c00 	.word	0x40023c00

08003bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_InitTick+0x54>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_InitTick+0x58>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fe51 	bl	8004872 <HAL_SYSTICK_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e00e      	b.n	8003bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b0f      	cmp	r3, #15
 8003bde:	d80a      	bhi.n	8003bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003be0:	2200      	movs	r2, #0
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	f000 fe07 	bl	80047fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bec:	4a06      	ldr	r2, [pc, #24]	; (8003c08 <HAL_InitTick+0x5c>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000010 	.word	0x20000010
 8003c04:	20000018 	.word	0x20000018
 8003c08:	20000014 	.word	0x20000014

08003c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_IncTick+0x20>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <HAL_IncTick+0x24>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <HAL_IncTick+0x24>)
 8003c1e:	6013      	str	r3, [r2, #0]
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000018 	.word	0x20000018
 8003c30:	20001a4c 	.word	0x20001a4c

08003c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return uwTick;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_GetTick+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20001a4c 	.word	0x20001a4c

08003c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7ff ffee 	bl	8003c34 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d005      	beq.n	8003c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_Delay+0x44>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c72:	bf00      	nop
 8003c74:	f7ff ffde 	bl	8003c34 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d8f7      	bhi.n	8003c74 <HAL_Delay+0x28>
  {
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000018 	.word	0x20000018

08003c94 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_SuspendTick+0x1c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <HAL_SuspendTick+0x1c>)
 8003c9e:	f023 0302 	bic.w	r3, r3, #2
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	e000e010 	.word	0xe000e010

08003cb4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_ResumeTick+0x1c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <HAL_ResumeTick+0x1c>)
 8003cbe:	f043 0302 	orr.w	r3, r3, #2
 8003cc2:	6013      	str	r3, [r2, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000e010 	.word	0xe000e010

08003cd4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_GetUIDw0+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	1fff7a10 	.word	0x1fff7a10

08003cec <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_GetUIDw1+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	1fff7a14 	.word	0x1fff7a14

08003d04 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_GetUIDw2+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	1fff7a18 	.word	0x1fff7a18

08003d1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e033      	b.n	8003d9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff fa6a 	bl	8003214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d62:	f023 0302 	bic.w	r3, r3, #2
 8003d66:	f043 0202 	orr.w	r2, r3, #2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 faec 	bl	800434c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	f043 0201 	orr.w	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
 8003d8a:	e001      	b.n	8003d90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e022      	b.n	8003dfe <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f043 0202 	orr.w	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff fa5a 	bl	800329c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADC_Start+0x1a>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e097      	b.n	8003f52 <HAL_ADC_Start+0x14a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d018      	beq.n	8003e6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e48:	4b45      	ldr	r3, [pc, #276]	; (8003f60 <HAL_ADC_Start+0x158>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a45      	ldr	r2, [pc, #276]	; (8003f64 <HAL_ADC_Start+0x15c>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	0c9a      	lsrs	r2, r3, #18
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e5c:	e002      	b.n	8003e64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f9      	bne.n	8003e5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d15f      	bne.n	8003f38 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ea2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb6:	d106      	bne.n	8003ec6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	f023 0206 	bic.w	r2, r3, #6
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
 8003ec4:	e002      	b.n	8003ecc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ed4:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <HAL_ADC_Start+0x160>)
 8003ed6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ee0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10f      	bne.n	8003f0e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d129      	bne.n	8003f50 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	e020      	b.n	8003f50 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <HAL_ADC_Start+0x164>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d11b      	bne.n	8003f50 <HAL_ADC_Start+0x148>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d114      	bne.n	8003f50 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	e00b      	b.n	8003f50 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f043 0210 	orr.w	r2, r3, #16
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000010 	.word	0x20000010
 8003f64:	431bde83 	.word	0x431bde83
 8003f68:	40012300 	.word	0x40012300
 8003f6c:	40012000 	.word	0x40012000

08003f70 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_ADC_Stop+0x16>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e021      	b.n	8003fca <HAL_ADC_Stop+0x5a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff2:	d113      	bne.n	800401c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004002:	d10b      	bne.n	800401c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e063      	b.n	80040e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800401c:	f7ff fe0a 	bl	8003c34 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004022:	e021      	b.n	8004068 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d01d      	beq.n	8004068 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <HAL_ADC_PollForConversion+0x6c>
 8004032:	f7ff fdff 	bl	8003c34 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d212      	bcs.n	8004068 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d00b      	beq.n	8004068 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f043 0204 	orr.w	r2, r3, #4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e03d      	b.n	80040e4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d1d6      	bne.n	8004024 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f06f 0212 	mvn.w	r2, #18
 800407e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d123      	bne.n	80040e2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d11f      	bne.n	80040e2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d006      	beq.n	80040be <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d111      	bne.n	80040e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f043 0201 	orr.w	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x1c>
 8004120:	2302      	movs	r3, #2
 8004122:	e105      	b.n	8004330 <HAL_ADC_ConfigChannel+0x228>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b09      	cmp	r3, #9
 8004132:	d925      	bls.n	8004180 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68d9      	ldr	r1, [r3, #12]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	4613      	mov	r3, r2
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4413      	add	r3, r2
 8004148:	3b1e      	subs	r3, #30
 800414a:	2207      	movs	r2, #7
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43da      	mvns	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	400a      	ands	r2, r1
 8004158:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68d9      	ldr	r1, [r3, #12]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	4618      	mov	r0, r3
 800416c:	4603      	mov	r3, r0
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4403      	add	r3, r0
 8004172:	3b1e      	subs	r3, #30
 8004174:	409a      	lsls	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	e022      	b.n	80041c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6919      	ldr	r1, [r3, #16]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	2207      	movs	r2, #7
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	400a      	ands	r2, r1
 80041a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6919      	ldr	r1, [r3, #16]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	4618      	mov	r0, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4403      	add	r3, r0
 80041bc:	409a      	lsls	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d824      	bhi.n	8004218 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	3b05      	subs	r3, #5
 80041e0:	221f      	movs	r2, #31
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	400a      	ands	r2, r1
 80041ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	4618      	mov	r0, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	3b05      	subs	r3, #5
 800420a:	fa00 f203 	lsl.w	r2, r0, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	635a      	str	r2, [r3, #52]	; 0x34
 8004216:	e04c      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b0c      	cmp	r3, #12
 800421e:	d824      	bhi.n	800426a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	3b23      	subs	r3, #35	; 0x23
 8004232:	221f      	movs	r2, #31
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43da      	mvns	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	400a      	ands	r2, r1
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	4618      	mov	r0, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	3b23      	subs	r3, #35	; 0x23
 800425c:	fa00 f203 	lsl.w	r2, r0, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
 8004268:	e023      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	3b41      	subs	r3, #65	; 0x41
 800427c:	221f      	movs	r2, #31
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43da      	mvns	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	400a      	ands	r2, r1
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	4618      	mov	r0, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	3b41      	subs	r3, #65	; 0x41
 80042a6:	fa00 f203 	lsl.w	r2, r0, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b2:	4b22      	ldr	r3, [pc, #136]	; (800433c <HAL_ADC_ConfigChannel+0x234>)
 80042b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a21      	ldr	r2, [pc, #132]	; (8004340 <HAL_ADC_ConfigChannel+0x238>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d109      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x1cc>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b12      	cmp	r3, #18
 80042c6:	d105      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <HAL_ADC_ConfigChannel+0x238>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d123      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x21e>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d003      	beq.n	80042ee <HAL_ADC_ConfigChannel+0x1e6>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b11      	cmp	r3, #17
 80042ec:	d11b      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d111      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_ADC_ConfigChannel+0x23c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a10      	ldr	r2, [pc, #64]	; (8004348 <HAL_ADC_ConfigChannel+0x240>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	0c9a      	lsrs	r2, r3, #18
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004318:	e002      	b.n	8004320 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3b01      	subs	r3, #1
 800431e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f9      	bne.n	800431a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40012300 	.word	0x40012300
 8004340:	40012000 	.word	0x40012000
 8004344:	20000010 	.word	0x20000010
 8004348:	431bde83 	.word	0x431bde83

0800434c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004354:	4b79      	ldr	r3, [pc, #484]	; (800453c <ADC_Init+0x1f0>)
 8004356:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	021a      	lsls	r2, r3, #8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6899      	ldr	r1, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	4a58      	ldr	r2, [pc, #352]	; (8004540 <ADC_Init+0x1f4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6899      	ldr	r1, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6899      	ldr	r1, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	e00f      	b.n	800444a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004448:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0202 	bic.w	r2, r2, #2
 8004458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7e1b      	ldrb	r3, [r3, #24]
 8004464:	005a      	lsls	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01b      	beq.n	80044b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004486:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004496:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	3b01      	subs	r3, #1
 80044a4:	035a      	lsls	r2, r3, #13
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	e007      	b.n	80044c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	3b01      	subs	r3, #1
 80044dc:	051a      	lsls	r2, r3, #20
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6899      	ldr	r1, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004502:	025a      	lsls	r2, r3, #9
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6899      	ldr	r1, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	029a      	lsls	r2, r3, #10
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40012300 	.word	0x40012300
 8004540:	0f000001 	.word	0x0f000001

08004544 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8004558:	2302      	movs	r3, #2
 800455a:	e031      	b.n	80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8004566:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f023 021f 	bic.w	r2, r3, #31
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	431a      	orrs	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40012300 	.word	0x40012300

080045d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <__NVIC_SetPriorityGrouping+0x44>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045ec:	4013      	ands	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004602:	4a04      	ldr	r2, [pc, #16]	; (8004614 <__NVIC_SetPriorityGrouping+0x44>)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	60d3      	str	r3, [r2, #12]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <__NVIC_GetPriorityGrouping+0x18>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	f003 0307 	and.w	r3, r3, #7
}
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db0b      	blt.n	800465e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	f003 021f 	and.w	r2, r3, #31
 800464c:	4907      	ldr	r1, [pc, #28]	; (800466c <__NVIC_EnableIRQ+0x38>)
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2001      	movs	r0, #1
 8004656:	fa00 f202 	lsl.w	r2, r0, r2
 800465a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000e100 	.word	0xe000e100

08004670 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db12      	blt.n	80046a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	490a      	ldr	r1, [pc, #40]	; (80046b4 <__NVIC_DisableIRQ+0x44>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2001      	movs	r0, #1
 8004692:	fa00 f202 	lsl.w	r2, r0, r2
 8004696:	3320      	adds	r3, #32
 8004698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800469c:	f3bf 8f4f 	dsb	sy
}
 80046a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046a2:	f3bf 8f6f 	isb	sy
}
 80046a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000e100 	.word	0xe000e100

080046b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	db0a      	blt.n	80046e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	490c      	ldr	r1, [pc, #48]	; (8004704 <__NVIC_SetPriority+0x4c>)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	0112      	lsls	r2, r2, #4
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	440b      	add	r3, r1
 80046dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e0:	e00a      	b.n	80046f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4908      	ldr	r1, [pc, #32]	; (8004708 <__NVIC_SetPriority+0x50>)
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	3b04      	subs	r3, #4
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	440b      	add	r3, r1
 80046f6:	761a      	strb	r2, [r3, #24]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	e000e100 	.word	0xe000e100
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f1c3 0307 	rsb	r3, r3, #7
 8004726:	2b04      	cmp	r3, #4
 8004728:	bf28      	it	cs
 800472a:	2304      	movcs	r3, #4
 800472c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3304      	adds	r3, #4
 8004732:	2b06      	cmp	r3, #6
 8004734:	d902      	bls.n	800473c <NVIC_EncodePriority+0x30>
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3b03      	subs	r3, #3
 800473a:	e000      	b.n	800473e <NVIC_EncodePriority+0x32>
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	f04f 32ff 	mov.w	r2, #4294967295
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	401a      	ands	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004754:	f04f 31ff 	mov.w	r1, #4294967295
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	fa01 f303 	lsl.w	r3, r1, r3
 800475e:	43d9      	mvns	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	4313      	orrs	r3, r2
         );
}
 8004766:	4618      	mov	r0, r3
 8004768:	3724      	adds	r7, #36	; 0x24
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004778:	f3bf 8f4f 	dsb	sy
}
 800477c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <__NVIC_SystemReset+0x24>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004786:	4904      	ldr	r1, [pc, #16]	; (8004798 <__NVIC_SystemReset+0x24>)
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <__NVIC_SystemReset+0x28>)
 800478a:	4313      	orrs	r3, r2
 800478c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800478e:	f3bf 8f4f 	dsb	sy
}
 8004792:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <__NVIC_SystemReset+0x20>
 8004798:	e000ed00 	.word	0xe000ed00
 800479c:	05fa0004 	.word	0x05fa0004

080047a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047b0:	d301      	bcc.n	80047b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00f      	b.n	80047d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047b6:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <SysTick_Config+0x40>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047be:	210f      	movs	r1, #15
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	f7ff ff78 	bl	80046b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <SysTick_Config+0x40>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ce:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <SysTick_Config+0x40>)
 80047d0:	2207      	movs	r2, #7
 80047d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	e000e010 	.word	0xe000e010

080047e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff feef 	bl	80045d0 <__NVIC_SetPriorityGrouping>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4603      	mov	r3, r0
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800480c:	f7ff ff04 	bl	8004618 <__NVIC_GetPriorityGrouping>
 8004810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f7ff ff78 	bl	800470c <NVIC_EncodePriority>
 800481c:	4602      	mov	r2, r0
 800481e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff47 	bl	80046b8 <__NVIC_SetPriority>
}
 800482a:	bf00      	nop
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800483c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fef7 	bl	8004634 <__NVIC_EnableIRQ>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff07 	bl	8004670 <__NVIC_DisableIRQ>
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800486e:	f7ff ff81 	bl	8004774 <__NVIC_SystemReset>

08004872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ff90 	bl	80047a0 <SysTick_Config>
 8004880:	4603      	mov	r3, r0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004898:	f7ff f9cc 	bl	8003c34 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e099      	b.n	80049dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c8:	e00f      	b.n	80048ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ca:	f7ff f9b3 	bl	8003c34 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	d908      	bls.n	80048ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2203      	movs	r2, #3
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e078      	b.n	80049dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e8      	bne.n	80048ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <HAL_DMA_Init+0x158>)
 8004904:	4013      	ands	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	2b04      	cmp	r3, #4
 8004942:	d107      	bne.n	8004954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	4313      	orrs	r3, r2
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b04      	cmp	r3, #4
 800497c:	d117      	bne.n	80049ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb43 	bl	800501c <DMA_CheckFifoParam>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049aa:	2301      	movs	r3, #1
 80049ac:	e016      	b.n	80049dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fafa 	bl	8004fb0 <DMA_CalcBaseAndBitshift>
 80049bc:	4603      	mov	r3, r0
 80049be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	223f      	movs	r2, #63	; 0x3f
 80049c6:	409a      	lsls	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	f010803f 	.word	0xf010803f

080049e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e050      	b.n	8004a9c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d101      	bne.n	8004a0a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
 8004a08:	e048      	b.n	8004a9c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2221      	movs	r2, #33	; 0x21
 8004a48:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fab0 	bl	8004fb0 <DMA_CalcBaseAndBitshift>
 8004a50:	4603      	mov	r3, r0
 8004a52:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	223f      	movs	r2, #63	; 0x3f
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_DMA_Start+0x20>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e026      	b.n	8004b12 <HAL_DMA_Start+0x6e>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d115      	bne.n	8004b04 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fa31 	bl	8004f54 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e005      	b.n	8004b10 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b28:	f7ff f884 	bl	8003c34 <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d008      	beq.n	8004b4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2280      	movs	r2, #128	; 0x80
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e052      	b.n	8004bf2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0216 	bic.w	r2, r2, #22
 8004b5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <HAL_DMA_Abort+0x62>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0208 	bic.w	r2, r2, #8
 8004b8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b9c:	e013      	b.n	8004bc6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b9e:	f7ff f849 	bl	8003c34 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b05      	cmp	r3, #5
 8004baa:	d90c      	bls.n	8004bc6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e015      	b.n	8004bf2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e4      	bne.n	8004b9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd8:	223f      	movs	r2, #63	; 0x3f
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d004      	beq.n	8004c18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2280      	movs	r2, #128	; 0x80
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e00c      	b.n	8004c32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2205      	movs	r2, #5
 8004c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c4c:	4b8e      	ldr	r3, [pc, #568]	; (8004e88 <HAL_DMA_IRQHandler+0x248>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a8e      	ldr	r2, [pc, #568]	; (8004e8c <HAL_DMA_IRQHandler+0x24c>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	0a9b      	lsrs	r3, r3, #10
 8004c58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01a      	beq.n	8004cac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0204 	bic.w	r2, r2, #4
 8004c92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	2208      	movs	r2, #8
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	f043 0201 	orr.w	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d012      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	2201      	movs	r2, #1
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	f043 0202 	orr.w	r2, r3, #2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d012      	beq.n	8004d18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	2204      	movs	r2, #4
 8004d06:	409a      	lsls	r2, r3
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	f043 0204 	orr.w	r2, r3, #4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1c:	2210      	movs	r2, #16
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d043      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d03c      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d018      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d108      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d024      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
 8004d6e:	e01f      	b.n	8004db0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01b      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
 8004d80:	e016      	b.n	8004db0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d107      	bne.n	8004da0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0208 	bic.w	r2, r2, #8
 8004d9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db4:	2220      	movs	r2, #32
 8004db6:	409a      	lsls	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 808f 	beq.w	8004ee0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8087 	beq.w	8004ee0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d136      	bne.n	8004e58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0216 	bic.w	r2, r2, #22
 8004df8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <HAL_DMA_IRQHandler+0x1da>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0208 	bic.w	r2, r2, #8
 8004e28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2e:	223f      	movs	r2, #63	; 0x3f
 8004e30:	409a      	lsls	r2, r3
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d07e      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	4798      	blx	r3
        }
        return;
 8004e56:	e079      	b.n	8004f4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01d      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10d      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d031      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3
 8004e84:	e02c      	b.n	8004ee0 <HAL_DMA_IRQHandler+0x2a0>
 8004e86:	bf00      	nop
 8004e88:	20000010 	.word	0x20000010
 8004e8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d023      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
 8004ea0:	e01e      	b.n	8004ee0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10f      	bne.n	8004ed0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0210 	bic.w	r2, r2, #16
 8004ebe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d032      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d022      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2205      	movs	r2, #5
 8004ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d307      	bcc.n	8004f28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f2      	bne.n	8004f0c <HAL_DMA_IRQHandler+0x2cc>
 8004f26:	e000      	b.n	8004f2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
 8004f4a:	e000      	b.n	8004f4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f4c:	bf00      	nop
    }
  }
}
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d108      	bne.n	8004f94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f92:	e007      	b.n	8004fa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	3b10      	subs	r3, #16
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <DMA_CalcBaseAndBitshift+0x64>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fca:	4a13      	ldr	r2, [pc, #76]	; (8005018 <DMA_CalcBaseAndBitshift+0x68>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d909      	bls.n	8004ff2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	659a      	str	r2, [r3, #88]	; 0x58
 8004ff0:	e007      	b.n	8005002 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	aaaaaaab 	.word	0xaaaaaaab
 8005018:	08022704 	.word	0x08022704

0800501c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11f      	bne.n	8005076 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d856      	bhi.n	80050ea <DMA_CheckFifoParam+0xce>
 800503c:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <DMA_CheckFifoParam+0x28>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005055 	.word	0x08005055
 8005048:	08005067 	.word	0x08005067
 800504c:	08005055 	.word	0x08005055
 8005050:	080050eb 	.word	0x080050eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d046      	beq.n	80050ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005064:	e043      	b.n	80050ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800506e:	d140      	bne.n	80050f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005074:	e03d      	b.n	80050f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507e:	d121      	bne.n	80050c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d837      	bhi.n	80050f6 <DMA_CheckFifoParam+0xda>
 8005086:	a201      	add	r2, pc, #4	; (adr r2, 800508c <DMA_CheckFifoParam+0x70>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050a3 	.word	0x080050a3
 8005094:	0800509d 	.word	0x0800509d
 8005098:	080050b5 	.word	0x080050b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
      break;
 80050a0:	e030      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d025      	beq.n	80050fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b2:	e022      	b.n	80050fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050bc:	d11f      	bne.n	80050fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050c2:	e01c      	b.n	80050fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d903      	bls.n	80050d2 <DMA_CheckFifoParam+0xb6>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d003      	beq.n	80050d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050d0:	e018      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
      break;
 80050d6:	e015      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00e      	beq.n	8005102 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
      break;
 80050e8:	e00b      	b.n	8005102 <DMA_CheckFifoParam+0xe6>
      break;
 80050ea:	bf00      	nop
 80050ec:	e00a      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
      break;
 80050ee:	bf00      	nop
 80050f0:	e008      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
      break;
 80050f2:	bf00      	nop
 80050f4:	e006      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
      break;
 80050f6:	bf00      	nop
 80050f8:	e004      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
      break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
      break;   
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <DMA_CheckFifoParam+0xe8>
      break;
 8005102:	bf00      	nop
    }
  } 
  
  return status; 
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop

08005114 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005126:	4b23      	ldr	r3, [pc, #140]	; (80051b4 <HAL_FLASH_Program+0xa0>)
 8005128:	7e1b      	ldrb	r3, [r3, #24]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_FLASH_Program+0x1e>
 800512e:	2302      	movs	r3, #2
 8005130:	e03b      	b.n	80051aa <HAL_FLASH_Program+0x96>
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_FLASH_Program+0xa0>)
 8005134:	2201      	movs	r2, #1
 8005136:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005138:	f24c 3050 	movw	r0, #50000	; 0xc350
 800513c:	f000 f87c 	bl	8005238 <FLASH_WaitForLastOperation>
 8005140:	4603      	mov	r3, r0
 8005142:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005144:	7dfb      	ldrb	r3, [r7, #23]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d12b      	bne.n	80051a2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005150:	783b      	ldrb	r3, [r7, #0]
 8005152:	4619      	mov	r1, r3
 8005154:	68b8      	ldr	r0, [r7, #8]
 8005156:	f000 f927 	bl	80053a8 <FLASH_Program_Byte>
 800515a:	e016      	b.n	800518a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005162:	883b      	ldrh	r3, [r7, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	68b8      	ldr	r0, [r7, #8]
 8005168:	f000 f8fa 	bl	8005360 <FLASH_Program_HalfWord>
 800516c:	e00d      	b.n	800518a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d105      	bne.n	8005180 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4619      	mov	r1, r3
 8005178:	68b8      	ldr	r0, [r7, #8]
 800517a:	f000 f8cf 	bl	800531c <FLASH_Program_Word>
 800517e:	e004      	b.n	800518a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005184:	68b8      	ldr	r0, [r7, #8]
 8005186:	f000 f897 	bl	80052b8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800518a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800518e:	f000 f853 	bl	8005238 <FLASH_WaitForLastOperation>
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <HAL_FLASH_Program+0xa4>)
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	4a07      	ldr	r2, [pc, #28]	; (80051b8 <HAL_FLASH_Program+0xa4>)
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80051a2:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <HAL_FLASH_Program+0xa0>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20001a50 	.word	0x20001a50
 80051b8:	40023c00 	.word	0x40023c00

080051bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80051c6:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <HAL_FLASH_Unlock+0x38>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da0b      	bge.n	80051e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_FLASH_Unlock+0x38>)
 80051d0:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <HAL_FLASH_Unlock+0x3c>)
 80051d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <HAL_FLASH_Unlock+0x38>)
 80051d6:	4a09      	ldr	r2, [pc, #36]	; (80051fc <HAL_FLASH_Unlock+0x40>)
 80051d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_FLASH_Unlock+0x38>)
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da01      	bge.n	80051e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80051e6:	79fb      	ldrb	r3, [r7, #7]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	40023c00 	.word	0x40023c00
 80051f8:	45670123 	.word	0x45670123
 80051fc:	cdef89ab 	.word	0xcdef89ab

08005200 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_FLASH_Lock+0x1c>)
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	4a04      	ldr	r2, [pc, #16]	; (800521c <HAL_FLASH_Lock+0x1c>)
 800520a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800520e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40023c00 	.word	0x40023c00

08005220 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_FLASH_GetError+0x14>)
 8005226:	69db      	ldr	r3, [r3, #28]
}  
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20001a50 	.word	0x20001a50

08005238 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005244:	4b1a      	ldr	r3, [pc, #104]	; (80052b0 <FLASH_WaitForLastOperation+0x78>)
 8005246:	2200      	movs	r2, #0
 8005248:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800524a:	f7fe fcf3 	bl	8003c34 <HAL_GetTick>
 800524e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005250:	e010      	b.n	8005274 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d00c      	beq.n	8005274 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <FLASH_WaitForLastOperation+0x38>
 8005260:	f7fe fce8 	bl	8003c34 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d201      	bcs.n	8005274 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e019      	b.n	80052a8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005274:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <FLASH_WaitForLastOperation+0x7c>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e8      	bne.n	8005252 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <FLASH_WaitForLastOperation+0x7c>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <FLASH_WaitForLastOperation+0x7c>)
 800528e:	2201      	movs	r2, #1
 8005290:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <FLASH_WaitForLastOperation+0x7c>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800529e:	f000 f8a5 	bl	80053ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
  
}  
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20001a50 	.word	0x20001a50
 80052b4:	40023c00 	.word	0x40023c00

080052b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052c4:	4b14      	ldr	r3, [pc, #80]	; (8005318 <FLASH_Program_DoubleWord+0x60>)
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	4a13      	ldr	r2, [pc, #76]	; (8005318 <FLASH_Program_DoubleWord+0x60>)
 80052ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <FLASH_Program_DoubleWord+0x60>)
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	4a10      	ldr	r2, [pc, #64]	; (8005318 <FLASH_Program_DoubleWord+0x60>)
 80052d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80052da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <FLASH_Program_DoubleWord+0x60>)
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	4a0d      	ldr	r2, [pc, #52]	; (8005318 <FLASH_Program_DoubleWord+0x60>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80052ee:	f3bf 8f6f 	isb	sy
}
 80052f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80052f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	000a      	movs	r2, r1
 8005302:	2300      	movs	r3, #0
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	3104      	adds	r1, #4
 8005308:	4613      	mov	r3, r2
 800530a:	600b      	str	r3, [r1, #0]
}
 800530c:	bf00      	nop
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40023c00 	.word	0x40023c00

0800531c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <FLASH_Program_Word+0x40>)
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	4a0c      	ldr	r2, [pc, #48]	; (800535c <FLASH_Program_Word+0x40>)
 800532c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005330:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005332:	4b0a      	ldr	r3, [pc, #40]	; (800535c <FLASH_Program_Word+0x40>)
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <FLASH_Program_Word+0x40>)
 8005338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <FLASH_Program_Word+0x40>)
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	4a06      	ldr	r2, [pc, #24]	; (800535c <FLASH_Program_Word+0x40>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	601a      	str	r2, [r3, #0]
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40023c00 	.word	0x40023c00

08005360 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800536c:	4b0d      	ldr	r3, [pc, #52]	; (80053a4 <FLASH_Program_HalfWord+0x44>)
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <FLASH_Program_HalfWord+0x44>)
 8005372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <FLASH_Program_HalfWord+0x44>)
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <FLASH_Program_HalfWord+0x44>)
 800537e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005384:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <FLASH_Program_HalfWord+0x44>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	4a06      	ldr	r2, [pc, #24]	; (80053a4 <FLASH_Program_HalfWord+0x44>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	801a      	strh	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40023c00 	.word	0x40023c00

080053a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <FLASH_Program_Byte+0x40>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	4a0b      	ldr	r2, [pc, #44]	; (80053e8 <FLASH_Program_Byte+0x40>)
 80053ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80053c0:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <FLASH_Program_Byte+0x40>)
 80053c2:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <FLASH_Program_Byte+0x40>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053c8:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <FLASH_Program_Byte+0x40>)
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <FLASH_Program_Byte+0x40>)
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	701a      	strb	r2, [r3, #0]
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40023c00 	.word	0x40023c00

080053ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80053f0:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80053fc:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f043 0310 	orr.w	r3, r3, #16
 8005404:	4a2b      	ldr	r2, [pc, #172]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 8005406:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005408:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 800540a:	2210      	movs	r2, #16
 800540c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800540e:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d008      	beq.n	800542c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800541a:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f043 0308 	orr.w	r3, r3, #8
 8005422:	4a24      	ldr	r2, [pc, #144]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 8005424:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 8005428:	2220      	movs	r2, #32
 800542a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800542c:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005438:	4b1e      	ldr	r3, [pc, #120]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f043 0304 	orr.w	r3, r3, #4
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 8005442:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 8005446:	2240      	movs	r2, #64	; 0x40
 8005448:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800544a:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d008      	beq.n	8005468 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005456:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f043 0302 	orr.w	r3, r3, #2
 800545e:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 8005460:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005462:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 8005464:	2280      	movs	r2, #128	; 0x80
 8005466:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005468:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005474:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	4a0d      	ldr	r2, [pc, #52]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 800547e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005480:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 8005482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005486:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f043 0320 	orr.w	r3, r3, #32
 800549c:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <FLASH_SetErrorCode+0xc8>)
 800549e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80054a0:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <FLASH_SetErrorCode+0xc4>)
 80054a2:	2202      	movs	r2, #2
 80054a4:	60da      	str	r2, [r3, #12]
  }
}
 80054a6:	bf00      	nop
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40023c00 	.word	0x40023c00
 80054b4:	20001a50 	.word	0x20001a50

080054b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80054ca:	4b31      	ldr	r3, [pc, #196]	; (8005590 <HAL_FLASHEx_Erase+0xd8>)
 80054cc:	7e1b      	ldrb	r3, [r3, #24]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_FLASHEx_Erase+0x1e>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e058      	b.n	8005588 <HAL_FLASHEx_Erase+0xd0>
 80054d6:	4b2e      	ldr	r3, [pc, #184]	; (8005590 <HAL_FLASHEx_Erase+0xd8>)
 80054d8:	2201      	movs	r2, #1
 80054da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80054dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054e0:	f7ff feaa 	bl	8005238 <FLASH_WaitForLastOperation>
 80054e4:	4603      	mov	r3, r0
 80054e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d148      	bne.n	8005580 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295
 80054f4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d115      	bne.n	800552a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f000 f844 	bl	8005598 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005510:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005514:	f7ff fe90 	bl	8005238 <FLASH_WaitForLastOperation>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <HAL_FLASHEx_Erase+0xdc>)
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	4a1c      	ldr	r2, [pc, #112]	; (8005594 <HAL_FLASHEx_Erase+0xdc>)
 8005522:	f023 0304 	bic.w	r3, r3, #4
 8005526:	6113      	str	r3, [r2, #16]
 8005528:	e028      	b.n	800557c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	e01c      	b.n	800556c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	4619      	mov	r1, r3
 800553a:	68b8      	ldr	r0, [r7, #8]
 800553c:	f000 f850 	bl	80055e0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005540:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005544:	f7ff fe78 	bl	8005238 <FLASH_WaitForLastOperation>
 8005548:	4603      	mov	r3, r0
 800554a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <HAL_FLASHEx_Erase+0xdc>)
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	4a10      	ldr	r2, [pc, #64]	; (8005594 <HAL_FLASHEx_Erase+0xdc>)
 8005552:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005556:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	601a      	str	r2, [r3, #0]
          break;
 8005564:	e00a      	b.n	800557c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	3301      	adds	r3, #1
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4413      	add	r3, r2
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	429a      	cmp	r2, r3
 800557a:	d3da      	bcc.n	8005532 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800557c:	f000 f878 	bl	8005670 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005580:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_FLASHEx_Erase+0xd8>)
 8005582:	2200      	movs	r2, #0
 8005584:	761a      	strb	r2, [r3, #24]

  return status;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20001a50 	.word	0x20001a50
 8005594:	40023c00 	.word	0x40023c00

08005598 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80055a4:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <FLASH_MassErase+0x44>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	4a0c      	ldr	r2, [pc, #48]	; (80055dc <FLASH_MassErase+0x44>)
 80055aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <FLASH_MassErase+0x44>)
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	4a09      	ldr	r2, [pc, #36]	; (80055dc <FLASH_MassErase+0x44>)
 80055b6:	f043 0304 	orr.w	r3, r3, #4
 80055ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <FLASH_MassErase+0x44>)
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	4313      	orrs	r3, r2
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <FLASH_MassErase+0x44>)
 80055c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055cc:	6113      	str	r3, [r2, #16]
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40023c00 	.word	0x40023c00

080055e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e010      	b.n	800561e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d103      	bne.n	800560a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e009      	b.n	800561e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d103      	bne.n	8005618 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	e002      	b.n	800561e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005618:	f44f 7340 	mov.w	r3, #768	; 0x300
 800561c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800561e:	4b13      	ldr	r3, [pc, #76]	; (800566c <FLASH_Erase_Sector+0x8c>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	4a12      	ldr	r2, [pc, #72]	; (800566c <FLASH_Erase_Sector+0x8c>)
 8005624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005628:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <FLASH_Erase_Sector+0x8c>)
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	490f      	ldr	r1, [pc, #60]	; (800566c <FLASH_Erase_Sector+0x8c>)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <FLASH_Erase_Sector+0x8c>)
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	4a0c      	ldr	r2, [pc, #48]	; (800566c <FLASH_Erase_Sector+0x8c>)
 800563c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005640:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <FLASH_Erase_Sector+0x8c>)
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4313      	orrs	r3, r2
 800564c:	4a07      	ldr	r2, [pc, #28]	; (800566c <FLASH_Erase_Sector+0x8c>)
 800564e:	f043 0302 	orr.w	r3, r3, #2
 8005652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <FLASH_Erase_Sector+0x8c>)
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	4a04      	ldr	r2, [pc, #16]	; (800566c <FLASH_Erase_Sector+0x8c>)
 800565a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565e:	6113      	str	r3, [r2, #16]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40023c00 	.word	0x40023c00

08005670 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005674:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <FLASH_FlushCaches+0x88>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567c:	2b00      	cmp	r3, #0
 800567e:	d017      	beq.n	80056b0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <FLASH_FlushCaches+0x88>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1c      	ldr	r2, [pc, #112]	; (80056f8 <FLASH_FlushCaches+0x88>)
 8005686:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800568a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800568c:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <FLASH_FlushCaches+0x88>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a19      	ldr	r2, [pc, #100]	; (80056f8 <FLASH_FlushCaches+0x88>)
 8005692:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b17      	ldr	r3, [pc, #92]	; (80056f8 <FLASH_FlushCaches+0x88>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <FLASH_FlushCaches+0x88>)
 800569e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056a4:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d017      	beq.n	80056ec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80056bc:	4b0e      	ldr	r3, [pc, #56]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a0d      	ldr	r2, [pc, #52]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056c6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a07      	ldr	r2, [pc, #28]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <FLASH_FlushCaches+0x88>)
 80056e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ea:	6013      	str	r3, [r2, #0]
  }
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40023c00 	.word	0x40023c00

080056fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	e159      	b.n	80059cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005718:	2201      	movs	r2, #1
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4013      	ands	r3, r2
 800572a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	429a      	cmp	r2, r3
 8005732:	f040 8148 	bne.w	80059c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d005      	beq.n	800574e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800574a:	2b02      	cmp	r3, #2
 800574c:	d130      	bne.n	80057b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	2203      	movs	r2, #3
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43db      	mvns	r3, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4013      	ands	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005784:	2201      	movs	r2, #1
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4013      	ands	r3, r2
 8005792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	091b      	lsrs	r3, r3, #4
 800579a:	f003 0201 	and.w	r2, r3, #1
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d017      	beq.n	80057ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	2203      	movs	r2, #3
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d123      	bne.n	8005840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	08da      	lsrs	r2, r3, #3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3208      	adds	r2, #8
 8005800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	220f      	movs	r2, #15
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	08da      	lsrs	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3208      	adds	r2, #8
 800583a:	69b9      	ldr	r1, [r7, #24]
 800583c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	2203      	movs	r2, #3
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	43db      	mvns	r3, r3
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4013      	ands	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f003 0203 	and.w	r2, r3, #3
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80a2 	beq.w	80059c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	4b57      	ldr	r3, [pc, #348]	; (80059e4 <HAL_GPIO_Init+0x2e8>)
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	4a56      	ldr	r2, [pc, #344]	; (80059e4 <HAL_GPIO_Init+0x2e8>)
 800588c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005890:	6453      	str	r3, [r2, #68]	; 0x44
 8005892:	4b54      	ldr	r3, [pc, #336]	; (80059e4 <HAL_GPIO_Init+0x2e8>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800589e:	4a52      	ldr	r2, [pc, #328]	; (80059e8 <HAL_GPIO_Init+0x2ec>)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	3302      	adds	r3, #2
 80058a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	220f      	movs	r2, #15
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a49      	ldr	r2, [pc, #292]	; (80059ec <HAL_GPIO_Init+0x2f0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d019      	beq.n	80058fe <HAL_GPIO_Init+0x202>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a48      	ldr	r2, [pc, #288]	; (80059f0 <HAL_GPIO_Init+0x2f4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_GPIO_Init+0x1fe>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a47      	ldr	r2, [pc, #284]	; (80059f4 <HAL_GPIO_Init+0x2f8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00d      	beq.n	80058f6 <HAL_GPIO_Init+0x1fa>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a46      	ldr	r2, [pc, #280]	; (80059f8 <HAL_GPIO_Init+0x2fc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <HAL_GPIO_Init+0x1f6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a45      	ldr	r2, [pc, #276]	; (80059fc <HAL_GPIO_Init+0x300>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <HAL_GPIO_Init+0x1f2>
 80058ea:	2304      	movs	r3, #4
 80058ec:	e008      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058ee:	2307      	movs	r3, #7
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e004      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e002      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_GPIO_Init+0x204>
 80058fe:	2300      	movs	r3, #0
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	f002 0203 	and.w	r2, r2, #3
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4093      	lsls	r3, r2
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005910:	4935      	ldr	r1, [pc, #212]	; (80059e8 <HAL_GPIO_Init+0x2ec>)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	3302      	adds	r3, #2
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800591e:	4b38      	ldr	r3, [pc, #224]	; (8005a00 <HAL_GPIO_Init+0x304>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005942:	4a2f      	ldr	r2, [pc, #188]	; (8005a00 <HAL_GPIO_Init+0x304>)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005948:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <HAL_GPIO_Init+0x304>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800596c:	4a24      	ldr	r2, [pc, #144]	; (8005a00 <HAL_GPIO_Init+0x304>)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005972:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <HAL_GPIO_Init+0x304>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	43db      	mvns	r3, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005996:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <HAL_GPIO_Init+0x304>)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800599c:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_GPIO_Init+0x304>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059c0:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <HAL_GPIO_Init+0x304>)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3301      	adds	r3, #1
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b0f      	cmp	r3, #15
 80059d0:	f67f aea2 	bls.w	8005718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40013800 	.word	0x40013800
 80059ec:	40020000 	.word	0x40020000
 80059f0:	40020400 	.word	0x40020400
 80059f4:	40020800 	.word	0x40020800
 80059f8:	40020c00 	.word	0x40020c00
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40013c00 	.word	0x40013c00

08005a04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e0bb      	b.n	8005b98 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a20:	2201      	movs	r2, #1
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	f040 80ab 	bne.w	8005b92 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005a3c:	4a5c      	ldr	r2, [pc, #368]	; (8005bb0 <HAL_GPIO_DeInit+0x1ac>)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	089b      	lsrs	r3, r3, #2
 8005a42:	3302      	adds	r3, #2
 8005a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a48:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	220f      	movs	r2, #15
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a54      	ldr	r2, [pc, #336]	; (8005bb4 <HAL_GPIO_DeInit+0x1b0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d019      	beq.n	8005a9a <HAL_GPIO_DeInit+0x96>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a53      	ldr	r2, [pc, #332]	; (8005bb8 <HAL_GPIO_DeInit+0x1b4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <HAL_GPIO_DeInit+0x92>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a52      	ldr	r2, [pc, #328]	; (8005bbc <HAL_GPIO_DeInit+0x1b8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00d      	beq.n	8005a92 <HAL_GPIO_DeInit+0x8e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a51      	ldr	r2, [pc, #324]	; (8005bc0 <HAL_GPIO_DeInit+0x1bc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <HAL_GPIO_DeInit+0x8a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a50      	ldr	r2, [pc, #320]	; (8005bc4 <HAL_GPIO_DeInit+0x1c0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d101      	bne.n	8005a8a <HAL_GPIO_DeInit+0x86>
 8005a86:	2304      	movs	r3, #4
 8005a88:	e008      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a8a:	2307      	movs	r3, #7
 8005a8c:	e006      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e004      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e002      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <HAL_GPIO_DeInit+0x98>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	f002 0203 	and.w	r2, r2, #3
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	4093      	lsls	r3, r2
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d132      	bne.n	8005b12 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005aac:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	43db      	mvns	r3, r3
 8005ab4:	4944      	ldr	r1, [pc, #272]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	4941      	ldr	r1, [pc, #260]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ac8:	4b3f      	ldr	r3, [pc, #252]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	493d      	ldr	r1, [pc, #244]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ad6:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	43db      	mvns	r3, r3
 8005ade:	493a      	ldr	r1, [pc, #232]	; (8005bc8 <HAL_GPIO_DeInit+0x1c4>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	220f      	movs	r2, #15
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005af4:	4a2e      	ldr	r2, [pc, #184]	; (8005bb0 <HAL_GPIO_DeInit+0x1ac>)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	089b      	lsrs	r3, r3, #2
 8005afa:	3302      	adds	r3, #2
 8005afc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	43da      	mvns	r2, r3
 8005b04:	482a      	ldr	r0, [pc, #168]	; (8005bb0 <HAL_GPIO_DeInit+0x1ac>)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	089b      	lsrs	r3, r3, #2
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	2103      	movs	r1, #3
 8005b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	401a      	ands	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	08da      	lsrs	r2, r3, #3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3208      	adds	r2, #8
 8005b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	220f      	movs	r2, #15
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	08d2      	lsrs	r2, r2, #3
 8005b48:	4019      	ands	r1, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3208      	adds	r2, #8
 8005b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	2103      	movs	r1, #3
 8005b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	401a      	ands	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	2103      	movs	r1, #3
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	401a      	ands	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3301      	adds	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	f67f af40 	bls.w	8005a20 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40020000 	.word	0x40020000
 8005bb8:	40020400 	.word	0x40020400
 8005bbc:	40020800 	.word	0x40020800
 8005bc0:	40020c00 	.word	0x40020c00
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40013c00 	.word	0x40013c00

08005bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	887b      	ldrh	r3, [r7, #2]
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	e001      	b.n	8005bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	807b      	strh	r3, [r7, #2]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c0c:	787b      	ldrb	r3, [r7, #1]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c12:	887a      	ldrh	r2, [r7, #2]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c18:	e003      	b.n	8005c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c1a:	887b      	ldrh	r3, [r7, #2]
 8005c1c:	041a      	lsls	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	619a      	str	r2, [r3, #24]
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c46:	4a05      	ldr	r2, [pc, #20]	; (8005c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fd fa4c 	bl	80030ec <HAL_GPIO_EXTI_Callback>
  }
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40013c00 	.word	0x40013c00

08005c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e12b      	b.n	8005eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fd fb26 	bl	80032d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	; 0x24
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f003 f822 	bl	8008d0c <HAL_RCC_GetPCLK1Freq>
 8005cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4a81      	ldr	r2, [pc, #516]	; (8005ed4 <HAL_I2C_Init+0x274>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d807      	bhi.n	8005ce4 <HAL_I2C_Init+0x84>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a80      	ldr	r2, [pc, #512]	; (8005ed8 <HAL_I2C_Init+0x278>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	bf94      	ite	ls
 8005cdc:	2301      	movls	r3, #1
 8005cde:	2300      	movhi	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e006      	b.n	8005cf2 <HAL_I2C_Init+0x92>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4a7d      	ldr	r2, [pc, #500]	; (8005edc <HAL_I2C_Init+0x27c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	bf94      	ite	ls
 8005cec:	2301      	movls	r3, #1
 8005cee:	2300      	movhi	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e0e7      	b.n	8005eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a78      	ldr	r2, [pc, #480]	; (8005ee0 <HAL_I2C_Init+0x280>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	0c9b      	lsrs	r3, r3, #18
 8005d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4a6a      	ldr	r2, [pc, #424]	; (8005ed4 <HAL_I2C_Init+0x274>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d802      	bhi.n	8005d34 <HAL_I2C_Init+0xd4>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	3301      	adds	r3, #1
 8005d32:	e009      	b.n	8005d48 <HAL_I2C_Init+0xe8>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	4a69      	ldr	r2, [pc, #420]	; (8005ee4 <HAL_I2C_Init+0x284>)
 8005d40:	fba2 2303 	umull	r2, r3, r2, r3
 8005d44:	099b      	lsrs	r3, r3, #6
 8005d46:	3301      	adds	r3, #1
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	495c      	ldr	r1, [pc, #368]	; (8005ed4 <HAL_I2C_Init+0x274>)
 8005d64:	428b      	cmp	r3, r1
 8005d66:	d819      	bhi.n	8005d9c <HAL_I2C_Init+0x13c>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1e59      	subs	r1, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d76:	1c59      	adds	r1, r3, #1
 8005d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d7c:	400b      	ands	r3, r1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_I2C_Init+0x138>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1e59      	subs	r1, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d90:	3301      	adds	r3, #1
 8005d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d96:	e051      	b.n	8005e3c <HAL_I2C_Init+0x1dc>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	e04f      	b.n	8005e3c <HAL_I2C_Init+0x1dc>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d111      	bne.n	8005dc8 <HAL_I2C_Init+0x168>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1e58      	subs	r0, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	440b      	add	r3, r1
 8005db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005db6:	3301      	adds	r3, #1
 8005db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	e012      	b.n	8005dee <HAL_I2C_Init+0x18e>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1e58      	subs	r0, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6859      	ldr	r1, [r3, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	0099      	lsls	r1, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dde:	3301      	adds	r3, #1
 8005de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_I2C_Init+0x196>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e022      	b.n	8005e3c <HAL_I2C_Init+0x1dc>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10e      	bne.n	8005e1c <HAL_I2C_Init+0x1bc>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1e58      	subs	r0, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6859      	ldr	r1, [r3, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	440b      	add	r3, r1
 8005e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e10:	3301      	adds	r3, #1
 8005e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e1a:	e00f      	b.n	8005e3c <HAL_I2C_Init+0x1dc>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1e58      	subs	r0, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6859      	ldr	r1, [r3, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	0099      	lsls	r1, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e32:	3301      	adds	r3, #1
 8005e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	6809      	ldr	r1, [r1, #0]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69da      	ldr	r2, [r3, #28]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6911      	ldr	r1, [r2, #16]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68d2      	ldr	r2, [r2, #12]
 8005e76:	4311      	orrs	r1, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	000186a0 	.word	0x000186a0
 8005ed8:	001e847f 	.word	0x001e847f
 8005edc:	003d08ff 	.word	0x003d08ff
 8005ee0:	431bde83 	.word	0x431bde83
 8005ee4:	10624dd3 	.word	0x10624dd3

08005ee8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e021      	b.n	8005f3e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2224      	movs	r2, #36	; 0x24
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0201 	bic.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fd fa28 	bl	8003368 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	461a      	mov	r2, r3
 8005f54:	460b      	mov	r3, r1
 8005f56:	817b      	strh	r3, [r7, #10]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f5c:	f7fd fe6a 	bl	8003c34 <HAL_GetTick>
 8005f60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	f040 80e0 	bne.w	8006130 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	2319      	movs	r3, #25
 8005f76:	2201      	movs	r2, #1
 8005f78:	4970      	ldr	r1, [pc, #448]	; (800613c <HAL_I2C_Master_Transmit+0x1f4>)
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fd86 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f86:	2302      	movs	r3, #2
 8005f88:	e0d3      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_I2C_Master_Transmit+0x50>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e0cc      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1ea>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d007      	beq.n	8005fbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0201 	orr.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2221      	movs	r2, #33	; 0x21
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2210      	movs	r2, #16
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	893a      	ldrh	r2, [r7, #8]
 8005fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4a50      	ldr	r2, [pc, #320]	; (8006140 <HAL_I2C_Master_Transmit+0x1f8>)
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006000:	8979      	ldrh	r1, [r7, #10]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 fbf0 	bl	80067ec <I2C_MasterRequestWrite>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e08d      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800602c:	e066      	b.n	80060fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	6a39      	ldr	r1, [r7, #32]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fe00 	bl	8006c38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2b04      	cmp	r3, #4
 8006044:	d107      	bne.n	8006056 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e06b      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b04      	cmp	r3, #4
 8006096:	d11b      	bne.n	80060d0 <HAL_I2C_Master_Transmit+0x188>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609c:	2b00      	cmp	r3, #0
 800609e:	d017      	beq.n	80060d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	6a39      	ldr	r1, [r7, #32]
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fdf0 	bl	8006cba <I2C_WaitOnBTFFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00d      	beq.n	80060fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	2b04      	cmp	r3, #4
 80060e6:	d107      	bne.n	80060f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e01a      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006100:	2b00      	cmp	r3, #0
 8006102:	d194      	bne.n	800602e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	e000      	b.n	8006132 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006130:	2302      	movs	r3, #2
  }
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	00100002 	.word	0x00100002
 8006140:	ffff0000 	.word	0xffff0000

08006144 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	; 0x30
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	461a      	mov	r2, r3
 8006150:	460b      	mov	r3, r1
 8006152:	817b      	strh	r3, [r7, #10]
 8006154:	4613      	mov	r3, r2
 8006156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006158:	f7fd fd6c 	bl	8003c34 <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b20      	cmp	r3, #32
 8006168:	f040 820b 	bne.w	8006582 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2319      	movs	r3, #25
 8006172:	2201      	movs	r2, #1
 8006174:	497c      	ldr	r1, [pc, #496]	; (8006368 <HAL_I2C_Master_Receive+0x224>)
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fc88 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006182:	2302      	movs	r3, #2
 8006184:	e1fe      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_I2C_Master_Receive+0x50>
 8006190:	2302      	movs	r3, #2
 8006192:	e1f7      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d007      	beq.n	80061ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2222      	movs	r2, #34	; 0x22
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2210      	movs	r2, #16
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	893a      	ldrh	r2, [r7, #8]
 80061ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a5c      	ldr	r2, [pc, #368]	; (800636c <HAL_I2C_Master_Receive+0x228>)
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061fc:	8979      	ldrh	r1, [r7, #10]
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fb74 	bl	80068f0 <I2C_MasterRequestRead>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e1b8      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006216:	2b00      	cmp	r3, #0
 8006218:	d113      	bne.n	8006242 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800621a:	2300      	movs	r3, #0
 800621c:	623b      	str	r3, [r7, #32]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	623b      	str	r3, [r7, #32]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	e18c      	b.n	800655c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	2b01      	cmp	r3, #1
 8006248:	d11b      	bne.n	8006282 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	61fb      	str	r3, [r7, #28]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	61fb      	str	r3, [r7, #28]
 800626e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e16c      	b.n	800655c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006286:	2b02      	cmp	r3, #2
 8006288:	d11b      	bne.n	80062c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006298:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	e14c      	b.n	800655c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80062e8:	e138      	b.n	800655c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	f200 80f1 	bhi.w	80064d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d123      	bne.n	8006344 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fd1b 	bl	8006d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e139      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006342:	e10b      	b.n	800655c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	2b02      	cmp	r3, #2
 800634a:	d14e      	bne.n	80063ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2200      	movs	r2, #0
 8006354:	4906      	ldr	r1, [pc, #24]	; (8006370 <HAL_I2C_Master_Receive+0x22c>)
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 fb98 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e10e      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
 8006366:	bf00      	nop
 8006368:	00100002 	.word	0x00100002
 800636c:	ffff0000 	.word	0xffff0000
 8006370:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691a      	ldr	r2, [r3, #16]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063e8:	e0b8      	b.n	800655c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	2200      	movs	r2, #0
 80063f2:	4966      	ldr	r1, [pc, #408]	; (800658c <HAL_I2C_Master_Receive+0x448>)
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fb49 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0bf      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2200      	movs	r2, #0
 800644e:	494f      	ldr	r1, [pc, #316]	; (800658c <HAL_I2C_Master_Receive+0x448>)
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fb1b 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e091      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064d4:	e042      	b.n	800655c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fc2e 	bl	8006d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e04c      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d118      	bne.n	800655c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006560:	2b00      	cmp	r3, #0
 8006562:	f47f aec2 	bne.w	80062ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3728      	adds	r7, #40	; 0x28
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	00010004 	.word	0x00010004

08006590 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	460b      	mov	r3, r1
 800659e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80065a0:	f7fd fb48 	bl	8003c34 <HAL_GetTick>
 80065a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	f040 8111 	bne.w	80067da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	2319      	movs	r3, #25
 80065be:	2201      	movs	r2, #1
 80065c0:	4988      	ldr	r1, [pc, #544]	; (80067e4 <HAL_I2C_IsDeviceReady+0x254>)
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fa62 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80065ce:	2302      	movs	r3, #2
 80065d0:	e104      	b.n	80067dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_I2C_IsDeviceReady+0x50>
 80065dc:	2302      	movs	r3, #2
 80065de:	e0fd      	b.n	80067dc <HAL_I2C_IsDeviceReady+0x24c>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d007      	beq.n	8006606 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2224      	movs	r2, #36	; 0x24
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a70      	ldr	r2, [pc, #448]	; (80067e8 <HAL_I2C_IsDeviceReady+0x258>)
 8006628:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006638:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2200      	movs	r2, #0
 8006642:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fa20 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006660:	d103      	bne.n	800666a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006668:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e0b6      	b.n	80067dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800666e:	897b      	ldrh	r3, [r7, #10]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800667c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800667e:	f7fd fad9 	bl	8003c34 <HAL_GetTick>
 8006682:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b02      	cmp	r3, #2
 8006690:	bf0c      	ite	eq
 8006692:	2301      	moveq	r3, #1
 8006694:	2300      	movne	r3, #0
 8006696:	b2db      	uxtb	r3, r3
 8006698:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a8:	bf0c      	ite	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	2300      	movne	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066b2:	e025      	b.n	8006700 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066b4:	f7fd fabe 	bl	8003c34 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d302      	bcc.n	80066ca <HAL_I2C_IsDeviceReady+0x13a>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	22a0      	movs	r2, #160	; 0xa0
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	bf0c      	ite	eq
 80066e0:	2301      	moveq	r3, #1
 80066e2:	2300      	movne	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f6:	bf0c      	ite	eq
 80066f8:	2301      	moveq	r3, #1
 80066fa:	2300      	movne	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2ba0      	cmp	r3, #160	; 0xa0
 800670a:	d005      	beq.n	8006718 <HAL_I2C_IsDeviceReady+0x188>
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <HAL_I2C_IsDeviceReady+0x188>
 8006712:	7dbb      	ldrb	r3, [r7, #22]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0cd      	beq.n	80066b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d129      	bne.n	8006782 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	2319      	movs	r3, #25
 800675a:	2201      	movs	r2, #1
 800675c:	4921      	ldr	r1, [pc, #132]	; (80067e4 <HAL_I2C_IsDeviceReady+0x254>)
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f994 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e036      	b.n	80067dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	e02c      	b.n	80067dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006790:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800679a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	2319      	movs	r3, #25
 80067a2:	2201      	movs	r2, #1
 80067a4:	490f      	ldr	r1, [pc, #60]	; (80067e4 <HAL_I2C_IsDeviceReady+0x254>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f970 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e012      	b.n	80067dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	3301      	adds	r3, #1
 80067ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	f4ff af32 	bcc.w	800662a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80067da:	2302      	movs	r3, #2
  }
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	00100002 	.word	0x00100002
 80067e8:	ffff0000 	.word	0xffff0000

080067ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	607a      	str	r2, [r7, #4]
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	460b      	mov	r3, r1
 80067fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d006      	beq.n	8006816 <I2C_MasterRequestWrite+0x2a>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d003      	beq.n	8006816 <I2C_MasterRequestWrite+0x2a>
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006814:	d108      	bne.n	8006828 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e00b      	b.n	8006840 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	2b12      	cmp	r3, #18
 800682e:	d107      	bne.n	8006840 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800683e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f91d 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00d      	beq.n	8006874 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	d103      	bne.n	8006870 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800686e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e035      	b.n	80068e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800687c:	d108      	bne.n	8006890 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800687e:	897b      	ldrh	r3, [r7, #10]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800688c:	611a      	str	r2, [r3, #16]
 800688e:	e01b      	b.n	80068c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006890:	897b      	ldrh	r3, [r7, #10]
 8006892:	11db      	asrs	r3, r3, #7
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f003 0306 	and.w	r3, r3, #6
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f063 030f 	orn	r3, r3, #15
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	490e      	ldr	r1, [pc, #56]	; (80068e8 <I2C_MasterRequestWrite+0xfc>)
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 f943 	bl	8006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e010      	b.n	80068e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068be:	897b      	ldrh	r3, [r7, #10]
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4907      	ldr	r1, [pc, #28]	; (80068ec <I2C_MasterRequestWrite+0x100>)
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f933 	bl	8006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	00010008 	.word	0x00010008
 80068ec:	00010002 	.word	0x00010002

080068f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	607a      	str	r2, [r7, #4]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	460b      	mov	r3, r1
 80068fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006914:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b08      	cmp	r3, #8
 800691a:	d006      	beq.n	800692a <I2C_MasterRequestRead+0x3a>
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d003      	beq.n	800692a <I2C_MasterRequestRead+0x3a>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006928:	d108      	bne.n	800693c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e00b      	b.n	8006954 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	2b11      	cmp	r3, #17
 8006942:	d107      	bne.n	8006954 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006952:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f893 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00d      	beq.n	8006988 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697a:	d103      	bne.n	8006984 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e079      	b.n	8006a7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006990:	d108      	bne.n	80069a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006992:	897b      	ldrh	r3, [r7, #10]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f043 0301 	orr.w	r3, r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	611a      	str	r2, [r3, #16]
 80069a2:	e05f      	b.n	8006a64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069a4:	897b      	ldrh	r3, [r7, #10]
 80069a6:	11db      	asrs	r3, r3, #7
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f003 0306 	and.w	r3, r3, #6
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f063 030f 	orn	r3, r3, #15
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4930      	ldr	r1, [pc, #192]	; (8006a84 <I2C_MasterRequestRead+0x194>)
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f8b9 	bl	8006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e054      	b.n	8006a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069d2:	897b      	ldrh	r3, [r7, #10]
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	4929      	ldr	r1, [pc, #164]	; (8006a88 <I2C_MasterRequestRead+0x198>)
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f8a9 	bl	8006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e044      	b.n	8006a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f2:	2300      	movs	r3, #0
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	613b      	str	r3, [r7, #16]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	613b      	str	r3, [r7, #16]
 8006a06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f831 	bl	8006a8c <I2C_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00d      	beq.n	8006a4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3e:	d103      	bne.n	8006a48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e017      	b.n	8006a7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a4c:	897b      	ldrh	r3, [r7, #10]
 8006a4e:	11db      	asrs	r3, r3, #7
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 0306 	and.w	r3, r3, #6
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f063 030e 	orn	r3, r3, #14
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4907      	ldr	r1, [pc, #28]	; (8006a88 <I2C_MasterRequestRead+0x198>)
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f865 	bl	8006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	00010008 	.word	0x00010008
 8006a88:	00010002 	.word	0x00010002

08006a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a9c:	e025      	b.n	8006aea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa4:	d021      	beq.n	8006aea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa6:	f7fd f8c5 	bl	8003c34 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d302      	bcc.n	8006abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d116      	bne.n	8006aea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e023      	b.n	8006b32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d10d      	bne.n	8006b10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	43da      	mvns	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4013      	ands	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	e00c      	b.n	8006b2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	43da      	mvns	r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d0b6      	beq.n	8006a9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b48:	e051      	b.n	8006bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d123      	bne.n	8006ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f043 0204 	orr.w	r2, r3, #4
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e046      	b.n	8006c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d021      	beq.n	8006bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006baa:	f7fd f843 	bl	8003c34 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d116      	bne.n	8006bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f043 0220 	orr.w	r2, r3, #32
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e020      	b.n	8006c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d10c      	bne.n	8006c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	43da      	mvns	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4013      	ands	r3, r2
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	bf14      	ite	ne
 8006c0a:	2301      	movne	r3, #1
 8006c0c:	2300      	moveq	r3, #0
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	e00b      	b.n	8006c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	43da      	mvns	r2, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d18d      	bne.n	8006b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c44:	e02d      	b.n	8006ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 f8ce 	bl	8006de8 <I2C_IsAcknowledgeFailed>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e02d      	b.n	8006cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5c:	d021      	beq.n	8006ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c5e:	f7fc ffe9 	bl	8003c34 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d302      	bcc.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d116      	bne.n	8006ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	f043 0220 	orr.w	r2, r3, #32
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e007      	b.n	8006cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cac:	2b80      	cmp	r3, #128	; 0x80
 8006cae:	d1ca      	bne.n	8006c46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cc6:	e02d      	b.n	8006d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f88d 	bl	8006de8 <I2C_IsAcknowledgeFailed>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e02d      	b.n	8006d34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d021      	beq.n	8006d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce0:	f7fc ffa8 	bl	8003c34 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d302      	bcc.n	8006cf6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d116      	bne.n	8006d24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f043 0220 	orr.w	r2, r3, #32
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e007      	b.n	8006d34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d1ca      	bne.n	8006cc8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d48:	e042      	b.n	8006dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	f003 0310 	and.w	r3, r3, #16
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d119      	bne.n	8006d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0210 	mvn.w	r2, #16
 8006d60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e029      	b.n	8006de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8c:	f7fc ff52 	bl	8003c34 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d302      	bcc.n	8006da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d116      	bne.n	8006dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	f043 0220 	orr.w	r2, r3, #32
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e007      	b.n	8006de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d1b5      	bne.n	8006d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfe:	d11b      	bne.n	8006e38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	f043 0204 	orr.w	r2, r3, #4
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006e46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e48:	b08f      	sub	sp, #60	; 0x3c
 8006e4a:	af0a      	add	r7, sp, #40	; 0x28
 8006e4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e10f      	b.n	8007078 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f014 fa48 	bl	801b308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f006 fc45 	bl	800d726 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	687e      	ldr	r6, [r7, #4]
 8006ea4:	466d      	mov	r5, sp
 8006ea6:	f106 0410 	add.w	r4, r6, #16
 8006eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006eb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006eb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006eba:	1d33      	adds	r3, r6, #4
 8006ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ebe:	6838      	ldr	r0, [r7, #0]
 8006ec0:	f006 fb1c 	bl	800d4fc <USB_CoreInit>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e0d0      	b.n	8007078 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f006 fc33 	bl	800d748 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
 8006ee6:	e04a      	b.n	8006f7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ee8:	7bfa      	ldrb	r2, [r7, #15]
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	333d      	adds	r3, #61	; 0x3d
 8006ef8:	2201      	movs	r2, #1
 8006efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006efc:	7bfa      	ldrb	r2, [r7, #15]
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	333c      	adds	r3, #60	; 0x3c
 8006f0c:	7bfa      	ldrb	r2, [r7, #15]
 8006f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f10:	7bfa      	ldrb	r2, [r7, #15]
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	b298      	uxth	r0, r3
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	3344      	adds	r3, #68	; 0x44
 8006f24:	4602      	mov	r2, r0
 8006f26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006f28:	7bfa      	ldrb	r2, [r7, #15]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	3340      	adds	r3, #64	; 0x40
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006f3c:	7bfa      	ldrb	r2, [r7, #15]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	3348      	adds	r3, #72	; 0x48
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006f50:	7bfa      	ldrb	r2, [r7, #15]
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	4613      	mov	r3, r2
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	334c      	adds	r3, #76	; 0x4c
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f64:	7bfa      	ldrb	r2, [r7, #15]
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	3354      	adds	r3, #84	; 0x54
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	73fb      	strb	r3, [r7, #15]
 8006f7e:	7bfa      	ldrb	r2, [r7, #15]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d3af      	bcc.n	8006ee8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
 8006f8c:	e044      	b.n	8007018 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f8e:	7bfa      	ldrb	r2, [r7, #15]
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006fa4:	7bfa      	ldrb	r2, [r7, #15]
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006fb6:	7bfa      	ldrb	r2, [r7, #15]
 8006fb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006fba:	7bfa      	ldrb	r2, [r7, #15]
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006fd0:	7bfa      	ldrb	r2, [r7, #15]
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006fe6:	7bfa      	ldrb	r2, [r7, #15]
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ffc:	7bfa      	ldrb	r2, [r7, #15]
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4613      	mov	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	3301      	adds	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	429a      	cmp	r2, r3
 8007020:	d3b5      	bcc.n	8006f8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	603b      	str	r3, [r7, #0]
 8007028:	687e      	ldr	r6, [r7, #4]
 800702a:	466d      	mov	r5, sp
 800702c:	f106 0410 	add.w	r4, r6, #16
 8007030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007038:	e894 0003 	ldmia.w	r4, {r0, r1}
 800703c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007040:	1d33      	adds	r3, r6, #4
 8007042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007044:	6838      	ldr	r0, [r7, #0]
 8007046:	f006 fbcb 	bl	800d7e0 <USB_DevInit>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e00d      	b.n	8007078 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4618      	mov	r0, r3
 8007072:	f007 fd69 	bl	800eb48 <USB_DevDisconnect>

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007080 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e015      	b.n	80070be <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2203      	movs	r2, #3
 8007096:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f007 fcbc 	bl	800ea1c <USB_StopDevice>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e007      	b.n	80070be <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f014 f97e 	bl	801b3b0 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b084      	sub	sp, #16
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_PCD_Start+0x1c>
 80070de:	2302      	movs	r3, #2
 80070e0:	e020      	b.n	8007124 <HAL_PCD_Start+0x5e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d109      	bne.n	8007106 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d005      	beq.n	8007106 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f006 fafa 	bl	800d704 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f007 fcf6 	bl	800eb06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_PCD_Stop+0x1c>
 8007144:	2302      	movs	r3, #2
 8007146:	e026      	b.n	8007196 <HAL_PCD_Stop+0x6a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f006 fae6 	bl	800d726 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f007 fcf2 	bl	800eb48 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2110      	movs	r1, #16
 800716a:	4618      	mov	r0, r3
 800716c:	f006 fc9c 	bl	800daa8 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	2b01      	cmp	r3, #1
 8007176:	d109      	bne.n	800718c <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800717c:	2b01      	cmp	r3, #1
 800717e:	d005      	beq.n	800718c <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800719e:	b590      	push	{r4, r7, lr}
 80071a0:	b08d      	sub	sp, #52	; 0x34
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f007 fd7b 	bl	800ecb0 <USB_GetMode>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 848a 	bne.w	8007ad6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f007 fcdf 	bl	800eb8a <USB_ReadInterrupts>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8480 	beq.w	8007ad4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	0a1b      	lsrs	r3, r3, #8
 80071de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f007 fccc 	bl	800eb8a <USB_ReadInterrupts>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d107      	bne.n	800720c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f002 0202 	and.w	r2, r2, #2
 800720a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f007 fcba 	bl	800eb8a <USB_ReadInterrupts>
 8007216:	4603      	mov	r3, r0
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b10      	cmp	r3, #16
 800721e:	d161      	bne.n	80072e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0210 	bic.w	r2, r2, #16
 800722e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f003 020f 	and.w	r2, r3, #15
 800723c:	4613      	mov	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	4413      	add	r3, r2
 800724c:	3304      	adds	r3, #4
 800724e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	0c5b      	lsrs	r3, r3, #17
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	2b02      	cmp	r3, #2
 800725a:	d124      	bne.n	80072a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007262:	4013      	ands	r3, r2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d035      	beq.n	80072d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	091b      	lsrs	r3, r3, #4
 8007270:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007276:	b29b      	uxth	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	6a38      	ldr	r0, [r7, #32]
 800727c:	f007 faa2 	bl	800e7c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	091b      	lsrs	r3, r3, #4
 8007288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800728c:	441a      	add	r2, r3
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	6a1a      	ldr	r2, [r3, #32]
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	091b      	lsrs	r3, r3, #4
 800729a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800729e:	441a      	add	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	621a      	str	r2, [r3, #32]
 80072a4:	e016      	b.n	80072d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	0c5b      	lsrs	r3, r3, #17
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	2b06      	cmp	r3, #6
 80072b0:	d110      	bne.n	80072d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072b8:	2208      	movs	r2, #8
 80072ba:	4619      	mov	r1, r3
 80072bc:	6a38      	ldr	r0, [r7, #32]
 80072be:	f007 fa81 	bl	800e7c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6a1a      	ldr	r2, [r3, #32]
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	091b      	lsrs	r3, r3, #4
 80072ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ce:	441a      	add	r2, r3
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0210 	orr.w	r2, r2, #16
 80072e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f007 fc4e 	bl	800eb8a <USB_ReadInterrupts>
 80072ee:	4603      	mov	r3, r0
 80072f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072f8:	f040 80a7 	bne.w	800744a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f007 fc53 	bl	800ebb0 <USB_ReadDevAllOutEpInterrupt>
 800730a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800730c:	e099      	b.n	8007442 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 808e 	beq.w	8007436 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f007 fc77 	bl	800ec18 <USB_ReadDevOutEPInterrupt>
 800732a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00c      	beq.n	8007350 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	461a      	mov	r2, r3
 8007344:	2301      	movs	r3, #1
 8007346:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fef0 	bl	8008130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00c      	beq.n	8007374 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	461a      	mov	r2, r3
 8007368:	2308      	movs	r3, #8
 800736a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800736c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 ffc6 	bl	8008300 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	2b00      	cmp	r3, #0
 800737c:	d008      	beq.n	8007390 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738a:	461a      	mov	r2, r3
 800738c:	2310      	movs	r3, #16
 800738e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d030      	beq.n	80073fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d109      	bne.n	80073ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80073ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073bc:	4613      	mov	r3, r2
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	3304      	adds	r3, #4
 80073ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	78db      	ldrb	r3, [r3, #3]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d108      	bne.n	80073ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2200      	movs	r2, #0
 80073dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f014 f8b5 	bl	801b554 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f6:	461a      	mov	r2, r3
 80073f8:	2302      	movs	r3, #2
 80073fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d008      	beq.n	8007418 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007412:	461a      	mov	r2, r3
 8007414:	2320      	movs	r3, #32
 8007416:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742e:	461a      	mov	r2, r3
 8007430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007434:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	3301      	adds	r3, #1
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	2b00      	cmp	r3, #0
 8007446:	f47f af62 	bne.w	800730e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f007 fb9b 	bl	800eb8a <USB_ReadInterrupts>
 8007454:	4603      	mov	r3, r0
 8007456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800745a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800745e:	f040 80db 	bne.w	8007618 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f007 fbbc 	bl	800ebe4 <USB_ReadDevAllInEpInterrupt>
 800746c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007472:	e0cd      	b.n	8007610 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80c2 	beq.w	8007604 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f007 fbe2 	bl	800ec54 <USB_ReadDevInEPInterrupt>
 8007490:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d057      	beq.n	800754c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	2201      	movs	r2, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	43db      	mvns	r3, r3
 80074b6:	69f9      	ldr	r1, [r7, #28]
 80074b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074bc:	4013      	ands	r3, r2
 80074be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	461a      	mov	r2, r3
 80074ce:	2301      	movs	r3, #1
 80074d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d132      	bne.n	8007540 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074de:	4613      	mov	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	334c      	adds	r3, #76	; 0x4c
 80074ea:	6819      	ldr	r1, [r3, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f0:	4613      	mov	r3, r2
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4403      	add	r3, r0
 80074fa:	3348      	adds	r3, #72	; 0x48
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4419      	add	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	4613      	mov	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4403      	add	r3, r0
 800750e:	334c      	adds	r3, #76	; 0x4c
 8007510:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d113      	bne.n	8007540 <HAL_PCD_IRQHandler+0x3a2>
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751c:	4613      	mov	r3, r2
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	3354      	adds	r3, #84	; 0x54
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d108      	bne.n	8007540 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007538:	461a      	mov	r2, r3
 800753a:	2101      	movs	r1, #1
 800753c:	f007 fbea 	bl	800ed14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f013 ff7f 	bl	801b44a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d008      	beq.n	8007568 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007562:	461a      	mov	r2, r3
 8007564:	2308      	movs	r3, #8
 8007566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757e:	461a      	mov	r2, r3
 8007580:	2310      	movs	r3, #16
 8007582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759a:	461a      	mov	r2, r3
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d023      	beq.n	80075f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80075aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ac:	6a38      	ldr	r0, [r7, #32]
 80075ae:	f006 fa7b 	bl	800daa8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80075b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b4:	4613      	mov	r3, r2
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	3338      	adds	r3, #56	; 0x38
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	4413      	add	r3, r2
 80075c2:	3304      	adds	r3, #4
 80075c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	78db      	ldrb	r3, [r3, #3]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d108      	bne.n	80075e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f013 ffcc 	bl	801b578 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	461a      	mov	r2, r3
 80075ee:	2302      	movs	r3, #2
 80075f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80075fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fd08 	bl	8008014 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	3301      	adds	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	2b00      	cmp	r3, #0
 8007614:	f47f af2e 	bne.w	8007474 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4618      	mov	r0, r3
 800761e:	f007 fab4 	bl	800eb8a <USB_ReadInterrupts>
 8007622:	4603      	mov	r3, r0
 8007624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800762c:	d122      	bne.n	8007674 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007648:	2b01      	cmp	r3, #1
 800764a:	d108      	bne.n	800765e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007654:	2100      	movs	r1, #0
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fef0 	bl	800843c <HAL_PCDEx_LPM_Callback>
 800765c:	e002      	b.n	8007664 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f013 ff6a 	bl	801b538 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695a      	ldr	r2, [r3, #20]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f007 fa86 	bl	800eb8a <USB_ReadInterrupts>
 800767e:	4603      	mov	r3, r0
 8007680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007688:	d112      	bne.n	80076b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b01      	cmp	r3, #1
 8007698:	d102      	bne.n	80076a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f013 ff26 	bl	801b4ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80076ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f007 fa68 	bl	800eb8a <USB_ReadInterrupts>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c4:	f040 80b7 	bne.w	8007836 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d6:	f023 0301 	bic.w	r3, r3, #1
 80076da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2110      	movs	r1, #16
 80076e2:	4618      	mov	r0, r3
 80076e4:	f006 f9e0 	bl	800daa8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076e8:	2300      	movs	r3, #0
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ec:	e046      	b.n	800777c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	461a      	mov	r2, r3
 80076fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007700:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007712:	0151      	lsls	r1, r2, #5
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	440a      	add	r2, r1
 8007718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007720:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	461a      	mov	r2, r3
 8007730:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007734:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	440a      	add	r2, r1
 800774c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007750:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007754:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007770:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007774:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	3301      	adds	r3, #1
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007782:	429a      	cmp	r2, r3
 8007784:	d3b3      	bcc.n	80076ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007794:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007798:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077b2:	f043 030b 	orr.w	r3, r3, #11
 80077b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c8:	f043 030b 	orr.w	r3, r3, #11
 80077cc:	6453      	str	r3, [r2, #68]	; 0x44
 80077ce:	e015      	b.n	80077fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80077e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f6:	f043 030b 	orr.w	r3, r3, #11
 80077fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69fa      	ldr	r2, [r7, #28]
 8007806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800780a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800780e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007820:	461a      	mov	r2, r3
 8007822:	f007 fa77 	bl	800ed14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f007 f9a5 	bl	800eb8a <USB_ReadInterrupts>
 8007840:	4603      	mov	r3, r0
 8007842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784a:	d124      	bne.n	8007896 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f007 fa3b 	bl	800eccc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f006 f9a1 	bl	800dba2 <USB_GetDevSpeed>
 8007860:	4603      	mov	r3, r0
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681c      	ldr	r4, [r3, #0]
 800786c:	f001 fa42 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8007870:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007876:	b2db      	uxtb	r3, r3
 8007878:	461a      	mov	r2, r3
 800787a:	4620      	mov	r0, r4
 800787c:	f005 fea0 	bl	800d5c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f013 fe0a 	bl	801b49a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695a      	ldr	r2, [r3, #20]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007894:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f007 f975 	bl	800eb8a <USB_ReadInterrupts>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b08      	cmp	r3, #8
 80078a8:	d10a      	bne.n	80078c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f013 fde7 	bl	801b47e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	695a      	ldr	r2, [r3, #20]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f002 0208 	and.w	r2, r2, #8
 80078be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f007 f960 	bl	800eb8a <USB_ReadInterrupts>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d0:	2b80      	cmp	r3, #128	; 0x80
 80078d2:	d122      	bne.n	800791a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078e0:	2301      	movs	r3, #1
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
 80078e4:	e014      	b.n	8007910 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80078e6:	6879      	ldr	r1, [r7, #4]
 80078e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ea:	4613      	mov	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d105      	bne.n	800790a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	b2db      	uxtb	r3, r3
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fb27 	bl	8007f58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	3301      	adds	r3, #1
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007916:	429a      	cmp	r2, r3
 8007918:	d3e5      	bcc.n	80078e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f007 f933 	bl	800eb8a <USB_ReadInterrupts>
 8007924:	4603      	mov	r3, r0
 8007926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800792a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792e:	d13b      	bne.n	80079a8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007930:	2301      	movs	r3, #1
 8007932:	627b      	str	r3, [r7, #36]	; 0x24
 8007934:	e02b      	b.n	800798e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794a:	4613      	mov	r3, r2
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	4413      	add	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	440b      	add	r3, r1
 8007954:	3340      	adds	r3, #64	; 0x40
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d115      	bne.n	8007988 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800795c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800795e:	2b00      	cmp	r3, #0
 8007960:	da12      	bge.n	8007988 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007966:	4613      	mov	r3, r2
 8007968:	00db      	lsls	r3, r3, #3
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	333f      	adds	r3, #63	; 0x3f
 8007972:	2201      	movs	r2, #1
 8007974:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800797e:	b2db      	uxtb	r3, r3
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fae8 	bl	8007f58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	3301      	adds	r3, #1
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007994:	429a      	cmp	r2, r3
 8007996:	d3ce      	bcc.n	8007936 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695a      	ldr	r2, [r3, #20]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80079a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f007 f8ec 	bl	800eb8a <USB_ReadInterrupts>
 80079b2:	4603      	mov	r3, r0
 80079b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079bc:	d155      	bne.n	8007a6a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079be:	2301      	movs	r3, #1
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
 80079c2:	e045      	b.n	8007a50 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d8:	4613      	mov	r3, r2
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	440b      	add	r3, r1
 80079e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d12e      	bne.n	8007a4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80079ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	da2b      	bge.n	8007a4a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80079fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d121      	bne.n	8007a4a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007a18:	2201      	movs	r2, #1
 8007a1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a46:	6053      	str	r3, [r2, #4]
            break;
 8007a48:	e007      	b.n	8007a5a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d3b4      	bcc.n	80079c4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695a      	ldr	r2, [r3, #20]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f007 f88b 	bl	800eb8a <USB_ReadInterrupts>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7e:	d10a      	bne.n	8007a96 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f013 fd8b 	bl	801b59c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f007 f875 	bl	800eb8a <USB_ReadInterrupts>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d115      	bne.n	8007ad6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f013 fd7b 	bl	801b5b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6859      	ldr	r1, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	e000      	b.n	8007ad6 <HAL_PCD_IRQHandler+0x938>
      return;
 8007ad4:	bf00      	nop
    }
  }
}
 8007ad6:	3734      	adds	r7, #52	; 0x34
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd90      	pop	{r4, r7, pc}

08007adc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d101      	bne.n	8007af6 <HAL_PCD_SetAddress+0x1a>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e013      	b.n	8007b1e <HAL_PCD_SetAddress+0x42>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f006 ffd3 	bl	800eaba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	4608      	mov	r0, r1
 8007b30:	4611      	mov	r1, r2
 8007b32:	461a      	mov	r2, r3
 8007b34:	4603      	mov	r3, r0
 8007b36:	70fb      	strb	r3, [r7, #3]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	803b      	strh	r3, [r7, #0]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	da0f      	bge.n	8007b6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	f003 020f 	and.w	r2, r3, #15
 8007b52:	4613      	mov	r3, r2
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	3338      	adds	r3, #56	; 0x38
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	4413      	add	r3, r2
 8007b60:	3304      	adds	r3, #4
 8007b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	705a      	strb	r2, [r3, #1]
 8007b6a:	e00f      	b.n	8007b8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	f003 020f 	and.w	r2, r3, #15
 8007b72:	4613      	mov	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	3304      	adds	r3, #4
 8007b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	f003 030f 	and.w	r3, r3, #15
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007b98:	883a      	ldrh	r2, [r7, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	78ba      	ldrb	r2, [r7, #2]
 8007ba2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d004      	beq.n	8007bb6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007bb6:	78bb      	ldrb	r3, [r7, #2]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d102      	bne.n	8007bc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_PCD_EP_Open+0xaa>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e00e      	b.n	8007bee <HAL_PCD_EP_Open+0xc8>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68f9      	ldr	r1, [r7, #12]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f006 f804 	bl	800dbec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007bec:	7afb      	ldrb	r3, [r7, #11]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da0f      	bge.n	8007c2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	3338      	adds	r3, #56	; 0x38
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	3304      	adds	r3, #4
 8007c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	705a      	strb	r2, [r3, #1]
 8007c28:	e00f      	b.n	8007c4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	f003 020f 	and.w	r2, r3, #15
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_PCD_EP_Close+0x6e>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e00e      	b.n	8007c82 <HAL_PCD_EP_Close+0x8c>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68f9      	ldr	r1, [r7, #12]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f006 f842 	bl	800dcfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b086      	sub	sp, #24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
 8007c96:	460b      	mov	r3, r1
 8007c98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c9a:	7afb      	ldrb	r3, [r7, #11]
 8007c9c:	f003 020f 	and.w	r2, r3, #15
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d102      	bne.n	8007ce6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	f003 030f 	and.w	r3, r3, #15
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6979      	ldr	r1, [r7, #20]
 8007cfe:	f006 fb21 	bl	800e344 <USB_EP0StartXfer>
 8007d02:	e008      	b.n	8007d16 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6979      	ldr	r1, [r7, #20]
 8007d12:	f006 f8cf 	bl	800deb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	f003 020f 	and.w	r2, r3, #15
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	4613      	mov	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007d42:	681b      	ldr	r3, [r3, #0]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	f003 020f 	and.w	r2, r3, #15
 8007d66:	4613      	mov	r3, r2
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	3338      	adds	r3, #56	; 0x38
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4413      	add	r3, r2
 8007d74:	3304      	adds	r3, #4
 8007d76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2200      	movs	r2, #0
 8007d88:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d102      	bne.n	8007daa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d109      	bne.n	8007dc8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6979      	ldr	r1, [r7, #20]
 8007dc2:	f006 fabf 	bl	800e344 <USB_EP0StartXfer>
 8007dc6:	e008      	b.n	8007dda <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	f006 f86d 	bl	800deb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	f003 020f 	and.w	r2, r3, #15
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d901      	bls.n	8007e02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e050      	b.n	8007ea4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	da0f      	bge.n	8007e2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	f003 020f 	and.w	r2, r3, #15
 8007e10:	4613      	mov	r3, r2
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	3338      	adds	r3, #56	; 0x38
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	3304      	adds	r3, #4
 8007e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	705a      	strb	r2, [r3, #1]
 8007e28:	e00d      	b.n	8007e46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_PCD_EP_SetStall+0x82>
 8007e62:	2302      	movs	r3, #2
 8007e64:	e01e      	b.n	8007ea4 <HAL_PCD_EP_SetStall+0xc0>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f006 fcfd 	bl	800e874 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	b2d9      	uxtb	r1, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e94:	461a      	mov	r2, r3
 8007e96:	f006 ff3d 	bl	800ed14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	f003 020f 	and.w	r2, r3, #15
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d901      	bls.n	8007eca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e042      	b.n	8007f50 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da0f      	bge.n	8007ef2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	f003 020f 	and.w	r2, r3, #15
 8007ed8:	4613      	mov	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	3338      	adds	r3, #56	; 0x38
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	705a      	strb	r2, [r3, #1]
 8007ef0:	e00f      	b.n	8007f12 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	f003 020f 	and.w	r2, r3, #15
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	4413      	add	r3, r2
 8007f08:	3304      	adds	r3, #4
 8007f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d101      	bne.n	8007f32 <HAL_PCD_EP_ClrStall+0x86>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e00e      	b.n	8007f50 <HAL_PCD_EP_ClrStall+0xa4>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f006 fd05 	bl	800e950 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	da0c      	bge.n	8007f86 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	f003 020f 	and.w	r2, r3, #15
 8007f72:	4613      	mov	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	3338      	adds	r3, #56	; 0x38
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	4413      	add	r3, r2
 8007f80:	3304      	adds	r3, #4
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	e00c      	b.n	8007fa0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f86:	78fb      	ldrb	r3, [r7, #3]
 8007f88:	f003 020f 	and.w	r2, r3, #15
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f006 fb24 	bl	800e5f4 <USB_EPStopXfer>
 8007fac:	4603      	mov	r3, r0
 8007fae:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007fb0:	7afb      	ldrb	r3, [r7, #11]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <HAL_PCD_EP_Flush+0x1a>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e01b      	b.n	800800c <HAL_PCD_EP_Flush+0x52>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8007fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	da09      	bge.n	8007ff8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	f003 030f 	and.w	r3, r3, #15
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	f005 fd59 	bl	800daa8 <USB_FlushTxFifo>
 8007ff6:	e004      	b.n	8008002 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f005 fd87 	bl	800db10 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08a      	sub	sp, #40	; 0x28
 8008018:	af02      	add	r7, sp, #8
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	4613      	mov	r3, r2
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	3338      	adds	r3, #56	; 0x38
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	3304      	adds	r3, #4
 800803a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a1a      	ldr	r2, [r3, #32]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	429a      	cmp	r2, r3
 8008046:	d901      	bls.n	800804c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e06c      	b.n	8008126 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	699a      	ldr	r2, [r3, #24]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	69fa      	ldr	r2, [r7, #28]
 800805e:	429a      	cmp	r2, r3
 8008060:	d902      	bls.n	8008068 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	3303      	adds	r3, #3
 800806c:	089b      	lsrs	r3, r3, #2
 800806e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008070:	e02b      	b.n	80080ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	429a      	cmp	r2, r3
 8008086:	d902      	bls.n	800808e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	3303      	adds	r3, #3
 8008092:	089b      	lsrs	r3, r3, #2
 8008094:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6919      	ldr	r1, [r3, #16]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	4603      	mov	r3, r0
 80080ac:	6978      	ldr	r0, [r7, #20]
 80080ae:	f006 fb4b 	bl	800e748 <USB_WritePacket>

    ep->xfer_buff  += len;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	691a      	ldr	r2, [r3, #16]
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	441a      	add	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1a      	ldr	r2, [r3, #32]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	441a      	add	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	b29b      	uxth	r3, r3
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d809      	bhi.n	80080f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a1a      	ldr	r2, [r3, #32]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d203      	bcs.n	80080f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1be      	bne.n	8008072 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	699a      	ldr	r2, [r3, #24]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d811      	bhi.n	8008124 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	2201      	movs	r2, #1
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	43db      	mvns	r3, r3
 800811a:	6939      	ldr	r1, [r7, #16]
 800811c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008120:	4013      	ands	r3, r2
 8008122:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3720      	adds	r7, #32
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	333c      	adds	r3, #60	; 0x3c
 8008148:	3304      	adds	r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d17b      	bne.n	800825e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	2b00      	cmp	r3, #0
 800816e:	d015      	beq.n	800819c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	4a61      	ldr	r2, [pc, #388]	; (80082f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	f240 80b9 	bls.w	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80b3 	beq.w	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008192:	461a      	mov	r2, r3
 8008194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008198:	6093      	str	r3, [r2, #8]
 800819a:	e0a7      	b.n	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d009      	beq.n	80081ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b2:	461a      	mov	r2, r3
 80081b4:	2320      	movs	r3, #32
 80081b6:	6093      	str	r3, [r2, #8]
 80081b8:	e098      	b.n	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 8093 	bne.w	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	4a4b      	ldr	r2, [pc, #300]	; (80082f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d90f      	bls.n	80081ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	015a      	lsls	r2, r3, #5
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e4:	461a      	mov	r2, r3
 80081e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ea:	6093      	str	r3, [r2, #8]
 80081ec:	e07e      	b.n	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4613      	mov	r3, r2
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4413      	add	r3, r2
 8008200:	3304      	adds	r3, #4
 8008202:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	69da      	ldr	r2, [r3, #28]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	0159      	lsls	r1, r3, #5
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	440b      	add	r3, r1
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800821a:	1ad2      	subs	r2, r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d114      	bne.n	8008250 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008238:	461a      	mov	r2, r3
 800823a:	2101      	movs	r1, #1
 800823c:	f006 fd6a 	bl	800ed14 <USB_EP0_OutStart>
 8008240:	e006      	b.n	8008250 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	441a      	add	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f013 f8dc 	bl	801b414 <HAL_PCD_DataOutStageCallback>
 800825c:	e046      	b.n	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	4a26      	ldr	r2, [pc, #152]	; (80082fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d124      	bne.n	80082b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	461a      	mov	r2, r3
 800827e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008282:	6093      	str	r3, [r2, #8]
 8008284:	e032      	b.n	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829c:	461a      	mov	r2, r3
 800829e:	2320      	movs	r3, #32
 80082a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f013 f8b3 	bl	801b414 <HAL_PCD_DataOutStageCallback>
 80082ae:	e01d      	b.n	80082ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d114      	bne.n	80082e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	440b      	add	r3, r1
 80082c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d108      	bne.n	80082e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082d8:	461a      	mov	r2, r3
 80082da:	2100      	movs	r1, #0
 80082dc:	f006 fd1a 	bl	800ed14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f013 f894 	bl	801b414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3720      	adds	r7, #32
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	4f54300a 	.word	0x4f54300a
 80082fc:	4f54310a 	.word	0x4f54310a

08008300 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	333c      	adds	r3, #60	; 0x3c
 8008318:	3304      	adds	r3, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a15      	ldr	r2, [pc, #84]	; (8008388 <PCD_EP_OutSetupPacket_int+0x88>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d90e      	bls.n	8008354 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834c:	461a      	mov	r2, r3
 800834e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008352:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f013 f84b 	bl	801b3f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <PCD_EP_OutSetupPacket_int+0x88>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d90c      	bls.n	800837c <PCD_EP_OutSetupPacket_int+0x7c>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d108      	bne.n	800837c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008374:	461a      	mov	r2, r3
 8008376:	2101      	movs	r1, #1
 8008378:	f006 fccc 	bl	800ed14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	4f54300a 	.word	0x4f54300a

0800838c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
 8008398:	4613      	mov	r3, r2
 800839a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d107      	bne.n	80083ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80083aa:	883b      	ldrh	r3, [r7, #0]
 80083ac:	0419      	lsls	r1, r3, #16
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	629a      	str	r2, [r3, #40]	; 0x28
 80083b8:	e028      	b.n	800840c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	4413      	add	r3, r2
 80083c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
 80083cc:	e00d      	b.n	80083ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	3340      	adds	r3, #64	; 0x40
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	0c1b      	lsrs	r3, r3, #16
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	4413      	add	r3, r2
 80083e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	3301      	adds	r3, #1
 80083e8:	73fb      	strb	r3, [r7, #15]
 80083ea:	7bfa      	ldrb	r2, [r7, #15]
 80083ec:	78fb      	ldrb	r3, [r7, #3]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d3ec      	bcc.n	80083ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80083f4:	883b      	ldrh	r3, [r7, #0]
 80083f6:	0418      	lsls	r0, r3, #16
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6819      	ldr	r1, [r3, #0]
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	3b01      	subs	r3, #1
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4302      	orrs	r2, r0
 8008404:	3340      	adds	r3, #64	; 0x40
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	887a      	ldrh	r2, [r7, #2]
 800842c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8008460:	4b10      	ldr	r3, [pc, #64]	; (80084a4 <HAL_PWR_EnterSTOPMode+0x50>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f023 0203 	bic.w	r2, r3, #3
 8008468:	490e      	ldr	r1, [pc, #56]	; (80084a4 <HAL_PWR_EnterSTOPMode+0x50>)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4313      	orrs	r3, r2
 800846e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <HAL_PWR_EnterSTOPMode+0x54>)
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	4a0c      	ldr	r2, [pc, #48]	; (80084a8 <HAL_PWR_EnterSTOPMode+0x54>)
 8008476:	f043 0304 	orr.w	r3, r3, #4
 800847a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d101      	bne.n	8008486 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8008482:	bf30      	wfi
 8008484:	e002      	b.n	800848c <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008486:	bf40      	sev
    __WFE();
 8008488:	bf20      	wfe
    __WFE();
 800848a:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <HAL_PWR_EnterSTOPMode+0x54>)
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	4a05      	ldr	r2, [pc, #20]	; (80084a8 <HAL_PWR_EnterSTOPMode+0x54>)
 8008492:	f023 0304 	bic.w	r3, r3, #4
 8008496:	6113      	str	r3, [r2, #16]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	40007000 	.word	0x40007000
 80084a8:	e000ed00 	.word	0xe000ed00

080084ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e267      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d075      	beq.n	80085b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084ca:	4b88      	ldr	r3, [pc, #544]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 030c 	and.w	r3, r3, #12
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d00c      	beq.n	80084f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084d6:	4b85      	ldr	r3, [pc, #532]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d112      	bne.n	8008508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084e2:	4b82      	ldr	r3, [pc, #520]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084ee:	d10b      	bne.n	8008508 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084f0:	4b7e      	ldr	r3, [pc, #504]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d05b      	beq.n	80085b4 <HAL_RCC_OscConfig+0x108>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d157      	bne.n	80085b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e242      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008510:	d106      	bne.n	8008520 <HAL_RCC_OscConfig+0x74>
 8008512:	4b76      	ldr	r3, [pc, #472]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a75      	ldr	r2, [pc, #468]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	e01d      	b.n	800855c <HAL_RCC_OscConfig+0xb0>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008528:	d10c      	bne.n	8008544 <HAL_RCC_OscConfig+0x98>
 800852a:	4b70      	ldr	r3, [pc, #448]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a6f      	ldr	r2, [pc, #444]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	4b6d      	ldr	r3, [pc, #436]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a6c      	ldr	r2, [pc, #432]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 800853c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	e00b      	b.n	800855c <HAL_RCC_OscConfig+0xb0>
 8008544:	4b69      	ldr	r3, [pc, #420]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a68      	ldr	r2, [pc, #416]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 800854a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	4b66      	ldr	r3, [pc, #408]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a65      	ldr	r2, [pc, #404]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800855a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d013      	beq.n	800858c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008564:	f7fb fb66 	bl	8003c34 <HAL_GetTick>
 8008568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800856a:	e008      	b.n	800857e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800856c:	f7fb fb62 	bl	8003c34 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	2b64      	cmp	r3, #100	; 0x64
 8008578:	d901      	bls.n	800857e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e207      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800857e:	4b5b      	ldr	r3, [pc, #364]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d0f0      	beq.n	800856c <HAL_RCC_OscConfig+0xc0>
 800858a:	e014      	b.n	80085b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800858c:	f7fb fb52 	bl	8003c34 <HAL_GetTick>
 8008590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008594:	f7fb fb4e 	bl	8003c34 <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b64      	cmp	r3, #100	; 0x64
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e1f3      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085a6:	4b51      	ldr	r3, [pc, #324]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1f0      	bne.n	8008594 <HAL_RCC_OscConfig+0xe8>
 80085b2:	e000      	b.n	80085b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d063      	beq.n	800868a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085c2:	4b4a      	ldr	r3, [pc, #296]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f003 030c 	and.w	r3, r3, #12
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00b      	beq.n	80085e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085ce:	4b47      	ldr	r3, [pc, #284]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085d6:	2b08      	cmp	r3, #8
 80085d8:	d11c      	bne.n	8008614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085da:	4b44      	ldr	r3, [pc, #272]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d116      	bne.n	8008614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085e6:	4b41      	ldr	r3, [pc, #260]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d005      	beq.n	80085fe <HAL_RCC_OscConfig+0x152>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d001      	beq.n	80085fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e1c7      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085fe:	4b3b      	ldr	r3, [pc, #236]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	4937      	ldr	r1, [pc, #220]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 800860e:	4313      	orrs	r3, r2
 8008610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008612:	e03a      	b.n	800868a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d020      	beq.n	800865e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800861c:	4b34      	ldr	r3, [pc, #208]	; (80086f0 <HAL_RCC_OscConfig+0x244>)
 800861e:	2201      	movs	r2, #1
 8008620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008622:	f7fb fb07 	bl	8003c34 <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008628:	e008      	b.n	800863c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800862a:	f7fb fb03 	bl	8003c34 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d901      	bls.n	800863c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e1a8      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800863c:	4b2b      	ldr	r3, [pc, #172]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0f0      	beq.n	800862a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008648:	4b28      	ldr	r3, [pc, #160]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	4925      	ldr	r1, [pc, #148]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008658:	4313      	orrs	r3, r2
 800865a:	600b      	str	r3, [r1, #0]
 800865c:	e015      	b.n	800868a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800865e:	4b24      	ldr	r3, [pc, #144]	; (80086f0 <HAL_RCC_OscConfig+0x244>)
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008664:	f7fb fae6 	bl	8003c34 <HAL_GetTick>
 8008668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800866a:	e008      	b.n	800867e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800866c:	f7fb fae2 	bl	8003c34 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b02      	cmp	r3, #2
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e187      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800867e:	4b1b      	ldr	r3, [pc, #108]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f0      	bne.n	800866c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	2b00      	cmp	r3, #0
 8008694:	d036      	beq.n	8008704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d016      	beq.n	80086cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800869e:	4b15      	ldr	r3, [pc, #84]	; (80086f4 <HAL_RCC_OscConfig+0x248>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a4:	f7fb fac6 	bl	8003c34 <HAL_GetTick>
 80086a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086aa:	e008      	b.n	80086be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086ac:	f7fb fac2 	bl	8003c34 <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d901      	bls.n	80086be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e167      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086be:	4b0b      	ldr	r3, [pc, #44]	; (80086ec <HAL_RCC_OscConfig+0x240>)
 80086c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0f0      	beq.n	80086ac <HAL_RCC_OscConfig+0x200>
 80086ca:	e01b      	b.n	8008704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086cc:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <HAL_RCC_OscConfig+0x248>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086d2:	f7fb faaf 	bl	8003c34 <HAL_GetTick>
 80086d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086d8:	e00e      	b.n	80086f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086da:	f7fb faab 	bl	8003c34 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d907      	bls.n	80086f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e150      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
 80086ec:	40023800 	.word	0x40023800
 80086f0:	42470000 	.word	0x42470000
 80086f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086f8:	4b88      	ldr	r3, [pc, #544]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80086fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1ea      	bne.n	80086da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 8097 	beq.w	8008840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008716:	4b81      	ldr	r3, [pc, #516]	; (800891c <HAL_RCC_OscConfig+0x470>)
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10f      	bne.n	8008742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008722:	2300      	movs	r3, #0
 8008724:	60bb      	str	r3, [r7, #8]
 8008726:	4b7d      	ldr	r3, [pc, #500]	; (800891c <HAL_RCC_OscConfig+0x470>)
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	4a7c      	ldr	r2, [pc, #496]	; (800891c <HAL_RCC_OscConfig+0x470>)
 800872c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008730:	6413      	str	r3, [r2, #64]	; 0x40
 8008732:	4b7a      	ldr	r3, [pc, #488]	; (800891c <HAL_RCC_OscConfig+0x470>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800873a:	60bb      	str	r3, [r7, #8]
 800873c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800873e:	2301      	movs	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008742:	4b77      	ldr	r3, [pc, #476]	; (8008920 <HAL_RCC_OscConfig+0x474>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d118      	bne.n	8008780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800874e:	4b74      	ldr	r3, [pc, #464]	; (8008920 <HAL_RCC_OscConfig+0x474>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a73      	ldr	r2, [pc, #460]	; (8008920 <HAL_RCC_OscConfig+0x474>)
 8008754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800875a:	f7fb fa6b 	bl	8003c34 <HAL_GetTick>
 800875e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008762:	f7fb fa67 	bl	8003c34 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e10c      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008774:	4b6a      	ldr	r3, [pc, #424]	; (8008920 <HAL_RCC_OscConfig+0x474>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877c:	2b00      	cmp	r3, #0
 800877e:	d0f0      	beq.n	8008762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d106      	bne.n	8008796 <HAL_RCC_OscConfig+0x2ea>
 8008788:	4b64      	ldr	r3, [pc, #400]	; (800891c <HAL_RCC_OscConfig+0x470>)
 800878a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878c:	4a63      	ldr	r2, [pc, #396]	; (800891c <HAL_RCC_OscConfig+0x470>)
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	6713      	str	r3, [r2, #112]	; 0x70
 8008794:	e01c      	b.n	80087d0 <HAL_RCC_OscConfig+0x324>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	2b05      	cmp	r3, #5
 800879c:	d10c      	bne.n	80087b8 <HAL_RCC_OscConfig+0x30c>
 800879e:	4b5f      	ldr	r3, [pc, #380]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a2:	4a5e      	ldr	r2, [pc, #376]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087a4:	f043 0304 	orr.w	r3, r3, #4
 80087a8:	6713      	str	r3, [r2, #112]	; 0x70
 80087aa:	4b5c      	ldr	r3, [pc, #368]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ae:	4a5b      	ldr	r2, [pc, #364]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087b0:	f043 0301 	orr.w	r3, r3, #1
 80087b4:	6713      	str	r3, [r2, #112]	; 0x70
 80087b6:	e00b      	b.n	80087d0 <HAL_RCC_OscConfig+0x324>
 80087b8:	4b58      	ldr	r3, [pc, #352]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087bc:	4a57      	ldr	r2, [pc, #348]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	6713      	str	r3, [r2, #112]	; 0x70
 80087c4:	4b55      	ldr	r3, [pc, #340]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c8:	4a54      	ldr	r2, [pc, #336]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087ca:	f023 0304 	bic.w	r3, r3, #4
 80087ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d015      	beq.n	8008804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d8:	f7fb fa2c 	bl	8003c34 <HAL_GetTick>
 80087dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087de:	e00a      	b.n	80087f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087e0:	f7fb fa28 	bl	8003c34 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e0cb      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087f6:	4b49      	ldr	r3, [pc, #292]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d0ee      	beq.n	80087e0 <HAL_RCC_OscConfig+0x334>
 8008802:	e014      	b.n	800882e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008804:	f7fb fa16 	bl	8003c34 <HAL_GetTick>
 8008808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800880a:	e00a      	b.n	8008822 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800880c:	f7fb fa12 	bl	8003c34 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	f241 3288 	movw	r2, #5000	; 0x1388
 800881a:	4293      	cmp	r3, r2
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e0b5      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008822:	4b3e      	ldr	r3, [pc, #248]	; (800891c <HAL_RCC_OscConfig+0x470>)
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1ee      	bne.n	800880c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d105      	bne.n	8008840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008834:	4b39      	ldr	r3, [pc, #228]	; (800891c <HAL_RCC_OscConfig+0x470>)
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	4a38      	ldr	r2, [pc, #224]	; (800891c <HAL_RCC_OscConfig+0x470>)
 800883a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800883e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 80a1 	beq.w	800898c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800884a:	4b34      	ldr	r3, [pc, #208]	; (800891c <HAL_RCC_OscConfig+0x470>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 030c 	and.w	r3, r3, #12
 8008852:	2b08      	cmp	r3, #8
 8008854:	d05c      	beq.n	8008910 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d141      	bne.n	80088e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800885e:	4b31      	ldr	r3, [pc, #196]	; (8008924 <HAL_RCC_OscConfig+0x478>)
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008864:	f7fb f9e6 	bl	8003c34 <HAL_GetTick>
 8008868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800886a:	e008      	b.n	800887e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800886c:	f7fb f9e2 	bl	8003c34 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d901      	bls.n	800887e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e087      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800887e:	4b27      	ldr	r3, [pc, #156]	; (800891c <HAL_RCC_OscConfig+0x470>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f0      	bne.n	800886c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69da      	ldr	r2, [r3, #28]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	431a      	orrs	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	019b      	lsls	r3, r3, #6
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	3b01      	subs	r3, #1
 80088a4:	041b      	lsls	r3, r3, #16
 80088a6:	431a      	orrs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	061b      	lsls	r3, r3, #24
 80088ae:	491b      	ldr	r1, [pc, #108]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088b4:	4b1b      	ldr	r3, [pc, #108]	; (8008924 <HAL_RCC_OscConfig+0x478>)
 80088b6:	2201      	movs	r2, #1
 80088b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ba:	f7fb f9bb 	bl	8003c34 <HAL_GetTick>
 80088be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088c2:	f7fb f9b7 	bl	8003c34 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e05c      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <HAL_RCC_OscConfig+0x470>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0f0      	beq.n	80088c2 <HAL_RCC_OscConfig+0x416>
 80088e0:	e054      	b.n	800898c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088e2:	4b10      	ldr	r3, [pc, #64]	; (8008924 <HAL_RCC_OscConfig+0x478>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e8:	f7fb f9a4 	bl	8003c34 <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088f0:	f7fb f9a0 	bl	8003c34 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e045      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008902:	4b06      	ldr	r3, [pc, #24]	; (800891c <HAL_RCC_OscConfig+0x470>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <HAL_RCC_OscConfig+0x444>
 800890e:	e03d      	b.n	800898c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d107      	bne.n	8008928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e038      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
 800891c:	40023800 	.word	0x40023800
 8008920:	40007000 	.word	0x40007000
 8008924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008928:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <HAL_RCC_OscConfig+0x4ec>)
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d028      	beq.n	8008988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008940:	429a      	cmp	r2, r3
 8008942:	d121      	bne.n	8008988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800894e:	429a      	cmp	r2, r3
 8008950:	d11a      	bne.n	8008988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008958:	4013      	ands	r3, r2
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800895e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008960:	4293      	cmp	r3, r2
 8008962:	d111      	bne.n	8008988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	3b01      	subs	r3, #1
 8008972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008974:	429a      	cmp	r2, r3
 8008976:	d107      	bne.n	8008988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008984:	429a      	cmp	r2, r3
 8008986:	d001      	beq.n	800898c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e000      	b.n	800898e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	40023800 	.word	0x40023800

0800899c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e0cc      	b.n	8008b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089b0:	4b68      	ldr	r3, [pc, #416]	; (8008b54 <HAL_RCC_ClockConfig+0x1b8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0307 	and.w	r3, r3, #7
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d90c      	bls.n	80089d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089be:	4b65      	ldr	r3, [pc, #404]	; (8008b54 <HAL_RCC_ClockConfig+0x1b8>)
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089c6:	4b63      	ldr	r3, [pc, #396]	; (8008b54 <HAL_RCC_ClockConfig+0x1b8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0307 	and.w	r3, r3, #7
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d001      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e0b8      	b.n	8008b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d020      	beq.n	8008a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089f0:	4b59      	ldr	r3, [pc, #356]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	4a58      	ldr	r2, [pc, #352]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 80089f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80089fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a08:	4b53      	ldr	r3, [pc, #332]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	4a52      	ldr	r2, [pc, #328]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a14:	4b50      	ldr	r3, [pc, #320]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	494d      	ldr	r1, [pc, #308]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d044      	beq.n	8008abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d107      	bne.n	8008a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a3a:	4b47      	ldr	r3, [pc, #284]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d119      	bne.n	8008a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e07f      	b.n	8008b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d003      	beq.n	8008a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d107      	bne.n	8008a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a5a:	4b3f      	ldr	r3, [pc, #252]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d109      	bne.n	8008a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e06f      	b.n	8008b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a6a:	4b3b      	ldr	r3, [pc, #236]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0302 	and.w	r3, r3, #2
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e067      	b.n	8008b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a7a:	4b37      	ldr	r3, [pc, #220]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f023 0203 	bic.w	r2, r3, #3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	4934      	ldr	r1, [pc, #208]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a8c:	f7fb f8d2 	bl	8003c34 <HAL_GetTick>
 8008a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a92:	e00a      	b.n	8008aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a94:	f7fb f8ce 	bl	8003c34 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e04f      	b.n	8008b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aaa:	4b2b      	ldr	r3, [pc, #172]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f003 020c 	and.w	r2, r3, #12
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d1eb      	bne.n	8008a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008abc:	4b25      	ldr	r3, [pc, #148]	; (8008b54 <HAL_RCC_ClockConfig+0x1b8>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0307 	and.w	r3, r3, #7
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d20c      	bcs.n	8008ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aca:	4b22      	ldr	r3, [pc, #136]	; (8008b54 <HAL_RCC_ClockConfig+0x1b8>)
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	b2d2      	uxtb	r2, r2
 8008ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad2:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <HAL_RCC_ClockConfig+0x1b8>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d001      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e032      	b.n	8008b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d008      	beq.n	8008b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008af0:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	4916      	ldr	r1, [pc, #88]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d009      	beq.n	8008b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b0e:	4b12      	ldr	r3, [pc, #72]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	490e      	ldr	r1, [pc, #56]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b22:	f000 f821 	bl	8008b68 <HAL_RCC_GetSysClockFreq>
 8008b26:	4602      	mov	r2, r0
 8008b28:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	091b      	lsrs	r3, r3, #4
 8008b2e:	f003 030f 	and.w	r3, r3, #15
 8008b32:	490a      	ldr	r1, [pc, #40]	; (8008b5c <HAL_RCC_ClockConfig+0x1c0>)
 8008b34:	5ccb      	ldrb	r3, [r1, r3]
 8008b36:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3a:	4a09      	ldr	r2, [pc, #36]	; (8008b60 <HAL_RCC_ClockConfig+0x1c4>)
 8008b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b3e:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <HAL_RCC_ClockConfig+0x1c8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fb f832 	bl	8003bac <HAL_InitTick>

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40023c00 	.word	0x40023c00
 8008b58:	40023800 	.word	0x40023800
 8008b5c:	080226ec 	.word	0x080226ec
 8008b60:	20000010 	.word	0x20000010
 8008b64:	20000014 	.word	0x20000014

08008b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b6c:	b090      	sub	sp, #64	; 0x40
 8008b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	637b      	str	r3, [r7, #52]	; 0x34
 8008b74:	2300      	movs	r3, #0
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b78:	2300      	movs	r3, #0
 8008b7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b80:	4b59      	ldr	r3, [pc, #356]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f003 030c 	and.w	r3, r3, #12
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d00d      	beq.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	f200 80a1 	bhi.w	8008cd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <HAL_RCC_GetSysClockFreq+0x34>
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d003      	beq.n	8008ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b9a:	e09b      	b.n	8008cd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b9c:	4b53      	ldr	r3, [pc, #332]	; (8008cec <HAL_RCC_GetSysClockFreq+0x184>)
 8008b9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008ba0:	e09b      	b.n	8008cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ba2:	4b53      	ldr	r3, [pc, #332]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ba4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ba6:	e098      	b.n	8008cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ba8:	4b4f      	ldr	r3, [pc, #316]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bb2:	4b4d      	ldr	r3, [pc, #308]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d028      	beq.n	8008c10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bbe:	4b4a      	ldr	r3, [pc, #296]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	099b      	lsrs	r3, r3, #6
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	623b      	str	r3, [r7, #32]
 8008bc8:	627a      	str	r2, [r7, #36]	; 0x24
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4b47      	ldr	r3, [pc, #284]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008bd4:	fb03 f201 	mul.w	r2, r3, r1
 8008bd8:	2300      	movs	r3, #0
 8008bda:	fb00 f303 	mul.w	r3, r0, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	4a43      	ldr	r2, [pc, #268]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008be2:	fba0 1202 	umull	r1, r2, r0, r2
 8008be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008be8:	460a      	mov	r2, r1
 8008bea:	62ba      	str	r2, [r7, #40]	; 0x28
 8008bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bee:	4413      	add	r3, r2
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	61bb      	str	r3, [r7, #24]
 8008bf8:	61fa      	str	r2, [r7, #28]
 8008bfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008c02:	f7f8 f859 	bl	8000cb8 <__aeabi_uldivmod>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c0e:	e053      	b.n	8008cb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c10:	4b35      	ldr	r3, [pc, #212]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	099b      	lsrs	r3, r3, #6
 8008c16:	2200      	movs	r2, #0
 8008c18:	613b      	str	r3, [r7, #16]
 8008c1a:	617a      	str	r2, [r7, #20]
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008c22:	f04f 0b00 	mov.w	fp, #0
 8008c26:	4652      	mov	r2, sl
 8008c28:	465b      	mov	r3, fp
 8008c2a:	f04f 0000 	mov.w	r0, #0
 8008c2e:	f04f 0100 	mov.w	r1, #0
 8008c32:	0159      	lsls	r1, r3, #5
 8008c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c38:	0150      	lsls	r0, r2, #5
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	ebb2 080a 	subs.w	r8, r2, sl
 8008c42:	eb63 090b 	sbc.w	r9, r3, fp
 8008c46:	f04f 0200 	mov.w	r2, #0
 8008c4a:	f04f 0300 	mov.w	r3, #0
 8008c4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008c52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008c56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008c5a:	ebb2 0408 	subs.w	r4, r2, r8
 8008c5e:	eb63 0509 	sbc.w	r5, r3, r9
 8008c62:	f04f 0200 	mov.w	r2, #0
 8008c66:	f04f 0300 	mov.w	r3, #0
 8008c6a:	00eb      	lsls	r3, r5, #3
 8008c6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c70:	00e2      	lsls	r2, r4, #3
 8008c72:	4614      	mov	r4, r2
 8008c74:	461d      	mov	r5, r3
 8008c76:	eb14 030a 	adds.w	r3, r4, sl
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	eb45 030b 	adc.w	r3, r5, fp
 8008c80:	607b      	str	r3, [r7, #4]
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c8e:	4629      	mov	r1, r5
 8008c90:	028b      	lsls	r3, r1, #10
 8008c92:	4621      	mov	r1, r4
 8008c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c98:	4621      	mov	r1, r4
 8008c9a:	028a      	lsls	r2, r1, #10
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	60bb      	str	r3, [r7, #8]
 8008ca6:	60fa      	str	r2, [r7, #12]
 8008ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cac:	f7f8 f804 	bl	8000cb8 <__aeabi_uldivmod>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cb8:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	0c1b      	lsrs	r3, r3, #16
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008cc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008cd2:	e002      	b.n	8008cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cd4:	4b05      	ldr	r3, [pc, #20]	; (8008cec <HAL_RCC_GetSysClockFreq+0x184>)
 8008cd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3740      	adds	r7, #64	; 0x40
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ce6:	bf00      	nop
 8008ce8:	40023800 	.word	0x40023800
 8008cec:	00f42400 	.word	0x00f42400
 8008cf0:	017d7840 	.word	0x017d7840

08008cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cf8:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	20000010 	.word	0x20000010

08008d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d10:	f7ff fff0 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8008d14:	4602      	mov	r2, r0
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	0a9b      	lsrs	r3, r3, #10
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	4903      	ldr	r1, [pc, #12]	; (8008d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d22:	5ccb      	ldrb	r3, [r1, r3]
 8008d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	080226fc 	.word	0x080226fc

08008d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d38:	f7ff ffdc 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	0b5b      	lsrs	r3, r3, #13
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	4903      	ldr	r1, [pc, #12]	; (8008d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d4a:	5ccb      	ldrb	r3, [r1, r3]
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	40023800 	.word	0x40023800
 8008d58:	080226fc 	.word	0x080226fc

08008d5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d105      	bne.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d035      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008d84:	4b67      	ldr	r3, [pc, #412]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d8a:	f7fa ff53 	bl	8003c34 <HAL_GetTick>
 8008d8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d90:	e008      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008d92:	f7fa ff4f 	bl	8003c34 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d901      	bls.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e0ba      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008da4:	4b60      	ldr	r3, [pc, #384]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1f0      	bne.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	019a      	lsls	r2, r3, #6
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	071b      	lsls	r3, r3, #28
 8008dbc:	495a      	ldr	r1, [pc, #360]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008dc4:	4b57      	ldr	r3, [pc, #348]	; (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008dca:	f7fa ff33 	bl	8003c34 <HAL_GetTick>
 8008dce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008dd0:	e008      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008dd2:	f7fa ff2f 	bl	8003c34 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d901      	bls.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e09a      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008de4:	4b50      	ldr	r3, [pc, #320]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0f0      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 8083 	beq.w	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
 8008e02:	4b49      	ldr	r3, [pc, #292]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	4a48      	ldr	r2, [pc, #288]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e0e:	4b46      	ldr	r3, [pc, #280]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008e1a:	4b44      	ldr	r3, [pc, #272]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a43      	ldr	r2, [pc, #268]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e26:	f7fa ff05 	bl	8003c34 <HAL_GetTick>
 8008e2a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e2c:	e008      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e2e:	f7fa ff01 	bl	8003c34 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d901      	bls.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e06c      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e40:	4b3a      	ldr	r3, [pc, #232]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0f0      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e4c:	4b36      	ldr	r3, [pc, #216]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e54:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d02f      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d028      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e6a:	4b2f      	ldr	r3, [pc, #188]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e74:	4b2e      	ldr	r3, [pc, #184]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e7a:	4b2d      	ldr	r3, [pc, #180]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008e80:	4a29      	ldr	r2, [pc, #164]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008e86:	4b28      	ldr	r3, [pc, #160]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d114      	bne.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008e92:	f7fa fecf 	bl	8003c34 <HAL_GetTick>
 8008e96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e98:	e00a      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e9a:	f7fa fecb 	bl	8003c34 <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e034      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eb0:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0ee      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ec8:	d10d      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008eca:	4b17      	ldr	r3, [pc, #92]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ede:	4912      	ldr	r1, [pc, #72]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	608b      	str	r3, [r1, #8]
 8008ee4:	e005      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008ee6:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	4a0f      	ldr	r2, [pc, #60]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008eec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008ef0:	6093      	str	r3, [r2, #8]
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008efe:	490a      	ldr	r1, [pc, #40]	; (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0308 	and.w	r3, r3, #8
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	7c1a      	ldrb	r2, [r3, #16]
 8008f14:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008f16:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	42470068 	.word	0x42470068
 8008f28:	40023800 	.word	0x40023800
 8008f2c:	40007000 	.word	0x40007000
 8008f30:	42470e40 	.word	0x42470e40
 8008f34:	424711e0 	.word	0x424711e0

08008f38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e066      	b.n	800901c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	7f5b      	ldrb	r3, [r3, #29]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d105      	bne.n	8008f64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fa fa26 	bl	80033b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	22ca      	movs	r2, #202	; 0xca
 8008f70:	625a      	str	r2, [r3, #36]	; 0x24
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2253      	movs	r2, #83	; 0x53
 8008f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fbce 	bl	800971c <RTC_EnterInitMode>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d12c      	bne.n	8008fe4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f9c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6899      	ldr	r1, [r3, #8]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	431a      	orrs	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68d2      	ldr	r2, [r2, #12]
 8008fc4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6919      	ldr	r1, [r3, #16]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	041a      	lsls	r2, r3, #16
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fbd5 	bl	800978a <RTC_ExitInitMode>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d113      	bne.n	8009012 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ff8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699a      	ldr	r2, [r3, #24]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	430a      	orrs	r2, r1
 800900a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	22ff      	movs	r2, #255	; 0xff
 8009018:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	7f1b      	ldrb	r3, [r3, #28]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d101      	bne.n	8009040 <HAL_RTC_SetTime+0x1c>
 800903c:	2302      	movs	r3, #2
 800903e:	e087      	b.n	8009150 <HAL_RTC_SetTime+0x12c>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2201      	movs	r2, #1
 8009044:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2202      	movs	r2, #2
 800904a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d126      	bne.n	80090a0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2200      	movs	r2, #0
 8009064:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fbb2 	bl	80097d4 <RTC_ByteToBcd2>
 8009070:	4603      	mov	r3, r0
 8009072:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	785b      	ldrb	r3, [r3, #1]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fbab 	bl	80097d4 <RTC_ByteToBcd2>
 800907e:	4603      	mov	r3, r0
 8009080:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009082:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	789b      	ldrb	r3, [r3, #2]
 8009088:	4618      	mov	r0, r3
 800908a:	f000 fba3 	bl	80097d4 <RTC_ByteToBcd2>
 800908e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009090:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	78db      	ldrb	r3, [r3, #3]
 8009098:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	e018      	b.n	80090d2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d102      	bne.n	80090b4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2200      	movs	r2, #0
 80090b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80090c0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80090c6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	78db      	ldrb	r3, [r3, #3]
 80090cc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80090ce:	4313      	orrs	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	22ca      	movs	r2, #202	; 0xca
 80090d8:	625a      	str	r2, [r3, #36]	; 0x24
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2253      	movs	r2, #83	; 0x53
 80090e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fb1a 	bl	800971c <RTC_EnterInitMode>
 80090e8:	4603      	mov	r3, r0
 80090ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80090ec:	7cfb      	ldrb	r3, [r7, #19]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d120      	bne.n	8009134 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80090fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009100:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009110:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6899      	ldr	r1, [r3, #8]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	431a      	orrs	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fb2d 	bl	800978a <RTC_ExitInitMode>
 8009130:	4603      	mov	r3, r0
 8009132:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009134:	7cfb      	ldrb	r3, [r7, #19]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	22ff      	movs	r2, #255	; 0xff
 8009146:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	771a      	strb	r2, [r3, #28]

  return status;
 800914e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009150:	4618      	mov	r0, r3
 8009152:	371c      	adds	r7, #28
 8009154:	46bd      	mov	sp, r7
 8009156:	bd90      	pop	{r4, r7, pc}

08009158 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800918a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800918e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	0c1b      	lsrs	r3, r3, #16
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800919a:	b2da      	uxtb	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	0a1b      	lsrs	r3, r3, #8
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	0d9b      	lsrs	r3, r3, #22
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d11a      	bne.n	800920a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fb18 	bl	800980e <RTC_Bcd2ToByte>
 80091de:	4603      	mov	r3, r0
 80091e0:	461a      	mov	r2, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fb0f 	bl	800980e <RTC_Bcd2ToByte>
 80091f0:	4603      	mov	r3, r0
 80091f2:	461a      	mov	r2, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	789b      	ldrb	r3, [r3, #2]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fb06 	bl	800980e <RTC_Bcd2ToByte>
 8009202:	4603      	mov	r3, r0
 8009204:	461a      	mov	r2, r3
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009214:	b590      	push	{r4, r7, lr}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	7f1b      	ldrb	r3, [r3, #28]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d101      	bne.n	8009230 <HAL_RTC_SetDate+0x1c>
 800922c:	2302      	movs	r3, #2
 800922e:	e071      	b.n	8009314 <HAL_RTC_SetDate+0x100>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2202      	movs	r2, #2
 800923a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10e      	bne.n	8009260 <HAL_RTC_SetDate+0x4c>
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	785b      	ldrb	r3, [r3, #1]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	f023 0310 	bic.w	r3, r3, #16
 8009256:	b2db      	uxtb	r3, r3
 8009258:	330a      	adds	r3, #10
 800925a:	b2da      	uxtb	r2, r3
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d11c      	bne.n	80092a0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	78db      	ldrb	r3, [r3, #3]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fab2 	bl	80097d4 <RTC_ByteToBcd2>
 8009270:	4603      	mov	r3, r0
 8009272:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	785b      	ldrb	r3, [r3, #1]
 8009278:	4618      	mov	r0, r3
 800927a:	f000 faab 	bl	80097d4 <RTC_ByteToBcd2>
 800927e:	4603      	mov	r3, r0
 8009280:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009282:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	789b      	ldrb	r3, [r3, #2]
 8009288:	4618      	mov	r0, r3
 800928a:	f000 faa3 	bl	80097d4 <RTC_ByteToBcd2>
 800928e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009290:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800929a:	4313      	orrs	r3, r2
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	e00e      	b.n	80092be <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	78db      	ldrb	r3, [r3, #3]
 80092a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092ac:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80092b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	22ca      	movs	r2, #202	; 0xca
 80092c4:	625a      	str	r2, [r3, #36]	; 0x24
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2253      	movs	r2, #83	; 0x53
 80092cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fa24 	bl	800971c <RTC_EnterInitMode>
 80092d4:	4603      	mov	r3, r0
 80092d6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80092d8:	7cfb      	ldrb	r3, [r7, #19]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10c      	bne.n	80092f8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 fa4b 	bl	800978a <RTC_ExitInitMode>
 80092f4:	4603      	mov	r3, r0
 80092f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80092f8:	7cfb      	ldrb	r3, [r7, #19]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d102      	bne.n	8009304 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2201      	movs	r2, #1
 8009302:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	22ff      	movs	r2, #255	; 0xff
 800930a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	771a      	strb	r2, [r3, #28]

  return status;
 8009312:	7cfb      	ldrb	r3, [r7, #19]
}
 8009314:	4618      	mov	r0, r3
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	bd90      	pop	{r4, r7, pc}

0800931c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009336:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800933a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	0c1b      	lsrs	r3, r3, #16
 8009340:	b2da      	uxtb	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	0a1b      	lsrs	r3, r3, #8
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f003 031f 	and.w	r3, r3, #31
 8009350:	b2da      	uxtb	r2, r3
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	b2db      	uxtb	r3, r3
 800935a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800935e:	b2da      	uxtb	r2, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	0b5b      	lsrs	r3, r3, #13
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	b2da      	uxtb	r2, r3
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d11a      	bne.n	80093b0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	78db      	ldrb	r3, [r3, #3]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fa45 	bl	800980e <RTC_Bcd2ToByte>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	785b      	ldrb	r3, [r3, #1]
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fa3c 	bl	800980e <RTC_Bcd2ToByte>
 8009396:	4603      	mov	r3, r0
 8009398:	461a      	mov	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	789b      	ldrb	r3, [r3, #2]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fa33 	bl	800980e <RTC_Bcd2ToByte>
 80093a8:	4603      	mov	r3, r0
 80093aa:	461a      	mov	r2, r3
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80093bc:	b590      	push	{r4, r7, lr}
 80093be:	b089      	sub	sp, #36	; 0x24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80093c8:	4b9a      	ldr	r3, [pc, #616]	; (8009634 <HAL_RTC_SetAlarm_IT+0x278>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a9a      	ldr	r2, [pc, #616]	; (8009638 <HAL_RTC_SetAlarm_IT+0x27c>)
 80093ce:	fba2 2303 	umull	r2, r3, r2, r3
 80093d2:	0adb      	lsrs	r3, r3, #11
 80093d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093d8:	fb02 f303 	mul.w	r3, r2, r3
 80093dc:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80093e2:	2300      	movs	r3, #0
 80093e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	7f1b      	ldrb	r3, [r3, #28]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_RTC_SetAlarm_IT+0x36>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e11c      	b.n	800962c <HAL_RTC_SetAlarm_IT+0x270>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2202      	movs	r2, #2
 80093fc:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d137      	bne.n	8009474 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	d102      	bne.n	8009418 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2200      	movs	r2, #0
 8009416:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	4618      	mov	r0, r3
 800941e:	f000 f9d9 	bl	80097d4 <RTC_ByteToBcd2>
 8009422:	4603      	mov	r3, r0
 8009424:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	785b      	ldrb	r3, [r3, #1]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f9d2 	bl	80097d4 <RTC_ByteToBcd2>
 8009430:	4603      	mov	r3, r0
 8009432:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009434:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	789b      	ldrb	r3, [r3, #2]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f9ca 	bl	80097d4 <RTC_ByteToBcd2>
 8009440:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009442:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	78db      	ldrb	r3, [r3, #3]
 800944a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800944c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f9bc 	bl	80097d4 <RTC_ByteToBcd2>
 800945c:	4603      	mov	r3, r0
 800945e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009460:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009468:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800946e:	4313      	orrs	r3, r2
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	e023      	b.n	80094bc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	d102      	bne.n	8009488 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2200      	movs	r2, #0
 8009486:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	785b      	ldrb	r3, [r3, #1]
 8009492:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009494:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800949a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	78db      	ldrb	r3, [r3, #3]
 80094a0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80094a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80094ac:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80094b2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80094b8:	4313      	orrs	r3, r2
 80094ba:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80094c4:	4313      	orrs	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	22ca      	movs	r2, #202	; 0xca
 80094ce:	625a      	str	r2, [r3, #36]	; 0x24
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2253      	movs	r2, #83	; 0x53
 80094d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e0:	d141      	bne.n	8009566 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094f0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009502:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	1e5a      	subs	r2, r3, #1
 8009508:	617a      	str	r2, [r7, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10b      	bne.n	8009526 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	22ff      	movs	r2, #255	; 0xff
 8009514:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2203      	movs	r2, #3
 800951a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e082      	b.n	800962c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0e7      	beq.n	8009504 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	69fa      	ldr	r2, [r7, #28]
 800953a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689a      	ldr	r2, [r3, #8]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009552:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689a      	ldr	r2, [r3, #8]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009562:	609a      	str	r2, [r3, #8]
 8009564:	e04b      	b.n	80095fe <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009574:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	b2da      	uxtb	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009586:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8009588:	4b2a      	ldr	r3, [pc, #168]	; (8009634 <HAL_RTC_SetAlarm_IT+0x278>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a2a      	ldr	r2, [pc, #168]	; (8009638 <HAL_RTC_SetAlarm_IT+0x27c>)
 800958e:	fba2 2303 	umull	r2, r3, r2, r3
 8009592:	0adb      	lsrs	r3, r3, #11
 8009594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009598:	fb02 f303 	mul.w	r3, r2, r3
 800959c:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	1e5a      	subs	r2, r3, #1
 80095a2:	617a      	str	r2, [r7, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10b      	bne.n	80095c0 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	22ff      	movs	r2, #255	; 0xff
 80095ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2203      	movs	r2, #3
 80095b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e035      	b.n	800962c <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0e7      	beq.n	800959e <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69fa      	ldr	r2, [r7, #28]
 80095d4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095ec:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095fc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80095fe:	4b0f      	ldr	r3, [pc, #60]	; (800963c <HAL_RTC_SetAlarm_IT+0x280>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a0e      	ldr	r2, [pc, #56]	; (800963c <HAL_RTC_SetAlarm_IT+0x280>)
 8009604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009608:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800960a:	4b0c      	ldr	r3, [pc, #48]	; (800963c <HAL_RTC_SetAlarm_IT+0x280>)
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	4a0b      	ldr	r2, [pc, #44]	; (800963c <HAL_RTC_SetAlarm_IT+0x280>)
 8009610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009614:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	22ff      	movs	r2, #255	; 0xff
 800961c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3724      	adds	r7, #36	; 0x24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd90      	pop	{r4, r7, pc}
 8009634:	20000010 	.word	0x20000010
 8009638:	10624dd3 	.word	0x10624dd3
 800963c:	40013c00 	.word	0x40013c00

08009640 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d012      	beq.n	800967c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7f9 fd77 	bl	8003158 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	b2da      	uxtb	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800967a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d012      	beq.n	80096b0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f8d4 	bl	8009846 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f462 7220 	orn	r2, r2, #640	; 0x280
 80096ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80096b0:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <HAL_RTC_AlarmIRQHandler+0x88>)
 80096b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80096b6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	775a      	strb	r2, [r3, #29]
}
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	40013c00 	.word	0x40013c00

080096cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80096e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096e8:	f7fa faa4 	bl	8003c34 <HAL_GetTick>
 80096ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80096ee:	e009      	b.n	8009704 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096f0:	f7fa faa0 	bl	8003c34 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096fe:	d901      	bls.n	8009704 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e007      	b.n	8009714 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f003 0320 	and.w	r3, r3, #32
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0ee      	beq.n	80096f0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009724:	2300      	movs	r3, #0
 8009726:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009736:	2b00      	cmp	r3, #0
 8009738:	d122      	bne.n	8009780 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009748:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800974a:	f7fa fa73 	bl	8003c34 <HAL_GetTick>
 800974e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009750:	e00c      	b.n	800976c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009752:	f7fa fa6f 	bl	8003c34 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009760:	d904      	bls.n	800976c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2204      	movs	r2, #4
 8009766:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <RTC_EnterInitMode+0x64>
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d1e8      	bne.n	8009752 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68da      	ldr	r2, [r3, #12]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff ff89 	bl	80096cc <HAL_RTC_WaitForSynchro>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2204      	movs	r2, #4
 80097c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80097e2:	e005      	b.n	80097f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	3301      	adds	r3, #1
 80097e8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	3b0a      	subs	r3, #10
 80097ee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	2b09      	cmp	r3, #9
 80097f4:	d8f6      	bhi.n	80097e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	011b      	lsls	r3, r3, #4
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	79fb      	ldrb	r3, [r7, #7]
 80097fe:	4313      	orrs	r3, r2
 8009800:	b2db      	uxtb	r3, r3
}
 8009802:	4618      	mov	r0, r3
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800980e:	b480      	push	{r7}
 8009810:	b085      	sub	sp, #20
 8009812:	af00      	add	r7, sp, #0
 8009814:	4603      	mov	r3, r0
 8009816:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	091b      	lsrs	r3, r3, #4
 8009820:	b2db      	uxtb	r3, r3
 8009822:	461a      	mov	r2, r3
 8009824:	0092      	lsls	r2, r2, #2
 8009826:	4413      	add	r3, r2
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800982c:	79fb      	ldrb	r3, [r7, #7]
 800982e:	f003 030f 	and.w	r3, r3, #15
 8009832:	b2da      	uxtb	r2, r3
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	4413      	add	r3, r2
 8009838:	b2db      	uxtb	r3, r3
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800984e:	bf00      	nop
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b082      	sub	sp, #8
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e022      	b.n	80098b2 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d105      	bne.n	8009884 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7f9 fdca 	bl	8003418 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2203      	movs	r2, #3
 8009888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f815 	bl	80098bc <HAL_SD_InitCard>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e00a      	b.n	80098b2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098bc:	b5b0      	push	{r4, r5, r7, lr}
 80098be:	b08e      	sub	sp, #56	; 0x38
 80098c0:	af04      	add	r7, sp, #16
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80098d0:	2300      	movs	r3, #0
 80098d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80098d8:	2376      	movs	r3, #118	; 0x76
 80098da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681d      	ldr	r5, [r3, #0]
 80098e0:	466c      	mov	r4, sp
 80098e2:	f107 0314 	add.w	r3, r7, #20
 80098e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098f4:	4628      	mov	r0, r5
 80098f6:	f003 f8cf 	bl	800ca98 <SDIO_Init>
 80098fa:	4603      	mov	r3, r0
 80098fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e04f      	b.n	80099ac <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800990c:	4b29      	ldr	r3, [pc, #164]	; (80099b4 <HAL_SD_InitCard+0xf8>)
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f003 f907 	bl	800cb2a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800991c:	4b25      	ldr	r3, [pc, #148]	; (80099b4 <HAL_SD_InitCard+0xf8>)
 800991e:	2201      	movs	r2, #1
 8009920:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009922:	2002      	movs	r0, #2
 8009924:	f7fa f992 	bl	8003c4c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fe69 	bl	800a600 <SD_PowerON>
 800992e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00b      	beq.n	800994e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	431a      	orrs	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e02e      	b.n	80099ac <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fd88 	bl	800a464 <SD_InitCard>
 8009954:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00b      	beq.n	8009974 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	431a      	orrs	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e01b      	b.n	80099ac <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f44f 7100 	mov.w	r1, #512	; 0x200
 800997c:	4618      	mov	r0, r3
 800997e:	f003 f966 	bl	800cc4e <SDMMC_CmdBlockLength>
 8009982:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00f      	beq.n	80099aa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a0a      	ldr	r2, [pc, #40]	; (80099b8 <HAL_SD_InitCard+0xfc>)
 8009990:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	431a      	orrs	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e000      	b.n	80099ac <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3728      	adds	r7, #40	; 0x28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bdb0      	pop	{r4, r5, r7, pc}
 80099b4:	422580a0 	.word	0x422580a0
 80099b8:	004005ff 	.word	0x004005ff

080099bc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b092      	sub	sp, #72	; 0x48
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80099ca:	f7fa f933 	bl	8003c34 <HAL_GetTick>
 80099ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d107      	bne.n	80099ee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e1bd      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	f040 81b0 	bne.w	8009d5c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	441a      	add	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d907      	bls.n	8009a20 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a14:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e1a4      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2203      	movs	r2, #3
 8009a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d002      	beq.n	8009a3e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	025b      	lsls	r3, r3, #9
 8009a3c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a42:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	025b      	lsls	r3, r3, #9
 8009a48:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009a4a:	2390      	movs	r3, #144	; 0x90
 8009a4c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009a4e:	2302      	movs	r3, #2
 8009a50:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009a56:	2301      	movs	r3, #1
 8009a58:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f107 0214 	add.w	r2, r7, #20
 8009a62:	4611      	mov	r1, r2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f003 f8c6 	bl	800cbf6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d90a      	bls.n	8009a86 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2202      	movs	r2, #2
 8009a74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f003 f92a 	bl	800ccd6 <SDMMC_CmdReadMultiBlock>
 8009a82:	6478      	str	r0, [r7, #68]	; 0x44
 8009a84:	e009      	b.n	8009a9a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a92:	4618      	mov	r0, r3
 8009a94:	f003 f8fd 	bl	800cc92 <SDMMC_CmdReadSingleBlock>
 8009a98:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d012      	beq.n	8009ac6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a7a      	ldr	r2, [pc, #488]	; (8009c90 <HAL_SD_ReadBlocks+0x2d4>)
 8009aa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e151      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009aca:	e061      	b.n	8009b90 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d03c      	beq.n	8009b54 <HAL_SD_ReadBlocks+0x198>
 8009ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d039      	beq.n	8009b54 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ae4:	e033      	b.n	8009b4e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 ffff 	bl	800caee <SDIO_ReadFIFO>
 8009af0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afc:	3301      	adds	r3, #1
 8009afe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b02:	3b01      	subs	r3, #1
 8009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	0a1b      	lsrs	r3, r3, #8
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b12:	3301      	adds	r3, #1
 8009b14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	0c1b      	lsrs	r3, r3, #16
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b28:	3301      	adds	r3, #1
 8009b2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b34:	0e1b      	lsrs	r3, r3, #24
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3e:	3301      	adds	r3, #1
 8009b40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b44:	3b01      	subs	r3, #1
 8009b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8009b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b50:	2b07      	cmp	r3, #7
 8009b52:	d9c8      	bls.n	8009ae6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009b54:	f7fa f86e 	bl	8003c34 <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d902      	bls.n	8009b6a <HAL_SD_ReadBlocks+0x1ae>
 8009b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d112      	bne.n	8009b90 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a48      	ldr	r2, [pc, #288]	; (8009c90 <HAL_SD_ReadBlocks+0x2d4>)
 8009b70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009b8c:	2303      	movs	r3, #3
 8009b8e:	e0ec      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b96:	f240 332a 	movw	r3, #810	; 0x32a
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d095      	beq.n	8009acc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d022      	beq.n	8009bf4 <HAL_SD_ReadBlocks+0x238>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d91f      	bls.n	8009bf4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d01b      	beq.n	8009bf4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f003 f8ef 	bl	800cda4 <SDMMC_CmdStopTransfer>
 8009bc6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d012      	beq.n	8009bf4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a2f      	ldr	r2, [pc, #188]	; (8009c90 <HAL_SD_ReadBlocks+0x2d4>)
 8009bd4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e0ba      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfa:	f003 0308 	and.w	r3, r3, #8
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d012      	beq.n	8009c28 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a22      	ldr	r2, [pc, #136]	; (8009c90 <HAL_SD_ReadBlocks+0x2d4>)
 8009c08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0e:	f043 0208 	orr.w	r2, r3, #8
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e0a0      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d012      	beq.n	8009c5c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a15      	ldr	r2, [pc, #84]	; (8009c90 <HAL_SD_ReadBlocks+0x2d4>)
 8009c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c42:	f043 0202 	orr.w	r2, r3, #2
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e086      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d063      	beq.n	8009d32 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a08      	ldr	r2, [pc, #32]	; (8009c90 <HAL_SD_ReadBlocks+0x2d4>)
 8009c70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	f043 0220 	orr.w	r2, r3, #32
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e06c      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
 8009c90:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f002 ff28 	bl	800caee <SDIO_ReadFIFO>
 8009c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009caa:	3301      	adds	r3, #1
 8009cac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb6:	0a1b      	lsrs	r3, r3, #8
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cbc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	0c1b      	lsrs	r3, r3, #16
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce2:	0e1b      	lsrs	r3, r3, #24
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8009cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cec:	3301      	adds	r3, #1
 8009cee:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8009cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009cf6:	f7f9 ff9d 	bl	8003c34 <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d902      	bls.n	8009d0c <HAL_SD_ReadBlocks+0x350>
 8009d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d112      	bne.n	8009d32 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a18      	ldr	r2, [pc, #96]	; (8009d74 <HAL_SD_ReadBlocks+0x3b8>)
 8009d12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e01b      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <HAL_SD_ReadBlocks+0x38a>
 8009d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1a6      	bne.n	8009c94 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e006      	b.n	8009d6a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
  }
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3748      	adds	r7, #72	; 0x48
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	004005ff 	.word	0x004005ff

08009d78 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b092      	sub	sp, #72	; 0x48
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
 8009d84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d86:	f7f9 ff55 	bl	8003c34 <HAL_GetTick>
 8009d8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d107      	bne.n	8009daa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e166      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	f040 8159 	bne.w	800a06a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	441a      	add	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d907      	bls.n	8009ddc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e14d      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2203      	movs	r2, #3
 8009de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2200      	movs	r2, #0
 8009dea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d002      	beq.n	8009dfa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df6:	025b      	lsls	r3, r3, #9
 8009df8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	025b      	lsls	r3, r3, #9
 8009e04:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009e06:	2390      	movs	r3, #144	; 0x90
 8009e08:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009e12:	2301      	movs	r3, #1
 8009e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f107 0218 	add.w	r2, r7, #24
 8009e1e:	4611      	mov	r1, r2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f002 fee8 	bl	800cbf6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d90a      	bls.n	8009e42 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f002 ff90 	bl	800cd5e <SDMMC_CmdWriteMultiBlock>
 8009e3e:	6478      	str	r0, [r7, #68]	; 0x44
 8009e40:	e009      	b.n	8009e56 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2210      	movs	r2, #16
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f002 ff63 	bl	800cd1a <SDMMC_CmdWriteSingleBlock>
 8009e54:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d012      	beq.n	8009e82 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a87      	ldr	r2, [pc, #540]	; (800a080 <HAL_SD_WriteBlocks+0x308>)
 8009e62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e6a:	431a      	orrs	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e0fa      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009e86:	e065      	b.n	8009f54 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d040      	beq.n	8009f18 <HAL_SD_WriteBlocks+0x1a0>
 8009e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d03d      	beq.n	8009f18 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8009ea0:	e037      	b.n	8009f12 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eaa:	3301      	adds	r3, #1
 8009eac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	021a      	lsls	r2, r3, #8
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	041a      	lsls	r2, r3, #16
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	3301      	adds	r3, #1
 8009edc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	061a      	lsls	r2, r3, #24
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f107 0214 	add.w	r2, r7, #20
 8009f04:	4611      	mov	r1, r2
 8009f06:	4618      	mov	r0, r3
 8009f08:	f002 fdfe 	bl	800cb08 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f0e:	3301      	adds	r3, #1
 8009f10:	643b      	str	r3, [r7, #64]	; 0x40
 8009f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f14:	2b07      	cmp	r3, #7
 8009f16:	d9c4      	bls.n	8009ea2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009f18:	f7f9 fe8c 	bl	8003c34 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d902      	bls.n	8009f2e <HAL_SD_WriteBlocks+0x1b6>
 8009f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d112      	bne.n	8009f54 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a53      	ldr	r2, [pc, #332]	; (800a080 <HAL_SD_WriteBlocks+0x308>)
 8009f34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e091      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f5a:	f240 331a 	movw	r3, #794	; 0x31a
 8009f5e:	4013      	ands	r3, r2
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d091      	beq.n	8009e88 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d022      	beq.n	8009fb8 <HAL_SD_WriteBlocks+0x240>
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d91f      	bls.n	8009fb8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d01b      	beq.n	8009fb8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f002 ff0d 	bl	800cda4 <SDMMC_CmdStopTransfer>
 8009f8a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d012      	beq.n	8009fb8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a3a      	ldr	r2, [pc, #232]	; (800a080 <HAL_SD_WriteBlocks+0x308>)
 8009f98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fa0:	431a      	orrs	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e05f      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fbe:	f003 0308 	and.w	r3, r3, #8
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d012      	beq.n	8009fec <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a2d      	ldr	r2, [pc, #180]	; (800a080 <HAL_SD_WriteBlocks+0x308>)
 8009fcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd2:	f043 0208 	orr.w	r2, r3, #8
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e045      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff2:	f003 0302 	and.w	r3, r3, #2
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d012      	beq.n	800a020 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a20      	ldr	r2, [pc, #128]	; (800a080 <HAL_SD_WriteBlocks+0x308>)
 800a000:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	f043 0202 	orr.w	r2, r3, #2
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e02b      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a026:	f003 0310 	and.w	r3, r3, #16
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d012      	beq.n	800a054 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a13      	ldr	r2, [pc, #76]	; (800a080 <HAL_SD_WriteBlocks+0x308>)
 800a034:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03a:	f043 0210 	orr.w	r2, r3, #16
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e011      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f240 523a 	movw	r2, #1338	; 0x53a
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	e006      	b.n	800a078 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
  }
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3748      	adds	r7, #72	; 0x48
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	004005ff 	.word	0x004005ff

0800a084 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a092:	0f9b      	lsrs	r3, r3, #30
 800a094:	b2da      	uxtb	r2, r3
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a09e:	0e9b      	lsrs	r3, r3, #26
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	f003 030f 	and.w	r3, r3, #15
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0b0:	0e1b      	lsrs	r3, r3, #24
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f003 0303 	and.w	r3, r3, #3
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0c2:	0c1b      	lsrs	r3, r3, #16
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ce:	0a1b      	lsrs	r3, r3, #8
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0e4:	0d1b      	lsrs	r3, r3, #20
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0f0:	0c1b      	lsrs	r3, r3, #16
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a102:	0bdb      	lsrs	r3, r3, #15
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a114:	0b9b      	lsrs	r3, r3, #14
 800a116:	b2db      	uxtb	r3, r3
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	b2da      	uxtb	r2, r3
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a126:	0b5b      	lsrs	r3, r3, #13
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a138:	0b1b      	lsrs	r3, r3, #12
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	b2da      	uxtb	r2, r3
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2200      	movs	r2, #0
 800a14a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a150:	2b00      	cmp	r3, #0
 800a152:	d163      	bne.n	800a21c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a158:	009a      	lsls	r2, r3, #2
 800a15a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a15e:	4013      	ands	r3, r2
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a164:	0f92      	lsrs	r2, r2, #30
 800a166:	431a      	orrs	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a170:	0edb      	lsrs	r3, r3, #27
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f003 0307 	and.w	r3, r3, #7
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a182:	0e1b      	lsrs	r3, r3, #24
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a194:	0d5b      	lsrs	r3, r3, #21
 800a196:	b2db      	uxtb	r3, r3
 800a198:	f003 0307 	and.w	r3, r3, #7
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1a6:	0c9b      	lsrs	r3, r3, #18
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b8:	0bdb      	lsrs	r3, r3, #15
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	7e1b      	ldrb	r3, [r3, #24]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	3302      	adds	r3, #2
 800a1dc:	2201      	movs	r2, #1
 800a1de:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a1e6:	fb03 f202 	mul.w	r2, r3, r2
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	7a1b      	ldrb	r3, [r3, #8]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	409a      	lsls	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a208:	0a52      	lsrs	r2, r2, #9
 800a20a:	fb03 f202 	mul.w	r2, r3, r2
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a218:	661a      	str	r2, [r3, #96]	; 0x60
 800a21a:	e031      	b.n	800a280 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a220:	2b01      	cmp	r3, #1
 800a222:	d11d      	bne.n	800a260 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a228:	041b      	lsls	r3, r3, #16
 800a22a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a232:	0c1b      	lsrs	r3, r3, #16
 800a234:	431a      	orrs	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	3301      	adds	r3, #1
 800a240:	029a      	lsls	r2, r3, #10
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a254:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	661a      	str	r2, [r3, #96]	; 0x60
 800a25e:	e00f      	b.n	800a280 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a58      	ldr	r2, [pc, #352]	; (800a3c8 <HAL_SD_GetCardCSD+0x344>)
 800a266:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e09d      	b.n	800a3bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a284:	0b9b      	lsrs	r3, r3, #14
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a296:	09db      	lsrs	r3, r3, #7
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b8:	0fdb      	lsrs	r3, r3, #31
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c4:	0f5b      	lsrs	r3, r3, #29
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	f003 0303 	and.w	r3, r3, #3
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d6:	0e9b      	lsrs	r3, r3, #26
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	f003 0307 	and.w	r3, r3, #7
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e8:	0d9b      	lsrs	r3, r3, #22
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	f003 030f 	and.w	r3, r3, #15
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fa:	0d5b      	lsrs	r3, r3, #21
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	b2da      	uxtb	r2, r3
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a316:	0c1b      	lsrs	r3, r3, #16
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32a:	0bdb      	lsrs	r3, r3, #15
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	b2da      	uxtb	r2, r3
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33e:	0b9b      	lsrs	r3, r3, #14
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	b2da      	uxtb	r2, r3
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a352:	0b5b      	lsrs	r3, r3, #13
 800a354:	b2db      	uxtb	r3, r3
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a366:	0b1b      	lsrs	r3, r3, #12
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37a:	0a9b      	lsrs	r3, r3, #10
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	b2da      	uxtb	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a38e:	0a1b      	lsrs	r3, r3, #8
 800a390:	b2db      	uxtb	r3, r3
 800a392:	f003 0303 	and.w	r3, r3, #3
 800a396:	b2da      	uxtb	r2, r3
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a2:	085b      	lsrs	r3, r3, #1
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	004005ff 	.word	0x004005ff

0800a3cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a430:	f107 030c 	add.w	r3, r7, #12
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f970 	bl	800a71c <SD_SendStatus>
 800a43c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d005      	beq.n	800a450 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	0a5b      	lsrs	r3, r3, #9
 800a454:	f003 030f 	and.w	r3, r3, #15
 800a458:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a45a:	693b      	ldr	r3, [r7, #16]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a464:	b5b0      	push	{r4, r5, r7, lr}
 800a466:	b094      	sub	sp, #80	; 0x50
 800a468:	af04      	add	r7, sp, #16
 800a46a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a46c:	2301      	movs	r3, #1
 800a46e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4618      	mov	r0, r3
 800a476:	f002 fb66 	bl	800cb46 <SDIO_GetPowerState>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a480:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a484:	e0b8      	b.n	800a5f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d02f      	beq.n	800a4ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4618      	mov	r0, r3
 800a494:	f002 fd4d 	bl	800cf32 <SDMMC_CmdSendCID>
 800a498:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <SD_InitCard+0x40>
    {
      return errorstate;
 800a4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a2:	e0a9      	b.n	800a5f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f002 fb90 	bl	800cbd0 <SDIO_GetResponse>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2104      	movs	r1, #4
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f002 fb87 	bl	800cbd0 <SDIO_GetResponse>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2108      	movs	r1, #8
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f002 fb7e 	bl	800cbd0 <SDIO_GetResponse>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	210c      	movs	r1, #12
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f002 fb75 	bl	800cbd0 <SDIO_GetResponse>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d00d      	beq.n	800a512 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f107 020e 	add.w	r2, r7, #14
 800a4fe:	4611      	mov	r1, r2
 800a500:	4618      	mov	r0, r3
 800a502:	f002 fd53 	bl	800cfac <SDMMC_CmdSetRelAdd>
 800a506:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <SD_InitCard+0xae>
    {
      return errorstate;
 800a50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a510:	e072      	b.n	800a5f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a516:	2b03      	cmp	r3, #3
 800a518:	d036      	beq.n	800a588 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a51a:	89fb      	ldrh	r3, [r7, #14]
 800a51c:	461a      	mov	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52a:	041b      	lsls	r3, r3, #16
 800a52c:	4619      	mov	r1, r3
 800a52e:	4610      	mov	r0, r2
 800a530:	f002 fd1d 	bl	800cf6e <SDMMC_CmdSendCSD>
 800a534:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a53e:	e05b      	b.n	800a5f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f002 fb42 	bl	800cbd0 <SDIO_GetResponse>
 800a54c:	4602      	mov	r2, r0
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2104      	movs	r1, #4
 800a558:	4618      	mov	r0, r3
 800a55a:	f002 fb39 	bl	800cbd0 <SDIO_GetResponse>
 800a55e:	4602      	mov	r2, r0
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2108      	movs	r1, #8
 800a56a:	4618      	mov	r0, r3
 800a56c:	f002 fb30 	bl	800cbd0 <SDIO_GetResponse>
 800a570:	4602      	mov	r2, r0
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	210c      	movs	r1, #12
 800a57c:	4618      	mov	r0, r3
 800a57e:	f002 fb27 	bl	800cbd0 <SDIO_GetResponse>
 800a582:	4602      	mov	r2, r0
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2104      	movs	r1, #4
 800a58e:	4618      	mov	r0, r3
 800a590:	f002 fb1e 	bl	800cbd0 <SDIO_GetResponse>
 800a594:	4603      	mov	r3, r0
 800a596:	0d1a      	lsrs	r2, r3, #20
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a59c:	f107 0310 	add.w	r3, r7, #16
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff fd6e 	bl	800a084 <HAL_SD_GetCardCSD>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a5b2:	e021      	b.n	800a5f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6819      	ldr	r1, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5bc:	041b      	lsls	r3, r3, #16
 800a5be:	2200      	movs	r2, #0
 800a5c0:	461c      	mov	r4, r3
 800a5c2:	4615      	mov	r5, r2
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	f002 fc0d 	bl	800cde8 <SDMMC_CmdSelDesel>
 800a5ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <SD_InitCard+0x176>
  {
    return errorstate;
 800a5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d8:	e00e      	b.n	800a5f8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681d      	ldr	r5, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	466c      	mov	r4, sp
 800a5e2:	f103 0210 	add.w	r2, r3, #16
 800a5e6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a5e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f002 fa51 	bl	800ca98 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3740      	adds	r7, #64	; 0x40
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bdb0      	pop	{r4, r5, r7, pc}

0800a600 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a608:	2300      	movs	r3, #0
 800a60a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	2300      	movs	r3, #0
 800a612:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f002 fc08 	bl	800ce2e <SDMMC_CmdGoIdleState>
 800a61e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <SD_PowerON+0x2a>
  {
    return errorstate;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	e072      	b.n	800a710 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4618      	mov	r0, r3
 800a630:	f002 fc1b 	bl	800ce6a <SDMMC_CmdOperCond>
 800a634:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00d      	beq.n	800a658 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4618      	mov	r0, r3
 800a648:	f002 fbf1 	bl	800ce2e <SDMMC_CmdGoIdleState>
 800a64c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d004      	beq.n	800a65e <SD_PowerON+0x5e>
    {
      return errorstate;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	e05b      	b.n	800a710 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a662:	2b01      	cmp	r3, #1
 800a664:	d137      	bne.n	800a6d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2100      	movs	r1, #0
 800a66c:	4618      	mov	r0, r3
 800a66e:	f002 fc1b 	bl	800cea8 <SDMMC_CmdAppCommand>
 800a672:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d02d      	beq.n	800a6d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a67a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a67e:	e047      	b.n	800a710 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f002 fc0e 	bl	800cea8 <SDMMC_CmdAppCommand>
 800a68c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <SD_PowerON+0x98>
    {
      return errorstate;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	e03b      	b.n	800a710 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	491e      	ldr	r1, [pc, #120]	; (800a718 <SD_PowerON+0x118>)
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f002 fc24 	bl	800ceec <SDMMC_CmdAppOperCommand>
 800a6a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a6b0:	e02e      	b.n	800a710 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f002 fa89 	bl	800cbd0 <SDIO_GetResponse>
 800a6be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	0fdb      	lsrs	r3, r3, #31
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <SD_PowerON+0xcc>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e000      	b.n	800a6ce <SD_PowerON+0xce>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	613b      	str	r3, [r7, #16]

    count++;
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d802      	bhi.n	800a6e6 <SD_PowerON+0xe6>
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d0cc      	beq.n	800a680 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d902      	bls.n	800a6f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a6f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6f4:	e00c      	b.n	800a710 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	645a      	str	r2, [r3, #68]	; 0x44
 800a706:	e002      	b.n	800a70e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	c1100000 	.word	0xc1100000

0800a71c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d102      	bne.n	800a732 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a72c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a730:	e018      	b.n	800a764 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a73a:	041b      	lsls	r3, r3, #16
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f002 fc55 	bl	800cfee <SDMMC_CmdSendStatus>
 800a744:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	e009      	b.n	800a764 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2100      	movs	r1, #0
 800a756:	4618      	mov	r0, r3
 800a758:	f002 fa3a 	bl	800cbd0 <SDIO_GetResponse>
 800a75c:	4602      	mov	r2, r0
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e041      	b.n	800a802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d106      	bne.n	800a798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7f8 fea8 	bl	80034e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2202      	movs	r2, #2
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f000 fd30 	bl	800b210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2202      	movs	r2, #2
 800a816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6a1a      	ldr	r2, [r3, #32]
 800a820:	f241 1311 	movw	r3, #4369	; 0x1111
 800a824:	4013      	ands	r3, r2
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10f      	bne.n	800a84a <HAL_TIM_Base_DeInit+0x40>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6a1a      	ldr	r2, [r3, #32]
 800a830:	f240 4344 	movw	r3, #1092	; 0x444
 800a834:	4013      	ands	r3, r2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d107      	bne.n	800a84a <HAL_TIM_Base_DeInit+0x40>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f022 0201 	bic.w	r2, r2, #1
 800a848:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7f8 ff0c 	bl	8003668 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d001      	beq.n	800a8cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e03c      	b.n	800a946 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a1e      	ldr	r2, [pc, #120]	; (800a954 <HAL_TIM_Base_Start+0xa0>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d018      	beq.n	800a910 <HAL_TIM_Base_Start+0x5c>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e6:	d013      	beq.n	800a910 <HAL_TIM_Base_Start+0x5c>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a1a      	ldr	r2, [pc, #104]	; (800a958 <HAL_TIM_Base_Start+0xa4>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d00e      	beq.n	800a910 <HAL_TIM_Base_Start+0x5c>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a19      	ldr	r2, [pc, #100]	; (800a95c <HAL_TIM_Base_Start+0xa8>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d009      	beq.n	800a910 <HAL_TIM_Base_Start+0x5c>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a17      	ldr	r2, [pc, #92]	; (800a960 <HAL_TIM_Base_Start+0xac>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d004      	beq.n	800a910 <HAL_TIM_Base_Start+0x5c>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a16      	ldr	r2, [pc, #88]	; (800a964 <HAL_TIM_Base_Start+0xb0>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d111      	bne.n	800a934 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f003 0307 	and.w	r3, r3, #7
 800a91a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b06      	cmp	r3, #6
 800a920:	d010      	beq.n	800a944 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f042 0201 	orr.w	r2, r2, #1
 800a930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a932:	e007      	b.n	800a944 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f042 0201 	orr.w	r2, r2, #1
 800a942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	40010000 	.word	0x40010000
 800a958:	40000400 	.word	0x40000400
 800a95c:	40000800 	.word	0x40000800
 800a960:	40000c00 	.word	0x40000c00
 800a964:	40014000 	.word	0x40014000

0800a968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d001      	beq.n	800a980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e044      	b.n	800aa0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f042 0201 	orr.w	r2, r2, #1
 800a996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a1e      	ldr	r2, [pc, #120]	; (800aa18 <HAL_TIM_Base_Start_IT+0xb0>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d018      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9aa:	d013      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a1a      	ldr	r2, [pc, #104]	; (800aa1c <HAL_TIM_Base_Start_IT+0xb4>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d00e      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a19      	ldr	r2, [pc, #100]	; (800aa20 <HAL_TIM_Base_Start_IT+0xb8>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d009      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a17      	ldr	r2, [pc, #92]	; (800aa24 <HAL_TIM_Base_Start_IT+0xbc>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d004      	beq.n	800a9d4 <HAL_TIM_Base_Start_IT+0x6c>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a16      	ldr	r2, [pc, #88]	; (800aa28 <HAL_TIM_Base_Start_IT+0xc0>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d111      	bne.n	800a9f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	f003 0307 	and.w	r3, r3, #7
 800a9de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b06      	cmp	r3, #6
 800a9e4:	d010      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f042 0201 	orr.w	r2, r2, #1
 800a9f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9f6:	e007      	b.n	800aa08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f042 0201 	orr.w	r2, r2, #1
 800aa06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	40010000 	.word	0x40010000
 800aa1c:	40000400 	.word	0x40000400
 800aa20:	40000800 	.word	0x40000800
 800aa24:	40000c00 	.word	0x40000c00
 800aa28:	40014000 	.word	0x40014000

0800aa2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68da      	ldr	r2, [r3, #12]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 0201 	bic.w	r2, r2, #1
 800aa42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6a1a      	ldr	r2, [r3, #32]
 800aa4a:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa4e:	4013      	ands	r3, r2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10f      	bne.n	800aa74 <HAL_TIM_Base_Stop_IT+0x48>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6a1a      	ldr	r2, [r3, #32]
 800aa5a:	f240 4344 	movw	r3, #1092	; 0x444
 800aa5e:	4013      	ands	r3, r2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d107      	bne.n	800aa74 <HAL_TIM_Base_Stop_IT+0x48>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0201 	bic.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	370c      	adds	r7, #12
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e041      	b.n	800ab20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d106      	bne.n	800aab6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f839 	bl	800ab28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2202      	movs	r2, #2
 800aaba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	3304      	adds	r3, #4
 800aac6:	4619      	mov	r1, r3
 800aac8:	4610      	mov	r0, r2
 800aaca:	f000 fba1 	bl	800b210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d109      	bne.n	800ab60 <HAL_TIM_PWM_Start+0x24>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	bf14      	ite	ne
 800ab58:	2301      	movne	r3, #1
 800ab5a:	2300      	moveq	r3, #0
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	e022      	b.n	800aba6 <HAL_TIM_PWM_Start+0x6a>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	d109      	bne.n	800ab7a <HAL_TIM_PWM_Start+0x3e>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	bf14      	ite	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	2300      	moveq	r3, #0
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	e015      	b.n	800aba6 <HAL_TIM_PWM_Start+0x6a>
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b08      	cmp	r3, #8
 800ab7e:	d109      	bne.n	800ab94 <HAL_TIM_PWM_Start+0x58>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	bf14      	ite	ne
 800ab8c:	2301      	movne	r3, #1
 800ab8e:	2300      	moveq	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	e008      	b.n	800aba6 <HAL_TIM_PWM_Start+0x6a>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	bf14      	ite	ne
 800aba0:	2301      	movne	r3, #1
 800aba2:	2300      	moveq	r3, #0
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e068      	b.n	800ac80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d104      	bne.n	800abbe <HAL_TIM_PWM_Start+0x82>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abbc:	e013      	b.n	800abe6 <HAL_TIM_PWM_Start+0xaa>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d104      	bne.n	800abce <HAL_TIM_PWM_Start+0x92>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2202      	movs	r2, #2
 800abc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abcc:	e00b      	b.n	800abe6 <HAL_TIM_PWM_Start+0xaa>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d104      	bne.n	800abde <HAL_TIM_PWM_Start+0xa2>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2202      	movs	r2, #2
 800abd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abdc:	e003      	b.n	800abe6 <HAL_TIM_PWM_Start+0xaa>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2202      	movs	r2, #2
 800abe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2201      	movs	r2, #1
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 fdb4 	bl	800b75c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a23      	ldr	r2, [pc, #140]	; (800ac88 <HAL_TIM_PWM_Start+0x14c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d107      	bne.n	800ac0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a1d      	ldr	r2, [pc, #116]	; (800ac88 <HAL_TIM_PWM_Start+0x14c>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d018      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x10e>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac20:	d013      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x10e>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a19      	ldr	r2, [pc, #100]	; (800ac8c <HAL_TIM_PWM_Start+0x150>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00e      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x10e>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a17      	ldr	r2, [pc, #92]	; (800ac90 <HAL_TIM_PWM_Start+0x154>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d009      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x10e>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a16      	ldr	r2, [pc, #88]	; (800ac94 <HAL_TIM_PWM_Start+0x158>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d004      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x10e>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a14      	ldr	r2, [pc, #80]	; (800ac98 <HAL_TIM_PWM_Start+0x15c>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d111      	bne.n	800ac6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	f003 0307 	and.w	r3, r3, #7
 800ac54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b06      	cmp	r3, #6
 800ac5a:	d010      	beq.n	800ac7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac6c:	e007      	b.n	800ac7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f042 0201 	orr.w	r2, r2, #1
 800ac7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	40010000 	.word	0x40010000
 800ac8c:	40000400 	.word	0x40000400
 800ac90:	40000800 	.word	0x40000800
 800ac94:	40000c00 	.word	0x40000c00
 800ac98:	40014000 	.word	0x40014000

0800ac9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	f003 0302 	and.w	r3, r3, #2
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d122      	bne.n	800acf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	f003 0302 	and.w	r3, r3, #2
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d11b      	bne.n	800acf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f06f 0202 	mvn.w	r2, #2
 800acc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa77 	bl	800b1d2 <HAL_TIM_IC_CaptureCallback>
 800ace4:	e005      	b.n	800acf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fa69 	bl	800b1be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fa7a 	bl	800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	f003 0304 	and.w	r3, r3, #4
 800ad02:	2b04      	cmp	r3, #4
 800ad04:	d122      	bne.n	800ad4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	d11b      	bne.n	800ad4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f06f 0204 	mvn.w	r2, #4
 800ad1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2202      	movs	r2, #2
 800ad22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fa4d 	bl	800b1d2 <HAL_TIM_IC_CaptureCallback>
 800ad38:	e005      	b.n	800ad46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa3f 	bl	800b1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fa50 	bl	800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	f003 0308 	and.w	r3, r3, #8
 800ad56:	2b08      	cmp	r3, #8
 800ad58:	d122      	bne.n	800ada0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	f003 0308 	and.w	r3, r3, #8
 800ad64:	2b08      	cmp	r3, #8
 800ad66:	d11b      	bne.n	800ada0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f06f 0208 	mvn.w	r2, #8
 800ad70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2204      	movs	r2, #4
 800ad76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa23 	bl	800b1d2 <HAL_TIM_IC_CaptureCallback>
 800ad8c:	e005      	b.n	800ad9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fa15 	bl	800b1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fa26 	bl	800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	f003 0310 	and.w	r3, r3, #16
 800adaa:	2b10      	cmp	r3, #16
 800adac:	d122      	bne.n	800adf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b10      	cmp	r3, #16
 800adba:	d11b      	bne.n	800adf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f06f 0210 	mvn.w	r2, #16
 800adc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2208      	movs	r2, #8
 800adca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f9f9 	bl	800b1d2 <HAL_TIM_IC_CaptureCallback>
 800ade0:	e005      	b.n	800adee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f9eb 	bl	800b1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f9fc 	bl	800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d10e      	bne.n	800ae20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d107      	bne.n	800ae20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f06f 0201 	mvn.w	r2, #1
 800ae18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7f8 f956 	bl	80030cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae2a:	2b80      	cmp	r3, #128	; 0x80
 800ae2c:	d10e      	bne.n	800ae4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae38:	2b80      	cmp	r3, #128	; 0x80
 800ae3a:	d107      	bne.n	800ae4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fd26 	bl	800b898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae56:	2b40      	cmp	r3, #64	; 0x40
 800ae58:	d10e      	bne.n	800ae78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae64:	2b40      	cmp	r3, #64	; 0x40
 800ae66:	d107      	bne.n	800ae78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f9c1 	bl	800b1fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	f003 0320 	and.w	r3, r3, #32
 800ae82:	2b20      	cmp	r3, #32
 800ae84:	d10e      	bne.n	800aea4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	f003 0320 	and.w	r3, r3, #32
 800ae90:	2b20      	cmp	r3, #32
 800ae92:	d107      	bne.n	800aea4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f06f 0220 	mvn.w	r2, #32
 800ae9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fcf0 	bl	800b884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e0ae      	b.n	800b028 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b0c      	cmp	r3, #12
 800aed6:	f200 809f 	bhi.w	800b018 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aeda:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af15 	.word	0x0800af15
 800aee4:	0800b019 	.word	0x0800b019
 800aee8:	0800b019 	.word	0x0800b019
 800aeec:	0800b019 	.word	0x0800b019
 800aef0:	0800af55 	.word	0x0800af55
 800aef4:	0800b019 	.word	0x0800b019
 800aef8:	0800b019 	.word	0x0800b019
 800aefc:	0800b019 	.word	0x0800b019
 800af00:	0800af97 	.word	0x0800af97
 800af04:	0800b019 	.word	0x0800b019
 800af08:	0800b019 	.word	0x0800b019
 800af0c:	0800b019 	.word	0x0800b019
 800af10:	0800afd7 	.word	0x0800afd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 f9f8 	bl	800b310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699a      	ldr	r2, [r3, #24]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0208 	orr.w	r2, r2, #8
 800af2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f022 0204 	bic.w	r2, r2, #4
 800af3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6999      	ldr	r1, [r3, #24]
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	691a      	ldr	r2, [r3, #16]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	430a      	orrs	r2, r1
 800af50:	619a      	str	r2, [r3, #24]
      break;
 800af52:	e064      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68b9      	ldr	r1, [r7, #8]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fa3e 	bl	800b3dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	699a      	ldr	r2, [r3, #24]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	699a      	ldr	r2, [r3, #24]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6999      	ldr	r1, [r3, #24]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	021a      	lsls	r2, r3, #8
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	619a      	str	r2, [r3, #24]
      break;
 800af94:	e043      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68b9      	ldr	r1, [r7, #8]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 fa89 	bl	800b4b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	69da      	ldr	r2, [r3, #28]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f042 0208 	orr.w	r2, r2, #8
 800afb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f022 0204 	bic.w	r2, r2, #4
 800afc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69d9      	ldr	r1, [r3, #28]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	691a      	ldr	r2, [r3, #16]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	430a      	orrs	r2, r1
 800afd2:	61da      	str	r2, [r3, #28]
      break;
 800afd4:	e023      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fad3 	bl	800b588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69da      	ldr	r2, [r3, #28]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69da      	ldr	r2, [r3, #28]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69d9      	ldr	r1, [r3, #28]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	021a      	lsls	r2, r3, #8
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	61da      	str	r2, [r3, #28]
      break;
 800b016:	e002      	b.n	800b01e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	75fb      	strb	r3, [r7, #23]
      break;
 800b01c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b044:	2b01      	cmp	r3, #1
 800b046:	d101      	bne.n	800b04c <HAL_TIM_ConfigClockSource+0x1c>
 800b048:	2302      	movs	r3, #2
 800b04a:	e0b4      	b.n	800b1b6 <HAL_TIM_ConfigClockSource+0x186>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2202      	movs	r2, #2
 800b058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b06a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b084:	d03e      	beq.n	800b104 <HAL_TIM_ConfigClockSource+0xd4>
 800b086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b08a:	f200 8087 	bhi.w	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b08e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b092:	f000 8086 	beq.w	800b1a2 <HAL_TIM_ConfigClockSource+0x172>
 800b096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b09a:	d87f      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b09c:	2b70      	cmp	r3, #112	; 0x70
 800b09e:	d01a      	beq.n	800b0d6 <HAL_TIM_ConfigClockSource+0xa6>
 800b0a0:	2b70      	cmp	r3, #112	; 0x70
 800b0a2:	d87b      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0a4:	2b60      	cmp	r3, #96	; 0x60
 800b0a6:	d050      	beq.n	800b14a <HAL_TIM_ConfigClockSource+0x11a>
 800b0a8:	2b60      	cmp	r3, #96	; 0x60
 800b0aa:	d877      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0ac:	2b50      	cmp	r3, #80	; 0x50
 800b0ae:	d03c      	beq.n	800b12a <HAL_TIM_ConfigClockSource+0xfa>
 800b0b0:	2b50      	cmp	r3, #80	; 0x50
 800b0b2:	d873      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0b4:	2b40      	cmp	r3, #64	; 0x40
 800b0b6:	d058      	beq.n	800b16a <HAL_TIM_ConfigClockSource+0x13a>
 800b0b8:	2b40      	cmp	r3, #64	; 0x40
 800b0ba:	d86f      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0bc:	2b30      	cmp	r3, #48	; 0x30
 800b0be:	d064      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x15a>
 800b0c0:	2b30      	cmp	r3, #48	; 0x30
 800b0c2:	d86b      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d060      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x15a>
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	d867      	bhi.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d05c      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x15a>
 800b0d0:	2b10      	cmp	r3, #16
 800b0d2:	d05a      	beq.n	800b18a <HAL_TIM_ConfigClockSource+0x15a>
 800b0d4:	e062      	b.n	800b19c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6818      	ldr	r0, [r3, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	6899      	ldr	r1, [r3, #8]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	f000 fb19 	bl	800b71c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b0f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	609a      	str	r2, [r3, #8]
      break;
 800b102:	e04f      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6818      	ldr	r0, [r3, #0]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	6899      	ldr	r1, [r3, #8]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	68db      	ldr	r3, [r3, #12]
 800b114:	f000 fb02 	bl	800b71c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689a      	ldr	r2, [r3, #8]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b126:	609a      	str	r2, [r3, #8]
      break;
 800b128:	e03c      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	6859      	ldr	r1, [r3, #4]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	461a      	mov	r2, r3
 800b138:	f000 fa76 	bl	800b628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2150      	movs	r1, #80	; 0x50
 800b142:	4618      	mov	r0, r3
 800b144:	f000 facf 	bl	800b6e6 <TIM_ITRx_SetConfig>
      break;
 800b148:	e02c      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6818      	ldr	r0, [r3, #0]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	6859      	ldr	r1, [r3, #4]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	461a      	mov	r2, r3
 800b158:	f000 fa95 	bl	800b686 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2160      	movs	r1, #96	; 0x60
 800b162:	4618      	mov	r0, r3
 800b164:	f000 fabf 	bl	800b6e6 <TIM_ITRx_SetConfig>
      break;
 800b168:	e01c      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6818      	ldr	r0, [r3, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	6859      	ldr	r1, [r3, #4]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	461a      	mov	r2, r3
 800b178:	f000 fa56 	bl	800b628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2140      	movs	r1, #64	; 0x40
 800b182:	4618      	mov	r0, r3
 800b184:	f000 faaf 	bl	800b6e6 <TIM_ITRx_SetConfig>
      break;
 800b188:	e00c      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f000 faa6 	bl	800b6e6 <TIM_ITRx_SetConfig>
      break;
 800b19a:	e003      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a0:	e000      	b.n	800b1a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b1a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1da:	bf00      	nop
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
	...

0800b210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	4a34      	ldr	r2, [pc, #208]	; (800b2f4 <TIM_Base_SetConfig+0xe4>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d00f      	beq.n	800b248 <TIM_Base_SetConfig+0x38>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b22e:	d00b      	beq.n	800b248 <TIM_Base_SetConfig+0x38>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a31      	ldr	r2, [pc, #196]	; (800b2f8 <TIM_Base_SetConfig+0xe8>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d007      	beq.n	800b248 <TIM_Base_SetConfig+0x38>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a30      	ldr	r2, [pc, #192]	; (800b2fc <TIM_Base_SetConfig+0xec>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d003      	beq.n	800b248 <TIM_Base_SetConfig+0x38>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a2f      	ldr	r2, [pc, #188]	; (800b300 <TIM_Base_SetConfig+0xf0>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d108      	bne.n	800b25a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	4313      	orrs	r3, r2
 800b258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a25      	ldr	r2, [pc, #148]	; (800b2f4 <TIM_Base_SetConfig+0xe4>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d01b      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b268:	d017      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a22      	ldr	r2, [pc, #136]	; (800b2f8 <TIM_Base_SetConfig+0xe8>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d013      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a21      	ldr	r2, [pc, #132]	; (800b2fc <TIM_Base_SetConfig+0xec>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d00f      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a20      	ldr	r2, [pc, #128]	; (800b300 <TIM_Base_SetConfig+0xf0>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d00b      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a1f      	ldr	r2, [pc, #124]	; (800b304 <TIM_Base_SetConfig+0xf4>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d007      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a1e      	ldr	r2, [pc, #120]	; (800b308 <TIM_Base_SetConfig+0xf8>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d003      	beq.n	800b29a <TIM_Base_SetConfig+0x8a>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a1d      	ldr	r2, [pc, #116]	; (800b30c <TIM_Base_SetConfig+0xfc>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d108      	bne.n	800b2ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a08      	ldr	r2, [pc, #32]	; (800b2f4 <TIM_Base_SetConfig+0xe4>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d103      	bne.n	800b2e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	691a      	ldr	r2, [r3, #16]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	615a      	str	r2, [r3, #20]
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	40010000 	.word	0x40010000
 800b2f8:	40000400 	.word	0x40000400
 800b2fc:	40000800 	.word	0x40000800
 800b300:	40000c00 	.word	0x40000c00
 800b304:	40014000 	.word	0x40014000
 800b308:	40014400 	.word	0x40014400
 800b30c:	40014800 	.word	0x40014800

0800b310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b310:	b480      	push	{r7}
 800b312:	b087      	sub	sp, #28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f023 0201 	bic.w	r2, r3, #1
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b33e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 0303 	bic.w	r3, r3, #3
 800b346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f023 0302 	bic.w	r3, r3, #2
 800b358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	697a      	ldr	r2, [r7, #20]
 800b360:	4313      	orrs	r3, r2
 800b362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a1c      	ldr	r2, [pc, #112]	; (800b3d8 <TIM_OC1_SetConfig+0xc8>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d10c      	bne.n	800b386 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	f023 0308 	bic.w	r3, r3, #8
 800b372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	697a      	ldr	r2, [r7, #20]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f023 0304 	bic.w	r3, r3, #4
 800b384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a13      	ldr	r2, [pc, #76]	; (800b3d8 <TIM_OC1_SetConfig+0xc8>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d111      	bne.n	800b3b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b39c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	685a      	ldr	r2, [r3, #4]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	621a      	str	r2, [r3, #32]
}
 800b3cc:	bf00      	nop
 800b3ce:	371c      	adds	r7, #28
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	40010000 	.word	0x40010000

0800b3dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b087      	sub	sp, #28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	f023 0210 	bic.w	r2, r3, #16
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b40a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	021b      	lsls	r3, r3, #8
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	f023 0320 	bic.w	r3, r3, #32
 800b426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	011b      	lsls	r3, r3, #4
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	4313      	orrs	r3, r2
 800b432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1e      	ldr	r2, [pc, #120]	; (800b4b0 <TIM_OC2_SetConfig+0xd4>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d10d      	bne.n	800b458 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	68db      	ldr	r3, [r3, #12]
 800b448:	011b      	lsls	r3, r3, #4
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a15      	ldr	r2, [pc, #84]	; (800b4b0 <TIM_OC2_SetConfig+0xd4>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d113      	bne.n	800b488 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b46e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	4313      	orrs	r3, r2
 800b47a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	4313      	orrs	r3, r2
 800b486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	621a      	str	r2, [r3, #32]
}
 800b4a2:	bf00      	nop
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	40010000 	.word	0x40010000

0800b4b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	69db      	ldr	r3, [r3, #28]
 800b4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f023 0303 	bic.w	r3, r3, #3
 800b4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	021b      	lsls	r3, r3, #8
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	4313      	orrs	r3, r2
 800b508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a1d      	ldr	r2, [pc, #116]	; (800b584 <TIM_OC3_SetConfig+0xd0>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d10d      	bne.n	800b52e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	021b      	lsls	r3, r3, #8
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	4313      	orrs	r3, r2
 800b524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b52c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a14      	ldr	r2, [pc, #80]	; (800b584 <TIM_OC3_SetConfig+0xd0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d113      	bne.n	800b55e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b53c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	011b      	lsls	r3, r3, #4
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	4313      	orrs	r3, r2
 800b550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	011b      	lsls	r3, r3, #4
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	621a      	str	r2, [r3, #32]
}
 800b578:	bf00      	nop
 800b57a:	371c      	adds	r7, #28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr
 800b584:	40010000 	.word	0x40010000

0800b588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	021b      	lsls	r3, r3, #8
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	031b      	lsls	r3, r3, #12
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a10      	ldr	r2, [pc, #64]	; (800b624 <TIM_OC4_SetConfig+0x9c>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d109      	bne.n	800b5fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	019b      	lsls	r3, r3, #6
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	621a      	str	r2, [r3, #32]
}
 800b616:	bf00      	nop
 800b618:	371c      	adds	r7, #28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	40010000 	.word	0x40010000

0800b628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b628:	b480      	push	{r7}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	f023 0201 	bic.w	r2, r3, #1
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f023 030a 	bic.w	r3, r3, #10
 800b664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	621a      	str	r2, [r3, #32]
}
 800b67a:	bf00      	nop
 800b67c:	371c      	adds	r7, #28
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b686:	b480      	push	{r7}
 800b688:	b087      	sub	sp, #28
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	f023 0210 	bic.w	r2, r3, #16
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6a1b      	ldr	r3, [r3, #32]
 800b6a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b6b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	031b      	lsls	r3, r3, #12
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b6c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	621a      	str	r2, [r3, #32]
}
 800b6da:	bf00      	nop
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b085      	sub	sp, #20
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
 800b6ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	4313      	orrs	r3, r2
 800b704:	f043 0307 	orr.w	r3, r3, #7
 800b708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	609a      	str	r2, [r3, #8]
}
 800b710:	bf00      	nop
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b736:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	021a      	lsls	r2, r3, #8
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	431a      	orrs	r2, r3
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	4313      	orrs	r3, r2
 800b744:	697a      	ldr	r2, [r7, #20]
 800b746:	4313      	orrs	r3, r2
 800b748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	609a      	str	r2, [r3, #8]
}
 800b750:	bf00      	nop
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f003 031f 	and.w	r3, r3, #31
 800b76e:	2201      	movs	r2, #1
 800b770:	fa02 f303 	lsl.w	r3, r2, r3
 800b774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6a1a      	ldr	r2, [r3, #32]
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	43db      	mvns	r3, r3
 800b77e:	401a      	ands	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a1a      	ldr	r2, [r3, #32]
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	f003 031f 	and.w	r3, r3, #31
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	fa01 f303 	lsl.w	r3, r1, r3
 800b794:	431a      	orrs	r2, r3
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	621a      	str	r2, [r3, #32]
}
 800b79a:	bf00      	nop
 800b79c:	371c      	adds	r7, #28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
	...

0800b7a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d101      	bne.n	800b7c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7bc:	2302      	movs	r3, #2
 800b7be:	e050      	b.n	800b862 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a1c      	ldr	r2, [pc, #112]	; (800b870 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d018      	beq.n	800b836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b80c:	d013      	beq.n	800b836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a18      	ldr	r2, [pc, #96]	; (800b874 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d00e      	beq.n	800b836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a16      	ldr	r2, [pc, #88]	; (800b878 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d009      	beq.n	800b836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a15      	ldr	r2, [pc, #84]	; (800b87c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d004      	beq.n	800b836 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a13      	ldr	r2, [pc, #76]	; (800b880 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d10c      	bne.n	800b850 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b83c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	4313      	orrs	r3, r2
 800b846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	40010000 	.word	0x40010000
 800b874:	40000400 	.word	0x40000400
 800b878:	40000800 	.word	0x40000800
 800b87c:	40000c00 	.word	0x40000c00
 800b880:	40014000 	.word	0x40014000

0800b884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e03f      	b.n	800b93e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7f7 ff02 	bl	80036dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2224      	movs	r2, #36	; 0x24
 800b8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fe5d 	bl	800c5b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	691a      	ldr	r2, [r3, #16]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	695a      	ldr	r2, [r3, #20]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68da      	ldr	r2, [r3, #12]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2220      	movs	r2, #32
 800b930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2220      	movs	r2, #32
 800b938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b082      	sub	sp, #8
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e021      	b.n	800b99c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2224      	movs	r2, #36	; 0x24
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68da      	ldr	r2, [r3, #12]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b96e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7f7 ff41 	bl	80037f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3708      	adds	r7, #8
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08a      	sub	sp, #40	; 0x28
 800b9a8:	af02      	add	r7, sp, #8
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	603b      	str	r3, [r7, #0]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	d17c      	bne.n	800babe <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <HAL_UART_Transmit+0x2c>
 800b9ca:	88fb      	ldrh	r3, [r7, #6]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e075      	b.n	800bac0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d101      	bne.n	800b9e2 <HAL_UART_Transmit+0x3e>
 800b9de:	2302      	movs	r3, #2
 800b9e0:	e06e      	b.n	800bac0 <HAL_UART_Transmit+0x11c>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2221      	movs	r2, #33	; 0x21
 800b9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9f8:	f7f8 f91c 	bl	8003c34 <HAL_GetTick>
 800b9fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	88fa      	ldrh	r2, [r7, #6]
 800ba02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	88fa      	ldrh	r2, [r7, #6]
 800ba08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba12:	d108      	bne.n	800ba26 <HAL_UART_Transmit+0x82>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	61bb      	str	r3, [r7, #24]
 800ba24:	e003      	b.n	800ba2e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ba36:	e02a      	b.n	800ba8e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2180      	movs	r1, #128	; 0x80
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f000 fb6e 	bl	800c124 <UART_WaitOnFlagUntilTimeout>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	e036      	b.n	800bac0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10b      	bne.n	800ba70 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	881b      	ldrh	r3, [r3, #0]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba66:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	61bb      	str	r3, [r7, #24]
 800ba6e:	e007      	b.n	800ba80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	781a      	ldrb	r2, [r3, #0]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	3b01      	subs	r3, #1
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1cf      	bne.n	800ba38 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2140      	movs	r1, #64	; 0x40
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 fb3e 	bl	800c124 <UART_WaitOnFlagUntilTimeout>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	e006      	b.n	800bac0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2220      	movs	r2, #32
 800bab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	e000      	b.n	800bac0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800babe:	2302      	movs	r3, #2
  }
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	4613      	mov	r3, r2
 800bad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b20      	cmp	r3, #32
 800bae0:	d11d      	bne.n	800bb1e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <HAL_UART_Receive_IT+0x26>
 800bae8:	88fb      	ldrh	r3, [r7, #6]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e016      	b.n	800bb20 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_UART_Receive_IT+0x38>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e00f      	b.n	800bb20 <HAL_UART_Receive_IT+0x58>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bb0e:	88fb      	ldrh	r3, [r7, #6]
 800bb10:	461a      	mov	r2, r3
 800bb12:	68b9      	ldr	r1, [r7, #8]
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f000 fb73 	bl	800c200 <UART_Start_Receive_IT>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	e000      	b.n	800bb20 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bb1e:	2302      	movs	r3, #2
  }
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b08c      	sub	sp, #48	; 0x30
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	4613      	mov	r3, r2
 800bb34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	2b20      	cmp	r3, #32
 800bb40:	d152      	bne.n	800bbe8 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800bb48:	88fb      	ldrh	r3, [r7, #6]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e04b      	b.n	800bbea <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d101      	bne.n	800bb60 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e044      	b.n	800bbea <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800bb6e:	88fb      	ldrh	r3, [r7, #6]
 800bb70:	461a      	mov	r2, r3
 800bb72:	68b9      	ldr	r1, [r7, #8]
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 fb43 	bl	800c200 <UART_Start_Receive_IT>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bb80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d12c      	bne.n	800bbe2 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d125      	bne.n	800bbdc <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb90:	2300      	movs	r3, #0
 800bb92:	613b      	str	r3, [r7, #16]
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	613b      	str	r3, [r7, #16]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	330c      	adds	r3, #12
 800bbac:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	e853 3f00 	ldrex	r3, [r3]
 800bbb4:	617b      	str	r3, [r7, #20]
   return(result);
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f043 0310 	orr.w	r3, r3, #16
 800bbbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	330c      	adds	r3, #12
 800bbc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbc6:	627a      	str	r2, [r7, #36]	; 0x24
 800bbc8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbca:	6a39      	ldr	r1, [r7, #32]
 800bbcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbce:	e841 2300 	strex	r3, r2, [r1]
 800bbd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1e5      	bne.n	800bba6 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800bbda:	e002      	b.n	800bbe2 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800bbe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbe6:	e000      	b.n	800bbea <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800bbe8:	2302      	movs	r3, #2
  }
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3730      	adds	r7, #48	; 0x30
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b0ba      	sub	sp, #232	; 0xe8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc2a:	f003 030f 	and.w	r3, r3, #15
 800bc2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10f      	bne.n	800bc5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc3e:	f003 0320 	and.w	r3, r3, #32
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d009      	beq.n	800bc5a <HAL_UART_IRQHandler+0x66>
 800bc46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc4a:	f003 0320 	and.w	r3, r3, #32
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fbf1 	bl	800c43a <UART_Receive_IT>
      return;
 800bc58:	e256      	b.n	800c108 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f000 80de 	beq.w	800be20 <HAL_UART_IRQHandler+0x22c>
 800bc64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d106      	bne.n	800bc7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 80d1 	beq.w	800be20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00b      	beq.n	800bca2 <HAL_UART_IRQHandler+0xae>
 800bc8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d005      	beq.n	800bca2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9a:	f043 0201 	orr.w	r2, r3, #1
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bca6:	f003 0304 	and.w	r3, r3, #4
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00b      	beq.n	800bcc6 <HAL_UART_IRQHandler+0xd2>
 800bcae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d005      	beq.n	800bcc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcbe:	f043 0202 	orr.w	r2, r3, #2
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcca:	f003 0302 	and.w	r3, r3, #2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00b      	beq.n	800bcea <HAL_UART_IRQHandler+0xf6>
 800bcd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d005      	beq.n	800bcea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce2:	f043 0204 	orr.w	r2, r3, #4
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bcea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcee:	f003 0308 	and.w	r3, r3, #8
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d011      	beq.n	800bd1a <HAL_UART_IRQHandler+0x126>
 800bcf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcfa:	f003 0320 	and.w	r3, r3, #32
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d105      	bne.n	800bd0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd06:	f003 0301 	and.w	r3, r3, #1
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d005      	beq.n	800bd1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd12:	f043 0208 	orr.w	r2, r3, #8
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 81ed 	beq.w	800c0fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd28:	f003 0320 	and.w	r3, r3, #32
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d008      	beq.n	800bd42 <HAL_UART_IRQHandler+0x14e>
 800bd30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd34:	f003 0320 	and.w	r3, r3, #32
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fb7c 	bl	800c43a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	695b      	ldr	r3, [r3, #20]
 800bd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd4c:	2b40      	cmp	r3, #64	; 0x40
 800bd4e:	bf0c      	ite	eq
 800bd50:	2301      	moveq	r3, #1
 800bd52:	2300      	movne	r3, #0
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5e:	f003 0308 	and.w	r3, r3, #8
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d103      	bne.n	800bd6e <HAL_UART_IRQHandler+0x17a>
 800bd66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d04f      	beq.n	800be0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa84 	bl	800c27c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd7e:	2b40      	cmp	r3, #64	; 0x40
 800bd80:	d141      	bne.n	800be06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3314      	adds	r3, #20
 800bd88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd90:	e853 3f00 	ldrex	r3, [r3]
 800bd94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3314      	adds	r3, #20
 800bdaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bdba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdbe:	e841 2300 	strex	r3, r2, [r1]
 800bdc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bdc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1d9      	bne.n	800bd82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d013      	beq.n	800bdfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdda:	4a7d      	ldr	r2, [pc, #500]	; (800bfd0 <HAL_UART_IRQHandler+0x3dc>)
 800bddc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7f8 ff09 	bl	8004bfa <HAL_DMA_Abort_IT>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d016      	beq.n	800be1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfc:	e00e      	b.n	800be1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7f7 f9b4 	bl	800316c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be04:	e00a      	b.n	800be1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f7f7 f9b0 	bl	800316c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be0c:	e006      	b.n	800be1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7f7 f9ac 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800be1a:	e170      	b.n	800c0fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be1c:	bf00      	nop
    return;
 800be1e:	e16e      	b.n	800c0fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be24:	2b01      	cmp	r3, #1
 800be26:	f040 814a 	bne.w	800c0be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be2e:	f003 0310 	and.w	r3, r3, #16
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 8143 	beq.w	800c0be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be3c:	f003 0310 	and.w	r3, r3, #16
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 813c 	beq.w	800c0be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be46:	2300      	movs	r3, #0
 800be48:	60bb      	str	r3, [r7, #8]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60bb      	str	r3, [r7, #8]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	60bb      	str	r3, [r7, #8]
 800be5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be66:	2b40      	cmp	r3, #64	; 0x40
 800be68:	f040 80b4 	bne.w	800bfd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 8140 	beq.w	800c102 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be8a:	429a      	cmp	r2, r3
 800be8c:	f080 8139 	bcs.w	800c102 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800be96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea2:	f000 8088 	beq.w	800bfb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	330c      	adds	r3, #12
 800beac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800beb4:	e853 3f00 	ldrex	r3, [r3]
 800beb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	330c      	adds	r3, #12
 800bece:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bee2:	e841 2300 	strex	r3, r2, [r1]
 800bee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800beea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1d9      	bne.n	800bea6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3314      	adds	r3, #20
 800bef8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800befc:	e853 3f00 	ldrex	r3, [r3]
 800bf00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf04:	f023 0301 	bic.w	r3, r3, #1
 800bf08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3314      	adds	r3, #20
 800bf12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf22:	e841 2300 	strex	r3, r2, [r1]
 800bf26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1e1      	bne.n	800bef2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3314      	adds	r3, #20
 800bf34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf38:	e853 3f00 	ldrex	r3, [r3]
 800bf3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3314      	adds	r3, #20
 800bf4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf52:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf5a:	e841 2300 	strex	r3, r2, [r1]
 800bf5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1e3      	bne.n	800bf2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	330c      	adds	r3, #12
 800bf7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bf84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf86:	f023 0310 	bic.w	r3, r3, #16
 800bf8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	330c      	adds	r3, #12
 800bf94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bf98:	65ba      	str	r2, [r7, #88]	; 0x58
 800bf9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfa0:	e841 2300 	strex	r3, r2, [r1]
 800bfa4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1e3      	bne.n	800bf74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7f8 fdb2 	bl	8004b1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f007 fd50 	bl	8013a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bfcc:	e099      	b.n	800c102 <HAL_UART_IRQHandler+0x50e>
 800bfce:	bf00      	nop
 800bfd0:	0800c343 	.word	0x0800c343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 808b 	beq.w	800c106 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 8086 	beq.w	800c106 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	330c      	adds	r3, #12
 800c000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	e853 3f00 	ldrex	r3, [r3]
 800c008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	330c      	adds	r3, #12
 800c01a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c01e:	647a      	str	r2, [r7, #68]	; 0x44
 800c020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c026:	e841 2300 	strex	r3, r2, [r1]
 800c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1e3      	bne.n	800bffa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3314      	adds	r3, #20
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	e853 3f00 	ldrex	r3, [r3]
 800c040:	623b      	str	r3, [r7, #32]
   return(result);
 800c042:	6a3b      	ldr	r3, [r7, #32]
 800c044:	f023 0301 	bic.w	r3, r3, #1
 800c048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3314      	adds	r3, #20
 800c052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c056:	633a      	str	r2, [r7, #48]	; 0x30
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c05e:	e841 2300 	strex	r3, r2, [r1]
 800c062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e3      	bne.n	800c032 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2220      	movs	r2, #32
 800c06e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	330c      	adds	r3, #12
 800c07e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	e853 3f00 	ldrex	r3, [r3]
 800c086:	60fb      	str	r3, [r7, #12]
   return(result);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f023 0310 	bic.w	r3, r3, #16
 800c08e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	330c      	adds	r3, #12
 800c098:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c09c:	61fa      	str	r2, [r7, #28]
 800c09e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a0:	69b9      	ldr	r1, [r7, #24]
 800c0a2:	69fa      	ldr	r2, [r7, #28]
 800c0a4:	e841 2300 	strex	r3, r2, [r1]
 800c0a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e3      	bne.n	800c078 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f007 fcd8 	bl	8013a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0bc:	e023      	b.n	800c106 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d009      	beq.n	800c0de <HAL_UART_IRQHandler+0x4ea>
 800c0ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f947 	bl	800c36a <UART_Transmit_IT>
    return;
 800c0dc:	e014      	b.n	800c108 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00e      	beq.n	800c108 <HAL_UART_IRQHandler+0x514>
 800c0ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d008      	beq.n	800c108 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 f987 	bl	800c40a <UART_EndTransmit_IT>
    return;
 800c0fc:	e004      	b.n	800c108 <HAL_UART_IRQHandler+0x514>
    return;
 800c0fe:	bf00      	nop
 800c100:	e002      	b.n	800c108 <HAL_UART_IRQHandler+0x514>
      return;
 800c102:	bf00      	nop
 800c104:	e000      	b.n	800c108 <HAL_UART_IRQHandler+0x514>
      return;
 800c106:	bf00      	nop
  }
}
 800c108:	37e8      	adds	r7, #232	; 0xe8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop

0800c110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b090      	sub	sp, #64	; 0x40
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	4613      	mov	r3, r2
 800c132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c134:	e050      	b.n	800c1d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13c:	d04c      	beq.n	800c1d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c13e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c140:	2b00      	cmp	r3, #0
 800c142:	d007      	beq.n	800c154 <UART_WaitOnFlagUntilTimeout+0x30>
 800c144:	f7f7 fd76 	bl	8003c34 <HAL_GetTick>
 800c148:	4602      	mov	r2, r0
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c150:	429a      	cmp	r2, r3
 800c152:	d241      	bcs.n	800c1d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	330c      	adds	r3, #12
 800c15a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	330c      	adds	r3, #12
 800c172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c174:	637a      	str	r2, [r7, #52]	; 0x34
 800c176:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c17a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e5      	bne.n	800c154 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3314      	adds	r3, #20
 800c18e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	e853 3f00 	ldrex	r3, [r3]
 800c196:	613b      	str	r3, [r7, #16]
   return(result);
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	f023 0301 	bic.w	r3, r3, #1
 800c19e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3314      	adds	r3, #20
 800c1a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1a8:	623a      	str	r2, [r7, #32]
 800c1aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	69f9      	ldr	r1, [r7, #28]
 800c1ae:	6a3a      	ldr	r2, [r7, #32]
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e5      	bne.n	800c188 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2220      	movs	r2, #32
 800c1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2220      	movs	r2, #32
 800c1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e00f      	b.n	800c1f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	bf0c      	ite	eq
 800c1e8:	2301      	moveq	r3, #1
 800c1ea:	2300      	movne	r3, #0
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d09f      	beq.n	800c136 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3740      	adds	r7, #64	; 0x40
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	4613      	mov	r3, r2
 800c20c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	88fa      	ldrh	r2, [r7, #6]
 800c218:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	88fa      	ldrh	r2, [r7, #6]
 800c21e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2222      	movs	r2, #34	; 0x22
 800c22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d007      	beq.n	800c24e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68da      	ldr	r2, [r3, #12]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c24c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	695a      	ldr	r2, [r3, #20]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f042 0201 	orr.w	r2, r2, #1
 800c25c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68da      	ldr	r2, [r3, #12]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f042 0220 	orr.w	r2, r2, #32
 800c26c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	3714      	adds	r7, #20
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b095      	sub	sp, #84	; 0x54
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	330c      	adds	r3, #12
 800c28a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28e:	e853 3f00 	ldrex	r3, [r3]
 800c292:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c29a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	330c      	adds	r3, #12
 800c2a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2a4:	643a      	str	r2, [r7, #64]	; 0x40
 800c2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c2aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c2ac:	e841 2300 	strex	r3, r2, [r1]
 800c2b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1e5      	bne.n	800c284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3314      	adds	r3, #20
 800c2be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c0:	6a3b      	ldr	r3, [r7, #32]
 800c2c2:	e853 3f00 	ldrex	r3, [r3]
 800c2c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	f023 0301 	bic.w	r3, r3, #1
 800c2ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3314      	adds	r3, #20
 800c2d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2e0:	e841 2300 	strex	r3, r2, [r1]
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e5      	bne.n	800c2b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d119      	bne.n	800c328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	330c      	adds	r3, #12
 800c2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	e853 3f00 	ldrex	r3, [r3]
 800c302:	60bb      	str	r3, [r7, #8]
   return(result);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	f023 0310 	bic.w	r3, r3, #16
 800c30a:	647b      	str	r3, [r7, #68]	; 0x44
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	330c      	adds	r3, #12
 800c312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c314:	61ba      	str	r2, [r7, #24]
 800c316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c318:	6979      	ldr	r1, [r7, #20]
 800c31a:	69ba      	ldr	r2, [r7, #24]
 800c31c:	e841 2300 	strex	r3, r2, [r1]
 800c320:	613b      	str	r3, [r7, #16]
   return(result);
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1e5      	bne.n	800c2f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2220      	movs	r2, #32
 800c32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c336:	bf00      	nop
 800c338:	3754      	adds	r7, #84	; 0x54
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr

0800c342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	b084      	sub	sp, #16
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7f6 ff05 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c362:	bf00      	nop
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b085      	sub	sp, #20
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	2b21      	cmp	r3, #33	; 0x21
 800c37c:	d13e      	bne.n	800c3fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c386:	d114      	bne.n	800c3b2 <UART_Transmit_IT+0x48>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d110      	bne.n	800c3b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6a1b      	ldr	r3, [r3, #32]
 800c394:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	461a      	mov	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	1c9a      	adds	r2, r3, #2
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	621a      	str	r2, [r3, #32]
 800c3b0:	e008      	b.n	800c3c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a1b      	ldr	r3, [r3, #32]
 800c3b6:	1c59      	adds	r1, r3, #1
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	6211      	str	r1, [r2, #32]
 800c3bc:	781a      	ldrb	r2, [r3, #0]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10f      	bne.n	800c3f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68da      	ldr	r2, [r3, #12]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68da      	ldr	r2, [r3, #12]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	e000      	b.n	800c3fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c3fc:	2302      	movs	r3, #2
  }
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr

0800c40a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68da      	ldr	r2, [r3, #12]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c420:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2220      	movs	r2, #32
 800c426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7ff fe70 	bl	800c110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b08c      	sub	sp, #48	; 0x30
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b22      	cmp	r3, #34	; 0x22
 800c44c:	f040 80ab 	bne.w	800c5a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c458:	d117      	bne.n	800c48a <UART_Receive_IT+0x50>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d113      	bne.n	800c48a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c462:	2300      	movs	r3, #0
 800c464:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	b29b      	uxth	r3, r3
 800c474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c478:	b29a      	uxth	r2, r3
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c482:	1c9a      	adds	r2, r3, #2
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	629a      	str	r2, [r3, #40]	; 0x28
 800c488:	e026      	b.n	800c4d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c490:	2300      	movs	r3, #0
 800c492:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c49c:	d007      	beq.n	800c4ae <UART_Receive_IT+0x74>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10a      	bne.n	800c4bc <UART_Receive_IT+0x82>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d106      	bne.n	800c4bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b8:	701a      	strb	r2, [r3, #0]
 800c4ba:	e008      	b.n	800c4ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c8:	b2da      	uxtb	r2, r3
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d15a      	bne.n	800c5a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68da      	ldr	r2, [r3, #12]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f022 0220 	bic.w	r2, r2, #32
 800c4fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68da      	ldr	r2, [r3, #12]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c50a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	695a      	ldr	r2, [r3, #20]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f022 0201 	bic.w	r2, r2, #1
 800c51a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2220      	movs	r2, #32
 800c520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d135      	bne.n	800c598 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	330c      	adds	r3, #12
 800c538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	613b      	str	r3, [r7, #16]
   return(result);
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	f023 0310 	bic.w	r3, r3, #16
 800c548:	627b      	str	r3, [r7, #36]	; 0x24
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	330c      	adds	r3, #12
 800c550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c552:	623a      	str	r2, [r7, #32]
 800c554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	69f9      	ldr	r1, [r7, #28]
 800c558:	6a3a      	ldr	r2, [r7, #32]
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e5      	bne.n	800c532 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0310 	and.w	r3, r3, #16
 800c570:	2b10      	cmp	r3, #16
 800c572:	d10a      	bne.n	800c58a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c574:	2300      	movs	r3, #0
 800c576:	60fb      	str	r3, [r7, #12]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	60fb      	str	r3, [r7, #12]
 800c588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f007 fa6b 	bl	8013a6c <HAL_UARTEx_RxEventCallback>
 800c596:	e002      	b.n	800c59e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f002 fc4d 	bl	800ee38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	e002      	b.n	800c5a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e000      	b.n	800c5a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c5a6:	2302      	movs	r3, #2
  }
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3730      	adds	r7, #48	; 0x30
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5b4:	b0c0      	sub	sp, #256	; 0x100
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5cc:	68d9      	ldr	r1, [r3, #12]
 800c5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	ea40 0301 	orr.w	r3, r0, r1
 800c5d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c5da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5f4:	69db      	ldr	r3, [r3, #28]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c608:	f021 010c 	bic.w	r1, r1, #12
 800c60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c616:	430b      	orrs	r3, r1
 800c618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c62a:	6999      	ldr	r1, [r3, #24]
 800c62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	ea40 0301 	orr.w	r3, r0, r1
 800c636:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b8f      	ldr	r3, [pc, #572]	; (800c87c <UART_SetConfig+0x2cc>)
 800c640:	429a      	cmp	r2, r3
 800c642:	d005      	beq.n	800c650 <UART_SetConfig+0xa0>
 800c644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	4b8d      	ldr	r3, [pc, #564]	; (800c880 <UART_SetConfig+0x2d0>)
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d104      	bne.n	800c65a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c650:	f7fc fb70 	bl	8008d34 <HAL_RCC_GetPCLK2Freq>
 800c654:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c658:	e003      	b.n	800c662 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c65a:	f7fc fb57 	bl	8008d0c <HAL_RCC_GetPCLK1Freq>
 800c65e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c666:	69db      	ldr	r3, [r3, #28]
 800c668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c66c:	f040 810c 	bne.w	800c888 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c674:	2200      	movs	r2, #0
 800c676:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c67a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c67e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c682:	4622      	mov	r2, r4
 800c684:	462b      	mov	r3, r5
 800c686:	1891      	adds	r1, r2, r2
 800c688:	65b9      	str	r1, [r7, #88]	; 0x58
 800c68a:	415b      	adcs	r3, r3
 800c68c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c68e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c692:	4621      	mov	r1, r4
 800c694:	eb12 0801 	adds.w	r8, r2, r1
 800c698:	4629      	mov	r1, r5
 800c69a:	eb43 0901 	adc.w	r9, r3, r1
 800c69e:	f04f 0200 	mov.w	r2, #0
 800c6a2:	f04f 0300 	mov.w	r3, #0
 800c6a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c6aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c6ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c6b2:	4690      	mov	r8, r2
 800c6b4:	4699      	mov	r9, r3
 800c6b6:	4623      	mov	r3, r4
 800c6b8:	eb18 0303 	adds.w	r3, r8, r3
 800c6bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c6c0:	462b      	mov	r3, r5
 800c6c2:	eb49 0303 	adc.w	r3, r9, r3
 800c6c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c6d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c6da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c6de:	460b      	mov	r3, r1
 800c6e0:	18db      	adds	r3, r3, r3
 800c6e2:	653b      	str	r3, [r7, #80]	; 0x50
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	eb42 0303 	adc.w	r3, r2, r3
 800c6ea:	657b      	str	r3, [r7, #84]	; 0x54
 800c6ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c6f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c6f4:	f7f4 fae0 	bl	8000cb8 <__aeabi_uldivmod>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	4b61      	ldr	r3, [pc, #388]	; (800c884 <UART_SetConfig+0x2d4>)
 800c6fe:	fba3 2302 	umull	r2, r3, r3, r2
 800c702:	095b      	lsrs	r3, r3, #5
 800c704:	011c      	lsls	r4, r3, #4
 800c706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c70a:	2200      	movs	r2, #0
 800c70c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c710:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c714:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c718:	4642      	mov	r2, r8
 800c71a:	464b      	mov	r3, r9
 800c71c:	1891      	adds	r1, r2, r2
 800c71e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c720:	415b      	adcs	r3, r3
 800c722:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c728:	4641      	mov	r1, r8
 800c72a:	eb12 0a01 	adds.w	sl, r2, r1
 800c72e:	4649      	mov	r1, r9
 800c730:	eb43 0b01 	adc.w	fp, r3, r1
 800c734:	f04f 0200 	mov.w	r2, #0
 800c738:	f04f 0300 	mov.w	r3, #0
 800c73c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c740:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c748:	4692      	mov	sl, r2
 800c74a:	469b      	mov	fp, r3
 800c74c:	4643      	mov	r3, r8
 800c74e:	eb1a 0303 	adds.w	r3, sl, r3
 800c752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c756:	464b      	mov	r3, r9
 800c758:	eb4b 0303 	adc.w	r3, fp, r3
 800c75c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c76c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c770:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c774:	460b      	mov	r3, r1
 800c776:	18db      	adds	r3, r3, r3
 800c778:	643b      	str	r3, [r7, #64]	; 0x40
 800c77a:	4613      	mov	r3, r2
 800c77c:	eb42 0303 	adc.w	r3, r2, r3
 800c780:	647b      	str	r3, [r7, #68]	; 0x44
 800c782:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c786:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c78a:	f7f4 fa95 	bl	8000cb8 <__aeabi_uldivmod>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4611      	mov	r1, r2
 800c794:	4b3b      	ldr	r3, [pc, #236]	; (800c884 <UART_SetConfig+0x2d4>)
 800c796:	fba3 2301 	umull	r2, r3, r3, r1
 800c79a:	095b      	lsrs	r3, r3, #5
 800c79c:	2264      	movs	r2, #100	; 0x64
 800c79e:	fb02 f303 	mul.w	r3, r2, r3
 800c7a2:	1acb      	subs	r3, r1, r3
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c7aa:	4b36      	ldr	r3, [pc, #216]	; (800c884 <UART_SetConfig+0x2d4>)
 800c7ac:	fba3 2302 	umull	r2, r3, r3, r2
 800c7b0:	095b      	lsrs	r3, r3, #5
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c7b8:	441c      	add	r4, r3
 800c7ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c7c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c7cc:	4642      	mov	r2, r8
 800c7ce:	464b      	mov	r3, r9
 800c7d0:	1891      	adds	r1, r2, r2
 800c7d2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c7d4:	415b      	adcs	r3, r3
 800c7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c7dc:	4641      	mov	r1, r8
 800c7de:	1851      	adds	r1, r2, r1
 800c7e0:	6339      	str	r1, [r7, #48]	; 0x30
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	414b      	adcs	r3, r1
 800c7e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7e8:	f04f 0200 	mov.w	r2, #0
 800c7ec:	f04f 0300 	mov.w	r3, #0
 800c7f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c7f4:	4659      	mov	r1, fp
 800c7f6:	00cb      	lsls	r3, r1, #3
 800c7f8:	4651      	mov	r1, sl
 800c7fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7fe:	4651      	mov	r1, sl
 800c800:	00ca      	lsls	r2, r1, #3
 800c802:	4610      	mov	r0, r2
 800c804:	4619      	mov	r1, r3
 800c806:	4603      	mov	r3, r0
 800c808:	4642      	mov	r2, r8
 800c80a:	189b      	adds	r3, r3, r2
 800c80c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c810:	464b      	mov	r3, r9
 800c812:	460a      	mov	r2, r1
 800c814:	eb42 0303 	adc.w	r3, r2, r3
 800c818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c828:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c82c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c830:	460b      	mov	r3, r1
 800c832:	18db      	adds	r3, r3, r3
 800c834:	62bb      	str	r3, [r7, #40]	; 0x28
 800c836:	4613      	mov	r3, r2
 800c838:	eb42 0303 	adc.w	r3, r2, r3
 800c83c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c83e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c842:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c846:	f7f4 fa37 	bl	8000cb8 <__aeabi_uldivmod>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4b0d      	ldr	r3, [pc, #52]	; (800c884 <UART_SetConfig+0x2d4>)
 800c850:	fba3 1302 	umull	r1, r3, r3, r2
 800c854:	095b      	lsrs	r3, r3, #5
 800c856:	2164      	movs	r1, #100	; 0x64
 800c858:	fb01 f303 	mul.w	r3, r1, r3
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	00db      	lsls	r3, r3, #3
 800c860:	3332      	adds	r3, #50	; 0x32
 800c862:	4a08      	ldr	r2, [pc, #32]	; (800c884 <UART_SetConfig+0x2d4>)
 800c864:	fba2 2303 	umull	r2, r3, r2, r3
 800c868:	095b      	lsrs	r3, r3, #5
 800c86a:	f003 0207 	and.w	r2, r3, #7
 800c86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4422      	add	r2, r4
 800c876:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c878:	e105      	b.n	800ca86 <UART_SetConfig+0x4d6>
 800c87a:	bf00      	nop
 800c87c:	40011000 	.word	0x40011000
 800c880:	40011400 	.word	0x40011400
 800c884:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c88c:	2200      	movs	r2, #0
 800c88e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c892:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c896:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c89a:	4642      	mov	r2, r8
 800c89c:	464b      	mov	r3, r9
 800c89e:	1891      	adds	r1, r2, r2
 800c8a0:	6239      	str	r1, [r7, #32]
 800c8a2:	415b      	adcs	r3, r3
 800c8a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c8a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c8aa:	4641      	mov	r1, r8
 800c8ac:	1854      	adds	r4, r2, r1
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	eb43 0501 	adc.w	r5, r3, r1
 800c8b4:	f04f 0200 	mov.w	r2, #0
 800c8b8:	f04f 0300 	mov.w	r3, #0
 800c8bc:	00eb      	lsls	r3, r5, #3
 800c8be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c8c2:	00e2      	lsls	r2, r4, #3
 800c8c4:	4614      	mov	r4, r2
 800c8c6:	461d      	mov	r5, r3
 800c8c8:	4643      	mov	r3, r8
 800c8ca:	18e3      	adds	r3, r4, r3
 800c8cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8d0:	464b      	mov	r3, r9
 800c8d2:	eb45 0303 	adc.w	r3, r5, r3
 800c8d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c8e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c8ea:	f04f 0200 	mov.w	r2, #0
 800c8ee:	f04f 0300 	mov.w	r3, #0
 800c8f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	008b      	lsls	r3, r1, #2
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c900:	4621      	mov	r1, r4
 800c902:	008a      	lsls	r2, r1, #2
 800c904:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c908:	f7f4 f9d6 	bl	8000cb8 <__aeabi_uldivmod>
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4b60      	ldr	r3, [pc, #384]	; (800ca94 <UART_SetConfig+0x4e4>)
 800c912:	fba3 2302 	umull	r2, r3, r3, r2
 800c916:	095b      	lsrs	r3, r3, #5
 800c918:	011c      	lsls	r4, r3, #4
 800c91a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c91e:	2200      	movs	r2, #0
 800c920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c928:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c92c:	4642      	mov	r2, r8
 800c92e:	464b      	mov	r3, r9
 800c930:	1891      	adds	r1, r2, r2
 800c932:	61b9      	str	r1, [r7, #24]
 800c934:	415b      	adcs	r3, r3
 800c936:	61fb      	str	r3, [r7, #28]
 800c938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c93c:	4641      	mov	r1, r8
 800c93e:	1851      	adds	r1, r2, r1
 800c940:	6139      	str	r1, [r7, #16]
 800c942:	4649      	mov	r1, r9
 800c944:	414b      	adcs	r3, r1
 800c946:	617b      	str	r3, [r7, #20]
 800c948:	f04f 0200 	mov.w	r2, #0
 800c94c:	f04f 0300 	mov.w	r3, #0
 800c950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c954:	4659      	mov	r1, fp
 800c956:	00cb      	lsls	r3, r1, #3
 800c958:	4651      	mov	r1, sl
 800c95a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c95e:	4651      	mov	r1, sl
 800c960:	00ca      	lsls	r2, r1, #3
 800c962:	4610      	mov	r0, r2
 800c964:	4619      	mov	r1, r3
 800c966:	4603      	mov	r3, r0
 800c968:	4642      	mov	r2, r8
 800c96a:	189b      	adds	r3, r3, r2
 800c96c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c970:	464b      	mov	r3, r9
 800c972:	460a      	mov	r2, r1
 800c974:	eb42 0303 	adc.w	r3, r2, r3
 800c978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	67bb      	str	r3, [r7, #120]	; 0x78
 800c986:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c988:	f04f 0200 	mov.w	r2, #0
 800c98c:	f04f 0300 	mov.w	r3, #0
 800c990:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c994:	4649      	mov	r1, r9
 800c996:	008b      	lsls	r3, r1, #2
 800c998:	4641      	mov	r1, r8
 800c99a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c99e:	4641      	mov	r1, r8
 800c9a0:	008a      	lsls	r2, r1, #2
 800c9a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c9a6:	f7f4 f987 	bl	8000cb8 <__aeabi_uldivmod>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4b39      	ldr	r3, [pc, #228]	; (800ca94 <UART_SetConfig+0x4e4>)
 800c9b0:	fba3 1302 	umull	r1, r3, r3, r2
 800c9b4:	095b      	lsrs	r3, r3, #5
 800c9b6:	2164      	movs	r1, #100	; 0x64
 800c9b8:	fb01 f303 	mul.w	r3, r1, r3
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	011b      	lsls	r3, r3, #4
 800c9c0:	3332      	adds	r3, #50	; 0x32
 800c9c2:	4a34      	ldr	r2, [pc, #208]	; (800ca94 <UART_SetConfig+0x4e4>)
 800c9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9c8:	095b      	lsrs	r3, r3, #5
 800c9ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9ce:	441c      	add	r4, r3
 800c9d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	673b      	str	r3, [r7, #112]	; 0x70
 800c9d8:	677a      	str	r2, [r7, #116]	; 0x74
 800c9da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c9de:	4642      	mov	r2, r8
 800c9e0:	464b      	mov	r3, r9
 800c9e2:	1891      	adds	r1, r2, r2
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	415b      	adcs	r3, r3
 800c9e8:	60fb      	str	r3, [r7, #12]
 800c9ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9ee:	4641      	mov	r1, r8
 800c9f0:	1851      	adds	r1, r2, r1
 800c9f2:	6039      	str	r1, [r7, #0]
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	414b      	adcs	r3, r1
 800c9f8:	607b      	str	r3, [r7, #4]
 800c9fa:	f04f 0200 	mov.w	r2, #0
 800c9fe:	f04f 0300 	mov.w	r3, #0
 800ca02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ca06:	4659      	mov	r1, fp
 800ca08:	00cb      	lsls	r3, r1, #3
 800ca0a:	4651      	mov	r1, sl
 800ca0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca10:	4651      	mov	r1, sl
 800ca12:	00ca      	lsls	r2, r1, #3
 800ca14:	4610      	mov	r0, r2
 800ca16:	4619      	mov	r1, r3
 800ca18:	4603      	mov	r3, r0
 800ca1a:	4642      	mov	r2, r8
 800ca1c:	189b      	adds	r3, r3, r2
 800ca1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca20:	464b      	mov	r3, r9
 800ca22:	460a      	mov	r2, r1
 800ca24:	eb42 0303 	adc.w	r3, r2, r3
 800ca28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	663b      	str	r3, [r7, #96]	; 0x60
 800ca34:	667a      	str	r2, [r7, #100]	; 0x64
 800ca36:	f04f 0200 	mov.w	r2, #0
 800ca3a:	f04f 0300 	mov.w	r3, #0
 800ca3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ca42:	4649      	mov	r1, r9
 800ca44:	008b      	lsls	r3, r1, #2
 800ca46:	4641      	mov	r1, r8
 800ca48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca4c:	4641      	mov	r1, r8
 800ca4e:	008a      	lsls	r2, r1, #2
 800ca50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ca54:	f7f4 f930 	bl	8000cb8 <__aeabi_uldivmod>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <UART_SetConfig+0x4e4>)
 800ca5e:	fba3 1302 	umull	r1, r3, r3, r2
 800ca62:	095b      	lsrs	r3, r3, #5
 800ca64:	2164      	movs	r1, #100	; 0x64
 800ca66:	fb01 f303 	mul.w	r3, r1, r3
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	011b      	lsls	r3, r3, #4
 800ca6e:	3332      	adds	r3, #50	; 0x32
 800ca70:	4a08      	ldr	r2, [pc, #32]	; (800ca94 <UART_SetConfig+0x4e4>)
 800ca72:	fba2 2303 	umull	r2, r3, r2, r3
 800ca76:	095b      	lsrs	r3, r3, #5
 800ca78:	f003 020f 	and.w	r2, r3, #15
 800ca7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4422      	add	r2, r4
 800ca84:	609a      	str	r2, [r3, #8]
}
 800ca86:	bf00      	nop
 800ca88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca92:	bf00      	nop
 800ca94:	51eb851f 	.word	0x51eb851f

0800ca98 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ca98:	b084      	sub	sp, #16
 800ca9a:	b480      	push	{r7}
 800ca9c:	b085      	sub	sp, #20
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	f107 001c 	add.w	r0, r7, #28
 800caa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800caae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cab0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cab2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cab6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800caba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cabe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cac2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	4313      	orrs	r3, r2
 800cac8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cad2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	431a      	orrs	r2, r3
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cade:	2300      	movs	r3, #0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3714      	adds	r7, #20
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	b004      	add	sp, #16
 800caec:	4770      	bx	lr

0800caee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800caee:	b480      	push	{r7}
 800caf0:	b083      	sub	sp, #12
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2203      	movs	r2, #3
 800cb36:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cb46:	b480      	push	{r7}
 800cb48:	b083      	sub	sp, #12
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f003 0303 	and.w	r3, r3, #3
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b085      	sub	sp, #20
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb80:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cb86:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cb8c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cb9c:	f023 030f 	bic.w	r3, r3, #15
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	431a      	orrs	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b083      	sub	sp, #12
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	b2db      	uxtb	r3, r3
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3314      	adds	r3, #20
 800cbde:	461a      	mov	r2, r3
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
}  
 800cbea:	4618      	mov	r0, r3
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr

0800cbf6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b085      	sub	sp, #20
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
 800cbfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc1c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cc22:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cc28:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	431a      	orrs	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cc40:	2300      	movs	r3, #0

}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b088      	sub	sp, #32
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cc5c:	2310      	movs	r3, #16
 800cc5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc60:	2340      	movs	r3, #64	; 0x40
 800cc62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc64:	2300      	movs	r3, #0
 800cc66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc6e:	f107 0308 	add.w	r3, r7, #8
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff ff74 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cc7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc7e:	2110      	movs	r1, #16
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f9d7 	bl	800d034 <SDMMC_GetCmdResp1>
 800cc86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc88:	69fb      	ldr	r3, [r7, #28]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3720      	adds	r7, #32
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b088      	sub	sp, #32
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cca0:	2311      	movs	r3, #17
 800cca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cca4:	2340      	movs	r3, #64	; 0x40
 800cca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccb2:	f107 0308 	add.w	r3, r7, #8
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff ff52 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ccbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccc2:	2111      	movs	r1, #17
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f9b5 	bl	800d034 <SDMMC_GetCmdResp1>
 800ccca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cccc:	69fb      	ldr	r3, [r7, #28]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3720      	adds	r7, #32
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b088      	sub	sp, #32
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cce4:	2312      	movs	r3, #18
 800cce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cce8:	2340      	movs	r3, #64	; 0x40
 800ccea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccec:	2300      	movs	r3, #0
 800ccee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccf6:	f107 0308 	add.w	r3, r7, #8
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f7ff ff30 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cd02:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd06:	2112      	movs	r1, #18
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f993 	bl	800d034 <SDMMC_GetCmdResp1>
 800cd0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd10:	69fb      	ldr	r3, [r7, #28]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3720      	adds	r7, #32
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b088      	sub	sp, #32
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd28:	2318      	movs	r3, #24
 800cd2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd2c:	2340      	movs	r3, #64	; 0x40
 800cd2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd30:	2300      	movs	r3, #0
 800cd32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd3a:	f107 0308 	add.w	r3, r7, #8
 800cd3e:	4619      	mov	r1, r3
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7ff ff0e 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd4a:	2118      	movs	r1, #24
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f971 	bl	800d034 <SDMMC_GetCmdResp1>
 800cd52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd54:	69fb      	ldr	r3, [r7, #28]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3720      	adds	r7, #32
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b088      	sub	sp, #32
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd6c:	2319      	movs	r3, #25
 800cd6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd70:	2340      	movs	r3, #64	; 0x40
 800cd72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd74:	2300      	movs	r3, #0
 800cd76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd7e:	f107 0308 	add.w	r3, r7, #8
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff feec 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cd8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd8e:	2119      	movs	r1, #25
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 f94f 	bl	800d034 <SDMMC_GetCmdResp1>
 800cd96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd98:	69fb      	ldr	r3, [r7, #28]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3720      	adds	r7, #32
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
	...

0800cda4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cdac:	2300      	movs	r3, #0
 800cdae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cdb0:	230c      	movs	r3, #12
 800cdb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdb4:	2340      	movs	r3, #64	; 0x40
 800cdb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdc2:	f107 0308 	add.w	r3, r7, #8
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f7ff feca 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cdce:	4a05      	ldr	r2, [pc, #20]	; (800cde4 <SDMMC_CmdStopTransfer+0x40>)
 800cdd0:	210c      	movs	r1, #12
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f92e 	bl	800d034 <SDMMC_GetCmdResp1>
 800cdd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdda:	69fb      	ldr	r3, [r7, #28]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3720      	adds	r7, #32
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	05f5e100 	.word	0x05f5e100

0800cde8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08a      	sub	sp, #40	; 0x28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cdf8:	2307      	movs	r3, #7
 800cdfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdfc:	2340      	movs	r3, #64	; 0x40
 800cdfe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce00:	2300      	movs	r3, #0
 800ce02:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce08:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce0a:	f107 0310 	add.w	r3, r7, #16
 800ce0e:	4619      	mov	r1, r3
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7ff fea6 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ce16:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce1a:	2107      	movs	r1, #7
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f909 	bl	800d034 <SDMMC_GetCmdResp1>
 800ce22:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3728      	adds	r7, #40	; 0x28
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b088      	sub	sp, #32
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce42:	2300      	movs	r3, #0
 800ce44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce4c:	f107 0308 	add.w	r3, r7, #8
 800ce50:	4619      	mov	r1, r3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff fe85 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fb23 	bl	800d4a4 <SDMMC_GetCmdError>
 800ce5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce60:	69fb      	ldr	r3, [r7, #28]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3720      	adds	r7, #32
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b088      	sub	sp, #32
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce72:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ce76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce78:	2308      	movs	r3, #8
 800ce7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce7c:	2340      	movs	r3, #64	; 0x40
 800ce7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce80:	2300      	movs	r3, #0
 800ce82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce8a:	f107 0308 	add.w	r3, r7, #8
 800ce8e:	4619      	mov	r1, r3
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7ff fe66 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fab6 	bl	800d408 <SDMMC_GetCmdResp7>
 800ce9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce9e:	69fb      	ldr	r3, [r7, #28]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3720      	adds	r7, #32
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ceb6:	2337      	movs	r3, #55	; 0x37
 800ceb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ceba:	2340      	movs	r3, #64	; 0x40
 800cebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cebe:	2300      	movs	r3, #0
 800cec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cec6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cec8:	f107 0308 	add.w	r3, r7, #8
 800cecc:	4619      	mov	r1, r3
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7ff fe47 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ced4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ced8:	2137      	movs	r1, #55	; 0x37
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 f8aa 	bl	800d034 <SDMMC_GetCmdResp1>
 800cee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cee2:	69fb      	ldr	r3, [r7, #28]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3720      	adds	r7, #32
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b088      	sub	sp, #32
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf02:	2329      	movs	r3, #41	; 0x29
 800cf04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf06:	2340      	movs	r3, #64	; 0x40
 800cf08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf14:	f107 0308 	add.w	r3, r7, #8
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff fe21 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f9bd 	bl	800d2a0 <SDMMC_GetCmdResp3>
 800cf26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf28:	69fb      	ldr	r3, [r7, #28]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3720      	adds	r7, #32
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b088      	sub	sp, #32
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf3e:	2302      	movs	r3, #2
 800cf40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cf42:	23c0      	movs	r3, #192	; 0xc0
 800cf44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf46:	2300      	movs	r3, #0
 800cf48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf50:	f107 0308 	add.w	r3, r7, #8
 800cf54:	4619      	mov	r1, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff fe03 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 f957 	bl	800d210 <SDMMC_GetCmdResp2>
 800cf62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf64:	69fb      	ldr	r3, [r7, #28]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3720      	adds	r7, #32
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b088      	sub	sp, #32
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf7c:	2309      	movs	r3, #9
 800cf7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cf80:	23c0      	movs	r3, #192	; 0xc0
 800cf82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf84:	2300      	movs	r3, #0
 800cf86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf8e:	f107 0308 	add.w	r3, r7, #8
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff fde4 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 f938 	bl	800d210 <SDMMC_GetCmdResp2>
 800cfa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfa2:	69fb      	ldr	r3, [r7, #28]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3720      	adds	r7, #32
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfbe:	2340      	movs	r3, #64	; 0x40
 800cfc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfcc:	f107 0308 	add.w	r3, r7, #8
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7ff fdc5 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	2103      	movs	r1, #3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f99d 	bl	800d31c <SDMMC_GetCmdResp6>
 800cfe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfe4:	69fb      	ldr	r3, [r7, #28]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3720      	adds	r7, #32
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b088      	sub	sp, #32
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cffc:	230d      	movs	r3, #13
 800cffe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d004:	2300      	movs	r3, #0
 800d006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d00c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d00e:	f107 0308 	add.w	r3, r7, #8
 800d012:	4619      	mov	r1, r3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7ff fda4 	bl	800cb62 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d01a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d01e:	210d      	movs	r1, #13
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f807 	bl	800d034 <SDMMC_GetCmdResp1>
 800d026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d028:	69fb      	ldr	r3, [r7, #28]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3720      	adds	r7, #32
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
	...

0800d034 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b088      	sub	sp, #32
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	460b      	mov	r3, r1
 800d03e:	607a      	str	r2, [r7, #4]
 800d040:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d042:	4b70      	ldr	r3, [pc, #448]	; (800d204 <SDMMC_GetCmdResp1+0x1d0>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a70      	ldr	r2, [pc, #448]	; (800d208 <SDMMC_GetCmdResp1+0x1d4>)
 800d048:	fba2 2303 	umull	r2, r3, r2, r3
 800d04c:	0a5a      	lsrs	r2, r3, #9
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	fb02 f303 	mul.w	r3, r2, r3
 800d054:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	1e5a      	subs	r2, r3, #1
 800d05a:	61fa      	str	r2, [r7, #28]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d064:	e0c9      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d06a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0ef      	beq.n	800d056 <SDMMC_GetCmdResp1+0x22>
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1ea      	bne.n	800d056 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d084:	f003 0304 	and.w	r3, r3, #4
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d004      	beq.n	800d096 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2204      	movs	r2, #4
 800d090:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d092:	2304      	movs	r3, #4
 800d094:	e0b1      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d09a:	f003 0301 	and.w	r3, r3, #1
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d004      	beq.n	800d0ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e0a6      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	22c5      	movs	r2, #197	; 0xc5
 800d0b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f7ff fd7f 	bl	800cbb6 <SDIO_GetCommandResponse>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	7afb      	ldrb	r3, [r7, #11]
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d001      	beq.n	800d0c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e099      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	68f8      	ldr	r0, [r7, #12]
 800d0ca:	f7ff fd81 	bl	800cbd0 <SDIO_GetResponse>
 800d0ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	4b4e      	ldr	r3, [pc, #312]	; (800d20c <SDMMC_GetCmdResp1+0x1d8>)
 800d0d4:	4013      	ands	r3, r2
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e08d      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	da02      	bge.n	800d0ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d0e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0e8:	e087      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d0f4:	2340      	movs	r3, #64	; 0x40
 800d0f6:	e080      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d102:	2380      	movs	r3, #128	; 0x80
 800d104:	e079      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d110:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d114:	e071      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d124:	e069      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d134:	e061      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d144:	e059      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d154:	e051      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d002      	beq.n	800d166 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d164:	e049      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d002      	beq.n	800d176 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d170:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d174:	e041      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d002      	beq.n	800d186 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d184:	e039      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d194:	e031      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d002      	beq.n	800d1a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d1a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d1a4:	e029      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d1b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d1b4:	e021      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d1c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d1c4:	e019      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d1d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d1d4:	e011      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d1e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d1e4:	e009      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	f003 0308 	and.w	r3, r3, #8
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d002      	beq.n	800d1f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d1f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d1f4:	e001      	b.n	800d1fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d1f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3720      	adds	r7, #32
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20000010 	.word	0x20000010
 800d208:	10624dd3 	.word	0x10624dd3
 800d20c:	fdffe008 	.word	0xfdffe008

0800d210 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d218:	4b1f      	ldr	r3, [pc, #124]	; (800d298 <SDMMC_GetCmdResp2+0x88>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a1f      	ldr	r2, [pc, #124]	; (800d29c <SDMMC_GetCmdResp2+0x8c>)
 800d21e:	fba2 2303 	umull	r2, r3, r2, r3
 800d222:	0a5b      	lsrs	r3, r3, #9
 800d224:	f241 3288 	movw	r2, #5000	; 0x1388
 800d228:	fb02 f303 	mul.w	r3, r2, r3
 800d22c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	1e5a      	subs	r2, r3, #1
 800d232:	60fa      	str	r2, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d102      	bne.n	800d23e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d23c:	e026      	b.n	800d28c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d242:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0ef      	beq.n	800d22e <SDMMC_GetCmdResp2+0x1e>
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1ea      	bne.n	800d22e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25c:	f003 0304 	and.w	r3, r3, #4
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2204      	movs	r2, #4
 800d268:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d26a:	2304      	movs	r3, #4
 800d26c:	e00e      	b.n	800d28c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d272:	f003 0301 	and.w	r3, r3, #1
 800d276:	2b00      	cmp	r3, #0
 800d278:	d004      	beq.n	800d284 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2201      	movs	r2, #1
 800d27e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d280:	2301      	movs	r3, #1
 800d282:	e003      	b.n	800d28c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	22c5      	movs	r2, #197	; 0xc5
 800d288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3714      	adds	r7, #20
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	20000010 	.word	0x20000010
 800d29c:	10624dd3 	.word	0x10624dd3

0800d2a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2a8:	4b1a      	ldr	r3, [pc, #104]	; (800d314 <SDMMC_GetCmdResp3+0x74>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a1a      	ldr	r2, [pc, #104]	; (800d318 <SDMMC_GetCmdResp3+0x78>)
 800d2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b2:	0a5b      	lsrs	r3, r3, #9
 800d2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2b8:	fb02 f303 	mul.w	r3, r2, r3
 800d2bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	1e5a      	subs	r2, r3, #1
 800d2c2:	60fa      	str	r2, [r7, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d102      	bne.n	800d2ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2cc:	e01b      	b.n	800d306 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0ef      	beq.n	800d2be <SDMMC_GetCmdResp3+0x1e>
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1ea      	bne.n	800d2be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ec:	f003 0304 	and.w	r3, r3, #4
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d004      	beq.n	800d2fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2204      	movs	r2, #4
 800d2f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2fa:	2304      	movs	r3, #4
 800d2fc:	e003      	b.n	800d306 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	22c5      	movs	r2, #197	; 0xc5
 800d302:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	20000010 	.word	0x20000010
 800d318:	10624dd3 	.word	0x10624dd3

0800d31c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b088      	sub	sp, #32
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	460b      	mov	r3, r1
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d32a:	4b35      	ldr	r3, [pc, #212]	; (800d400 <SDMMC_GetCmdResp6+0xe4>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a35      	ldr	r2, [pc, #212]	; (800d404 <SDMMC_GetCmdResp6+0xe8>)
 800d330:	fba2 2303 	umull	r2, r3, r2, r3
 800d334:	0a5b      	lsrs	r3, r3, #9
 800d336:	f241 3288 	movw	r2, #5000	; 0x1388
 800d33a:	fb02 f303 	mul.w	r3, r2, r3
 800d33e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	1e5a      	subs	r2, r3, #1
 800d344:	61fa      	str	r2, [r7, #28]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d102      	bne.n	800d350 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d34a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d34e:	e052      	b.n	800d3f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d354:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d0ef      	beq.n	800d340 <SDMMC_GetCmdResp6+0x24>
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1ea      	bne.n	800d340 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d36e:	f003 0304 	and.w	r3, r3, #4
 800d372:	2b00      	cmp	r3, #0
 800d374:	d004      	beq.n	800d380 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2204      	movs	r2, #4
 800d37a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d37c:	2304      	movs	r3, #4
 800d37e:	e03a      	b.n	800d3f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d384:	f003 0301 	and.w	r3, r3, #1
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d004      	beq.n	800d396 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2201      	movs	r2, #1
 800d390:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d392:	2301      	movs	r3, #1
 800d394:	e02f      	b.n	800d3f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f7ff fc0d 	bl	800cbb6 <SDIO_GetCommandResponse>
 800d39c:	4603      	mov	r3, r0
 800d39e:	461a      	mov	r2, r3
 800d3a0:	7afb      	ldrb	r3, [r7, #11]
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d001      	beq.n	800d3aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	e025      	b.n	800d3f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	22c5      	movs	r2, #197	; 0xc5
 800d3ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f7ff fc0c 	bl	800cbd0 <SDIO_GetResponse>
 800d3b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d106      	bne.n	800d3d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	0c1b      	lsrs	r3, r3, #16
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e011      	b.n	800d3f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d3dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d3e0:	e009      	b.n	800d3f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d3ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3f0:	e001      	b.n	800d3f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d3f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3720      	adds	r7, #32
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	20000010 	.word	0x20000010
 800d404:	10624dd3 	.word	0x10624dd3

0800d408 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d410:	4b22      	ldr	r3, [pc, #136]	; (800d49c <SDMMC_GetCmdResp7+0x94>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a22      	ldr	r2, [pc, #136]	; (800d4a0 <SDMMC_GetCmdResp7+0x98>)
 800d416:	fba2 2303 	umull	r2, r3, r2, r3
 800d41a:	0a5b      	lsrs	r3, r3, #9
 800d41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d420:	fb02 f303 	mul.w	r3, r2, r3
 800d424:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	1e5a      	subs	r2, r3, #1
 800d42a:	60fa      	str	r2, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d102      	bne.n	800d436 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d434:	e02c      	b.n	800d490 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d43a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d442:	2b00      	cmp	r3, #0
 800d444:	d0ef      	beq.n	800d426 <SDMMC_GetCmdResp7+0x1e>
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1ea      	bne.n	800d426 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d454:	f003 0304 	and.w	r3, r3, #4
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d004      	beq.n	800d466 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2204      	movs	r2, #4
 800d460:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d462:	2304      	movs	r3, #4
 800d464:	e014      	b.n	800d490 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d46a:	f003 0301 	and.w	r3, r3, #1
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d004      	beq.n	800d47c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d478:	2301      	movs	r3, #1
 800d47a:	e009      	b.n	800d490 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2240      	movs	r2, #64	; 0x40
 800d48c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d48e:	2300      	movs	r3, #0
  
}
 800d490:	4618      	mov	r0, r3
 800d492:	3714      	adds	r7, #20
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	20000010 	.word	0x20000010
 800d4a0:	10624dd3 	.word	0x10624dd3

0800d4a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d4ac:	4b11      	ldr	r3, [pc, #68]	; (800d4f4 <SDMMC_GetCmdError+0x50>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a11      	ldr	r2, [pc, #68]	; (800d4f8 <SDMMC_GetCmdError+0x54>)
 800d4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d4b6:	0a5b      	lsrs	r3, r3, #9
 800d4b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4bc:	fb02 f303 	mul.w	r3, r2, r3
 800d4c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	1e5a      	subs	r2, r3, #1
 800d4c6:	60fa      	str	r2, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d102      	bne.n	800d4d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4d0:	e009      	b.n	800d4e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d0f1      	beq.n	800d4c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	22c5      	movs	r2, #197	; 0xc5
 800d4e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3714      	adds	r7, #20
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	20000010 	.word	0x20000010
 800d4f8:	10624dd3 	.word	0x10624dd3

0800d4fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d4fc:	b084      	sub	sp, #16
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b084      	sub	sp, #16
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
 800d506:	f107 001c 	add.w	r0, r7, #28
 800d50a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	2b01      	cmp	r3, #1
 800d512:	d122      	bne.n	800d55a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d53c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d105      	bne.n	800d54e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f001 fc3e 	bl	800edd0 <USB_CoreReset>
 800d554:	4603      	mov	r3, r0
 800d556:	73fb      	strb	r3, [r7, #15]
 800d558:	e01a      	b.n	800d590 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f001 fc32 	bl	800edd0 <USB_CoreReset>
 800d56c:	4603      	mov	r3, r0
 800d56e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d572:	2b00      	cmp	r3, #0
 800d574:	d106      	bne.n	800d584 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	639a      	str	r2, [r3, #56]	; 0x38
 800d582:	e005      	b.n	800d590 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	2b01      	cmp	r3, #1
 800d594:	d10b      	bne.n	800d5ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	f043 0206 	orr.w	r2, r3, #6
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	f043 0220 	orr.w	r2, r3, #32
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5ba:	b004      	add	sp, #16
 800d5bc:	4770      	bx	lr
	...

0800d5c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d165      	bne.n	800d6a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	4a41      	ldr	r2, [pc, #260]	; (800d6dc <USB_SetTurnaroundTime+0x11c>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d906      	bls.n	800d5ea <USB_SetTurnaroundTime+0x2a>
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	4a40      	ldr	r2, [pc, #256]	; (800d6e0 <USB_SetTurnaroundTime+0x120>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d202      	bcs.n	800d5ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d5e4:	230f      	movs	r3, #15
 800d5e6:	617b      	str	r3, [r7, #20]
 800d5e8:	e062      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	4a3c      	ldr	r2, [pc, #240]	; (800d6e0 <USB_SetTurnaroundTime+0x120>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d306      	bcc.n	800d600 <USB_SetTurnaroundTime+0x40>
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	4a3b      	ldr	r2, [pc, #236]	; (800d6e4 <USB_SetTurnaroundTime+0x124>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d202      	bcs.n	800d600 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d5fa:	230e      	movs	r3, #14
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	e057      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	4a38      	ldr	r2, [pc, #224]	; (800d6e4 <USB_SetTurnaroundTime+0x124>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d306      	bcc.n	800d616 <USB_SetTurnaroundTime+0x56>
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	4a37      	ldr	r2, [pc, #220]	; (800d6e8 <USB_SetTurnaroundTime+0x128>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d202      	bcs.n	800d616 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d610:	230d      	movs	r3, #13
 800d612:	617b      	str	r3, [r7, #20]
 800d614:	e04c      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	4a33      	ldr	r2, [pc, #204]	; (800d6e8 <USB_SetTurnaroundTime+0x128>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d306      	bcc.n	800d62c <USB_SetTurnaroundTime+0x6c>
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	4a32      	ldr	r2, [pc, #200]	; (800d6ec <USB_SetTurnaroundTime+0x12c>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d802      	bhi.n	800d62c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d626:	230c      	movs	r3, #12
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	e041      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	4a2f      	ldr	r2, [pc, #188]	; (800d6ec <USB_SetTurnaroundTime+0x12c>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d906      	bls.n	800d642 <USB_SetTurnaroundTime+0x82>
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	4a2e      	ldr	r2, [pc, #184]	; (800d6f0 <USB_SetTurnaroundTime+0x130>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d802      	bhi.n	800d642 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d63c:	230b      	movs	r3, #11
 800d63e:	617b      	str	r3, [r7, #20]
 800d640:	e036      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	4a2a      	ldr	r2, [pc, #168]	; (800d6f0 <USB_SetTurnaroundTime+0x130>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d906      	bls.n	800d658 <USB_SetTurnaroundTime+0x98>
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	4a29      	ldr	r2, [pc, #164]	; (800d6f4 <USB_SetTurnaroundTime+0x134>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d802      	bhi.n	800d658 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d652:	230a      	movs	r3, #10
 800d654:	617b      	str	r3, [r7, #20]
 800d656:	e02b      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	4a26      	ldr	r2, [pc, #152]	; (800d6f4 <USB_SetTurnaroundTime+0x134>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d906      	bls.n	800d66e <USB_SetTurnaroundTime+0xae>
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	4a25      	ldr	r2, [pc, #148]	; (800d6f8 <USB_SetTurnaroundTime+0x138>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d202      	bcs.n	800d66e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d668:	2309      	movs	r3, #9
 800d66a:	617b      	str	r3, [r7, #20]
 800d66c:	e020      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	4a21      	ldr	r2, [pc, #132]	; (800d6f8 <USB_SetTurnaroundTime+0x138>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d306      	bcc.n	800d684 <USB_SetTurnaroundTime+0xc4>
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	4a20      	ldr	r2, [pc, #128]	; (800d6fc <USB_SetTurnaroundTime+0x13c>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d802      	bhi.n	800d684 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d67e:	2308      	movs	r3, #8
 800d680:	617b      	str	r3, [r7, #20]
 800d682:	e015      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	4a1d      	ldr	r2, [pc, #116]	; (800d6fc <USB_SetTurnaroundTime+0x13c>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d906      	bls.n	800d69a <USB_SetTurnaroundTime+0xda>
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	4a1c      	ldr	r2, [pc, #112]	; (800d700 <USB_SetTurnaroundTime+0x140>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d202      	bcs.n	800d69a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d694:	2307      	movs	r3, #7
 800d696:	617b      	str	r3, [r7, #20]
 800d698:	e00a      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d69a:	2306      	movs	r3, #6
 800d69c:	617b      	str	r3, [r7, #20]
 800d69e:	e007      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d6a0:	79fb      	ldrb	r3, [r7, #7]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d102      	bne.n	800d6ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d6a6:	2309      	movs	r3, #9
 800d6a8:	617b      	str	r3, [r7, #20]
 800d6aa:	e001      	b.n	800d6b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d6ac:	2309      	movs	r3, #9
 800d6ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	68da      	ldr	r2, [r3, #12]
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	029b      	lsls	r3, r3, #10
 800d6c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d6c8:	431a      	orrs	r2, r3
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	371c      	adds	r7, #28
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr
 800d6dc:	00d8acbf 	.word	0x00d8acbf
 800d6e0:	00e4e1c0 	.word	0x00e4e1c0
 800d6e4:	00f42400 	.word	0x00f42400
 800d6e8:	01067380 	.word	0x01067380
 800d6ec:	011a499f 	.word	0x011a499f
 800d6f0:	01312cff 	.word	0x01312cff
 800d6f4:	014ca43f 	.word	0x014ca43f
 800d6f8:	016e3600 	.word	0x016e3600
 800d6fc:	01a6ab1f 	.word	0x01a6ab1f
 800d700:	01e84800 	.word	0x01e84800

0800d704 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	f043 0201 	orr.w	r2, r3, #1
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	370c      	adds	r7, #12
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d726:	b480      	push	{r7}
 800d728:	b083      	sub	sp, #12
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	f023 0201 	bic.w	r2, r3, #1
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	460b      	mov	r3, r1
 800d752:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d754:	2300      	movs	r3, #0
 800d756:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d764:	78fb      	ldrb	r3, [r7, #3]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d115      	bne.n	800d796 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d776:	2001      	movs	r0, #1
 800d778:	f7f6 fa68 	bl	8003c4c <HAL_Delay>
      ms++;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	3301      	adds	r3, #1
 800d780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f001 fa94 	bl	800ecb0 <USB_GetMode>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d01e      	beq.n	800d7cc <USB_SetCurrentMode+0x84>
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2b31      	cmp	r3, #49	; 0x31
 800d792:	d9f0      	bls.n	800d776 <USB_SetCurrentMode+0x2e>
 800d794:	e01a      	b.n	800d7cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d796:	78fb      	ldrb	r3, [r7, #3]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d115      	bne.n	800d7c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d7a8:	2001      	movs	r0, #1
 800d7aa:	f7f6 fa4f 	bl	8003c4c <HAL_Delay>
      ms++;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f001 fa7b 	bl	800ecb0 <USB_GetMode>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d005      	beq.n	800d7cc <USB_SetCurrentMode+0x84>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b31      	cmp	r3, #49	; 0x31
 800d7c4:	d9f0      	bls.n	800d7a8 <USB_SetCurrentMode+0x60>
 800d7c6:	e001      	b.n	800d7cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e005      	b.n	800d7d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b32      	cmp	r3, #50	; 0x32
 800d7d0:	d101      	bne.n	800d7d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e000      	b.n	800d7d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d7e0:	b084      	sub	sp, #16
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b086      	sub	sp, #24
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
 800d7ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d7ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	613b      	str	r3, [r7, #16]
 800d7fe:	e009      	b.n	800d814 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	3340      	adds	r3, #64	; 0x40
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	4413      	add	r3, r2
 800d80a:	2200      	movs	r2, #0
 800d80c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	3301      	adds	r3, #1
 800d812:	613b      	str	r3, [r7, #16]
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	2b0e      	cmp	r3, #14
 800d818:	d9f2      	bls.n	800d800 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d11c      	bne.n	800d85a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d82e:	f043 0302 	orr.w	r3, r3, #2
 800d832:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d838:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d844:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d850:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	639a      	str	r2, [r3, #56]	; 0x38
 800d858:	e00b      	b.n	800d872 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d878:	461a      	mov	r2, r3
 800d87a:	2300      	movs	r3, #0
 800d87c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d884:	4619      	mov	r1, r3
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d88c:	461a      	mov	r2, r3
 800d88e:	680b      	ldr	r3, [r1, #0]
 800d890:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d894:	2b01      	cmp	r3, #1
 800d896:	d10c      	bne.n	800d8b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d104      	bne.n	800d8a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d89e:	2100      	movs	r1, #0
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f965 	bl	800db70 <USB_SetDevSpeed>
 800d8a6:	e008      	b.n	800d8ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 f960 	bl	800db70 <USB_SetDevSpeed>
 800d8b0:	e003      	b.n	800d8ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d8b2:	2103      	movs	r1, #3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 f95b 	bl	800db70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d8ba:	2110      	movs	r1, #16
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f8f3 	bl	800daa8 <USB_FlushTxFifo>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f91f 	bl	800db10 <USB_FlushRxFifo>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d001      	beq.n	800d8dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d900:	2300      	movs	r3, #0
 800d902:	613b      	str	r3, [r7, #16]
 800d904:	e043      	b.n	800d98e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	015a      	lsls	r2, r3, #5
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	4413      	add	r3, r2
 800d90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d91c:	d118      	bne.n	800d950 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10a      	bne.n	800d93a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	015a      	lsls	r2, r3, #5
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	4413      	add	r3, r2
 800d92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d930:	461a      	mov	r2, r3
 800d932:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d936:	6013      	str	r3, [r2, #0]
 800d938:	e013      	b.n	800d962 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	015a      	lsls	r2, r3, #5
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	4413      	add	r3, r2
 800d942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d946:	461a      	mov	r2, r3
 800d948:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	e008      	b.n	800d962 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	015a      	lsls	r2, r3, #5
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	4413      	add	r3, r2
 800d958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d95c:	461a      	mov	r2, r3
 800d95e:	2300      	movs	r3, #0
 800d960:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	015a      	lsls	r2, r3, #5
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	4413      	add	r3, r2
 800d96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d96e:	461a      	mov	r2, r3
 800d970:	2300      	movs	r3, #0
 800d972:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	015a      	lsls	r2, r3, #5
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	4413      	add	r3, r2
 800d97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d980:	461a      	mov	r2, r3
 800d982:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d986:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	3301      	adds	r3, #1
 800d98c:	613b      	str	r3, [r7, #16]
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	693a      	ldr	r2, [r7, #16]
 800d992:	429a      	cmp	r2, r3
 800d994:	d3b7      	bcc.n	800d906 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d996:	2300      	movs	r3, #0
 800d998:	613b      	str	r3, [r7, #16]
 800d99a:	e043      	b.n	800da24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	015a      	lsls	r2, r3, #5
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9b2:	d118      	bne.n	800d9e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d10a      	bne.n	800d9d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	015a      	lsls	r2, r3, #5
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d9cc:	6013      	str	r3, [r2, #0]
 800d9ce:	e013      	b.n	800d9f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	015a      	lsls	r2, r3, #5
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9dc:	461a      	mov	r2, r3
 800d9de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d9e2:	6013      	str	r3, [r2, #0]
 800d9e4:	e008      	b.n	800d9f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	015a      	lsls	r2, r3, #5
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	015a      	lsls	r2, r3, #5
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	4413      	add	r3, r2
 800da00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da04:	461a      	mov	r2, r3
 800da06:	2300      	movs	r3, #0
 800da08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	015a      	lsls	r2, r3, #5
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	4413      	add	r3, r2
 800da12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da16:	461a      	mov	r2, r3
 800da18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800da1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	3301      	adds	r3, #1
 800da22:	613b      	str	r3, [r7, #16]
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d3b7      	bcc.n	800d99c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800da3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800da4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	2b00      	cmp	r3, #0
 800da52:	d105      	bne.n	800da60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	699b      	ldr	r3, [r3, #24]
 800da58:	f043 0210 	orr.w	r2, r3, #16
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	699a      	ldr	r2, [r3, #24]
 800da64:	4b0f      	ldr	r3, [pc, #60]	; (800daa4 <USB_DevInit+0x2c4>)
 800da66:	4313      	orrs	r3, r2
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800da6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d005      	beq.n	800da7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	f043 0208 	orr.w	r2, r3, #8
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800da7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da80:	2b01      	cmp	r3, #1
 800da82:	d107      	bne.n	800da94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800da8c:	f043 0304 	orr.w	r3, r3, #4
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800da94:	7dfb      	ldrb	r3, [r7, #23]
}
 800da96:	4618      	mov	r0, r3
 800da98:	3718      	adds	r7, #24
 800da9a:	46bd      	mov	sp, r7
 800da9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daa0:	b004      	add	sp, #16
 800daa2:	4770      	bx	lr
 800daa4:	803c3800 	.word	0x803c3800

0800daa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dab2:	2300      	movs	r3, #0
 800dab4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	3301      	adds	r3, #1
 800daba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	4a13      	ldr	r2, [pc, #76]	; (800db0c <USB_FlushTxFifo+0x64>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d901      	bls.n	800dac8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dac4:	2303      	movs	r3, #3
 800dac6:	e01b      	b.n	800db00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	691b      	ldr	r3, [r3, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	daf2      	bge.n	800dab6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dad0:	2300      	movs	r3, #0
 800dad2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	019b      	lsls	r3, r3, #6
 800dad8:	f043 0220 	orr.w	r2, r3, #32
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3301      	adds	r3, #1
 800dae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	4a08      	ldr	r2, [pc, #32]	; (800db0c <USB_FlushTxFifo+0x64>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d901      	bls.n	800daf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800daee:	2303      	movs	r3, #3
 800daf0:	e006      	b.n	800db00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	f003 0320 	and.w	r3, r3, #32
 800dafa:	2b20      	cmp	r3, #32
 800dafc:	d0f0      	beq.n	800dae0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	00030d40 	.word	0x00030d40

0800db10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db18:	2300      	movs	r3, #0
 800db1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3301      	adds	r3, #1
 800db20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	4a11      	ldr	r2, [pc, #68]	; (800db6c <USB_FlushRxFifo+0x5c>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d901      	bls.n	800db2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800db2a:	2303      	movs	r3, #3
 800db2c:	e018      	b.n	800db60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	691b      	ldr	r3, [r3, #16]
 800db32:	2b00      	cmp	r3, #0
 800db34:	daf2      	bge.n	800db1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800db36:	2300      	movs	r3, #0
 800db38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2210      	movs	r2, #16
 800db3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	3301      	adds	r3, #1
 800db44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	4a08      	ldr	r2, [pc, #32]	; (800db6c <USB_FlushRxFifo+0x5c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d901      	bls.n	800db52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800db4e:	2303      	movs	r3, #3
 800db50:	e006      	b.n	800db60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	f003 0310 	and.w	r3, r3, #16
 800db5a:	2b10      	cmp	r3, #16
 800db5c:	d0f0      	beq.n	800db40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3714      	adds	r7, #20
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	00030d40 	.word	0x00030d40

0800db70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	78fb      	ldrb	r3, [r7, #3]
 800db8a:	68f9      	ldr	r1, [r7, #12]
 800db8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db90:	4313      	orrs	r3, r2
 800db92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3714      	adds	r7, #20
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr

0800dba2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dba2:	b480      	push	{r7}
 800dba4:	b087      	sub	sp, #28
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	f003 0306 	and.w	r3, r3, #6
 800dbba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d102      	bne.n	800dbc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	75fb      	strb	r3, [r7, #23]
 800dbc6:	e00a      	b.n	800dbde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d002      	beq.n	800dbd4 <USB_GetDevSpeed+0x32>
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b06      	cmp	r3, #6
 800dbd2:	d102      	bne.n	800dbda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dbd4:	2302      	movs	r3, #2
 800dbd6:	75fb      	strb	r3, [r7, #23]
 800dbd8:	e001      	b.n	800dbde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800dbda:	230f      	movs	r3, #15
 800dbdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800dbde:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	371c      	adds	r7, #28
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	785b      	ldrb	r3, [r3, #1]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d13a      	bne.n	800dc7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc0e:	69da      	ldr	r2, [r3, #28]
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	f003 030f 	and.w	r3, r3, #15
 800dc18:	2101      	movs	r1, #1
 800dc1a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	68f9      	ldr	r1, [r7, #12]
 800dc22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc26:	4313      	orrs	r3, r2
 800dc28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	015a      	lsls	r2, r3, #5
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	4413      	add	r3, r2
 800dc32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d155      	bne.n	800dcec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	015a      	lsls	r2, r3, #5
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	4413      	add	r3, r2
 800dc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	791b      	ldrb	r3, [r3, #4]
 800dc5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	059b      	lsls	r3, r3, #22
 800dc62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800dc64:	4313      	orrs	r3, r2
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	0151      	lsls	r1, r2, #5
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	440a      	add	r2, r1
 800dc6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc7a:	6013      	str	r3, [r2, #0]
 800dc7c:	e036      	b.n	800dcec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc84:	69da      	ldr	r2, [r3, #28]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	f003 030f 	and.w	r3, r3, #15
 800dc8e:	2101      	movs	r1, #1
 800dc90:	fa01 f303 	lsl.w	r3, r1, r3
 800dc94:	041b      	lsls	r3, r3, #16
 800dc96:	68f9      	ldr	r1, [r7, #12]
 800dc98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	015a      	lsls	r2, r3, #5
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	4413      	add	r3, r2
 800dca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d11a      	bne.n	800dcec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	015a      	lsls	r2, r3, #5
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	791b      	ldrb	r3, [r3, #4]
 800dcd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dcd2:	430b      	orrs	r3, r1
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	0151      	lsls	r1, r2, #5
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	440a      	add	r2, r1
 800dcde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
	...

0800dcfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	785b      	ldrb	r3, [r3, #1]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d161      	bne.n	800dddc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	015a      	lsls	r2, r3, #5
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	4413      	add	r3, r2
 800dd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd2e:	d11f      	bne.n	800dd70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	015a      	lsls	r2, r3, #5
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4413      	add	r3, r2
 800dd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	0151      	lsls	r1, r2, #5
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	440a      	add	r2, r1
 800dd46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dd4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	4413      	add	r3, r2
 800dd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	0151      	lsls	r1, r2, #5
 800dd62:	68fa      	ldr	r2, [r7, #12]
 800dd64:	440a      	add	r2, r1
 800dd66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dd6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	f003 030f 	and.w	r3, r3, #15
 800dd80:	2101      	movs	r1, #1
 800dd82:	fa01 f303 	lsl.w	r3, r1, r3
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	43db      	mvns	r3, r3
 800dd8a:	68f9      	ldr	r1, [r7, #12]
 800dd8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd90:	4013      	ands	r3, r2
 800dd92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd9a:	69da      	ldr	r2, [r3, #28]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	f003 030f 	and.w	r3, r3, #15
 800dda4:	2101      	movs	r1, #1
 800dda6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	43db      	mvns	r3, r3
 800ddae:	68f9      	ldr	r1, [r7, #12]
 800ddb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddb4:	4013      	ands	r3, r2
 800ddb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	015a      	lsls	r2, r3, #5
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	0159      	lsls	r1, r3, #5
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	440b      	add	r3, r1
 800ddce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	4b35      	ldr	r3, [pc, #212]	; (800deac <USB_DeactivateEndpoint+0x1b0>)
 800ddd6:	4013      	ands	r3, r2
 800ddd8:	600b      	str	r3, [r1, #0]
 800ddda:	e060      	b.n	800de9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	015a      	lsls	r2, r3, #5
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	4413      	add	r3, r2
 800dde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddf2:	d11f      	bne.n	800de34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	015a      	lsls	r2, r3, #5
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68ba      	ldr	r2, [r7, #8]
 800de04:	0151      	lsls	r1, r2, #5
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	440a      	add	r2, r1
 800de0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	015a      	lsls	r2, r3, #5
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	4413      	add	r3, r2
 800de1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68ba      	ldr	r2, [r7, #8]
 800de24:	0151      	lsls	r1, r2, #5
 800de26:	68fa      	ldr	r2, [r7, #12]
 800de28:	440a      	add	r2, r1
 800de2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	f003 030f 	and.w	r3, r3, #15
 800de44:	2101      	movs	r1, #1
 800de46:	fa01 f303 	lsl.w	r3, r1, r3
 800de4a:	041b      	lsls	r3, r3, #16
 800de4c:	43db      	mvns	r3, r3
 800de4e:	68f9      	ldr	r1, [r7, #12]
 800de50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de54:	4013      	ands	r3, r2
 800de56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	f003 030f 	and.w	r3, r3, #15
 800de68:	2101      	movs	r1, #1
 800de6a:	fa01 f303 	lsl.w	r3, r1, r3
 800de6e:	041b      	lsls	r3, r3, #16
 800de70:	43db      	mvns	r3, r3
 800de72:	68f9      	ldr	r1, [r7, #12]
 800de74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de78:	4013      	ands	r3, r2
 800de7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	015a      	lsls	r2, r3, #5
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	4413      	add	r3, r2
 800de84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	0159      	lsls	r1, r3, #5
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	440b      	add	r3, r1
 800de92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de96:	4619      	mov	r1, r3
 800de98:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <USB_DeactivateEndpoint+0x1b4>)
 800de9a:	4013      	ands	r3, r2
 800de9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	ec337800 	.word	0xec337800
 800deb0:	eff37800 	.word	0xeff37800

0800deb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08a      	sub	sp, #40	; 0x28
 800deb8:	af02      	add	r7, sp, #8
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	4613      	mov	r3, r2
 800dec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	785b      	ldrb	r3, [r3, #1]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	f040 815c 	bne.w	800e18e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	699b      	ldr	r3, [r3, #24]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d132      	bne.n	800df44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	015a      	lsls	r2, r3, #5
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	4413      	add	r3, r2
 800dee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	69ba      	ldr	r2, [r7, #24]
 800deee:	0151      	lsls	r1, r2, #5
 800def0:	69fa      	ldr	r2, [r7, #28]
 800def2:	440a      	add	r2, r1
 800def4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800def8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800defc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	015a      	lsls	r2, r3, #5
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	4413      	add	r3, r2
 800df0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	69ba      	ldr	r2, [r7, #24]
 800df12:	0151      	lsls	r1, r2, #5
 800df14:	69fa      	ldr	r2, [r7, #28]
 800df16:	440a      	add	r2, r1
 800df18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	015a      	lsls	r2, r3, #5
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	4413      	add	r3, r2
 800df2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	69ba      	ldr	r2, [r7, #24]
 800df32:	0151      	lsls	r1, r2, #5
 800df34:	69fa      	ldr	r2, [r7, #28]
 800df36:	440a      	add	r2, r1
 800df38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df3c:	0cdb      	lsrs	r3, r3, #19
 800df3e:	04db      	lsls	r3, r3, #19
 800df40:	6113      	str	r3, [r2, #16]
 800df42:	e074      	b.n	800e02e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	015a      	lsls	r2, r3, #5
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	4413      	add	r3, r2
 800df4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	69ba      	ldr	r2, [r7, #24]
 800df54:	0151      	lsls	r1, r2, #5
 800df56:	69fa      	ldr	r2, [r7, #28]
 800df58:	440a      	add	r2, r1
 800df5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df5e:	0cdb      	lsrs	r3, r3, #19
 800df60:	04db      	lsls	r3, r3, #19
 800df62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	015a      	lsls	r2, r3, #5
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	4413      	add	r3, r2
 800df6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	69ba      	ldr	r2, [r7, #24]
 800df74:	0151      	lsls	r1, r2, #5
 800df76:	69fa      	ldr	r2, [r7, #28]
 800df78:	440a      	add	r2, r1
 800df7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800df82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800df86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	015a      	lsls	r2, r3, #5
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	4413      	add	r3, r2
 800df90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6999      	ldr	r1, [r3, #24]
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	440b      	add	r3, r1
 800dfa0:	1e59      	subs	r1, r3, #1
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	fbb1 f3f3 	udiv	r3, r1, r3
 800dfaa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800dfac:	4b9d      	ldr	r3, [pc, #628]	; (800e224 <USB_EPStartXfer+0x370>)
 800dfae:	400b      	ands	r3, r1
 800dfb0:	69b9      	ldr	r1, [r7, #24]
 800dfb2:	0148      	lsls	r0, r1, #5
 800dfb4:	69f9      	ldr	r1, [r7, #28]
 800dfb6:	4401      	add	r1, r0
 800dfb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	015a      	lsls	r2, r3, #5
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	4413      	add	r3, r2
 800dfc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfcc:	691a      	ldr	r2, [r3, #16]
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	699b      	ldr	r3, [r3, #24]
 800dfd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfd6:	69b9      	ldr	r1, [r7, #24]
 800dfd8:	0148      	lsls	r0, r1, #5
 800dfda:	69f9      	ldr	r1, [r7, #28]
 800dfdc:	4401      	add	r1, r0
 800dfde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	791b      	ldrb	r3, [r3, #4]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d11f      	bne.n	800e02e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	015a      	lsls	r2, r3, #5
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	4413      	add	r3, r2
 800dff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffa:	691b      	ldr	r3, [r3, #16]
 800dffc:	69ba      	ldr	r2, [r7, #24]
 800dffe:	0151      	lsls	r1, r2, #5
 800e000:	69fa      	ldr	r2, [r7, #28]
 800e002:	440a      	add	r2, r1
 800e004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e008:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e00c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	015a      	lsls	r2, r3, #5
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	4413      	add	r3, r2
 800e016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	69ba      	ldr	r2, [r7, #24]
 800e01e:	0151      	lsls	r1, r2, #5
 800e020:	69fa      	ldr	r2, [r7, #28]
 800e022:	440a      	add	r2, r1
 800e024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e02c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e02e:	79fb      	ldrb	r3, [r7, #7]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d14b      	bne.n	800e0cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	695b      	ldr	r3, [r3, #20]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d009      	beq.n	800e050 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	015a      	lsls	r2, r3, #5
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	4413      	add	r3, r2
 800e044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e048:	461a      	mov	r2, r3
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	695b      	ldr	r3, [r3, #20]
 800e04e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	791b      	ldrb	r3, [r3, #4]
 800e054:	2b01      	cmp	r3, #1
 800e056:	d128      	bne.n	800e0aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e064:	2b00      	cmp	r3, #0
 800e066:	d110      	bne.n	800e08a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	015a      	lsls	r2, r3, #5
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	4413      	add	r3, r2
 800e070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	69ba      	ldr	r2, [r7, #24]
 800e078:	0151      	lsls	r1, r2, #5
 800e07a:	69fa      	ldr	r2, [r7, #28]
 800e07c:	440a      	add	r2, r1
 800e07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	e00f      	b.n	800e0aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	015a      	lsls	r2, r3, #5
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	4413      	add	r3, r2
 800e092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	69ba      	ldr	r2, [r7, #24]
 800e09a:	0151      	lsls	r1, r2, #5
 800e09c:	69fa      	ldr	r2, [r7, #28]
 800e09e:	440a      	add	r2, r1
 800e0a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	015a      	lsls	r2, r3, #5
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69ba      	ldr	r2, [r7, #24]
 800e0ba:	0151      	lsls	r1, r2, #5
 800e0bc:	69fa      	ldr	r2, [r7, #28]
 800e0be:	440a      	add	r2, r1
 800e0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0c8:	6013      	str	r3, [r2, #0]
 800e0ca:	e133      	b.n	800e334 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	015a      	lsls	r2, r3, #5
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	4413      	add	r3, r2
 800e0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	69ba      	ldr	r2, [r7, #24]
 800e0dc:	0151      	lsls	r1, r2, #5
 800e0de:	69fa      	ldr	r2, [r7, #28]
 800e0e0:	440a      	add	r2, r1
 800e0e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e0e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e0ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	791b      	ldrb	r3, [r3, #4]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d015      	beq.n	800e120 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f000 811b 	beq.w	800e334 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	f003 030f 	and.w	r3, r3, #15
 800e10e:	2101      	movs	r1, #1
 800e110:	fa01 f303 	lsl.w	r3, r1, r3
 800e114:	69f9      	ldr	r1, [r7, #28]
 800e116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e11a:	4313      	orrs	r3, r2
 800e11c:	634b      	str	r3, [r1, #52]	; 0x34
 800e11e:	e109      	b.n	800e334 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e120:	69fb      	ldr	r3, [r7, #28]
 800e122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d110      	bne.n	800e152 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	015a      	lsls	r2, r3, #5
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	4413      	add	r3, r2
 800e138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	69ba      	ldr	r2, [r7, #24]
 800e140:	0151      	lsls	r1, r2, #5
 800e142:	69fa      	ldr	r2, [r7, #28]
 800e144:	440a      	add	r2, r1
 800e146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e14a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e14e:	6013      	str	r3, [r2, #0]
 800e150:	e00f      	b.n	800e172 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	015a      	lsls	r2, r3, #5
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	4413      	add	r3, r2
 800e15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	69ba      	ldr	r2, [r7, #24]
 800e162:	0151      	lsls	r1, r2, #5
 800e164:	69fa      	ldr	r2, [r7, #28]
 800e166:	440a      	add	r2, r1
 800e168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e16c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e170:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	6919      	ldr	r1, [r3, #16]
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	781a      	ldrb	r2, [r3, #0]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	699b      	ldr	r3, [r3, #24]
 800e17e:	b298      	uxth	r0, r3
 800e180:	79fb      	ldrb	r3, [r7, #7]
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	4603      	mov	r3, r0
 800e186:	68f8      	ldr	r0, [r7, #12]
 800e188:	f000 fade 	bl	800e748 <USB_WritePacket>
 800e18c:	e0d2      	b.n	800e334 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	015a      	lsls	r2, r3, #5
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	4413      	add	r3, r2
 800e196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e19a:	691b      	ldr	r3, [r3, #16]
 800e19c:	69ba      	ldr	r2, [r7, #24]
 800e19e:	0151      	lsls	r1, r2, #5
 800e1a0:	69fa      	ldr	r2, [r7, #28]
 800e1a2:	440a      	add	r2, r1
 800e1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1a8:	0cdb      	lsrs	r3, r3, #19
 800e1aa:	04db      	lsls	r3, r3, #19
 800e1ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	015a      	lsls	r2, r3, #5
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	69ba      	ldr	r2, [r7, #24]
 800e1be:	0151      	lsls	r1, r2, #5
 800e1c0:	69fa      	ldr	r2, [r7, #28]
 800e1c2:	440a      	add	r2, r1
 800e1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e1cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e1d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	699b      	ldr	r3, [r3, #24]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d126      	bne.n	800e228 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	015a      	lsls	r2, r3, #5
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1e6:	691a      	ldr	r2, [r3, #16]
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e1f0:	69b9      	ldr	r1, [r7, #24]
 800e1f2:	0148      	lsls	r0, r1, #5
 800e1f4:	69f9      	ldr	r1, [r7, #28]
 800e1f6:	4401      	add	r1, r0
 800e1f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	015a      	lsls	r2, r3, #5
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	4413      	add	r3, r2
 800e208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	69ba      	ldr	r2, [r7, #24]
 800e210:	0151      	lsls	r1, r2, #5
 800e212:	69fa      	ldr	r2, [r7, #28]
 800e214:	440a      	add	r2, r1
 800e216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e21a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e21e:	6113      	str	r3, [r2, #16]
 800e220:	e03a      	b.n	800e298 <USB_EPStartXfer+0x3e4>
 800e222:	bf00      	nop
 800e224:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	699a      	ldr	r2, [r3, #24]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	4413      	add	r3, r2
 800e232:	1e5a      	subs	r2, r3, #1
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	fbb2 f3f3 	udiv	r3, r2, r3
 800e23c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	68db      	ldr	r3, [r3, #12]
 800e242:	8afa      	ldrh	r2, [r7, #22]
 800e244:	fb03 f202 	mul.w	r2, r3, r2
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	015a      	lsls	r2, r3, #5
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	4413      	add	r3, r2
 800e254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e258:	691a      	ldr	r2, [r3, #16]
 800e25a:	8afb      	ldrh	r3, [r7, #22]
 800e25c:	04d9      	lsls	r1, r3, #19
 800e25e:	4b38      	ldr	r3, [pc, #224]	; (800e340 <USB_EPStartXfer+0x48c>)
 800e260:	400b      	ands	r3, r1
 800e262:	69b9      	ldr	r1, [r7, #24]
 800e264:	0148      	lsls	r0, r1, #5
 800e266:	69f9      	ldr	r1, [r7, #28]
 800e268:	4401      	add	r1, r0
 800e26a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e26e:	4313      	orrs	r3, r2
 800e270:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	015a      	lsls	r2, r3, #5
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	4413      	add	r3, r2
 800e27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e27e:	691a      	ldr	r2, [r3, #16]
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	69db      	ldr	r3, [r3, #28]
 800e284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e288:	69b9      	ldr	r1, [r7, #24]
 800e28a:	0148      	lsls	r0, r1, #5
 800e28c:	69f9      	ldr	r1, [r7, #28]
 800e28e:	4401      	add	r1, r0
 800e290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e294:	4313      	orrs	r3, r2
 800e296:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e298:	79fb      	ldrb	r3, [r7, #7]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d10d      	bne.n	800e2ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d009      	beq.n	800e2ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	6919      	ldr	r1, [r3, #16]
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	015a      	lsls	r2, r3, #5
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2b6:	460a      	mov	r2, r1
 800e2b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	791b      	ldrb	r3, [r3, #4]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d128      	bne.n	800e314 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d110      	bne.n	800e2f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	015a      	lsls	r2, r3, #5
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	4413      	add	r3, r2
 800e2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	69ba      	ldr	r2, [r7, #24]
 800e2e2:	0151      	lsls	r1, r2, #5
 800e2e4:	69fa      	ldr	r2, [r7, #28]
 800e2e6:	440a      	add	r2, r1
 800e2e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e2f0:	6013      	str	r3, [r2, #0]
 800e2f2:	e00f      	b.n	800e314 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	015a      	lsls	r2, r3, #5
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	69ba      	ldr	r2, [r7, #24]
 800e304:	0151      	lsls	r1, r2, #5
 800e306:	69fa      	ldr	r2, [r7, #28]
 800e308:	440a      	add	r2, r1
 800e30a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e30e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e312:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	015a      	lsls	r2, r3, #5
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	4413      	add	r3, r2
 800e31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	69ba      	ldr	r2, [r7, #24]
 800e324:	0151      	lsls	r1, r2, #5
 800e326:	69fa      	ldr	r2, [r7, #28]
 800e328:	440a      	add	r2, r1
 800e32a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e32e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	3720      	adds	r7, #32
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	1ff80000 	.word	0x1ff80000

0800e344 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e344:	b480      	push	{r7}
 800e346:	b087      	sub	sp, #28
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60f8      	str	r0, [r7, #12]
 800e34c:	60b9      	str	r1, [r7, #8]
 800e34e:	4613      	mov	r3, r2
 800e350:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	785b      	ldrb	r3, [r3, #1]
 800e360:	2b01      	cmp	r3, #1
 800e362:	f040 80ce 	bne.w	800e502 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	699b      	ldr	r3, [r3, #24]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d132      	bne.n	800e3d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	015a      	lsls	r2, r3, #5
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	4413      	add	r3, r2
 800e376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e37a:	691b      	ldr	r3, [r3, #16]
 800e37c:	693a      	ldr	r2, [r7, #16]
 800e37e:	0151      	lsls	r1, r2, #5
 800e380:	697a      	ldr	r2, [r7, #20]
 800e382:	440a      	add	r2, r1
 800e384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e388:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e38c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e390:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	015a      	lsls	r2, r3, #5
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	4413      	add	r3, r2
 800e39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	693a      	ldr	r2, [r7, #16]
 800e3a2:	0151      	lsls	r1, r2, #5
 800e3a4:	697a      	ldr	r2, [r7, #20]
 800e3a6:	440a      	add	r2, r1
 800e3a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	015a      	lsls	r2, r3, #5
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3be:	691b      	ldr	r3, [r3, #16]
 800e3c0:	693a      	ldr	r2, [r7, #16]
 800e3c2:	0151      	lsls	r1, r2, #5
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	440a      	add	r2, r1
 800e3c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3cc:	0cdb      	lsrs	r3, r3, #19
 800e3ce:	04db      	lsls	r3, r3, #19
 800e3d0:	6113      	str	r3, [r2, #16]
 800e3d2:	e04e      	b.n	800e472 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	015a      	lsls	r2, r3, #5
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	693a      	ldr	r2, [r7, #16]
 800e3e4:	0151      	lsls	r1, r2, #5
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	440a      	add	r2, r1
 800e3ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3ee:	0cdb      	lsrs	r3, r3, #19
 800e3f0:	04db      	lsls	r3, r3, #19
 800e3f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	015a      	lsls	r2, r3, #5
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	693a      	ldr	r2, [r7, #16]
 800e404:	0151      	lsls	r1, r2, #5
 800e406:	697a      	ldr	r2, [r7, #20]
 800e408:	440a      	add	r2, r1
 800e40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e40e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e412:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e416:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	699a      	ldr	r2, [r3, #24]
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	429a      	cmp	r2, r3
 800e422:	d903      	bls.n	800e42c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	68da      	ldr	r2, [r3, #12]
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	015a      	lsls	r2, r3, #5
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	4413      	add	r3, r2
 800e434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	693a      	ldr	r2, [r7, #16]
 800e43c:	0151      	lsls	r1, r2, #5
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	440a      	add	r2, r1
 800e442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e44a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	015a      	lsls	r2, r3, #5
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	4413      	add	r3, r2
 800e454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e458:	691a      	ldr	r2, [r3, #16]
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e462:	6939      	ldr	r1, [r7, #16]
 800e464:	0148      	lsls	r0, r1, #5
 800e466:	6979      	ldr	r1, [r7, #20]
 800e468:	4401      	add	r1, r0
 800e46a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e46e:	4313      	orrs	r3, r2
 800e470:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e472:	79fb      	ldrb	r3, [r7, #7]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d11e      	bne.n	800e4b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	695b      	ldr	r3, [r3, #20]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d009      	beq.n	800e494 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	015a      	lsls	r2, r3, #5
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	4413      	add	r3, r2
 800e488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e48c:	461a      	mov	r2, r3
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	695b      	ldr	r3, [r3, #20]
 800e492:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	015a      	lsls	r2, r3, #5
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	4413      	add	r3, r2
 800e49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	693a      	ldr	r2, [r7, #16]
 800e4a4:	0151      	lsls	r1, r2, #5
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	440a      	add	r2, r1
 800e4aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e4b2:	6013      	str	r3, [r2, #0]
 800e4b4:	e097      	b.n	800e5e6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	015a      	lsls	r2, r3, #5
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	4413      	add	r3, r2
 800e4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	693a      	ldr	r2, [r7, #16]
 800e4c6:	0151      	lsls	r1, r2, #5
 800e4c8:	697a      	ldr	r2, [r7, #20]
 800e4ca:	440a      	add	r2, r1
 800e4cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e4d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	699b      	ldr	r3, [r3, #24]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f000 8083 	beq.w	800e5e6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	f003 030f 	and.w	r3, r3, #15
 800e4f0:	2101      	movs	r1, #1
 800e4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800e4f6:	6979      	ldr	r1, [r7, #20]
 800e4f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	634b      	str	r3, [r1, #52]	; 0x34
 800e500:	e071      	b.n	800e5e6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	015a      	lsls	r2, r3, #5
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	4413      	add	r3, r2
 800e50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	0151      	lsls	r1, r2, #5
 800e514:	697a      	ldr	r2, [r7, #20]
 800e516:	440a      	add	r2, r1
 800e518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e51c:	0cdb      	lsrs	r3, r3, #19
 800e51e:	04db      	lsls	r3, r3, #19
 800e520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e52e:	691b      	ldr	r3, [r3, #16]
 800e530:	693a      	ldr	r2, [r7, #16]
 800e532:	0151      	lsls	r1, r2, #5
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	440a      	add	r2, r1
 800e538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e53c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e544:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	699b      	ldr	r3, [r3, #24]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d003      	beq.n	800e556 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	68da      	ldr	r2, [r3, #12]
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	68da      	ldr	r2, [r3, #12]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	015a      	lsls	r2, r3, #5
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	4413      	add	r3, r2
 800e566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	0151      	lsls	r1, r2, #5
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	440a      	add	r2, r1
 800e574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e57c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	015a      	lsls	r2, r3, #5
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	4413      	add	r3, r2
 800e586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e58a:	691a      	ldr	r2, [r3, #16]
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e594:	6939      	ldr	r1, [r7, #16]
 800e596:	0148      	lsls	r0, r1, #5
 800e598:	6979      	ldr	r1, [r7, #20]
 800e59a:	4401      	add	r1, r0
 800e59c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e5a4:	79fb      	ldrb	r3, [r7, #7]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d10d      	bne.n	800e5c6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d009      	beq.n	800e5c6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	6919      	ldr	r1, [r3, #16]
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	015a      	lsls	r2, r3, #5
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	4413      	add	r3, r2
 800e5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c2:	460a      	mov	r2, r1
 800e5c4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	015a      	lsls	r2, r3, #5
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	693a      	ldr	r2, [r7, #16]
 800e5d6:	0151      	lsls	r1, r2, #5
 800e5d8:	697a      	ldr	r2, [r7, #20]
 800e5da:	440a      	add	r2, r1
 800e5dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e5e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	371c      	adds	r7, #28
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e5fe:	2300      	movs	r3, #0
 800e600:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800e602:	2300      	movs	r3, #0
 800e604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	785b      	ldrb	r3, [r3, #1]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d14a      	bne.n	800e6a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	015a      	lsls	r2, r3, #5
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	4413      	add	r3, r2
 800e61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e62a:	f040 8086 	bne.w	800e73a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	015a      	lsls	r2, r3, #5
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	4413      	add	r3, r2
 800e638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	7812      	ldrb	r2, [r2, #0]
 800e642:	0151      	lsls	r1, r2, #5
 800e644:	693a      	ldr	r2, [r7, #16]
 800e646:	440a      	add	r2, r1
 800e648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e64c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e650:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	015a      	lsls	r2, r3, #5
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	4413      	add	r3, r2
 800e65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	683a      	ldr	r2, [r7, #0]
 800e664:	7812      	ldrb	r2, [r2, #0]
 800e666:	0151      	lsls	r1, r2, #5
 800e668:	693a      	ldr	r2, [r7, #16]
 800e66a:	440a      	add	r2, r1
 800e66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f242 7210 	movw	r2, #10000	; 0x2710
 800e682:	4293      	cmp	r3, r2
 800e684:	d902      	bls.n	800e68c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800e686:	2301      	movs	r3, #1
 800e688:	75fb      	strb	r3, [r7, #23]
          break;
 800e68a:	e056      	b.n	800e73a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	015a      	lsls	r2, r3, #5
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	4413      	add	r3, r2
 800e696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6a4:	d0e7      	beq.n	800e676 <USB_EPStopXfer+0x82>
 800e6a6:	e048      	b.n	800e73a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	015a      	lsls	r2, r3, #5
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6c0:	d13b      	bne.n	800e73a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	015a      	lsls	r2, r3, #5
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	683a      	ldr	r2, [r7, #0]
 800e6d4:	7812      	ldrb	r2, [r2, #0]
 800e6d6:	0151      	lsls	r1, r2, #5
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	440a      	add	r2, r1
 800e6dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e6e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	015a      	lsls	r2, r3, #5
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	7812      	ldrb	r2, [r2, #0]
 800e6fa:	0151      	lsls	r1, r2, #5
 800e6fc:	693a      	ldr	r2, [r7, #16]
 800e6fe:	440a      	add	r2, r1
 800e700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e708:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	3301      	adds	r3, #1
 800e70e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f242 7210 	movw	r2, #10000	; 0x2710
 800e716:	4293      	cmp	r3, r2
 800e718:	d902      	bls.n	800e720 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	75fb      	strb	r3, [r7, #23]
          break;
 800e71e:	e00c      	b.n	800e73a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	015a      	lsls	r2, r3, #5
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	4413      	add	r3, r2
 800e72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e738:	d0e7      	beq.n	800e70a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	371c      	adds	r7, #28
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e748:	b480      	push	{r7}
 800e74a:	b089      	sub	sp, #36	; 0x24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	4611      	mov	r1, r2
 800e754:	461a      	mov	r2, r3
 800e756:	460b      	mov	r3, r1
 800e758:	71fb      	strb	r3, [r7, #7]
 800e75a:	4613      	mov	r3, r2
 800e75c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d123      	bne.n	800e7b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e76e:	88bb      	ldrh	r3, [r7, #4]
 800e770:	3303      	adds	r3, #3
 800e772:	089b      	lsrs	r3, r3, #2
 800e774:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e776:	2300      	movs	r3, #0
 800e778:	61bb      	str	r3, [r7, #24]
 800e77a:	e018      	b.n	800e7ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	031a      	lsls	r2, r3, #12
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	4413      	add	r3, r2
 800e784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e788:	461a      	mov	r2, r3
 800e78a:	69fb      	ldr	r3, [r7, #28]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	3301      	adds	r3, #1
 800e794:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	3301      	adds	r3, #1
 800e79a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	61bb      	str	r3, [r7, #24]
 800e7ae:	69ba      	ldr	r2, [r7, #24]
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d3e2      	bcc.n	800e77c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3724      	adds	r7, #36	; 0x24
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b08b      	sub	sp, #44	; 0x2c
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e7da:	88fb      	ldrh	r3, [r7, #6]
 800e7dc:	089b      	lsrs	r3, r3, #2
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e7e2:	88fb      	ldrh	r3, [r7, #6]
 800e7e4:	f003 0303 	and.w	r3, r3, #3
 800e7e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	623b      	str	r3, [r7, #32]
 800e7ee:	e014      	b.n	800e81a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fe:	3301      	adds	r3, #1
 800e800:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e804:	3301      	adds	r3, #1
 800e806:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80a:	3301      	adds	r3, #1
 800e80c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	3301      	adds	r3, #1
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e814:	6a3b      	ldr	r3, [r7, #32]
 800e816:	3301      	adds	r3, #1
 800e818:	623b      	str	r3, [r7, #32]
 800e81a:	6a3a      	ldr	r2, [r7, #32]
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d3e6      	bcc.n	800e7f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e822:	8bfb      	ldrh	r3, [r7, #30]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d01e      	beq.n	800e866 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e828:	2300      	movs	r3, #0
 800e82a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e832:	461a      	mov	r2, r3
 800e834:	f107 0310 	add.w	r3, r7, #16
 800e838:	6812      	ldr	r2, [r2, #0]
 800e83a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e83c:	693a      	ldr	r2, [r7, #16]
 800e83e:	6a3b      	ldr	r3, [r7, #32]
 800e840:	b2db      	uxtb	r3, r3
 800e842:	00db      	lsls	r3, r3, #3
 800e844:	fa22 f303 	lsr.w	r3, r2, r3
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	701a      	strb	r2, [r3, #0]
      i++;
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	3301      	adds	r3, #1
 800e852:	623b      	str	r3, [r7, #32]
      pDest++;
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	3301      	adds	r3, #1
 800e858:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e85a:	8bfb      	ldrh	r3, [r7, #30]
 800e85c:	3b01      	subs	r3, #1
 800e85e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e860:	8bfb      	ldrh	r3, [r7, #30]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1ea      	bne.n	800e83c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e868:	4618      	mov	r0, r3
 800e86a:	372c      	adds	r7, #44	; 0x2c
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	785b      	ldrb	r3, [r3, #1]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d12c      	bne.n	800e8ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	015a      	lsls	r2, r3, #5
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	4413      	add	r3, r2
 800e898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	db12      	blt.n	800e8c8 <USB_EPSetStall+0x54>
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d00f      	beq.n	800e8c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	015a      	lsls	r2, r3, #5
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	68ba      	ldr	r2, [r7, #8]
 800e8b8:	0151      	lsls	r1, r2, #5
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	440a      	add	r2, r1
 800e8be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e8c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	015a      	lsls	r2, r3, #5
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68ba      	ldr	r2, [r7, #8]
 800e8d8:	0151      	lsls	r1, r2, #5
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	440a      	add	r2, r1
 800e8de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e8e6:	6013      	str	r3, [r2, #0]
 800e8e8:	e02b      	b.n	800e942 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	015a      	lsls	r2, r3, #5
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	db12      	blt.n	800e922 <USB_EPSetStall+0xae>
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00f      	beq.n	800e922 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	015a      	lsls	r2, r3, #5
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	4413      	add	r3, r2
 800e90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	0151      	lsls	r1, r2, #5
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	440a      	add	r2, r1
 800e918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e91c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e920:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	015a      	lsls	r2, r3, #5
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	4413      	add	r3, r2
 800e92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	0151      	lsls	r1, r2, #5
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	440a      	add	r2, r1
 800e938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e93c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e940:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3714      	adds	r7, #20
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	785b      	ldrb	r3, [r3, #1]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d128      	bne.n	800e9be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	015a      	lsls	r2, r3, #5
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4413      	add	r3, r2
 800e974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68ba      	ldr	r2, [r7, #8]
 800e97c:	0151      	lsls	r1, r2, #5
 800e97e:	68fa      	ldr	r2, [r7, #12]
 800e980:	440a      	add	r2, r1
 800e982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e98a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	791b      	ldrb	r3, [r3, #4]
 800e990:	2b03      	cmp	r3, #3
 800e992:	d003      	beq.n	800e99c <USB_EPClearStall+0x4c>
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	791b      	ldrb	r3, [r3, #4]
 800e998:	2b02      	cmp	r3, #2
 800e99a:	d138      	bne.n	800ea0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	015a      	lsls	r2, r3, #5
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4413      	add	r3, r2
 800e9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	68ba      	ldr	r2, [r7, #8]
 800e9ac:	0151      	lsls	r1, r2, #5
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	440a      	add	r2, r1
 800e9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	e027      	b.n	800ea0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	015a      	lsls	r2, r3, #5
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	0151      	lsls	r1, r2, #5
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	440a      	add	r2, r1
 800e9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e9dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	791b      	ldrb	r3, [r3, #4]
 800e9e2:	2b03      	cmp	r3, #3
 800e9e4:	d003      	beq.n	800e9ee <USB_EPClearStall+0x9e>
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	791b      	ldrb	r3, [r3, #4]
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	d10f      	bne.n	800ea0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	015a      	lsls	r2, r3, #5
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	0151      	lsls	r1, r2, #5
 800ea00:	68fa      	ldr	r2, [r7, #12]
 800ea02:	440a      	add	r2, r1
 800ea04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 800ea28:	2300      	movs	r3, #0
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	e016      	b.n	800ea5c <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	015a      	lsls	r2, r3, #5
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	4413      	add	r3, r2
 800ea36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea40:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	617b      	str	r3, [r7, #20]
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	2b0e      	cmp	r3, #14
 800ea60:	d9e5      	bls.n	800ea2e <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea68:	461a      	mov	r2, r3
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea74:	461a      	mov	r2, r3
 800ea76:	2300      	movs	r3, #0
 800ea78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea80:	461a      	mov	r2, r3
 800ea82:	2300      	movs	r3, #0
 800ea84:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7ff f842 	bl	800db10 <USB_FlushRxFifo>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800ea90:	7bfb      	ldrb	r3, [r7, #15]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d001      	beq.n	800ea9a <USB_StopDevice+0x7e>
  {
    return ret;
 800ea96:	7bfb      	ldrb	r3, [r7, #15]
 800ea98:	e00b      	b.n	800eab2 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800ea9a:	2110      	movs	r1, #16
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7ff f803 	bl	800daa8 <USB_FlushTxFifo>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <USB_StopDevice+0x94>
  {
    return ret;
 800eaac:	7bfb      	ldrb	r3, [r7, #15]
 800eaae:	e000      	b.n	800eab2 <USB_StopDevice+0x96>
  }

  return ret;
 800eab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3718      	adds	r7, #24
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b085      	sub	sp, #20
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	460b      	mov	r3, r1
 800eac4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ead8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800eadc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	78fb      	ldrb	r3, [r7, #3]
 800eae8:	011b      	lsls	r3, r3, #4
 800eaea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800eaee:	68f9      	ldr	r1, [r7, #12]
 800eaf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3714      	adds	r7, #20
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb06:	b480      	push	{r7}
 800eb08:	b085      	sub	sp, #20
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eb20:	f023 0303 	bic.w	r3, r3, #3
 800eb24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb34:	f023 0302 	bic.w	r3, r3, #2
 800eb38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb3a:	2300      	movs	r3, #0
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3714      	adds	r7, #20
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eb62:	f023 0303 	bic.w	r3, r3, #3
 800eb66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb76:	f043 0302 	orr.w	r3, r3, #2
 800eb7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3714      	adds	r7, #20
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eb8a:	b480      	push	{r7}
 800eb8c:	b085      	sub	sp, #20
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	68fa      	ldr	r2, [r7, #12]
 800eb9e:	4013      	ands	r3, r2
 800eba0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eba2:	68fb      	ldr	r3, [r7, #12]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebcc:	69db      	ldr	r3, [r3, #28]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	4013      	ands	r3, r2
 800ebd2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	0c1b      	lsrs	r3, r3, #16
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3714      	adds	r7, #20
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec00:	69db      	ldr	r3, [r3, #28]
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	4013      	ands	r3, r2
 800ec06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	b29b      	uxth	r3, r3
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3714      	adds	r7, #20
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b085      	sub	sp, #20
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	460b      	mov	r3, r1
 800ec22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ec28:	78fb      	ldrb	r3, [r7, #3]
 800ec2a:	015a      	lsls	r2, r3, #5
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	4413      	add	r3, r2
 800ec30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec3e:	695b      	ldr	r3, [r3, #20]
 800ec40:	68ba      	ldr	r2, [r7, #8]
 800ec42:	4013      	ands	r3, r2
 800ec44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ec46:	68bb      	ldr	r3, [r7, #8]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3714      	adds	r7, #20
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr

0800ec54 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b087      	sub	sp, #28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec6a:	691b      	ldr	r3, [r3, #16]
 800ec6c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec76:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ec78:	78fb      	ldrb	r3, [r7, #3]
 800ec7a:	f003 030f 	and.w	r3, r3, #15
 800ec7e:	68fa      	ldr	r2, [r7, #12]
 800ec80:	fa22 f303 	lsr.w	r3, r2, r3
 800ec84:	01db      	lsls	r3, r3, #7
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ec8e:	78fb      	ldrb	r3, [r7, #3]
 800ec90:	015a      	lsls	r2, r3, #5
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	4413      	add	r3, r2
 800ec96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	693a      	ldr	r2, [r7, #16]
 800ec9e:	4013      	ands	r3, r2
 800eca0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eca2:	68bb      	ldr	r3, [r7, #8]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	371c      	adds	r7, #28
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	695b      	ldr	r3, [r3, #20]
 800ecbc:	f003 0301 	and.w	r3, r3, #1
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b085      	sub	sp, #20
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68fa      	ldr	r2, [r7, #12]
 800ece2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ece6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ecea:	f023 0307 	bic.w	r3, r3, #7
 800ecee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecf6:	685b      	ldr	r3, [r3, #4]
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ecfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ed02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3714      	adds	r7, #20
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
	...

0800ed14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b087      	sub	sp, #28
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	607a      	str	r2, [r7, #4]
 800ed20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	333c      	adds	r3, #60	; 0x3c
 800ed2a:	3304      	adds	r3, #4
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	4a26      	ldr	r2, [pc, #152]	; (800edcc <USB_EP0_OutStart+0xb8>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d90a      	bls.n	800ed4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed48:	d101      	bne.n	800ed4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	e037      	b.n	800edbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed54:	461a      	mov	r2, r3
 800ed56:	2300      	movs	r3, #0
 800ed58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed74:	691b      	ldr	r3, [r3, #16]
 800ed76:	697a      	ldr	r2, [r7, #20]
 800ed78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed7c:	f043 0318 	orr.w	r3, r3, #24
 800ed80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	697a      	ldr	r2, [r7, #20]
 800ed8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ed94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ed96:	7afb      	ldrb	r3, [r7, #11]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d10f      	bne.n	800edbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda2:	461a      	mov	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	697a      	ldr	r2, [r7, #20]
 800edb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edb6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800edba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	371c      	adds	r7, #28
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr
 800edca:	bf00      	nop
 800edcc:	4f54300a 	.word	0x4f54300a

0800edd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800edd8:	2300      	movs	r3, #0
 800edda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	3301      	adds	r3, #1
 800ede0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	4a13      	ldr	r2, [pc, #76]	; (800ee34 <USB_CoreReset+0x64>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d901      	bls.n	800edee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800edea:	2303      	movs	r3, #3
 800edec:	e01b      	b.n	800ee26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	691b      	ldr	r3, [r3, #16]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	daf2      	bge.n	800eddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800edf6:	2300      	movs	r3, #0
 800edf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	691b      	ldr	r3, [r3, #16]
 800edfe:	f043 0201 	orr.w	r2, r3, #1
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	4a09      	ldr	r2, [pc, #36]	; (800ee34 <USB_CoreReset+0x64>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d901      	bls.n	800ee18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ee14:	2303      	movs	r3, #3
 800ee16:	e006      	b.n	800ee26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	f003 0301 	and.w	r3, r3, #1
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d0f0      	beq.n	800ee06 <USB_CoreReset+0x36>

  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3714      	adds	r7, #20
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	00030d40 	.word	0x00030d40

0800ee38 <HAL_UART_RxCpltCallback>:
uint8_t flag_cli = 0;
uint8_t invoke_time = 0;
uint8_t invoke_date = 0;

// STM32 UART callback function, to pass received characters to the embedded-cli
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
	if (huart == UART_CLI_PERIPH && cliIsReady) {
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4a13      	ldr	r2, [pc, #76]	; (800ee90 <HAL_UART_RxCpltCallback+0x58>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d11f      	bne.n	800ee88 <HAL_UART_RxCpltCallback+0x50>
 800ee48:	4b12      	ldr	r3, [pc, #72]	; (800ee94 <HAL_UART_RxCpltCallback+0x5c>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d01b      	beq.n	800ee88 <HAL_UART_RxCpltCallback+0x50>
		HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer,
 800ee50:	2201      	movs	r2, #1
 800ee52:	4911      	ldr	r1, [pc, #68]	; (800ee98 <HAL_UART_RxCpltCallback+0x60>)
 800ee54:	480e      	ldr	r0, [pc, #56]	; (800ee90 <HAL_UART_RxCpltCallback+0x58>)
 800ee56:	f7fc fe37 	bl	800bac8 <HAL_UART_Receive_IT>
		UART_RX_BUFF_SIZE);

		if (!cli_other) {
 800ee5a:	4b10      	ldr	r3, [pc, #64]	; (800ee9c <HAL_UART_RxCpltCallback+0x64>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d10a      	bne.n	800ee78 <HAL_UART_RxCpltCallback+0x40>
			char c = UART_CLI_rxBuffer[0];
 800ee62:	4b0d      	ldr	r3, [pc, #52]	; (800ee98 <HAL_UART_RxCpltCallback+0x60>)
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	73fb      	strb	r3, [r7, #15]
			embeddedCliReceiveChar(cli, c);
 800ee68:	4b0d      	ldr	r3, [pc, #52]	; (800eea0 <HAL_UART_RxCpltCallback+0x68>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	7bfa      	ldrb	r2, [r7, #15]
 800ee6e:	4611      	mov	r1, r2
 800ee70:	4618      	mov	r0, r3
 800ee72:	f002 f899 	bl	8010fa8 <embeddedCliReceiveChar>
 800ee76:	e002      	b.n	800ee7e <HAL_UART_RxCpltCallback+0x46>
		} else {
			flag_cli = 1;
 800ee78:	4b0a      	ldr	r3, [pc, #40]	; (800eea4 <HAL_UART_RxCpltCallback+0x6c>)
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	701a      	strb	r2, [r3, #0]
		}

		prev_sleep_time = HAL_GetTick();
 800ee7e:	f7f4 fed9 	bl	8003c34 <HAL_GetTick>
 800ee82:	4603      	mov	r3, r0
 800ee84:	4a08      	ldr	r2, [pc, #32]	; (800eea8 <HAL_UART_RxCpltCallback+0x70>)
 800ee86:	6013      	str	r3, [r2, #0]

//	if(huart == &huart2)
//	{
//		sensirion_uart_interrupt();
//	}
}
 800ee88:	bf00      	nop
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	200019c0 	.word	0x200019c0
 800ee94:	20001a7d 	.word	0x20001a7d
 800ee98:	20001a7c 	.word	0x20001a7c
 800ee9c:	20001a7e 	.word	0x20001a7e
 800eea0:	20001a70 	.word	0x20001a70
 800eea4:	20001a7f 	.word	0x20001a7f
 800eea8:	20001718 	.word	0x20001718

0800eeac <writeCharToCli>:
 HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t *)token, tokenSize, 1000);
 }
 }
 **/

static void writeCharToCli(EmbeddedCli *embeddedCli, char c) {
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	70fb      	strb	r3, [r7, #3]
	uint8_t c_to_send = c;
 800eeb8:	78fb      	ldrb	r3, [r7, #3]
 800eeba:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(UART_CLI_PERIPH, &c_to_send, 1, 100);
 800eebc:	f107 010f 	add.w	r1, r7, #15
 800eec0:	2364      	movs	r3, #100	; 0x64
 800eec2:	2201      	movs	r2, #1
 800eec4:	4803      	ldr	r0, [pc, #12]	; (800eed4 <writeCharToCli+0x28>)
 800eec6:	f7fc fd6d 	bl	800b9a4 <HAL_UART_Transmit>
}
 800eeca:	bf00      	nop
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	200019c0 	.word	0x200019c0

0800eed8 <cli_printf>:

// Function to encapsulate the 'embeddedCliPrint()' call with print formatting arguments (act like printf(), but keeps cursor at correct location).
// The 'embeddedCliPrint()' function does already add a linebreak ('\r\n') to the end of the print statement, so no need to add it yourself.
void cli_printf(EmbeddedCli *cli, const char *format, ...) {
 800eed8:	b40e      	push	{r1, r2, r3}
 800eeda:	b580      	push	{r7, lr}
 800eedc:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800eee6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800eeea:	6018      	str	r0, [r3, #0]
	// Create a buffer to store the formatted string
	char buffer[CLI_PRINT_BUFFER_SIZE];

	// Format the string using snprintf
	va_list args;
	va_start(args, format);
 800eeec:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800eef0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800eef4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800eef8:	601a      	str	r2, [r3, #0]
	int length = vsnprintf(buffer, sizeof(buffer), format, args);
 800eefa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800eefe:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ef02:	f107 000c 	add.w	r0, r7, #12
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800ef0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ef10:	f00e fde4 	bl	801dadc <vsniprintf>
 800ef14:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	va_end(args);

	// Check if string fitted in buffer else print error to stderr
	if (length < 0) {
 800ef18:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	da08      	bge.n	800ef32 <cli_printf+0x5a>
		fprintf(stderr, "Error formatting the string\r\n");
 800ef20:	4b0c      	ldr	r3, [pc, #48]	; (800ef54 <cli_printf+0x7c>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	221d      	movs	r2, #29
 800ef28:	2101      	movs	r1, #1
 800ef2a:	480b      	ldr	r0, [pc, #44]	; (800ef58 <cli_printf+0x80>)
 800ef2c:	f00c fde0 	bl	801baf0 <fwrite>
 800ef30:	e009      	b.n	800ef46 <cli_printf+0x6e>
		return;
	}

	// Call embeddedCliPrint with the formatted string
	embeddedCliPrint(cli, buffer);
 800ef32:	f107 020c 	add.w	r2, r7, #12
 800ef36:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800ef3a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800ef3e:	4611      	mov	r1, r2
 800ef40:	6818      	ldr	r0, [r3, #0]
 800ef42:	f002 f917 	bl	8011174 <embeddedCliPrint>
}
 800ef46:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ef50:	b003      	add	sp, #12
 800ef52:	4770      	bx	lr
 800ef54:	20000164 	.word	0x20000164
 800ef58:	08020d74 	.word	0x08020d74

0800ef5c <receiveString>:

void receiveString(EmbeddedCli *cli, char *buffer, size_t bufferSize) {
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b088      	sub	sp, #32
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
	size_t index = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	61fb      	str	r3, [r7, #28]
	int i, j;
	prev_max_wait_time = HAL_GetTick();
 800ef6c:	f7f4 fe62 	bl	8003c34 <HAL_GetTick>
 800ef70:	4603      	mov	r3, r0
 800ef72:	4a5b      	ldr	r2, [pc, #364]	; (800f0e0 <receiveString+0x184>)
 800ef74:	6013      	str	r3, [r2, #0]
	while (1) {
		if (flag_cli) {
 800ef76:	4b5b      	ldr	r3, [pc, #364]	; (800f0e4 <receiveString+0x188>)
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 80a0 	beq.w	800f0c0 <receiveString+0x164>
			if (UART_CLI_rxBuffer[0] == '\x0d' || index == bufferSize - 1) {
 800ef80:	4b59      	ldr	r3, [pc, #356]	; (800f0e8 <receiveString+0x18c>)
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	2b0d      	cmp	r3, #13
 800ef86:	d004      	beq.n	800ef92 <receiveString+0x36>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	69fa      	ldr	r2, [r7, #28]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d164      	bne.n	800f05c <receiveString+0x100>
				// Exit the loop when Enter key is pressed or buffer is full
				buffer[index] = '\0'; // Null-terminate the string
 800ef92:	68ba      	ldr	r2, [r7, #8]
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	4413      	add	r3, r2
 800ef98:	2200      	movs	r2, #0
 800ef9a:	701a      	strb	r2, [r3, #0]
				flag_cli = 0;
 800ef9c:	4b51      	ldr	r3, [pc, #324]	; (800f0e4 <receiveString+0x188>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	701a      	strb	r2, [r3, #0]
				// Convert the entered string to lowercase
//				for (size_t i = 0; buffer[i]; i++) {
//					buffer[i] = tolower(buffer[i]);
//				}
				//Iterating each character and removing non alphabetical characters.
				for (i = 0; buffer[i] != '\0'; ++i) {
 800efa2:	2300      	movs	r3, #0
 800efa4:	61bb      	str	r3, [r7, #24]
 800efa6:	e052      	b.n	800f04e <receiveString+0xf2>
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
							|| buffer[i] == '_' || buffer[i] == ':'
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
							|| buffer[i] == '\0')) {
						for (j = i; buffer[j] != '\0'; ++j) {
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	617b      	str	r3, [r7, #20]
 800efac:	e00b      	b.n	800efc6 <receiveString+0x6a>
							buffer[j] = buffer[j + 1];
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	3301      	adds	r3, #1
 800efb2:	68ba      	ldr	r2, [r7, #8]
 800efb4:	441a      	add	r2, r3
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	68b9      	ldr	r1, [r7, #8]
 800efba:	440b      	add	r3, r1
 800efbc:	7812      	ldrb	r2, [r2, #0]
 800efbe:	701a      	strb	r2, [r3, #0]
						for (j = i; buffer[j] != '\0'; ++j) {
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	3301      	adds	r3, #1
 800efc4:	617b      	str	r3, [r7, #20]
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	68ba      	ldr	r2, [r7, #8]
 800efca:	4413      	add	r3, r2
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d1ed      	bne.n	800efae <receiveString+0x52>
						}
						buffer[j] = '\0';
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	68ba      	ldr	r2, [r7, #8]
 800efd6:	4413      	add	r3, r2
 800efd8:	2200      	movs	r2, #0
 800efda:	701a      	strb	r2, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	4413      	add	r3, r2
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	2b60      	cmp	r3, #96	; 0x60
 800efe6:	d905      	bls.n	800eff4 <receiveString+0x98>
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	4413      	add	r3, r2
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	2b7a      	cmp	r3, #122	; 0x7a
 800eff2:	d929      	bls.n	800f048 <receiveString+0xec>
							|| (buffer[i] >= 'A' && buffer[i] <= 'Z')
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	68ba      	ldr	r2, [r7, #8]
 800eff8:	4413      	add	r3, r2
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	2b40      	cmp	r3, #64	; 0x40
 800effe:	d905      	bls.n	800f00c <receiveString+0xb0>
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	4413      	add	r3, r2
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	2b5a      	cmp	r3, #90	; 0x5a
 800f00a:	d91d      	bls.n	800f048 <receiveString+0xec>
							|| buffer[i] == '_' || buffer[i] == ':'
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	68ba      	ldr	r2, [r7, #8]
 800f010:	4413      	add	r3, r2
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	2b5f      	cmp	r3, #95	; 0x5f
 800f016:	d017      	beq.n	800f048 <receiveString+0xec>
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	4413      	add	r3, r2
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	2b3a      	cmp	r3, #58	; 0x3a
 800f022:	d011      	beq.n	800f048 <receiveString+0xec>
							|| (buffer[i] >= 0x30 && buffer[i] <= 0x39)
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	4413      	add	r3, r2
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b2f      	cmp	r3, #47	; 0x2f
 800f02e:	d905      	bls.n	800f03c <receiveString+0xe0>
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	4413      	add	r3, r2
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	2b39      	cmp	r3, #57	; 0x39
 800f03a:	d905      	bls.n	800f048 <receiveString+0xec>
							|| buffer[i] == '\0')) {
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	4413      	add	r3, r2
 800f042:	781b      	ldrb	r3, [r3, #0]
					while (!((buffer[i] >= 'a' && buffer[i] <= 'z')
 800f044:	2b00      	cmp	r3, #0
 800f046:	d1af      	bne.n	800efa8 <receiveString+0x4c>
				for (i = 0; buffer[i] != '\0'; ++i) {
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	3301      	adds	r3, #1
 800f04c:	61bb      	str	r3, [r7, #24]
 800f04e:	69bb      	ldr	r3, [r7, #24]
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	4413      	add	r3, r2
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1c0      	bne.n	800efdc <receiveString+0x80>
					}
				}
				break;
 800f05a:	e03d      	b.n	800f0d8 <receiveString+0x17c>
			} else {
				// Check if the received character is an alphabet character
				if ((UART_CLI_rxBuffer[0] == '\b'
 800f05c:	4b22      	ldr	r3, [pc, #136]	; (800f0e8 <receiveString+0x18c>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b08      	cmp	r3, #8
 800f062:	d003      	beq.n	800f06c <receiveString+0x110>
						|| UART_CLI_rxBuffer[0] == 0x7F)) {
 800f064:	4b20      	ldr	r3, [pc, #128]	; (800f0e8 <receiveString+0x18c>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	2b7f      	cmp	r3, #127	; 0x7f
 800f06a:	d117      	bne.n	800f09c <receiveString+0x140>
					cli->writeChar(cli, '\b');
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	2108      	movs	r1, #8
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	4798      	blx	r3
					cli->writeChar(cli, ' ');
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2120      	movs	r1, #32
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	4798      	blx	r3
					cli->writeChar(cli, '\b');
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2108      	movs	r1, #8
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	4798      	blx	r3
					--index;
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	61fb      	str	r3, [r7, #28]
					buffer[index] = '\0';
 800f090:	68ba      	ldr	r2, [r7, #8]
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	4413      	add	r3, r2
 800f096:	2200      	movs	r2, #0
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	e00e      	b.n	800f0ba <receiveString+0x15e>
				} else {
					buffer[index++] = UART_CLI_rxBuffer[0];
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	1c5a      	adds	r2, r3, #1
 800f0a0:	61fa      	str	r2, [r7, #28]
 800f0a2:	68ba      	ldr	r2, [r7, #8]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	4a10      	ldr	r2, [pc, #64]	; (800f0e8 <receiveString+0x18c>)
 800f0a8:	7812      	ldrb	r2, [r2, #0]
 800f0aa:	701a      	strb	r2, [r3, #0]
					cli->writeChar(cli, UART_CLI_rxBuffer[0]);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a0d      	ldr	r2, [pc, #52]	; (800f0e8 <receiveString+0x18c>)
 800f0b2:	7812      	ldrb	r2, [r2, #0]
 800f0b4:	4611      	mov	r1, r2
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	4798      	blx	r3
				}
			}
			flag_cli = 0;
 800f0ba:	4b0a      	ldr	r3, [pc, #40]	; (800f0e4 <receiveString+0x188>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - prev_max_wait_time > max_wait_time) {
 800f0c0:	f7f4 fdb8 	bl	8003c34 <HAL_GetTick>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	4b06      	ldr	r3, [pc, #24]	; (800f0e0 <receiveString+0x184>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	1ad2      	subs	r2, r2, r3
 800f0cc:	4b07      	ldr	r3, [pc, #28]	; (800f0ec <receiveString+0x190>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d800      	bhi.n	800f0d6 <receiveString+0x17a>
		if (flag_cli) {
 800f0d4:	e74f      	b.n	800ef76 <receiveString+0x1a>
			//we break the loop if time goes above 5min
			break;
 800f0d6:	bf00      	nop
		}

	}
}
 800f0d8:	bf00      	nop
 800f0da:	3720      	adds	r7, #32
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	20001a74 	.word	0x20001a74
 800f0e4:	20001a7f 	.word	0x20001a7f
 800f0e8:	20001a7c 	.word	0x20001a7c
 800f0ec:	2000001c 	.word	0x2000001c

0800f0f0 <onClearCLI>:

void onClearCLI(EmbeddedCli *cli, char *args, void *context) {
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "\33[2J");
 800f0fc:	4903      	ldr	r1, [pc, #12]	; (800f10c <onClearCLI+0x1c>)
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f7ff feea 	bl	800eed8 <cli_printf>
}
 800f104:	bf00      	nop
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	08020d94 	.word	0x08020d94

0800f110 <debug_scd4x_PM25>:

void debug_scd4x_PM25(EmbeddedCli *cli, char *args, void *context) {
 800f110:	b580      	push	{r7, lr}
 800f112:	b092      	sub	sp, #72	; 0x48
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f11c:	4b24      	ldr	r3, [pc, #144]	; (800f1b0 <debug_scd4x_PM25+0xa0>)
 800f11e:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli, "Do you want to enable debug for scd4x and PM y/n?");
 800f120:	4924      	ldr	r1, [pc, #144]	; (800f1b4 <debug_scd4x_PM25+0xa4>)
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	f7ff fed8 	bl	800eed8 <cli_printf>

	cli_other = 1;
 800f128:	4b23      	ldr	r3, [pc, #140]	; (800f1b8 <debug_scd4x_PM25+0xa8>)
 800f12a:	2201      	movs	r2, #1
 800f12c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f12e:	4b23      	ldr	r3, [pc, #140]	; (800f1bc <debug_scd4x_PM25+0xac>)
 800f130:	2200      	movs	r2, #0
 800f132:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f134:	f107 0310 	add.w	r3, r7, #16
 800f138:	2232      	movs	r2, #50	; 0x32
 800f13a:	4619      	mov	r1, r3
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	f7ff ff0d 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f142:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f144:	f7f1 f856 	bl	80001f4 <strlen>
 800f148:	4603      	mov	r3, r0
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f150:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f152:	481b      	ldr	r0, [pc, #108]	; (800f1c0 <debug_scd4x_PM25+0xb0>)
 800f154:	f7fc fc26 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800f158:	f107 0310 	add.w	r3, r7, #16
 800f15c:	2179      	movs	r1, #121	; 0x79
 800f15e:	4618      	mov	r0, r3
 800f160:	f00d fd52 	bl	801cc08 <strchr>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d007      	beq.n	800f17a <debug_scd4x_PM25+0x6a>
		debug_scd_pm = 1;
 800f16a:	4b16      	ldr	r3, [pc, #88]	; (800f1c4 <debug_scd4x_PM25+0xb4>)
 800f16c:	2201      	movs	r2, #1
 800f16e:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug enabled");
 800f170:	4915      	ldr	r1, [pc, #84]	; (800f1c8 <debug_scd4x_PM25+0xb8>)
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f7ff feb0 	bl	800eed8 <cli_printf>
 800f178:	e00f      	b.n	800f19a <debug_scd4x_PM25+0x8a>
	} else if (strstr(buffer, "n")) {
 800f17a:	f107 0310 	add.w	r3, r7, #16
 800f17e:	216e      	movs	r1, #110	; 0x6e
 800f180:	4618      	mov	r0, r3
 800f182:	f00d fd41 	bl	801cc08 <strchr>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d006      	beq.n	800f19a <debug_scd4x_PM25+0x8a>
		debug_scd_pm = 0;
 800f18c:	4b0d      	ldr	r3, [pc, #52]	; (800f1c4 <debug_scd4x_PM25+0xb4>)
 800f18e:	2200      	movs	r2, #0
 800f190:	701a      	strb	r2, [r3, #0]
		cli_printf(cli, "Debug disabled");
 800f192:	490e      	ldr	r1, [pc, #56]	; (800f1cc <debug_scd4x_PM25+0xbc>)
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff fe9f 	bl	800eed8 <cli_printf>
	}

	flag_cli = 0;
 800f19a:	4b08      	ldr	r3, [pc, #32]	; (800f1bc <debug_scd4x_PM25+0xac>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f1a0:	4b05      	ldr	r3, [pc, #20]	; (800f1b8 <debug_scd4x_PM25+0xa8>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	701a      	strb	r2, [r3, #0]
}
 800f1a6:	bf00      	nop
 800f1a8:	3748      	adds	r7, #72	; 0x48
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	08020d9c 	.word	0x08020d9c
 800f1b4:	08020da0 	.word	0x08020da0
 800f1b8:	20001a7e 	.word	0x20001a7e
 800f1bc:	20001a7f 	.word	0x20001a7f
 800f1c0:	200019c0 	.word	0x200019c0
 800f1c4:	200014d0 	.word	0x200014d0
 800f1c8:	08020dd4 	.word	0x08020dd4
 800f1cc:	08020de4 	.word	0x08020de4

0800f1d0 <DeviceSignature>:

void DeviceSignature(EmbeddedCli *cli, char *args, void *context) {
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60f8      	str	r0, [r7, #12]
 800f1d8:	60b9      	str	r1, [r7, #8]
 800f1da:	607a      	str	r2, [r7, #4]

//	cli_printf(cli,"Device ID/Signature: TF241_0x%04X.",_ID_GetSignature());

	cli_printf(cli, "Device ID/Signature: %s.", ver_GetUid());
 800f1dc:	f7f3 f8bc 	bl	8002358 <ver_GetUid>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	4903      	ldr	r1, [pc, #12]	; (800f1f4 <DeviceSignature+0x24>)
 800f1e6:	68f8      	ldr	r0, [r7, #12]
 800f1e8:	f7ff fe76 	bl	800eed8 <cli_printf>
}
 800f1ec:	bf00      	nop
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	08020df4 	.word	0x08020df4

0800f1f8 <SetID>:

void SetID(EmbeddedCli *cli, char *args, void *context) {
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b092      	sub	sp, #72	; 0x48
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f204:	4b2d      	ldr	r3, [pc, #180]	; (800f2bc <SetID+0xc4>)
 800f206:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f208:	492d      	ldr	r1, [pc, #180]	; (800f2c0 <SetID+0xc8>)
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	f7ff fe64 	bl	800eed8 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f210:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f212:	f7f0 ffef 	bl	80001f4 <strlen>
 800f216:	4603      	mov	r3, r0
 800f218:	b29a      	uxth	r2, r3
 800f21a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f21e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f220:	4828      	ldr	r0, [pc, #160]	; (800f2c4 <SetID+0xcc>)
 800f222:	f7fc fbbf 	bl	800b9a4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the ID. Keep ID below 30 characters");
 800f226:	4928      	ldr	r1, [pc, #160]	; (800f2c8 <SetID+0xd0>)
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f7ff fe55 	bl	800eed8 <cli_printf>
	cli_other = 1;
 800f22e:	4b27      	ldr	r3, [pc, #156]	; (800f2cc <SetID+0xd4>)
 800f230:	2201      	movs	r2, #1
 800f232:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f234:	4b26      	ldr	r3, [pc, #152]	; (800f2d0 <SetID+0xd8>)
 800f236:	2200      	movs	r2, #0
 800f238:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f23a:	f107 0310 	add.w	r3, r7, #16
 800f23e:	2232      	movs	r2, #50	; 0x32
 800f240:	4619      	mov	r1, r3
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f7ff fe8a 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f248:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f24a:	f7f0 ffd3 	bl	80001f4 <strlen>
 800f24e:	4603      	mov	r3, r0
 800f250:	b29a      	uxth	r2, r3
 800f252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f258:	481a      	ldr	r0, [pc, #104]	; (800f2c4 <SetID+0xcc>)
 800f25a:	f7fc fba3 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f25e:	f107 0310 	add.w	r3, r7, #16
 800f262:	4618      	mov	r0, r3
 800f264:	f7f0 ffc6 	bl	80001f4 <strlen>
 800f268:	4603      	mov	r3, r0
 800f26a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if (len < 30) {
 800f26e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f272:	2b1d      	cmp	r3, #29
 800f274:	d814      	bhi.n	800f2a0 <SetID+0xa8>
		if (buffer[0] != '\0') {
 800f276:	7c3b      	ldrb	r3, [r7, #16]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d015      	beq.n	800f2a8 <SetID+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.id, buffer);
 800f27c:	f107 0310 	add.w	r3, r7, #16
 800f280:	4619      	mov	r1, r3
 800f282:	4814      	ldr	r0, [pc, #80]	; (800f2d4 <SetID+0xdc>)
 800f284:	f00d fccd 	bl	801cc22 <strcpy>
				set_param_flags();
 800f288:	4b13      	ldr	r3, [pc, #76]	; (800f2d8 <SetID+0xe0>)
 800f28a:	2201      	movs	r2, #1
 800f28c:	701a      	strb	r2, [r3, #0]
 800f28e:	4b13      	ldr	r3, [pc, #76]	; (800f2dc <SetID+0xe4>)
 800f290:	2201      	movs	r2, #1
 800f292:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "ID is set to: %s", _Flash_Packet.id);
 800f294:	4a0f      	ldr	r2, [pc, #60]	; (800f2d4 <SetID+0xdc>)
 800f296:	4912      	ldr	r1, [pc, #72]	; (800f2e0 <SetID+0xe8>)
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f7ff fe1d 	bl	800eed8 <cli_printf>
 800f29e:	e003      	b.n	800f2a8 <SetID+0xb0>
			}
		}
	} else {
		cli_printf(cli, "ID is too long");
 800f2a0:	4910      	ldr	r1, [pc, #64]	; (800f2e4 <SetID+0xec>)
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f7ff fe18 	bl	800eed8 <cli_printf>
	}

	flag_cli = 0;
 800f2a8:	4b09      	ldr	r3, [pc, #36]	; (800f2d0 <SetID+0xd8>)
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f2ae:	4b07      	ldr	r3, [pc, #28]	; (800f2cc <SetID+0xd4>)
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	701a      	strb	r2, [r3, #0]

}
 800f2b4:	bf00      	nop
 800f2b6:	3748      	adds	r7, #72	; 0x48
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	08020d9c 	.word	0x08020d9c
 800f2c0:	08020e10 	.word	0x08020e10
 800f2c4:	200019c0 	.word	0x200019c0
 800f2c8:	08020e48 	.word	0x08020e48
 800f2cc:	20001a7e 	.word	0x20001a7e
 800f2d0:	20001a7f 	.word	0x20001a7f
 800f2d4:	200013c9 	.word	0x200013c9
 800f2d8:	200014d1 	.word	0x200014d1
 800f2dc:	200014d2 	.word	0x200014d2
 800f2e0:	08020e70 	.word	0x08020e70
 800f2e4:	08020e84 	.word	0x08020e84

0800f2e8 <SetLocation>:

void SetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b092      	sub	sp, #72	; 0x48
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f2f4:	4b2d      	ldr	r3, [pc, #180]	; (800f3ac <SetLocation+0xc4>)
 800f2f6:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f2f8:	492d      	ldr	r1, [pc, #180]	; (800f3b0 <SetLocation+0xc8>)
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f7ff fdec 	bl	800eed8 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f300:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f302:	f7f0 ff77 	bl	80001f4 <strlen>
 800f306:	4603      	mov	r3, r0
 800f308:	b29a      	uxth	r2, r3
 800f30a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f30e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f310:	4828      	ldr	r0, [pc, #160]	; (800f3b4 <SetLocation+0xcc>)
 800f312:	f7fc fb47 	bl	800b9a4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the Location. Keep Location below 15 characters");
 800f316:	4928      	ldr	r1, [pc, #160]	; (800f3b8 <SetLocation+0xd0>)
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	f7ff fddd 	bl	800eed8 <cli_printf>
	cli_other = 1;
 800f31e:	4b27      	ldr	r3, [pc, #156]	; (800f3bc <SetLocation+0xd4>)
 800f320:	2201      	movs	r2, #1
 800f322:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f324:	4b26      	ldr	r3, [pc, #152]	; (800f3c0 <SetLocation+0xd8>)
 800f326:	2200      	movs	r2, #0
 800f328:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f32a:	f107 0310 	add.w	r3, r7, #16
 800f32e:	2232      	movs	r2, #50	; 0x32
 800f330:	4619      	mov	r1, r3
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f7ff fe12 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f338:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f33a:	f7f0 ff5b 	bl	80001f4 <strlen>
 800f33e:	4603      	mov	r3, r0
 800f340:	b29a      	uxth	r2, r3
 800f342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f348:	481a      	ldr	r0, [pc, #104]	; (800f3b4 <SetLocation+0xcc>)
 800f34a:	f7fc fb2b 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f34e:	f107 0310 	add.w	r3, r7, #16
 800f352:	4618      	mov	r0, r3
 800f354:	f7f0 ff4e 	bl	80001f4 <strlen>
 800f358:	4603      	mov	r3, r0
 800f35a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if (len < 15) {
 800f35e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f362:	2b0e      	cmp	r3, #14
 800f364:	d814      	bhi.n	800f390 <SetLocation+0xa8>
		if (buffer[0] != '\0') {
 800f366:	7c3b      	ldrb	r3, [r7, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d015      	beq.n	800f398 <SetLocation+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.location, buffer);
 800f36c:	f107 0310 	add.w	r3, r7, #16
 800f370:	4619      	mov	r1, r3
 800f372:	4814      	ldr	r0, [pc, #80]	; (800f3c4 <SetLocation+0xdc>)
 800f374:	f00d fc55 	bl	801cc22 <strcpy>
				set_param_flags();
 800f378:	4b13      	ldr	r3, [pc, #76]	; (800f3c8 <SetLocation+0xe0>)
 800f37a:	2201      	movs	r2, #1
 800f37c:	701a      	strb	r2, [r3, #0]
 800f37e:	4b13      	ldr	r3, [pc, #76]	; (800f3cc <SetLocation+0xe4>)
 800f380:	2201      	movs	r2, #1
 800f382:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "Location is set to: %s",
 800f384:	4a0f      	ldr	r2, [pc, #60]	; (800f3c4 <SetLocation+0xdc>)
 800f386:	4912      	ldr	r1, [pc, #72]	; (800f3d0 <SetLocation+0xe8>)
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f7ff fda5 	bl	800eed8 <cli_printf>
 800f38e:	e003      	b.n	800f398 <SetLocation+0xb0>
						_Flash_Packet.location);
			}
		}
	} else {
		cli_printf(cli, "Location is too long");
 800f390:	4910      	ldr	r1, [pc, #64]	; (800f3d4 <SetLocation+0xec>)
 800f392:	68f8      	ldr	r0, [r7, #12]
 800f394:	f7ff fda0 	bl	800eed8 <cli_printf>
	}

	flag_cli = 0;
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <SetLocation+0xd8>)
 800f39a:	2200      	movs	r2, #0
 800f39c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f39e:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <SetLocation+0xd4>)
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	701a      	strb	r2, [r3, #0]

}
 800f3a4:	bf00      	nop
 800f3a6:	3748      	adds	r7, #72	; 0x48
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	08020d9c 	.word	0x08020d9c
 800f3b0:	08020e10 	.word	0x08020e10
 800f3b4:	200019c0 	.word	0x200019c0
 800f3b8:	08020e94 	.word	0x08020e94
 800f3bc:	20001a7e 	.word	0x20001a7e
 800f3c0:	20001a7f 	.word	0x20001a7f
 800f3c4:	200013fb 	.word	0x200013fb
 800f3c8:	200014d1 	.word	0x200014d1
 800f3cc:	200014d2 	.word	0x200014d2
 800f3d0:	08020ec8 	.word	0x08020ec8
 800f3d4:	08020ee0 	.word	0x08020ee0

0800f3d8 <Setgroup>:
	flag_cli = 0;
	cli_other = 0;

}

void Setgroup(EmbeddedCli *cli, char *args, void *context) {
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b092      	sub	sp, #72	; 0x48
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f3e4:	4b2d      	ldr	r3, [pc, #180]	; (800f49c <Setgroup+0xc4>)
 800f3e6:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f3e8:	492d      	ldr	r1, [pc, #180]	; (800f4a0 <Setgroup+0xc8>)
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f7ff fd74 	bl	800eed8 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f3f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f3f2:	f7f0 feff 	bl	80001f4 <strlen>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f400:	4828      	ldr	r0, [pc, #160]	; (800f4a4 <Setgroup+0xcc>)
 800f402:	f7fc facf 	bl	800b9a4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Set the group. Keep name below 15 characters");
 800f406:	4928      	ldr	r1, [pc, #160]	; (800f4a8 <Setgroup+0xd0>)
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f7ff fd65 	bl	800eed8 <cli_printf>
	cli_other = 1;
 800f40e:	4b27      	ldr	r3, [pc, #156]	; (800f4ac <Setgroup+0xd4>)
 800f410:	2201      	movs	r2, #1
 800f412:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f414:	4b26      	ldr	r3, [pc, #152]	; (800f4b0 <Setgroup+0xd8>)
 800f416:	2200      	movs	r2, #0
 800f418:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f41a:	f107 0310 	add.w	r3, r7, #16
 800f41e:	2232      	movs	r2, #50	; 0x32
 800f420:	4619      	mov	r1, r3
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7ff fd9a 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f428:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f42a:	f7f0 fee3 	bl	80001f4 <strlen>
 800f42e:	4603      	mov	r3, r0
 800f430:	b29a      	uxth	r2, r3
 800f432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f438:	481a      	ldr	r0, [pc, #104]	; (800f4a4 <Setgroup+0xcc>)
 800f43a:	f7fc fab3 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f43e:	f107 0310 	add.w	r3, r7, #16
 800f442:	4618      	mov	r0, r3
 800f444:	f7f0 fed6 	bl	80001f4 <strlen>
 800f448:	4603      	mov	r3, r0
 800f44a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	if (len < 15) {
 800f44e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f452:	2b0e      	cmp	r3, #14
 800f454:	d814      	bhi.n	800f480 <Setgroup+0xa8>
		if (buffer[0] != '\0') {
 800f456:	7c3b      	ldrb	r3, [r7, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d015      	beq.n	800f488 <Setgroup+0xb0>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.group, buffer);
 800f45c:	f107 0310 	add.w	r3, r7, #16
 800f460:	4619      	mov	r1, r3
 800f462:	4814      	ldr	r0, [pc, #80]	; (800f4b4 <Setgroup+0xdc>)
 800f464:	f00d fbdd 	bl	801cc22 <strcpy>
				set_param_flags();
 800f468:	4b13      	ldr	r3, [pc, #76]	; (800f4b8 <Setgroup+0xe0>)
 800f46a:	2201      	movs	r2, #1
 800f46c:	701a      	strb	r2, [r3, #0]
 800f46e:	4b13      	ldr	r3, [pc, #76]	; (800f4bc <Setgroup+0xe4>)
 800f470:	2201      	movs	r2, #1
 800f472:	701a      	strb	r2, [r3, #0]
				cli_printf(cli, "group is set to: %s", _Flash_Packet.group);
 800f474:	4a0f      	ldr	r2, [pc, #60]	; (800f4b4 <Setgroup+0xdc>)
 800f476:	4912      	ldr	r1, [pc, #72]	; (800f4c0 <Setgroup+0xe8>)
 800f478:	68f8      	ldr	r0, [r7, #12]
 800f47a:	f7ff fd2d 	bl	800eed8 <cli_printf>
 800f47e:	e003      	b.n	800f488 <Setgroup+0xb0>
			}
		}
	} else {
		cli_printf(cli, "group is too long");
 800f480:	4910      	ldr	r1, [pc, #64]	; (800f4c4 <Setgroup+0xec>)
 800f482:	68f8      	ldr	r0, [r7, #12]
 800f484:	f7ff fd28 	bl	800eed8 <cli_printf>
	}

	flag_cli = 0;
 800f488:	4b09      	ldr	r3, [pc, #36]	; (800f4b0 <Setgroup+0xd8>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f48e:	4b07      	ldr	r3, [pc, #28]	; (800f4ac <Setgroup+0xd4>)
 800f490:	2200      	movs	r2, #0
 800f492:	701a      	strb	r2, [r3, #0]

}
 800f494:	bf00      	nop
 800f496:	3748      	adds	r7, #72	; 0x48
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	08020d9c 	.word	0x08020d9c
 800f4a0:	08020e10 	.word	0x08020e10
 800f4a4:	200019c0 	.word	0x200019c0
 800f4a8:	08020f4c 	.word	0x08020f4c
 800f4ac:	20001a7e 	.word	0x20001a7e
 800f4b0:	20001a7f 	.word	0x20001a7f
 800f4b4:	2000145f 	.word	0x2000145f
 800f4b8:	200014d1 	.word	0x200014d1
 800f4bc:	200014d2 	.word	0x200014d2
 800f4c0:	08020f7c 	.word	0x08020f7c
 800f4c4:	08020f90 	.word	0x08020f90

0800f4c8 <GetID>:

void GetID(EmbeddedCli *cli, char *args, void *context) {
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "ID: %s", _Flash_Packet.id);
 800f4d4:	4a04      	ldr	r2, [pc, #16]	; (800f4e8 <GetID+0x20>)
 800f4d6:	4905      	ldr	r1, [pc, #20]	; (800f4ec <GetID+0x24>)
 800f4d8:	68f8      	ldr	r0, [r7, #12]
 800f4da:	f7ff fcfd 	bl	800eed8 <cli_printf>
}
 800f4de:	bf00      	nop
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	200013c9 	.word	0x200013c9
 800f4ec:	08020fa4 	.word	0x08020fa4

0800f4f0 <GetLocation>:

void GetLocation(EmbeddedCli *cli, char *args, void *context) {
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Location: %s", _Flash_Packet.location);
 800f4fc:	4a04      	ldr	r2, [pc, #16]	; (800f510 <GetLocation+0x20>)
 800f4fe:	4905      	ldr	r1, [pc, #20]	; (800f514 <GetLocation+0x24>)
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f7ff fce9 	bl	800eed8 <cli_printf>

}
 800f506:	bf00      	nop
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	200013fb 	.word	0x200013fb
 800f514:	08020fac 	.word	0x08020fac

0800f518 <Getgroup>:
void Getname(EmbeddedCli *cli, char *args, void *context) {
	cli_printf(cli, "Name: %s", _Flash_Packet.name);

}

void Getgroup(EmbeddedCli *cli, char *args, void *context) {
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Group: %s", _Flash_Packet.group);
 800f524:	4a04      	ldr	r2, [pc, #16]	; (800f538 <Getgroup+0x20>)
 800f526:	4905      	ldr	r1, [pc, #20]	; (800f53c <Getgroup+0x24>)
 800f528:	68f8      	ldr	r0, [r7, #12]
 800f52a:	f7ff fcd5 	bl	800eed8 <cli_printf>

}
 800f52e:	bf00      	nop
 800f530:	3710      	adds	r7, #16
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	2000145f 	.word	0x2000145f
 800f53c:	08020fc8 	.word	0x08020fc8

0800f540 <SetDate>:

void SetDate(EmbeddedCli *cli, char *args, void *context) {
 800f540:	b580      	push	{r7, lr}
 800f542:	b09a      	sub	sp, #104	; 0x68
 800f544:	af02      	add	r7, sp, #8
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f54c:	4b26      	ldr	r3, [pc, #152]	; (800f5e8 <SetDate+0xa8>)
 800f54e:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,
 800f550:	4926      	ldr	r1, [pc, #152]	; (800f5ec <SetDate+0xac>)
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f7ff fcc0 	bl	800eed8 <cli_printf>
			"Set date in following format: day:month:year eg:(15:1:23).");
	cli_other = 1;
 800f558:	4b25      	ldr	r3, [pc, #148]	; (800f5f0 <SetDate+0xb0>)
 800f55a:	2201      	movs	r2, #1
 800f55c:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f55e:	4b25      	ldr	r3, [pc, #148]	; (800f5f4 <SetDate+0xb4>)
 800f560:	2200      	movs	r2, #0
 800f562:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f568:	2232      	movs	r2, #50	; 0x32
 800f56a:	4619      	mov	r1, r3
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f7ff fcf5 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f572:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f574:	f7f0 fe3e 	bl	80001f4 <strlen>
 800f578:	4603      	mov	r3, r0
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f580:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f582:	481d      	ldr	r0, [pc, #116]	; (800f5f8 <SetDate+0xb8>)
 800f584:	f7fc fa0e 	bl	800b9a4 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800f588:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d004      	beq.n	800f59a <SetDate+0x5a>
		Set_Date(buffer);
 800f590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f594:	4618      	mov	r0, r3
 800f596:	f002 fffd 	bl	8012594 <Set_Date>
	}
	flag_cli = 0;
 800f59a:	4b16      	ldr	r3, [pc, #88]	; (800f5f4 <SetDate+0xb4>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f5a0:	4b13      	ldr	r3, [pc, #76]	; (800f5f0 <SetDate+0xb0>)
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f5a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	4813      	ldr	r0, [pc, #76]	; (800f5fc <SetDate+0xbc>)
 800f5b0:	f7f9 feb4 	bl	800931c <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f5b4:	f107 0310 	add.w	r3, r7, #16
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	480f      	ldr	r0, [pc, #60]	; (800f5fc <SetDate+0xbc>)
 800f5be:	f7f9 fdcb 	bl	8009158 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800f5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f5cc:	4619      	mov	r1, r3
			gDate.Year);
 800f5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
	cli_printf(cli, "Set Date: %02d.%02d.%02d", gDate.Date, gDate.Month,
 800f5d2:	9300      	str	r3, [sp, #0]
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	490a      	ldr	r1, [pc, #40]	; (800f600 <SetDate+0xc0>)
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f7ff fc7d 	bl	800eed8 <cli_printf>

}
 800f5de:	bf00      	nop
 800f5e0:	3760      	adds	r7, #96	; 0x60
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	08020d9c 	.word	0x08020d9c
 800f5ec:	08020fd4 	.word	0x08020fd4
 800f5f0:	20001a7e 	.word	0x20001a7e
 800f5f4:	20001a7f 	.word	0x20001a7f
 800f5f8:	200019c0 	.word	0x200019c0
 800f5fc:	200017e4 	.word	0x200017e4
 800f600:	08021010 	.word	0x08021010

0800f604 <SetTime>:

void SetTime(EmbeddedCli *cli, char *args, void *context) {
 800f604:	b580      	push	{r7, lr}
 800f606:	b09a      	sub	sp, #104	; 0x68
 800f608:	af02      	add	r7, sp, #8
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f610:	4b26      	ldr	r3, [pc, #152]	; (800f6ac <SetTime+0xa8>)
 800f612:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli,
 800f614:	4926      	ldr	r1, [pc, #152]	; (800f6b0 <SetTime+0xac>)
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f7ff fc5e 	bl	800eed8 <cli_printf>
			"Set time in following format: hours:minutes:seconds eg:(11:15:01).");
	cli_other = 1;
 800f61c:	4b25      	ldr	r3, [pc, #148]	; (800f6b4 <SetTime+0xb0>)
 800f61e:	2201      	movs	r2, #1
 800f620:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f622:	4b25      	ldr	r3, [pc, #148]	; (800f6b8 <SetTime+0xb4>)
 800f624:	2200      	movs	r2, #0
 800f626:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f62c:	2232      	movs	r2, #50	; 0x32
 800f62e:	4619      	mov	r1, r3
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f7ff fc93 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f636:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f638:	f7f0 fddc 	bl	80001f4 <strlen>
 800f63c:	4603      	mov	r3, r0
 800f63e:	b29a      	uxth	r2, r3
 800f640:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f644:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f646:	481d      	ldr	r0, [pc, #116]	; (800f6bc <SetTime+0xb8>)
 800f648:	f7fc f9ac 	bl	800b9a4 <HAL_UART_Transmit>
			1000);
	if (buffer[0] != '\0') {
 800f64c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f650:	2b00      	cmp	r3, #0
 800f652:	d004      	beq.n	800f65e <SetTime+0x5a>
		Set_Time(buffer);
 800f654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f658:	4618      	mov	r0, r3
 800f65a:	f003 f859 	bl	8012710 <Set_Time>
	}
	flag_cli = 0;
 800f65e:	4b16      	ldr	r3, [pc, #88]	; (800f6b8 <SetTime+0xb4>)
 800f660:	2200      	movs	r2, #0
 800f662:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f664:	4b13      	ldr	r3, [pc, #76]	; (800f6b4 <SetTime+0xb0>)
 800f666:	2200      	movs	r2, #0
 800f668:	701a      	strb	r2, [r3, #0]
	set_alarm_Time = 1;
 800f66a:	4b15      	ldr	r3, [pc, #84]	; (800f6c0 <SetTime+0xbc>)
 800f66c:	2201      	movs	r2, #1
 800f66e:	701a      	strb	r2, [r3, #0]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f674:	2200      	movs	r2, #0
 800f676:	4619      	mov	r1, r3
 800f678:	4812      	ldr	r0, [pc, #72]	; (800f6c4 <SetTime+0xc0>)
 800f67a:	f7f9 fe4f 	bl	800931c <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f67e:	f107 0310 	add.w	r3, r7, #16
 800f682:	2200      	movs	r2, #0
 800f684:	4619      	mov	r1, r3
 800f686:	480f      	ldr	r0, [pc, #60]	; (800f6c4 <SetTime+0xc0>)
 800f688:	f7f9 fd66 	bl	8009158 <HAL_RTC_GetTime>
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f68c:	7c3b      	ldrb	r3, [r7, #16]
 800f68e:	461a      	mov	r2, r3
 800f690:	7c7b      	ldrb	r3, [r7, #17]
 800f692:	4619      	mov	r1, r3
			gTime.Seconds);
 800f694:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "Set Time: %02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	460b      	mov	r3, r1
 800f69a:	490b      	ldr	r1, [pc, #44]	; (800f6c8 <SetTime+0xc4>)
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f7ff fc1b 	bl	800eed8 <cli_printf>

}
 800f6a2:	bf00      	nop
 800f6a4:	3760      	adds	r7, #96	; 0x60
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	08020d9c 	.word	0x08020d9c
 800f6b0:	0802102c 	.word	0x0802102c
 800f6b4:	20001a7e 	.word	0x20001a7e
 800f6b8:	20001a7f 	.word	0x20001a7f
 800f6bc:	200019c0 	.word	0x200019c0
 800f6c0:	20000029 	.word	0x20000029
 800f6c4:	200017e4 	.word	0x200017e4
 800f6c8:	08021070 	.word	0x08021070

0800f6cc <GetDate>:

void GetDate(EmbeddedCli *cli, char *args, void *context) {
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b08c      	sub	sp, #48	; 0x30
 800f6d0:	af02      	add	r7, sp, #8
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f6d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6dc:	2200      	movs	r2, #0
 800f6de:	4619      	mov	r1, r3
 800f6e0:	480f      	ldr	r0, [pc, #60]	; (800f720 <GetDate+0x54>)
 800f6e2:	f7f9 fe1b 	bl	800931c <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f6e6:	f107 0310 	add.w	r3, r7, #16
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	480c      	ldr	r0, [pc, #48]	; (800f720 <GetDate+0x54>)
 800f6f0:	f7f9 fd32 	bl	8009158 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d.%02d.%02d", gDate.Date, gDate.Month, gDate.Year);
 800f6f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f6fe:	4619      	mov	r1, r3
 800f700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f704:	9300      	str	r3, [sp, #0]
 800f706:	460b      	mov	r3, r1
 800f708:	4906      	ldr	r1, [pc, #24]	; (800f724 <GetDate+0x58>)
 800f70a:	68f8      	ldr	r0, [r7, #12]
 800f70c:	f7ff fbe4 	bl	800eed8 <cli_printf>
	HAL_Delay(100);
 800f710:	2064      	movs	r0, #100	; 0x64
 800f712:	f7f4 fa9b 	bl	8003c4c <HAL_Delay>
}
 800f716:	bf00      	nop
 800f718:	3728      	adds	r7, #40	; 0x28
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	200017e4 	.word	0x200017e4
 800f724:	0802108c 	.word	0x0802108c

0800f728 <GetTime>:

//for some reason if you dont read date the time does not update

void GetTime(EmbeddedCli *cli, char *args, void *context) {
 800f728:	b580      	push	{r7, lr}
 800f72a:	b08c      	sub	sp, #48	; 0x30
 800f72c:	af02      	add	r7, sp, #8
 800f72e:	60f8      	str	r0, [r7, #12]
 800f730:	60b9      	str	r1, [r7, #8]
 800f732:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 800f734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f738:	2200      	movs	r2, #0
 800f73a:	4619      	mov	r1, r3
 800f73c:	480d      	ldr	r0, [pc, #52]	; (800f774 <GetTime+0x4c>)
 800f73e:	f7f9 fded 	bl	800931c <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 800f742:	f107 0310 	add.w	r3, r7, #16
 800f746:	2200      	movs	r2, #0
 800f748:	4619      	mov	r1, r3
 800f74a:	480a      	ldr	r0, [pc, #40]	; (800f774 <GetTime+0x4c>)
 800f74c:	f7f9 fd04 	bl	8009158 <HAL_RTC_GetTime>
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f750:	7c3b      	ldrb	r3, [r7, #16]
 800f752:	461a      	mov	r2, r3
 800f754:	7c7b      	ldrb	r3, [r7, #17]
 800f756:	4619      	mov	r1, r3
			gTime.Seconds);
 800f758:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes,
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	460b      	mov	r3, r1
 800f75e:	4906      	ldr	r1, [pc, #24]	; (800f778 <GetTime+0x50>)
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f7ff fbb9 	bl	800eed8 <cli_printf>
	HAL_Delay(100);
 800f766:	2064      	movs	r0, #100	; 0x64
 800f768:	f7f4 fa70 	bl	8003c4c <HAL_Delay>
}
 800f76c:	bf00      	nop
 800f76e:	3728      	adds	r7, #40	; 0x28
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	200017e4 	.word	0x200017e4
 800f778:	0802109c 	.word	0x0802109c

0800f77c <SetInterval>:

void SetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b092      	sub	sp, #72	; 0x48
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800f788:	4b54      	ldr	r3, [pc, #336]	; (800f8dc <SetInterval+0x160>)
 800f78a:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f78c:	4954      	ldr	r1, [pc, #336]	; (800f8e0 <SetInterval+0x164>)
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f7ff fba2 	bl	800eed8 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f794:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f796:	f7f0 fd2d 	bl	80001f4 <strlen>
 800f79a:	4603      	mov	r3, r0
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f7a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7a4:	484f      	ldr	r0, [pc, #316]	; (800f8e4 <SetInterval+0x168>)
 800f7a6:	f7fc f8fd 	bl	800b9a4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Enter 1 for 5min.");
 800f7aa:	494f      	ldr	r1, [pc, #316]	; (800f8e8 <SetInterval+0x16c>)
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f7ff fb93 	bl	800eed8 <cli_printf>
	cli_printf(cli, "Enter 2 for 15min.");
 800f7b2:	494e      	ldr	r1, [pc, #312]	; (800f8ec <SetInterval+0x170>)
 800f7b4:	68f8      	ldr	r0, [r7, #12]
 800f7b6:	f7ff fb8f 	bl	800eed8 <cli_printf>
	cli_printf(cli, "Enter 3 for 60min.");
 800f7ba:	494d      	ldr	r1, [pc, #308]	; (800f8f0 <SetInterval+0x174>)
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7ff fb8b 	bl	800eed8 <cli_printf>
	cli_printf(cli,
 800f7c2:	494c      	ldr	r1, [pc, #304]	; (800f8f4 <SetInterval+0x178>)
 800f7c4:	68f8      	ldr	r0, [r7, #12]
 800f7c6:	f7ff fb87 	bl	800eed8 <cli_printf>
			"Disclaimer: The battery life will be reduced if interval is reduced.");
	cli_other = 1;
 800f7ca:	4b4b      	ldr	r3, [pc, #300]	; (800f8f8 <SetInterval+0x17c>)
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f7d0:	4b4a      	ldr	r3, [pc, #296]	; (800f8fc <SetInterval+0x180>)
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f7d6:	f107 0310 	add.w	r3, r7, #16
 800f7da:	2232      	movs	r2, #50	; 0x32
 800f7dc:	4619      	mov	r1, r3
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f7ff fbbc 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f7e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f7e6:	f7f0 fd05 	bl	80001f4 <strlen>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f7f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7f4:	483b      	ldr	r0, [pc, #236]	; (800f8e4 <SetInterval+0x168>)
 800f7f6:	f7fc f8d5 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800f7fa:	f107 0310 	add.w	r3, r7, #16
 800f7fe:	2131      	movs	r1, #49	; 0x31
 800f800:	4618      	mov	r0, r3
 800f802:	f00d fa01 	bl	801cc08 <strchr>
 800f806:	4603      	mov	r3, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d015      	beq.n	800f838 <SetInterval+0xbc>
		_Flash_Packet.Time_Interval = 5;
 800f80c:	4b3c      	ldr	r3, [pc, #240]	; (800f900 <SetInterval+0x184>)
 800f80e:	2200      	movs	r2, #0
 800f810:	f042 0205 	orr.w	r2, r2, #5
 800f814:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f818:	2200      	movs	r2, #0
 800f81a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f824:	2200      	movs	r2, #0
 800f826:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f82a:	4b36      	ldr	r3, [pc, #216]	; (800f904 <SetInterval+0x188>)
 800f82c:	2201      	movs	r2, #1
 800f82e:	701a      	strb	r2, [r3, #0]
 800f830:	4b35      	ldr	r3, [pc, #212]	; (800f908 <SetInterval+0x18c>)
 800f832:	2201      	movs	r2, #1
 800f834:	701a      	strb	r2, [r3, #0]
 800f836:	e03c      	b.n	800f8b2 <SetInterval+0x136>
	} else if (strstr(buffer, "2")) {
 800f838:	f107 0310 	add.w	r3, r7, #16
 800f83c:	2132      	movs	r1, #50	; 0x32
 800f83e:	4618      	mov	r0, r3
 800f840:	f00d f9e2 	bl	801cc08 <strchr>
 800f844:	4603      	mov	r3, r0
 800f846:	2b00      	cmp	r3, #0
 800f848:	d015      	beq.n	800f876 <SetInterval+0xfa>
		_Flash_Packet.Time_Interval = 15;
 800f84a:	4b2d      	ldr	r3, [pc, #180]	; (800f900 <SetInterval+0x184>)
 800f84c:	2200      	movs	r2, #0
 800f84e:	f042 020f 	orr.w	r2, r2, #15
 800f852:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f856:	2200      	movs	r2, #0
 800f858:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f862:	2200      	movs	r2, #0
 800f864:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f868:	4b26      	ldr	r3, [pc, #152]	; (800f904 <SetInterval+0x188>)
 800f86a:	2201      	movs	r2, #1
 800f86c:	701a      	strb	r2, [r3, #0]
 800f86e:	4b26      	ldr	r3, [pc, #152]	; (800f908 <SetInterval+0x18c>)
 800f870:	2201      	movs	r2, #1
 800f872:	701a      	strb	r2, [r3, #0]
 800f874:	e01d      	b.n	800f8b2 <SetInterval+0x136>
	} else if (strstr(buffer, "3")) {
 800f876:	f107 0310 	add.w	r3, r7, #16
 800f87a:	2133      	movs	r1, #51	; 0x33
 800f87c:	4618      	mov	r0, r3
 800f87e:	f00d f9c3 	bl	801cc08 <strchr>
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d014      	beq.n	800f8b2 <SetInterval+0x136>
		_Flash_Packet.Time_Interval = 60;
 800f888:	4b1d      	ldr	r3, [pc, #116]	; (800f900 <SetInterval+0x184>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800f890:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800f894:	2200      	movs	r2, #0
 800f896:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800f89a:	2200      	movs	r2, #0
 800f89c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
		set_param_flags();
 800f8a6:	4b17      	ldr	r3, [pc, #92]	; (800f904 <SetInterval+0x188>)
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	701a      	strb	r2, [r3, #0]
 800f8ac:	4b16      	ldr	r3, [pc, #88]	; (800f908 <SetInterval+0x18c>)
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	701a      	strb	r2, [r3, #0]
	}

	flag_cli = 0;
 800f8b2:	4b12      	ldr	r3, [pc, #72]	; (800f8fc <SetInterval+0x180>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800f8b8:	4b0f      	ldr	r3, [pc, #60]	; (800f8f8 <SetInterval+0x17c>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "Interval is set to: %ldmin", _Flash_Packet.Time_Interval);
 800f8be:	4b10      	ldr	r3, [pc, #64]	; (800f900 <SetInterval+0x184>)
 800f8c0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	4911      	ldr	r1, [pc, #68]	; (800f90c <SetInterval+0x190>)
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f7ff fb05 	bl	800eed8 <cli_printf>
	set_alarm_Time = 1;
 800f8ce:	4b10      	ldr	r3, [pc, #64]	; (800f910 <SetInterval+0x194>)
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	701a      	strb	r2, [r3, #0]
}
 800f8d4:	bf00      	nop
 800f8d6:	3748      	adds	r7, #72	; 0x48
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	08020d9c 	.word	0x08020d9c
 800f8e0:	08020e10 	.word	0x08020e10
 800f8e4:	200019c0 	.word	0x200019c0
 800f8e8:	080210ac 	.word	0x080210ac
 800f8ec:	080210c0 	.word	0x080210c0
 800f8f0:	080210d4 	.word	0x080210d4
 800f8f4:	080210e8 	.word	0x080210e8
 800f8f8:	20001a7e 	.word	0x20001a7e
 800f8fc:	20001a7f 	.word	0x20001a7f
 800f900:	200012fc 	.word	0x200012fc
 800f904:	200014d1 	.word	0x200014d1
 800f908:	200014d2 	.word	0x200014d2
 800f90c:	08021130 	.word	0x08021130
 800f910:	20000029 	.word	0x20000029

0800f914 <GetInterval>:

void GetInterval(EmbeddedCli *cli, char *args, void *context) {
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Interval is Set to: %ldmin", _Flash_Packet.Time_Interval);
 800f920:	4b05      	ldr	r3, [pc, #20]	; (800f938 <GetInterval+0x24>)
 800f922:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f926:	461a      	mov	r2, r3
 800f928:	4904      	ldr	r1, [pc, #16]	; (800f93c <GetInterval+0x28>)
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f7ff fad4 	bl	800eed8 <cli_printf>

}
 800f930:	bf00      	nop
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	200012fc 	.word	0x200012fc
 800f93c:	0802114c 	.word	0x0802114c

0800f940 <SetFilename>:

void SetFilename(EmbeddedCli *cli, char *args, void *context) {
 800f940:	b580      	push	{r7, lr}
 800f942:	b09a      	sub	sp, #104	; 0x68
 800f944:	af02      	add	r7, sp, #8
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
	uint16_t len;
	const char *newLine = "\r\n";
 800f94c:	4b40      	ldr	r3, [pc, #256]	; (800fa50 <SetFilename+0x110>)
 800f94e:	65fb      	str	r3, [r7, #92]	; 0x5c
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800f950:	4940      	ldr	r1, [pc, #256]	; (800fa54 <SetFilename+0x114>)
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f7ff fac0 	bl	800eed8 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f958:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f95a:	f7f0 fc4b 	bl	80001f4 <strlen>
 800f95e:	4603      	mov	r3, r0
 800f960:	b29a      	uxth	r2, r3
 800f962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f966:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f968:	483b      	ldr	r0, [pc, #236]	; (800fa58 <SetFilename+0x118>)
 800f96a:	f7fc f81b 	bl	800b9a4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli,
 800f96e:	493b      	ldr	r1, [pc, #236]	; (800fa5c <SetFilename+0x11c>)
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f7ff fab1 	bl	800eed8 <cli_printf>
			"To set file name dont use special characters or space, '_' can be used and please keep the name below 18characters.");
	cli_printf(cli,
 800f976:	493a      	ldr	r1, [pc, #232]	; (800fa60 <SetFilename+0x120>)
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7ff faad 	bl	800eed8 <cli_printf>
			"If any special characters they will be omitted automatically.");

	cli_other = 1;
 800f97e:	4b39      	ldr	r3, [pc, #228]	; (800fa64 <SetFilename+0x124>)
 800f980:	2201      	movs	r2, #1
 800f982:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800f984:	4b38      	ldr	r3, [pc, #224]	; (800fa68 <SetFilename+0x128>)
 800f986:	2200      	movs	r2, #0
 800f988:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800f98a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f98e:	2232      	movs	r2, #50	; 0x32
 800f990:	4619      	mov	r1, r3
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f7ff fae2 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800f998:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f99a:	f7f0 fc2b 	bl	80001f4 <strlen>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f9a6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f9a8:	482b      	ldr	r0, [pc, #172]	; (800fa58 <SetFilename+0x118>)
 800f9aa:	f7fb fffb 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	len = strlen(buffer);
 800f9ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7f0 fc1e 	bl	80001f4 <strlen>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	if (len < 20) {
 800f9be:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800f9c2:	2b13      	cmp	r3, #19
 800f9c4:	d836      	bhi.n	800fa34 <SetFilename+0xf4>
		if (buffer[0] != '\0') {
 800f9c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d036      	beq.n	800fa3c <SetFilename+0xfc>
			if (buffer != NULL) {
				strcpy(_Flash_Packet.File_Name, buffer);
 800f9ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	4825      	ldr	r0, [pc, #148]	; (800fa6c <SetFilename+0x12c>)
 800f9d6:	f00d f924 	bl	801cc22 <strcpy>
				set_param_flags();
 800f9da:	4b25      	ldr	r3, [pc, #148]	; (800fa70 <SetFilename+0x130>)
 800f9dc:	2201      	movs	r2, #1
 800f9de:	701a      	strb	r2, [r3, #0]
 800f9e0:	4b24      	ldr	r3, [pc, #144]	; (800fa74 <SetFilename+0x134>)
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	701a      	strb	r2, [r3, #0]
				_RunTime_Packet.filename_changed = 1;
 800f9e6:	4b24      	ldr	r3, [pc, #144]	; (800fa78 <SetFilename+0x138>)
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				cli_printf(cli, "Filename is set to: %s",
 800f9ee:	4a1f      	ldr	r2, [pc, #124]	; (800fa6c <SetFilename+0x12c>)
 800f9f0:	4922      	ldr	r1, [pc, #136]	; (800fa7c <SetFilename+0x13c>)
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f7ff fa70 	bl	800eed8 <cli_printf>
						_Flash_Packet.File_Name);

				RTC_DateTypeDef sDate;
				HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 800f9f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	4619      	mov	r1, r3
 800fa00:	481f      	ldr	r0, [pc, #124]	; (800fa80 <SetFilename+0x140>)
 800fa02:	f7f9 fc8b 	bl	800931c <HAL_RTC_GetDate>
				RTC_TimeTypeDef sTime;
				HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 800fa06:	f107 0310 	add.w	r3, r7, #16
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	481c      	ldr	r0, [pc, #112]	; (800fa80 <SetFilename+0x140>)
 800fa10:	f7f9 fba2 	bl	8009158 <HAL_RTC_GetTime>


				sprintf(filename_ver_date, "%s_%02d-%02d-%02d", _Flash_Packet.File_Name, sDate.Year,sDate.Month, sDate.Date);
 800fa14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa18:	4619      	mov	r1, r3
 800fa1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fa1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800fa22:	9201      	str	r2, [sp, #4]
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	460b      	mov	r3, r1
 800fa28:	4a10      	ldr	r2, [pc, #64]	; (800fa6c <SetFilename+0x12c>)
 800fa2a:	4916      	ldr	r1, [pc, #88]	; (800fa84 <SetFilename+0x144>)
 800fa2c:	4816      	ldr	r0, [pc, #88]	; (800fa88 <SetFilename+0x148>)
 800fa2e:	f00d f8cb 	bl	801cbc8 <siprintf>
 800fa32:	e003      	b.n	800fa3c <SetFilename+0xfc>
			}
		}
	} else {
		cli_printf(cli, "Filename is too long");
 800fa34:	4915      	ldr	r1, [pc, #84]	; (800fa8c <SetFilename+0x14c>)
 800fa36:	68f8      	ldr	r0, [r7, #12]
 800fa38:	f7ff fa4e 	bl	800eed8 <cli_printf>
	}

	flag_cli = 0;
 800fa3c:	4b0a      	ldr	r3, [pc, #40]	; (800fa68 <SetFilename+0x128>)
 800fa3e:	2200      	movs	r2, #0
 800fa40:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fa42:	4b08      	ldr	r3, [pc, #32]	; (800fa64 <SetFilename+0x124>)
 800fa44:	2200      	movs	r2, #0
 800fa46:	701a      	strb	r2, [r3, #0]

}
 800fa48:	bf00      	nop
 800fa4a:	3760      	adds	r7, #96	; 0x60
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	08020d9c 	.word	0x08020d9c
 800fa54:	08020e10 	.word	0x08020e10
 800fa58:	200019c0 	.word	0x200019c0
 800fa5c:	08021168 	.word	0x08021168
 800fa60:	080211dc 	.word	0x080211dc
 800fa64:	20001a7e 	.word	0x20001a7e
 800fa68:	20001a7f 	.word	0x20001a7f
 800fa6c:	200012fc 	.word	0x200012fc
 800fa70:	200014d1 	.word	0x200014d1
 800fa74:	200014d2 	.word	0x200014d2
 800fa78:	20001494 	.word	0x20001494
 800fa7c:	0802121c 	.word	0x0802121c
 800fa80:	200017e4 	.word	0x200017e4
 800fa84:	08021234 	.word	0x08021234
 800fa88:	200022cc 	.word	0x200022cc
 800fa8c:	08021248 	.word	0x08021248

0800fa90 <GetFilename>:

void GetFilename(EmbeddedCli *cli, char *args, void *context) {
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	60b9      	str	r1, [r7, #8]
 800fa9a:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "Filename is set to: %s", filename_ver_date);
 800fa9c:	4a04      	ldr	r2, [pc, #16]	; (800fab0 <GetFilename+0x20>)
 800fa9e:	4905      	ldr	r1, [pc, #20]	; (800fab4 <GetFilename+0x24>)
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f7ff fa19 	bl	800eed8 <cli_printf>

}
 800faa6:	bf00      	nop
 800faa8:	3710      	adds	r7, #16
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	200022cc 	.word	0x200022cc
 800fab4:	0802121c 	.word	0x0802121c

0800fab8 <SetFileformat>:

void SetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fab8:	b580      	push	{r7, lr}
 800faba:	b092      	sub	sp, #72	; 0x48
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 800fac4:	4b41      	ldr	r3, [pc, #260]	; (800fbcc <SetFileformat+0x114>)
 800fac6:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli, "Disclaimer: It takes 30second for any changes to save.");
 800fac8:	4941      	ldr	r1, [pc, #260]	; (800fbd0 <SetFileformat+0x118>)
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f7ff fa04 	bl	800eed8 <cli_printf>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fad0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fad2:	f7f0 fb8f 	bl	80001f4 <strlen>
 800fad6:	4603      	mov	r3, r0
 800fad8:	b29a      	uxth	r2, r3
 800fada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fade:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fae0:	483c      	ldr	r0, [pc, #240]	; (800fbd4 <SetFileformat+0x11c>)
 800fae2:	f7fb ff5f 	bl	800b9a4 <HAL_UART_Transmit>
			1000);
	cli_printf(cli, "Following file formats are allowed:");
 800fae6:	493c      	ldr	r1, [pc, #240]	; (800fbd8 <SetFileformat+0x120>)
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f7ff f9f5 	bl	800eed8 <cli_printf>
	cli_printf(cli, "1. (.csv)");
 800faee:	493b      	ldr	r1, [pc, #236]	; (800fbdc <SetFileformat+0x124>)
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f7ff f9f1 	bl	800eed8 <cli_printf>
	cli_printf(cli, "2. (.json)");
 800faf6:	493a      	ldr	r1, [pc, #232]	; (800fbe0 <SetFileformat+0x128>)
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	f7ff f9ed 	bl	800eed8 <cli_printf>
	cli_printf(cli, "Enter the number to select your desired format");
 800fafe:	4939      	ldr	r1, [pc, #228]	; (800fbe4 <SetFileformat+0x12c>)
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f7ff f9e9 	bl	800eed8 <cli_printf>

	cli_other = 1;
 800fb06:	4b38      	ldr	r3, [pc, #224]	; (800fbe8 <SetFileformat+0x130>)
 800fb08:	2201      	movs	r2, #1
 800fb0a:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fb0c:	4b37      	ldr	r3, [pc, #220]	; (800fbec <SetFileformat+0x134>)
 800fb0e:	2200      	movs	r2, #0
 800fb10:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fb12:	f107 0310 	add.w	r3, r7, #16
 800fb16:	2232      	movs	r2, #50	; 0x32
 800fb18:	4619      	mov	r1, r3
 800fb1a:	68f8      	ldr	r0, [r7, #12]
 800fb1c:	f7ff fa1e 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fb20:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb22:	f7f0 fb67 	bl	80001f4 <strlen>
 800fb26:	4603      	mov	r3, r0
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb30:	4828      	ldr	r0, [pc, #160]	; (800fbd4 <SetFileformat+0x11c>)
 800fb32:	f7fb ff37 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "1")) {
 800fb36:	f107 0310 	add.w	r3, r7, #16
 800fb3a:	2131      	movs	r1, #49	; 0x31
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f00d f863 	bl	801cc08 <strchr>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d014      	beq.n	800fb72 <SetFileformat+0xba>
		strcpy(_Flash_Packet.File_Format, ".CSV");
 800fb48:	4b29      	ldr	r3, [pc, #164]	; (800fbf0 <SetFileformat+0x138>)
 800fb4a:	4a2a      	ldr	r2, [pc, #168]	; (800fbf4 <SetFileformat+0x13c>)
 800fb4c:	6810      	ldr	r0, [r2, #0]
 800fb4e:	6018      	str	r0, [r3, #0]
 800fb50:	7912      	ldrb	r2, [r2, #4]
 800fb52:	711a      	strb	r2, [r3, #4]
		set_param_flags();
 800fb54:	4b28      	ldr	r3, [pc, #160]	; (800fbf8 <SetFileformat+0x140>)
 800fb56:	2201      	movs	r2, #1
 800fb58:	701a      	strb	r2, [r3, #0]
 800fb5a:	4b28      	ldr	r3, [pc, #160]	; (800fbfc <SetFileformat+0x144>)
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 800fb60:	4b27      	ldr	r3, [pc, #156]	; (800fc00 <SetFileformat+0x148>)
 800fb62:	2201      	movs	r2, #1
 800fb64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		_RunTime_Packet.fileformat_selection = 1;
 800fb68:	4b25      	ldr	r3, [pc, #148]	; (800fc00 <SetFileformat+0x148>)
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800fb70:	e01c      	b.n	800fbac <SetFileformat+0xf4>
	} else if (strstr(buffer, "2")) {
 800fb72:	f107 0310 	add.w	r3, r7, #16
 800fb76:	2132      	movs	r1, #50	; 0x32
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f00d f845 	bl	801cc08 <strchr>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d013      	beq.n	800fbac <SetFileformat+0xf4>
		strcpy(_Flash_Packet.File_Format, ".JSON");
 800fb84:	4b1a      	ldr	r3, [pc, #104]	; (800fbf0 <SetFileformat+0x138>)
 800fb86:	4a1f      	ldr	r2, [pc, #124]	; (800fc04 <SetFileformat+0x14c>)
 800fb88:	6810      	ldr	r0, [r2, #0]
 800fb8a:	6018      	str	r0, [r3, #0]
 800fb8c:	8892      	ldrh	r2, [r2, #4]
 800fb8e:	809a      	strh	r2, [r3, #4]
		set_param_flags();
 800fb90:	4b19      	ldr	r3, [pc, #100]	; (800fbf8 <SetFileformat+0x140>)
 800fb92:	2201      	movs	r2, #1
 800fb94:	701a      	strb	r2, [r3, #0]
 800fb96:	4b19      	ldr	r3, [pc, #100]	; (800fbfc <SetFileformat+0x144>)
 800fb98:	2201      	movs	r2, #1
 800fb9a:	701a      	strb	r2, [r3, #0]
		_RunTime_Packet.fileformat_changed = 1;
 800fb9c:	4b18      	ldr	r3, [pc, #96]	; (800fc00 <SetFileformat+0x148>)
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		_RunTime_Packet.fileformat_selection = 0;
 800fba4:	4b16      	ldr	r3, [pc, #88]	; (800fc00 <SetFileformat+0x148>)
 800fba6:	2200      	movs	r2, #0
 800fba8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	}

	flag_cli = 0;
 800fbac:	4b0f      	ldr	r3, [pc, #60]	; (800fbec <SetFileformat+0x134>)
 800fbae:	2200      	movs	r2, #0
 800fbb0:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fbb2:	4b0d      	ldr	r3, [pc, #52]	; (800fbe8 <SetFileformat+0x130>)
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	701a      	strb	r2, [r3, #0]
	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 800fbb8:	4a0d      	ldr	r2, [pc, #52]	; (800fbf0 <SetFileformat+0x138>)
 800fbba:	4913      	ldr	r1, [pc, #76]	; (800fc08 <SetFileformat+0x150>)
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f7ff f98b 	bl	800eed8 <cli_printf>

}
 800fbc2:	bf00      	nop
 800fbc4:	3748      	adds	r7, #72	; 0x48
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	08020d9c 	.word	0x08020d9c
 800fbd0:	08020e10 	.word	0x08020e10
 800fbd4:	200019c0 	.word	0x200019c0
 800fbd8:	08021260 	.word	0x08021260
 800fbdc:	08021284 	.word	0x08021284
 800fbe0:	08021290 	.word	0x08021290
 800fbe4:	0802129c 	.word	0x0802129c
 800fbe8:	20001a7e 	.word	0x20001a7e
 800fbec:	20001a7f 	.word	0x20001a7f
 800fbf0:	20001360 	.word	0x20001360
 800fbf4:	080212cc 	.word	0x080212cc
 800fbf8:	200014d1 	.word	0x200014d1
 800fbfc:	200014d2 	.word	0x200014d2
 800fc00:	20001494 	.word	0x20001494
 800fc04:	080212d4 	.word	0x080212d4
 800fc08:	080212dc 	.word	0x080212dc

0800fc0c <GetFileformat>:

void GetFileformat(EmbeddedCli *cli, char *args, void *context) {
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "File format is set to: %s", _Flash_Packet.File_Format);
 800fc18:	4a04      	ldr	r2, [pc, #16]	; (800fc2c <GetFileformat+0x20>)
 800fc1a:	4905      	ldr	r1, [pc, #20]	; (800fc30 <GetFileformat+0x24>)
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	f7ff f95b 	bl	800eed8 <cli_printf>

}
 800fc22:	bf00      	nop
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20001360 	.word	0x20001360
 800fc30:	080212dc 	.word	0x080212dc

0800fc34 <fanclean>:

void fanclean(EmbeddedCli *cli, char *args, void *context) {
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b096      	sub	sp, #88	; 0x58
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]

	const char *newLine = "\r\n";
 800fc40:	4b48      	ldr	r3, [pc, #288]	; (800fd64 <fanclean+0x130>)
 800fc42:	64fb      	str	r3, [r7, #76]	; 0x4c
	int counter = 0;
 800fc44:	2300      	movs	r3, #0
 800fc46:	657b      	str	r3, [r7, #84]	; 0x54
	const char *dot = "........";
 800fc48:	4b47      	ldr	r3, [pc, #284]	; (800fd68 <fanclean+0x134>)
 800fc4a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t do_Calibration = 0;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	cli_printf(cli,
 800fc52:	4946      	ldr	r1, [pc, #280]	; (800fd6c <fanclean+0x138>)
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f7ff f93f 	bl	800eed8 <cli_printf>
			"Do you want to initiate particle sensor fan-cleaning? y/n?");

	cli_other = 1;
 800fc5a:	4b45      	ldr	r3, [pc, #276]	; (800fd70 <fanclean+0x13c>)
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fc60:	4b44      	ldr	r3, [pc, #272]	; (800fd74 <fanclean+0x140>)
 800fc62:	2200      	movs	r2, #0
 800fc64:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800fc66:	f107 0314 	add.w	r3, r7, #20
 800fc6a:	2232      	movs	r2, #50	; 0x32
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7ff f974 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fc74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fc76:	f7f0 fabd 	bl	80001f4 <strlen>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc82:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc84:	483c      	ldr	r0, [pc, #240]	; (800fd78 <fanclean+0x144>)
 800fc86:	f7fb fe8d 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "n")) {
 800fc8a:	f107 0314 	add.w	r3, r7, #20
 800fc8e:	216e      	movs	r1, #110	; 0x6e
 800fc90:	4618      	mov	r0, r3
 800fc92:	f00c ffb9 	bl	801cc08 <strchr>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00f      	beq.n	800fcbc <fanclean+0x88>
		_Flash_Packet.Calibration_Status = 0;
 800fc9c:	4b37      	ldr	r3, [pc, #220]	; (800fd7c <fanclean+0x148>)
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		_RunTime_Packet.PM_calibration = 1;
 800fca4:	4b36      	ldr	r3, [pc, #216]	; (800fd80 <fanclean+0x14c>)
 800fca6:	2201      	movs	r2, #1
 800fca8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		cli_printf(cli, "Particle sensor fan-cleaning aborted.");
 800fcac:	4935      	ldr	r1, [pc, #212]	; (800fd84 <fanclean+0x150>)
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	f7ff f912 	bl	800eed8 <cli_printf>
		//set_param_flags();
		do_Calibration = 0;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800fcba:	e00f      	b.n	800fcdc <fanclean+0xa8>
	} else if (strstr(buffer, "y")) {
 800fcbc:	f107 0314 	add.w	r3, r7, #20
 800fcc0:	2179      	movs	r1, #121	; 0x79
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f00c ffa0 	bl	801cc08 <strchr>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d006      	beq.n	800fcdc <fanclean+0xa8>
		_RunTime_Packet.PM_calibration = 0;
 800fcce:	4b2c      	ldr	r3, [pc, #176]	; (800fd80 <fanclean+0x14c>)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		do_Calibration = 1;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	}

	if (do_Calibration == 1) {
 800fcdc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d135      	bne.n	800fd50 <fanclean+0x11c>

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fce4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fce6:	f7f0 fa85 	bl	80001f4 <strlen>
 800fcea:	4603      	mov	r3, r0
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fcf2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fcf4:	4820      	ldr	r0, [pc, #128]	; (800fd78 <fanclean+0x144>)
 800fcf6:	f7fb fe55 	bl	800b9a4 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Particle sensor fan-cleaning initiated, please wait.");
 800fcfa:	4923      	ldr	r1, [pc, #140]	; (800fd88 <fanclean+0x154>)
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f7ff f8eb 	bl	800eed8 <cli_printf>
		while (counter < 8) {
 800fd02:	e013      	b.n	800fd2c <fanclean+0xf8>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 800fd04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fd06:	f7f0 fa75 	bl	80001f4 <strlen>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd14:	4818      	ldr	r0, [pc, #96]	; (800fd78 <fanclean+0x144>)
 800fd16:	f7fb fe45 	bl	800b9a4 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 800fd1a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800fd1e:	f7f3 ff95 	bl	8003c4c <HAL_Delay>
			toggle_blue_led();
 800fd22:	f7f1 f9d5 	bl	80010d0 <toggle_blue_led>
			counter++;
 800fd26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd28:	3301      	adds	r3, #1
 800fd2a:	657b      	str	r3, [r7, #84]	; 0x54
		while (counter < 8) {
 800fd2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd2e:	2b07      	cmp	r3, #7
 800fd30:	dde8      	ble.n	800fd04 <fanclean+0xd0>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fd32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fd34:	f7f0 fa5e 	bl	80001f4 <strlen>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fd42:	480d      	ldr	r0, [pc, #52]	; (800fd78 <fanclean+0x144>)
 800fd44:	f7fb fe2e 	bl	800b9a4 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "fan-cleaning done.");
 800fd48:	4910      	ldr	r1, [pc, #64]	; (800fd8c <fanclean+0x158>)
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f7ff f8c4 	bl	800eed8 <cli_printf>

	}

	flag_cli = 0;
 800fd50:	4b08      	ldr	r3, [pc, #32]	; (800fd74 <fanclean+0x140>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fd56:	4b06      	ldr	r3, [pc, #24]	; (800fd70 <fanclean+0x13c>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	701a      	strb	r2, [r3, #0]
}
 800fd5c:	bf00      	nop
 800fd5e:	3758      	adds	r7, #88	; 0x58
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	08020d9c 	.word	0x08020d9c
 800fd68:	080212f8 	.word	0x080212f8
 800fd6c:	08021304 	.word	0x08021304
 800fd70:	20001a7e 	.word	0x20001a7e
 800fd74:	20001a7f 	.word	0x20001a7f
 800fd78:	200019c0 	.word	0x200019c0
 800fd7c:	200012fc 	.word	0x200012fc
 800fd80:	20001494 	.word	0x20001494
 800fd84:	08021340 	.word	0x08021340
 800fd88:	08021368 	.word	0x08021368
 800fd8c:	080213a0 	.word	0x080213a0

0800fd90 <co2calibrate>:

void co2calibrate(EmbeddedCli *cli, char *args, void *context) {
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b096      	sub	sp, #88	; 0x58
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800fd9c:	4b55      	ldr	r3, [pc, #340]	; (800fef4 <co2calibrate+0x164>)
 800fd9e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t val;
	int counter = 0;
 800fda0:	2300      	movs	r3, #0
 800fda2:	657b      	str	r3, [r7, #84]	; 0x54
	const char *dot = "........";
 800fda4:	4b54      	ldr	r3, [pc, #336]	; (800fef8 <co2calibrate+0x168>)
 800fda6:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t do_Calibration = 0;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	cli_other = 1;
 800fdae:	4b53      	ldr	r3, [pc, #332]	; (800fefc <co2calibrate+0x16c>)
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800fdb4:	4b52      	ldr	r3, [pc, #328]	; (800ff00 <co2calibrate+0x170>)
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	memset(buffer, '\0', sizeof(buffer));
 800fdba:	f107 0310 	add.w	r3, r7, #16
 800fdbe:	2232      	movs	r2, #50	; 0x32
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f00b fefa 	bl	801bbbc <memset>
	cli_printf(cli,
 800fdc8:	494e      	ldr	r1, [pc, #312]	; (800ff04 <co2calibrate+0x174>)
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f7ff f884 	bl	800eed8 <cli_printf>
			"To calibrate Co2 sensor, please provide Co2 concentration value.");
	cli_printf(cli,
 800fdd0:	494d      	ldr	r1, [pc, #308]	; (800ff08 <co2calibrate+0x178>)
 800fdd2:	68f8      	ldr	r0, [r7, #12]
 800fdd4:	f7ff f880 	bl	800eed8 <cli_printf>
			"If Co2 concentration is unknown then just press enter to cancel the calibration.");

	receiveString(cli, buffer, sizeof(buffer));
 800fdd8:	f107 0310 	add.w	r3, r7, #16
 800fddc:	2232      	movs	r2, #50	; 0x32
 800fdde:	4619      	mov	r1, r3
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f7ff f8bb 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fde6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fde8:	f7f0 fa04 	bl	80001f4 <strlen>
 800fdec:	4603      	mov	r3, r0
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fdf4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fdf6:	4845      	ldr	r0, [pc, #276]	; (800ff0c <co2calibrate+0x17c>)
 800fdf8:	f7fb fdd4 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	if (buffer[0] != '\0') {
 800fdfc:	7c3b      	ldrb	r3, [r7, #16]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d01e      	beq.n	800fe40 <co2calibrate+0xb0>
		_RunTime_Packet.CO2_calibration = 1;
 800fe02:	4b43      	ldr	r3, [pc, #268]	; (800ff10 <co2calibrate+0x180>)
 800fe04:	2201      	movs	r2, #1
 800fe06:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

		val = atoi(buffer);
 800fe0a:	f107 0310 	add.w	r3, r7, #16
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f00b fe04 	bl	801ba1c <atoi>
 800fe14:	4603      	mov	r3, r0
 800fe16:	647b      	str	r3, [r7, #68]	; 0x44

		if (val < 65535) {
 800fe18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d803      	bhi.n	800fe2a <co2calibrate+0x9a>
			_RunTime_Packet._target_co2_concentration = val;
 800fe22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	4b3a      	ldr	r3, [pc, #232]	; (800ff10 <co2calibrate+0x180>)
 800fe28:	869a      	strh	r2, [r3, #52]	; 0x34
		}

		cli_printf(cli,
				"Co2 sensor is going to be Calibrated now. Co2 concentration value provided : %d",
				_RunTime_Packet._target_co2_concentration);
 800fe2a:	4b39      	ldr	r3, [pc, #228]	; (800ff10 <co2calibrate+0x180>)
 800fe2c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		cli_printf(cli,
 800fe2e:	461a      	mov	r2, r3
 800fe30:	4938      	ldr	r1, [pc, #224]	; (800ff14 <co2calibrate+0x184>)
 800fe32:	68f8      	ldr	r0, [r7, #12]
 800fe34:	f7ff f850 	bl	800eed8 <cli_printf>
		do_Calibration = 1;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800fe3e:	e00a      	b.n	800fe56 <co2calibrate+0xc6>
	} else {
		cli_printf(cli, "Co2 sensor Calibration aborted.");
 800fe40:	4935      	ldr	r1, [pc, #212]	; (800ff18 <co2calibrate+0x188>)
 800fe42:	68f8      	ldr	r0, [r7, #12]
 800fe44:	f7ff f848 	bl	800eed8 <cli_printf>
		_RunTime_Packet.CO2_calibration = 0;
 800fe48:	4b31      	ldr	r3, [pc, #196]	; (800ff10 <co2calibrate+0x180>)
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		do_Calibration = 0;
 800fe50:	2300      	movs	r3, #0
 800fe52:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	}

	if (do_Calibration == 1) {
 800fe56:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d140      	bne.n	800fee0 <co2calibrate+0x150>
		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fe5e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fe60:	f7f0 f9c8 	bl	80001f4 <strlen>
 800fe64:	4603      	mov	r3, r0
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fe6e:	4827      	ldr	r0, [pc, #156]	; (800ff0c <co2calibrate+0x17c>)
 800fe70:	f7fb fd98 	bl	800b9a4 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Co2 is calibrating, please wait.");
 800fe74:	4929      	ldr	r1, [pc, #164]	; (800ff1c <co2calibrate+0x18c>)
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f7ff f82e 	bl	800eed8 <cli_printf>
		if (!_RunTime_Packet.scd4x_i2c_error) {
 800fe7c:	4b24      	ldr	r3, [pc, #144]	; (800ff10 <co2calibrate+0x180>)
 800fe7e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d11a      	bne.n	800febc <co2calibrate+0x12c>
			scd4x_perform_forced_recalibration(
 800fe86:	4b22      	ldr	r3, [pc, #136]	; (800ff10 <co2calibrate+0x180>)
 800fe88:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800fe8a:	4925      	ldr	r1, [pc, #148]	; (800ff20 <co2calibrate+0x190>)
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f002 ff43 	bl	8012d18 <scd4x_perform_forced_recalibration>
					_RunTime_Packet._target_co2_concentration,
					&_RunTime_Packet._frc_correction);
		}
		while (counter < 8) {
 800fe92:	e013      	b.n	800febc <co2calibrate+0x12c>
			HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) dot, strlen(dot),
 800fe94:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fe96:	f7f0 f9ad 	bl	80001f4 <strlen>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	b29a      	uxth	r2, r3
 800fe9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fea2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fea4:	4819      	ldr	r0, [pc, #100]	; (800ff0c <co2calibrate+0x17c>)
 800fea6:	f7fb fd7d 	bl	800b9a4 <HAL_UART_Transmit>
					1000);
			HAL_Delay(800);
 800feaa:	f44f 7048 	mov.w	r0, #800	; 0x320
 800feae:	f7f3 fecd 	bl	8003c4c <HAL_Delay>
			toggle_blue_led();
 800feb2:	f7f1 f90d 	bl	80010d0 <toggle_blue_led>
			counter++;
 800feb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb8:	3301      	adds	r3, #1
 800feba:	657b      	str	r3, [r7, #84]	; 0x54
		while (counter < 8) {
 800febc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800febe:	2b07      	cmp	r3, #7
 800fec0:	dde8      	ble.n	800fe94 <co2calibrate+0x104>
		}

		HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800fec2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fec4:	f7f0 f996 	bl	80001f4 <strlen>
 800fec8:	4603      	mov	r3, r0
 800feca:	b29a      	uxth	r2, r3
 800fecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fed0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fed2:	480e      	ldr	r0, [pc, #56]	; (800ff0c <co2calibrate+0x17c>)
 800fed4:	f7fb fd66 	bl	800b9a4 <HAL_UART_Transmit>
				1000);
		cli_printf(cli, "Sensor calibration done.");
 800fed8:	4912      	ldr	r1, [pc, #72]	; (800ff24 <co2calibrate+0x194>)
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7fe fffc 	bl	800eed8 <cli_printf>
	}

	flag_cli = 0;
 800fee0:	4b07      	ldr	r3, [pc, #28]	; (800ff00 <co2calibrate+0x170>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800fee6:	4b05      	ldr	r3, [pc, #20]	; (800fefc <co2calibrate+0x16c>)
 800fee8:	2200      	movs	r2, #0
 800feea:	701a      	strb	r2, [r3, #0]
}
 800feec:	bf00      	nop
 800feee:	3758      	adds	r7, #88	; 0x58
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	08020d9c 	.word	0x08020d9c
 800fef8:	080212f8 	.word	0x080212f8
 800fefc:	20001a7e 	.word	0x20001a7e
 800ff00:	20001a7f 	.word	0x20001a7f
 800ff04:	080213b4 	.word	0x080213b4
 800ff08:	080213f8 	.word	0x080213f8
 800ff0c:	200019c0 	.word	0x200019c0
 800ff10:	20001494 	.word	0x20001494
 800ff14:	0802144c 	.word	0x0802144c
 800ff18:	0802149c 	.word	0x0802149c
 800ff1c:	080214bc 	.word	0x080214bc
 800ff20:	200014ca 	.word	0x200014ca
 800ff24:	080214e0 	.word	0x080214e0

0800ff28 <SystemRestart>:

void SystemRestart(EmbeddedCli *cli, char *args, void *context) {
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b092      	sub	sp, #72	; 0x48
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
	const char *newLine = "\r\n";
 800ff34:	4b22      	ldr	r3, [pc, #136]	; (800ffc0 <SystemRestart+0x98>)
 800ff36:	647b      	str	r3, [r7, #68]	; 0x44
	cli_printf(cli, "Do you want to restart the device y/n?");
 800ff38:	4922      	ldr	r1, [pc, #136]	; (800ffc4 <SystemRestart+0x9c>)
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f7fe ffcc 	bl	800eed8 <cli_printf>

	cli_other = 1;
 800ff40:	4b21      	ldr	r3, [pc, #132]	; (800ffc8 <SystemRestart+0xa0>)
 800ff42:	2201      	movs	r2, #1
 800ff44:	701a      	strb	r2, [r3, #0]
	flag_cli = 0;
 800ff46:	4b21      	ldr	r3, [pc, #132]	; (800ffcc <SystemRestart+0xa4>)
 800ff48:	2200      	movs	r2, #0
 800ff4a:	701a      	strb	r2, [r3, #0]
	char buffer[50];
	receiveString(cli, buffer, sizeof(buffer));
 800ff4c:	f107 0310 	add.w	r3, r7, #16
 800ff50:	2232      	movs	r2, #50	; 0x32
 800ff52:	4619      	mov	r1, r3
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f7ff f801 	bl	800ef5c <receiveString>
	HAL_UART_Transmit(UART_CLI_PERIPH, (uint8_t*) newLine, strlen(newLine),
 800ff5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff5c:	f7f0 f94a 	bl	80001f4 <strlen>
 800ff60:	4603      	mov	r3, r0
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ff68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff6a:	4819      	ldr	r0, [pc, #100]	; (800ffd0 <SystemRestart+0xa8>)
 800ff6c:	f7fb fd1a 	bl	800b9a4 <HAL_UART_Transmit>
			1000);

	if (strstr(buffer, "y")) {
 800ff70:	f107 0310 	add.w	r3, r7, #16
 800ff74:	2179      	movs	r1, #121	; 0x79
 800ff76:	4618      	mov	r0, r3
 800ff78:	f00c fe46 	bl	801cc08 <strchr>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d006      	beq.n	800ff90 <SystemRestart+0x68>
		cli_printf(cli, "Device is going to restart.");
 800ff82:	4914      	ldr	r1, [pc, #80]	; (800ffd4 <SystemRestart+0xac>)
 800ff84:	68f8      	ldr	r0, [r7, #12]
 800ff86:	f7fe ffa7 	bl	800eed8 <cli_printf>
		HAL_NVIC_SystemReset();
 800ff8a:	f7f4 fc6e 	bl	800486a <HAL_NVIC_SystemReset>
 800ff8e:	e00c      	b.n	800ffaa <SystemRestart+0x82>
	} else if (strstr(buffer, "n")) {
 800ff90:	f107 0310 	add.w	r3, r7, #16
 800ff94:	216e      	movs	r1, #110	; 0x6e
 800ff96:	4618      	mov	r0, r3
 800ff98:	f00c fe36 	bl	801cc08 <strchr>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d003      	beq.n	800ffaa <SystemRestart+0x82>
		cli_printf(cli, "Device restart aborted.");
 800ffa2:	490d      	ldr	r1, [pc, #52]	; (800ffd8 <SystemRestart+0xb0>)
 800ffa4:	68f8      	ldr	r0, [r7, #12]
 800ffa6:	f7fe ff97 	bl	800eed8 <cli_printf>
	}

	flag_cli = 0;
 800ffaa:	4b08      	ldr	r3, [pc, #32]	; (800ffcc <SystemRestart+0xa4>)
 800ffac:	2200      	movs	r2, #0
 800ffae:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 800ffb0:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <SystemRestart+0xa0>)
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	701a      	strb	r2, [r3, #0]
}
 800ffb6:	bf00      	nop
 800ffb8:	3748      	adds	r7, #72	; 0x48
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	08020d9c 	.word	0x08020d9c
 800ffc4:	080214fc 	.word	0x080214fc
 800ffc8:	20001a7e 	.word	0x20001a7e
 800ffcc:	20001a7f 	.word	0x20001a7f
 800ffd0:	200019c0 	.word	0x200019c0
 800ffd4:	08021524 	.word	0x08021524
 800ffd8:	08021540 	.word	0x08021540

0800ffdc <Co2Level>:

void Co2Level(EmbeddedCli *cli, char *args, void *context) {
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 800ffe8:	4b08      	ldr	r3, [pc, #32]	; (801000c <Co2Level+0x30>)
 800ffea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d101      	bne.n	800fff6 <Co2Level+0x1a>
		get_scd4x_measurement();
 800fff2:	f7f1 fb37 	bl	8001664 <get_scd4x_measurement>
	}

	cli_printf(cli, "Co2 Value: %d", _RunTime_Packet.co2);
 800fff6:	4b05      	ldr	r3, [pc, #20]	; (801000c <Co2Level+0x30>)
 800fff8:	881b      	ldrh	r3, [r3, #0]
 800fffa:	461a      	mov	r2, r3
 800fffc:	4904      	ldr	r1, [pc, #16]	; (8010010 <Co2Level+0x34>)
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	f7fe ff6a 	bl	800eed8 <cli_printf>
}
 8010004:	bf00      	nop
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	20001494 	.word	0x20001494
 8010010:	08021558 	.word	0x08021558

08010014 <TempLevel>:

void TempLevel(EmbeddedCli *cli, char *args, void *context) {
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010020:	4b08      	ldr	r3, [pc, #32]	; (8010044 <TempLevel+0x30>)
 8010022:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8010026:	2b00      	cmp	r3, #0
 8010028:	d101      	bne.n	801002e <TempLevel+0x1a>
		get_scd4x_measurement();
 801002a:	f7f1 fb1b 	bl	8001664 <get_scd4x_measurement>
	}

	cli_printf(cli, "Temperature Value: %dC ", _RunTime_Packet.temperature);
 801002e:	4b05      	ldr	r3, [pc, #20]	; (8010044 <TempLevel+0x30>)
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	461a      	mov	r2, r3
 8010034:	4904      	ldr	r1, [pc, #16]	; (8010048 <TempLevel+0x34>)
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	f7fe ff4e 	bl	800eed8 <cli_printf>
}
 801003c:	bf00      	nop
 801003e:	3710      	adds	r7, #16
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	20001494 	.word	0x20001494
 8010048:	08021568 	.word	0x08021568

0801004c <HumidLevel>:

void HumidLevel(EmbeddedCli *cli, char *args, void *context) {
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]

	if (!_RunTime_Packet.scd4x_i2c_error) {
 8010058:	4b08      	ldr	r3, [pc, #32]	; (801007c <HumidLevel+0x30>)
 801005a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801005e:	2b00      	cmp	r3, #0
 8010060:	d101      	bne.n	8010066 <HumidLevel+0x1a>
		get_scd4x_measurement();
 8010062:	f7f1 faff 	bl	8001664 <get_scd4x_measurement>
	}

	cli_printf(cli, "Humidity Value: %d ", _RunTime_Packet.humidity);
 8010066:	4b05      	ldr	r3, [pc, #20]	; (801007c <HumidLevel+0x30>)
 8010068:	689b      	ldr	r3, [r3, #8]
 801006a:	461a      	mov	r2, r3
 801006c:	4904      	ldr	r1, [pc, #16]	; (8010080 <HumidLevel+0x34>)
 801006e:	68f8      	ldr	r0, [r7, #12]
 8010070:	f7fe ff32 	bl	800eed8 <cli_printf>
}
 8010074:	bf00      	nop
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	20001494 	.word	0x20001494
 8010080:	08021580 	.word	0x08021580

08010084 <MotionDetection>:

uint8_t prev_motion;

void MotionDetection(EmbeddedCli *cli, char *args, void *context) {
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "For 10seconds system will poll here to detect motion.");
 8010090:	491f      	ldr	r1, [pc, #124]	; (8010110 <MotionDetection+0x8c>)
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f7fe ff20 	bl	800eed8 <cli_printf>
	HAL_Delay(2000);
 8010098:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801009c:	f7f3 fdd6 	bl	8003c4c <HAL_Delay>
	prev_max_wait_time_motion = HAL_GetTick();
 80100a0:	f7f3 fdc8 	bl	8003c34 <HAL_GetTick>
 80100a4:	4603      	mov	r3, r0
 80100a6:	4a1b      	ldr	r2, [pc, #108]	; (8010114 <MotionDetection+0x90>)
 80100a8:	6013      	str	r3, [r2, #0]
	prev_motion = 0;
 80100aa:	4b1b      	ldr	r3, [pc, #108]	; (8010118 <MotionDetection+0x94>)
 80100ac:	2200      	movs	r2, #0
 80100ae:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80100b0:	e01c      	b.n	80100ec <MotionDetection+0x68>

		if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 80100b2:	2101      	movs	r1, #1
 80100b4:	4819      	ldr	r0, [pc, #100]	; (801011c <MotionDetection+0x98>)
 80100b6:	f7f5 fd89 	bl	8005bcc <HAL_GPIO_ReadPin>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d003      	beq.n	80100c8 <MotionDetection+0x44>
			_RunTime_Packet.motion_detection = 1;
 80100c0:	4b17      	ldr	r3, [pc, #92]	; (8010120 <MotionDetection+0x9c>)
 80100c2:	2201      	movs	r2, #1
 80100c4:	731a      	strb	r2, [r3, #12]
 80100c6:	e002      	b.n	80100ce <MotionDetection+0x4a>
			//cli_printf(cli,"PIR Motion: %d\r\n",_RunTime_Packet.motion_detection);
		} else {
			_RunTime_Packet.motion_detection = 0;
 80100c8:	4b15      	ldr	r3, [pc, #84]	; (8010120 <MotionDetection+0x9c>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	731a      	strb	r2, [r3, #12]

//		if(prev_motion != _RunTime_Packet.motion_detection )
//	         	{
//			prev_motion = _RunTime_Packet.motion_detection ;
		cli_printf(cli, "PIR Motion: %s\r\n",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80100ce:	4b14      	ldr	r3, [pc, #80]	; (8010120 <MotionDetection+0x9c>)
 80100d0:	7b1b      	ldrb	r3, [r3, #12]
		cli_printf(cli, "PIR Motion: %s\r\n",
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d101      	bne.n	80100da <MotionDetection+0x56>
 80100d6:	4b13      	ldr	r3, [pc, #76]	; (8010124 <MotionDetection+0xa0>)
 80100d8:	e000      	b.n	80100dc <MotionDetection+0x58>
 80100da:	4b13      	ldr	r3, [pc, #76]	; (8010128 <MotionDetection+0xa4>)
 80100dc:	461a      	mov	r2, r3
 80100de:	4913      	ldr	r1, [pc, #76]	; (801012c <MotionDetection+0xa8>)
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f7fe fef9 	bl	800eed8 <cli_printf>
//	         	}
		HAL_Delay(100);
 80100e6:	2064      	movs	r0, #100	; 0x64
 80100e8:	f7f3 fdb0 	bl	8003c4c <HAL_Delay>
	while (HAL_GetTick() - prev_max_wait_time_motion < max_wait_time_motion) {
 80100ec:	f7f3 fda2 	bl	8003c34 <HAL_GetTick>
 80100f0:	4602      	mov	r2, r0
 80100f2:	4b08      	ldr	r3, [pc, #32]	; (8010114 <MotionDetection+0x90>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	1ad2      	subs	r2, r2, r3
 80100f8:	4b0d      	ldr	r3, [pc, #52]	; (8010130 <MotionDetection+0xac>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d3d8      	bcc.n	80100b2 <MotionDetection+0x2e>
//}
//

	}

	cli_printf(cli, "Session ended");
 8010100:	490c      	ldr	r1, [pc, #48]	; (8010134 <MotionDetection+0xb0>)
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f7fe fee8 	bl	800eed8 <cli_printf>

}
 8010108:	bf00      	nop
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	08021594 	.word	0x08021594
 8010114:	20001a78 	.word	0x20001a78
 8010118:	20001a80 	.word	0x20001a80
 801011c:	40020000 	.word	0x40020000
 8010120:	20001494 	.word	0x20001494
 8010124:	080215cc 	.word	0x080215cc
 8010128:	080215d4 	.word	0x080215d4
 801012c:	080215dc 	.word	0x080215dc
 8010130:	20000020 	.word	0x20000020
 8010134:	080215f0 	.word	0x080215f0

08010138 <AirQuality>:

void AirQuality(EmbeddedCli *cli, char *args, void *context) {
 8010138:	b580      	push	{r7, lr}
 801013a:	b084      	sub	sp, #16
 801013c:	af00      	add	r7, sp, #0
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	607a      	str	r2, [r7, #4]

	cli_printf(cli, "AirQuality Measured Values:");
 8010144:	4922      	ldr	r1, [pc, #136]	; (80101d0 <AirQuality+0x98>)
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f7fe fec6 	bl	800eed8 <cli_printf>
//	cli_printf(cli,"%0.2f pm2.5 ",_RunTime_Packet.pm2_5);
//	cli_printf(cli,"%0.2f pm4.0 ",_RunTime_Packet.pm4_0);
//	cli_printf(cli,"%0.2f pm10.0",_RunTime_Packet.pm10_0);
//	}

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 801014c:	4b21      	ldr	r3, [pc, #132]	; (80101d4 <AirQuality+0x9c>)
 801014e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010152:	2b00      	cmp	r3, #0
 8010154:	d104      	bne.n	8010160 <AirQuality+0x28>
 8010156:	4b1f      	ldr	r3, [pc, #124]	; (80101d4 <AirQuality+0x9c>)
 8010158:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801015c:	2b00      	cmp	r3, #0
 801015e:	d004      	beq.n	801016a <AirQuality+0x32>
		cli_printf(cli, "Calculating, try again later");
 8010160:	491d      	ldr	r1, [pc, #116]	; (80101d8 <AirQuality+0xa0>)
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f7fe feb8 	bl	800eed8 <cli_printf>
 8010168:	e02e      	b.n	80101c8 <AirQuality+0x90>
	} else {

		get_sps30_measurement();
 801016a:	f7f1 fb31 	bl	80017d0 <get_sps30_measurement>
		cli_printf(cli, "%0.2f pm1.0", _RunTime_Packet.pm1_0);
 801016e:	4b19      	ldr	r3, [pc, #100]	; (80101d4 <AirQuality+0x9c>)
 8010170:	691b      	ldr	r3, [r3, #16]
 8010172:	4618      	mov	r0, r3
 8010174:	f7f0 fa00 	bl	8000578 <__aeabi_f2d>
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	4917      	ldr	r1, [pc, #92]	; (80101dc <AirQuality+0xa4>)
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f7fe feaa 	bl	800eed8 <cli_printf>
		cli_printf(cli, "%0.2f pm2.5 ", _RunTime_Packet.pm2_5);
 8010184:	4b13      	ldr	r3, [pc, #76]	; (80101d4 <AirQuality+0x9c>)
 8010186:	695b      	ldr	r3, [r3, #20]
 8010188:	4618      	mov	r0, r3
 801018a:	f7f0 f9f5 	bl	8000578 <__aeabi_f2d>
 801018e:	4602      	mov	r2, r0
 8010190:	460b      	mov	r3, r1
 8010192:	4913      	ldr	r1, [pc, #76]	; (80101e0 <AirQuality+0xa8>)
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f7fe fe9f 	bl	800eed8 <cli_printf>
		cli_printf(cli, "%0.2f pm4.0 ", _RunTime_Packet.pm4_0);
 801019a:	4b0e      	ldr	r3, [pc, #56]	; (80101d4 <AirQuality+0x9c>)
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7f0 f9ea 	bl	8000578 <__aeabi_f2d>
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	490e      	ldr	r1, [pc, #56]	; (80101e4 <AirQuality+0xac>)
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f7fe fe94 	bl	800eed8 <cli_printf>
		cli_printf(cli, "%0.2f pm10.0", _RunTime_Packet.pm10_0);
 80101b0:	4b08      	ldr	r3, [pc, #32]	; (80101d4 <AirQuality+0x9c>)
 80101b2:	69db      	ldr	r3, [r3, #28]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7f0 f9df 	bl	8000578 <__aeabi_f2d>
 80101ba:	4602      	mov	r2, r0
 80101bc:	460b      	mov	r3, r1
 80101be:	490a      	ldr	r1, [pc, #40]	; (80101e8 <AirQuality+0xb0>)
 80101c0:	68f8      	ldr	r0, [r7, #12]
 80101c2:	f7fe fe89 	bl	800eed8 <cli_printf>
	}

}
 80101c6:	bf00      	nop
 80101c8:	bf00      	nop
 80101ca:	3710      	adds	r7, #16
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	08021600 	.word	0x08021600
 80101d4:	20001494 	.word	0x20001494
 80101d8:	0802161c 	.word	0x0802161c
 80101dc:	0802163c 	.word	0x0802163c
 80101e0:	08021648 	.word	0x08021648
 80101e4:	08021658 	.word	0x08021658
 80101e8:	08021668 	.word	0x08021668

080101ec <BattVolt>:

void BattVolt(EmbeddedCli *cli, char *args, void *context) {
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]

	//float batteryVoltage;
	adc_Measure(&_RunTime_Packet.battery_voltage);
 80101f8:	4808      	ldr	r0, [pc, #32]	; (801021c <BattVolt+0x30>)
 80101fa:	f002 fc19 	bl	8012a30 <adc_Measure>
	cli_printf(cli, "Battery voltage: %0.2f", _RunTime_Packet.battery_voltage);
 80101fe:	4b08      	ldr	r3, [pc, #32]	; (8010220 <BattVolt+0x34>)
 8010200:	6a1b      	ldr	r3, [r3, #32]
 8010202:	4618      	mov	r0, r3
 8010204:	f7f0 f9b8 	bl	8000578 <__aeabi_f2d>
 8010208:	4602      	mov	r2, r0
 801020a:	460b      	mov	r3, r1
 801020c:	4905      	ldr	r1, [pc, #20]	; (8010224 <BattVolt+0x38>)
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f7fe fe62 	bl	800eed8 <cli_printf>

}
 8010214:	bf00      	nop
 8010216:	3710      	adds	r7, #16
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	200014b4 	.word	0x200014b4
 8010220:	20001494 	.word	0x20001494
 8010224:	08021678 	.word	0x08021678

08010228 <port>:

void port(EmbeddedCli *cli, char *args, void *context) {
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]
	cli_printf(cli, "Auxiliary port value measured(inactive)");
 8010234:	4903      	ldr	r1, [pc, #12]	; (8010244 <port+0x1c>)
 8010236:	68f8      	ldr	r0, [r7, #12]
 8010238:	f7fe fe4e 	bl	800eed8 <cli_printf>
}
 801023c:	bf00      	nop
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	08021690 	.word	0x08021690

08010248 <showall>:

void showall(EmbeddedCli *cli, char *args, void *context) {
 8010248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801024a:	b0a3      	sub	sp, #140	; 0x8c
 801024c:	af06      	add	r7, sp, #24
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
	char buff_pm[20];
	char buff_filewritten[50];

	if (_RunTime_Packet.usb_detection || _RunTime_Packet.usb_first_start) {
 8010254:	4b8f      	ldr	r3, [pc, #572]	; (8010494 <showall+0x24c>)
 8010256:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801025a:	2b00      	cmp	r3, #0
 801025c:	d104      	bne.n	8010268 <showall+0x20>
 801025e:	4b8d      	ldr	r3, [pc, #564]	; (8010494 <showall+0x24c>)
 8010260:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010264:	2b00      	cmp	r3, #0
 8010266:	d006      	beq.n	8010276 <showall+0x2e>
		sprintf(buff_pm, "Calculating");
 8010268:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801026c:	498a      	ldr	r1, [pc, #552]	; (8010498 <showall+0x250>)
 801026e:	4618      	mov	r0, r3
 8010270:	f00c fcaa 	bl	801cbc8 <siprintf>
 8010274:	e00d      	b.n	8010292 <showall+0x4a>
	} else {

		get_sps30_measurement();
 8010276:	f7f1 faab 	bl	80017d0 <get_sps30_measurement>
		sprintf(buff_pm, "%0.2f", _RunTime_Packet.pm2_5);
 801027a:	4b86      	ldr	r3, [pc, #536]	; (8010494 <showall+0x24c>)
 801027c:	695b      	ldr	r3, [r3, #20]
 801027e:	4618      	mov	r0, r3
 8010280:	f7f0 f97a 	bl	8000578 <__aeabi_f2d>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 801028c:	4983      	ldr	r1, [pc, #524]	; (801049c <showall+0x254>)
 801028e:	f00c fc9b 	bl	801cbc8 <siprintf>

	}
	adc_Measure(&_RunTime_Packet.battery_voltage);
 8010292:	4883      	ldr	r0, [pc, #524]	; (80104a0 <showall+0x258>)
 8010294:	f002 fbcc 	bl	8012a30 <adc_Measure>
	if (HAL_GPIO_ReadPin(OUT_MOTION_GPIO_Port, OUT_MOTION_Pin)) {
 8010298:	2101      	movs	r1, #1
 801029a:	4882      	ldr	r0, [pc, #520]	; (80104a4 <showall+0x25c>)
 801029c:	f7f5 fc96 	bl	8005bcc <HAL_GPIO_ReadPin>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d003      	beq.n	80102ae <showall+0x66>
		_RunTime_Packet.motion_detection = 1;
 80102a6:	4b7b      	ldr	r3, [pc, #492]	; (8010494 <showall+0x24c>)
 80102a8:	2201      	movs	r2, #1
 80102aa:	731a      	strb	r2, [r3, #12]
 80102ac:	e002      	b.n	80102b4 <showall+0x6c>
	} else {
		_RunTime_Packet.motion_detection = 0;
 80102ae:	4b79      	ldr	r3, [pc, #484]	; (8010494 <showall+0x24c>)
 80102b0:	2200      	movs	r2, #0
 80102b2:	731a      	strb	r2, [r3, #12]
	}

	if (!_RunTime_Packet.scd4x_i2c_error) {
 80102b4:	4b77      	ldr	r3, [pc, #476]	; (8010494 <showall+0x24c>)
 80102b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d101      	bne.n	80102c2 <showall+0x7a>
		get_scd4x_measurement();
 80102be:	f7f1 f9d1 	bl	8001664 <get_scd4x_measurement>
	}

	RTC_DateTypeDef gDate;
	HAL_RTC_GetDate(RTC_Handle, &gDate, RTC_FORMAT_BIN);
 80102c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102c6:	2200      	movs	r2, #0
 80102c8:	4619      	mov	r1, r3
 80102ca:	4877      	ldr	r0, [pc, #476]	; (80104a8 <showall+0x260>)
 80102cc:	f7f9 f826 	bl	800931c <HAL_RTC_GetDate>
	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80102d0:	f107 0310 	add.w	r3, r7, #16
 80102d4:	2200      	movs	r2, #0
 80102d6:	4619      	mov	r1, r3
 80102d8:	4873      	ldr	r0, [pc, #460]	; (80104a8 <showall+0x260>)
 80102da:	f7f8 ff3d 	bl	8009158 <HAL_RTC_GetTime>

	if (datawritten == 0) {
 80102de:	4b73      	ldr	r3, [pc, #460]	; (80104ac <showall+0x264>)
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d106      	bne.n	80102f4 <showall+0xac>

		sprintf(buff_filewritten, "Data not written yet");
 80102e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102ea:	4971      	ldr	r1, [pc, #452]	; (80104b0 <showall+0x268>)
 80102ec:	4618      	mov	r0, r3
 80102ee:	f00c fc6b 	bl	801cbc8 <siprintf>
 80102f2:	e014      	b.n	801031e <showall+0xd6>

	} else if (datawritten == 1) {
 80102f4:	4b6d      	ldr	r3, [pc, #436]	; (80104ac <showall+0x264>)
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d106      	bne.n	801030a <showall+0xc2>
		sprintf(buff_filewritten, " **SUCCESSFUL** ");
 80102fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010300:	496c      	ldr	r1, [pc, #432]	; (80104b4 <showall+0x26c>)
 8010302:	4618      	mov	r0, r3
 8010304:	f00c fc60 	bl	801cbc8 <siprintf>
 8010308:	e009      	b.n	801031e <showall+0xd6>
	} else if (datawritten == 2) {
 801030a:	4b68      	ldr	r3, [pc, #416]	; (80104ac <showall+0x264>)
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	2b02      	cmp	r3, #2
 8010310:	d105      	bne.n	801031e <showall+0xd6>

		sprintf(buff_filewritten, " **FAILED** ");
 8010312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010316:	4968      	ldr	r1, [pc, #416]	; (80104b8 <showall+0x270>)
 8010318:	4618      	mov	r0, r3
 801031a:	f00c fc55 	bl	801cbc8 <siprintf>
	}

	cli_printf(cli, "");
 801031e:	4967      	ldr	r1, [pc, #412]	; (80104bc <showall+0x274>)
 8010320:	68f8      	ldr	r0, [r7, #12]
 8010322:	f7fe fdd9 	bl	800eed8 <cli_printf>
	cli_printf(cli, "");
 8010326:	4965      	ldr	r1, [pc, #404]	; (80104bc <showall+0x274>)
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f7fe fdd5 	bl	800eed8 <cli_printf>
	cli_printf(cli, "");
 801032e:	4963      	ldr	r1, [pc, #396]	; (80104bc <showall+0x274>)
 8010330:	68f8      	ldr	r0, [r7, #12]
 8010332:	f7fe fdd1 	bl	800eed8 <cli_printf>

	cli_printf(cli, " *devEUI           | %s                       ",
 8010336:	f7f2 f80f 	bl	8002358 <ver_GetUid>
 801033a:	4603      	mov	r3, r0
 801033c:	461a      	mov	r2, r3
 801033e:	4960      	ldr	r1, [pc, #384]	; (80104c0 <showall+0x278>)
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f7fe fdc9 	bl	800eed8 <cli_printf>
			ver_GetUid());
	cli_printf(cli, " *Id               | %s                       ",
 8010346:	4a5f      	ldr	r2, [pc, #380]	; (80104c4 <showall+0x27c>)
 8010348:	495f      	ldr	r1, [pc, #380]	; (80104c8 <showall+0x280>)
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f7fe fdc4 	bl	800eed8 <cli_printf>
			_Flash_Packet.id);
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8010350:	7c3b      	ldrb	r3, [r7, #16]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8010352:	461a      	mov	r2, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8010354:	7c7b      	ldrb	r3, [r7, #17]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 8010356:	4619      	mov	r1, r3
			gTime.Hours, gTime.Minutes, gTime.Seconds);
 8010358:	7cbb      	ldrb	r3, [r7, #18]
	cli_printf(cli, " *Timestamp        | %02d:%02d:%02d           ",
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	460b      	mov	r3, r1
 801035e:	495b      	ldr	r1, [pc, #364]	; (80104cc <showall+0x284>)
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f7fe fdb9 	bl	800eed8 <cli_printf>
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
			gDate.Date, gDate.Month, gDate.Year);
 8010366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 801036a:	461a      	mov	r2, r3
			gDate.Date, gDate.Month, gDate.Year);
 801036c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8010370:	4619      	mov	r1, r3
			gDate.Date, gDate.Month, gDate.Year);
 8010372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
	cli_printf(cli, " *Date             | %02d.%02d.%02d           ",
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	460b      	mov	r3, r1
 801037a:	4955      	ldr	r1, [pc, #340]	; (80104d0 <showall+0x288>)
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f7fe fdab 	bl	800eed8 <cli_printf>
	cli_printf(cli, " *Location         | %s                       ",
 8010382:	4a54      	ldr	r2, [pc, #336]	; (80104d4 <showall+0x28c>)
 8010384:	4954      	ldr	r1, [pc, #336]	; (80104d8 <showall+0x290>)
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f7fe fda6 	bl	800eed8 <cli_printf>
			_Flash_Packet.location);
	cli_printf(cli, " *Filename         | %s                       ",
 801038c:	4a53      	ldr	r2, [pc, #332]	; (80104dc <showall+0x294>)
 801038e:	4954      	ldr	r1, [pc, #336]	; (80104e0 <showall+0x298>)
 8010390:	68f8      	ldr	r0, [r7, #12]
 8010392:	f7fe fda1 	bl	800eed8 <cli_printf>
			filename_ver_date);
	cli_printf(cli, " *Fileformat       | %s                       ",
 8010396:	4a53      	ldr	r2, [pc, #332]	; (80104e4 <showall+0x29c>)
 8010398:	4953      	ldr	r1, [pc, #332]	; (80104e8 <showall+0x2a0>)
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	f7fe fd9c 	bl	800eed8 <cli_printf>
			_Flash_Packet.File_Format);
	cli_printf(cli, " *Group            | %s                       ",
 80103a0:	4a52      	ldr	r2, [pc, #328]	; (80104ec <showall+0x2a4>)
 80103a2:	4953      	ldr	r1, [pc, #332]	; (80104f0 <showall+0x2a8>)
 80103a4:	68f8      	ldr	r0, [r7, #12]
 80103a6:	f7fe fd97 	bl	800eed8 <cli_printf>
			_Flash_Packet.group);
	cli_printf(cli, " *Interval         | %dmin                       ",
 80103aa:	4b52      	ldr	r3, [pc, #328]	; (80104f4 <showall+0x2ac>)
 80103ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80103b0:	461a      	mov	r2, r3
 80103b2:	4951      	ldr	r1, [pc, #324]	; (80104f8 <showall+0x2b0>)
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f7fe fd8f 	bl	800eed8 <cli_printf>
			_Flash_Packet.Time_Interval);
	cli_printf(cli, " *Co2              | %d                       ",
			_RunTime_Packet.co2);
 80103ba:	4b36      	ldr	r3, [pc, #216]	; (8010494 <showall+0x24c>)
 80103bc:	881b      	ldrh	r3, [r3, #0]
	cli_printf(cli, " *Co2              | %d                       ",
 80103be:	461a      	mov	r2, r3
 80103c0:	494e      	ldr	r1, [pc, #312]	; (80104fc <showall+0x2b4>)
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f7fe fd88 	bl	800eed8 <cli_printf>
	cli_printf(cli, " *Temperature      | %dC                      ",
 80103c8:	4b32      	ldr	r3, [pc, #200]	; (8010494 <showall+0x24c>)
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	461a      	mov	r2, r3
 80103ce:	494c      	ldr	r1, [pc, #304]	; (8010500 <showall+0x2b8>)
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f7fe fd81 	bl	800eed8 <cli_printf>
			_RunTime_Packet.temperature);
	cli_printf(cli, " *Humidity         | %d%%                     ",
 80103d6:	4b2f      	ldr	r3, [pc, #188]	; (8010494 <showall+0x24c>)
 80103d8:	689b      	ldr	r3, [r3, #8]
 80103da:	461a      	mov	r2, r3
 80103dc:	4949      	ldr	r1, [pc, #292]	; (8010504 <showall+0x2bc>)
 80103de:	68f8      	ldr	r0, [r7, #12]
 80103e0:	f7fe fd7a 	bl	800eed8 <cli_printf>
			_RunTime_Packet.humidity);
	cli_printf(cli, " *PIR              | %s                       ",
			_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 80103e4:	4b2b      	ldr	r3, [pc, #172]	; (8010494 <showall+0x24c>)
 80103e6:	7b1b      	ldrb	r3, [r3, #12]
	cli_printf(cli, " *PIR              | %s                       ",
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d101      	bne.n	80103f0 <showall+0x1a8>
 80103ec:	4b46      	ldr	r3, [pc, #280]	; (8010508 <showall+0x2c0>)
 80103ee:	e000      	b.n	80103f2 <showall+0x1aa>
 80103f0:	4b46      	ldr	r3, [pc, #280]	; (801050c <showall+0x2c4>)
 80103f2:	461a      	mov	r2, r3
 80103f4:	4946      	ldr	r1, [pc, #280]	; (8010510 <showall+0x2c8>)
 80103f6:	68f8      	ldr	r0, [r7, #12]
 80103f8:	f7fe fd6e 	bl	800eed8 <cli_printf>
	cli_printf(cli, " *Pm2.5            | %s                       ", buff_pm);
 80103fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010400:	461a      	mov	r2, r3
 8010402:	4944      	ldr	r1, [pc, #272]	; (8010514 <showall+0x2cc>)
 8010404:	68f8      	ldr	r0, [r7, #12]
 8010406:	f7fe fd67 	bl	800eed8 <cli_printf>
	cli_printf(cli, " *Port             | Inactive                 ");
 801040a:	4943      	ldr	r1, [pc, #268]	; (8010518 <showall+0x2d0>)
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f7fe fd63 	bl	800eed8 <cli_printf>
	cli_printf(cli, " *Battery          | %0.2f                    ",
			_RunTime_Packet.battery_voltage);
 8010412:	4b20      	ldr	r3, [pc, #128]	; (8010494 <showall+0x24c>)
 8010414:	6a1b      	ldr	r3, [r3, #32]
	cli_printf(cli, " *Battery          | %0.2f                    ",
 8010416:	4618      	mov	r0, r3
 8010418:	f7f0 f8ae 	bl	8000578 <__aeabi_f2d>
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	493e      	ldr	r1, [pc, #248]	; (801051c <showall+0x2d4>)
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f7fe fd58 	bl	800eed8 <cli_printf>
	cli_printf(cli, " *Last_Packet      | [Date:%02d.%02d.%02d] [Time: %02d:%02d:%02d] [Filename: %s] [Packet Status: %s]",
 8010428:	4b3d      	ldr	r3, [pc, #244]	; (8010520 <showall+0x2d8>)
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	461d      	mov	r5, r3
 801042e:	4b3d      	ldr	r3, [pc, #244]	; (8010524 <showall+0x2dc>)
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	461e      	mov	r6, r3
 8010434:	4b3c      	ldr	r3, [pc, #240]	; (8010528 <showall+0x2e0>)
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	461a      	mov	r2, r3
 801043a:	4b3c      	ldr	r3, [pc, #240]	; (801052c <showall+0x2e4>)
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	4619      	mov	r1, r3
 8010440:	4b3b      	ldr	r3, [pc, #236]	; (8010530 <showall+0x2e8>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	4618      	mov	r0, r3
 8010446:	4b3b      	ldr	r3, [pc, #236]	; (8010534 <showall+0x2ec>)
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	461c      	mov	r4, r3
 801044c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010450:	9305      	str	r3, [sp, #20]
 8010452:	4b28      	ldr	r3, [pc, #160]	; (80104f4 <showall+0x2ac>)
 8010454:	9304      	str	r3, [sp, #16]
 8010456:	9403      	str	r4, [sp, #12]
 8010458:	9002      	str	r0, [sp, #8]
 801045a:	9101      	str	r1, [sp, #4]
 801045c:	9200      	str	r2, [sp, #0]
 801045e:	4633      	mov	r3, r6
 8010460:	462a      	mov	r2, r5
 8010462:	4935      	ldr	r1, [pc, #212]	; (8010538 <showall+0x2f0>)
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f7fe fd37 	bl	800eed8 <cli_printf>
			fileWrite_day, fileWrite_month, fileWrite_year, fileWrite_hour,
			fileWrite_min, fileWrite_sec, _Flash_Packet.File_Name,
			buff_filewritten);
	cli_printf(cli, " *Scheduled_Packet | [Time: %s]               ",
 801046a:	4a34      	ldr	r2, [pc, #208]	; (801053c <showall+0x2f4>)
 801046c:	4934      	ldr	r1, [pc, #208]	; (8010540 <showall+0x2f8>)
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f7fe fd32 	bl	800eed8 <cli_printf>
			scheduled_packet);

	cli_printf(cli, "");
 8010474:	4911      	ldr	r1, [pc, #68]	; (80104bc <showall+0x274>)
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f7fe fd2e 	bl	800eed8 <cli_printf>
	cli_printf(cli, "");
 801047c:	490f      	ldr	r1, [pc, #60]	; (80104bc <showall+0x274>)
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f7fe fd2a 	bl	800eed8 <cli_printf>
	cli_printf(cli, "");
 8010484:	490d      	ldr	r1, [pc, #52]	; (80104bc <showall+0x274>)
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f7fe fd26 	bl	800eed8 <cli_printf>
}
 801048c:	bf00      	nop
 801048e:	3774      	adds	r7, #116	; 0x74
 8010490:	46bd      	mov	sp, r7
 8010492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010494:	20001494 	.word	0x20001494
 8010498:	080216b8 	.word	0x080216b8
 801049c:	080216c4 	.word	0x080216c4
 80104a0:	200014b4 	.word	0x200014b4
 80104a4:	40020000 	.word	0x40020000
 80104a8:	200017e4 	.word	0x200017e4
 80104ac:	20002337 	.word	0x20002337
 80104b0:	080216cc 	.word	0x080216cc
 80104b4:	080216e4 	.word	0x080216e4
 80104b8:	080216f8 	.word	0x080216f8
 80104bc:	08021708 	.word	0x08021708
 80104c0:	0802170c 	.word	0x0802170c
 80104c4:	200013c9 	.word	0x200013c9
 80104c8:	0802173c 	.word	0x0802173c
 80104cc:	0802176c 	.word	0x0802176c
 80104d0:	0802179c 	.word	0x0802179c
 80104d4:	200013fb 	.word	0x200013fb
 80104d8:	080217cc 	.word	0x080217cc
 80104dc:	200022cc 	.word	0x200022cc
 80104e0:	080217fc 	.word	0x080217fc
 80104e4:	20001360 	.word	0x20001360
 80104e8:	0802182c 	.word	0x0802182c
 80104ec:	2000145f 	.word	0x2000145f
 80104f0:	0802185c 	.word	0x0802185c
 80104f4:	200012fc 	.word	0x200012fc
 80104f8:	0802188c 	.word	0x0802188c
 80104fc:	080218c0 	.word	0x080218c0
 8010500:	080218f0 	.word	0x080218f0
 8010504:	08021920 	.word	0x08021920
 8010508:	080215cc 	.word	0x080215cc
 801050c:	080215d4 	.word	0x080215d4
 8010510:	08021950 	.word	0x08021950
 8010514:	08021980 	.word	0x08021980
 8010518:	080219b0 	.word	0x080219b0
 801051c:	080219e0 	.word	0x080219e0
 8010520:	20002331 	.word	0x20002331
 8010524:	20002332 	.word	0x20002332
 8010528:	20002333 	.word	0x20002333
 801052c:	20002334 	.word	0x20002334
 8010530:	20002335 	.word	0x20002335
 8010534:	20002336 	.word	0x20002336
 8010538:	08021a10 	.word	0x08021a10
 801053c:	2000002c 	.word	0x2000002c
 8010540:	08021a78 	.word	0x08021a78

08010544 <systemversion>:

void systemversion(EmbeddedCli *cli, char *args, void *context) {
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]


	cli_printf(cli, "");
 8010550:	4911      	ldr	r1, [pc, #68]	; (8010598 <systemversion+0x54>)
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	f7fe fcc0 	bl	800eed8 <cli_printf>
		cli_printf(cli, "");
 8010558:	490f      	ldr	r1, [pc, #60]	; (8010598 <systemversion+0x54>)
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f7fe fcbc 	bl	800eed8 <cli_printf>
		cli_printf(cli, "");
 8010560:	490d      	ldr	r1, [pc, #52]	; (8010598 <systemversion+0x54>)
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f7fe fcb8 	bl	800eed8 <cli_printf>

		cli_printf(cli, " *Hardware | TF410 Version 1.3                       ");
 8010568:	490c      	ldr	r1, [pc, #48]	; (801059c <systemversion+0x58>)
 801056a:	68f8      	ldr	r0, [r7, #12]
 801056c:	f7fe fcb4 	bl	800eed8 <cli_printf>
		cli_printf(cli, " *Software | TF410 Version 1.5                       ");
 8010570:	490b      	ldr	r1, [pc, #44]	; (80105a0 <systemversion+0x5c>)
 8010572:	68f8      	ldr	r0, [r7, #12]
 8010574:	f7fe fcb0 	bl	800eed8 <cli_printf>

		cli_printf(cli, "");
 8010578:	4907      	ldr	r1, [pc, #28]	; (8010598 <systemversion+0x54>)
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	f7fe fcac 	bl	800eed8 <cli_printf>
			cli_printf(cli, "");
 8010580:	4905      	ldr	r1, [pc, #20]	; (8010598 <systemversion+0x54>)
 8010582:	68f8      	ldr	r0, [r7, #12]
 8010584:	f7fe fca8 	bl	800eed8 <cli_printf>
			cli_printf(cli, "");
 8010588:	4903      	ldr	r1, [pc, #12]	; (8010598 <systemversion+0x54>)
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f7fe fca4 	bl	800eed8 <cli_printf>

}
 8010590:	bf00      	nop
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	08021708 	.word	0x08021708
 801059c:	08021aa8 	.word	0x08021aa8
 80105a0:	08021ae0 	.word	0x08021ae0

080105a4 <initializeEmbeddedCli>:


/**
 * Initializes the Embedded CLI instance and sets up command bindings.
 */
void initializeEmbeddedCli() {
 80105a4:	b5b0      	push	{r4, r5, r7, lr}
 80105a6:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80105aa:	af02      	add	r7, sp, #8
	cli = embeddedCliNewDefault();
 80105ac:	f000 fcf1 	bl	8010f92 <embeddedCliNewDefault>
 80105b0:	4603      	mov	r3, r0
 80105b2:	4aab      	ldr	r2, [pc, #684]	; (8010860 <initializeEmbeddedCli+0x2bc>)
 80105b4:	6013      	str	r3, [r2, #0]

	CliCommandBinding clear_binding = { .name = "clear", .help =
 80105b6:	4bab      	ldr	r3, [pc, #684]	; (8010864 <initializeEmbeddedCli+0x2c0>)
 80105b8:	f507 7417 	add.w	r4, r7, #604	; 0x25c
 80105bc:	461d      	mov	r5, r3
 80105be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105c2:	682b      	ldr	r3, [r5, #0]
 80105c4:	6023      	str	r3, [r4, #0]
			"Clears the console", .tokenizeArgs = true, .context = NULL,
			.binding = onClearCLI };

	CliCommandBinding Debug_scd4x_PM25 = { .name = "debug", .help =
 80105c6:	4ba8      	ldr	r3, [pc, #672]	; (8010868 <initializeEmbeddedCli+0x2c4>)
 80105c8:	f507 7412 	add.w	r4, r7, #584	; 0x248
 80105cc:	461d      	mov	r5, r3
 80105ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105d2:	682b      	ldr	r3, [r5, #0]
 80105d4:	6023      	str	r3, [r4, #0]
			"Enable/Disable debug messages for scd4x and PM sensor",
			.tokenizeArgs = true, .context = NULL, .binding = debug_scd4x_PM25 };

	CliCommandBinding Get_DeviceSignature = { .name = "get-device-signature",
 80105d6:	4ba5      	ldr	r3, [pc, #660]	; (801086c <initializeEmbeddedCli+0x2c8>)
 80105d8:	f507 740d 	add.w	r4, r7, #564	; 0x234
 80105dc:	461d      	mov	r5, r3
 80105de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105e2:	682b      	ldr	r3, [r5, #0]
 80105e4:	6023      	str	r3, [r4, #0]
			.help = "Unique device identifier(from STM32 electronic signature)",
			.tokenizeArgs = true, .context = NULL, .binding = DeviceSignature };

	CliCommandBinding Set_ID = { .name = "set-id", .help =
 80105e6:	4ba2      	ldr	r3, [pc, #648]	; (8010870 <initializeEmbeddedCli+0x2cc>)
 80105e8:	f507 7408 	add.w	r4, r7, #544	; 0x220
 80105ec:	461d      	mov	r5, r3
 80105ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105f2:	682b      	ldr	r3, [r5, #0]
 80105f4:	6023      	str	r3, [r4, #0]
			"Asset number assigned to the device", .tokenizeArgs = true,
			.context = NULL, .binding = SetID };

	CliCommandBinding Set_Location = { .name = "set-location", .help =
 80105f6:	4b9f      	ldr	r3, [pc, #636]	; (8010874 <initializeEmbeddedCli+0x2d0>)
 80105f8:	f507 7403 	add.w	r4, r7, #524	; 0x20c
 80105fc:	461d      	mov	r5, r3
 80105fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010602:	682b      	ldr	r3, [r5, #0]
 8010604:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Set_name = { .name = "set-name", .help =
//				"Optional field to assign name to the device", .tokenizeArgs = true, .context = NULL,
//				.binding = Setname };

	CliCommandBinding Set_group = { .name = "set-group", .help =
 8010606:	4b9c      	ldr	r3, [pc, #624]	; (8010878 <initializeEmbeddedCli+0x2d4>)
 8010608:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 801060c:	461d      	mov	r5, r3
 801060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010612:	682b      	ldr	r3, [r5, #0]
 8010614:	6023      	str	r3, [r4, #0]
			"Optional field to assign group to the device",
			.tokenizeArgs = true, .context = NULL, .binding = Setgroup };

	CliCommandBinding Get_ID = { .name = "get-id", .help = "gets ID",
 8010616:	4b99      	ldr	r3, [pc, #612]	; (801087c <initializeEmbeddedCli+0x2d8>)
 8010618:	f507 74f2 	add.w	r4, r7, #484	; 0x1e4
 801061c:	461d      	mov	r5, r3
 801061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010622:	682b      	ldr	r3, [r5, #0]
 8010624:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = GetID };

	CliCommandBinding Get_Location = { .name = "get-location", .help =
 8010626:	4b96      	ldr	r3, [pc, #600]	; (8010880 <initializeEmbeddedCli+0x2dc>)
 8010628:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 801062c:	461d      	mov	r5, r3
 801062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010632:	682b      	ldr	r3, [r5, #0]
 8010634:	6023      	str	r3, [r4, #0]

//	CliCommandBinding Get_name = { .name = "get-name", .help =
//				"gets name", .tokenizeArgs = true, .context = NULL,
//				.binding = Getname };

	CliCommandBinding Get_group = { .name = "get-group", .help = "gets group",
 8010636:	4b93      	ldr	r3, [pc, #588]	; (8010884 <initializeEmbeddedCli+0x2e0>)
 8010638:	f507 74de 	add.w	r4, r7, #444	; 0x1bc
 801063c:	461d      	mov	r5, r3
 801063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010642:	682b      	ldr	r3, [r5, #0]
 8010644:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = Getgroup };

	CliCommandBinding Set_Date = { .name = "set-date", .help =
 8010646:	4b90      	ldr	r3, [pc, #576]	; (8010888 <initializeEmbeddedCli+0x2e4>)
 8010648:	f507 74d4 	add.w	r4, r7, #424	; 0x1a8
 801064c:	461d      	mov	r5, r3
 801064e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010652:	682b      	ldr	r3, [r5, #0]
 8010654:	6023      	str	r3, [r4, #0]
			"In day:month:year", .tokenizeArgs = true, .context = NULL,
			.binding = SetDate };

	CliCommandBinding Set_Time = { .name = "set-time", .help = "In hh:mm:ss",
 8010656:	4b8d      	ldr	r3, [pc, #564]	; (801088c <initializeEmbeddedCli+0x2e8>)
 8010658:	f507 74ca 	add.w	r4, r7, #404	; 0x194
 801065c:	461d      	mov	r5, r3
 801065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010662:	682b      	ldr	r3, [r5, #0]
 8010664:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = SetTime };

	CliCommandBinding Get_Date = { .name = "get-date", .help =
 8010666:	4b8a      	ldr	r3, [pc, #552]	; (8010890 <initializeEmbeddedCli+0x2ec>)
 8010668:	f507 74c0 	add.w	r4, r7, #384	; 0x180
 801066c:	461d      	mov	r5, r3
 801066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010672:	682b      	ldr	r3, [r5, #0]
 8010674:	6023      	str	r3, [r4, #0]
			"Get Systems Date", .tokenizeArgs = true, .context = NULL,
			.binding = GetDate };

	CliCommandBinding Get_Time = { .name = "get-time", .help =
 8010676:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801067a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801067e:	4a85      	ldr	r2, [pc, #532]	; (8010894 <initializeEmbeddedCli+0x2f0>)
 8010680:	461c      	mov	r4, r3
 8010682:	4615      	mov	r5, r2
 8010684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010688:	682b      	ldr	r3, [r5, #0]
 801068a:	6023      	str	r3, [r4, #0]
			"Get Systems Time", .tokenizeArgs = true, .context = NULL,
			.binding = GetTime };

	CliCommandBinding Set_Interval = { .name = "set-interval", .help =
 801068c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010690:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010694:	4a80      	ldr	r2, [pc, #512]	; (8010898 <initializeEmbeddedCli+0x2f4>)
 8010696:	461c      	mov	r4, r3
 8010698:	4615      	mov	r5, r2
 801069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801069e:	682b      	ldr	r3, [r5, #0]
 80106a0:	6023      	str	r3, [r4, #0]
			"Set Time Interval for fetching the data", .tokenizeArgs = true,
			.context = NULL, .binding = SetInterval };

	CliCommandBinding Get_Interval = { .name = "get-interval", .help =
 80106a2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106aa:	4a7c      	ldr	r2, [pc, #496]	; (801089c <initializeEmbeddedCli+0x2f8>)
 80106ac:	461c      	mov	r4, r3
 80106ae:	4615      	mov	r5, r2
 80106b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106b4:	682b      	ldr	r3, [r5, #0]
 80106b6:	6023      	str	r3, [r4, #0]
			"Get Time Interval", .tokenizeArgs = true, .context = NULL,
			.binding = GetInterval };

	CliCommandBinding Set_Filename = { .name = "set-filename", .help =
 80106b8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80106c0:	4a77      	ldr	r2, [pc, #476]	; (80108a0 <initializeEmbeddedCli+0x2fc>)
 80106c2:	461c      	mov	r4, r3
 80106c4:	4615      	mov	r5, r2
 80106c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106ca:	682b      	ldr	r3, [r5, #0]
 80106cc:	6023      	str	r3, [r4, #0]
			"Filename prefix as in \"value+date\" in file naming convention",
			.tokenizeArgs = true, .context = NULL, .binding = SetFilename };

	CliCommandBinding Get_Filename = { .name = "get-filename", .help =
 80106ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80106d6:	4a73      	ldr	r2, [pc, #460]	; (80108a4 <initializeEmbeddedCli+0x300>)
 80106d8:	461c      	mov	r4, r3
 80106da:	4615      	mov	r5, r2
 80106dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106e0:	682b      	ldr	r3, [r5, #0]
 80106e2:	6023      	str	r3, [r4, #0]
			"Get filename", .tokenizeArgs = true, .context = NULL, .binding =
			GetFilename };

	CliCommandBinding Set_Fileformat = { .name = "set-fileformat", .help =
 80106e4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106e8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80106ec:	4a6e      	ldr	r2, [pc, #440]	; (80108a8 <initializeEmbeddedCli+0x304>)
 80106ee:	461c      	mov	r4, r3
 80106f0:	4615      	mov	r5, r2
 80106f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106f6:	682b      	ldr	r3, [r5, #0]
 80106f8:	6023      	str	r3, [r4, #0]
			"Set desired file format", .tokenizeArgs = true, .context = NULL,
			.binding = SetFileformat };

	CliCommandBinding Get_Fileformat = { .name = "get-fileformat", .help =
 80106fa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80106fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8010702:	4a6a      	ldr	r2, [pc, #424]	; (80108ac <initializeEmbeddedCli+0x308>)
 8010704:	461c      	mov	r4, r3
 8010706:	4615      	mov	r5, r2
 8010708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801070c:	682b      	ldr	r3, [r5, #0]
 801070e:	6023      	str	r3, [r4, #0]
			"Get file format", .tokenizeArgs = true, .context = NULL, .binding =
			GetFileformat };

	CliCommandBinding Fan_Clean = { .name = "fan-clean", .help =
 8010710:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010714:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010718:	4a65      	ldr	r2, [pc, #404]	; (80108b0 <initializeEmbeddedCli+0x30c>)
 801071a:	461c      	mov	r4, r3
 801071c:	4615      	mov	r5, r2
 801071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010722:	682b      	ldr	r3, [r5, #0]
 8010724:	6023      	str	r3, [r4, #0]
			"Particle sensor fan cleaning", .tokenizeArgs = true, .context =
			NULL, .binding = fanclean };

	CliCommandBinding Co2_Calibration = { .name = "co2-calibration", .help =
 8010726:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801072a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801072e:	4a61      	ldr	r2, [pc, #388]	; (80108b4 <initializeEmbeddedCli+0x310>)
 8010730:	461c      	mov	r4, r3
 8010732:	4615      	mov	r5, r2
 8010734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010738:	682b      	ldr	r3, [r5, #0]
 801073a:	6023      	str	r3, [r4, #0]
			"Calibrate the co2 sensor", .tokenizeArgs = true, .context = NULL,
			.binding = co2calibrate };

	CliCommandBinding Systemreset = { .name = "system-restart", .help =
 801073c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010740:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8010744:	4a5c      	ldr	r2, [pc, #368]	; (80108b8 <initializeEmbeddedCli+0x314>)
 8010746:	461c      	mov	r4, r3
 8010748:	4615      	mov	r5, r2
 801074a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801074c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801074e:	682b      	ldr	r3, [r5, #0]
 8010750:	6023      	str	r3, [r4, #0]
			"Restart the system", .tokenizeArgs = true, .context = NULL,
			.binding = SystemRestart };

	CliCommandBinding Co2_Level = { .name = "co2-level", .help =
 8010752:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010756:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801075a:	4a58      	ldr	r2, [pc, #352]	; (80108bc <initializeEmbeddedCli+0x318>)
 801075c:	461c      	mov	r4, r3
 801075e:	4615      	mov	r5, r2
 8010760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	6023      	str	r3, [r4, #0]
			"Co2 measured in ppm", .tokenizeArgs = true, .context = NULL,
			.binding = Co2Level };

	CliCommandBinding Temp_Level = { .name = "temperature-level", .help =
 8010768:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801076c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010770:	4a53      	ldr	r2, [pc, #332]	; (80108c0 <initializeEmbeddedCli+0x31c>)
 8010772:	461c      	mov	r4, r3
 8010774:	4615      	mov	r5, r2
 8010776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801077a:	682b      	ldr	r3, [r5, #0]
 801077c:	6023      	str	r3, [r4, #0]
			"Temperature measured in Celsius", .tokenizeArgs = true, .context =
			NULL, .binding = TempLevel };

	CliCommandBinding Humid_Level = { .name = "humidity-level", .help =
 801077e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010782:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010786:	4a4f      	ldr	r2, [pc, #316]	; (80108c4 <initializeEmbeddedCli+0x320>)
 8010788:	461c      	mov	r4, r3
 801078a:	4615      	mov	r5, r2
 801078c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801078e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010790:	682b      	ldr	r3, [r5, #0]
 8010792:	6023      	str	r3, [r4, #0]
			"Humidity measured in % of relative", .tokenizeArgs = true,
			.context = NULL, .binding = HumidLevel };

	CliCommandBinding Motion_Detection = { .name = "motion-detection", .help =
 8010794:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010798:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801079c:	4a4a      	ldr	r2, [pc, #296]	; (80108c8 <initializeEmbeddedCli+0x324>)
 801079e:	461c      	mov	r4, r3
 80107a0:	4615      	mov	r5, r2
 80107a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107a6:	682b      	ldr	r3, [r5, #0]
 80107a8:	6023      	str	r3, [r4, #0]
			"Movement detected - yes or no", .tokenizeArgs = true, .context =
			NULL, .binding = MotionDetection };

	CliCommandBinding Air_Quality = { .name = "air-quality", .help =
 80107aa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107ae:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80107b2:	4a46      	ldr	r2, [pc, #280]	; (80108cc <initializeEmbeddedCli+0x328>)
 80107b4:	461c      	mov	r4, r3
 80107b6:	4615      	mov	r5, r2
 80107b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107bc:	682b      	ldr	r3, [r5, #0]
 80107be:	6023      	str	r3, [r4, #0]
			"Check air quality level", .tokenizeArgs = true, .context = NULL,
			.binding = AirQuality };

	CliCommandBinding Battery_Voltage = { .name = "battery-voltage", .help =
 80107c0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107c4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80107c8:	4a41      	ldr	r2, [pc, #260]	; (80108d0 <initializeEmbeddedCli+0x32c>)
 80107ca:	461c      	mov	r4, r3
 80107cc:	4615      	mov	r5, r2
 80107ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107d2:	682b      	ldr	r3, [r5, #0]
 80107d4:	6023      	str	r3, [r4, #0]
			"Measured voltage",
			.tokenizeArgs = true, .context = NULL, .binding = BattVolt };

	CliCommandBinding _port = { .name = "port", .help = "Inactive field",
 80107d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80107de:	4a3d      	ldr	r2, [pc, #244]	; (80108d4 <initializeEmbeddedCli+0x330>)
 80107e0:	461c      	mov	r4, r3
 80107e2:	4615      	mov	r5, r2
 80107e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107e8:	682b      	ldr	r3, [r5, #0]
 80107ea:	6023      	str	r3, [r4, #0]
			.tokenizeArgs = true, .context = NULL, .binding = port };

	CliCommandBinding _showall = { .name = "show-all", .help =
 80107ec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80107f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80107f4:	4a38      	ldr	r2, [pc, #224]	; (80108d8 <initializeEmbeddedCli+0x334>)
 80107f6:	461c      	mov	r4, r3
 80107f8:	4615      	mov	r5, r2
 80107fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107fe:	682b      	ldr	r3, [r5, #0]
 8010800:	6023      	str	r3, [r4, #0]
			"Shows all parameters", .tokenizeArgs = true, .context = NULL,
			.binding = showall };

	CliCommandBinding getversion = { .name = "get-version", .help =
 8010802:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010806:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 801080a:	4a34      	ldr	r2, [pc, #208]	; (80108dc <initializeEmbeddedCli+0x338>)
 801080c:	461c      	mov	r4, r3
 801080e:	4615      	mov	r5, r2
 8010810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010814:	682b      	ldr	r3, [r5, #0]
 8010816:	6023      	str	r3, [r4, #0]
				"Shows hardware and software version", .tokenizeArgs = true, .context = NULL,
				.binding = systemversion };

	// EmbeddedCli *cli = getCliPointer;debug_scd4x_PM25
	embeddedCliAddBinding(cli, clear_binding);
 8010818:	4b11      	ldr	r3, [pc, #68]	; (8010860 <initializeEmbeddedCli+0x2bc>)
 801081a:	681c      	ldr	r4, [r3, #0]
 801081c:	466a      	mov	r2, sp
 801081e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010822:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010826:	e882 0003 	stmia.w	r2, {r0, r1}
 801082a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801082e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010830:	4620      	mov	r0, r4
 8010832:	f000 fc6c 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Debug_scd4x_PM25);
 8010836:	4b0a      	ldr	r3, [pc, #40]	; (8010860 <initializeEmbeddedCli+0x2bc>)
 8010838:	681c      	ldr	r4, [r3, #0]
 801083a:	466a      	mov	r2, sp
 801083c:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8010840:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010844:	e882 0003 	stmia.w	r2, {r0, r1}
 8010848:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801084c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801084e:	4620      	mov	r0, r4
 8010850:	f000 fc5d 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_DeviceSignature);
 8010854:	4b02      	ldr	r3, [pc, #8]	; (8010860 <initializeEmbeddedCli+0x2bc>)
 8010856:	681c      	ldr	r4, [r3, #0]
 8010858:	466a      	mov	r2, sp
 801085a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801085e:	e03f      	b.n	80108e0 <initializeEmbeddedCli+0x33c>
 8010860:	20001a70 	.word	0x20001a70
 8010864:	08021b18 	.word	0x08021b18
 8010868:	08021b2c 	.word	0x08021b2c
 801086c:	08021b40 	.word	0x08021b40
 8010870:	08021b54 	.word	0x08021b54
 8010874:	08021b68 	.word	0x08021b68
 8010878:	08021b7c 	.word	0x08021b7c
 801087c:	08021b90 	.word	0x08021b90
 8010880:	08021ba4 	.word	0x08021ba4
 8010884:	08021bb8 	.word	0x08021bb8
 8010888:	08021bcc 	.word	0x08021bcc
 801088c:	08021be0 	.word	0x08021be0
 8010890:	08021bf4 	.word	0x08021bf4
 8010894:	08021c08 	.word	0x08021c08
 8010898:	08021c1c 	.word	0x08021c1c
 801089c:	08021c30 	.word	0x08021c30
 80108a0:	08021c44 	.word	0x08021c44
 80108a4:	08021c58 	.word	0x08021c58
 80108a8:	08021c6c 	.word	0x08021c6c
 80108ac:	08021c80 	.word	0x08021c80
 80108b0:	08021c94 	.word	0x08021c94
 80108b4:	08021ca8 	.word	0x08021ca8
 80108b8:	08021cbc 	.word	0x08021cbc
 80108bc:	08021cd0 	.word	0x08021cd0
 80108c0:	08021ce4 	.word	0x08021ce4
 80108c4:	08021cf8 	.word	0x08021cf8
 80108c8:	08021d0c 	.word	0x08021d0c
 80108cc:	08021d20 	.word	0x08021d20
 80108d0:	08021d34 	.word	0x08021d34
 80108d4:	08021d48 	.word	0x08021d48
 80108d8:	08021d5c 	.word	0x08021d5c
 80108dc:	08021d70 	.word	0x08021d70
 80108e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80108e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80108e8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80108ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80108ee:	4620      	mov	r0, r4
 80108f0:	f000 fc0d 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_ID);
 80108f4:	4bd6      	ldr	r3, [pc, #856]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 80108f6:	681c      	ldr	r4, [r3, #0]
 80108f8:	466a      	mov	r2, sp
 80108fa:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80108fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010902:	e882 0003 	stmia.w	r2, {r0, r1}
 8010906:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801090a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801090c:	4620      	mov	r0, r4
 801090e:	f000 fbfe 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Location);
 8010912:	4bcf      	ldr	r3, [pc, #828]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010914:	681c      	ldr	r4, [r3, #0]
 8010916:	466a      	mov	r2, sp
 8010918:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801091c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010920:	e882 0003 	stmia.w	r2, {r0, r1}
 8010924:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8010928:	cb0e      	ldmia	r3, {r1, r2, r3}
 801092a:	4620      	mov	r0, r4
 801092c:	f000 fbef 	bl	801110e <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Set_name);
	embeddedCliAddBinding(cli, Set_group);
 8010930:	4bc7      	ldr	r3, [pc, #796]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010932:	681c      	ldr	r4, [r3, #0]
 8010934:	466a      	mov	r2, sp
 8010936:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801093a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801093e:	e882 0003 	stmia.w	r2, {r0, r1}
 8010942:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8010946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010948:	4620      	mov	r0, r4
 801094a:	f000 fbe0 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_ID);
 801094e:	4bc0      	ldr	r3, [pc, #768]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010950:	681c      	ldr	r4, [r3, #0]
 8010952:	466a      	mov	r2, sp
 8010954:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8010958:	e893 0003 	ldmia.w	r3, {r0, r1}
 801095c:	e882 0003 	stmia.w	r2, {r0, r1}
 8010960:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8010964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010966:	4620      	mov	r0, r4
 8010968:	f000 fbd1 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Location);
 801096c:	4bb8      	ldr	r3, [pc, #736]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 801096e:	681c      	ldr	r4, [r3, #0]
 8010970:	466a      	mov	r2, sp
 8010972:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8010976:	e893 0003 	ldmia.w	r3, {r0, r1}
 801097a:	e882 0003 	stmia.w	r2, {r0, r1}
 801097e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8010982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010984:	4620      	mov	r0, r4
 8010986:	f000 fbc2 	bl	801110e <embeddedCliAddBinding>
//	embeddedCliAddBinding(cli, Get_name);
	embeddedCliAddBinding(cli, Get_group);
 801098a:	4bb1      	ldr	r3, [pc, #708]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 801098c:	681c      	ldr	r4, [r3, #0]
 801098e:	466a      	mov	r2, sp
 8010990:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8010994:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010998:	e882 0003 	stmia.w	r2, {r0, r1}
 801099c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80109a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 fbb3 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Date);
 80109a8:	4ba9      	ldr	r3, [pc, #676]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 80109aa:	681c      	ldr	r4, [r3, #0]
 80109ac:	466a      	mov	r2, sp
 80109ae:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80109b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109b6:	e882 0003 	stmia.w	r2, {r0, r1}
 80109ba:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80109be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109c0:	4620      	mov	r0, r4
 80109c2:	f000 fba4 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Time);
 80109c6:	4ba2      	ldr	r3, [pc, #648]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 80109c8:	681c      	ldr	r4, [r3, #0]
 80109ca:	466a      	mov	r2, sp
 80109cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80109d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80109d8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 80109dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 fb95 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Date);
 80109e4:	4b9a      	ldr	r3, [pc, #616]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 80109e6:	681c      	ldr	r4, [r3, #0]
 80109e8:	466a      	mov	r2, sp
 80109ea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80109ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109f2:	e882 0003 	stmia.w	r2, {r0, r1}
 80109f6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80109fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109fc:	4620      	mov	r0, r4
 80109fe:	f000 fb86 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Time);
 8010a02:	4b93      	ldr	r3, [pc, #588]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010a04:	681c      	ldr	r4, [r3, #0]
 8010a06:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a0e:	466d      	mov	r5, sp
 8010a10:	f103 020c 	add.w	r2, r3, #12
 8010a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a18:	e885 0003 	stmia.w	r5, {r0, r1}
 8010a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a1e:	4620      	mov	r0, r4
 8010a20:	f000 fb75 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Interval);
 8010a24:	4b8a      	ldr	r3, [pc, #552]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010a26:	681c      	ldr	r4, [r3, #0]
 8010a28:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8010a30:	466d      	mov	r5, sp
 8010a32:	f103 020c 	add.w	r2, r3, #12
 8010a36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a40:	4620      	mov	r0, r4
 8010a42:	f000 fb64 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Interval);
 8010a46:	4b82      	ldr	r3, [pc, #520]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010a48:	681c      	ldr	r4, [r3, #0]
 8010a4a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010a52:	466d      	mov	r5, sp
 8010a54:	f103 020c 	add.w	r2, r3, #12
 8010a58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a62:	4620      	mov	r0, r4
 8010a64:	f000 fb53 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Filename);
 8010a68:	4b79      	ldr	r3, [pc, #484]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010a6a:	681c      	ldr	r4, [r3, #0]
 8010a6c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8010a74:	466d      	mov	r5, sp
 8010a76:	f103 020c 	add.w	r2, r3, #12
 8010a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010a84:	4620      	mov	r0, r4
 8010a86:	f000 fb42 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Filename);
 8010a8a:	4b71      	ldr	r3, [pc, #452]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010a8c:	681c      	ldr	r4, [r3, #0]
 8010a8e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010a92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8010a96:	466d      	mov	r5, sp
 8010a98:	f103 020c 	add.w	r2, r3, #12
 8010a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010aa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8010aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f000 fb31 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Set_Fileformat);
 8010aac:	4b68      	ldr	r3, [pc, #416]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010aae:	681c      	ldr	r4, [r3, #0]
 8010ab0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ab4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8010ab8:	466d      	mov	r5, sp
 8010aba:	f103 020c 	add.w	r2, r3, #12
 8010abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ac2:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010ac8:	4620      	mov	r0, r4
 8010aca:	f000 fb20 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Get_Fileformat);
 8010ace:	4b60      	ldr	r3, [pc, #384]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010ad0:	681c      	ldr	r4, [r3, #0]
 8010ad2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ad6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8010ada:	466d      	mov	r5, sp
 8010adc:	f103 020c 	add.w	r2, r3, #12
 8010ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8010ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010aea:	4620      	mov	r0, r4
 8010aec:	f000 fb0f 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Fan_Clean);
 8010af0:	4b57      	ldr	r3, [pc, #348]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010af2:	681c      	ldr	r4, [r3, #0]
 8010af4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010af8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8010afc:	466d      	mov	r5, sp
 8010afe:	f103 020c 	add.w	r2, r3, #12
 8010b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b06:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	f000 fafe 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Calibration);
 8010b12:	4b4f      	ldr	r3, [pc, #316]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010b14:	681c      	ldr	r4, [r3, #0]
 8010b16:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b1a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8010b1e:	466d      	mov	r5, sp
 8010b20:	f103 020c 	add.w	r2, r3, #12
 8010b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f000 faed 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Systemreset);
 8010b34:	4b46      	ldr	r3, [pc, #280]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010b36:	681c      	ldr	r4, [r3, #0]
 8010b38:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8010b40:	466d      	mov	r5, sp
 8010b42:	f103 020c 	add.w	r2, r3, #12
 8010b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b50:	4620      	mov	r0, r4
 8010b52:	f000 fadc 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Co2_Level);
 8010b56:	4b3e      	ldr	r3, [pc, #248]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010b58:	681c      	ldr	r4, [r3, #0]
 8010b5a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b5e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8010b62:	466d      	mov	r5, sp
 8010b64:	f103 020c 	add.w	r2, r3, #12
 8010b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b72:	4620      	mov	r0, r4
 8010b74:	f000 facb 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Temp_Level);
 8010b78:	4b35      	ldr	r3, [pc, #212]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010b7a:	681c      	ldr	r4, [r3, #0]
 8010b7c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010b80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8010b84:	466d      	mov	r5, sp
 8010b86:	f103 020c 	add.w	r2, r3, #12
 8010b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010b94:	4620      	mov	r0, r4
 8010b96:	f000 faba 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Humid_Level);
 8010b9a:	4b2d      	ldr	r3, [pc, #180]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010b9c:	681c      	ldr	r4, [r3, #0]
 8010b9e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010ba2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8010ba6:	466d      	mov	r5, sp
 8010ba8:	f103 020c 	add.w	r2, r3, #12
 8010bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8010bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	f000 faa9 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Motion_Detection);
 8010bbc:	4b24      	ldr	r3, [pc, #144]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010bbe:	681c      	ldr	r4, [r3, #0]
 8010bc0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010bc4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8010bc8:	466d      	mov	r5, sp
 8010bca:	f103 020c 	add.w	r2, r3, #12
 8010bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8010bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f000 fa98 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Air_Quality);
 8010bde:	4b1c      	ldr	r3, [pc, #112]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010be0:	681c      	ldr	r4, [r3, #0]
 8010be2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010be6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8010bea:	466d      	mov	r5, sp
 8010bec:	f103 020c 	add.w	r2, r3, #12
 8010bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8010bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f000 fa87 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, Battery_Voltage);
 8010c00:	4b13      	ldr	r3, [pc, #76]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010c02:	681c      	ldr	r4, [r3, #0]
 8010c04:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010c08:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010c0c:	466d      	mov	r5, sp
 8010c0e:	f103 020c 	add.w	r2, r3, #12
 8010c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c16:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f000 fa76 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _port);
 8010c22:	4b0b      	ldr	r3, [pc, #44]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010c24:	681c      	ldr	r4, [r3, #0]
 8010c26:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010c2a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010c2e:	466d      	mov	r5, sp
 8010c30:	f103 020c 	add.w	r2, r3, #12
 8010c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c3e:	4620      	mov	r0, r4
 8010c40:	f000 fa65 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, _showall);
 8010c44:	4b02      	ldr	r3, [pc, #8]	; (8010c50 <initializeEmbeddedCli+0x6ac>)
 8010c46:	681c      	ldr	r4, [r3, #0]
 8010c48:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010c4c:	e002      	b.n	8010c54 <initializeEmbeddedCli+0x6b0>
 8010c4e:	bf00      	nop
 8010c50:	20001a70 	.word	0x20001a70
 8010c54:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8010c58:	466d      	mov	r5, sp
 8010c5a:	f103 020c 	add.w	r2, r3, #12
 8010c5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c62:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f000 fa50 	bl	801110e <embeddedCliAddBinding>
	embeddedCliAddBinding(cli, getversion);
 8010c6e:	4b10      	ldr	r3, [pc, #64]	; (8010cb0 <initializeEmbeddedCli+0x70c>)
 8010c70:	681c      	ldr	r4, [r3, #0]
 8010c72:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8010c76:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8010c7a:	466d      	mov	r5, sp
 8010c7c:	f103 020c 	add.w	r2, r3, #12
 8010c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c84:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f000 fa3f 	bl	801110e <embeddedCliAddBinding>
	// Assign character write function
	cli->writeChar = writeCharToCli;
 8010c90:	4b07      	ldr	r3, [pc, #28]	; (8010cb0 <initializeEmbeddedCli+0x70c>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4a07      	ldr	r2, [pc, #28]	; (8010cb4 <initializeEmbeddedCli+0x710>)
 8010c96:	601a      	str	r2, [r3, #0]
	// cli->onCommand = onCommand;
	// CLI has now been initialized, set bool to true to enable interrupts.
	cliIsReady = true;
 8010c98:	4b07      	ldr	r3, [pc, #28]	; (8010cb8 <initializeEmbeddedCli+0x714>)
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	701a      	strb	r2, [r3, #0]
	cli_other = 0;
 8010c9e:	4b07      	ldr	r3, [pc, #28]	; (8010cbc <initializeEmbeddedCli+0x718>)
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	701a      	strb	r2, [r3, #0]
}
 8010ca4:	bf00      	nop
 8010ca6:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bdb0      	pop	{r4, r5, r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	20001a70 	.word	0x20001a70
 8010cb4:	0800eead 	.word	0x0800eead
 8010cb8:	20001a7d 	.word	0x20001a7d
 8010cbc:	20001a7e 	.word	0x20001a7e

08010cc0 <console_process>:

void console_process(void) {
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	af00      	add	r7, sp, #0
	embeddedCliProcess(cli);
 8010cc4:	4b03      	ldr	r3, [pc, #12]	; (8010cd4 <console_process+0x14>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f000 f990 	bl	8010fee <embeddedCliProcess>
}
 8010cce:	bf00      	nop
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20001a70 	.word	0x20001a70

08010cd8 <console_uart_deinit>:

void console_uart_deinit() {
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010cdc:	4803      	ldr	r0, [pc, #12]	; (8010cec <console_uart_deinit+0x14>)
 8010cde:	f7fa fe32 	bl	800b946 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart1);
 8010ce2:	4802      	ldr	r0, [pc, #8]	; (8010cec <console_uart_deinit+0x14>)
 8010ce4:	f7f2 fd88 	bl	80037f8 <HAL_UART_MspDeInit>
}
 8010ce8:	bf00      	nop
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	200019c0 	.word	0x200019c0

08010cf0 <console_uart_init>:
void console_uart_init() {
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1);
 8010cf4:	4815      	ldr	r0, [pc, #84]	; (8010d4c <console_uart_init+0x5c>)
 8010cf6:	f7fa fe26 	bl	800b946 <HAL_UART_DeInit>
	huart1.Instance = USART1;
 8010cfa:	4b14      	ldr	r3, [pc, #80]	; (8010d4c <console_uart_init+0x5c>)
 8010cfc:	4a14      	ldr	r2, [pc, #80]	; (8010d50 <console_uart_init+0x60>)
 8010cfe:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8010d00:	4b12      	ldr	r3, [pc, #72]	; (8010d4c <console_uart_init+0x5c>)
 8010d02:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010d06:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010d08:	4b10      	ldr	r3, [pc, #64]	; (8010d4c <console_uart_init+0x5c>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8010d0e:	4b0f      	ldr	r3, [pc, #60]	; (8010d4c <console_uart_init+0x5c>)
 8010d10:	2200      	movs	r2, #0
 8010d12:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8010d14:	4b0d      	ldr	r3, [pc, #52]	; (8010d4c <console_uart_init+0x5c>)
 8010d16:	2200      	movs	r2, #0
 8010d18:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8010d1a:	4b0c      	ldr	r3, [pc, #48]	; (8010d4c <console_uart_init+0x5c>)
 8010d1c:	220c      	movs	r2, #12
 8010d1e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010d20:	4b0a      	ldr	r3, [pc, #40]	; (8010d4c <console_uart_init+0x5c>)
 8010d22:	2200      	movs	r2, #0
 8010d24:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010d26:	4b09      	ldr	r3, [pc, #36]	; (8010d4c <console_uart_init+0x5c>)
 8010d28:	2200      	movs	r2, #0
 8010d2a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8010d2c:	4807      	ldr	r0, [pc, #28]	; (8010d4c <console_uart_init+0x5c>)
 8010d2e:	f7fa fdbd 	bl	800b8ac <HAL_UART_Init>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d001      	beq.n	8010d3c <console_uart_init+0x4c>
		Error_Handler();
 8010d38:	f7f2 fa3c 	bl	80031b4 <Error_Handler>
	}
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	4905      	ldr	r1, [pc, #20]	; (8010d54 <console_uart_init+0x64>)
 8010d40:	4802      	ldr	r0, [pc, #8]	; (8010d4c <console_uart_init+0x5c>)
 8010d42:	f7fa fec1 	bl	800bac8 <HAL_UART_Receive_IT>
}
 8010d46:	bf00      	nop
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	200019c0 	.word	0x200019c0
 8010d50:	40011000 	.word	0x40011000
 8010d54:	20001a7c 	.word	0x20001a7c

08010d58 <console_init>:

void console_init(void) {
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	af00      	add	r7, sp, #0
	console_uart_init();
 8010d5c:	f7ff ffc8 	bl	8010cf0 <console_uart_init>
	initializeEmbeddedCli();
 8010d60:	f7ff fc20 	bl	80105a4 <initializeEmbeddedCli>
	HAL_UART_Receive_IT(UART_CLI_PERIPH, UART_CLI_rxBuffer, UART_RX_BUFF_SIZE);
 8010d64:	2201      	movs	r2, #1
 8010d66:	4903      	ldr	r1, [pc, #12]	; (8010d74 <console_init+0x1c>)
 8010d68:	4803      	ldr	r0, [pc, #12]	; (8010d78 <console_init+0x20>)
 8010d6a:	f7fa fead 	bl	800bac8 <HAL_UART_Receive_IT>
}
 8010d6e:	bf00      	nop
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	20001a7c 	.word	0x20001a7c
 8010d78:	200019c0 	.word	0x200019c0

08010d7c <embeddedCliDefaultConfig>:
 * @param pos - token position (counted from 1)
 * @return index of first char of specified token
 */
static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos);

EmbeddedCliConfig *embeddedCliDefaultConfig(void) {
 8010d7c:	b480      	push	{r7}
 8010d7e:	af00      	add	r7, sp, #0
    defaultConfig.rxBufferSize = 64;
 8010d80:	4b0e      	ldr	r3, [pc, #56]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
 8010d82:	2240      	movs	r2, #64	; 0x40
 8010d84:	809a      	strh	r2, [r3, #4]
    defaultConfig.cmdBufferSize = 64;
 8010d86:	4b0d      	ldr	r3, [pc, #52]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
 8010d88:	2240      	movs	r2, #64	; 0x40
 8010d8a:	80da      	strh	r2, [r3, #6]
    defaultConfig.historyBufferSize = 128;
 8010d8c:	4b0b      	ldr	r3, [pc, #44]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
 8010d8e:	2280      	movs	r2, #128	; 0x80
 8010d90:	811a      	strh	r2, [r3, #8]
    defaultConfig.cliBuffer = NULL;
 8010d92:	4b0a      	ldr	r3, [pc, #40]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	60da      	str	r2, [r3, #12]
    defaultConfig.cliBufferSize = 0;
 8010d98:	4b08      	ldr	r3, [pc, #32]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	821a      	strh	r2, [r3, #16]
    defaultConfig.maxBindingCount = 50;
 8010d9e:	4b07      	ldr	r3, [pc, #28]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
 8010da0:	2232      	movs	r2, #50	; 0x32
 8010da2:	815a      	strh	r2, [r3, #10]
    defaultConfig.enableAutoComplete = true;
 8010da4:	4b05      	ldr	r3, [pc, #20]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
 8010da6:	2201      	movs	r2, #1
 8010da8:	749a      	strb	r2, [r3, #18]
    defaultConfig.invitation = "> ";
 8010daa:	4b04      	ldr	r3, [pc, #16]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
 8010dac:	4a04      	ldr	r2, [pc, #16]	; (8010dc0 <embeddedCliDefaultConfig+0x44>)
 8010dae:	601a      	str	r2, [r3, #0]
    return &defaultConfig;
 8010db0:	4b02      	ldr	r3, [pc, #8]	; (8010dbc <embeddedCliDefaultConfig+0x40>)
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	20001a84 	.word	0x20001a84
 8010dc0:	08021da8 	.word	0x08021da8

08010dc4 <embeddedCliRequiredSize>:

uint16_t embeddedCliRequiredSize(EmbeddedCliConfig *config) {
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	895b      	ldrh	r3, [r3, #10]
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	4413      	add	r3, r2
 8010dd4:	81fb      	strh	r3, [r7, #14]
    return (uint16_t) (CLI_UINT_SIZE * (
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli)) +
            BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl)) +
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	889b      	ldrh	r3, [r3, #4]
 8010dda:	3303      	adds	r3, #3
 8010ddc:	089a      	lsrs	r2, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	88db      	ldrh	r3, [r3, #6]
 8010de2:	3303      	adds	r3, #3
 8010de4:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char)) +
 8010de6:	441a      	add	r2, r3
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	891b      	ldrh	r3, [r3, #8]
 8010dec:	3303      	adds	r3, #3
 8010dee:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char)) +
 8010df0:	18d1      	adds	r1, r2, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8010df2:	89fa      	ldrh	r2, [r7, #14]
 8010df4:	4613      	mov	r3, r2
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	4413      	add	r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	3303      	adds	r3, #3
 8010dfe:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(config->historyBufferSize * sizeof(char)) +
 8010e00:	18ca      	adds	r2, r1, r3
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(uint8_t))));
 8010e02:	89fb      	ldrh	r3, [r7, #14]
 8010e04:	3303      	adds	r3, #3
 8010e06:	089b      	lsrs	r3, r3, #2
            BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding)) +
 8010e08:	4413      	add	r3, r2
 8010e0a:	3311      	adds	r3, #17
    return (uint16_t) (CLI_UINT_SIZE * (
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	b29b      	uxth	r3, r3
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3714      	adds	r7, #20
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr

08010e1e <embeddedCliNew>:

EmbeddedCli *embeddedCliNew(EmbeddedCliConfig *config) {
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b088      	sub	sp, #32
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
    EmbeddedCli *cli = NULL;
 8010e26:	2300      	movs	r3, #0
 8010e28:	61bb      	str	r3, [r7, #24]

    uint16_t bindingCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	895b      	ldrh	r3, [r3, #10]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	4413      	add	r3, r2
 8010e32:	82fb      	strh	r3, [r7, #22]

    size_t totalSize = embeddedCliRequiredSize(config);
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff ffc5 	bl	8010dc4 <embeddedCliRequiredSize>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	613b      	str	r3, [r7, #16]

    bool allocated = false;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	77fb      	strb	r3, [r7, #31]
    if (config->cliBuffer == NULL) {
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d10f      	bne.n	8010e6a <embeddedCliNew+0x4c>
        config->cliBuffer = (CLI_UINT *) malloc(totalSize); // malloc guarantees alignment.
 8010e4a:	6938      	ldr	r0, [r7, #16]
 8010e4c:	f00a fe86 	bl	801bb5c <malloc>
 8010e50:	4603      	mov	r3, r0
 8010e52:	461a      	mov	r2, r3
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	60da      	str	r2, [r3, #12]
        if (config->cliBuffer == NULL)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d101      	bne.n	8010e64 <embeddedCliNew+0x46>
            return NULL;
 8010e60:	2300      	movs	r3, #0
 8010e62:	e092      	b.n	8010f8a <embeddedCliNew+0x16c>
        allocated = true;
 8010e64:	2301      	movs	r3, #1
 8010e66:	77fb      	strb	r3, [r7, #31]
 8010e68:	e007      	b.n	8010e7a <embeddedCliNew+0x5c>
    } else if (config->cliBufferSize < totalSize) {
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	8a1b      	ldrh	r3, [r3, #16]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d901      	bls.n	8010e7a <embeddedCliNew+0x5c>
        return NULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	e087      	b.n	8010f8a <embeddedCliNew+0x16c>
    }

    CLI_UINT *buf = config->cliBuffer;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	60fb      	str	r3, [r7, #12]

    memset(buf, 0, totalSize);
 8010e80:	693a      	ldr	r2, [r7, #16]
 8010e82:	2100      	movs	r1, #0
 8010e84:	68f8      	ldr	r0, [r7, #12]
 8010e86:	f00a fe99 	bl	801bbbc <memset>

    cli = (EmbeddedCli *) buf;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	61bb      	str	r3, [r7, #24]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCli));
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	3310      	adds	r3, #16
 8010e92:	60fb      	str	r3, [r7, #12]

    cli->_impl = (EmbeddedCliImpl *) buf;
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	60da      	str	r2, [r3, #12]
    buf += BYTES_TO_CLI_UINTS(sizeof(EmbeddedCliImpl));
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	3334      	adds	r3, #52	; 0x34
 8010e9e:	60fb      	str	r3, [r7, #12]

    PREPARE_IMPL(cli);
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	60bb      	str	r3, [r7, #8]
    impl->rxBuffer.buf = (char *) buf;
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	68fa      	ldr	r2, [r7, #12]
 8010eaa:	611a      	str	r2, [r3, #16]
    buf += BYTES_TO_CLI_UINTS(config->rxBufferSize * sizeof(char));
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	889b      	ldrh	r3, [r3, #4]
 8010eb0:	3303      	adds	r3, #3
 8010eb2:	f023 0303 	bic.w	r3, r3, #3
 8010eb6:	68fa      	ldr	r2, [r7, #12]
 8010eb8:	4413      	add	r3, r2
 8010eba:	60fb      	str	r3, [r7, #12]

    impl->cmdBuffer = (char *) buf;
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	68fa      	ldr	r2, [r7, #12]
 8010ec0:	61da      	str	r2, [r3, #28]
    buf += BYTES_TO_CLI_UINTS(config->cmdBufferSize * sizeof(char));
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	88db      	ldrh	r3, [r3, #6]
 8010ec6:	3303      	adds	r3, #3
 8010ec8:	f023 0303 	bic.w	r3, r3, #3
 8010ecc:	68fa      	ldr	r2, [r7, #12]
 8010ece:	4413      	add	r3, r2
 8010ed0:	60fb      	str	r3, [r7, #12]

    impl->bindings = (CliCommandBinding *) buf;
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	68fa      	ldr	r2, [r7, #12]
 8010ed6:	625a      	str	r2, [r3, #36]	; 0x24
    buf += BYTES_TO_CLI_UINTS(bindingCount * sizeof(CliCommandBinding));
 8010ed8:	8afa      	ldrh	r2, [r7, #22]
 8010eda:	4613      	mov	r3, r2
 8010edc:	009b      	lsls	r3, r3, #2
 8010ede:	4413      	add	r3, r2
 8010ee0:	009b      	lsls	r3, r3, #2
 8010ee2:	3303      	adds	r3, #3
 8010ee4:	f023 0303 	bic.w	r3, r3, #3
 8010ee8:	68fa      	ldr	r2, [r7, #12]
 8010eea:	4413      	add	r3, r2
 8010eec:	60fb      	str	r3, [r7, #12]

    impl->bindingsFlags = (uint8_t *) buf;
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	629a      	str	r2, [r3, #40]	; 0x28
    buf += BYTES_TO_CLI_UINTS(bindingCount);
 8010ef4:	8afb      	ldrh	r3, [r7, #22]
 8010ef6:	3303      	adds	r3, #3
 8010ef8:	f023 0303 	bic.w	r3, r3, #3
 8010efc:	68fa      	ldr	r2, [r7, #12]
 8010efe:	4413      	add	r3, r2
 8010f00:	60fb      	str	r3, [r7, #12]

    impl->history.buf = (char *) buf;
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	605a      	str	r2, [r3, #4]
    impl->history.bufferSize = config->historyBufferSize;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	891a      	ldrh	r2, [r3, #8]
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	811a      	strh	r2, [r3, #8]

    if (allocated)
 8010f10:	7ffb      	ldrb	r3, [r7, #31]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d008      	beq.n	8010f28 <embeddedCliNew+0x10a>
        SET_FLAG(impl->flags, CLI_FLAG_ALLOCATED);
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010f1c:	f043 0304 	orr.w	r3, r3, #4
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    if (config->enableAutoComplete)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	7c9b      	ldrb	r3, [r3, #18]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d008      	beq.n	8010f42 <embeddedCliNew+0x124>
        SET_FLAG(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED);
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010f36:	f043 0320 	orr.w	r3, r3, #32
 8010f3a:	b2da      	uxtb	r2, r3
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    impl->rxBuffer.size = config->rxBufferSize;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	889a      	ldrh	r2, [r3, #4]
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	831a      	strh	r2, [r3, #24]
    impl->rxBuffer.front = 0;
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	829a      	strh	r2, [r3, #20]
    impl->rxBuffer.back = 0;
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	2200      	movs	r2, #0
 8010f54:	82da      	strh	r2, [r3, #22]
    impl->cmdMaxSize = config->cmdBufferSize;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	88da      	ldrh	r2, [r3, #6]
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	845a      	strh	r2, [r3, #34]	; 0x22
    impl->bindingsCount = 0;
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	2200      	movs	r2, #0
 8010f62:	859a      	strh	r2, [r3, #44]	; 0x2c
    impl->maxBindingsCount = (uint16_t) (config->maxBindingCount + cliInternalBindingCount);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	895b      	ldrh	r3, [r3, #10]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	4413      	add	r3, r2
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	85da      	strh	r2, [r3, #46]	; 0x2e
    impl->lastChar = '\0';
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	2200      	movs	r2, #0
 8010f76:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    impl->invitation = config->invitation;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	601a      	str	r2, [r3, #0]

    initInternalBindings(cli);
 8010f82:	69b8      	ldr	r0, [r7, #24]
 8010f84:	f000 fc5e 	bl	8011844 <initInternalBindings>

    return cli;
 8010f88:	69bb      	ldr	r3, [r7, #24]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3720      	adds	r7, #32
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <embeddedCliNewDefault>:

EmbeddedCli *embeddedCliNewDefault(void) {
 8010f92:	b580      	push	{r7, lr}
 8010f94:	af00      	add	r7, sp, #0
    return embeddedCliNew(embeddedCliDefaultConfig());
 8010f96:	f7ff fef1 	bl	8010d7c <embeddedCliDefaultConfig>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7ff ff3e 	bl	8010e1e <embeddedCliNew>
 8010fa2:	4603      	mov	r3, r0
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <embeddedCliReceiveChar>:

void embeddedCliReceiveChar(EmbeddedCli *cli, char c) {
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	60fb      	str	r3, [r7, #12]

    if (!fifoBufPush(&impl->rxBuffer, c)) {
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	3310      	adds	r3, #16
 8010fbe:	78fa      	ldrb	r2, [r7, #3]
 8010fc0:	4611      	mov	r1, r2
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f001 f817 	bl	8011ff6 <fifoBufPush>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	f083 0301 	eor.w	r3, r3, #1
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d008      	beq.n	8010fe6 <embeddedCliReceiveChar+0x3e>
        SET_FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010fda:	f043 0301 	orr.w	r3, r3, #1
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    }
}
 8010fe6:	bf00      	nop
 8010fe8:	3710      	adds	r7, #16
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <embeddedCliProcess>:

void embeddedCliProcess(EmbeddedCli *cli) {
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b084      	sub	sp, #16
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
    if (cli->writeChar == NULL)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f000 8083 	beq.w	8011106 <embeddedCliProcess+0x118>
        return;

    PREPARE_IMPL(cli);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	60fb      	str	r3, [r7, #12]


    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_INIT_COMPLETE)) {
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801100c:	f003 0302 	and.w	r3, r3, #2
 8011010:	2b00      	cmp	r3, #0
 8011012:	d155      	bne.n	80110c0 <embeddedCliProcess+0xd2>
        SET_FLAG(impl->flags, CLI_FLAG_INIT_COMPLETE);
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801101a:	f043 0302 	orr.w	r3, r3, #2
 801101e:	b2da      	uxtb	r2, r3
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        writeToOutput(cli, impl->invitation);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4619      	mov	r1, r3
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 ff41 	bl	8011eb4 <writeToOutput>
    }

    while (fifoBufAvailable(&impl->rxBuffer)) {
 8011032:	e045      	b.n	80110c0 <embeddedCliProcess+0xd2>
        char c = fifoBufPop(&impl->rxBuffer);
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	3310      	adds	r3, #16
 8011038:	4618      	mov	r0, r3
 801103a:	f000 ffb4 	bl	8011fa6 <fifoBufPop>
 801103e:	4603      	mov	r3, r0
 8011040:	72fb      	strb	r3, [r7, #11]

        if (IS_FLAG_SET(impl->flags, CLI_FLAG_ESCAPE_MODE)) {
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011048:	f003 0308 	and.w	r3, r3, #8
 801104c:	2b00      	cmp	r3, #0
 801104e:	d005      	beq.n	801105c <embeddedCliProcess+0x6e>
            onEscapedInput(cli, c);
 8011050:	7afb      	ldrb	r3, [r7, #11]
 8011052:	4619      	mov	r1, r3
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 fa17 	bl	8011488 <onEscapedInput>
 801105a:	e02a      	b.n	80110b2 <embeddedCliProcess+0xc4>
        } else if (impl->lastChar == 0x1B && c == '[') {
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011062:	2b1b      	cmp	r3, #27
 8011064:	d10c      	bne.n	8011080 <embeddedCliProcess+0x92>
 8011066:	7afb      	ldrb	r3, [r7, #11]
 8011068:	2b5b      	cmp	r3, #91	; 0x5b
 801106a:	d109      	bne.n	8011080 <embeddedCliProcess+0x92>
            //enter escape mode
            SET_FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011072:	f043 0308 	orr.w	r3, r3, #8
 8011076:	b2da      	uxtb	r2, r3
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 801107e:	e018      	b.n	80110b2 <embeddedCliProcess+0xc4>
        } else if (isControlChar(c)) {
 8011080:	7afb      	ldrb	r3, [r7, #11]
 8011082:	4618      	mov	r0, r3
 8011084:	f000 ff37 	bl	8011ef6 <isControlChar>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d005      	beq.n	801109a <embeddedCliProcess+0xac>
            onControlInput(cli, c);
 801108e:	7afb      	ldrb	r3, [r7, #11]
 8011090:	4619      	mov	r1, r3
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 fa54 	bl	8011540 <onControlInput>
 8011098:	e00b      	b.n	80110b2 <embeddedCliProcess+0xc4>
        } else if (isDisplayableChar(c)) {
 801109a:	7afb      	ldrb	r3, [r7, #11]
 801109c:	4618      	mov	r0, r3
 801109e:	f000 ff4a 	bl	8011f36 <isDisplayableChar>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d004      	beq.n	80110b2 <embeddedCliProcess+0xc4>
            onCharInput(cli, c);
 80110a8:	7afb      	ldrb	r3, [r7, #11]
 80110aa:	4619      	mov	r1, r3
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 fa17 	bl	80114e0 <onCharInput>
        }

        printLiveAutocompletion(cli);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fde7 	bl	8011c86 <printLiveAutocompletion>

        impl->lastChar = c;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	7afa      	ldrb	r2, [r7, #11]
 80110bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    while (fifoBufAvailable(&impl->rxBuffer)) {
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	3310      	adds	r3, #16
 80110c4:	4618      	mov	r0, r3
 80110c6:	f000 ff4d 	bl	8011f64 <fifoBufAvailable>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d1b1      	bne.n	8011034 <embeddedCliProcess+0x46>
    }

    // discard unfinished command if overflow happened
    if (IS_FLAG_SET(impl->flags, CLI_FLAG_OVERFLOW)) {
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80110d6:	f003 0301 	and.w	r3, r3, #1
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d014      	beq.n	8011108 <embeddedCliProcess+0x11a>
        impl->cmdSize = 0;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2200      	movs	r2, #0
 80110e2:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	69db      	ldr	r3, [r3, #28]
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	8c12      	ldrh	r2, [r2, #32]
 80110ec:	4413      	add	r3, r2
 80110ee:	2200      	movs	r2, #0
 80110f0:	701a      	strb	r2, [r3, #0]
        UNSET_U8FLAG(impl->flags, CLI_FLAG_OVERFLOW);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80110f8:	f023 0301 	bic.w	r3, r3, #1
 80110fc:	b2da      	uxtb	r2, r3
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8011104:	e000      	b.n	8011108 <embeddedCliProcess+0x11a>
        return;
 8011106:	bf00      	nop
    }
}
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <embeddedCliAddBinding>:

bool embeddedCliAddBinding(EmbeddedCli *cli, CliCommandBinding binding) {
 801110e:	b084      	sub	sp, #16
 8011110:	b4b0      	push	{r4, r5, r7}
 8011112:	b085      	sub	sp, #20
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801111c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    PREPARE_IMPL(cli);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	60fb      	str	r3, [r7, #12]
    if (impl->bindingsCount == impl->maxBindingsCount)
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801112e:	429a      	cmp	r2, r3
 8011130:	d101      	bne.n	8011136 <embeddedCliAddBinding+0x28>
        return false;
 8011132:	2300      	movs	r3, #0
 8011134:	e017      	b.n	8011166 <embeddedCliAddBinding+0x58>

    impl->bindings[impl->bindingsCount] = binding;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801113e:	4619      	mov	r1, r3
 8011140:	460b      	mov	r3, r1
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	440b      	add	r3, r1
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	461d      	mov	r5, r3
 801114c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8011150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011154:	6823      	ldr	r3, [r4, #0]
 8011156:	602b      	str	r3, [r5, #0]

    ++impl->bindingsCount;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801115c:	3301      	adds	r3, #1
 801115e:	b29a      	uxth	r2, r3
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	859a      	strh	r2, [r3, #44]	; 0x2c
    return true;
 8011164:	2301      	movs	r3, #1
}
 8011166:	4618      	mov	r0, r3
 8011168:	3714      	adds	r7, #20
 801116a:	46bd      	mov	sp, r7
 801116c:	bcb0      	pop	{r4, r5, r7}
 801116e:	b004      	add	sp, #16
 8011170:	4770      	bx	lr
	...

08011174 <embeddedCliPrint>:

void embeddedCliPrint(EmbeddedCli *cli, const char *string) {
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
    if (cli->writeChar == NULL)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d031      	beq.n	80111ea <embeddedCliPrint+0x76>
        return;

    PREPARE_IMPL(cli);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	60fb      	str	r3, [r7, #12]

    // remove chars for autocompletion and live command
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT))
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011192:	f003 0310 	and.w	r3, r3, #16
 8011196:	2b00      	cmp	r3, #0
 8011198:	d102      	bne.n	80111a0 <embeddedCliPrint+0x2c>
        clearCurrentLine(cli);
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 fe58 	bl	8011e50 <clearCurrentLine>

    // print provided string
    writeToOutput(cli, string);
 80111a0:	6839      	ldr	r1, [r7, #0]
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f000 fe86 	bl	8011eb4 <writeToOutput>
    writeToOutput(cli, lineBreak);
 80111a8:	4b12      	ldr	r3, [pc, #72]	; (80111f4 <embeddedCliPrint+0x80>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	4619      	mov	r1, r3
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f000 fe80 	bl	8011eb4 <writeToOutput>

    // print current command back to screen
    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_DIRECT_PRINT)) {
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80111ba:	f003 0310 	and.w	r3, r3, #16
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d114      	bne.n	80111ec <embeddedCliPrint+0x78>
        writeToOutput(cli, impl->invitation);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4619      	mov	r1, r3
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f000 fe73 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, impl->cmdBuffer);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	69db      	ldr	r3, [r3, #28]
 80111d2:	4619      	mov	r1, r3
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fe6d 	bl	8011eb4 <writeToOutput>
        impl->inputLineLength = impl->cmdSize;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	8c1a      	ldrh	r2, [r3, #32]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	861a      	strh	r2, [r3, #48]	; 0x30

        printLiveAutocompletion(cli);
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 fd4f 	bl	8011c86 <printLiveAutocompletion>
 80111e8:	e000      	b.n	80111ec <embeddedCliPrint+0x78>
        return;
 80111ea:	bf00      	nop
    }
}
 80111ec:	3710      	adds	r7, #16
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	20000024 	.word	0x20000024

080111f8 <embeddedCliTokenizeArgs>:
        // allocation is done in single call to malloc, so need only single free
        free(cli);
    }
}

void embeddedCliTokenizeArgs(char *args) {
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b088      	sub	sp, #32
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
    if (args == NULL)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d066      	beq.n	80112d4 <embeddedCliTokenizeArgs+0xdc>
        return;

    // for now only space, but can add more later
    const char *separators = " ";
 8011206:	4b35      	ldr	r3, [pc, #212]	; (80112dc <embeddedCliTokenizeArgs+0xe4>)
 8011208:	60fb      	str	r3, [r7, #12]

    // indicates that arg is quoted so separators are copied as is
    bool quotesEnabled = false;
 801120a:	2300      	movs	r3, #0
 801120c:	77fb      	strb	r3, [r7, #31]
    // indicates that previous char was a slash, so next char is copied as is
    bool escapeActivated = false;
 801120e:	2300      	movs	r3, #0
 8011210:	77bb      	strb	r3, [r7, #30]
    int insertPos = 0;
 8011212:	2300      	movs	r3, #0
 8011214:	61bb      	str	r3, [r7, #24]

    int i = 0;
 8011216:	2300      	movs	r3, #0
 8011218:	617b      	str	r3, [r7, #20]
    char currentChar;
    while ((currentChar = args[i]) != '\0') {
 801121a:	e047      	b.n	80112ac <embeddedCliTokenizeArgs+0xb4>
        ++i;
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	3301      	adds	r3, #1
 8011220:	617b      	str	r3, [r7, #20]

        if (escapeActivated) {
 8011222:	7fbb      	ldrb	r3, [r7, #30]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d002      	beq.n	801122e <embeddedCliTokenizeArgs+0x36>
            escapeActivated = false;
 8011228:	2300      	movs	r3, #0
 801122a:	77bb      	strb	r3, [r7, #30]
 801122c:	e029      	b.n	8011282 <embeddedCliTokenizeArgs+0x8a>
        } else if (currentChar == '\\') {
 801122e:	7cfb      	ldrb	r3, [r7, #19]
 8011230:	2b5c      	cmp	r3, #92	; 0x5c
 8011232:	d102      	bne.n	801123a <embeddedCliTokenizeArgs+0x42>
            escapeActivated = true;
 8011234:	2301      	movs	r3, #1
 8011236:	77bb      	strb	r3, [r7, #30]
            continue;
 8011238:	e038      	b.n	80112ac <embeddedCliTokenizeArgs+0xb4>
        } else if (currentChar == '"') {
 801123a:	7cfb      	ldrb	r3, [r7, #19]
 801123c:	2b22      	cmp	r3, #34	; 0x22
 801123e:	d110      	bne.n	8011262 <embeddedCliTokenizeArgs+0x6a>
            quotesEnabled = !quotesEnabled;
 8011240:	7ffb      	ldrb	r3, [r7, #31]
 8011242:	2b00      	cmp	r3, #0
 8011244:	bf14      	ite	ne
 8011246:	2301      	movne	r3, #1
 8011248:	2300      	moveq	r3, #0
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f083 0301 	eor.w	r3, r3, #1
 8011250:	b2db      	uxtb	r3, r3
 8011252:	77fb      	strb	r3, [r7, #31]
 8011254:	7ffb      	ldrb	r3, [r7, #31]
 8011256:	f003 0301 	and.w	r3, r3, #1
 801125a:	77fb      	strb	r3, [r7, #31]
            currentChar = '\0';
 801125c:	2300      	movs	r3, #0
 801125e:	74fb      	strb	r3, [r7, #19]
 8011260:	e00f      	b.n	8011282 <embeddedCliTokenizeArgs+0x8a>
        } else if (!quotesEnabled && strchr(separators, currentChar) != NULL) {
 8011262:	7ffb      	ldrb	r3, [r7, #31]
 8011264:	f083 0301 	eor.w	r3, r3, #1
 8011268:	b2db      	uxtb	r3, r3
 801126a:	2b00      	cmp	r3, #0
 801126c:	d009      	beq.n	8011282 <embeddedCliTokenizeArgs+0x8a>
 801126e:	7cfb      	ldrb	r3, [r7, #19]
 8011270:	4619      	mov	r1, r3
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	f00b fcc8 	bl	801cc08 <strchr>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	d001      	beq.n	8011282 <embeddedCliTokenizeArgs+0x8a>
            currentChar = '\0';
 801127e:	2300      	movs	r3, #0
 8011280:	74fb      	strb	r3, [r7, #19]
        }

        // null chars are only copied once and not copied to the beginning
        if (currentChar != '\0' || (insertPos > 0 && args[insertPos - 1] != '\0')) {
 8011282:	7cfb      	ldrb	r3, [r7, #19]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d109      	bne.n	801129c <embeddedCliTokenizeArgs+0xa4>
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	2b00      	cmp	r3, #0
 801128c:	dd0e      	ble.n	80112ac <embeddedCliTokenizeArgs+0xb4>
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	3b01      	subs	r3, #1
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	4413      	add	r3, r2
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d007      	beq.n	80112ac <embeddedCliTokenizeArgs+0xb4>
            args[insertPos] = currentChar;
 801129c:	69bb      	ldr	r3, [r7, #24]
 801129e:	687a      	ldr	r2, [r7, #4]
 80112a0:	4413      	add	r3, r2
 80112a2:	7cfa      	ldrb	r2, [r7, #19]
 80112a4:	701a      	strb	r2, [r3, #0]
            ++insertPos;
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	3301      	adds	r3, #1
 80112aa:	61bb      	str	r3, [r7, #24]
    while ((currentChar = args[i]) != '\0') {
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	4413      	add	r3, r2
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	74fb      	strb	r3, [r7, #19]
 80112b6:	7cfb      	ldrb	r3, [r7, #19]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1af      	bne.n	801121c <embeddedCliTokenizeArgs+0x24>
        }
    }

    // make args double null-terminated source buffer must be big enough to contain extra spaces
    args[insertPos] = '\0';
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	4413      	add	r3, r2
 80112c2:	2200      	movs	r2, #0
 80112c4:	701a      	strb	r2, [r3, #0]
    args[insertPos + 1] = '\0';
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	3301      	adds	r3, #1
 80112ca:	687a      	ldr	r2, [r7, #4]
 80112cc:	4413      	add	r3, r2
 80112ce:	2200      	movs	r2, #0
 80112d0:	701a      	strb	r2, [r3, #0]
 80112d2:	e000      	b.n	80112d6 <embeddedCliTokenizeArgs+0xde>
        return;
 80112d4:	bf00      	nop
}
 80112d6:	3720      	adds	r7, #32
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}
 80112dc:	08021dac 	.word	0x08021dac

080112e0 <embeddedCliGetToken>:

const char *embeddedCliGetToken(const char *tokenizedStr, uint16_t pos) {
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	460b      	mov	r3, r1
 80112ea:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 80112ec:	887b      	ldrh	r3, [r7, #2]
 80112ee:	4619      	mov	r1, r3
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 ff87 	bl	8012204 <getTokenPosition>
 80112f6:	4603      	mov	r3, r0
 80112f8:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 80112fa:	89fb      	ldrh	r3, [r7, #14]
 80112fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011300:	4293      	cmp	r3, r2
 8011302:	d003      	beq.n	801130c <embeddedCliGetToken+0x2c>
        return &tokenizedStr[i];
 8011304:	89fb      	ldrh	r3, [r7, #14]
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	4413      	add	r3, r2
 801130a:	e000      	b.n	801130e <embeddedCliGetToken+0x2e>
    else
        return NULL;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <embeddedCliGetTokenVariable>:

char *embeddedCliGetTokenVariable(char *tokenizedStr, uint16_t pos) {
 8011316:	b580      	push	{r7, lr}
 8011318:	b084      	sub	sp, #16
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
 801131e:	460b      	mov	r3, r1
 8011320:	807b      	strh	r3, [r7, #2]
    uint16_t i = getTokenPosition(tokenizedStr, pos);
 8011322:	887b      	ldrh	r3, [r7, #2]
 8011324:	4619      	mov	r1, r3
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 ff6c 	bl	8012204 <getTokenPosition>
 801132c:	4603      	mov	r3, r0
 801132e:	81fb      	strh	r3, [r7, #14]

    if (i != CLI_TOKEN_NPOS)
 8011330:	89fb      	ldrh	r3, [r7, #14]
 8011332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011336:	4293      	cmp	r3, r2
 8011338:	d003      	beq.n	8011342 <embeddedCliGetTokenVariable+0x2c>
        return &tokenizedStr[i];
 801133a:	89fb      	ldrh	r3, [r7, #14]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	4413      	add	r3, r2
 8011340:	e000      	b.n	8011344 <embeddedCliGetTokenVariable+0x2e>
    else
        return NULL;
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	3710      	adds	r7, #16
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <embeddedCliGetTokenCount>:
    }

    return 0;
}

uint16_t embeddedCliGetTokenCount(const char *tokenizedStr) {
 801134c:	b480      	push	{r7}
 801134e:	b085      	sub	sp, #20
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
    if (tokenizedStr == NULL || tokenizedStr[0] == '\0')
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d003      	beq.n	8011362 <embeddedCliGetTokenCount+0x16>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d101      	bne.n	8011366 <embeddedCliGetTokenCount+0x1a>
        return 0;
 8011362:	2300      	movs	r3, #0
 8011364:	e019      	b.n	801139a <embeddedCliGetTokenCount+0x4e>

    int i = 0;
 8011366:	2300      	movs	r3, #0
 8011368:	60fb      	str	r3, [r7, #12]
    uint16_t tokenCount = 1;
 801136a:	2301      	movs	r3, #1
 801136c:	817b      	strh	r3, [r7, #10]
    while (true) {
        if (tokenizedStr[i] == '\0') {
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	4413      	add	r3, r2
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d109      	bne.n	801138e <embeddedCliGetTokenCount+0x42>
            if (tokenizedStr[i + 1] == '\0')
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	3301      	adds	r3, #1
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	4413      	add	r3, r2
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d006      	beq.n	8011396 <embeddedCliGetTokenCount+0x4a>
                break;
            ++tokenCount;
 8011388:	897b      	ldrh	r3, [r7, #10]
 801138a:	3301      	adds	r3, #1
 801138c:	817b      	strh	r3, [r7, #10]
        }
        ++i;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	3301      	adds	r3, #1
 8011392:	60fb      	str	r3, [r7, #12]
        if (tokenizedStr[i] == '\0') {
 8011394:	e7eb      	b.n	801136e <embeddedCliGetTokenCount+0x22>
                break;
 8011396:	bf00      	nop
    }

    return tokenCount;
 8011398:	897b      	ldrh	r3, [r7, #10]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr
	...

080113a8 <navigateHistory>:

static void navigateHistory(EmbeddedCli *cli, bool navigateUp) {
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	460b      	mov	r3, r1
 80113b2:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	613b      	str	r3, [r7, #16]
    if (impl->history.itemsCount == 0 ||
 80113ba:	693b      	ldr	r3, [r7, #16]
 80113bc:	899b      	ldrh	r3, [r3, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d05c      	beq.n	801147c <navigateHistory+0xd4>
 80113c2:	78fb      	ldrb	r3, [r7, #3]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d005      	beq.n	80113d4 <navigateHistory+0x2c>
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	895a      	ldrh	r2, [r3, #10]
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	899b      	ldrh	r3, [r3, #12]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d053      	beq.n	801147c <navigateHistory+0xd4>
        (!navigateUp && impl->history.current == 0))
 80113d4:	78fb      	ldrb	r3, [r7, #3]
 80113d6:	f083 0301 	eor.w	r3, r3, #1
 80113da:	b2db      	uxtb	r3, r3
        (navigateUp && impl->history.current == impl->history.itemsCount) ||
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d003      	beq.n	80113e8 <navigateHistory+0x40>
        (!navigateUp && impl->history.current == 0))
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	895b      	ldrh	r3, [r3, #10]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d049      	beq.n	801147c <navigateHistory+0xd4>
        return;

    clearCurrentLine(cli);
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f000 fd31 	bl	8011e50 <clearCurrentLine>

    writeToOutput(cli, impl->invitation);
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	4619      	mov	r1, r3
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f000 fd5d 	bl	8011eb4 <writeToOutput>

    if (navigateUp)
 80113fa:	78fb      	ldrb	r3, [r7, #3]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d006      	beq.n	801140e <navigateHistory+0x66>
        ++impl->history.current;
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	895b      	ldrh	r3, [r3, #10]
 8011404:	3301      	adds	r3, #1
 8011406:	b29a      	uxth	r2, r3
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	815a      	strh	r2, [r3, #10]
 801140c:	e005      	b.n	801141a <navigateHistory+0x72>
    else
        --impl->history.current;
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	895b      	ldrh	r3, [r3, #10]
 8011412:	3b01      	subs	r3, #1
 8011414:	b29a      	uxth	r2, r3
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	815a      	strh	r2, [r3, #10]

    const char *item = historyGet(&impl->history, impl->history.current);
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	1d1a      	adds	r2, r3, #4
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	895b      	ldrh	r3, [r3, #10]
 8011422:	4619      	mov	r1, r3
 8011424:	4610      	mov	r0, r2
 8011426:	f000 fe74 	bl	8012112 <historyGet>
 801142a:	6178      	str	r0, [r7, #20]
    // simple way to handle empty command the same way as others
    if (item == NULL)
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d101      	bne.n	8011436 <navigateHistory+0x8e>
        item = "";
 8011432:	4b14      	ldr	r3, [pc, #80]	; (8011484 <navigateHistory+0xdc>)
 8011434:	617b      	str	r3, [r7, #20]
    uint16_t len = (uint16_t) strlen(item);
 8011436:	6978      	ldr	r0, [r7, #20]
 8011438:	f7ee fedc 	bl	80001f4 <strlen>
 801143c:	4603      	mov	r3, r0
 801143e:	81fb      	strh	r3, [r7, #14]
    memcpy(impl->cmdBuffer, item, len);
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	69db      	ldr	r3, [r3, #28]
 8011444:	89fa      	ldrh	r2, [r7, #14]
 8011446:	6979      	ldr	r1, [r7, #20]
 8011448:	4618      	mov	r0, r3
 801144a:	f00a fb8f 	bl	801bb6c <memcpy>
    impl->cmdBuffer[len] = '\0';
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	69da      	ldr	r2, [r3, #28]
 8011452:	89fb      	ldrh	r3, [r7, #14]
 8011454:	4413      	add	r3, r2
 8011456:	2200      	movs	r2, #0
 8011458:	701a      	strb	r2, [r3, #0]
    impl->cmdSize = len;
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	89fa      	ldrh	r2, [r7, #14]
 801145e:	841a      	strh	r2, [r3, #32]

    writeToOutput(cli, impl->cmdBuffer);
 8011460:	693b      	ldr	r3, [r7, #16]
 8011462:	69db      	ldr	r3, [r3, #28]
 8011464:	4619      	mov	r1, r3
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 fd24 	bl	8011eb4 <writeToOutput>
    impl->inputLineLength = impl->cmdSize;
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	8c1a      	ldrh	r2, [r3, #32]
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	861a      	strh	r2, [r3, #48]	; 0x30

    printLiveAutocompletion(cli);
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fc06 	bl	8011c86 <printLiveAutocompletion>
 801147a:	e000      	b.n	801147e <navigateHistory+0xd6>
        return;
 801147c:	bf00      	nop
}
 801147e:	3718      	adds	r7, #24
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	08021db0 	.word	0x08021db0

08011488 <onEscapedInput>:

static void onEscapedInput(EmbeddedCli *cli, char c) {
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	460b      	mov	r3, r1
 8011492:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	60fb      	str	r3, [r7, #12]

    if (c >= 64 && c <= 126) {
 801149a:	78fb      	ldrb	r3, [r7, #3]
 801149c:	2b3f      	cmp	r3, #63	; 0x3f
 801149e:	d91b      	bls.n	80114d8 <onEscapedInput+0x50>
 80114a0:	78fb      	ldrb	r3, [r7, #3]
 80114a2:	2b7e      	cmp	r3, #126	; 0x7e
 80114a4:	d818      	bhi.n	80114d8 <onEscapedInput+0x50>
        // handle escape sequence
        UNSET_U8FLAG(impl->flags, CLI_FLAG_ESCAPE_MODE);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80114ac:	f023 0308 	bic.w	r3, r3, #8
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (c == 'A' || c == 'B') {
 80114b8:	78fb      	ldrb	r3, [r7, #3]
 80114ba:	2b41      	cmp	r3, #65	; 0x41
 80114bc:	d002      	beq.n	80114c4 <onEscapedInput+0x3c>
 80114be:	78fb      	ldrb	r3, [r7, #3]
 80114c0:	2b42      	cmp	r3, #66	; 0x42
 80114c2:	d109      	bne.n	80114d8 <onEscapedInput+0x50>
            // treat \e[..A as cursor up and \e[..B as cursor down
            // there might be extra chars between [ and A/B, just ignore them
            navigateHistory(cli, c == 'A');
 80114c4:	78fb      	ldrb	r3, [r7, #3]
 80114c6:	2b41      	cmp	r3, #65	; 0x41
 80114c8:	bf0c      	ite	eq
 80114ca:	2301      	moveq	r3, #1
 80114cc:	2300      	movne	r3, #0
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	4619      	mov	r1, r3
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f7ff ff68 	bl	80113a8 <navigateHistory>
        }
    }
}
 80114d8:	bf00      	nop
 80114da:	3710      	adds	r7, #16
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <onCharInput>:

static void onCharInput(EmbeddedCli *cli, char c) {
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	460b      	mov	r3, r1
 80114ea:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	60fb      	str	r3, [r7, #12]

    // have to reserve two extra chars for command ending (used in tokenization)
    if (impl->cmdSize + 2 >= impl->cmdMaxSize)
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	8c1b      	ldrh	r3, [r3, #32]
 80114f6:	3302      	adds	r3, #2
 80114f8:	68fa      	ldr	r2, [r7, #12]
 80114fa:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80114fc:	4293      	cmp	r3, r2
 80114fe:	da1a      	bge.n	8011536 <onCharInput+0x56>
        return;

    impl->cmdBuffer[impl->cmdSize] = c;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	69db      	ldr	r3, [r3, #28]
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	8c12      	ldrh	r2, [r2, #32]
 8011508:	4413      	add	r3, r2
 801150a:	78fa      	ldrb	r2, [r7, #3]
 801150c:	701a      	strb	r2, [r3, #0]
    ++impl->cmdSize;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	8c1b      	ldrh	r3, [r3, #32]
 8011512:	3301      	adds	r3, #1
 8011514:	b29a      	uxth	r2, r3
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	841a      	strh	r2, [r3, #32]
    impl->cmdBuffer[impl->cmdSize] = '\0';
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	69db      	ldr	r3, [r3, #28]
 801151e:	68fa      	ldr	r2, [r7, #12]
 8011520:	8c12      	ldrh	r2, [r2, #32]
 8011522:	4413      	add	r3, r2
 8011524:	2200      	movs	r2, #0
 8011526:	701a      	strb	r2, [r3, #0]

    cli->writeChar(cli, c);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	78fa      	ldrb	r2, [r7, #3]
 801152e:	4611      	mov	r1, r2
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	4798      	blx	r3
 8011534:	e000      	b.n	8011538 <onCharInput+0x58>
        return;
 8011536:	bf00      	nop
}
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
	...

08011540 <onControlInput>:

static void onControlInput(EmbeddedCli *cli, char c) {
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	460b      	mov	r3, r1
 801154a:	70fb      	strb	r3, [r7, #3]
    PREPARE_IMPL(cli);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	60fb      	str	r3, [r7, #12]

    // process \r\n and \n\r as single \r\n command
    if ((impl->lastChar == '\r' && c == '\n') ||
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011558:	2b0d      	cmp	r3, #13
 801155a:	d102      	bne.n	8011562 <onControlInput+0x22>
 801155c:	78fb      	ldrb	r3, [r7, #3]
 801155e:	2b0a      	cmp	r3, #10
 8011560:	d062      	beq.n	8011628 <onControlInput+0xe8>
        (impl->lastChar == '\n' && c == '\r'))
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if ((impl->lastChar == '\r' && c == '\n') ||
 8011568:	2b0a      	cmp	r3, #10
 801156a:	d102      	bne.n	8011572 <onControlInput+0x32>
        (impl->lastChar == '\n' && c == '\r'))
 801156c:	78fb      	ldrb	r3, [r7, #3]
 801156e:	2b0d      	cmp	r3, #13
 8011570:	d05a      	beq.n	8011628 <onControlInput+0xe8>
        return;

    if (c == '\r' || c == '\n') {
 8011572:	78fb      	ldrb	r3, [r7, #3]
 8011574:	2b0d      	cmp	r3, #13
 8011576:	d002      	beq.n	801157e <onControlInput+0x3e>
 8011578:	78fb      	ldrb	r3, [r7, #3]
 801157a:	2b0a      	cmp	r3, #10
 801157c:	d126      	bne.n	80115cc <onControlInput+0x8c>
        // try to autocomplete command and then process it
        onAutocompleteRequest(cli);
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 fbdc 	bl	8011d3c <onAutocompleteRequest>

        writeToOutput(cli, lineBreak);
 8011584:	4b2a      	ldr	r3, [pc, #168]	; (8011630 <onControlInput+0xf0>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4619      	mov	r1, r3
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f000 fc92 	bl	8011eb4 <writeToOutput>

        if (impl->cmdSize > 0)
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	8c1b      	ldrh	r3, [r3, #32]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d002      	beq.n	801159e <onControlInput+0x5e>
            parseCommand(cli);
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f84b 	bl	8011634 <parseCommand>
        impl->cmdSize = 0;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2200      	movs	r2, #0
 80115a2:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	69db      	ldr	r3, [r3, #28]
 80115a8:	68fa      	ldr	r2, [r7, #12]
 80115aa:	8c12      	ldrh	r2, [r2, #32]
 80115ac:	4413      	add	r3, r2
 80115ae:	2200      	movs	r2, #0
 80115b0:	701a      	strb	r2, [r3, #0]
        impl->inputLineLength = 0;
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2200      	movs	r2, #0
 80115b6:	861a      	strh	r2, [r3, #48]	; 0x30
        impl->history.current = 0;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2200      	movs	r2, #0
 80115bc:	815a      	strh	r2, [r3, #10]

        writeToOutput(cli, impl->invitation);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	4619      	mov	r1, r3
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f000 fc75 	bl	8011eb4 <writeToOutput>
 80115ca:	e02e      	b.n	801162a <onControlInput+0xea>
    } else if ((c == '\b' || c == 0x7F) && impl->cmdSize > 0) {
 80115cc:	78fb      	ldrb	r3, [r7, #3]
 80115ce:	2b08      	cmp	r3, #8
 80115d0:	d002      	beq.n	80115d8 <onControlInput+0x98>
 80115d2:	78fb      	ldrb	r3, [r7, #3]
 80115d4:	2b7f      	cmp	r3, #127	; 0x7f
 80115d6:	d120      	bne.n	801161a <onControlInput+0xda>
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	8c1b      	ldrh	r3, [r3, #32]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d01c      	beq.n	801161a <onControlInput+0xda>
        // remove char from screen
        cli->writeChar(cli, '\b');
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2108      	movs	r1, #8
 80115e6:	6878      	ldr	r0, [r7, #4]
 80115e8:	4798      	blx	r3
        cli->writeChar(cli, ' ');
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2120      	movs	r1, #32
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	4798      	blx	r3
        cli->writeChar(cli, '\b');
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2108      	movs	r1, #8
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	4798      	blx	r3
        // and from buffer
        --impl->cmdSize;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	8c1b      	ldrh	r3, [r3, #32]
 8011602:	3b01      	subs	r3, #1
 8011604:	b29a      	uxth	r2, r3
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	841a      	strh	r2, [r3, #32]
        impl->cmdBuffer[impl->cmdSize] = '\0';
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	69db      	ldr	r3, [r3, #28]
 801160e:	68fa      	ldr	r2, [r7, #12]
 8011610:	8c12      	ldrh	r2, [r2, #32]
 8011612:	4413      	add	r3, r2
 8011614:	2200      	movs	r2, #0
 8011616:	701a      	strb	r2, [r3, #0]
 8011618:	e007      	b.n	801162a <onControlInput+0xea>
    } else if (c == '\t') {
 801161a:	78fb      	ldrb	r3, [r7, #3]
 801161c:	2b09      	cmp	r3, #9
 801161e:	d104      	bne.n	801162a <onControlInput+0xea>
        onAutocompleteRequest(cli);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f000 fb8b 	bl	8011d3c <onAutocompleteRequest>
 8011626:	e000      	b.n	801162a <onControlInput+0xea>
        return;
 8011628:	bf00      	nop
    }

}
 801162a:	3710      	adds	r7, #16
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20000024 	.word	0x20000024

08011634 <parseCommand>:

static void parseCommand(EmbeddedCli *cli) {
 8011634:	b590      	push	{r4, r7, lr}
 8011636:	b08f      	sub	sp, #60	; 0x3c
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	68db      	ldr	r3, [r3, #12]
 8011640:	61bb      	str	r3, [r7, #24]

    bool isEmpty = true;
 8011642:	2301      	movs	r3, #1
 8011644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (int i = 0; i < impl->cmdSize; ++i) {
 8011648:	2300      	movs	r3, #0
 801164a:	633b      	str	r3, [r7, #48]	; 0x30
 801164c:	e00d      	b.n	801166a <parseCommand+0x36>
        if (impl->cmdBuffer[i] != ' ') {
 801164e:	69bb      	ldr	r3, [r7, #24]
 8011650:	69da      	ldr	r2, [r3, #28]
 8011652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011654:	4413      	add	r3, r2
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	2b20      	cmp	r3, #32
 801165a:	d003      	beq.n	8011664 <parseCommand+0x30>
            isEmpty = false;
 801165c:	2300      	movs	r3, #0
 801165e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8011662:	e008      	b.n	8011676 <parseCommand+0x42>
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011666:	3301      	adds	r3, #1
 8011668:	633b      	str	r3, [r7, #48]	; 0x30
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	8c1b      	ldrh	r3, [r3, #32]
 801166e:	461a      	mov	r2, r3
 8011670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011672:	4293      	cmp	r3, r2
 8011674:	dbeb      	blt.n	801164e <parseCommand+0x1a>
        }
    }
    // do not process empty commands
    if (isEmpty)
 8011676:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801167a:	2b00      	cmp	r3, #0
 801167c:	f040 80dc 	bne.w	8011838 <parseCommand+0x204>
        return;
    // push command to history before buffer is modified
    historyPut(&impl->history, impl->cmdBuffer);
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	1d1a      	adds	r2, r3, #4
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	69db      	ldr	r3, [r3, #28]
 8011688:	4619      	mov	r1, r3
 801168a:	4610      	mov	r0, r2
 801168c:	f000 fcdd 	bl	801204a <historyPut>

    char *cmdName = NULL;
 8011690:	2300      	movs	r3, #0
 8011692:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *cmdArgs = NULL;
 8011694:	2300      	movs	r3, #0
 8011696:	62bb      	str	r3, [r7, #40]	; 0x28
    bool nameFinished = false;
 8011698:	2300      	movs	r3, #0
 801169a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // find command name and command args inside command buffer
    for (int i = 0; i < impl->cmdSize; ++i) {
 801169e:	2300      	movs	r3, #0
 80116a0:	623b      	str	r3, [r7, #32]
 80116a2:	e030      	b.n	8011706 <parseCommand+0xd2>
        char c = impl->cmdBuffer[i];
 80116a4:	69bb      	ldr	r3, [r7, #24]
 80116a6:	69da      	ldr	r2, [r3, #28]
 80116a8:	6a3b      	ldr	r3, [r7, #32]
 80116aa:	4413      	add	r3, r2
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	75fb      	strb	r3, [r7, #23]

        if (c == ' ') {
 80116b0:	7dfb      	ldrb	r3, [r7, #23]
 80116b2:	2b20      	cmp	r3, #32
 80116b4:	d10f      	bne.n	80116d6 <parseCommand+0xa2>
            // all spaces between name and args are filled with zeros
            // so name is a correct null-terminated string
            if (cmdArgs == NULL)
 80116b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d105      	bne.n	80116c8 <parseCommand+0x94>
                impl->cmdBuffer[i] = '\0';
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	69da      	ldr	r2, [r3, #28]
 80116c0:	6a3b      	ldr	r3, [r7, #32]
 80116c2:	4413      	add	r3, r2
 80116c4:	2200      	movs	r2, #0
 80116c6:	701a      	strb	r2, [r3, #0]
            if (cmdName != NULL)
 80116c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d018      	beq.n	8011700 <parseCommand+0xcc>
                nameFinished = true;
 80116ce:	2301      	movs	r3, #1
 80116d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116d4:	e014      	b.n	8011700 <parseCommand+0xcc>

        } else if (cmdName == NULL) {
 80116d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d105      	bne.n	80116e8 <parseCommand+0xb4>
            cmdName = &impl->cmdBuffer[i];
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	69da      	ldr	r2, [r3, #28]
 80116e0:	6a3b      	ldr	r3, [r7, #32]
 80116e2:	4413      	add	r3, r2
 80116e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80116e6:	e00b      	b.n	8011700 <parseCommand+0xcc>
        } else if (cmdArgs == NULL && nameFinished) {
 80116e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d108      	bne.n	8011700 <parseCommand+0xcc>
 80116ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d004      	beq.n	8011700 <parseCommand+0xcc>
            cmdArgs = &impl->cmdBuffer[i];
 80116f6:	69bb      	ldr	r3, [r7, #24]
 80116f8:	69da      	ldr	r2, [r3, #28]
 80116fa:	6a3b      	ldr	r3, [r7, #32]
 80116fc:	4413      	add	r3, r2
 80116fe:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int i = 0; i < impl->cmdSize; ++i) {
 8011700:	6a3b      	ldr	r3, [r7, #32]
 8011702:	3301      	adds	r3, #1
 8011704:	623b      	str	r3, [r7, #32]
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	8c1b      	ldrh	r3, [r3, #32]
 801170a:	461a      	mov	r2, r3
 801170c:	6a3b      	ldr	r3, [r7, #32]
 801170e:	4293      	cmp	r3, r2
 8011710:	dbc8      	blt.n	80116a4 <parseCommand+0x70>
        }
    }

    // we keep two last bytes in cmd buffer reserved so cmdSize is always by 2
    // less than cmdMaxSize
    impl->cmdBuffer[impl->cmdSize + 1] = '\0';
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	69da      	ldr	r2, [r3, #28]
 8011716:	69bb      	ldr	r3, [r7, #24]
 8011718:	8c1b      	ldrh	r3, [r3, #32]
 801171a:	3301      	adds	r3, #1
 801171c:	4413      	add	r3, r2
 801171e:	2200      	movs	r2, #0
 8011720:	701a      	strb	r2, [r3, #0]

    if (cmdName == NULL)
 8011722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011724:	2b00      	cmp	r3, #0
 8011726:	f000 8089 	beq.w	801183c <parseCommand+0x208>
        return;

    // try to find command in bindings
    for (int i = 0; i < impl->bindingsCount; ++i) {
 801172a:	2300      	movs	r3, #0
 801172c:	61fb      	str	r3, [r7, #28]
 801172e:	e054      	b.n	80117da <parseCommand+0x1a6>
        if (strcmp(cmdName, impl->bindings[i].name) == 0) {
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011734:	69fa      	ldr	r2, [r7, #28]
 8011736:	4613      	mov	r3, r2
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	4413      	add	r3, r2
 801173c:	009b      	lsls	r3, r3, #2
 801173e:	440b      	add	r3, r1
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	4619      	mov	r1, r3
 8011744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011746:	f7ee fd4b 	bl	80001e0 <strcmp>
 801174a:	4603      	mov	r3, r0
 801174c:	2b00      	cmp	r3, #0
 801174e:	d141      	bne.n	80117d4 <parseCommand+0x1a0>
            if (impl->bindings[i].binding == NULL)
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011754:	69fa      	ldr	r2, [r7, #28]
 8011756:	4613      	mov	r3, r2
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	4413      	add	r3, r2
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	440b      	add	r3, r1
 8011760:	691b      	ldr	r3, [r3, #16]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d040      	beq.n	80117e8 <parseCommand+0x1b4>
                break;

            if (impl->bindings[i].tokenizeArgs)
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801176a:	69fa      	ldr	r2, [r7, #28]
 801176c:	4613      	mov	r3, r2
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	4413      	add	r3, r2
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	440b      	add	r3, r1
 8011776:	7a1b      	ldrb	r3, [r3, #8]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d002      	beq.n	8011782 <parseCommand+0x14e>
                embeddedCliTokenizeArgs(cmdArgs);
 801177c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801177e:	f7ff fd3b 	bl	80111f8 <embeddedCliTokenizeArgs>
            // currently, output is blank line, so we can just print directly
            SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011788:	f043 0310 	orr.w	r3, r3, #16
 801178c:	b2da      	uxtb	r2, r3
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            impl->bindings[i].binding(cli, cmdArgs, impl->bindings[i].context);
 8011794:	69bb      	ldr	r3, [r7, #24]
 8011796:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011798:	69fa      	ldr	r2, [r7, #28]
 801179a:	4613      	mov	r3, r2
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4413      	add	r3, r2
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	440b      	add	r3, r1
 80117a4:	691c      	ldr	r4, [r3, #16]
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80117aa:	69fa      	ldr	r2, [r7, #28]
 80117ac:	4613      	mov	r3, r2
 80117ae:	009b      	lsls	r3, r3, #2
 80117b0:	4413      	add	r3, r2
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	440b      	add	r3, r1
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	461a      	mov	r2, r3
 80117ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	47a0      	blx	r4
            UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80117c0:	69bb      	ldr	r3, [r7, #24]
 80117c2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80117c6:	f023 0310 	bic.w	r3, r3, #16
 80117ca:	b2da      	uxtb	r2, r3
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            return;
 80117d2:	e034      	b.n	801183e <parseCommand+0x20a>
    for (int i = 0; i < impl->bindingsCount; ++i) {
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	3301      	adds	r3, #1
 80117d8:	61fb      	str	r3, [r7, #28]
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80117de:	461a      	mov	r2, r3
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	4293      	cmp	r3, r2
 80117e4:	dba4      	blt.n	8011730 <parseCommand+0xfc>
 80117e6:	e000      	b.n	80117ea <parseCommand+0x1b6>
                break;
 80117e8:	bf00      	nop
        }
    }

    // command not found in bindings or binding was null
    // try to call default callback
    if (cli->onCommand != NULL) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d01d      	beq.n	801182e <parseCommand+0x1fa>
        CliCommand command;
        command.name = cmdName;
 80117f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f4:	60fb      	str	r3, [r7, #12]
        command.args = cmdArgs;
 80117f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f8:	613b      	str	r3, [r7, #16]

        // currently, output is blank line, so we can just print directly
        SET_FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011800:	f043 0310 	orr.w	r3, r3, #16
 8011804:	b2da      	uxtb	r2, r3
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
        cli->onCommand(cli, &command);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	f107 020c 	add.w	r2, r7, #12
 8011814:	4611      	mov	r1, r2
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	4798      	blx	r3
        UNSET_U8FLAG(impl->flags, CLI_FLAG_DIRECT_PRINT);
 801181a:	69bb      	ldr	r3, [r7, #24]
 801181c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011820:	f023 0310 	bic.w	r3, r3, #16
 8011824:	b2da      	uxtb	r2, r3
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 801182c:	e007      	b.n	801183e <parseCommand+0x20a>
    } else {
        onUnknownCommand(cli, cmdName);
 801182e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f000 f949 	bl	8011ac8 <onUnknownCommand>
 8011836:	e002      	b.n	801183e <parseCommand+0x20a>
        return;
 8011838:	bf00      	nop
 801183a:	e000      	b.n	801183e <parseCommand+0x20a>
        return;
 801183c:	bf00      	nop
    }
}
 801183e:	373c      	adds	r7, #60	; 0x3c
 8011840:	46bd      	mov	sp, r7
 8011842:	bd90      	pop	{r4, r7, pc}

08011844 <initInternalBindings>:

static void initInternalBindings(EmbeddedCli *cli) {
 8011844:	b5b0      	push	{r4, r5, r7, lr}
 8011846:	b08a      	sub	sp, #40	; 0x28
 8011848:	af02      	add	r7, sp, #8
 801184a:	6078      	str	r0, [r7, #4]
    CliCommandBinding b = {
 801184c:	4b0c      	ldr	r3, [pc, #48]	; (8011880 <initInternalBindings+0x3c>)
 801184e:	f107 040c 	add.w	r4, r7, #12
 8011852:	461d      	mov	r5, r3
 8011854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011858:	682b      	ldr	r3, [r5, #0]
 801185a:	6023      	str	r3, [r4, #0]
//            "Print list of commands",
//            true,
//            NULL,
//            onHelp
//    };
    embeddedCliAddBinding(cli, b);
 801185c:	466a      	mov	r2, sp
 801185e:	f107 0318 	add.w	r3, r7, #24
 8011862:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011866:	e882 0003 	stmia.w	r2, {r0, r1}
 801186a:	f107 030c 	add.w	r3, r7, #12
 801186e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7ff fc4c 	bl	801110e <embeddedCliAddBinding>
//    embeddedCliAddBinding(cli, _b);
}
 8011876:	bf00      	nop
 8011878:	3720      	adds	r7, #32
 801187a:	46bd      	mov	sp, r7
 801187c:	bdb0      	pop	{r4, r5, r7, pc}
 801187e:	bf00      	nop
 8011880:	08021db4 	.word	0x08021db4

08011884 <onHelp>:

static void onHelp(EmbeddedCli *cli, char *tokens, void *context) {
 8011884:	b580      	push	{r7, lr}
 8011886:	b08c      	sub	sp, #48	; 0x30
 8011888:	af00      	add	r7, sp, #0
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	607a      	str	r2, [r7, #4]
    UNUSED(context);
    PREPARE_IMPL(cli);
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	68db      	ldr	r3, [r3, #12]
 8011894:	61fb      	str	r3, [r7, #28]

    if (impl->bindingsCount == 0) {
 8011896:	69fb      	ldr	r3, [r7, #28]
 8011898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801189a:	2b00      	cmp	r3, #0
 801189c:	d10a      	bne.n	80118b4 <onHelp+0x30>
        writeToOutput(cli, "Help is not available");
 801189e:	4983      	ldr	r1, [pc, #524]	; (8011aac <onHelp+0x228>)
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f000 fb07 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80118a6:	4b82      	ldr	r3, [pc, #520]	; (8011ab0 <onHelp+0x22c>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	4619      	mov	r1, r3
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f000 fb01 	bl	8011eb4 <writeToOutput>
        return;
 80118b2:	e0f8      	b.n	8011aa6 <onHelp+0x222>
    }

    uint16_t tokenCount = embeddedCliGetTokenCount(tokens);
 80118b4:	68b8      	ldr	r0, [r7, #8]
 80118b6:	f7ff fd49 	bl	801134c <embeddedCliGetTokenCount>
 80118ba:	4603      	mov	r3, r0
 80118bc:	837b      	strh	r3, [r7, #26]
    if (tokenCount == 0) {
 80118be:	8b7b      	ldrh	r3, [r7, #26]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d176      	bne.n	80119b2 <onHelp+0x12e>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80118c4:	2300      	movs	r3, #0
 80118c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118c8:	e03c      	b.n	8011944 <onHelp+0xc0>
            writeToOutput(cli, " * ");
 80118ca:	497a      	ldr	r1, [pc, #488]	; (8011ab4 <onHelp+0x230>)
 80118cc:	68f8      	ldr	r0, [r7, #12]
 80118ce:	f000 faf1 	bl	8011eb4 <writeToOutput>
            writeToOutput(cli, impl->bindings[i].name);
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80118d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118d8:	4613      	mov	r3, r2
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	4413      	add	r3, r2
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	440b      	add	r3, r1
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	4619      	mov	r1, r3
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	f000 fae4 	bl	8011eb4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 80118ec:	4b70      	ldr	r3, [pc, #448]	; (8011ab0 <onHelp+0x22c>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	4619      	mov	r1, r3
 80118f2:	68f8      	ldr	r0, [r7, #12]
 80118f4:	f000 fade 	bl	8011eb4 <writeToOutput>
            if (impl->bindings[i].help != NULL) {
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80118fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118fe:	4613      	mov	r3, r2
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4413      	add	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	440b      	add	r3, r1
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d017      	beq.n	801193e <onHelp+0xba>
                cli->writeChar(cli, '\t');
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2109      	movs	r1, #9
 8011914:	68f8      	ldr	r0, [r7, #12]
 8011916:	4798      	blx	r3
                writeToOutput(cli, impl->bindings[i].help);
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801191e:	4613      	mov	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	4413      	add	r3, r2
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	440b      	add	r3, r1
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	4619      	mov	r1, r3
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	f000 fac1 	bl	8011eb4 <writeToOutput>
                writeToOutput(cli, lineBreak);
 8011932:	4b5f      	ldr	r3, [pc, #380]	; (8011ab0 <onHelp+0x22c>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4619      	mov	r1, r3
 8011938:	68f8      	ldr	r0, [r7, #12]
 801193a:	f000 fabb 	bl	8011eb4 <writeToOutput>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 801193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011940:	3301      	adds	r3, #1
 8011942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011948:	461a      	mov	r2, r3
 801194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194c:	4293      	cmp	r3, r2
 801194e:	dbbc      	blt.n	80118ca <onHelp+0x46>
            }
        }

        writeToOutput(cli, lineBreak);
 8011950:	4b57      	ldr	r3, [pc, #348]	; (8011ab0 <onHelp+0x22c>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	4619      	mov	r1, r3
 8011956:	68f8      	ldr	r0, [r7, #12]
 8011958:	f000 faac 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 801195c:	4b54      	ldr	r3, [pc, #336]	; (8011ab0 <onHelp+0x22c>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4619      	mov	r1, r3
 8011962:	68f8      	ldr	r0, [r7, #12]
 8011964:	f000 faa6 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011968:	4b51      	ldr	r3, [pc, #324]	; (8011ab0 <onHelp+0x22c>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	4619      	mov	r1, r3
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	f000 faa0 	bl	8011eb4 <writeToOutput>
		writeToOutput(cli, "BuildUp! Edge C02 Data Logger "); //TM 0x99
 8011974:	4950      	ldr	r1, [pc, #320]	; (8011ab8 <onHelp+0x234>)
 8011976:	68f8      	ldr	r0, [r7, #12]
 8011978:	f000 fa9c 	bl	8011eb4 <writeToOutput>
		writeToOutput(cli, lineBreak);
 801197c:	4b4c      	ldr	r3, [pc, #304]	; (8011ab0 <onHelp+0x22c>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	4619      	mov	r1, r3
 8011982:	68f8      	ldr	r0, [r7, #12]
 8011984:	f000 fa96 	bl	8011eb4 <writeToOutput>
		writeToOutput(cli, "Thingsfactory Co. Montreal Canada "); //copyright 0xA9
 8011988:	494c      	ldr	r1, [pc, #304]	; (8011abc <onHelp+0x238>)
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	f000 fa92 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011990:	4b47      	ldr	r3, [pc, #284]	; (8011ab0 <onHelp+0x22c>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4619      	mov	r1, r3
 8011996:	68f8      	ldr	r0, [r7, #12]
 8011998:	f000 fa8c 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, "thingsfactory.com");
 801199c:	4948      	ldr	r1, [pc, #288]	; (8011ac0 <onHelp+0x23c>)
 801199e:	68f8      	ldr	r0, [r7, #12]
 80119a0:	f000 fa88 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 80119a4:	4b42      	ldr	r3, [pc, #264]	; (8011ab0 <onHelp+0x22c>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4619      	mov	r1, r3
 80119aa:	68f8      	ldr	r0, [r7, #12]
 80119ac:	f000 fa82 	bl	8011eb4 <writeToOutput>
 80119b0:	e079      	b.n	8011aa6 <onHelp+0x222>



    } else if (tokenCount == 1) {
 80119b2:	8b7b      	ldrh	r3, [r7, #26]
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d16c      	bne.n	8011a92 <onHelp+0x20e>
        // try find command
        const char *helpStr = NULL;
 80119b8:	2300      	movs	r3, #0
 80119ba:	62bb      	str	r3, [r7, #40]	; 0x28
        const char *cmdName = embeddedCliGetToken(tokens, 1);
 80119bc:	2101      	movs	r1, #1
 80119be:	68b8      	ldr	r0, [r7, #8]
 80119c0:	f7ff fc8e 	bl	80112e0 <embeddedCliGetToken>
 80119c4:	6178      	str	r0, [r7, #20]
        bool found = false;
 80119c6:	2300      	movs	r3, #0
 80119c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int i = 0; i < impl->bindingsCount; ++i) {
 80119cc:	2300      	movs	r3, #0
 80119ce:	623b      	str	r3, [r7, #32]
 80119d0:	e020      	b.n	8011a14 <onHelp+0x190>
            if (strcmp(impl->bindings[i].name, cmdName) == 0) {
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80119d6:	6a3a      	ldr	r2, [r7, #32]
 80119d8:	4613      	mov	r3, r2
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	4413      	add	r3, r2
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	440b      	add	r3, r1
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	6979      	ldr	r1, [r7, #20]
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7ee fbfa 	bl	80001e0 <strcmp>
 80119ec:	4603      	mov	r3, r0
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d10d      	bne.n	8011a0e <onHelp+0x18a>
                helpStr = impl->bindings[i].help;
 80119f2:	69fb      	ldr	r3, [r7, #28]
 80119f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80119f6:	6a3a      	ldr	r2, [r7, #32]
 80119f8:	4613      	mov	r3, r2
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	4413      	add	r3, r2
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	440b      	add	r3, r1
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	62bb      	str	r3, [r7, #40]	; 0x28
                found = true;
 8011a06:	2301      	movs	r3, #1
 8011a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8011a0c:	e008      	b.n	8011a20 <onHelp+0x19c>
        for (int i = 0; i < impl->bindingsCount; ++i) {
 8011a0e:	6a3b      	ldr	r3, [r7, #32]
 8011a10:	3301      	adds	r3, #1
 8011a12:	623b      	str	r3, [r7, #32]
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011a18:	461a      	mov	r2, r3
 8011a1a:	6a3b      	ldr	r3, [r7, #32]
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	dbd8      	blt.n	80119d2 <onHelp+0x14e>
            }
        }
        if (found && helpStr != NULL) {
 8011a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d020      	beq.n	8011a6a <onHelp+0x1e6>
 8011a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d01d      	beq.n	8011a6a <onHelp+0x1e6>
            writeToOutput(cli, " * ");
 8011a2e:	4921      	ldr	r1, [pc, #132]	; (8011ab4 <onHelp+0x230>)
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f000 fa3f 	bl	8011eb4 <writeToOutput>
            writeToOutput(cli, cmdName);
 8011a36:	6979      	ldr	r1, [r7, #20]
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	f000 fa3b 	bl	8011eb4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011a3e:	4b1c      	ldr	r3, [pc, #112]	; (8011ab0 <onHelp+0x22c>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	4619      	mov	r1, r3
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f000 fa35 	bl	8011eb4 <writeToOutput>
            cli->writeChar(cli, '\t');
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2109      	movs	r1, #9
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	4798      	blx	r3
            writeToOutput(cli, helpStr);
 8011a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a56:	68f8      	ldr	r0, [r7, #12]
 8011a58:	f000 fa2c 	bl	8011eb4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011a5c:	4b14      	ldr	r3, [pc, #80]	; (8011ab0 <onHelp+0x22c>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4619      	mov	r1, r3
 8011a62:	68f8      	ldr	r0, [r7, #12]
 8011a64:	f000 fa26 	bl	8011eb4 <writeToOutput>
 8011a68:	e01d      	b.n	8011aa6 <onHelp+0x222>
        } else if (found) {
 8011a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d00a      	beq.n	8011a88 <onHelp+0x204>
            writeToOutput(cli, "Help is not available");
 8011a72:	490e      	ldr	r1, [pc, #56]	; (8011aac <onHelp+0x228>)
 8011a74:	68f8      	ldr	r0, [r7, #12]
 8011a76:	f000 fa1d 	bl	8011eb4 <writeToOutput>
            writeToOutput(cli, lineBreak);
 8011a7a:	4b0d      	ldr	r3, [pc, #52]	; (8011ab0 <onHelp+0x22c>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	4619      	mov	r1, r3
 8011a80:	68f8      	ldr	r0, [r7, #12]
 8011a82:	f000 fa17 	bl	8011eb4 <writeToOutput>
 8011a86:	e00e      	b.n	8011aa6 <onHelp+0x222>
        } else {
            onUnknownCommand(cli, cmdName);
 8011a88:	6979      	ldr	r1, [r7, #20]
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	f000 f81c 	bl	8011ac8 <onUnknownCommand>
 8011a90:	e009      	b.n	8011aa6 <onHelp+0x222>
        }
    } else {
        writeToOutput(cli, "Command \"help\" receives one or zero arguments");
 8011a92:	490c      	ldr	r1, [pc, #48]	; (8011ac4 <onHelp+0x240>)
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f000 fa0d 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011a9a:	4b05      	ldr	r3, [pc, #20]	; (8011ab0 <onHelp+0x22c>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	f000 fa07 	bl	8011eb4 <writeToOutput>
    }
}
 8011aa6:	3730      	adds	r7, #48	; 0x30
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	08021dc8 	.word	0x08021dc8
 8011ab0:	20000024 	.word	0x20000024
 8011ab4:	08021de0 	.word	0x08021de0
 8011ab8:	08021de4 	.word	0x08021de4
 8011abc:	08021e04 	.word	0x08021e04
 8011ac0:	08021e28 	.word	0x08021e28
 8011ac4:	08021e3c 	.word	0x08021e3c

08011ac8 <onUnknownCommand>:

static void onUnknownCommand(EmbeddedCli *cli, const char *name) {
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
    writeToOutput(cli, "Unknown command: \"");
 8011ad2:	490b      	ldr	r1, [pc, #44]	; (8011b00 <onUnknownCommand+0x38>)
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f000 f9ed 	bl	8011eb4 <writeToOutput>
    writeToOutput(cli, name);
 8011ada:	6839      	ldr	r1, [r7, #0]
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f000 f9e9 	bl	8011eb4 <writeToOutput>
    writeToOutput(cli, "\". Write \"help\" for a list of available commands");
 8011ae2:	4908      	ldr	r1, [pc, #32]	; (8011b04 <onUnknownCommand+0x3c>)
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f000 f9e5 	bl	8011eb4 <writeToOutput>
    writeToOutput(cli, lineBreak);
 8011aea:	4b07      	ldr	r3, [pc, #28]	; (8011b08 <onUnknownCommand+0x40>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	4619      	mov	r1, r3
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 f9df 	bl	8011eb4 <writeToOutput>
}
 8011af6:	bf00      	nop
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	08021e6c 	.word	0x08021e6c
 8011b04:	08021e80 	.word	0x08021e80
 8011b08:	20000024 	.word	0x20000024

08011b0c <getAutocompletedCommand>:

static AutocompletedCommand getAutocompletedCommand(EmbeddedCli *cli, const char *prefix) {
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b08e      	sub	sp, #56	; 0x38
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	60f8      	str	r0, [r7, #12]
 8011b14:	60b9      	str	r1, [r7, #8]
 8011b16:	607a      	str	r2, [r7, #4]
    AutocompletedCommand cmd = {NULL, 0, 0};
 8011b18:	2300      	movs	r3, #0
 8011b1a:	613b      	str	r3, [r7, #16]
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	82bb      	strh	r3, [r7, #20]
 8011b20:	2300      	movs	r3, #0
 8011b22:	82fb      	strh	r3, [r7, #22]

    size_t prefixLen = strlen(prefix);
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f7ee fb65 	bl	80001f4 <strlen>
 8011b2a:	6278      	str	r0, [r7, #36]	; 0x24

    PREPARE_IMPL(cli);
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	68db      	ldr	r3, [r3, #12]
 8011b30:	623b      	str	r3, [r7, #32]
    if (impl->bindingsCount == 0 || prefixLen == 0)
 8011b32:	6a3b      	ldr	r3, [r7, #32]
 8011b34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d002      	beq.n	8011b40 <getAutocompletedCommand+0x34>
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d108      	bne.n	8011b52 <getAutocompletedCommand+0x46>
        return cmd;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	461a      	mov	r2, r3
 8011b44:	f107 0310 	add.w	r3, r7, #16
 8011b48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011b4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8011b50:	e095      	b.n	8011c7e <getAutocompletedCommand+0x172>


    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011b52:	2300      	movs	r3, #0
 8011b54:	637b      	str	r3, [r7, #52]	; 0x34
 8011b56:	e083      	b.n	8011c60 <getAutocompletedCommand+0x154>
        const char *name = impl->bindings[i].name;
 8011b58:	6a3b      	ldr	r3, [r7, #32]
 8011b5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b5e:	4613      	mov	r3, r2
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	4413      	add	r3, r2
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	440b      	add	r3, r1
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	61fb      	str	r3, [r7, #28]
        size_t len = strlen(name);
 8011b6c:	69f8      	ldr	r0, [r7, #28]
 8011b6e:	f7ee fb41 	bl	80001f4 <strlen>
 8011b72:	61b8      	str	r0, [r7, #24]

        // unset autocomplete flag
        UNSET_U8FLAG(impl->bindingsFlags[i], BINDING_FLAG_AUTOCOMPLETE);
 8011b74:	6a3b      	ldr	r3, [r7, #32]
 8011b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7a:	4413      	add	r3, r2
 8011b7c:	781a      	ldrb	r2, [r3, #0]
 8011b7e:	6a3b      	ldr	r3, [r7, #32]
 8011b80:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8011b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b84:	440b      	add	r3, r1
 8011b86:	f022 0201 	bic.w	r2, r2, #1
 8011b8a:	b2d2      	uxtb	r2, r2
 8011b8c:	701a      	strb	r2, [r3, #0]

        if (len < prefixLen)
 8011b8e:	69ba      	ldr	r2, [r7, #24]
 8011b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d35e      	bcc.n	8011c54 <getAutocompletedCommand+0x148>
            continue;

        // check if this command is candidate for autocomplete
        bool isCandidate = true;
 8011b96:	2301      	movs	r3, #1
 8011b98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        for (size_t j = 0; j < prefixLen; ++j) {
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ba0:	e010      	b.n	8011bc4 <getAutocompletedCommand+0xb8>
            if (prefix[j] != name[j]) {
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba6:	4413      	add	r3, r2
 8011ba8:	781a      	ldrb	r2, [r3, #0]
 8011baa:	69f9      	ldr	r1, [r7, #28]
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	440b      	add	r3, r1
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d003      	beq.n	8011bbe <getAutocompletedCommand+0xb2>
                isCandidate = false;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                break;
 8011bbc:	e006      	b.n	8011bcc <getAutocompletedCommand+0xc0>
        for (size_t j = 0; j < prefixLen; ++j) {
 8011bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc0:	3301      	adds	r3, #1
 8011bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d3ea      	bcc.n	8011ba2 <getAutocompletedCommand+0x96>
            }
        }
        if (!isCandidate)
 8011bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011bd0:	f083 0301 	eor.w	r3, r3, #1
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d13e      	bne.n	8011c58 <getAutocompletedCommand+0x14c>
            continue;

        impl->bindingsFlags[i] |= BINDING_FLAG_AUTOCOMPLETE;
 8011bda:	6a3b      	ldr	r3, [r7, #32]
 8011bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be0:	4413      	add	r3, r2
 8011be2:	781a      	ldrb	r2, [r3, #0]
 8011be4:	6a3b      	ldr	r3, [r7, #32]
 8011be6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8011be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bea:	440b      	add	r3, r1
 8011bec:	f042 0201 	orr.w	r2, r2, #1
 8011bf0:	b2d2      	uxtb	r2, r2
 8011bf2:	701a      	strb	r2, [r3, #0]

        if (cmd.candidateCount == 0 || len < cmd.autocompletedLen)
 8011bf4:	8afb      	ldrh	r3, [r7, #22]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d004      	beq.n	8011c04 <getAutocompletedCommand+0xf8>
 8011bfa:	8abb      	ldrh	r3, [r7, #20]
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	4293      	cmp	r3, r2
 8011c02:	d202      	bcs.n	8011c0a <getAutocompletedCommand+0xfe>
            cmd.autocompletedLen = (uint16_t) len;
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	82bb      	strh	r3, [r7, #20]

        ++cmd.candidateCount;
 8011c0a:	8afb      	ldrh	r3, [r7, #22]
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	82fb      	strh	r3, [r7, #22]

        if (cmd.candidateCount == 1) {
 8011c12:	8afb      	ldrh	r3, [r7, #22]
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d102      	bne.n	8011c1e <getAutocompletedCommand+0x112>
            cmd.firstCandidate = name;
 8011c18:	69fb      	ldr	r3, [r7, #28]
 8011c1a:	613b      	str	r3, [r7, #16]
            continue;
 8011c1c:	e01d      	b.n	8011c5a <getAutocompletedCommand+0x14e>
        }

        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011c1e:	6a3b      	ldr	r3, [r7, #32]
 8011c20:	8c1b      	ldrh	r3, [r3, #32]
 8011c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c24:	e010      	b.n	8011c48 <getAutocompletedCommand+0x13c>
            if (cmd.firstCandidate[j] != name[j]) {
 8011c26:	693a      	ldr	r2, [r7, #16]
 8011c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c2a:	4413      	add	r3, r2
 8011c2c:	781a      	ldrb	r2, [r3, #0]
 8011c2e:	69f9      	ldr	r1, [r7, #28]
 8011c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c32:	440b      	add	r3, r1
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d003      	beq.n	8011c42 <getAutocompletedCommand+0x136>
                cmd.autocompletedLen = (uint16_t) j;
 8011c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	82bb      	strh	r3, [r7, #20]
                break;
 8011c40:	e00b      	b.n	8011c5a <getAutocompletedCommand+0x14e>
        for (size_t j = impl->cmdSize; j < cmd.autocompletedLen; ++j) {
 8011c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c44:	3301      	adds	r3, #1
 8011c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c48:	8abb      	ldrh	r3, [r7, #20]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d3e9      	bcc.n	8011c26 <getAutocompletedCommand+0x11a>
 8011c52:	e002      	b.n	8011c5a <getAutocompletedCommand+0x14e>
            continue;
 8011c54:	bf00      	nop
 8011c56:	e000      	b.n	8011c5a <getAutocompletedCommand+0x14e>
            continue;
 8011c58:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c5c:	3301      	adds	r3, #1
 8011c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8011c60:	6a3b      	ldr	r3, [r7, #32]
 8011c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011c64:	461a      	mov	r2, r3
 8011c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c68:	4293      	cmp	r3, r2
 8011c6a:	f6ff af75 	blt.w	8011b58 <getAutocompletedCommand+0x4c>
            }
        }
    }

    return cmd;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	461a      	mov	r2, r3
 8011c72:	f107 0310 	add.w	r3, r7, #16
 8011c76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c7a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011c7e:	68f8      	ldr	r0, [r7, #12]
 8011c80:	3738      	adds	r7, #56	; 0x38
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <printLiveAutocompletion>:

static void printLiveAutocompletion(EmbeddedCli *cli) {
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b088      	sub	sp, #32
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	617b      	str	r3, [r7, #20]

    if (!IS_FLAG_SET(impl->flags, CLI_FLAG_AUTOCOMPLETE_ENABLED))
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011c9a:	f003 0320 	and.w	r3, r3, #32
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d048      	beq.n	8011d34 <printLiveAutocompletion+0xae>
        return;

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	69da      	ldr	r2, [r3, #28]
 8011ca6:	f107 030c 	add.w	r3, r7, #12
 8011caa:	6879      	ldr	r1, [r7, #4]
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7ff ff2d 	bl	8011b0c <getAutocompletedCommand>

    if (cmd.candidateCount == 0) {
 8011cb2:	8a7b      	ldrh	r3, [r7, #18]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d102      	bne.n	8011cbe <printLiveAutocompletion+0x38>
        cmd.autocompletedLen = impl->cmdSize;
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	8c1b      	ldrh	r3, [r3, #32]
 8011cbc:	823b      	strh	r3, [r7, #16]
    }

    // print live autocompletion (or nothing, if it doesn't exist)
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	8c1b      	ldrh	r3, [r3, #32]
 8011cc2:	61fb      	str	r3, [r7, #28]
 8011cc4:	e00b      	b.n	8011cde <printLiveAutocompletion+0x58>
        cli->writeChar(cli, cmd.firstCandidate[i]);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	68f9      	ldr	r1, [r7, #12]
 8011ccc:	69fa      	ldr	r2, [r7, #28]
 8011cce:	440a      	add	r2, r1
 8011cd0:	7812      	ldrb	r2, [r2, #0]
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	4798      	blx	r3
    for (size_t i = impl->cmdSize; i < cmd.autocompletedLen; ++i) {
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	61fb      	str	r3, [r7, #28]
 8011cde:	8a3b      	ldrh	r3, [r7, #16]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d3ee      	bcc.n	8011cc6 <printLiveAutocompletion+0x40>
    }
    // replace with spaces previous autocompletion
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011ce8:	8a3b      	ldrh	r3, [r7, #16]
 8011cea:	61bb      	str	r3, [r7, #24]
 8011cec:	e007      	b.n	8011cfe <printLiveAutocompletion+0x78>
        cli->writeChar(cli, ' ');
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	2120      	movs	r1, #32
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	4798      	blx	r3
    for (size_t i = cmd.autocompletedLen; i < impl->inputLineLength; ++i) {
 8011cf8:	69bb      	ldr	r3, [r7, #24]
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	61bb      	str	r3, [r7, #24]
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011d02:	461a      	mov	r2, r3
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d3f1      	bcc.n	8011cee <printLiveAutocompletion+0x68>
    }
    impl->inputLineLength = cmd.autocompletedLen;
 8011d0a:	8a3a      	ldrh	r2, [r7, #16]
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	861a      	strh	r2, [r3, #48]	; 0x30
    cli->writeChar(cli, '\r');
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	210d      	movs	r1, #13
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	4798      	blx	r3
    // print current command again so cursor is moved to initial place
    writeToOutput(cli, impl->invitation);
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 f8c7 	bl	8011eb4 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	69db      	ldr	r3, [r3, #28]
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f000 f8c1 	bl	8011eb4 <writeToOutput>
 8011d32:	e000      	b.n	8011d36 <printLiveAutocompletion+0xb0>
        return;
 8011d34:	bf00      	nop
}
 8011d36:	3720      	adds	r7, #32
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <onAutocompleteRequest>:

static void onAutocompleteRequest(EmbeddedCli *cli) {
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b088      	sub	sp, #32
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	61bb      	str	r3, [r7, #24]

    AutocompletedCommand cmd = getAutocompletedCommand(cli, impl->cmdBuffer);
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	69da      	ldr	r2, [r3, #28]
 8011d4e:	f107 030c 	add.w	r3, r7, #12
 8011d52:	6879      	ldr	r1, [r7, #4]
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7ff fed9 	bl	8011b0c <getAutocompletedCommand>

    if (cmd.candidateCount == 0)
 8011d5a:	8a7b      	ldrh	r3, [r7, #18]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d071      	beq.n	8011e44 <onAutocompleteRequest+0x108>
        return;

    if (cmd.candidateCount == 1 || cmd.autocompletedLen > impl->cmdSize) {
 8011d60:	8a7b      	ldrh	r3, [r7, #18]
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d004      	beq.n	8011d70 <onAutocompleteRequest+0x34>
 8011d66:	8a3a      	ldrh	r2, [r7, #16]
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	8c1b      	ldrh	r3, [r3, #32]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d92a      	bls.n	8011dc6 <onAutocompleteRequest+0x8a>
        // can copy from index cmdSize, but prefix is the same, so copy everything
        memcpy(impl->cmdBuffer, cmd.firstCandidate, cmd.autocompletedLen);
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	69db      	ldr	r3, [r3, #28]
 8011d74:	68f9      	ldr	r1, [r7, #12]
 8011d76:	8a3a      	ldrh	r2, [r7, #16]
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f009 fef7 	bl	801bb6c <memcpy>
        if (cmd.candidateCount == 1) {
 8011d7e:	8a7b      	ldrh	r3, [r7, #18]
 8011d80:	2b01      	cmp	r3, #1
 8011d82:	d109      	bne.n	8011d98 <onAutocompleteRequest+0x5c>
            impl->cmdBuffer[cmd.autocompletedLen] = ' ';
 8011d84:	69bb      	ldr	r3, [r7, #24]
 8011d86:	69db      	ldr	r3, [r3, #28]
 8011d88:	8a3a      	ldrh	r2, [r7, #16]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	2220      	movs	r2, #32
 8011d8e:	701a      	strb	r2, [r3, #0]
            ++cmd.autocompletedLen;
 8011d90:	8a3b      	ldrh	r3, [r7, #16]
 8011d92:	3301      	adds	r3, #1
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	823b      	strh	r3, [r7, #16]
        }
        impl->cmdBuffer[cmd.autocompletedLen] = '\0';
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	69db      	ldr	r3, [r3, #28]
 8011d9c:	8a3a      	ldrh	r2, [r7, #16]
 8011d9e:	4413      	add	r3, r2
 8011da0:	2200      	movs	r2, #0
 8011da2:	701a      	strb	r2, [r3, #0]

        writeToOutput(cli, &impl->cmdBuffer[impl->cmdSize]);
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	69db      	ldr	r3, [r3, #28]
 8011da8:	69ba      	ldr	r2, [r7, #24]
 8011daa:	8c12      	ldrh	r2, [r2, #32]
 8011dac:	4413      	add	r3, r2
 8011dae:	4619      	mov	r1, r3
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 f87f 	bl	8011eb4 <writeToOutput>
        impl->cmdSize = cmd.autocompletedLen;
 8011db6:	8a3a      	ldrh	r2, [r7, #16]
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	841a      	strh	r2, [r3, #32]
        impl->inputLineLength = impl->cmdSize;
 8011dbc:	69bb      	ldr	r3, [r7, #24]
 8011dbe:	8c1a      	ldrh	r2, [r3, #32]
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	861a      	strh	r2, [r3, #48]	; 0x30
        return;
 8011dc4:	e03f      	b.n	8011e46 <onAutocompleteRequest+0x10a>
    }

    // with multiple candidates when we already completed to common prefix
    // we show all candidates and print input again
    // we need to completely clear current line since it begins with invitation
    clearCurrentLine(cli);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 f842 	bl	8011e50 <clearCurrentLine>

    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011dcc:	2300      	movs	r3, #0
 8011dce:	61fb      	str	r3, [r7, #28]
 8011dd0:	e021      	b.n	8011e16 <onAutocompleteRequest+0xda>
        // autocomplete flag is set for all candidates by last call to
        // getAutocompletedCommand
        if (!(impl->bindingsFlags[i] & BINDING_FLAG_AUTOCOMPLETE))
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dd6:	69fb      	ldr	r3, [r7, #28]
 8011dd8:	4413      	add	r3, r2
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	f003 0301 	and.w	r3, r3, #1
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d014      	beq.n	8011e0e <onAutocompleteRequest+0xd2>
            continue;

        const char *name = impl->bindings[i].name;
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011de8:	69fa      	ldr	r2, [r7, #28]
 8011dea:	4613      	mov	r3, r2
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	4413      	add	r3, r2
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	440b      	add	r3, r1
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	617b      	str	r3, [r7, #20]

        writeToOutput(cli, name);
 8011df8:	6979      	ldr	r1, [r7, #20]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 f85a 	bl	8011eb4 <writeToOutput>
        writeToOutput(cli, lineBreak);
 8011e00:	4b12      	ldr	r3, [pc, #72]	; (8011e4c <onAutocompleteRequest+0x110>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	4619      	mov	r1, r3
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 f854 	bl	8011eb4 <writeToOutput>
 8011e0c:	e000      	b.n	8011e10 <onAutocompleteRequest+0xd4>
            continue;
 8011e0e:	bf00      	nop
    for (int i = 0; i < impl->bindingsCount; ++i) {
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	3301      	adds	r3, #1
 8011e14:	61fb      	str	r3, [r7, #28]
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	dbd7      	blt.n	8011dd2 <onAutocompleteRequest+0x96>
    }

    writeToOutput(cli, impl->invitation);
 8011e22:	69bb      	ldr	r3, [r7, #24]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	4619      	mov	r1, r3
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f000 f843 	bl	8011eb4 <writeToOutput>
    writeToOutput(cli, impl->cmdBuffer);
 8011e2e:	69bb      	ldr	r3, [r7, #24]
 8011e30:	69db      	ldr	r3, [r3, #28]
 8011e32:	4619      	mov	r1, r3
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 f83d 	bl	8011eb4 <writeToOutput>

    impl->inputLineLength = impl->cmdSize;
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	8c1a      	ldrh	r2, [r3, #32]
 8011e3e:	69bb      	ldr	r3, [r7, #24]
 8011e40:	861a      	strh	r2, [r3, #48]	; 0x30
 8011e42:	e000      	b.n	8011e46 <onAutocompleteRequest+0x10a>
        return;
 8011e44:	bf00      	nop
}
 8011e46:	3720      	adds	r7, #32
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	20000024 	.word	0x20000024

08011e50 <clearCurrentLine>:

static void clearCurrentLine(EmbeddedCli *cli) {
 8011e50:	b590      	push	{r4, r7, lr}
 8011e52:	b087      	sub	sp, #28
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
    PREPARE_IMPL(cli);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	613b      	str	r3, [r7, #16]
    size_t len = impl->inputLineLength + strlen(impl->invitation);
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011e62:	461c      	mov	r4, r3
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7ee f9c3 	bl	80001f4 <strlen>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	4423      	add	r3, r4
 8011e72:	60fb      	str	r3, [r7, #12]

    cli->writeChar(cli, '\r');
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	210d      	movs	r1, #13
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011e7e:	2300      	movs	r3, #0
 8011e80:	617b      	str	r3, [r7, #20]
 8011e82:	e007      	b.n	8011e94 <clearCurrentLine+0x44>
        cli->writeChar(cli, ' ');
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2120      	movs	r1, #32
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	3301      	adds	r3, #1
 8011e92:	617b      	str	r3, [r7, #20]
 8011e94:	697a      	ldr	r2, [r7, #20]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d3f3      	bcc.n	8011e84 <clearCurrentLine+0x34>
    }
    cli->writeChar(cli, '\r');
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	210d      	movs	r1, #13
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	4798      	blx	r3
    impl->inputLineLength = 0;
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8011eac:	bf00      	nop
 8011eae:	371c      	adds	r7, #28
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd90      	pop	{r4, r7, pc}

08011eb4 <writeToOutput>:

static void writeToOutput(EmbeddedCli *cli, const char *str) {
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8011ebe:	6838      	ldr	r0, [r7, #0]
 8011ec0:	f7ee f998 	bl	80001f4 <strlen>
 8011ec4:	60b8      	str	r0, [r7, #8]

    for (size_t i = 0; i < len; ++i) {
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	60fb      	str	r3, [r7, #12]
 8011eca:	e00b      	b.n	8011ee4 <writeToOutput+0x30>
        cli->writeChar(cli, str[i]);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	6839      	ldr	r1, [r7, #0]
 8011ed2:	68fa      	ldr	r2, [r7, #12]
 8011ed4:	440a      	add	r2, r1
 8011ed6:	7812      	ldrb	r2, [r2, #0]
 8011ed8:	4611      	mov	r1, r2
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	4798      	blx	r3
    for (size_t i = 0; i < len; ++i) {
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	60fb      	str	r3, [r7, #12]
 8011ee4:	68fa      	ldr	r2, [r7, #12]
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d3ef      	bcc.n	8011ecc <writeToOutput+0x18>
    }
}
 8011eec:	bf00      	nop
 8011eee:	bf00      	nop
 8011ef0:	3710      	adds	r7, #16
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}

08011ef6 <isControlChar>:

static bool isControlChar(char c) {
 8011ef6:	b480      	push	{r7}
 8011ef8:	b083      	sub	sp, #12
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	4603      	mov	r3, r0
 8011efe:	71fb      	strb	r3, [r7, #7]
    return c == '\r' || c == '\n' || c == '\b' || c == '\t' || c == 0x7F;
 8011f00:	79fb      	ldrb	r3, [r7, #7]
 8011f02:	2b0d      	cmp	r3, #13
 8011f04:	d00b      	beq.n	8011f1e <isControlChar+0x28>
 8011f06:	79fb      	ldrb	r3, [r7, #7]
 8011f08:	2b0a      	cmp	r3, #10
 8011f0a:	d008      	beq.n	8011f1e <isControlChar+0x28>
 8011f0c:	79fb      	ldrb	r3, [r7, #7]
 8011f0e:	2b08      	cmp	r3, #8
 8011f10:	d005      	beq.n	8011f1e <isControlChar+0x28>
 8011f12:	79fb      	ldrb	r3, [r7, #7]
 8011f14:	2b09      	cmp	r3, #9
 8011f16:	d002      	beq.n	8011f1e <isControlChar+0x28>
 8011f18:	79fb      	ldrb	r3, [r7, #7]
 8011f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8011f1c:	d101      	bne.n	8011f22 <isControlChar+0x2c>
 8011f1e:	2301      	movs	r3, #1
 8011f20:	e000      	b.n	8011f24 <isControlChar+0x2e>
 8011f22:	2300      	movs	r3, #0
 8011f24:	f003 0301 	and.w	r3, r3, #1
 8011f28:	b2db      	uxtb	r3, r3
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	370c      	adds	r7, #12
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f34:	4770      	bx	lr

08011f36 <isDisplayableChar>:

static bool isDisplayableChar(char c) {
 8011f36:	b480      	push	{r7}
 8011f38:	b083      	sub	sp, #12
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	71fb      	strb	r3, [r7, #7]
    return (c >= 32 && c <= 126);
 8011f40:	79fb      	ldrb	r3, [r7, #7]
 8011f42:	2b1f      	cmp	r3, #31
 8011f44:	d904      	bls.n	8011f50 <isDisplayableChar+0x1a>
 8011f46:	79fb      	ldrb	r3, [r7, #7]
 8011f48:	2b7e      	cmp	r3, #126	; 0x7e
 8011f4a:	d801      	bhi.n	8011f50 <isDisplayableChar+0x1a>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	e000      	b.n	8011f52 <isDisplayableChar+0x1c>
 8011f50:	2300      	movs	r3, #0
 8011f52:	f003 0301 	and.w	r3, r3, #1
 8011f56:	b2db      	uxtb	r3, r3
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <fifoBufAvailable>:

static uint16_t fifoBufAvailable(FifoBuf *buffer) {
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
    if (buffer->back >= buffer->front)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	88da      	ldrh	r2, [r3, #6]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	889b      	ldrh	r3, [r3, #4]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d306      	bcc.n	8011f86 <fifoBufAvailable+0x22>
        return (uint16_t) (buffer->back - buffer->front);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	88da      	ldrh	r2, [r3, #6]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	889b      	ldrh	r3, [r3, #4]
 8011f80:	1ad3      	subs	r3, r2, r3
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	e009      	b.n	8011f9a <fifoBufAvailable+0x36>
    else
        return (uint16_t) (buffer->size - buffer->front + buffer->back);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	891a      	ldrh	r2, [r3, #8]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	889b      	ldrh	r3, [r3, #4]
 8011f8e:	1ad3      	subs	r3, r2, r3
 8011f90:	b29a      	uxth	r2, r3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	88db      	ldrh	r3, [r3, #6]
 8011f96:	4413      	add	r3, r2
 8011f98:	b29b      	uxth	r3, r3
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	370c      	adds	r7, #12
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr

08011fa6 <fifoBufPop>:

static char fifoBufPop(FifoBuf *buffer) {
 8011fa6:	b480      	push	{r7}
 8011fa8:	b085      	sub	sp, #20
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
    char a = '\0';
 8011fae:	2300      	movs	r3, #0
 8011fb0:	73fb      	strb	r3, [r7, #15]
    if (buffer->front != buffer->back) {
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	889a      	ldrh	r2, [r3, #4]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	88db      	ldrh	r3, [r3, #6]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d014      	beq.n	8011fe8 <fifoBufPop+0x42>
        a = buffer->buf[buffer->front];
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	8892      	ldrh	r2, [r2, #4]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	73fb      	strb	r3, [r7, #15]
        buffer->front = (uint16_t) (buffer->front + 1) % buffer->size;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	889b      	ldrh	r3, [r3, #4]
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	8912      	ldrh	r2, [r2, #8]
 8011fd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011fdc:	fb01 f202 	mul.w	r2, r1, r2
 8011fe0:	1a9b      	subs	r3, r3, r2
 8011fe2:	b29a      	uxth	r2, r3
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	809a      	strh	r2, [r3, #4]
    }
    return a;
 8011fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3714      	adds	r7, #20
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr

08011ff6 <fifoBufPush>:

static bool fifoBufPush(FifoBuf *buffer, char a) {
 8011ff6:	b480      	push	{r7}
 8011ff8:	b085      	sub	sp, #20
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
 8011ffe:	460b      	mov	r3, r1
 8012000:	70fb      	strb	r3, [r7, #3]
    uint16_t newBack = (uint16_t) (buffer->back + 1) % buffer->size;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	88db      	ldrh	r3, [r3, #6]
 8012006:	3301      	adds	r3, #1
 8012008:	b29b      	uxth	r3, r3
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	8912      	ldrh	r2, [r2, #8]
 801200e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012012:	fb01 f202 	mul.w	r2, r1, r2
 8012016:	1a9b      	subs	r3, r3, r2
 8012018:	81fb      	strh	r3, [r7, #14]
    if (newBack != buffer->front) {
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	889b      	ldrh	r3, [r3, #4]
 801201e:	89fa      	ldrh	r2, [r7, #14]
 8012020:	429a      	cmp	r2, r3
 8012022:	d00b      	beq.n	801203c <fifoBufPush+0x46>
        buffer->buf[buffer->back] = a;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	687a      	ldr	r2, [r7, #4]
 801202a:	88d2      	ldrh	r2, [r2, #6]
 801202c:	4413      	add	r3, r2
 801202e:	78fa      	ldrb	r2, [r7, #3]
 8012030:	701a      	strb	r2, [r3, #0]
        buffer->back = newBack;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	89fa      	ldrh	r2, [r7, #14]
 8012036:	80da      	strh	r2, [r3, #6]
        return true;
 8012038:	2301      	movs	r3, #1
 801203a:	e000      	b.n	801203e <fifoBufPush+0x48>
    }
    return false;
 801203c:	2300      	movs	r3, #0
}
 801203e:	4618      	mov	r0, r3
 8012040:	3714      	adds	r7, #20
 8012042:	46bd      	mov	sp, r7
 8012044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012048:	4770      	bx	lr

0801204a <historyPut>:

static bool historyPut(CliHistory *history, const char *str) {
 801204a:	b580      	push	{r7, lr}
 801204c:	b088      	sub	sp, #32
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
 8012052:	6039      	str	r1, [r7, #0]
    size_t len = strlen(str);
 8012054:	6838      	ldr	r0, [r7, #0]
 8012056:	f7ee f8cd 	bl	80001f4 <strlen>
 801205a:	61b8      	str	r0, [r7, #24]
    // each item is ended with \0 so, need to have that much space at least
    if (history->bufferSize < len + 1)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	889b      	ldrh	r3, [r3, #4]
 8012060:	461a      	mov	r2, r3
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	3301      	adds	r3, #1
 8012066:	429a      	cmp	r2, r3
 8012068:	d201      	bcs.n	801206e <historyPut+0x24>
        return false;
 801206a:	2300      	movs	r3, #0
 801206c:	e04d      	b.n	801210a <historyPut+0xc0>

    // remove str from history (if it's present) so we don't get duplicates
    historyRemove(history, str);
 801206e:	6839      	ldr	r1, [r7, #0]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 f86a 	bl	801214a <historyRemove>

    size_t usedSize;
    // remove old items if new one can't fit into buffer
    while (history->itemsCount > 0) {
 8012076:	e024      	b.n	80120c2 <historyPut+0x78>
        const char *item = historyGet(history, history->itemsCount);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	891b      	ldrh	r3, [r3, #8]
 801207c:	4619      	mov	r1, r3
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f000 f847 	bl	8012112 <historyGet>
 8012084:	6178      	str	r0, [r7, #20]
        size_t itemLen = strlen(item);
 8012086:	6978      	ldr	r0, [r7, #20]
 8012088:	f7ee f8b4 	bl	80001f4 <strlen>
 801208c:	6138      	str	r0, [r7, #16]
        usedSize = ((size_t) (item - history->buf)) + itemLen + 1;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	697a      	ldr	r2, [r7, #20]
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	461a      	mov	r2, r3
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	4413      	add	r3, r2
 801209c:	3301      	adds	r3, #1
 801209e:	61fb      	str	r3, [r7, #28]

        size_t freeSpace = history->bufferSize - usedSize;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	889b      	ldrh	r3, [r3, #4]
 80120a4:	461a      	mov	r2, r3
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	1ad3      	subs	r3, r2, r3
 80120aa:	60fb      	str	r3, [r7, #12]

        if (freeSpace >= len + 1)
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	3301      	adds	r3, #1
 80120b0:	68fa      	ldr	r2, [r7, #12]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d20a      	bcs.n	80120cc <historyPut+0x82>
            break;

        // space not enough, remove last element
        --history->itemsCount;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	891b      	ldrh	r3, [r3, #8]
 80120ba:	3b01      	subs	r3, #1
 80120bc:	b29a      	uxth	r2, r3
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	811a      	strh	r2, [r3, #8]
    while (history->itemsCount > 0) {
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	891b      	ldrh	r3, [r3, #8]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1d6      	bne.n	8012078 <historyPut+0x2e>
 80120ca:	e000      	b.n	80120ce <historyPut+0x84>
            break;
 80120cc:	bf00      	nop
    }
    if (history->itemsCount > 0) {
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	891b      	ldrh	r3, [r3, #8]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d00a      	beq.n	80120ec <historyPut+0xa2>
        // when history not empty, shift elements so new item is first
        memmove(&history->buf[len + 1], history->buf, usedSize);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	69bb      	ldr	r3, [r7, #24]
 80120dc:	3301      	adds	r3, #1
 80120de:	18d0      	adds	r0, r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	69fa      	ldr	r2, [r7, #28]
 80120e6:	4619      	mov	r1, r3
 80120e8:	f009 fd4e 	bl	801bb88 <memmove>
    }
    memcpy(history->buf, str, len + 1);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6818      	ldr	r0, [r3, #0]
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	3301      	adds	r3, #1
 80120f4:	461a      	mov	r2, r3
 80120f6:	6839      	ldr	r1, [r7, #0]
 80120f8:	f009 fd38 	bl	801bb6c <memcpy>
    ++history->itemsCount;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	891b      	ldrh	r3, [r3, #8]
 8012100:	3301      	adds	r3, #1
 8012102:	b29a      	uxth	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	811a      	strh	r2, [r3, #8]

    return true;
 8012108:	2301      	movs	r3, #1
}
 801210a:	4618      	mov	r0, r3
 801210c:	3720      	adds	r7, #32
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <historyGet>:

static const char *historyGet(CliHistory *history, uint16_t item) {
 8012112:	b580      	push	{r7, lr}
 8012114:	b082      	sub	sp, #8
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
 801211a:	460b      	mov	r3, r1
 801211c:	807b      	strh	r3, [r7, #2]
    if (item == 0 || item > history->itemsCount)
 801211e:	887b      	ldrh	r3, [r7, #2]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d004      	beq.n	801212e <historyGet+0x1c>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	891b      	ldrh	r3, [r3, #8]
 8012128:	887a      	ldrh	r2, [r7, #2]
 801212a:	429a      	cmp	r2, r3
 801212c:	d901      	bls.n	8012132 <historyGet+0x20>
        return NULL;
 801212e:	2300      	movs	r3, #0
 8012130:	e007      	b.n	8012142 <historyGet+0x30>

    // items are stored in the same way (separated by \0 and counted from 1),
    // so can use this call
    return embeddedCliGetToken(history->buf, item);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	887a      	ldrh	r2, [r7, #2]
 8012138:	4611      	mov	r1, r2
 801213a:	4618      	mov	r0, r3
 801213c:	f7ff f8d0 	bl	80112e0 <embeddedCliGetToken>
 8012140:	4603      	mov	r3, r0
}
 8012142:	4618      	mov	r0, r3
 8012144:	3708      	adds	r7, #8
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <historyRemove>:

static void historyRemove(CliHistory *history, const char *str) {
 801214a:	b580      	push	{r7, lr}
 801214c:	b086      	sub	sp, #24
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
 8012152:	6039      	str	r1, [r7, #0]
    if (str == NULL || history->itemsCount == 0)
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d04c      	beq.n	80121f4 <historyRemove+0xaa>
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	891b      	ldrh	r3, [r3, #8]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d048      	beq.n	80121f4 <historyRemove+0xaa>
        return;
    char *item = NULL;
 8012162:	2300      	movs	r3, #0
 8012164:	617b      	str	r3, [r7, #20]
    uint16_t itemPosition;
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 8012166:	2301      	movs	r3, #1
 8012168:	827b      	strh	r3, [r7, #18]
 801216a:	e013      	b.n	8012194 <historyRemove+0x4a>
        // items are stored in the same way (separated by \0 and counted from 1),
        // so can use this call
        item = embeddedCliGetTokenVariable(history->buf, itemPosition);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	8a7a      	ldrh	r2, [r7, #18]
 8012172:	4611      	mov	r1, r2
 8012174:	4618      	mov	r0, r3
 8012176:	f7ff f8ce 	bl	8011316 <embeddedCliGetTokenVariable>
 801217a:	6178      	str	r0, [r7, #20]
        if (strcmp(item, str) == 0) {
 801217c:	6839      	ldr	r1, [r7, #0]
 801217e:	6978      	ldr	r0, [r7, #20]
 8012180:	f7ee f82e 	bl	80001e0 <strcmp>
 8012184:	4603      	mov	r3, r0
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00a      	beq.n	80121a0 <historyRemove+0x56>
            break;
        }
        item = NULL;
 801218a:	2300      	movs	r3, #0
 801218c:	617b      	str	r3, [r7, #20]
    for (itemPosition = 1; itemPosition <= history->itemsCount; ++itemPosition) {
 801218e:	8a7b      	ldrh	r3, [r7, #18]
 8012190:	3301      	adds	r3, #1
 8012192:	827b      	strh	r3, [r7, #18]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	891b      	ldrh	r3, [r3, #8]
 8012198:	8a7a      	ldrh	r2, [r7, #18]
 801219a:	429a      	cmp	r2, r3
 801219c:	d9e6      	bls.n	801216c <historyRemove+0x22>
 801219e:	e000      	b.n	80121a2 <historyRemove+0x58>
            break;
 80121a0:	bf00      	nop
    }
    if (item == NULL)
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d027      	beq.n	80121f8 <historyRemove+0xae>
        return;

    --history->itemsCount;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	891b      	ldrh	r3, [r3, #8]
 80121ac:	3b01      	subs	r3, #1
 80121ae:	b29a      	uxth	r2, r3
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	811a      	strh	r2, [r3, #8]
    if (itemPosition == (history->itemsCount + 1)) {
 80121b4:	8a7a      	ldrh	r2, [r7, #18]
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	891b      	ldrh	r3, [r3, #8]
 80121ba:	3301      	adds	r3, #1
 80121bc:	429a      	cmp	r2, r3
 80121be:	d01d      	beq.n	80121fc <historyRemove+0xb2>
        // if this is a last element, nothing is remaining to move
        return;
    }

    size_t len = strlen(item);
 80121c0:	6978      	ldr	r0, [r7, #20]
 80121c2:	f7ee f817 	bl	80001f4 <strlen>
 80121c6:	60f8      	str	r0, [r7, #12]
    size_t remaining = (size_t) (history->bufferSize - (item + len + 1 - history->buf));
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	889b      	ldrh	r3, [r3, #4]
 80121cc:	4619      	mov	r1, r3
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	3301      	adds	r3, #1
 80121d2:	697a      	ldr	r2, [r7, #20]
 80121d4:	441a      	add	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	1ad3      	subs	r3, r2, r3
 80121dc:	1acb      	subs	r3, r1, r3
 80121de:	60bb      	str	r3, [r7, #8]
    // move everything to the right of found item
    memmove(item, &item[len + 1], remaining);
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	3301      	adds	r3, #1
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	4413      	add	r3, r2
 80121e8:	68ba      	ldr	r2, [r7, #8]
 80121ea:	4619      	mov	r1, r3
 80121ec:	6978      	ldr	r0, [r7, #20]
 80121ee:	f009 fccb 	bl	801bb88 <memmove>
 80121f2:	e004      	b.n	80121fe <historyRemove+0xb4>
        return;
 80121f4:	bf00      	nop
 80121f6:	e002      	b.n	80121fe <historyRemove+0xb4>
        return;
 80121f8:	bf00      	nop
 80121fa:	e000      	b.n	80121fe <historyRemove+0xb4>
        return;
 80121fc:	bf00      	nop
}
 80121fe:	3718      	adds	r7, #24
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <getTokenPosition>:

static uint16_t getTokenPosition(const char *tokenizedStr, uint16_t pos) {
 8012204:	b480      	push	{r7}
 8012206:	b085      	sub	sp, #20
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	460b      	mov	r3, r1
 801220e:	807b      	strh	r3, [r7, #2]
    if (tokenizedStr == NULL || pos == 0)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d002      	beq.n	801221c <getTokenPosition+0x18>
 8012216:	887b      	ldrh	r3, [r7, #2]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d102      	bne.n	8012222 <getTokenPosition+0x1e>
        return CLI_TOKEN_NPOS;
 801221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012220:	e028      	b.n	8012274 <getTokenPosition+0x70>
    uint16_t i = 0;
 8012222:	2300      	movs	r3, #0
 8012224:	81fb      	strh	r3, [r7, #14]
    uint16_t tokenCount = 1;
 8012226:	2301      	movs	r3, #1
 8012228:	81bb      	strh	r3, [r7, #12]
    while (true) {
        if (tokenCount == pos)
 801222a:	89ba      	ldrh	r2, [r7, #12]
 801222c:	887b      	ldrh	r3, [r7, #2]
 801222e:	429a      	cmp	r2, r3
 8012230:	d013      	beq.n	801225a <getTokenPosition+0x56>
            break;

        if (tokenizedStr[i] == '\0') {
 8012232:	89fb      	ldrh	r3, [r7, #14]
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	4413      	add	r3, r2
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d109      	bne.n	8012252 <getTokenPosition+0x4e>
            ++tokenCount;
 801223e:	89bb      	ldrh	r3, [r7, #12]
 8012240:	3301      	adds	r3, #1
 8012242:	81bb      	strh	r3, [r7, #12]
            if (tokenizedStr[i + 1] == '\0')
 8012244:	89fb      	ldrh	r3, [r7, #14]
 8012246:	3301      	adds	r3, #1
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	4413      	add	r3, r2
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d005      	beq.n	801225e <getTokenPosition+0x5a>
                break;
        }

        ++i;
 8012252:	89fb      	ldrh	r3, [r7, #14]
 8012254:	3301      	adds	r3, #1
 8012256:	81fb      	strh	r3, [r7, #14]
        if (tokenCount == pos)
 8012258:	e7e7      	b.n	801222a <getTokenPosition+0x26>
            break;
 801225a:	bf00      	nop
 801225c:	e000      	b.n	8012260 <getTokenPosition+0x5c>
                break;
 801225e:	bf00      	nop
    }

    if (tokenizedStr[i] != '\0')
 8012260:	89fb      	ldrh	r3, [r7, #14]
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	4413      	add	r3, r2
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d001      	beq.n	8012270 <getTokenPosition+0x6c>
        return i;
 801226c:	89fb      	ldrh	r3, [r7, #14]
 801226e:	e001      	b.n	8012274 <getTokenPosition+0x70>
    else
        return CLI_TOKEN_NPOS;
 8012270:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8012274:	4618      	mov	r0, r3
 8012276:	3714      	adds	r7, #20
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr

08012280 <MX_FATFS_Init>:
	retSD = FATFS_UnLinkDriver(SDPath);
}
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012284:	4904      	ldr	r1, [pc, #16]	; (8012298 <MX_FATFS_Init+0x18>)
 8012286:	4805      	ldr	r0, [pc, #20]	; (801229c <MX_FATFS_Init+0x1c>)
 8012288:	f007 ff18 	bl	801a0bc <FATFS_LinkDriver>
 801228c:	4603      	mov	r3, r0
 801228e:	461a      	mov	r2, r3
 8012290:	4b03      	ldr	r3, [pc, #12]	; (80122a0 <MX_FATFS_Init+0x20>)
 8012292:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012294:	bf00      	nop
 8012296:	bd80      	pop	{r7, pc}
 8012298:	20001a9c 	.word	0x20001a9c
 801229c:	0802270c 	.word	0x0802270c
 80122a0:	20001a98 	.word	0x20001a98

080122a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80122a4:	b480      	push	{r7}
 80122a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80122a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	4770      	bx	lr

080122b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80122ba:	2300      	movs	r3, #0
 80122bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80122be:	f000 f86b 	bl	8012398 <BSP_SD_IsDetected>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d001      	beq.n	80122cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80122c8:	2301      	movs	r3, #1
 80122ca:	e005      	b.n	80122d8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80122cc:	4804      	ldr	r0, [pc, #16]	; (80122e0 <BSP_SD_Init+0x2c>)
 80122ce:	f7f7 fac4 	bl	800985a <HAL_SD_Init>
 80122d2:	4603      	mov	r3, r0
 80122d4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80122d6:	79fb      	ldrb	r3, [r7, #7]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3708      	adds	r7, #8
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}
 80122e0:	20001804 	.word	0x20001804

080122e4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b088      	sub	sp, #32
 80122e8:	af02      	add	r7, sp, #8
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
 80122f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80122f2:	2300      	movs	r3, #0
 80122f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	9300      	str	r3, [sp, #0]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	68ba      	ldr	r2, [r7, #8]
 80122fe:	68f9      	ldr	r1, [r7, #12]
 8012300:	4806      	ldr	r0, [pc, #24]	; (801231c <BSP_SD_ReadBlocks+0x38>)
 8012302:	f7f7 fb5b 	bl	80099bc <HAL_SD_ReadBlocks>
 8012306:	4603      	mov	r3, r0
 8012308:	2b00      	cmp	r3, #0
 801230a:	d001      	beq.n	8012310 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801230c:	2301      	movs	r3, #1
 801230e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012310:	7dfb      	ldrb	r3, [r7, #23]
}
 8012312:	4618      	mov	r0, r3
 8012314:	3718      	adds	r7, #24
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	20001804 	.word	0x20001804

08012320 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b088      	sub	sp, #32
 8012324:	af02      	add	r7, sp, #8
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
 801232c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801232e:	2300      	movs	r3, #0
 8012330:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	9300      	str	r3, [sp, #0]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	68ba      	ldr	r2, [r7, #8]
 801233a:	68f9      	ldr	r1, [r7, #12]
 801233c:	4806      	ldr	r0, [pc, #24]	; (8012358 <BSP_SD_WriteBlocks+0x38>)
 801233e:	f7f7 fd1b 	bl	8009d78 <HAL_SD_WriteBlocks>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d001      	beq.n	801234c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8012348:	2301      	movs	r3, #1
 801234a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801234c:	7dfb      	ldrb	r3, [r7, #23]
}
 801234e:	4618      	mov	r0, r3
 8012350:	3718      	adds	r7, #24
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	20001804 	.word	0x20001804

0801235c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012360:	4805      	ldr	r0, [pc, #20]	; (8012378 <BSP_SD_GetCardState+0x1c>)
 8012362:	f7f8 f85f 	bl	800a424 <HAL_SD_GetCardState>
 8012366:	4603      	mov	r3, r0
 8012368:	2b04      	cmp	r3, #4
 801236a:	bf14      	ite	ne
 801236c:	2301      	movne	r3, #1
 801236e:	2300      	moveq	r3, #0
 8012370:	b2db      	uxtb	r3, r3
}
 8012372:	4618      	mov	r0, r3
 8012374:	bd80      	pop	{r7, pc}
 8012376:	bf00      	nop
 8012378:	20001804 	.word	0x20001804

0801237c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012384:	6879      	ldr	r1, [r7, #4]
 8012386:	4803      	ldr	r0, [pc, #12]	; (8012394 <BSP_SD_GetCardInfo+0x18>)
 8012388:	f7f8 f820 	bl	800a3cc <HAL_SD_GetCardInfo>
}
 801238c:	bf00      	nop
 801238e:	3708      	adds	r7, #8
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}
 8012394:	20001804 	.word	0x20001804

08012398 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801239e:	2301      	movs	r3, #1
 80123a0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80123a2:	79fb      	ldrb	r3, [r7, #7]
 80123a4:	b2db      	uxtb	r3, r3
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	370c      	adds	r7, #12
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
	...

080123b4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	4603      	mov	r3, r0
 80123bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80123be:	4b0b      	ldr	r3, [pc, #44]	; (80123ec <SD_CheckStatus+0x38>)
 80123c0:	2201      	movs	r2, #1
 80123c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80123c4:	f7ff ffca 	bl	801235c <BSP_SD_GetCardState>
 80123c8:	4603      	mov	r3, r0
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d107      	bne.n	80123de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80123ce:	4b07      	ldr	r3, [pc, #28]	; (80123ec <SD_CheckStatus+0x38>)
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	f023 0301 	bic.w	r3, r3, #1
 80123d8:	b2da      	uxtb	r2, r3
 80123da:	4b04      	ldr	r3, [pc, #16]	; (80123ec <SD_CheckStatus+0x38>)
 80123dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80123de:	4b03      	ldr	r3, [pc, #12]	; (80123ec <SD_CheckStatus+0x38>)
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	b2db      	uxtb	r3, r3
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3708      	adds	r7, #8
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	20000028 	.word	0x20000028

080123f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	4603      	mov	r3, r0
 80123f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80123fa:	4b0b      	ldr	r3, [pc, #44]	; (8012428 <SD_initialize+0x38>)
 80123fc:	2201      	movs	r2, #1
 80123fe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012400:	f7ff ff58 	bl	80122b4 <BSP_SD_Init>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d107      	bne.n	801241a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 801240a:	79fb      	ldrb	r3, [r7, #7]
 801240c:	4618      	mov	r0, r3
 801240e:	f7ff ffd1 	bl	80123b4 <SD_CheckStatus>
 8012412:	4603      	mov	r3, r0
 8012414:	461a      	mov	r2, r3
 8012416:	4b04      	ldr	r3, [pc, #16]	; (8012428 <SD_initialize+0x38>)
 8012418:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801241a:	4b03      	ldr	r3, [pc, #12]	; (8012428 <SD_initialize+0x38>)
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	b2db      	uxtb	r3, r3
}
 8012420:	4618      	mov	r0, r3
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	20000028 	.word	0x20000028

0801242c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	4603      	mov	r3, r0
 8012434:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012436:	79fb      	ldrb	r3, [r7, #7]
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff ffbb 	bl	80123b4 <SD_CheckStatus>
 801243e:	4603      	mov	r3, r0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b086      	sub	sp, #24
 801244c:	af00      	add	r7, sp, #0
 801244e:	60b9      	str	r1, [r7, #8]
 8012450:	607a      	str	r2, [r7, #4]
 8012452:	603b      	str	r3, [r7, #0]
 8012454:	4603      	mov	r3, r0
 8012456:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012458:	2301      	movs	r3, #1
 801245a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 801245c:	f04f 33ff 	mov.w	r3, #4294967295
 8012460:	683a      	ldr	r2, [r7, #0]
 8012462:	6879      	ldr	r1, [r7, #4]
 8012464:	68b8      	ldr	r0, [r7, #8]
 8012466:	f7ff ff3d 	bl	80122e4 <BSP_SD_ReadBlocks>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d107      	bne.n	8012480 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012470:	bf00      	nop
 8012472:	f7ff ff73 	bl	801235c <BSP_SD_GetCardState>
 8012476:	4603      	mov	r3, r0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d1fa      	bne.n	8012472 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 801247c:	2300      	movs	r3, #0
 801247e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8012480:	7dfb      	ldrb	r3, [r7, #23]
}
 8012482:	4618      	mov	r0, r3
 8012484:	3718      	adds	r7, #24
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b086      	sub	sp, #24
 801248e:	af00      	add	r7, sp, #0
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	607a      	str	r2, [r7, #4]
 8012494:	603b      	str	r3, [r7, #0]
 8012496:	4603      	mov	r3, r0
 8012498:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801249a:	2301      	movs	r3, #1
 801249c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801249e:	f04f 33ff 	mov.w	r3, #4294967295
 80124a2:	683a      	ldr	r2, [r7, #0]
 80124a4:	6879      	ldr	r1, [r7, #4]
 80124a6:	68b8      	ldr	r0, [r7, #8]
 80124a8:	f7ff ff3a 	bl	8012320 <BSP_SD_WriteBlocks>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d107      	bne.n	80124c2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80124b2:	bf00      	nop
 80124b4:	f7ff ff52 	bl	801235c <BSP_SD_GetCardState>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1fa      	bne.n	80124b4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80124be:	2300      	movs	r3, #0
 80124c0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80124c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3718      	adds	r7, #24
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b08c      	sub	sp, #48	; 0x30
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	4603      	mov	r3, r0
 80124d4:	603a      	str	r2, [r7, #0]
 80124d6:	71fb      	strb	r3, [r7, #7]
 80124d8:	460b      	mov	r3, r1
 80124da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80124dc:	2301      	movs	r3, #1
 80124de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80124e2:	4b25      	ldr	r3, [pc, #148]	; (8012578 <SD_ioctl+0xac>)
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	b2db      	uxtb	r3, r3
 80124e8:	f003 0301 	and.w	r3, r3, #1
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d001      	beq.n	80124f4 <SD_ioctl+0x28>
 80124f0:	2303      	movs	r3, #3
 80124f2:	e03c      	b.n	801256e <SD_ioctl+0xa2>

  switch (cmd)
 80124f4:	79bb      	ldrb	r3, [r7, #6]
 80124f6:	2b03      	cmp	r3, #3
 80124f8:	d834      	bhi.n	8012564 <SD_ioctl+0x98>
 80124fa:	a201      	add	r2, pc, #4	; (adr r2, 8012500 <SD_ioctl+0x34>)
 80124fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012500:	08012511 	.word	0x08012511
 8012504:	08012519 	.word	0x08012519
 8012508:	08012531 	.word	0x08012531
 801250c:	0801254b 	.word	0x0801254b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012510:	2300      	movs	r3, #0
 8012512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012516:	e028      	b.n	801256a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012518:	f107 030c 	add.w	r3, r7, #12
 801251c:	4618      	mov	r0, r3
 801251e:	f7ff ff2d 	bl	801237c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012528:	2300      	movs	r3, #0
 801252a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801252e:	e01c      	b.n	801256a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012530:	f107 030c 	add.w	r3, r7, #12
 8012534:	4618      	mov	r0, r3
 8012536:	f7ff ff21 	bl	801237c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253c:	b29a      	uxth	r2, r3
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012542:	2300      	movs	r3, #0
 8012544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012548:	e00f      	b.n	801256a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801254a:	f107 030c 	add.w	r3, r7, #12
 801254e:	4618      	mov	r0, r3
 8012550:	f7ff ff14 	bl	801237c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012556:	0a5a      	lsrs	r2, r3, #9
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801255c:	2300      	movs	r3, #0
 801255e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012562:	e002      	b.n	801256a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012564:	2304      	movs	r3, #4
 8012566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801256a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801256e:	4618      	mov	r0, r3
 8012570:	3730      	adds	r7, #48	; 0x30
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	20000028 	.word	0x20000028

0801257c <RtcInt>:
#include "Utils.h"

uint8_t set_alarm_Time = 1;
char scheduled_packet[30] = "NULL";
void RtcInt()
{
 801257c:	b480      	push	{r7}
 801257e:	af00      	add	r7, sp, #0

	set_alarm_Time = 1;
 8012580:	4b03      	ldr	r3, [pc, #12]	; (8012590 <RtcInt+0x14>)
 8012582:	2201      	movs	r2, #1
 8012584:	701a      	strb	r2, [r3, #0]
	//Rtc_set_alarm();
}
 8012586:	bf00      	nop
 8012588:	46bd      	mov	sp, r7
 801258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258e:	4770      	bx	lr
 8012590:	20000029 	.word	0x20000029

08012594 <Set_Date>:

void Set_Date(char *Datebuffer) {
 8012594:	b580      	push	{r7, lr}
 8012596:	b088      	sub	sp, #32
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef sDate;
	uint8_t date[10];
	uint8_t flag;
	flag = Parse_Date(Datebuffer, date);
 801259c:	f107 030c 	add.w	r3, r7, #12
 80125a0:	4619      	mov	r1, r3
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f000 f8e4 	bl	8012770 <Parse_Date>
 80125a8:	4603      	mov	r3, r0
 80125aa:	77fb      	strb	r3, [r7, #31]

	if (!flag) {
 80125ac:	7ffb      	ldrb	r3, [r7, #31]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d10c      	bne.n	80125cc <Set_Date+0x38>
		sDate.Date = date[0];
 80125b2:	7b3b      	ldrb	r3, [r7, #12]
 80125b4:	76bb      	strb	r3, [r7, #26]
		sDate.Month = date[1];
 80125b6:	7b7b      	ldrb	r3, [r7, #13]
 80125b8:	767b      	strb	r3, [r7, #25]
		sDate.Year = date[2];
 80125ba:	7bbb      	ldrb	r3, [r7, #14]
 80125bc:	76fb      	strb	r3, [r7, #27]
		HAL_RTC_SetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 80125be:	f107 0318 	add.w	r3, r7, #24
 80125c2:	2200      	movs	r2, #0
 80125c4:	4619      	mov	r1, r3
 80125c6:	4805      	ldr	r0, [pc, #20]	; (80125dc <Set_Date+0x48>)
 80125c8:	f7f6 fe24 	bl	8009214 <HAL_RTC_SetDate>
	}
HAL_Delay(500);
 80125cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80125d0:	f7f1 fb3c 	bl	8003c4c <HAL_Delay>
}
 80125d4:	bf00      	nop
 80125d6:	3720      	adds	r7, #32
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	200017e4 	.word	0x200017e4

080125e0 <Rtc_set_alarm>:

/*
 * this sets alarm according to saved intervals
 */
void Rtc_set_alarm()
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b094      	sub	sp, #80	; 0x50
 80125e4:	af02      	add	r7, sp, #8
uint16_t minute;



if(set_alarm_Time)
 80125e6:	4b44      	ldr	r3, [pc, #272]	; (80126f8 <Rtc_set_alarm+0x118>)
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d07f      	beq.n	80126ee <Rtc_set_alarm+0x10e>
{
	uint8_t hour = 0;
 80125ee:	2300      	movs	r3, #0
 80125f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

	RTC_TimeTypeDef gTime;
	HAL_RTC_GetTime(RTC_Handle, &gTime, RTC_FORMAT_BIN);
 80125f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80125f8:	2200      	movs	r2, #0
 80125fa:	4619      	mov	r1, r3
 80125fc:	483f      	ldr	r0, [pc, #252]	; (80126fc <Rtc_set_alarm+0x11c>)
 80125fe:	f7f6 fdab 	bl	8009158 <HAL_RTC_GetTime>
	RTC_DateTypeDef sDate;
    HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 8012602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012606:	2200      	movs	r2, #0
 8012608:	4619      	mov	r1, r3
 801260a:	483c      	ldr	r0, [pc, #240]	; (80126fc <Rtc_set_alarm+0x11c>)
 801260c:	f7f6 fe86 	bl	800931c <HAL_RTC_GetDate>


    minute = gTime.Minutes + _Flash_Packet.Time_Interval;
 8012610:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8012614:	b29a      	uxth	r2, r3
 8012616:	4b3a      	ldr	r3, [pc, #232]	; (8012700 <Rtc_set_alarm+0x120>)
 8012618:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801261c:	b29b      	uxth	r3, r3
 801261e:	4413      	add	r3, r2
 8012620:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    hour = gTime.Hours;
 8012624:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8012628:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    if(minute > 59)
 801262c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012630:	2b3b      	cmp	r3, #59	; 0x3b
 8012632:	d917      	bls.n	8012664 <Rtc_set_alarm+0x84>
    {
    	minute = minute%_Flash_Packet.Time_Interval;
 8012634:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012638:	4a31      	ldr	r2, [pc, #196]	; (8012700 <Rtc_set_alarm+0x120>)
 801263a:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 801263e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012642:	fb01 f202 	mul.w	r2, r1, r2
 8012646:	1a9b      	subs	r3, r3, r2
 8012648:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
//    	if(minute == 0)
//    	{
//    		minute = 1;
//    	}

    	hour = hour + 1; //we go to next hour as our time is schedualed for next hour
 801264c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8012650:	3301      	adds	r3, #1
 8012652:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    	if(hour > 23)
 8012656:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801265a:	2b17      	cmp	r3, #23
 801265c:	d902      	bls.n	8012664 <Rtc_set_alarm+0x84>
    	{
          hour = 0;
 801265e:	2300      	movs	r3, #0
 8012660:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    	}


    }

    sprintf(scheduled_packet,"%02d:%02d:%02d",hour,minute,gTime.Seconds);
 8012664:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8012668:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801266c:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8012670:	9100      	str	r1, [sp, #0]
 8012672:	4924      	ldr	r1, [pc, #144]	; (8012704 <Rtc_set_alarm+0x124>)
 8012674:	4824      	ldr	r0, [pc, #144]	; (8012708 <Rtc_set_alarm+0x128>)
 8012676:	f00a faa7 	bl	801cbc8 <siprintf>

      RTC_AlarmTypeDef sAlarm = {0};
 801267a:	1d3b      	adds	r3, r7, #4
 801267c:	2228      	movs	r2, #40	; 0x28
 801267e:	2100      	movs	r1, #0
 8012680:	4618      	mov	r0, r3
 8012682:	f009 fa9b 	bl	801bbbc <memset>
	  sAlarm.AlarmTime.Hours = 0;
 8012686:	2300      	movs	r3, #0
 8012688:	713b      	strb	r3, [r7, #4]
	  sAlarm.AlarmTime.Minutes = minute;
 801268a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801268e:	b2db      	uxtb	r3, r3
 8012690:	717b      	strb	r3, [r7, #5]
	  sAlarm.AlarmTime.Seconds = 0;
 8012692:	2300      	movs	r3, #0
 8012694:	71bb      	strb	r3, [r7, #6]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8012696:	2300      	movs	r3, #0
 8012698:	60bb      	str	r3, [r7, #8]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801269a:	2300      	movs	r3, #0
 801269c:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801269e:	2300      	movs	r3, #0
 80126a0:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS| RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY;
 80126a2:	4b1a      	ldr	r3, [pc, #104]	; (801270c <Rtc_set_alarm+0x12c>)
 80126a4:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80126a6:	2300      	movs	r3, #0
 80126a8:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80126aa:	2300      	movs	r3, #0
 80126ac:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDay = 1;
 80126ae:	2301      	movs	r3, #1
 80126b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  sAlarm.Alarm = RTC_ALARM_A;
 80126b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126b8:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80126ba:	1d3b      	adds	r3, r7, #4
 80126bc:	2200      	movs	r2, #0
 80126be:	4619      	mov	r1, r3
 80126c0:	480e      	ldr	r0, [pc, #56]	; (80126fc <Rtc_set_alarm+0x11c>)
 80126c2:	f7f6 fe7b 	bl	80093bc <HAL_RTC_SetAlarm_IT>

	  __HAL_RTC_ALARM_ENABLE_IT (&hrtc, RTC_IT_ALRA);
 80126c6:	4b0d      	ldr	r3, [pc, #52]	; (80126fc <Rtc_set_alarm+0x11c>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	689a      	ldr	r2, [r3, #8]
 80126cc:	4b0b      	ldr	r3, [pc, #44]	; (80126fc <Rtc_set_alarm+0x11c>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80126d4:	609a      	str	r2, [r3, #8]
	  __HAL_RTC_ALARM_CLEAR_FLAG (&hrtc, RTC_IT_ALRA);
 80126d6:	4b09      	ldr	r3, [pc, #36]	; (80126fc <Rtc_set_alarm+0x11c>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	68db      	ldr	r3, [r3, #12]
 80126dc:	b2da      	uxtb	r2, r3
 80126de:	4b07      	ldr	r3, [pc, #28]	; (80126fc <Rtc_set_alarm+0x11c>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 80126e6:	60da      	str	r2, [r3, #12]


	  set_alarm_Time = 0;
 80126e8:	4b03      	ldr	r3, [pc, #12]	; (80126f8 <Rtc_set_alarm+0x118>)
 80126ea:	2200      	movs	r2, #0
 80126ec:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, (uint8_t*) "Interrupt\r\n",11, 1000);
}

}
 80126ee:	bf00      	nop
 80126f0:	3748      	adds	r7, #72	; 0x48
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	20000029 	.word	0x20000029
 80126fc:	200017e4 	.word	0x200017e4
 8012700:	200012fc 	.word	0x200012fc
 8012704:	08021eb4 	.word	0x08021eb4
 8012708:	2000002c 	.word	0x2000002c
 801270c:	80800080 	.word	0x80800080

08012710 <Set_Time>:
void Set_Time(char *Timebuffer) {
 8012710:	b580      	push	{r7, lr}
 8012712:	b08c      	sub	sp, #48	; 0x30
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	uint8_t time[10];
	uint8_t flag;
	flag = Parse_Time(Timebuffer, time);
 8012718:	f107 030c 	add.w	r3, r7, #12
 801271c:	4619      	mov	r1, r3
 801271e:	6878      	ldr	r0, [r7, #4]
 8012720:	f000 f890 	bl	8012844 <Parse_Time>
 8012724:	4603      	mov	r3, r0
 8012726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	HAL_StatusTypeDef status;
	if (!flag) {
 801272a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801272e:	2b00      	cmp	r3, #0
 8012730:	d113      	bne.n	801275a <Set_Time+0x4a>
		sTime.Hours = time[0];
 8012732:	7b3b      	ldrb	r3, [r7, #12]
 8012734:	763b      	strb	r3, [r7, #24]
		sTime.Minutes = time[1];
 8012736:	7b7b      	ldrb	r3, [r7, #13]
 8012738:	767b      	strb	r3, [r7, #25]
		sTime.Seconds = time[2];
 801273a:	7bbb      	ldrb	r3, [r7, #14]
 801273c:	76bb      	strb	r3, [r7, #26]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801273e:	2300      	movs	r3, #0
 8012740:	627b      	str	r3, [r7, #36]	; 0x24
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012742:	2300      	movs	r3, #0
 8012744:	62bb      	str	r3, [r7, #40]	; 0x28
		status = HAL_RTC_SetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 8012746:	f107 0318 	add.w	r3, r7, #24
 801274a:	2200      	movs	r2, #0
 801274c:	4619      	mov	r1, r3
 801274e:	4807      	ldr	r0, [pc, #28]	; (801276c <Set_Time+0x5c>)
 8012750:	f7f6 fc68 	bl	8009024 <HAL_RTC_SetTime>
 8012754:	4603      	mov	r3, r0
 8012756:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	}

	HAL_Delay(500);
 801275a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801275e:	f7f1 fa75 	bl	8003c4c <HAL_Delay>

}
 8012762:	bf00      	nop
 8012764:	3730      	adds	r7, #48	; 0x30
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop
 801276c:	200017e4 	.word	0x200017e4

08012770 <Parse_Date>:
 * therefore delimiter is ':'
 * we will extract date and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Date(char *Datebuffer,uint8_t *date)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b084      	sub	sp, #16
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 801277a:	2300      	movs	r3, #0
 801277c:	81fb      	strh	r3, [r7, #14]
	int16_t val = 0;
 801277e:	2300      	movs	r3, #0
 8012780:	81bb      	strh	r3, [r7, #12]
	char *ptr = strtok(Datebuffer, ":");
 8012782:	492e      	ldr	r1, [pc, #184]	; (801283c <Parse_Date+0xcc>)
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f00b f893 	bl	801d8b0 <strtok>
 801278a:	60b8      	str	r0, [r7, #8]

	if(ptr == NULL)
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d14b      	bne.n	801282a <Parse_Date+0xba>
		{
			return 1;
 8012792:	2301      	movs	r3, #1
 8012794:	e04d      	b.n	8012832 <Parse_Date+0xc2>

	while(ptr != NULL)
	{


			val = atoi(ptr);
 8012796:	68b8      	ldr	r0, [r7, #8]
 8012798:	f009 f940 	bl	801ba1c <atoi>
 801279c:	4603      	mov	r3, r0
 801279e:	81bb      	strh	r3, [r7, #12]
			if(i == 0 && (val > 31 || val <=0))
 80127a0:	89fb      	ldrh	r3, [r7, #14]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d10a      	bne.n	80127bc <Parse_Date+0x4c>
 80127a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80127aa:	2b1f      	cmp	r3, #31
 80127ac:	dc03      	bgt.n	80127b6 <Parse_Date+0x46>
 80127ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	dc02      	bgt.n	80127bc <Parse_Date+0x4c>
			{
				val= 1;
 80127b6:	2301      	movs	r3, #1
 80127b8:	81bb      	strh	r3, [r7, #12]
 80127ba:	e028      	b.n	801280e <Parse_Date+0x9e>
			}
			else if(i == 1 && (val >  12 || val <=0))
 80127bc:	89fb      	ldrh	r3, [r7, #14]
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d10a      	bne.n	80127d8 <Parse_Date+0x68>
 80127c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80127c6:	2b0c      	cmp	r3, #12
 80127c8:	dc03      	bgt.n	80127d2 <Parse_Date+0x62>
 80127ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	dc02      	bgt.n	80127d8 <Parse_Date+0x68>
			{
				val= 1;
 80127d2:	2301      	movs	r3, #1
 80127d4:	81bb      	strh	r3, [r7, #12]
 80127d6:	e01a      	b.n	801280e <Parse_Date+0x9e>
			}
			else if(i == 2 && val > 1000)
 80127d8:	89fb      	ldrh	r3, [r7, #14]
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d112      	bne.n	8012804 <Parse_Date+0x94>
 80127de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80127e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80127e6:	dd0d      	ble.n	8012804 <Parse_Date+0x94>
			{
				val=val%100;
 80127e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80127ec:	4a14      	ldr	r2, [pc, #80]	; (8012840 <Parse_Date+0xd0>)
 80127ee:	fb82 1203 	smull	r1, r2, r2, r3
 80127f2:	1151      	asrs	r1, r2, #5
 80127f4:	17da      	asrs	r2, r3, #31
 80127f6:	1a8a      	subs	r2, r1, r2
 80127f8:	2164      	movs	r1, #100	; 0x64
 80127fa:	fb01 f202 	mul.w	r2, r1, r2
 80127fe:	1a9b      	subs	r3, r3, r2
 8012800:	81bb      	strh	r3, [r7, #12]
 8012802:	e004      	b.n	801280e <Parse_Date+0x9e>
			}
			else if(i > 2)
 8012804:	89fb      	ldrh	r3, [r7, #14]
 8012806:	2b02      	cmp	r3, #2
 8012808:	d901      	bls.n	801280e <Parse_Date+0x9e>
			{
				return 1;
 801280a:	2301      	movs	r3, #1
 801280c:	e011      	b.n	8012832 <Parse_Date+0xc2>
			}


		   date[i] =val;
 801280e:	89fb      	ldrh	r3, [r7, #14]
 8012810:	683a      	ldr	r2, [r7, #0]
 8012812:	4413      	add	r3, r2
 8012814:	89ba      	ldrh	r2, [r7, #12]
 8012816:	b2d2      	uxtb	r2, r2
 8012818:	701a      	strb	r2, [r3, #0]
		//printf("'%s'\n", ptr);
		ptr = strtok(NULL, ":");
 801281a:	4908      	ldr	r1, [pc, #32]	; (801283c <Parse_Date+0xcc>)
 801281c:	2000      	movs	r0, #0
 801281e:	f00b f847 	bl	801d8b0 <strtok>
 8012822:	60b8      	str	r0, [r7, #8]
		i++;
 8012824:	89fb      	ldrh	r3, [r7, #14]
 8012826:	3301      	adds	r3, #1
 8012828:	81fb      	strh	r3, [r7, #14]
	while(ptr != NULL)
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d1b2      	bne.n	8012796 <Parse_Date+0x26>
	}

	}

	return 0;
 8012830:	2300      	movs	r3, #0

}
 8012832:	4618      	mov	r0, r3
 8012834:	3710      	adds	r7, #16
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	08021ec4 	.word	0x08021ec4
 8012840:	51eb851f 	.word	0x51eb851f

08012844 <Parse_Time>:
 * therefore delimiter is ':'
 * we will extract time and save them in there respective variable
 * return 1 = buffer empty 0 = success
 */
uint8_t Parse_Time(char *Timebuffer,uint8_t *time)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
	uint16_t i =0;
 801284e:	2300      	movs	r3, #0
 8012850:	81fb      	strh	r3, [r7, #14]
		int16_t val = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	81bb      	strh	r3, [r7, #12]
		char *ptr = strtok(Timebuffer, ":");
 8012856:	492a      	ldr	r1, [pc, #168]	; (8012900 <Parse_Time+0xbc>)
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f00b f829 	bl	801d8b0 <strtok>
 801285e:	60b8      	str	r0, [r7, #8]

		if(ptr == NULL)
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d143      	bne.n	80128ee <Parse_Time+0xaa>
			{
				return 1;
 8012866:	2301      	movs	r3, #1
 8012868:	e045      	b.n	80128f6 <Parse_Time+0xb2>

		while(ptr != NULL)
		{


				val = atoi(ptr);
 801286a:	68b8      	ldr	r0, [r7, #8]
 801286c:	f009 f8d6 	bl	801ba1c <atoi>
 8012870:	4603      	mov	r3, r0
 8012872:	81bb      	strh	r3, [r7, #12]
				if(i == 0 && (val > 24|| val <0))
 8012874:	89fb      	ldrh	r3, [r7, #14]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d10a      	bne.n	8012890 <Parse_Time+0x4c>
 801287a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801287e:	2b18      	cmp	r3, #24
 8012880:	dc03      	bgt.n	801288a <Parse_Time+0x46>
 8012882:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012886:	2b00      	cmp	r3, #0
 8012888:	da02      	bge.n	8012890 <Parse_Time+0x4c>
				{
					val= 24;
 801288a:	2318      	movs	r3, #24
 801288c:	81bb      	strh	r3, [r7, #12]
 801288e:	e020      	b.n	80128d2 <Parse_Time+0x8e>
				}
				else if(i == 1 && (val >  59 || val <0))
 8012890:	89fb      	ldrh	r3, [r7, #14]
 8012892:	2b01      	cmp	r3, #1
 8012894:	d10a      	bne.n	80128ac <Parse_Time+0x68>
 8012896:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801289a:	2b3b      	cmp	r3, #59	; 0x3b
 801289c:	dc03      	bgt.n	80128a6 <Parse_Time+0x62>
 801289e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	da02      	bge.n	80128ac <Parse_Time+0x68>
				{
					val= 59;
 80128a6:	233b      	movs	r3, #59	; 0x3b
 80128a8:	81bb      	strh	r3, [r7, #12]
 80128aa:	e012      	b.n	80128d2 <Parse_Time+0x8e>
				}
				else if(i == 2 && (val > 59 || val <0))
 80128ac:	89fb      	ldrh	r3, [r7, #14]
 80128ae:	2b02      	cmp	r3, #2
 80128b0:	d10a      	bne.n	80128c8 <Parse_Time+0x84>
 80128b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80128b6:	2b3b      	cmp	r3, #59	; 0x3b
 80128b8:	dc03      	bgt.n	80128c2 <Parse_Time+0x7e>
 80128ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	da02      	bge.n	80128c8 <Parse_Time+0x84>
				{
					val=59;
 80128c2:	233b      	movs	r3, #59	; 0x3b
 80128c4:	81bb      	strh	r3, [r7, #12]
 80128c6:	e004      	b.n	80128d2 <Parse_Time+0x8e>
				}
				else if(i > 2)
 80128c8:	89fb      	ldrh	r3, [r7, #14]
 80128ca:	2b02      	cmp	r3, #2
 80128cc:	d901      	bls.n	80128d2 <Parse_Time+0x8e>
				{
					return 1;
 80128ce:	2301      	movs	r3, #1
 80128d0:	e011      	b.n	80128f6 <Parse_Time+0xb2>
				}


				time[i] =val;
 80128d2:	89fb      	ldrh	r3, [r7, #14]
 80128d4:	683a      	ldr	r2, [r7, #0]
 80128d6:	4413      	add	r3, r2
 80128d8:	89ba      	ldrh	r2, [r7, #12]
 80128da:	b2d2      	uxtb	r2, r2
 80128dc:	701a      	strb	r2, [r3, #0]
			//printf("'%s'\n", ptr);
			ptr = strtok(NULL, ":");
 80128de:	4908      	ldr	r1, [pc, #32]	; (8012900 <Parse_Time+0xbc>)
 80128e0:	2000      	movs	r0, #0
 80128e2:	f00a ffe5 	bl	801d8b0 <strtok>
 80128e6:	60b8      	str	r0, [r7, #8]
			i++;
 80128e8:	89fb      	ldrh	r3, [r7, #14]
 80128ea:	3301      	adds	r3, #1
 80128ec:	81fb      	strh	r3, [r7, #14]
		while(ptr != NULL)
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1ba      	bne.n	801286a <Parse_Time+0x26>
		}

		}

		return 0;
 80128f4:	2300      	movs	r3, #0
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	08021ec4 	.word	0x08021ec4

08012904 <CharToHexasc>:


 void CharToHexasc(uint8_t *pPos, uint8_t Wert)
{
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	460b      	mov	r3, r1
 801290e:	70fb      	strb	r3, [r7, #3]
      *pPos++ = kaHexAsc[Wert >> 4];
 8012910:	78fb      	ldrb	r3, [r7, #3]
 8012912:	091b      	lsrs	r3, r3, #4
 8012914:	b2db      	uxtb	r3, r3
 8012916:	4619      	mov	r1, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	1c5a      	adds	r2, r3, #1
 801291c:	607a      	str	r2, [r7, #4]
 801291e:	4a08      	ldr	r2, [pc, #32]	; (8012940 <CharToHexasc+0x3c>)
 8012920:	5c52      	ldrb	r2, [r2, r1]
 8012922:	701a      	strb	r2, [r3, #0]
      *pPos = kaHexAsc[Wert & 0x0f];
 8012924:	78fb      	ldrb	r3, [r7, #3]
 8012926:	f003 030f 	and.w	r3, r3, #15
 801292a:	4a05      	ldr	r2, [pc, #20]	; (8012940 <CharToHexasc+0x3c>)
 801292c:	5cd2      	ldrb	r2, [r2, r3]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	701a      	strb	r2, [r3, #0]
}
 8012932:	bf00      	nop
 8012934:	370c      	adds	r7, #12
 8012936:	46bd      	mov	sp, r7
 8012938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop
 8012940:	08022720 	.word	0x08022720

08012944 <adc_InitOneShotMode>:

#define ratio 1.27  //r1+r2/r2 465k/365k
#define offset 0    //add incase of any offset, sometimes there is offset in reading

static void adc_InitOneShotMode ()
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b088      	sub	sp, #32
 8012948:	af00      	add	r7, sp, #0
	adc_Disable();
 801294a:	4830      	ldr	r0, [pc, #192]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 801294c:	f7f1 fa29 	bl	8003da2 <HAL_ADC_DeInit>

	 ADC_MultiModeTypeDef multimode = {0};
 8012950:	f107 0314 	add.w	r3, r7, #20
 8012954:	2200      	movs	r2, #0
 8012956:	601a      	str	r2, [r3, #0]
 8012958:	605a      	str	r2, [r3, #4]
 801295a:	609a      	str	r2, [r3, #8]
	  hadc1.Instance = ADC1;
 801295c:	4b2b      	ldr	r3, [pc, #172]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 801295e:	4a2c      	ldr	r2, [pc, #176]	; (8012a10 <adc_InitOneShotMode+0xcc>)
 8012960:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012962:	4b2a      	ldr	r3, [pc, #168]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 8012964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012968:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801296a:	4b28      	ldr	r3, [pc, #160]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 801296c:	2200      	movs	r2, #0
 801296e:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = DISABLE;
 8012970:	4b26      	ldr	r3, [pc, #152]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 8012972:	2200      	movs	r2, #0
 8012974:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = DISABLE;
 8012976:	4b25      	ldr	r3, [pc, #148]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 8012978:	2200      	movs	r2, #0
 801297a:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801297c:	4b23      	ldr	r3, [pc, #140]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 801297e:	2200      	movs	r2, #0
 8012980:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012984:	4b21      	ldr	r3, [pc, #132]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 8012986:	2200      	movs	r2, #0
 8012988:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801298a:	4b20      	ldr	r3, [pc, #128]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 801298c:	4a21      	ldr	r2, [pc, #132]	; (8012a14 <adc_InitOneShotMode+0xd0>)
 801298e:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012990:	4b1e      	ldr	r3, [pc, #120]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 8012992:	2200      	movs	r2, #0
 8012994:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8012996:	4b1d      	ldr	r3, [pc, #116]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 8012998:	2201      	movs	r2, #1
 801299a:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = DISABLE;
 801299c:	4b1b      	ldr	r3, [pc, #108]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 801299e:	2200      	movs	r2, #0
 80129a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80129a4:	4b19      	ldr	r3, [pc, #100]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 80129a6:	2201      	movs	r2, #1
 80129a8:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80129aa:	4818      	ldr	r0, [pc, #96]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 80129ac:	f7f1 f9b6 	bl	8003d1c <HAL_ADC_Init>
 80129b0:	4603      	mov	r3, r0
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d001      	beq.n	80129ba <adc_InitOneShotMode+0x76>
	  {
	    Error_Handler();
 80129b6:	f7f0 fbfd 	bl	80031b4 <Error_Handler>
	  }


	  /** Configure the ADC multi-mode
	  */
	  multimode.Mode = ADC_MODE_INDEPENDENT;
 80129ba:	2300      	movs	r3, #0
 80129bc:	617b      	str	r3, [r7, #20]
	  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80129be:	f107 0314 	add.w	r3, r7, #20
 80129c2:	4619      	mov	r1, r3
 80129c4:	4811      	ldr	r0, [pc, #68]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 80129c6:	f7f1 fdbd 	bl	8004544 <HAL_ADCEx_MultiModeConfigChannel>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d001      	beq.n	80129d4 <adc_InitOneShotMode+0x90>
	  {
	    Error_Handler();
 80129d0:	f7f0 fbf0 	bl	80031b4 <Error_Handler>
	  }

		ADC_ChannelConfTypeDef sConfig = {0};
 80129d4:	1d3b      	adds	r3, r7, #4
 80129d6:	2200      	movs	r2, #0
 80129d8:	601a      	str	r2, [r3, #0]
 80129da:	605a      	str	r2, [r3, #4]
 80129dc:	609a      	str	r2, [r3, #8]
 80129de:	60da      	str	r2, [r3, #12]
			  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
			  */
		sConfig.Channel = ADC_CHANNEL_10;
 80129e0:	230a      	movs	r3, #10
 80129e2:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = 1;
 80129e4:	2301      	movs	r3, #1
 80129e6:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80129e8:	2302      	movs	r3, #2
 80129ea:	60fb      	str	r3, [r7, #12]
		  sConfig.Offset = 0;
 80129ec:	2300      	movs	r3, #0
 80129ee:	613b      	str	r3, [r7, #16]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80129f0:	1d3b      	adds	r3, r7, #4
 80129f2:	4619      	mov	r1, r3
 80129f4:	4805      	ldr	r0, [pc, #20]	; (8012a0c <adc_InitOneShotMode+0xc8>)
 80129f6:	f7f1 fb87 	bl	8004108 <HAL_ADC_ConfigChannel>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d001      	beq.n	8012a04 <adc_InitOneShotMode+0xc0>
		  {
		    Error_Handler();
 8012a00:	f7f0 fbd8 	bl	80031b4 <Error_Handler>
		  }



}
 8012a04:	bf00      	nop
 8012a06:	3720      	adds	r7, #32
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	20001748 	.word	0x20001748
 8012a10:	40012000 	.word	0x40012000
 8012a14:	0f000001 	.word	0x0f000001

08012a18 <adc_Getval>:

static uint32_t adc_Getval ()
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	af00      	add	r7, sp, #0

	return HAL_ADC_GetValue(&hadc1);
 8012a1c:	4802      	ldr	r0, [pc, #8]	; (8012a28 <adc_Getval+0x10>)
 8012a1e:	f7f1 fb65 	bl	80040ec <HAL_ADC_GetValue>
 8012a22:	4603      	mov	r3, r0

}
 8012a24:	4618      	mov	r0, r3
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	20001748 	.word	0x20001748
 8012a2c:	00000000 	.word	0x00000000

08012a30 <adc_Measure>:

uint8_t adc_Measure (float *bat_volt)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
	uint32_t val;
	adc_InitOneShotMode();
 8012a38:	f7ff ff84 	bl	8012944 <adc_InitOneShotMode>
	HAL_Delay(1);
 8012a3c:	2001      	movs	r0, #1
 8012a3e:	f7f1 f905 	bl	8003c4c <HAL_Delay>
	adc_Start();
 8012a42:	4847      	ldr	r0, [pc, #284]	; (8012b60 <adc_Measure+0x130>)
 8012a44:	f7f1 f9e0 	bl	8003e08 <HAL_ADC_Start>
	HAL_Delay(1);
 8012a48:	2001      	movs	r0, #1
 8012a4a:	f7f1 f8ff 	bl	8003c4c <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012a4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012a52:	4843      	ldr	r0, [pc, #268]	; (8012b60 <adc_Measure+0x130>)
 8012a54:	f7f1 fabf 	bl	8003fd6 <HAL_ADC_PollForConversion>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d01d      	beq.n	8012a9a <adc_Measure+0x6a>
		{
		   HAL_Delay(1);
 8012a5e:	2001      	movs	r0, #1
 8012a60:	f7f1 f8f4 	bl	8003c4c <HAL_Delay>
		   adc_Start();
 8012a64:	483e      	ldr	r0, [pc, #248]	; (8012b60 <adc_Measure+0x130>)
 8012a66:	f7f1 f9cf 	bl	8003e08 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012a6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012a6e:	483c      	ldr	r0, [pc, #240]	; (8012b60 <adc_Measure+0x130>)
 8012a70:	f7f1 fab1 	bl	8003fd6 <HAL_ADC_PollForConversion>
 8012a74:	4603      	mov	r3, r0
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d00f      	beq.n	8012a9a <adc_Measure+0x6a>
			{
				HAL_Delay(1);
 8012a7a:	2001      	movs	r0, #1
 8012a7c:	f7f1 f8e6 	bl	8003c4c <HAL_Delay>
				adc_Start();
 8012a80:	4837      	ldr	r0, [pc, #220]	; (8012b60 <adc_Measure+0x130>)
 8012a82:	f7f1 f9c1 	bl	8003e08 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012a86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012a8a:	4835      	ldr	r0, [pc, #212]	; (8012b60 <adc_Measure+0x130>)
 8012a8c:	f7f1 faa3 	bl	8003fd6 <HAL_ADC_PollForConversion>
 8012a90:	4603      	mov	r3, r0
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d001      	beq.n	8012a9a <adc_Measure+0x6a>
				{
					return 0;
 8012a96:	2300      	movs	r3, #0
 8012a98:	e05a      	b.n	8012b50 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012a9a:	4831      	ldr	r0, [pc, #196]	; (8012b60 <adc_Measure+0x130>)
 8012a9c:	f7f1 fa68 	bl	8003f70 <HAL_ADC_Stop>

	val = adc_Getval();
 8012aa0:	f7ff ffba 	bl	8012a18 <adc_Getval>
 8012aa4:	60f8      	str	r0, [r7, #12]

	HAL_Delay(1);
 8012aa6:	2001      	movs	r0, #1
 8012aa8:	f7f1 f8d0 	bl	8003c4c <HAL_Delay>
	adc_Start();
 8012aac:	482c      	ldr	r0, [pc, #176]	; (8012b60 <adc_Measure+0x130>)
 8012aae:	f7f1 f9ab 	bl	8003e08 <HAL_ADC_Start>
	HAL_Delay(1);
 8012ab2:	2001      	movs	r0, #1
 8012ab4:	f7f1 f8ca 	bl	8003c4c <HAL_Delay>

	if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012abc:	4828      	ldr	r0, [pc, #160]	; (8012b60 <adc_Measure+0x130>)
 8012abe:	f7f1 fa8a 	bl	8003fd6 <HAL_ADC_PollForConversion>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d01d      	beq.n	8012b04 <adc_Measure+0xd4>
		{
		   HAL_Delay(1);
 8012ac8:	2001      	movs	r0, #1
 8012aca:	f7f1 f8bf 	bl	8003c4c <HAL_Delay>
		   adc_Start();
 8012ace:	4824      	ldr	r0, [pc, #144]	; (8012b60 <adc_Measure+0x130>)
 8012ad0:	f7f1 f99a 	bl	8003e08 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012ad8:	4821      	ldr	r0, [pc, #132]	; (8012b60 <adc_Measure+0x130>)
 8012ada:	f7f1 fa7c 	bl	8003fd6 <HAL_ADC_PollForConversion>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00f      	beq.n	8012b04 <adc_Measure+0xd4>
			{
				HAL_Delay(1);
 8012ae4:	2001      	movs	r0, #1
 8012ae6:	f7f1 f8b1 	bl	8003c4c <HAL_Delay>
				adc_Start();
 8012aea:	481d      	ldr	r0, [pc, #116]	; (8012b60 <adc_Measure+0x130>)
 8012aec:	f7f1 f98c 	bl	8003e08 <HAL_ADC_Start>
				if (HAL_ADC_PollForConversion(&hadc1, 1000) != HAL_OK)
 8012af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012af4:	481a      	ldr	r0, [pc, #104]	; (8012b60 <adc_Measure+0x130>)
 8012af6:	f7f1 fa6e 	bl	8003fd6 <HAL_ADC_PollForConversion>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <adc_Measure+0xd4>
				{
					return 0;
 8012b00:	2300      	movs	r3, #0
 8012b02:	e025      	b.n	8012b50 <adc_Measure+0x120>
				}
			}
		}

	adc_Stop();
 8012b04:	4816      	ldr	r0, [pc, #88]	; (8012b60 <adc_Measure+0x130>)
 8012b06:	f7f1 fa33 	bl	8003f70 <HAL_ADC_Stop>

	val =(uint32_t)((val + adc_Getval()) / 2);	//Read and average ADC
 8012b0a:	f7ff ff85 	bl	8012a18 <adc_Getval>
 8012b0e:	4602      	mov	r2, r0
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	4413      	add	r3, r2
 8012b14:	085b      	lsrs	r3, r3, #1
 8012b16:	60fb      	str	r3, [r7, #12]




	*bat_volt = (float)(( val * (3.3f / 4096.0f))*ratio) - offset ;	// 12 bit
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	ee07 3a90 	vmov	s15, r3
 8012b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b22:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012b64 <adc_Measure+0x134>
 8012b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b2a:	ee17 0a90 	vmov	r0, s15
 8012b2e:	f7ed fd23 	bl	8000578 <__aeabi_f2d>
 8012b32:	a309      	add	r3, pc, #36	; (adr r3, 8012b58 <adc_Measure+0x128>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	f7ed fd76 	bl	8000628 <__aeabi_dmul>
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	460b      	mov	r3, r1
 8012b40:	4610      	mov	r0, r2
 8012b42:	4619      	mov	r1, r3
 8012b44:	f7ee f868 	bl	8000c18 <__aeabi_d2f>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	601a      	str	r2, [r3, #0]


	return 1;
 8012b4e:	2301      	movs	r3, #1


}
 8012b50:	4618      	mov	r0, r3
 8012b52:	3710      	adds	r7, #16
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	851eb852 	.word	0x851eb852
 8012b5c:	3ff451eb 	.word	0x3ff451eb
 8012b60:	20001748 	.word	0x20001748
 8012b64:	3a533333 	.word	0x3a533333

08012b68 <scd4x_start_periodic_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SCD4X_I2C_ADDRESS 0x62

int16_t scd4x_start_periodic_measurement() {
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21B1);
 8012b72:	88f9      	ldrh	r1, [r7, #6]
 8012b74:	463b      	mov	r3, r7
 8012b76:	f242 12b1 	movw	r2, #8625	; 0x21b1
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f000 fa8d 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012b80:	4603      	mov	r3, r0
 8012b82:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012b84:	88fa      	ldrh	r2, [r7, #6]
 8012b86:	463b      	mov	r3, r7
 8012b88:	4619      	mov	r1, r3
 8012b8a:	2062      	movs	r0, #98	; 0x62
 8012b8c:	f000 fad8 	bl	8013140 <sensirion_i2c_write_data>
 8012b90:	4603      	mov	r3, r0
 8012b92:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d002      	beq.n	8012ba2 <scd4x_start_periodic_measurement+0x3a>
        return error;
 8012b9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012ba0:	e004      	b.n	8012bac <scd4x_start_periodic_measurement+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8012ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012ba6:	f000 fbb9 	bl	801331c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012baa:	2300      	movs	r3, #0
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	3708      	adds	r7, #8
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <scd4x_read_measurement_ticks>:

int16_t scd4x_read_measurement_ticks(uint16_t* co2, uint16_t* temperature,
                                     uint16_t* humidity) {
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b088      	sub	sp, #32
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xEC05);
 8012bc4:	8bf9      	ldrh	r1, [r7, #30]
 8012bc6:	f107 0310 	add.w	r3, r7, #16
 8012bca:	f64e 4205 	movw	r2, #60421	; 0xec05
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f000 fa63 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012bd8:	8bfa      	ldrh	r2, [r7, #30]
 8012bda:	f107 0310 	add.w	r3, r7, #16
 8012bde:	4619      	mov	r1, r3
 8012be0:	2062      	movs	r0, #98	; 0x62
 8012be2:	f000 faad 	bl	8013140 <sensirion_i2c_write_data>
 8012be6:	4603      	mov	r3, r0
 8012be8:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012bea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d002      	beq.n	8012bf8 <scd4x_read_measurement_ticks+0x44>
        return error;
 8012bf2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012bf6:	e031      	b.n	8012c5c <scd4x_read_measurement_ticks+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012bfc:	f000 fb8e 	bl	801331c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8012c00:	f107 0310 	add.w	r3, r7, #16
 8012c04:	2206      	movs	r2, #6
 8012c06:	4619      	mov	r1, r3
 8012c08:	2062      	movs	r0, #98	; 0x62
 8012c0a:	f000 faad 	bl	8013168 <sensirion_i2c_read_data_inplace>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012c12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d002      	beq.n	8012c20 <scd4x_read_measurement_ticks+0x6c>
        return error;
 8012c1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012c1e:	e01d      	b.n	8012c5c <scd4x_read_measurement_ticks+0xa8>
    }
    *co2 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012c20:	f107 0310 	add.w	r3, r7, #16
 8012c24:	4618      	mov	r0, r3
 8012c26:	f000 f9d2 	bl	8012fce <sensirion_common_bytes_to_uint16_t>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	801a      	strh	r2, [r3, #0]
    *temperature = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8012c32:	f107 0310 	add.w	r3, r7, #16
 8012c36:	3302      	adds	r3, #2
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f000 f9c8 	bl	8012fce <sensirion_common_bytes_to_uint16_t>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	461a      	mov	r2, r3
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	801a      	strh	r2, [r3, #0]
    *humidity = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8012c46:	f107 0310 	add.w	r3, r7, #16
 8012c4a:	3304      	adds	r3, #4
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f000 f9be 	bl	8012fce <sensirion_common_bytes_to_uint16_t>
 8012c52:	4603      	mov	r3, r0
 8012c54:	461a      	mov	r2, r3
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012c5a:	2300      	movs	r3, #0
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3720      	adds	r7, #32
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <scd4x_read_measurement>:

int16_t scd4x_read_measurement(uint16_t* co2, int32_t* temperature_m_deg_c,
                               int32_t* humidity_m_percent_rh) {
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b086      	sub	sp, #24
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint16_t temperature;
    uint16_t humidity;

    error = scd4x_read_measurement_ticks(co2, &temperature, &humidity);
 8012c70:	f107 0212 	add.w	r2, r7, #18
 8012c74:	f107 0314 	add.w	r3, r7, #20
 8012c78:	4619      	mov	r1, r3
 8012c7a:	68f8      	ldr	r0, [r7, #12]
 8012c7c:	f7ff ff9a 	bl	8012bb4 <scd4x_read_measurement_ticks>
 8012c80:	4603      	mov	r3, r0
 8012c82:	82fb      	strh	r3, [r7, #22]
    if (error) {
 8012c84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d002      	beq.n	8012c92 <scd4x_read_measurement+0x2e>
        return error;
 8012c8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c90:	e015      	b.n	8012cbe <scd4x_read_measurement+0x5a>
    }
    *temperature_m_deg_c = ((21875 * (int32_t)temperature) >> 13) - 45000;
 8012c92:	8abb      	ldrh	r3, [r7, #20]
 8012c94:	461a      	mov	r2, r3
 8012c96:	f245 5373 	movw	r3, #21875	; 0x5573
 8012c9a:	fb02 f303 	mul.w	r3, r2, r3
 8012c9e:	135b      	asrs	r3, r3, #13
 8012ca0:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8012ca4:	3bc8      	subs	r3, #200	; 0xc8
 8012ca6:	68ba      	ldr	r2, [r7, #8]
 8012ca8:	6013      	str	r3, [r2, #0]
    *humidity_m_percent_rh = ((12500 * (int32_t)humidity) >> 13);
 8012caa:	8a7b      	ldrh	r3, [r7, #18]
 8012cac:	461a      	mov	r2, r3
 8012cae:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8012cb2:	fb02 f303 	mul.w	r3, r2, r3
 8012cb6:	135a      	asrs	r2, r3, #13
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3718      	adds	r7, #24
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
	...

08012cc8 <scd4x_stop_periodic_measurement>:

int16_t scd4x_stop_periodic_measurement() {
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3F86);
 8012cd2:	88f9      	ldrh	r1, [r7, #6]
 8012cd4:	463b      	mov	r3, r7
 8012cd6:	f643 7286 	movw	r2, #16262	; 0x3f86
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f000 f9dd 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012ce4:	88fa      	ldrh	r2, [r7, #6]
 8012ce6:	463b      	mov	r3, r7
 8012ce8:	4619      	mov	r1, r3
 8012cea:	2062      	movs	r0, #98	; 0x62
 8012cec:	f000 fa28 	bl	8013140 <sensirion_i2c_write_data>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012cf4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <scd4x_stop_periodic_measurement+0x3a>
        return error;
 8012cfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012d00:	e003      	b.n	8012d0a <scd4x_stop_periodic_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(500000);
 8012d02:	4804      	ldr	r0, [pc, #16]	; (8012d14 <scd4x_stop_periodic_measurement+0x4c>)
 8012d04:	f000 fb0a 	bl	801331c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3708      	adds	r7, #8
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	0007a120 	.word	0x0007a120

08012d18 <scd4x_perform_forced_recalibration>:
    sensirion_i2c_hal_sleep_usec(1000);
    return NO_ERROR;
}

int16_t scd4x_perform_forced_recalibration(uint16_t target_co2_concentration,
                                           uint16_t* frc_correction) {
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b086      	sub	sp, #24
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	4603      	mov	r3, r0
 8012d20:	6039      	str	r1, [r7, #0]
 8012d22:	80fb      	strh	r3, [r7, #6]
    int16_t error;
    uint8_t buffer[5];
    uint16_t offset = 0;
 8012d24:	2300      	movs	r3, #0
 8012d26:	82fb      	strh	r3, [r7, #22]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x362F);
 8012d28:	8af9      	ldrh	r1, [r7, #22]
 8012d2a:	f107 030c 	add.w	r3, r7, #12
 8012d2e:	f243 622f 	movw	r2, #13871	; 0x362f
 8012d32:	4618      	mov	r0, r3
 8012d34:	f000 f9b1 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	82fb      	strh	r3, [r7, #22]

    offset = sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset,
 8012d3c:	88fa      	ldrh	r2, [r7, #6]
 8012d3e:	8af9      	ldrh	r1, [r7, #22]
 8012d40:	f107 030c 	add.w	r3, r7, #12
 8012d44:	4618      	mov	r0, r3
 8012d46:	f000 f9cb 	bl	80130e0 <sensirion_i2c_add_uint16_t_to_buffer>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	82fb      	strh	r3, [r7, #22]
                                                  target_co2_concentration);

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012d4e:	8afa      	ldrh	r2, [r7, #22]
 8012d50:	f107 030c 	add.w	r3, r7, #12
 8012d54:	4619      	mov	r1, r3
 8012d56:	2062      	movs	r0, #98	; 0x62
 8012d58:	f000 f9f2 	bl	8013140 <sensirion_i2c_write_data>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8012d60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <scd4x_perform_forced_recalibration+0x56>
        return error;
 8012d68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012d6c:	e01c      	b.n	8012da8 <scd4x_perform_forced_recalibration+0x90>
    }

    sensirion_i2c_hal_sleep_usec(400000);
 8012d6e:	4810      	ldr	r0, [pc, #64]	; (8012db0 <scd4x_perform_forced_recalibration+0x98>)
 8012d70:	f000 fad4 	bl	801331c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 8012d74:	f107 030c 	add.w	r3, r7, #12
 8012d78:	2202      	movs	r2, #2
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	2062      	movs	r0, #98	; 0x62
 8012d7e:	f000 f9f3 	bl	8013168 <sensirion_i2c_read_data_inplace>
 8012d82:	4603      	mov	r3, r0
 8012d84:	82bb      	strh	r3, [r7, #20]
    if (error) {
 8012d86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d002      	beq.n	8012d94 <scd4x_perform_forced_recalibration+0x7c>
        return error;
 8012d8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012d92:	e009      	b.n	8012da8 <scd4x_perform_forced_recalibration+0x90>
    }
    *frc_correction = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012d94:	f107 030c 	add.w	r3, r7, #12
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f000 f918 	bl	8012fce <sensirion_common_bytes_to_uint16_t>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	461a      	mov	r2, r3
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3718      	adds	r7, #24
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	00061a80 	.word	0x00061a80

08012db4 <scd4x_get_data_ready_flag>:
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21AC);

    return sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
}

int16_t scd4x_get_data_ready_flag(bool* data_ready_flag) {
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	82fb      	strh	r3, [r7, #22]
    uint16_t local_data_ready = 0;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	82bb      	strh	r3, [r7, #20]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xE4B8);
 8012dc4:	8af9      	ldrh	r1, [r7, #22]
 8012dc6:	f107 030c 	add.w	r3, r7, #12
 8012dca:	f24e 42b8 	movw	r2, #58552	; 0xe4b8
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f000 f963 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	82fb      	strh	r3, [r7, #22]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012dd8:	8afa      	ldrh	r2, [r7, #22]
 8012dda:	f107 030c 	add.w	r3, r7, #12
 8012dde:	4619      	mov	r1, r3
 8012de0:	2062      	movs	r0, #98	; 0x62
 8012de2:	f000 f9ad 	bl	8013140 <sensirion_i2c_write_data>
 8012de6:	4603      	mov	r3, r0
 8012de8:	827b      	strh	r3, [r7, #18]
    if (error) {
 8012dea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d002      	beq.n	8012df8 <scd4x_get_data_ready_flag+0x44>
        return error;
 8012df2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012df6:	e025      	b.n	8012e44 <scd4x_get_data_ready_flag+0x90>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012dfc:	f000 fa8e 	bl	801331c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 2);
 8012e00:	f107 030c 	add.w	r3, r7, #12
 8012e04:	2202      	movs	r2, #2
 8012e06:	4619      	mov	r1, r3
 8012e08:	2062      	movs	r0, #98	; 0x62
 8012e0a:	f000 f9ad 	bl	8013168 <sensirion_i2c_read_data_inplace>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	827b      	strh	r3, [r7, #18]
    if (error) {
 8012e12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d002      	beq.n	8012e20 <scd4x_get_data_ready_flag+0x6c>
        return error;
 8012e1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012e1e:	e011      	b.n	8012e44 <scd4x_get_data_ready_flag+0x90>
    }
    local_data_ready = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012e20:	f107 030c 	add.w	r3, r7, #12
 8012e24:	4618      	mov	r0, r3
 8012e26:	f000 f8d2 	bl	8012fce <sensirion_common_bytes_to_uint16_t>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	82bb      	strh	r3, [r7, #20]
    *data_ready_flag = (local_data_ready & 0x07FF) != 0;
 8012e2e:	8abb      	ldrh	r3, [r7, #20]
 8012e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	bf14      	ite	ne
 8012e38:	2301      	movne	r3, #1
 8012e3a:	2300      	moveq	r3, #0
 8012e3c:	b2da      	uxtb	r2, r3
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8012e42:	2300      	movs	r3, #0
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3718      	adds	r7, #24
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <scd4x_get_serial_number>:
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_get_serial_number(uint16_t* serial_0, uint16_t* serial_1,
                                uint16_t* serial_2) {
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b088      	sub	sp, #32
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	60f8      	str	r0, [r7, #12]
 8012e54:	60b9      	str	r1, [r7, #8]
 8012e56:	607a      	str	r2, [r7, #4]
    int16_t error;
    uint8_t buffer[9];
    uint16_t offset = 0;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	83fb      	strh	r3, [r7, #30]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3682);
 8012e5c:	8bf9      	ldrh	r1, [r7, #30]
 8012e5e:	f107 0310 	add.w	r3, r7, #16
 8012e62:	f243 6282 	movw	r2, #13954	; 0x3682
 8012e66:	4618      	mov	r0, r3
 8012e68:	f000 f917 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	83fb      	strh	r3, [r7, #30]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012e70:	8bfa      	ldrh	r2, [r7, #30]
 8012e72:	f107 0310 	add.w	r3, r7, #16
 8012e76:	4619      	mov	r1, r3
 8012e78:	2062      	movs	r0, #98	; 0x62
 8012e7a:	f000 f961 	bl	8013140 <sensirion_i2c_write_data>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012e82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d002      	beq.n	8012e90 <scd4x_get_serial_number+0x44>
        return error;
 8012e8a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012e8e:	e031      	b.n	8012ef4 <scd4x_get_serial_number+0xa8>
    }

    sensirion_i2c_hal_sleep_usec(1000);
 8012e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012e94:	f000 fa42 	bl	801331c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SCD4X_I2C_ADDRESS, &buffer[0], 6);
 8012e98:	f107 0310 	add.w	r3, r7, #16
 8012e9c:	2206      	movs	r2, #6
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	2062      	movs	r0, #98	; 0x62
 8012ea2:	f000 f961 	bl	8013168 <sensirion_i2c_read_data_inplace>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	83bb      	strh	r3, [r7, #28]
    if (error) {
 8012eaa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d002      	beq.n	8012eb8 <scd4x_get_serial_number+0x6c>
        return error;
 8012eb2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012eb6:	e01d      	b.n	8012ef4 <scd4x_get_serial_number+0xa8>
    }
    *serial_0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8012eb8:	f107 0310 	add.w	r3, r7, #16
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f000 f886 	bl	8012fce <sensirion_common_bytes_to_uint16_t>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	801a      	strh	r2, [r3, #0]
    *serial_1 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8012eca:	f107 0310 	add.w	r3, r7, #16
 8012ece:	3302      	adds	r3, #2
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f000 f87c 	bl	8012fce <sensirion_common_bytes_to_uint16_t>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	461a      	mov	r2, r3
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	801a      	strh	r2, [r3, #0]
    *serial_2 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8012ede:	f107 0310 	add.w	r3, r7, #16
 8012ee2:	3304      	adds	r3, #4
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f000 f872 	bl	8012fce <sensirion_common_bytes_to_uint16_t>
 8012eea:	4603      	mov	r3, r0
 8012eec:	461a      	mov	r2, r3
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8012ef2:	2300      	movs	r3, #0
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3720      	adds	r7, #32
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}

08012efc <scd4x_reinit>:
    }
    sensirion_i2c_hal_sleep_usec(800000);
    return NO_ERROR;
}

int16_t scd4x_reinit() {
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012f02:	2300      	movs	r3, #0
 8012f04:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3646);
 8012f06:	88f9      	ldrh	r1, [r7, #6]
 8012f08:	463b      	mov	r3, r7
 8012f0a:	f243 6246 	movw	r2, #13894	; 0x3646
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f000 f8c3 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012f14:	4603      	mov	r3, r0
 8012f16:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012f18:	88fa      	ldrh	r2, [r7, #6]
 8012f1a:	463b      	mov	r3, r7
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	2062      	movs	r0, #98	; 0x62
 8012f20:	f000 f90e 	bl	8013140 <sensirion_i2c_write_data>
 8012f24:	4603      	mov	r3, r0
 8012f26:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012f28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d002      	beq.n	8012f36 <scd4x_reinit+0x3a>
        return error;
 8012f30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f34:	e004      	b.n	8012f40 <scd4x_reinit+0x44>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8012f36:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012f3a:	f000 f9ef 	bl	801331c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012f3e:	2300      	movs	r3, #0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <scd4x_power_down>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t scd4x_power_down() {
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36E0);
 8012f52:	88f9      	ldrh	r1, [r7, #6]
 8012f54:	463b      	mov	r3, r7
 8012f56:	f243 62e0 	movw	r2, #14048	; 0x36e0
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f000 f89d 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012f60:	4603      	mov	r3, r0
 8012f62:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012f64:	88fa      	ldrh	r2, [r7, #6]
 8012f66:	463b      	mov	r3, r7
 8012f68:	4619      	mov	r1, r3
 8012f6a:	2062      	movs	r0, #98	; 0x62
 8012f6c:	f000 f8e8 	bl	8013140 <sensirion_i2c_write_data>
 8012f70:	4603      	mov	r3, r0
 8012f72:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8012f74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <scd4x_power_down+0x3a>
        return error;
 8012f7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f80:	e004      	b.n	8012f8c <scd4x_power_down+0x44>
    }
    sensirion_i2c_hal_sleep_usec(1000);
 8012f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012f86:	f000 f9c9 	bl	801331c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012f8a:	2300      	movs	r3, #0
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	3708      	adds	r7, #8
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}

08012f94 <scd4x_wake_up>:

int16_t scd4x_wake_up() {
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    uint16_t offset = 0;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x36F6);
 8012f9e:	88f9      	ldrh	r1, [r7, #6]
 8012fa0:	1d3b      	adds	r3, r7, #4
 8012fa2:	f243 62f6 	movw	r2, #14070	; 0x36f6
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f000 f877 	bl	801309a <sensirion_i2c_add_command_to_buffer>
 8012fac:	4603      	mov	r3, r0
 8012fae:	80fb      	strh	r3, [r7, #6]

    // Sensor does not acknowledge the wake-up call, error is ignored
    (void)sensirion_i2c_write_data(SCD4X_I2C_ADDRESS, &buffer[0], offset);
 8012fb0:	88fa      	ldrh	r2, [r7, #6]
 8012fb2:	1d3b      	adds	r3, r7, #4
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	2062      	movs	r0, #98	; 0x62
 8012fb8:	f000 f8c2 	bl	8013140 <sensirion_i2c_write_data>
    sensirion_i2c_hal_sleep_usec(20000);
 8012fbc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8012fc0:	f000 f9ac 	bl	801331c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8012fc4:	2300      	movs	r3, #0
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3708      	adds	r7, #8
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}

08012fce <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8012fce:	b480      	push	{r7}
 8012fd0:	b083      	sub	sp, #12
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	781b      	ldrb	r3, [r3, #0]
 8012fda:	021b      	lsls	r3, r3, #8
 8012fdc:	b21a      	sxth	r2, r3
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	b21b      	sxth	r3, r3
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	b21b      	sxth	r3, r3
 8012fea:	b29b      	uxth	r3, r3
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	370c      	adds	r7, #12
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff6:	4770      	bx	lr

08012ff8 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8012ff8:	b480      	push	{r7}
 8012ffa:	b085      	sub	sp, #20
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	460b      	mov	r3, r1
 8013002:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8013004:	23ff      	movs	r3, #255	; 0xff
 8013006:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8013008:	2300      	movs	r3, #0
 801300a:	81fb      	strh	r3, [r7, #14]
 801300c:	e021      	b.n	8013052 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 801300e:	89fb      	ldrh	r3, [r7, #14]
 8013010:	687a      	ldr	r2, [r7, #4]
 8013012:	4413      	add	r3, r2
 8013014:	781a      	ldrb	r2, [r3, #0]
 8013016:	7b7b      	ldrb	r3, [r7, #13]
 8013018:	4053      	eors	r3, r2
 801301a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 801301c:	2308      	movs	r3, #8
 801301e:	733b      	strb	r3, [r7, #12]
 8013020:	e011      	b.n	8013046 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8013022:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013026:	2b00      	cmp	r3, #0
 8013028:	da07      	bge.n	801303a <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 801302a:	7b7b      	ldrb	r3, [r7, #13]
 801302c:	005b      	lsls	r3, r3, #1
 801302e:	b25b      	sxtb	r3, r3
 8013030:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8013034:	b25b      	sxtb	r3, r3
 8013036:	737b      	strb	r3, [r7, #13]
 8013038:	e002      	b.n	8013040 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 801303a:	7b7b      	ldrb	r3, [r7, #13]
 801303c:	005b      	lsls	r3, r3, #1
 801303e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8013040:	7b3b      	ldrb	r3, [r7, #12]
 8013042:	3b01      	subs	r3, #1
 8013044:	733b      	strb	r3, [r7, #12]
 8013046:	7b3b      	ldrb	r3, [r7, #12]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d1ea      	bne.n	8013022 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 801304c:	89fb      	ldrh	r3, [r7, #14]
 801304e:	3301      	adds	r3, #1
 8013050:	81fb      	strh	r3, [r7, #14]
 8013052:	89fa      	ldrh	r2, [r7, #14]
 8013054:	887b      	ldrh	r3, [r7, #2]
 8013056:	429a      	cmp	r2, r3
 8013058:	d3d9      	bcc.n	801300e <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 801305a:	7b7b      	ldrb	r3, [r7, #13]
}
 801305c:	4618      	mov	r0, r3
 801305e:	3714      	adds	r7, #20
 8013060:	46bd      	mov	sp, r7
 8013062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013066:	4770      	bx	lr

08013068 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	460b      	mov	r3, r1
 8013072:	807b      	strh	r3, [r7, #2]
 8013074:	4613      	mov	r3, r2
 8013076:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8013078:	887b      	ldrh	r3, [r7, #2]
 801307a:	4619      	mov	r1, r3
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f7ff ffbb 	bl	8012ff8 <sensirion_i2c_generate_crc>
 8013082:	4603      	mov	r3, r0
 8013084:	461a      	mov	r2, r3
 8013086:	787b      	ldrb	r3, [r7, #1]
 8013088:	4293      	cmp	r3, r2
 801308a:	d001      	beq.n	8013090 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 801308c:	2301      	movs	r3, #1
 801308e:	e000      	b.n	8013092 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8013090:	2300      	movs	r3, #0
}
 8013092:	4618      	mov	r0, r3
 8013094:	3708      	adds	r7, #8
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 801309a:	b480      	push	{r7}
 801309c:	b083      	sub	sp, #12
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	460b      	mov	r3, r1
 80130a4:	807b      	strh	r3, [r7, #2]
 80130a6:	4613      	mov	r3, r2
 80130a8:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 80130aa:	883b      	ldrh	r3, [r7, #0]
 80130ac:	0a1b      	lsrs	r3, r3, #8
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	887b      	ldrh	r3, [r7, #2]
 80130b2:	1c59      	adds	r1, r3, #1
 80130b4:	8079      	strh	r1, [r7, #2]
 80130b6:	4619      	mov	r1, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	440b      	add	r3, r1
 80130bc:	b2d2      	uxtb	r2, r2
 80130be:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 80130c0:	887b      	ldrh	r3, [r7, #2]
 80130c2:	1c5a      	adds	r2, r3, #1
 80130c4:	807a      	strh	r2, [r7, #2]
 80130c6:	461a      	mov	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	4413      	add	r3, r2
 80130cc:	883a      	ldrh	r2, [r7, #0]
 80130ce:	b2d2      	uxtb	r2, r2
 80130d0:	701a      	strb	r2, [r3, #0]
    return offset;
 80130d2:	887b      	ldrh	r3, [r7, #2]
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	370c      	adds	r7, #12
 80130d8:	46bd      	mov	sp, r7
 80130da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130de:	4770      	bx	lr

080130e0 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 80130e0:	b590      	push	{r4, r7, lr}
 80130e2:	b083      	sub	sp, #12
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	460b      	mov	r3, r1
 80130ea:	807b      	strh	r3, [r7, #2]
 80130ec:	4613      	mov	r3, r2
 80130ee:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 80130f0:	883b      	ldrh	r3, [r7, #0]
 80130f2:	0a1b      	lsrs	r3, r3, #8
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	887b      	ldrh	r3, [r7, #2]
 80130f8:	1c59      	adds	r1, r3, #1
 80130fa:	8079      	strh	r1, [r7, #2]
 80130fc:	4619      	mov	r1, r3
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	440b      	add	r3, r1
 8013102:	b2d2      	uxtb	r2, r2
 8013104:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8013106:	887b      	ldrh	r3, [r7, #2]
 8013108:	1c5a      	adds	r2, r3, #1
 801310a:	807a      	strh	r2, [r7, #2]
 801310c:	461a      	mov	r2, r3
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4413      	add	r3, r2
 8013112:	883a      	ldrh	r2, [r7, #0]
 8013114:	b2d2      	uxtb	r2, r2
 8013116:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8013118:	887b      	ldrh	r3, [r7, #2]
 801311a:	3b02      	subs	r3, #2
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8013120:	887b      	ldrh	r3, [r7, #2]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	18d4      	adds	r4, r2, r3
 8013126:	2102      	movs	r1, #2
 8013128:	f7ff ff66 	bl	8012ff8 <sensirion_i2c_generate_crc>
 801312c:	4603      	mov	r3, r0
 801312e:	7023      	strb	r3, [r4, #0]
    offset++;
 8013130:	887b      	ldrh	r3, [r7, #2]
 8013132:	3301      	adds	r3, #1
 8013134:	807b      	strh	r3, [r7, #2]

    return offset;
 8013136:	887b      	ldrh	r3, [r7, #2]
}
 8013138:	4618      	mov	r0, r3
 801313a:	370c      	adds	r7, #12
 801313c:	46bd      	mov	sp, r7
 801313e:	bd90      	pop	{r4, r7, pc}

08013140 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	4603      	mov	r3, r0
 8013148:	6039      	str	r1, [r7, #0]
 801314a:	71fb      	strb	r3, [r7, #7]
 801314c:	4613      	mov	r3, r2
 801314e:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8013150:	88ba      	ldrh	r2, [r7, #4]
 8013152:	79fb      	ldrb	r3, [r7, #7]
 8013154:	6839      	ldr	r1, [r7, #0]
 8013156:	4618      	mov	r0, r3
 8013158:	f000 f8c4 	bl	80132e4 <sensirion_i2c_hal_write>
 801315c:	4603      	mov	r3, r0
 801315e:	b21b      	sxth	r3, r3
}
 8013160:	4618      	mov	r0, r3
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	4603      	mov	r3, r0
 8013170:	6039      	str	r1, [r7, #0]
 8013172:	71fb      	strb	r3, [r7, #7]
 8013174:	4613      	mov	r3, r2
 8013176:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8013178:	88bb      	ldrh	r3, [r7, #4]
 801317a:	085b      	lsrs	r3, r3, #1
 801317c:	b29b      	uxth	r3, r3
 801317e:	461a      	mov	r2, r3
 8013180:	0052      	lsls	r2, r2, #1
 8013182:	4413      	add	r3, r2
 8013184:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8013186:	88bb      	ldrh	r3, [r7, #4]
 8013188:	f003 0301 	and.w	r3, r3, #1
 801318c:	b29b      	uxth	r3, r3
 801318e:	2b00      	cmp	r3, #0
 8013190:	d001      	beq.n	8013196 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8013192:	2304      	movs	r3, #4
 8013194:	e047      	b.n	8013226 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8013196:	897a      	ldrh	r2, [r7, #10]
 8013198:	79fb      	ldrb	r3, [r7, #7]
 801319a:	6839      	ldr	r1, [r7, #0]
 801319c:	4618      	mov	r0, r3
 801319e:	f000 f885 	bl	80132ac <sensirion_i2c_hal_read>
 80131a2:	4603      	mov	r3, r0
 80131a4:	813b      	strh	r3, [r7, #8]
    if (error) {
 80131a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d002      	beq.n	80131b4 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 80131ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80131b2:	e038      	b.n	8013226 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80131b4:	2300      	movs	r3, #0
 80131b6:	81fb      	strh	r3, [r7, #14]
 80131b8:	2300      	movs	r3, #0
 80131ba:	81bb      	strh	r3, [r7, #12]
 80131bc:	e02e      	b.n	801321c <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80131be:	89fb      	ldrh	r3, [r7, #14]
 80131c0:	683a      	ldr	r2, [r7, #0]
 80131c2:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80131c4:	89fb      	ldrh	r3, [r7, #14]
 80131c6:	3302      	adds	r3, #2
 80131c8:	683a      	ldr	r2, [r7, #0]
 80131ca:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	461a      	mov	r2, r3
 80131d0:	2102      	movs	r1, #2
 80131d2:	f7ff ff49 	bl	8013068 <sensirion_i2c_check_crc>
 80131d6:	4603      	mov	r3, r0
 80131d8:	813b      	strh	r3, [r7, #8]
        if (error) {
 80131da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d002      	beq.n	80131e8 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 80131e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80131e6:	e01e      	b.n	8013226 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 80131e8:	89fb      	ldrh	r3, [r7, #14]
 80131ea:	683a      	ldr	r2, [r7, #0]
 80131ec:	441a      	add	r2, r3
 80131ee:	89bb      	ldrh	r3, [r7, #12]
 80131f0:	1c59      	adds	r1, r3, #1
 80131f2:	81b9      	strh	r1, [r7, #12]
 80131f4:	4619      	mov	r1, r3
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	440b      	add	r3, r1
 80131fa:	7812      	ldrb	r2, [r2, #0]
 80131fc:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80131fe:	89fb      	ldrh	r3, [r7, #14]
 8013200:	3301      	adds	r3, #1
 8013202:	683a      	ldr	r2, [r7, #0]
 8013204:	441a      	add	r2, r3
 8013206:	89bb      	ldrh	r3, [r7, #12]
 8013208:	1c59      	adds	r1, r3, #1
 801320a:	81b9      	strh	r1, [r7, #12]
 801320c:	4619      	mov	r1, r3
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	440b      	add	r3, r1
 8013212:	7812      	ldrb	r2, [r2, #0]
 8013214:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8013216:	89fb      	ldrh	r3, [r7, #14]
 8013218:	3303      	adds	r3, #3
 801321a:	81fb      	strh	r3, [r7, #14]
 801321c:	89fa      	ldrh	r2, [r7, #14]
 801321e:	897b      	ldrh	r3, [r7, #10]
 8013220:	429a      	cmp	r2, r3
 8013222:	d3cc      	bcc.n	80131be <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8013224:	2300      	movs	r3, #0
}
 8013226:	4618      	mov	r0, r3
 8013228:	3710      	adds	r7, #16
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
	...

08013230 <sensirion_i2c_hal_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_hal_init(void) {
 8013230:	b580      	push	{r7, lr}
 8013232:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT */
	HAL_I2C_DeInit(&hi2c1);
 8013234:	4814      	ldr	r0, [pc, #80]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 8013236:	f7f2 fe57 	bl	8005ee8 <HAL_I2C_DeInit>
	  hi2c1.Instance = I2C1;
 801323a:	4b13      	ldr	r3, [pc, #76]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 801323c:	4a13      	ldr	r2, [pc, #76]	; (801328c <sensirion_i2c_hal_init+0x5c>)
 801323e:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8013240:	4b11      	ldr	r3, [pc, #68]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 8013242:	4a13      	ldr	r2, [pc, #76]	; (8013290 <sensirion_i2c_hal_init+0x60>)
 8013244:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013246:	4b10      	ldr	r3, [pc, #64]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 8013248:	2200      	movs	r2, #0
 801324a:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 801324c:	4b0e      	ldr	r3, [pc, #56]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 801324e:	2200      	movs	r2, #0
 8013250:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013252:	4b0d      	ldr	r3, [pc, #52]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 8013254:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013258:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801325a:	4b0b      	ldr	r3, [pc, #44]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 801325c:	2200      	movs	r2, #0
 801325e:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8013260:	4b09      	ldr	r3, [pc, #36]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 8013262:	2200      	movs	r2, #0
 8013264:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013266:	4b08      	ldr	r3, [pc, #32]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 8013268:	2200      	movs	r2, #0
 801326a:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801326c:	4b06      	ldr	r3, [pc, #24]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 801326e:	2200      	movs	r2, #0
 8013270:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013272:	4805      	ldr	r0, [pc, #20]	; (8013288 <sensirion_i2c_hal_init+0x58>)
 8013274:	f7f2 fcf4 	bl	8005c60 <HAL_I2C_Init>
 8013278:	4603      	mov	r3, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	d001      	beq.n	8013282 <sensirion_i2c_hal_init+0x52>
	  {
	    Error_Handler();
 801327e:	f7ef ff99 	bl	80031b4 <Error_Handler>
	  }
}
 8013282:	bf00      	nop
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	20001790 	.word	0x20001790
 801328c:	40005400 	.word	0x40005400
 8013290:	00061a80 	.word	0x00061a80

08013294 <sensirion_i2c_hal_free>:

/**
 * Release all resources initialized by sensirion_i2c_hal_init().
 */
void sensirion_i2c_hal_free(void) {
 8013294:	b580      	push	{r7, lr}
 8013296:	af00      	add	r7, sp, #0
    /* TODO:IMPLEMENT or leave empty if no resources need to be freed */
HAL_I2C_DeInit(&hi2c1);
 8013298:	4803      	ldr	r0, [pc, #12]	; (80132a8 <sensirion_i2c_hal_free+0x14>)
 801329a:	f7f2 fe25 	bl	8005ee8 <HAL_I2C_DeInit>
HAL_I2C_MspDeInit(&hi2c1);
 801329e:	4802      	ldr	r0, [pc, #8]	; (80132a8 <sensirion_i2c_hal_free+0x14>)
 80132a0:	f7f0 f862 	bl	8003368 <HAL_I2C_MspDeInit>
}
 80132a4:	bf00      	nop
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	20001790 	.word	0x20001790

080132ac <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b084      	sub	sp, #16
 80132b0:	af02      	add	r7, sp, #8
 80132b2:	4603      	mov	r3, r0
 80132b4:	6039      	str	r1, [r7, #0]
 80132b6:	71fb      	strb	r3, [r7, #7]
 80132b8:	4613      	mov	r3, r2
 80132ba:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
    return HAL_I2C_Master_Receive(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 80132bc:	79fb      	ldrb	r3, [r7, #7]
 80132be:	b29b      	uxth	r3, r3
 80132c0:	005b      	lsls	r3, r3, #1
 80132c2:	b299      	uxth	r1, r3
 80132c4:	88bb      	ldrh	r3, [r7, #4]
 80132c6:	f04f 32ff 	mov.w	r2, #4294967295
 80132ca:	9200      	str	r2, [sp, #0]
 80132cc:	683a      	ldr	r2, [r7, #0]
 80132ce:	4804      	ldr	r0, [pc, #16]	; (80132e0 <sensirion_i2c_hal_read+0x34>)
 80132d0:	f7f2 ff38 	bl	8006144 <HAL_I2C_Master_Receive>
 80132d4:	4603      	mov	r3, r0
 80132d6:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 80132d8:	4618      	mov	r0, r3
 80132da:	3708      	adds	r7, #8
 80132dc:	46bd      	mov	sp, r7
 80132de:	bd80      	pop	{r7, pc}
 80132e0:	20001790 	.word	0x20001790

080132e4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af02      	add	r7, sp, #8
 80132ea:	4603      	mov	r3, r0
 80132ec:	6039      	str	r1, [r7, #0]
 80132ee:	71fb      	strb	r3, [r7, #7]
 80132f0:	4613      	mov	r3, r2
 80132f2:	80bb      	strh	r3, [r7, #4]
    /* TODO:IMPLEMENT */
	return HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)(address << 1),data,count,HAL_MAX_DELAY);
 80132f4:	79fb      	ldrb	r3, [r7, #7]
 80132f6:	b29b      	uxth	r3, r3
 80132f8:	005b      	lsls	r3, r3, #1
 80132fa:	b299      	uxth	r1, r3
 80132fc:	88bb      	ldrh	r3, [r7, #4]
 80132fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013302:	9200      	str	r2, [sp, #0]
 8013304:	683a      	ldr	r2, [r7, #0]
 8013306:	4804      	ldr	r0, [pc, #16]	; (8013318 <sensirion_i2c_hal_write+0x34>)
 8013308:	f7f2 fe1e 	bl	8005f48 <HAL_I2C_Master_Transmit>
 801330c:	4603      	mov	r3, r0
 801330e:	b25b      	sxtb	r3, r3
	//return NOT_IMPLEMENTED_ERROR;
}
 8013310:	4618      	mov	r0, r3
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	20001790 	.word	0x20001790

0801331c <sensirion_i2c_hal_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
    /* TODO:IMPLEMENT */

	HAL_Delay(useconds/1000);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	4a05      	ldr	r2, [pc, #20]	; (801333c <sensirion_i2c_hal_sleep_usec+0x20>)
 8013328:	fba2 2303 	umull	r2, r3, r2, r3
 801332c:	099b      	lsrs	r3, r3, #6
 801332e:	4618      	mov	r0, r3
 8013330:	f7f0 fc8c 	bl	8003c4c <HAL_Delay>
}
 8013334:	bf00      	nop
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	10624dd3 	.word	0x10624dd3

08013340 <sensirion_bytes_to_uint32_t>:

uint16_t sensirion_bytes_to_uint16_t(const uint8_t* bytes) {
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
}

uint32_t sensirion_bytes_to_uint32_t(const uint8_t* bytes) {
 8013340:	b480      	push	{r7}
 8013342:	b083      	sub	sp, #12
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	061a      	lsls	r2, r3, #24
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	3301      	adds	r3, #1
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	041b      	lsls	r3, r3, #16
 8013356:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	3302      	adds	r3, #2
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8013360:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8013362:	687a      	ldr	r2, [r7, #4]
 8013364:	3203      	adds	r2, #3
 8013366:	7812      	ldrb	r2, [r2, #0]
 8013368:	4313      	orrs	r3, r2
}
 801336a:	4618      	mov	r0, r3
 801336c:	370c      	adds	r7, #12
 801336e:	46bd      	mov	sp, r7
 8013370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013374:	4770      	bx	lr

08013376 <sensirion_bytes_to_float>:

int32_t sensirion_bytes_to_int32_t(const uint8_t* bytes) {
    return (int32_t)sensirion_bytes_to_uint32_t(bytes);
}

float sensirion_bytes_to_float(const uint8_t* bytes) {
 8013376:	b580      	push	{r7, lr}
 8013378:	b084      	sub	sp, #16
 801337a:	af00      	add	r7, sp, #0
 801337c:	6078      	str	r0, [r7, #4]
    union {
        uint32_t u32_value;
        float float32;
    } tmp;

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7ff ffde 	bl	8013340 <sensirion_bytes_to_uint32_t>
 8013384:	4603      	mov	r3, r0
 8013386:	60fb      	str	r3, [r7, #12]
    return tmp.float32;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	ee07 3a90 	vmov	s15, r3
}
 801338e:	eeb0 0a67 	vmov.f32	s0, s15
 8013392:	3710      	adds	r7, #16
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}

08013398 <sensirion_shdlc_crc>:
    tmp.float32 = value;
    sensirion_uint32_t_to_bytes(tmp.u32_value, bytes);
}

static uint8_t sensirion_shdlc_crc(uint8_t header_sum, uint8_t data_len,
                                   const uint8_t* data) {
 8013398:	b480      	push	{r7}
 801339a:	b083      	sub	sp, #12
 801339c:	af00      	add	r7, sp, #0
 801339e:	4603      	mov	r3, r0
 80133a0:	603a      	str	r2, [r7, #0]
 80133a2:	71fb      	strb	r3, [r7, #7]
 80133a4:	460b      	mov	r3, r1
 80133a6:	71bb      	strb	r3, [r7, #6]
    header_sum += data_len;
 80133a8:	79fa      	ldrb	r2, [r7, #7]
 80133aa:	79bb      	ldrb	r3, [r7, #6]
 80133ac:	4413      	add	r3, r2
 80133ae:	71fb      	strb	r3, [r7, #7]

    while (data_len--)
 80133b0:	e006      	b.n	80133c0 <sensirion_shdlc_crc+0x28>
        header_sum += *(data++);
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	1c5a      	adds	r2, r3, #1
 80133b6:	603a      	str	r2, [r7, #0]
 80133b8:	781a      	ldrb	r2, [r3, #0]
 80133ba:	79fb      	ldrb	r3, [r7, #7]
 80133bc:	4413      	add	r3, r2
 80133be:	71fb      	strb	r3, [r7, #7]
    while (data_len--)
 80133c0:	79bb      	ldrb	r3, [r7, #6]
 80133c2:	1e5a      	subs	r2, r3, #1
 80133c4:	71ba      	strb	r2, [r7, #6]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d1f3      	bne.n	80133b2 <sensirion_shdlc_crc+0x1a>

    return ~header_sum;
 80133ca:	79fb      	ldrb	r3, [r7, #7]
 80133cc:	43db      	mvns	r3, r3
 80133ce:	b2db      	uxtb	r3, r3
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <sensirion_shdlc_stuff_data>:

static uint16_t sensirion_shdlc_stuff_data(uint8_t data_len,
                                           const uint8_t* data,
                                           uint8_t* stuffed_data) {
 80133dc:	b480      	push	{r7}
 80133de:	b087      	sub	sp, #28
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	4603      	mov	r3, r0
 80133e4:	60b9      	str	r1, [r7, #8]
 80133e6:	607a      	str	r2, [r7, #4]
 80133e8:	73fb      	strb	r3, [r7, #15]
    uint16_t output_data_len = 0;
 80133ea:	2300      	movs	r3, #0
 80133ec:	82fb      	strh	r3, [r7, #22]
    uint8_t c;

    while (data_len--) {
 80133ee:	e026      	b.n	801343e <sensirion_shdlc_stuff_data+0x62>
        c = *(data++);
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	1c5a      	adds	r2, r3, #1
 80133f4:	60ba      	str	r2, [r7, #8]
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	757b      	strb	r3, [r7, #21]
        switch (c) {
 80133fa:	7d7b      	ldrb	r3, [r7, #21]
 80133fc:	2b7e      	cmp	r3, #126	; 0x7e
 80133fe:	dc16      	bgt.n	801342e <sensirion_shdlc_stuff_data+0x52>
 8013400:	2b7d      	cmp	r3, #125	; 0x7d
 8013402:	da03      	bge.n	801340c <sensirion_shdlc_stuff_data+0x30>
 8013404:	2b11      	cmp	r3, #17
 8013406:	d001      	beq.n	801340c <sensirion_shdlc_stuff_data+0x30>
 8013408:	2b13      	cmp	r3, #19
 801340a:	d110      	bne.n	801342e <sensirion_shdlc_stuff_data+0x52>
            case 0x11:
            case 0x13:
            case 0x7d:
            case 0x7e:
                // byte stuffing is done by inserting 0x7d and inverting bit 5
                *(stuffed_data++) = 0x7d;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	1c5a      	adds	r2, r3, #1
 8013410:	607a      	str	r2, [r7, #4]
 8013412:	227d      	movs	r2, #125	; 0x7d
 8013414:	701a      	strb	r2, [r3, #0]
                *(stuffed_data++) = c ^ (1 << 5);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	1c5a      	adds	r2, r3, #1
 801341a:	607a      	str	r2, [r7, #4]
 801341c:	7d7a      	ldrb	r2, [r7, #21]
 801341e:	f082 0220 	eor.w	r2, r2, #32
 8013422:	b2d2      	uxtb	r2, r2
 8013424:	701a      	strb	r2, [r3, #0]
                output_data_len += 2;
 8013426:	8afb      	ldrh	r3, [r7, #22]
 8013428:	3302      	adds	r3, #2
 801342a:	82fb      	strh	r3, [r7, #22]
                break;
 801342c:	e007      	b.n	801343e <sensirion_shdlc_stuff_data+0x62>
            default:
                *(stuffed_data++) = c;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	1c5a      	adds	r2, r3, #1
 8013432:	607a      	str	r2, [r7, #4]
 8013434:	7d7a      	ldrb	r2, [r7, #21]
 8013436:	701a      	strb	r2, [r3, #0]
                output_data_len += 1;
 8013438:	8afb      	ldrh	r3, [r7, #22]
 801343a:	3301      	adds	r3, #1
 801343c:	82fb      	strh	r3, [r7, #22]
    while (data_len--) {
 801343e:	7bfb      	ldrb	r3, [r7, #15]
 8013440:	1e5a      	subs	r2, r3, #1
 8013442:	73fa      	strb	r2, [r7, #15]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d1d3      	bne.n	80133f0 <sensirion_shdlc_stuff_data+0x14>
        }
    }
    return output_data_len;
 8013448:	8afb      	ldrh	r3, [r7, #22]
}
 801344a:	4618      	mov	r0, r3
 801344c:	371c      	adds	r7, #28
 801344e:	46bd      	mov	sp, r7
 8013450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013454:	4770      	bx	lr

08013456 <sensirion_shdlc_check_unstuff>:

static uint8_t sensirion_shdlc_check_unstuff(uint8_t data) {
 8013456:	b480      	push	{r7}
 8013458:	b083      	sub	sp, #12
 801345a:	af00      	add	r7, sp, #0
 801345c:	4603      	mov	r3, r0
 801345e:	71fb      	strb	r3, [r7, #7]
    return data == 0x7d;
 8013460:	79fb      	ldrb	r3, [r7, #7]
 8013462:	2b7d      	cmp	r3, #125	; 0x7d
 8013464:	bf0c      	ite	eq
 8013466:	2301      	moveq	r3, #1
 8013468:	2300      	movne	r3, #0
 801346a:	b2db      	uxtb	r3, r3
}
 801346c:	4618      	mov	r0, r3
 801346e:	370c      	adds	r7, #12
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr

08013478 <sensirion_shdlc_unstuff_byte>:

static uint8_t sensirion_shdlc_unstuff_byte(uint8_t data) {
 8013478:	b480      	push	{r7}
 801347a:	b083      	sub	sp, #12
 801347c:	af00      	add	r7, sp, #0
 801347e:	4603      	mov	r3, r0
 8013480:	71fb      	strb	r3, [r7, #7]
    switch (data) {
 8013482:	79fb      	ldrb	r3, [r7, #7]
 8013484:	2b5e      	cmp	r3, #94	; 0x5e
 8013486:	d010      	beq.n	80134aa <sensirion_shdlc_unstuff_byte+0x32>
 8013488:	2b5e      	cmp	r3, #94	; 0x5e
 801348a:	dc10      	bgt.n	80134ae <sensirion_shdlc_unstuff_byte+0x36>
 801348c:	2b5d      	cmp	r3, #93	; 0x5d
 801348e:	d00a      	beq.n	80134a6 <sensirion_shdlc_unstuff_byte+0x2e>
 8013490:	2b5d      	cmp	r3, #93	; 0x5d
 8013492:	dc0c      	bgt.n	80134ae <sensirion_shdlc_unstuff_byte+0x36>
 8013494:	2b31      	cmp	r3, #49	; 0x31
 8013496:	d002      	beq.n	801349e <sensirion_shdlc_unstuff_byte+0x26>
 8013498:	2b33      	cmp	r3, #51	; 0x33
 801349a:	d002      	beq.n	80134a2 <sensirion_shdlc_unstuff_byte+0x2a>
 801349c:	e007      	b.n	80134ae <sensirion_shdlc_unstuff_byte+0x36>
        case 0x31:
            return 0x11;
 801349e:	2311      	movs	r3, #17
 80134a0:	e006      	b.n	80134b0 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x33:
            return 0x13;
 80134a2:	2313      	movs	r3, #19
 80134a4:	e004      	b.n	80134b0 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5d:
            return 0x7d;
 80134a6:	237d      	movs	r3, #125	; 0x7d
 80134a8:	e002      	b.n	80134b0 <sensirion_shdlc_unstuff_byte+0x38>
        case 0x5e:
            return 0x7e;
 80134aa:	237e      	movs	r3, #126	; 0x7e
 80134ac:	e000      	b.n	80134b0 <sensirion_shdlc_unstuff_byte+0x38>
        default:
            return data;
 80134ae:	79fb      	ldrb	r3, [r7, #7]
    }
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	370c      	adds	r7, #12
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr

080134bc <sensirion_shdlc_xcv>:

int16_t sensirion_shdlc_xcv(uint8_t addr, uint8_t cmd, uint8_t tx_data_len,
                            const uint8_t* tx_data, uint8_t max_rx_data_len,
                            struct sensirion_shdlc_rx_header* rx_header,
                            uint8_t* rx_data) {
 80134bc:	b580      	push	{r7, lr}
 80134be:	b084      	sub	sp, #16
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	603b      	str	r3, [r7, #0]
 80134c4:	4603      	mov	r3, r0
 80134c6:	71fb      	strb	r3, [r7, #7]
 80134c8:	460b      	mov	r3, r1
 80134ca:	71bb      	strb	r3, [r7, #6]
 80134cc:	4613      	mov	r3, r2
 80134ce:	717b      	strb	r3, [r7, #5]
    int16_t ret;

    ret = sensirion_shdlc_tx(addr, cmd, tx_data_len, tx_data);
 80134d0:	797a      	ldrb	r2, [r7, #5]
 80134d2:	79b9      	ldrb	r1, [r7, #6]
 80134d4:	79f8      	ldrb	r0, [r7, #7]
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	f000 f818 	bl	801350c <sensirion_shdlc_tx>
 80134dc:	4603      	mov	r3, r0
 80134de:	81fb      	strh	r3, [r7, #14]
    if (ret != 0)
 80134e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d002      	beq.n	80134ee <sensirion_shdlc_xcv+0x32>
        return ret;
 80134e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80134ec:	e00a      	b.n	8013504 <sensirion_shdlc_xcv+0x48>

    sensirion_sleep_usec(RX_DELAY_US);
 80134ee:	f644 6020 	movw	r0, #20000	; 0x4e20
 80134f2:	f000 fb07 	bl	8013b04 <sensirion_sleep_usec>
    return sensirion_shdlc_rx(max_rx_data_len, rx_header, rx_data);
 80134f6:	7e3b      	ldrb	r3, [r7, #24]
 80134f8:	6a3a      	ldr	r2, [r7, #32]
 80134fa:	69f9      	ldr	r1, [r7, #28]
 80134fc:	4618      	mov	r0, r3
 80134fe:	f000 f8d7 	bl	80136b0 <sensirion_shdlc_rx>
 8013502:	4603      	mov	r3, r0
}
 8013504:	4618      	mov	r0, r3
 8013506:	3710      	adds	r7, #16
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <sensirion_shdlc_tx>:

int16_t sensirion_shdlc_tx(uint8_t addr, uint8_t cmd, uint8_t data_len,
                           const uint8_t* data) {
 801350c:	b590      	push	{r4, r7, lr}
 801350e:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8013512:	af00      	add	r7, sp, #0
 8013514:	4604      	mov	r4, r0
 8013516:	4608      	mov	r0, r1
 8013518:	4611      	mov	r1, r2
 801351a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 801351e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8013522:	6013      	str	r3, [r2, #0]
 8013524:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013528:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 801352c:	4622      	mov	r2, r4
 801352e:	701a      	strb	r2, [r3, #0]
 8013530:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013534:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8013538:	4602      	mov	r2, r0
 801353a:	701a      	strb	r2, [r3, #0]
 801353c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013540:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 8013544:	460a      	mov	r2, r1
 8013546:	701a      	strb	r2, [r3, #0]
    uint16_t len = 0;
 8013548:	2300      	movs	r3, #0
 801354a:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    int16_t ret;
    uint8_t crc;
    uint8_t tx_frame_buf[SHDLC_FRAME_MAX_TX_FRAME_SIZE];

    crc = sensirion_shdlc_crc(addr + cmd, data_len, data);
 801354e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013552:	f2a3 2311 	subw	r3, r3, #529	; 0x211
 8013556:	781a      	ldrb	r2, [r3, #0]
 8013558:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801355c:	f2a3 2312 	subw	r3, r3, #530	; 0x212
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	4413      	add	r3, r2
 8013564:	b2d8      	uxtb	r0, r3
 8013566:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801356a:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 801356e:	7819      	ldrb	r1, [r3, #0]
 8013570:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013574:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8013578:	681a      	ldr	r2, [r3, #0]
 801357a:	f7ff ff0d 	bl	8013398 <sensirion_shdlc_crc>
 801357e:	4603      	mov	r3, r0
 8013580:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

    tx_frame_buf[len++] = SHDLC_START;
 8013584:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013588:	1c5a      	adds	r2, r3, #1
 801358a:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 801358e:	461a      	mov	r2, r3
 8013590:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013594:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8013598:	217e      	movs	r1, #126	; 0x7e
 801359a:	5499      	strb	r1, [r3, r2]
    len += sensirion_shdlc_stuff_data(1, &addr, tx_frame_buf + len);
 801359c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80135a0:	f107 0208 	add.w	r2, r7, #8
 80135a4:	441a      	add	r2, r3
 80135a6:	1dfb      	adds	r3, r7, #7
 80135a8:	4619      	mov	r1, r3
 80135aa:	2001      	movs	r0, #1
 80135ac:	f7ff ff16 	bl	80133dc <sensirion_shdlc_stuff_data>
 80135b0:	4603      	mov	r3, r0
 80135b2:	461a      	mov	r2, r3
 80135b4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80135b8:	4413      	add	r3, r2
 80135ba:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &cmd, tx_frame_buf + len);
 80135be:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80135c2:	f107 0208 	add.w	r2, r7, #8
 80135c6:	441a      	add	r2, r3
 80135c8:	1dbb      	adds	r3, r7, #6
 80135ca:	4619      	mov	r1, r3
 80135cc:	2001      	movs	r0, #1
 80135ce:	f7ff ff05 	bl	80133dc <sensirion_shdlc_stuff_data>
 80135d2:	4603      	mov	r3, r0
 80135d4:	461a      	mov	r2, r3
 80135d6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80135da:	4413      	add	r3, r2
 80135dc:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &data_len, tx_frame_buf + len);
 80135e0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80135e4:	f107 0208 	add.w	r2, r7, #8
 80135e8:	441a      	add	r2, r3
 80135ea:	1d7b      	adds	r3, r7, #5
 80135ec:	4619      	mov	r1, r3
 80135ee:	2001      	movs	r0, #1
 80135f0:	f7ff fef4 	bl	80133dc <sensirion_shdlc_stuff_data>
 80135f4:	4603      	mov	r3, r0
 80135f6:	461a      	mov	r2, r3
 80135f8:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80135fc:	4413      	add	r3, r2
 80135fe:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(data_len, data, tx_frame_buf + len);
 8013602:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013606:	f2a3 2313 	subw	r3, r3, #531	; 0x213
 801360a:	7818      	ldrb	r0, [r3, #0]
 801360c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013610:	f107 0208 	add.w	r2, r7, #8
 8013614:	441a      	add	r2, r3
 8013616:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801361a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801361e:	6819      	ldr	r1, [r3, #0]
 8013620:	f7ff fedc 	bl	80133dc <sensirion_shdlc_stuff_data>
 8013624:	4603      	mov	r3, r0
 8013626:	461a      	mov	r2, r3
 8013628:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801362c:	4413      	add	r3, r2
 801362e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    len += sensirion_shdlc_stuff_data(1, &crc, tx_frame_buf + len);
 8013632:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013636:	f107 0208 	add.w	r2, r7, #8
 801363a:	441a      	add	r2, r3
 801363c:	f207 2313 	addw	r3, r7, #531	; 0x213
 8013640:	4619      	mov	r1, r3
 8013642:	2001      	movs	r0, #1
 8013644:	f7ff feca 	bl	80133dc <sensirion_shdlc_stuff_data>
 8013648:	4603      	mov	r3, r0
 801364a:	461a      	mov	r2, r3
 801364c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013650:	4413      	add	r3, r2
 8013652:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    tx_frame_buf[len++] = SHDLC_STOP;
 8013656:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801365a:	1c5a      	adds	r2, r3, #1
 801365c:	f8a7 2216 	strh.w	r2, [r7, #534]	; 0x216
 8013660:	461a      	mov	r2, r3
 8013662:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013666:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801366a:	217e      	movs	r1, #126	; 0x7e
 801366c:	5499      	strb	r1, [r3, r2]

    ret = sensirion_uart_tx(len, tx_frame_buf);
 801366e:	f107 0208 	add.w	r2, r7, #8
 8013672:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8013676:	4611      	mov	r1, r2
 8013678:	4618      	mov	r0, r3
 801367a:	f000 f9db 	bl	8013a34 <sensirion_uart_tx>
 801367e:	4603      	mov	r3, r0
 8013680:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
    if (ret < 0)
 8013684:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8013688:	2b00      	cmp	r3, #0
 801368a:	da02      	bge.n	8013692 <sensirion_shdlc_tx+0x186>
        return ret;
 801368c:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8013690:	e009      	b.n	80136a6 <sensirion_shdlc_tx+0x19a>
    if (ret != len)
 8013692:	f9b7 2214 	ldrsh.w	r2, [r7, #532]	; 0x214
 8013696:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 801369a:	429a      	cmp	r2, r3
 801369c:	d002      	beq.n	80136a4 <sensirion_shdlc_tx+0x198>
        return SENSIRION_SHDLC_ERR_TX_INCOMPLETE;
 801369e:	f06f 0305 	mvn.w	r3, #5
 80136a2:	e000      	b.n	80136a6 <sensirion_shdlc_tx+0x19a>
    return 0;
 80136a4:	2300      	movs	r3, #0
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd90      	pop	{r4, r7, pc}

080136b0 <sensirion_shdlc_rx>:

int16_t sensirion_shdlc_rx(uint8_t max_data_len,
                           struct sensirion_shdlc_rx_header* rxh,
                           uint8_t* data) {
 80136b0:	b590      	push	{r4, r7, lr}
 80136b2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80136bc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80136c0:	6019      	str	r1, [r3, #0]
 80136c2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80136c6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80136ca:	601a      	str	r2, [r3, #0]
 80136cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80136d0:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80136d4:	4602      	mov	r2, r0
 80136d6:	701a      	strb	r2, [r3, #0]
    int16_t len;
    uint16_t i;
    uint8_t rx_frame[SHDLC_FRAME_MAX_RX_FRAME_SIZE];
    uint8_t* rx_header = (uint8_t*)rxh;
 80136d8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80136dc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    uint8_t j;
    uint8_t crc;
    uint8_t unstuff_next;

    len = sensirion_uart_rx(2 + (5 + (uint16_t)max_data_len) * 2, rx_frame);
 80136e6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80136ea:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	3306      	adds	r3, #6
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	005b      	lsls	r3, r3, #1
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	f107 0210 	add.w	r2, r7, #16
 80136fc:	4611      	mov	r1, r2
 80136fe:	4618      	mov	r0, r3
 8013700:	f000 f9d2 	bl	8013aa8 <sensirion_uart_rx>
 8013704:	4603      	mov	r3, r0
 8013706:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a


//      printf("First byte is : %02X \r\n", RX_Data[0]);
//      printf("Total %d bytes received \r\n", len);

      if (len < 1 || RX_Data[0] != SHDLC_START)
 801370a:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 801370e:	2b00      	cmp	r3, #0
 8013710:	dd03      	ble.n	801371a <sensirion_shdlc_rx+0x6a>
 8013712:	4ba0      	ldr	r3, [pc, #640]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	2b7e      	cmp	r3, #126	; 0x7e
 8013718:	d002      	beq.n	8013720 <sensirion_shdlc_rx+0x70>
        return SENSIRION_SHDLC_ERR_MISSING_START;
 801371a:	f06f 0301 	mvn.w	r3, #1
 801371e:	e133      	b.n	8013988 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 8013720:	2300      	movs	r3, #0
 8013722:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8013726:	2301      	movs	r3, #1
 8013728:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 801372c:	2300      	movs	r3, #0
 801372e:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8013732:	e03a      	b.n	80137aa <sensirion_shdlc_rx+0xfa>
        if (unstuff_next) {
 8013734:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013738:	2b00      	cmp	r3, #0
 801373a:	d015      	beq.n	8013768 <sensirion_shdlc_rx+0xb8>
            rx_header[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 801373c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013740:	4a94      	ldr	r2, [pc, #592]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 8013742:	5cd2      	ldrb	r2, [r2, r3]
 8013744:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013748:	1c59      	adds	r1, r3, #1
 801374a:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 801374e:	4619      	mov	r1, r3
 8013750:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013754:	185c      	adds	r4, r3, r1
 8013756:	4610      	mov	r0, r2
 8013758:	f7ff fe8e 	bl	8013478 <sensirion_shdlc_unstuff_byte>
 801375c:	4603      	mov	r3, r0
 801375e:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013760:	2300      	movs	r3, #0
 8013762:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8013766:	e01b      	b.n	80137a0 <sensirion_shdlc_rx+0xf0>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 8013768:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 801376c:	4a89      	ldr	r2, [pc, #548]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 801376e:	5cd3      	ldrb	r3, [r2, r3]
 8013770:	4618      	mov	r0, r3
 8013772:	f7ff fe70 	bl	8013456 <sensirion_shdlc_check_unstuff>
 8013776:	4603      	mov	r3, r0
 8013778:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 801377c:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013780:	2b00      	cmp	r3, #0
 8013782:	d10d      	bne.n	80137a0 <sensirion_shdlc_rx+0xf0>
                rx_header[j++] = RX_Data[i];
 8013784:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8013788:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 801378c:	1c59      	adds	r1, r3, #1
 801378e:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8013792:	4619      	mov	r1, r3
 8013794:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8013798:	440b      	add	r3, r1
 801379a:	497e      	ldr	r1, [pc, #504]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 801379c:	5c8a      	ldrb	r2, [r1, r2]
 801379e:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, i = 1, j = 0; j < sizeof(*rxh) && i < len - 2; ++i) {
 80137a0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80137a4:	3301      	adds	r3, #1
 80137a6:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 80137aa:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80137ae:	2b03      	cmp	r3, #3
 80137b0:	d806      	bhi.n	80137c0 <sensirion_shdlc_rx+0x110>
 80137b2:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 80137b6:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 80137ba:	3b02      	subs	r3, #2
 80137bc:	429a      	cmp	r2, r3
 80137be:	dbb9      	blt.n	8013734 <sensirion_shdlc_rx+0x84>
        }
    }
    if (j != sizeof(*rxh) || unstuff_next)
 80137c0:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80137c4:	2b04      	cmp	r3, #4
 80137c6:	d103      	bne.n	80137d0 <sensirion_shdlc_rx+0x120>
 80137c8:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d002      	beq.n	80137d6 <sensirion_shdlc_rx+0x126>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 80137d0:	f06f 0304 	mvn.w	r3, #4
 80137d4:	e0d8      	b.n	8013988 <sensirion_shdlc_rx+0x2d8>

    if (max_data_len < rxh->data_len)
 80137d6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80137da:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	78db      	ldrb	r3, [r3, #3]
 80137e2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80137e6:	f2a2 2219 	subw	r2, r2, #537	; 0x219
 80137ea:	7812      	ldrb	r2, [r2, #0]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d202      	bcs.n	80137f6 <sensirion_shdlc_rx+0x146>
        return SENSIRION_SHDLC_ERR_FRAME_TOO_LONG; /* more data than expected */
 80137f0:	f06f 0306 	mvn.w	r3, #6
 80137f4:	e0c8      	b.n	8013988 <sensirion_shdlc_rx+0x2d8>

    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 80137f6:	2300      	movs	r3, #0
 80137f8:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 80137fc:	2300      	movs	r3, #0
 80137fe:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8013802:	e040      	b.n	8013886 <sensirion_shdlc_rx+0x1d6>
        if (unstuff_next) {
 8013804:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013808:	2b00      	cmp	r3, #0
 801380a:	d018      	beq.n	801383e <sensirion_shdlc_rx+0x18e>
            data[j++] = sensirion_shdlc_unstuff_byte(RX_Data[i]);
 801380c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013810:	4a60      	ldr	r2, [pc, #384]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 8013812:	5cd2      	ldrb	r2, [r2, r3]
 8013814:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013818:	1c59      	adds	r1, r3, #1
 801381a:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 801381e:	4619      	mov	r1, r3
 8013820:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013824:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	185c      	adds	r4, r3, r1
 801382c:	4610      	mov	r0, r2
 801382e:	f7ff fe23 	bl	8013478 <sensirion_shdlc_unstuff_byte>
 8013832:	4603      	mov	r3, r0
 8013834:	7023      	strb	r3, [r4, #0]
            unstuff_next = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 801383c:	e01e      	b.n	801387c <sensirion_shdlc_rx+0x1cc>
        } else {
            unstuff_next = sensirion_shdlc_check_unstuff(RX_Data[i]);
 801383e:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013842:	4a54      	ldr	r2, [pc, #336]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 8013844:	5cd3      	ldrb	r3, [r2, r3]
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff fe05 	bl	8013456 <sensirion_shdlc_check_unstuff>
 801384c:	4603      	mov	r3, r0
 801384e:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
            if (!unstuff_next)
 8013852:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8013856:	2b00      	cmp	r3, #0
 8013858:	d110      	bne.n	801387c <sensirion_shdlc_rx+0x1cc>
                data[j++] = RX_Data[i];
 801385a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 801385e:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8013862:	1c59      	adds	r1, r3, #1
 8013864:	f887 1225 	strb.w	r1, [r7, #549]	; 0x225
 8013868:	4619      	mov	r1, r3
 801386a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801386e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	440b      	add	r3, r1
 8013876:	4947      	ldr	r1, [pc, #284]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 8013878:	5c8a      	ldrb	r2, [r1, r2]
 801387a:	701a      	strb	r2, [r3, #0]
    for (unstuff_next = 0, j = 0; j < rxh->data_len && i < len - 2; ++i) {
 801387c:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013880:	3301      	adds	r3, #1
 8013882:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
 8013886:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801388a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	78db      	ldrb	r3, [r3, #3]
 8013892:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 8013896:	429a      	cmp	r2, r3
 8013898:	d206      	bcs.n	80138a8 <sensirion_shdlc_rx+0x1f8>
 801389a:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 801389e:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 80138a2:	3b02      	subs	r3, #2
 80138a4:	429a      	cmp	r2, r3
 80138a6:	dbad      	blt.n	8013804 <sensirion_shdlc_rx+0x154>
        }
    }

    if (unstuff_next)
 80138a8:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <sensirion_shdlc_rx+0x206>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 80138b0:	f06f 0304 	mvn.w	r3, #4
 80138b4:	e068      	b.n	8013988 <sensirion_shdlc_rx+0x2d8>

    if (j < rxh->data_len)
 80138b6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80138ba:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	78db      	ldrb	r3, [r3, #3]
 80138c2:	f897 2225 	ldrb.w	r2, [r7, #549]	; 0x225
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d202      	bcs.n	80138d0 <sensirion_shdlc_rx+0x220>
        return SENSIRION_SHDLC_ERR_ENCODING_ERROR;
 80138ca:	f06f 0304 	mvn.w	r3, #4
 80138ce:	e05b      	b.n	8013988 <sensirion_shdlc_rx+0x2d8>

    crc = RX_Data[i++];
 80138d0:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80138d4:	1c5a      	adds	r2, r3, #1
 80138d6:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 80138da:	461a      	mov	r2, r3
 80138dc:	4b2d      	ldr	r3, [pc, #180]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 80138de:	5c9b      	ldrb	r3, [r3, r2]
 80138e0:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
    if (sensirion_shdlc_check_unstuff(crc))
 80138e4:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7ff fdb4 	bl	8013456 <sensirion_shdlc_check_unstuff>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00d      	beq.n	8013910 <sensirion_shdlc_rx+0x260>
        crc = sensirion_shdlc_unstuff_byte(RX_Data[i++]);
 80138f4:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 80138f8:	1c5a      	adds	r2, r3, #1
 80138fa:	f8a7 2226 	strh.w	r2, [r7, #550]	; 0x226
 80138fe:	461a      	mov	r2, r3
 8013900:	4b24      	ldr	r3, [pc, #144]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 8013902:	5c9b      	ldrb	r3, [r3, r2]
 8013904:	4618      	mov	r0, r3
 8013906:	f7ff fdb7 	bl	8013478 <sensirion_shdlc_unstuff_byte>
 801390a:	4603      	mov	r3, r0
 801390c:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224

    if (sensirion_shdlc_crc(rxh->addr + rxh->cmd + rxh->state, rxh->data_len,
 8013910:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013914:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	781a      	ldrb	r2, [r3, #0]
 801391c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013920:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	785b      	ldrb	r3, [r3, #1]
 8013928:	4413      	add	r3, r2
 801392a:	b2da      	uxtb	r2, r3
 801392c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013930:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	789b      	ldrb	r3, [r3, #2]
 8013938:	4413      	add	r3, r2
 801393a:	b2d8      	uxtb	r0, r3
 801393c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8013940:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	78d9      	ldrb	r1, [r3, #3]
 8013948:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801394c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8013950:	681a      	ldr	r2, [r3, #0]
 8013952:	f7ff fd21 	bl	8013398 <sensirion_shdlc_crc>
 8013956:	4603      	mov	r3, r0
 8013958:	461a      	mov	r2, r3
 801395a:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 801395e:	4293      	cmp	r3, r2
 8013960:	d002      	beq.n	8013968 <sensirion_shdlc_rx+0x2b8>
                            data) != crc)
        return SENSIRION_SHDLC_ERR_CRC_MISMATCH;
 8013962:	f06f 0303 	mvn.w	r3, #3
 8013966:	e00f      	b.n	8013988 <sensirion_shdlc_rx+0x2d8>

    if (i >= len || RX_Data[i] != SHDLC_STOP)
 8013968:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 801396c:	f9b7 321a 	ldrsh.w	r3, [r7, #538]	; 0x21a
 8013970:	429a      	cmp	r2, r3
 8013972:	da05      	bge.n	8013980 <sensirion_shdlc_rx+0x2d0>
 8013974:	f8b7 3226 	ldrh.w	r3, [r7, #550]	; 0x226
 8013978:	4a06      	ldr	r2, [pc, #24]	; (8013994 <sensirion_shdlc_rx+0x2e4>)
 801397a:	5cd3      	ldrb	r3, [r2, r3]
 801397c:	2b7e      	cmp	r3, #126	; 0x7e
 801397e:	d002      	beq.n	8013986 <sensirion_shdlc_rx+0x2d6>
        return SENSIRION_SHDLC_ERR_MISSING_STOP;
 8013980:	f06f 0302 	mvn.w	r3, #2
 8013984:	e000      	b.n	8013988 <sensirion_shdlc_rx+0x2d8>

    return 0;
 8013986:	2300      	movs	r3, #0
}
 8013988:	4618      	mov	r0, r3
 801398a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 801398e:	46bd      	mov	sp, r7
 8013990:	bd90      	pop	{r4, r7, pc}
 8013992:	bf00      	nop
 8013994:	200014e4 	.word	0x200014e4

08013998 <sensirion_uart_open>:
/**
 * sensirion_uart_open() - initialize UART
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_open() {
 8013998:	b580      	push	{r7, lr}
 801399a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 801399c:	4819      	ldr	r0, [pc, #100]	; (8013a04 <sensirion_uart_open+0x6c>)
 801399e:	f7f7 ffd2 	bl	800b946 <HAL_UART_DeInit>
	  huart2.Instance = USART2;
 80139a2:	4b18      	ldr	r3, [pc, #96]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139a4:	4a18      	ldr	r2, [pc, #96]	; (8013a08 <sensirion_uart_open+0x70>)
 80139a6:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80139a8:	4b16      	ldr	r3, [pc, #88]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139aa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80139ae:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80139b0:	4b14      	ldr	r3, [pc, #80]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 80139b6:	4b13      	ldr	r3, [pc, #76]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139b8:	2200      	movs	r2, #0
 80139ba:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 80139bc:	4b11      	ldr	r3, [pc, #68]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139be:	2200      	movs	r2, #0
 80139c0:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 80139c2:	4b10      	ldr	r3, [pc, #64]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139c4:	220c      	movs	r2, #12
 80139c6:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80139c8:	4b0e      	ldr	r3, [pc, #56]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139ca:	2200      	movs	r2, #0
 80139cc:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80139ce:	4b0d      	ldr	r3, [pc, #52]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139d0:	2200      	movs	r2, #0
 80139d2:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 80139d4:	480b      	ldr	r0, [pc, #44]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139d6:	f7f7 ff69 	bl	800b8ac <HAL_UART_Init>
 80139da:	4603      	mov	r3, r0
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d001      	beq.n	80139e4 <sensirion_uart_open+0x4c>
	  {
	    Error_Handler();
 80139e0:	f7ef fbe8 	bl	80031b4 <Error_Handler>
	  }

		HAL_UARTEx_ReceiveToIdle_IT(&huart2, RX_Data, 522);
 80139e4:	f240 220a 	movw	r2, #522	; 0x20a
 80139e8:	4908      	ldr	r1, [pc, #32]	; (8013a0c <sensirion_uart_open+0x74>)
 80139ea:	4806      	ldr	r0, [pc, #24]	; (8013a04 <sensirion_uart_open+0x6c>)
 80139ec:	f7f8 f89c 	bl	800bb28 <HAL_UARTEx_ReceiveToIdle_IT>
		//HAL_UART_Receive_IT(&huart2, &rx_Data, 1);
		 rx_len=0;
 80139f0:	4b07      	ldr	r3, [pc, #28]	; (8013a10 <sensirion_uart_open+0x78>)
 80139f2:	2200      	movs	r2, #0
 80139f4:	801a      	strh	r2, [r3, #0]
		rx_incre = 0;
 80139f6:	4b07      	ldr	r3, [pc, #28]	; (8013a14 <sensirion_uart_open+0x7c>)
 80139f8:	2200      	movs	r2, #0
 80139fa:	801a      	strh	r2, [r3, #0]
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RX_Data, 522);
    return 0;
 80139fc:	2300      	movs	r3, #0
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	bd80      	pop	{r7, pc}
 8013a02:	bf00      	nop
 8013a04:	20001a04 	.word	0x20001a04
 8013a08:	40004400 	.word	0x40004400
 8013a0c:	200014e4 	.word	0x200014e4
 8013a10:	20001aa0 	.word	0x20001aa0
 8013a14:	20001aa2 	.word	0x20001aa2

08013a18 <sensirion_uart_close>:
/**
 * sensirion_uart_close() - release UART resources
 *
 * Return:      0 on success, an error code otherwise
 */
int16_t sensirion_uart_close() {
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	af00      	add	r7, sp, #0
    // TODO: implement
	HAL_UART_DeInit(&huart2);
 8013a1c:	4804      	ldr	r0, [pc, #16]	; (8013a30 <sensirion_uart_close+0x18>)
 8013a1e:	f7f7 ff92 	bl	800b946 <HAL_UART_DeInit>
	HAL_UART_MspDeInit(&huart2);
 8013a22:	4803      	ldr	r0, [pc, #12]	; (8013a30 <sensirion_uart_close+0x18>)
 8013a24:	f7ef fee8 	bl	80037f8 <HAL_UART_MspDeInit>
    return 0;
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	20001a04 	.word	0x20001a04

08013a34 <sensirion_uart_tx>:
 *
 * @data_len:   number of bytes to send
 * @data:       data to send
 * Return:      Number of bytes sent or a negative error code
 */
int16_t sensirion_uart_tx(uint16_t data_len, const uint8_t* data) {
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	6039      	str	r1, [r7, #0]
 8013a3e:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
	if(HAL_UART_Transmit(&huart2, data, data_len, HAL_MAX_DELAY) == HAL_OK)
 8013a40:	88fa      	ldrh	r2, [r7, #6]
 8013a42:	f04f 33ff 	mov.w	r3, #4294967295
 8013a46:	6839      	ldr	r1, [r7, #0]
 8013a48:	4807      	ldr	r0, [pc, #28]	; (8013a68 <sensirion_uart_tx+0x34>)
 8013a4a:	f7f7 ffab 	bl	800b9a4 <HAL_UART_Transmit>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d102      	bne.n	8013a5a <sensirion_uart_tx+0x26>
		{
			return data_len;
 8013a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013a58:	e001      	b.n	8013a5e <sensirion_uart_tx+0x2a>
		}
		else
		{
			return -1;
 8013a5a:	f04f 33ff 	mov.w	r3, #4294967295

		}

	return data_len;
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3708      	adds	r7, #8
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
 8013a66:	bf00      	nop
 8013a68:	20001a04 	.word	0x20001a04

08013a6c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	460b      	mov	r3, r1
 8013a76:	807b      	strh	r3, [r7, #2]

	rx_len = Size;
 8013a78:	4a07      	ldr	r2, [pc, #28]	; (8013a98 <HAL_UARTEx_RxEventCallback+0x2c>)
 8013a7a:	887b      	ldrh	r3, [r7, #2]
 8013a7c:	8013      	strh	r3, [r2, #0]
	rx_Wait = 1;
 8013a7e:	4b07      	ldr	r3, [pc, #28]	; (8013a9c <HAL_UARTEx_RxEventCallback+0x30>)
 8013a80:	2201      	movs	r2, #1
 8013a82:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2,RX_Data, 522);
 8013a84:	f240 220a 	movw	r2, #522	; 0x20a
 8013a88:	4905      	ldr	r1, [pc, #20]	; (8013aa0 <HAL_UARTEx_RxEventCallback+0x34>)
 8013a8a:	4806      	ldr	r0, [pc, #24]	; (8013aa4 <HAL_UARTEx_RxEventCallback+0x38>)
 8013a8c:	f7f8 f84c 	bl	800bb28 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8013a90:	bf00      	nop
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	20001aa0 	.word	0x20001aa0
 8013a9c:	20001aa4 	.word	0x20001aa4
 8013aa0:	200014e4 	.word	0x200014e4
 8013aa4:	20001a04 	.word	0x20001a04

08013aa8 <sensirion_uart_rx>:
 *
 * @data_len:   max number of bytes to receive
 * @data:       Memory where received data is stored
 * Return:      Number of bytes received or a negative error code
 */
int16_t sensirion_uart_rx(uint16_t max_data_len, uint8_t* data) {
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b084      	sub	sp, #16
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	4603      	mov	r3, r0
 8013ab0:	6039      	str	r1, [r7, #0]
 8013ab2:	80fb      	strh	r3, [r7, #6]
    // TODO: implement
uint32_t counter = 0;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	60fb      	str	r3, [r7, #12]

//we give 200ms of delay
		  while(!rx_Wait && counter <= 2)
 8013ab8:	e005      	b.n	8013ac6 <sensirion_uart_rx+0x1e>
		  {
			  counter++;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	3301      	adds	r3, #1
 8013abe:	60fb      	str	r3, [r7, #12]
			  HAL_Delay(10);
 8013ac0:	200a      	movs	r0, #10
 8013ac2:	f7f0 f8c3 	bl	8003c4c <HAL_Delay>
		  while(!rx_Wait && counter <= 2)
 8013ac6:	4b0b      	ldr	r3, [pc, #44]	; (8013af4 <sensirion_uart_rx+0x4c>)
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d102      	bne.n	8013ad4 <sensirion_uart_rx+0x2c>
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2b02      	cmp	r3, #2
 8013ad2:	d9f2      	bls.n	8013aba <sensirion_uart_rx+0x12>

		  }
		    rx_Wait = 0;
 8013ad4:	4b07      	ldr	r3, [pc, #28]	; (8013af4 <sensirion_uart_rx+0x4c>)
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	701a      	strb	r2, [r3, #0]

//		    if(counter > 3)
//		    {
//		    	sensirion_uart_open();
//		    }
		    len = 0;
 8013ada:	4b07      	ldr	r3, [pc, #28]	; (8013af8 <sensirion_uart_rx+0x50>)
 8013adc:	2200      	movs	r2, #0
 8013ade:	801a      	strh	r2, [r3, #0]
		    rx_incre = 0;
 8013ae0:	4b06      	ldr	r3, [pc, #24]	; (8013afc <sensirion_uart_rx+0x54>)
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	801a      	strh	r2, [r3, #0]
	    return rx_len;
 8013ae6:	4b06      	ldr	r3, [pc, #24]	; (8013b00 <sensirion_uart_rx+0x58>)
 8013ae8:	881b      	ldrh	r3, [r3, #0]
 8013aea:	b21b      	sxth	r3, r3
	//return i;
}
 8013aec:	4618      	mov	r0, r3
 8013aee:	3710      	adds	r7, #16
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}
 8013af4:	20001aa4 	.word	0x20001aa4
 8013af8:	20001aa6 	.word	0x20001aa6
 8013afc:	20001aa2 	.word	0x20001aa2
 8013b00:	20001aa0 	.word	0x20001aa0

08013b04 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
    // TODO: implement
	useconds = (useconds/1000);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	4a06      	ldr	r2, [pc, #24]	; (8013b28 <sensirion_sleep_usec+0x24>)
 8013b10:	fba2 2303 	umull	r2, r3, r2, r3
 8013b14:	099b      	lsrs	r3, r3, #6
 8013b16:	607b      	str	r3, [r7, #4]
	HAL_Delay(useconds);
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f7f0 f897 	bl	8003c4c <HAL_Delay>
}
 8013b1e:	bf00      	nop
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	10624dd3 	.word	0x10624dd3

08013b2c <sps30_get_serial>:
    int16_t ret = sps30_get_serial(serial);

    return ret;
}

int16_t sps30_get_serial(char* serial) {
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b08a      	sub	sp, #40	; 0x28
 8013b30:	af04      	add	r7, sp, #16
 8013b32:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_CMD_DEV_INFO_SUBCMD_GET_SERIAL;
 8013b34:	2303      	movs	r3, #3
 8013b36:	733b      	strb	r3, [r7, #12]
    int16_t ret;

    ret = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_DEV_INFO, sizeof(param_buf),
 8013b38:	f107 020c 	add.w	r2, r7, #12
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	9302      	str	r3, [sp, #8]
 8013b40:	f107 0310 	add.w	r3, r7, #16
 8013b44:	9301      	str	r3, [sp, #4]
 8013b46:	2320      	movs	r3, #32
 8013b48:	9300      	str	r3, [sp, #0]
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	21d0      	movs	r1, #208	; 0xd0
 8013b50:	2000      	movs	r0, #0
 8013b52:	f7ff fcb3 	bl	80134bc <sensirion_shdlc_xcv>
 8013b56:	4603      	mov	r3, r0
 8013b58:	82fb      	strh	r3, [r7, #22]
                              param_buf, SPS30_MAX_SERIAL_LEN, &header,
                              (uint8_t*)serial);
    if (ret < 0)
 8013b5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	da02      	bge.n	8013b68 <sps30_get_serial+0x3c>
        return ret;
 8013b62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013b66:	e009      	b.n	8013b7c <sps30_get_serial+0x50>

    if (header.state)
 8013b68:	7cbb      	ldrb	r3, [r7, #18]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d005      	beq.n	8013b7a <sps30_get_serial+0x4e>
        return SPS30_ERR_STATE(header.state);
 8013b6e:	7cbb      	ldrb	r3, [r7, #18]
 8013b70:	b21b      	sxth	r3, r3
 8013b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b76:	b21b      	sxth	r3, r3
 8013b78:	e000      	b.n	8013b7c <sps30_get_serial+0x50>

    return 0;
 8013b7a:	2300      	movs	r3, #0
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3718      	adds	r7, #24
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <sps30_start_measurement>:

int16_t sps30_start_measurement(void) {
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b086      	sub	sp, #24
 8013b88:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;
    uint8_t param_buf[] = SPS30_SUBCMD_MEASUREMENT_START;
 8013b8a:	f240 3301 	movw	r3, #769	; 0x301
 8013b8e:	803b      	strh	r3, [r7, #0]

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_MEASUREMENT,
 8013b90:	463a      	mov	r2, r7
 8013b92:	2300      	movs	r3, #0
 8013b94:	9302      	str	r3, [sp, #8]
 8013b96:	1d3b      	adds	r3, r7, #4
 8013b98:	9301      	str	r3, [sp, #4]
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	9300      	str	r3, [sp, #0]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	2202      	movs	r2, #2
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	f7ff fc89 	bl	80134bc <sensirion_shdlc_xcv>
 8013baa:	4603      	mov	r3, r0
                               sizeof(param_buf), param_buf, 0, &header,
                               (uint8_t*)NULL);
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}

08013bb4 <sps30_stop_measurement>:

int16_t sps30_stop_measurement(void) {
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b086      	sub	sp, #24
 8013bb8:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_STOP_MEASUREMENT, 0,
 8013bba:	2300      	movs	r3, #0
 8013bbc:	9302      	str	r3, [sp, #8]
 8013bbe:	1d3b      	adds	r3, r7, #4
 8013bc0:	9301      	str	r3, [sp, #4]
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	2200      	movs	r2, #0
 8013bca:	2101      	movs	r1, #1
 8013bcc:	2000      	movs	r0, #0
 8013bce:	f7ff fc75 	bl	80134bc <sensirion_shdlc_xcv>
 8013bd2:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3708      	adds	r7, #8
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}

08013bdc <sps30_read_measurement>:

int16_t sps30_read_measurement(struct sps30_measurement* measurement) {
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b092      	sub	sp, #72	; 0x48
 8013be0:	af04      	add	r7, sp, #16
 8013be2:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[10][4];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_MEASUREMENT, 0,
 8013be4:	f107 0308 	add.w	r3, r7, #8
 8013be8:	9302      	str	r3, [sp, #8]
 8013bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	2328      	movs	r3, #40	; 0x28
 8013bf2:	9300      	str	r3, [sp, #0]
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	2103      	movs	r1, #3
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	f7ff fc5e 	bl	80134bc <sensirion_shdlc_xcv>
 8013c00:	4603      	mov	r3, r0
 8013c02:	86fb      	strh	r3, [r7, #54]	; 0x36
                                (uint8_t*)NULL, sizeof(data), &header,
                                (uint8_t*)data);
    if (error) {
 8013c04:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <sps30_read_measurement+0x36>
        return error;
 8013c0c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8013c10:	e07f      	b.n	8013d12 <sps30_read_measurement+0x136>
    }

    if (header.data_len != sizeof(data)) {
 8013c12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013c16:	2b28      	cmp	r3, #40	; 0x28
 8013c18:	d002      	beq.n	8013c20 <sps30_read_measurement+0x44>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8013c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c1e:	e078      	b.n	8013d12 <sps30_read_measurement+0x136>
    }

    measurement->mc_1p0 = sensirion_bytes_to_float(data[0]);
 8013c20:	f107 0308 	add.w	r3, r7, #8
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7ff fba6 	bl	8013376 <sensirion_bytes_to_float>
 8013c2a:	eef0 7a40 	vmov.f32	s15, s0
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	edc3 7a00 	vstr	s15, [r3]
    measurement->mc_2p5 = sensirion_bytes_to_float(data[1]);
 8013c34:	f107 0308 	add.w	r3, r7, #8
 8013c38:	3304      	adds	r3, #4
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7ff fb9b 	bl	8013376 <sensirion_bytes_to_float>
 8013c40:	eef0 7a40 	vmov.f32	s15, s0
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	edc3 7a01 	vstr	s15, [r3, #4]
    measurement->mc_4p0 = sensirion_bytes_to_float(data[2]);
 8013c4a:	f107 0308 	add.w	r3, r7, #8
 8013c4e:	3308      	adds	r3, #8
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7ff fb90 	bl	8013376 <sensirion_bytes_to_float>
 8013c56:	eef0 7a40 	vmov.f32	s15, s0
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	edc3 7a02 	vstr	s15, [r3, #8]
    measurement->mc_10p0 = sensirion_bytes_to_float(data[3]);
 8013c60:	f107 0308 	add.w	r3, r7, #8
 8013c64:	330c      	adds	r3, #12
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7ff fb85 	bl	8013376 <sensirion_bytes_to_float>
 8013c6c:	eef0 7a40 	vmov.f32	s15, s0
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	edc3 7a03 	vstr	s15, [r3, #12]
    measurement->nc_0p5 = sensirion_bytes_to_float(data[4]);
 8013c76:	f107 0308 	add.w	r3, r7, #8
 8013c7a:	3310      	adds	r3, #16
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7ff fb7a 	bl	8013376 <sensirion_bytes_to_float>
 8013c82:	eef0 7a40 	vmov.f32	s15, s0
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	edc3 7a04 	vstr	s15, [r3, #16]
    measurement->nc_1p0 = sensirion_bytes_to_float(data[5]);
 8013c8c:	f107 0308 	add.w	r3, r7, #8
 8013c90:	3314      	adds	r3, #20
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7ff fb6f 	bl	8013376 <sensirion_bytes_to_float>
 8013c98:	eef0 7a40 	vmov.f32	s15, s0
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	edc3 7a05 	vstr	s15, [r3, #20]
    measurement->nc_2p5 = sensirion_bytes_to_float(data[6]);
 8013ca2:	f107 0308 	add.w	r3, r7, #8
 8013ca6:	3318      	adds	r3, #24
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7ff fb64 	bl	8013376 <sensirion_bytes_to_float>
 8013cae:	eef0 7a40 	vmov.f32	s15, s0
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	edc3 7a06 	vstr	s15, [r3, #24]
    measurement->nc_4p0 = sensirion_bytes_to_float(data[7]);
 8013cb8:	f107 0308 	add.w	r3, r7, #8
 8013cbc:	331c      	adds	r3, #28
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7ff fb59 	bl	8013376 <sensirion_bytes_to_float>
 8013cc4:	eef0 7a40 	vmov.f32	s15, s0
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	edc3 7a07 	vstr	s15, [r3, #28]
    measurement->nc_10p0 = sensirion_bytes_to_float(data[8]);
 8013cce:	f107 0308 	add.w	r3, r7, #8
 8013cd2:	3320      	adds	r3, #32
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7ff fb4e 	bl	8013376 <sensirion_bytes_to_float>
 8013cda:	eef0 7a40 	vmov.f32	s15, s0
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	edc3 7a08 	vstr	s15, [r3, #32]
    measurement->typical_particle_size = sensirion_bytes_to_float(data[9]);
 8013ce4:	f107 0308 	add.w	r3, r7, #8
 8013ce8:	3324      	adds	r3, #36	; 0x24
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7ff fb43 	bl	8013376 <sensirion_bytes_to_float>
 8013cf0:	eef0 7a40 	vmov.f32	s15, s0
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    if (header.state) {
 8013cfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d006      	beq.n	8013d10 <sps30_read_measurement+0x134>
        return SPS30_ERR_STATE(header.state);
 8013d02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013d06:	b21b      	sxth	r3, r3
 8013d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d0c:	b21b      	sxth	r3, r3
 8013d0e:	e000      	b.n	8013d12 <sps30_read_measurement+0x136>
    }

    return 0;
 8013d10:	2300      	movs	r3, #0
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3738      	adds	r7, #56	; 0x38
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}

08013d1a <sps30_start_manual_fan_cleaning>:
int16_t sps30_set_fan_auto_cleaning_interval_days(uint8_t interval_days) {
    return sps30_set_fan_auto_cleaning_interval((uint32_t)interval_days * 24 *
                                                60 * 60);
}

int16_t sps30_start_manual_fan_cleaning(void) {
 8013d1a:	b580      	push	{r7, lr}
 8013d1c:	b086      	sub	sp, #24
 8013d1e:	af04      	add	r7, sp, #16
    struct sensirion_shdlc_rx_header header;

    return sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_START_FAN_CLEANING, 0,
 8013d20:	2300      	movs	r3, #0
 8013d22:	9302      	str	r3, [sp, #8]
 8013d24:	1d3b      	adds	r3, r7, #4
 8013d26:	9301      	str	r3, [sp, #4]
 8013d28:	2300      	movs	r3, #0
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	2200      	movs	r2, #0
 8013d30:	2156      	movs	r1, #86	; 0x56
 8013d32:	2000      	movs	r0, #0
 8013d34:	f7ff fbc2 	bl	80134bc <sensirion_shdlc_xcv>
 8013d38:	4603      	mov	r3, r0
                               (uint8_t*)NULL, 0, &header, (uint8_t*)NULL);
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3708      	adds	r7, #8
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}

08013d42 <sps30_read_version>:

int16_t
sps30_read_version(struct sps30_version_information* version_information) {
 8013d42:	b580      	push	{r7, lr}
 8013d44:	b08a      	sub	sp, #40	; 0x28
 8013d46:	af04      	add	r7, sp, #16
 8013d48:	6078      	str	r0, [r7, #4]
    struct sensirion_shdlc_rx_header header;
    int16_t error;
    uint8_t data[7];

    error = sensirion_shdlc_xcv(SPS30_ADDR, SPS30_CMD_READ_VERSION, 0,
 8013d4a:	f107 0308 	add.w	r3, r7, #8
 8013d4e:	9302      	str	r3, [sp, #8]
 8013d50:	f107 0310 	add.w	r3, r7, #16
 8013d54:	9301      	str	r3, [sp, #4]
 8013d56:	2307      	movs	r3, #7
 8013d58:	9300      	str	r3, [sp, #0]
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	21d1      	movs	r1, #209	; 0xd1
 8013d60:	2000      	movs	r0, #0
 8013d62:	f7ff fbab 	bl	80134bc <sensirion_shdlc_xcv>
 8013d66:	4603      	mov	r3, r0
 8013d68:	82fb      	strh	r3, [r7, #22]
                                (uint8_t*)NULL, sizeof(data), &header, data);
    if (error) {
 8013d6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d002      	beq.n	8013d78 <sps30_read_version+0x36>
        return error;
 8013d72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013d76:	e01f      	b.n	8013db8 <sps30_read_version+0x76>
    }

    if (header.data_len != sizeof(data)) {
 8013d78:	7cfb      	ldrb	r3, [r7, #19]
 8013d7a:	2b07      	cmp	r3, #7
 8013d7c:	d002      	beq.n	8013d84 <sps30_read_version+0x42>
        return SPS30_ERR_NOT_ENOUGH_DATA;
 8013d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d82:	e019      	b.n	8013db8 <sps30_read_version+0x76>
    }

    if (header.state) {
 8013d84:	7cbb      	ldrb	r3, [r7, #18]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d005      	beq.n	8013d96 <sps30_read_version+0x54>
        return SPS30_ERR_STATE(header.state);
 8013d8a:	7cbb      	ldrb	r3, [r7, #18]
 8013d8c:	b21b      	sxth	r3, r3
 8013d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d92:	b21b      	sxth	r3, r3
 8013d94:	e010      	b.n	8013db8 <sps30_read_version+0x76>
    }

    version_information->firmware_major = data[0];
 8013d96:	7a3a      	ldrb	r2, [r7, #8]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	701a      	strb	r2, [r3, #0]
    version_information->firmware_minor = data[1];
 8013d9c:	7a7a      	ldrb	r2, [r7, #9]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	705a      	strb	r2, [r3, #1]
    version_information->hardware_revision = data[3];
 8013da2:	7afa      	ldrb	r2, [r7, #11]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	709a      	strb	r2, [r3, #2]
    version_information->shdlc_major = data[5];
 8013da8:	7b7a      	ldrb	r2, [r7, #13]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	70da      	strb	r2, [r3, #3]
    version_information->shdlc_minor = data[6];
 8013dae:	7bba      	ldrb	r2, [r7, #14]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	711a      	strb	r2, [r3, #4]

    return error;
 8013db4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3718      	adds	r7, #24
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b084      	sub	sp, #16
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	460b      	mov	r3, r1
 8013dca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013dcc:	f640 0074 	movw	r0, #2164	; 0x874
 8013dd0:	f007 fde0 	bl	801b994 <USBD_static_malloc>
 8013dd4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d109      	bne.n	8013df0 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	32b0      	adds	r2, #176	; 0xb0
 8013de6:	2100      	movs	r1, #0
 8013de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013dec:	2302      	movs	r3, #2
 8013dee:	e06e      	b.n	8013ece <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	32b0      	adds	r2, #176	; 0xb0
 8013dfa:	68f9      	ldr	r1, [r7, #12]
 8013dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	32b0      	adds	r2, #176	; 0xb0
 8013e0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	7c1b      	ldrb	r3, [r3, #16]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d12b      	bne.n	8013e74 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013e1c:	4b2e      	ldr	r3, [pc, #184]	; (8013ed8 <USBD_MSC_Init+0x118>)
 8013e1e:	7819      	ldrb	r1, [r3, #0]
 8013e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e24:	2202      	movs	r2, #2
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f007 fc71 	bl	801b70e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8013e2c:	4b2a      	ldr	r3, [pc, #168]	; (8013ed8 <USBD_MSC_Init+0x118>)
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	f003 020f 	and.w	r2, r3, #15
 8013e34:	6879      	ldr	r1, [r7, #4]
 8013e36:	4613      	mov	r3, r2
 8013e38:	009b      	lsls	r3, r3, #2
 8013e3a:	4413      	add	r3, r2
 8013e3c:	009b      	lsls	r3, r3, #2
 8013e3e:	440b      	add	r3, r1
 8013e40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013e44:	2201      	movs	r2, #1
 8013e46:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013e48:	4b24      	ldr	r3, [pc, #144]	; (8013edc <USBD_MSC_Init+0x11c>)
 8013e4a:	7819      	ldrb	r1, [r3, #0]
 8013e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e50:	2202      	movs	r2, #2
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f007 fc5b 	bl	801b70e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013e58:	4b20      	ldr	r3, [pc, #128]	; (8013edc <USBD_MSC_Init+0x11c>)
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	f003 020f 	and.w	r2, r3, #15
 8013e60:	6879      	ldr	r1, [r7, #4]
 8013e62:	4613      	mov	r3, r2
 8013e64:	009b      	lsls	r3, r3, #2
 8013e66:	4413      	add	r3, r2
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	440b      	add	r3, r1
 8013e6c:	3324      	adds	r3, #36	; 0x24
 8013e6e:	2201      	movs	r2, #1
 8013e70:	801a      	strh	r2, [r3, #0]
 8013e72:	e028      	b.n	8013ec6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013e74:	4b18      	ldr	r3, [pc, #96]	; (8013ed8 <USBD_MSC_Init+0x118>)
 8013e76:	7819      	ldrb	r1, [r3, #0]
 8013e78:	2340      	movs	r3, #64	; 0x40
 8013e7a:	2202      	movs	r2, #2
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f007 fc46 	bl	801b70e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8013e82:	4b15      	ldr	r3, [pc, #84]	; (8013ed8 <USBD_MSC_Init+0x118>)
 8013e84:	781b      	ldrb	r3, [r3, #0]
 8013e86:	f003 020f 	and.w	r2, r3, #15
 8013e8a:	6879      	ldr	r1, [r7, #4]
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	009b      	lsls	r3, r3, #2
 8013e90:	4413      	add	r3, r2
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	440b      	add	r3, r1
 8013e96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013e9e:	4b0f      	ldr	r3, [pc, #60]	; (8013edc <USBD_MSC_Init+0x11c>)
 8013ea0:	7819      	ldrb	r1, [r3, #0]
 8013ea2:	2340      	movs	r3, #64	; 0x40
 8013ea4:	2202      	movs	r2, #2
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f007 fc31 	bl	801b70e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8013eac:	4b0b      	ldr	r3, [pc, #44]	; (8013edc <USBD_MSC_Init+0x11c>)
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	f003 020f 	and.w	r2, r3, #15
 8013eb4:	6879      	ldr	r1, [r7, #4]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	009b      	lsls	r3, r3, #2
 8013eba:	4413      	add	r3, r2
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	440b      	add	r3, r1
 8013ec0:	3324      	adds	r3, #36	; 0x24
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f000 fa2c 	bl	8014324 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013ecc:	2300      	movs	r3, #0
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3710      	adds	r7, #16
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	200000af 	.word	0x200000af
 8013edc:	200000ae 	.word	0x200000ae

08013ee0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	460b      	mov	r3, r1
 8013eea:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8013eec:	4b26      	ldr	r3, [pc, #152]	; (8013f88 <USBD_MSC_DeInit+0xa8>)
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f007 fc31 	bl	801b75a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8013ef8:	4b23      	ldr	r3, [pc, #140]	; (8013f88 <USBD_MSC_DeInit+0xa8>)
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	f003 020f 	and.w	r2, r3, #15
 8013f00:	6879      	ldr	r1, [r7, #4]
 8013f02:	4613      	mov	r3, r2
 8013f04:	009b      	lsls	r3, r3, #2
 8013f06:	4413      	add	r3, r2
 8013f08:	009b      	lsls	r3, r3, #2
 8013f0a:	440b      	add	r3, r1
 8013f0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013f10:	2200      	movs	r2, #0
 8013f12:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8013f14:	4b1d      	ldr	r3, [pc, #116]	; (8013f8c <USBD_MSC_DeInit+0xac>)
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	4619      	mov	r1, r3
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f007 fc1d 	bl	801b75a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8013f20:	4b1a      	ldr	r3, [pc, #104]	; (8013f8c <USBD_MSC_DeInit+0xac>)
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	f003 020f 	and.w	r2, r3, #15
 8013f28:	6879      	ldr	r1, [r7, #4]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	009b      	lsls	r3, r3, #2
 8013f2e:	4413      	add	r3, r2
 8013f30:	009b      	lsls	r3, r3, #2
 8013f32:	440b      	add	r3, r1
 8013f34:	3324      	adds	r3, #36	; 0x24
 8013f36:	2200      	movs	r2, #0
 8013f38:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	32b0      	adds	r2, #176	; 0xb0
 8013f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d018      	beq.n	8013f7e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f000 fa67 	bl	8014420 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	32b0      	adds	r2, #176	; 0xb0
 8013f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f60:	4618      	mov	r0, r3
 8013f62:	f007 fd25 	bl	801b9b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	32b0      	adds	r2, #176	; 0xb0
 8013f70:	2100      	movs	r1, #0
 8013f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013f7e:	2300      	movs	r3, #0
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3708      	adds	r7, #8
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}
 8013f88:	200000af 	.word	0x200000af
 8013f8c:	200000ae 	.word	0x200000ae

08013f90 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b086      	sub	sp, #24
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
 8013f98:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	32b0      	adds	r2, #176	; 0xb0
 8013fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fa8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013faa:	2300      	movs	r3, #0
 8013fac:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d101      	bne.n	8013fbc <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013fb8:	2303      	movs	r3, #3
 8013fba:	e0e1      	b.n	8014180 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	781b      	ldrb	r3, [r3, #0]
 8013fc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d053      	beq.n	8014070 <USBD_MSC_Setup+0xe0>
 8013fc8:	2b20      	cmp	r3, #32
 8013fca:	f040 80d1 	bne.w	8014170 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	785b      	ldrb	r3, [r3, #1]
 8013fd2:	2bfe      	cmp	r3, #254	; 0xfe
 8013fd4:	d002      	beq.n	8013fdc <USBD_MSC_Setup+0x4c>
 8013fd6:	2bff      	cmp	r3, #255	; 0xff
 8013fd8:	d02a      	beq.n	8014030 <USBD_MSC_Setup+0xa0>
 8013fda:	e041      	b.n	8014060 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	885b      	ldrh	r3, [r3, #2]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d11e      	bne.n	8014022 <USBD_MSC_Setup+0x92>
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	88db      	ldrh	r3, [r3, #6]
 8013fe8:	2b01      	cmp	r3, #1
 8013fea:	d11a      	bne.n	8014022 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	da15      	bge.n	8014022 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013ffc:	687a      	ldr	r2, [r7, #4]
 8013ffe:	33b0      	adds	r3, #176	; 0xb0
 8014000:	009b      	lsls	r3, r3, #2
 8014002:	4413      	add	r3, r2
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	699b      	ldr	r3, [r3, #24]
 8014008:	4798      	blx	r3
 801400a:	4603      	mov	r3, r0
 801400c:	461a      	mov	r2, r3
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	2201      	movs	r2, #1
 8014016:	4619      	mov	r1, r3
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f003 f949 	bl	80172b0 <USBD_CtlSendData>
 801401e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014020:	e025      	b.n	801406e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f003 f8d2 	bl	80171ce <USBD_CtlError>
            ret = USBD_FAIL;
 801402a:	2303      	movs	r3, #3
 801402c:	75fb      	strb	r3, [r7, #23]
          break;
 801402e:	e01e      	b.n	801406e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	885b      	ldrh	r3, [r3, #2]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d10c      	bne.n	8014052 <USBD_MSC_Setup+0xc2>
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	88db      	ldrh	r3, [r3, #6]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d108      	bne.n	8014052 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014046:	2b00      	cmp	r3, #0
 8014048:	db03      	blt.n	8014052 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f000 f9b4 	bl	80143b8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014050:	e00d      	b.n	801406e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8014052:	6839      	ldr	r1, [r7, #0]
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f003 f8ba 	bl	80171ce <USBD_CtlError>
            ret = USBD_FAIL;
 801405a:	2303      	movs	r3, #3
 801405c:	75fb      	strb	r3, [r7, #23]
          break;
 801405e:	e006      	b.n	801406e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8014060:	6839      	ldr	r1, [r7, #0]
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f003 f8b3 	bl	80171ce <USBD_CtlError>
          ret = USBD_FAIL;
 8014068:	2303      	movs	r3, #3
 801406a:	75fb      	strb	r3, [r7, #23]
          break;
 801406c:	bf00      	nop
      }
      break;
 801406e:	e086      	b.n	801417e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	785b      	ldrb	r3, [r3, #1]
 8014074:	2b0b      	cmp	r3, #11
 8014076:	d872      	bhi.n	801415e <USBD_MSC_Setup+0x1ce>
 8014078:	a201      	add	r2, pc, #4	; (adr r2, 8014080 <USBD_MSC_Setup+0xf0>)
 801407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801407e:	bf00      	nop
 8014080:	080140b1 	.word	0x080140b1
 8014084:	0801412d 	.word	0x0801412d
 8014088:	0801415f 	.word	0x0801415f
 801408c:	0801415f 	.word	0x0801415f
 8014090:	0801415f 	.word	0x0801415f
 8014094:	0801415f 	.word	0x0801415f
 8014098:	0801415f 	.word	0x0801415f
 801409c:	0801415f 	.word	0x0801415f
 80140a0:	0801415f 	.word	0x0801415f
 80140a4:	0801415f 	.word	0x0801415f
 80140a8:	080140db 	.word	0x080140db
 80140ac:	08014105 	.word	0x08014105
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140b6:	b2db      	uxtb	r3, r3
 80140b8:	2b03      	cmp	r3, #3
 80140ba:	d107      	bne.n	80140cc <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80140bc:	f107 030e 	add.w	r3, r7, #14
 80140c0:	2202      	movs	r2, #2
 80140c2:	4619      	mov	r1, r3
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f003 f8f3 	bl	80172b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80140ca:	e050      	b.n	801416e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80140cc:	6839      	ldr	r1, [r7, #0]
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f003 f87d 	bl	80171ce <USBD_CtlError>
            ret = USBD_FAIL;
 80140d4:	2303      	movs	r3, #3
 80140d6:	75fb      	strb	r3, [r7, #23]
          break;
 80140d8:	e049      	b.n	801416e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	2b03      	cmp	r3, #3
 80140e4:	d107      	bne.n	80140f6 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	3304      	adds	r3, #4
 80140ea:	2201      	movs	r2, #1
 80140ec:	4619      	mov	r1, r3
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f003 f8de 	bl	80172b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80140f4:	e03b      	b.n	801416e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80140f6:	6839      	ldr	r1, [r7, #0]
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f003 f868 	bl	80171ce <USBD_CtlError>
            ret = USBD_FAIL;
 80140fe:	2303      	movs	r3, #3
 8014100:	75fb      	strb	r3, [r7, #23]
          break;
 8014102:	e034      	b.n	801416e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801410a:	b2db      	uxtb	r3, r3
 801410c:	2b03      	cmp	r3, #3
 801410e:	d106      	bne.n	801411e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	885b      	ldrh	r3, [r3, #2]
 8014114:	b2db      	uxtb	r3, r3
 8014116:	461a      	mov	r2, r3
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801411c:	e027      	b.n	801416e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801411e:	6839      	ldr	r1, [r7, #0]
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f003 f854 	bl	80171ce <USBD_CtlError>
            ret = USBD_FAIL;
 8014126:	2303      	movs	r3, #3
 8014128:	75fb      	strb	r3, [r7, #23]
          break;
 801412a:	e020      	b.n	801416e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014132:	b2db      	uxtb	r3, r3
 8014134:	2b03      	cmp	r3, #3
 8014136:	d119      	bne.n	801416c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	885b      	ldrh	r3, [r3, #2]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d115      	bne.n	801416c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	889b      	ldrh	r3, [r3, #4]
 8014144:	b2db      	uxtb	r3, r3
 8014146:	4619      	mov	r1, r3
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f007 fb25 	bl	801b798 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	889b      	ldrh	r3, [r3, #4]
 8014152:	b2db      	uxtb	r3, r3
 8014154:	4619      	mov	r1, r3
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 fb2e 	bl	80147b8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801415c:	e006      	b.n	801416c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801415e:	6839      	ldr	r1, [r7, #0]
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f003 f834 	bl	80171ce <USBD_CtlError>
          ret = USBD_FAIL;
 8014166:	2303      	movs	r3, #3
 8014168:	75fb      	strb	r3, [r7, #23]
          break;
 801416a:	e000      	b.n	801416e <USBD_MSC_Setup+0x1de>
          break;
 801416c:	bf00      	nop
      }
      break;
 801416e:	e006      	b.n	801417e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8014170:	6839      	ldr	r1, [r7, #0]
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f003 f82b 	bl	80171ce <USBD_CtlError>
      ret = USBD_FAIL;
 8014178:	2303      	movs	r3, #3
 801417a:	75fb      	strb	r3, [r7, #23]
      break;
 801417c:	bf00      	nop
  }

  return (uint8_t)ret;
 801417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014180:	4618      	mov	r0, r3
 8014182:	3718      	adds	r7, #24
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}

08014188 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	460b      	mov	r3, r1
 8014192:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8014194:	78fb      	ldrb	r3, [r7, #3]
 8014196:	4619      	mov	r1, r3
 8014198:	6878      	ldr	r0, [r7, #4]
 801419a:	f000 f959 	bl	8014450 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801419e:	2300      	movs	r3, #0
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	3708      	adds	r7, #8
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}

080141a8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b082      	sub	sp, #8
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]
 80141b0:	460b      	mov	r3, r1
 80141b2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80141b4:	78fb      	ldrb	r3, [r7, #3]
 80141b6:	4619      	mov	r1, r3
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f000 f983 	bl	80144c4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80141be:	2300      	movs	r3, #0
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80141d0:	2181      	movs	r1, #129	; 0x81
 80141d2:	4812      	ldr	r0, [pc, #72]	; (801421c <USBD_MSC_GetHSCfgDesc+0x54>)
 80141d4:	f002 f9c3 	bl	801655e <USBD_GetEpDesc>
 80141d8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80141da:	2101      	movs	r1, #1
 80141dc:	480f      	ldr	r0, [pc, #60]	; (801421c <USBD_MSC_GetHSCfgDesc+0x54>)
 80141de:	f002 f9be 	bl	801655e <USBD_GetEpDesc>
 80141e2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d006      	beq.n	80141f8 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2200      	movs	r2, #0
 80141ee:	711a      	strb	r2, [r3, #4]
 80141f0:	2200      	movs	r2, #0
 80141f2:	f042 0202 	orr.w	r2, r2, #2
 80141f6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d006      	beq.n	801420c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	2200      	movs	r2, #0
 8014202:	711a      	strb	r2, [r3, #4]
 8014204:	2200      	movs	r2, #0
 8014206:	f042 0202 	orr.w	r2, r2, #2
 801420a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2220      	movs	r2, #32
 8014210:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8014212:	4b02      	ldr	r3, [pc, #8]	; (801421c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8014214:	4618      	mov	r0, r3
 8014216:	3710      	adds	r7, #16
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}
 801421c:	20000084 	.word	0x20000084

08014220 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8014228:	2181      	movs	r1, #129	; 0x81
 801422a:	4812      	ldr	r0, [pc, #72]	; (8014274 <USBD_MSC_GetFSCfgDesc+0x54>)
 801422c:	f002 f997 	bl	801655e <USBD_GetEpDesc>
 8014230:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8014232:	2101      	movs	r1, #1
 8014234:	480f      	ldr	r0, [pc, #60]	; (8014274 <USBD_MSC_GetFSCfgDesc+0x54>)
 8014236:	f002 f992 	bl	801655e <USBD_GetEpDesc>
 801423a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d006      	beq.n	8014250 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	2200      	movs	r2, #0
 8014246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801424a:	711a      	strb	r2, [r3, #4]
 801424c:	2200      	movs	r2, #0
 801424e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d006      	beq.n	8014264 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	2200      	movs	r2, #0
 801425a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801425e:	711a      	strb	r2, [r3, #4]
 8014260:	2200      	movs	r2, #0
 8014262:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2220      	movs	r2, #32
 8014268:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801426a:	4b02      	ldr	r3, [pc, #8]	; (8014274 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 801426c:	4618      	mov	r0, r3
 801426e:	3710      	adds	r7, #16
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	20000084 	.word	0x20000084

08014278 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8014280:	2181      	movs	r1, #129	; 0x81
 8014282:	4812      	ldr	r0, [pc, #72]	; (80142cc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8014284:	f002 f96b 	bl	801655e <USBD_GetEpDesc>
 8014288:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801428a:	2101      	movs	r1, #1
 801428c:	480f      	ldr	r0, [pc, #60]	; (80142cc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801428e:	f002 f966 	bl	801655e <USBD_GetEpDesc>
 8014292:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d006      	beq.n	80142a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	2200      	movs	r2, #0
 801429e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80142a2:	711a      	strb	r2, [r3, #4]
 80142a4:	2200      	movs	r2, #0
 80142a6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d006      	beq.n	80142bc <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	2200      	movs	r2, #0
 80142b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80142b6:	711a      	strb	r2, [r3, #4]
 80142b8:	2200      	movs	r2, #0
 80142ba:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2220      	movs	r2, #32
 80142c0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80142c2:	4b02      	ldr	r3, [pc, #8]	; (80142cc <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3710      	adds	r7, #16
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	20000084 	.word	0x20000084

080142d0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	220a      	movs	r2, #10
 80142dc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80142de:	4b03      	ldr	r3, [pc, #12]	; (80142ec <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	370c      	adds	r7, #12
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr
 80142ec:	200000a4 	.word	0x200000a4

080142f0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80142f0:	b480      	push	{r7}
 80142f2:	b083      	sub	sp, #12
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d101      	bne.n	8014304 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014300:	2303      	movs	r3, #3
 8014302:	e009      	b.n	8014318 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801430a:	687a      	ldr	r2, [r7, #4]
 801430c:	33b0      	adds	r3, #176	; 0xb0
 801430e:	009b      	lsls	r3, r3, #2
 8014310:	4413      	add	r3, r2
 8014312:	683a      	ldr	r2, [r7, #0]
 8014314:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014316:	2300      	movs	r3, #0
}
 8014318:	4618      	mov	r0, r3
 801431a:	370c      	adds	r7, #12
 801431c:	46bd      	mov	sp, r7
 801431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014322:	4770      	bx	lr

08014324 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	32b0      	adds	r2, #176	; 0xb0
 8014336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801433a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d032      	beq.n	80143a8 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2200      	movs	r2, #0
 8014346:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2200      	movs	r2, #0
 801434c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	2200      	movs	r2, #0
 8014352:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
  hmsc->scsi_sense_head = 0U;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	2200      	movs	r2, #0
 801435a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	2200      	movs	r2, #0
 8014362:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801436c:	687a      	ldr	r2, [r7, #4]
 801436e:	33b0      	adds	r3, #176	; 0xb0
 8014370:	009b      	lsls	r3, r3, #2
 8014372:	4413      	add	r3, r2
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	2000      	movs	r0, #0
 801437a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801437c:	4b0c      	ldr	r3, [pc, #48]	; (80143b0 <MSC_BOT_Init+0x8c>)
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	4619      	mov	r1, r3
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f007 fa08 	bl	801b798 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8014388:	4b0a      	ldr	r3, [pc, #40]	; (80143b4 <MSC_BOT_Init+0x90>)
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	4619      	mov	r1, r3
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f007 fa02 	bl	801b798 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8014394:	4b06      	ldr	r3, [pc, #24]	; (80143b0 <MSC_BOT_Init+0x8c>)
 8014396:	7819      	ldrb	r1, [r3, #0]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 801439e:	231f      	movs	r3, #31
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f007 fac2 	bl	801b92a <USBD_LL_PrepareReceive>
 80143a6:	e000      	b.n	80143aa <MSC_BOT_Init+0x86>
    return;
 80143a8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80143aa:	3710      	adds	r7, #16
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}
 80143b0:	200000af 	.word	0x200000af
 80143b4:	200000ae 	.word	0x200000ae

080143b8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b084      	sub	sp, #16
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	32b0      	adds	r2, #176	; 0xb0
 80143ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143ce:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d01b      	beq.n	801440e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2200      	movs	r2, #0
 80143da:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	2201      	movs	r2, #1
 80143e0:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80143e2:	4b0d      	ldr	r3, [pc, #52]	; (8014418 <MSC_BOT_Reset+0x60>)
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	4619      	mov	r1, r3
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f007 fa13 	bl	801b814 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80143ee:	4b0b      	ldr	r3, [pc, #44]	; (801441c <MSC_BOT_Reset+0x64>)
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	4619      	mov	r1, r3
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f007 fa0d 	bl	801b814 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80143fa:	4b08      	ldr	r3, [pc, #32]	; (801441c <MSC_BOT_Reset+0x64>)
 80143fc:	7819      	ldrb	r1, [r3, #0]
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8014404:	231f      	movs	r3, #31
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f007 fa8f 	bl	801b92a <USBD_LL_PrepareReceive>
 801440c:	e000      	b.n	8014410 <MSC_BOT_Reset+0x58>
    return;
 801440e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014410:	3710      	adds	r7, #16
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	200000ae 	.word	0x200000ae
 801441c:	200000af 	.word	0x200000af

08014420 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8014420:	b480      	push	{r7}
 8014422:	b085      	sub	sp, #20
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	32b0      	adds	r2, #176	; 0xb0
 8014432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014436:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d002      	beq.n	8014444 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	2200      	movs	r2, #0
 8014442:	721a      	strb	r2, [r3, #8]
  }
}
 8014444:	bf00      	nop
 8014446:	3714      	adds	r7, #20
 8014448:	46bd      	mov	sp, r7
 801444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444e:	4770      	bx	lr

08014450 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	460b      	mov	r3, r1
 801445a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	32b0      	adds	r2, #176	; 0xb0
 8014466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801446a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d020      	beq.n	80144b4 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	7a1b      	ldrb	r3, [r3, #8]
 8014476:	2b02      	cmp	r3, #2
 8014478:	d005      	beq.n	8014486 <MSC_BOT_DataIn+0x36>
 801447a:	2b02      	cmp	r3, #2
 801447c:	db1c      	blt.n	80144b8 <MSC_BOT_DataIn+0x68>
 801447e:	3b03      	subs	r3, #3
 8014480:	2b01      	cmp	r3, #1
 8014482:	d819      	bhi.n	80144b8 <MSC_BOT_DataIn+0x68>
 8014484:	e011      	b.n	80144aa <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8014492:	461a      	mov	r2, r3
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f000 f9c9 	bl	801482c <SCSI_ProcessCmd>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	da0d      	bge.n	80144bc <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80144a0:	2101      	movs	r1, #1
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f000 f90c 	bl	80146c0 <MSC_BOT_SendCSW>
      }
      break;
 80144a8:	e008      	b.n	80144bc <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80144aa:	2100      	movs	r1, #0
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 f907 	bl	80146c0 <MSC_BOT_SendCSW>
      break;
 80144b2:	e004      	b.n	80144be <MSC_BOT_DataIn+0x6e>
    return;
 80144b4:	bf00      	nop
 80144b6:	e002      	b.n	80144be <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80144b8:	bf00      	nop
 80144ba:	e000      	b.n	80144be <MSC_BOT_DataIn+0x6e>
      break;
 80144bc:	bf00      	nop
  }
}
 80144be:	3710      	adds	r7, #16
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}

080144c4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	460b      	mov	r3, r1
 80144ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	32b0      	adds	r2, #176	; 0xb0
 80144da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144de:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d01c      	beq.n	8014520 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	7a1b      	ldrb	r3, [r3, #8]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d002      	beq.n	80144f4 <MSC_BOT_DataOut+0x30>
 80144ee:	2b01      	cmp	r3, #1
 80144f0:	d004      	beq.n	80144fc <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80144f2:	e018      	b.n	8014526 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f000 f819 	bl	801452c <MSC_BOT_CBW_Decode>
      break;
 80144fa:	e014      	b.n	8014526 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 8014508:	461a      	mov	r2, r3
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f000 f98e 	bl	801482c <SCSI_ProcessCmd>
 8014510:	4603      	mov	r3, r0
 8014512:	2b00      	cmp	r3, #0
 8014514:	da06      	bge.n	8014524 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8014516:	2101      	movs	r1, #1
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f000 f8d1 	bl	80146c0 <MSC_BOT_SendCSW>
      break;
 801451e:	e001      	b.n	8014524 <MSC_BOT_DataOut+0x60>
    return;
 8014520:	bf00      	nop
 8014522:	e000      	b.n	8014526 <MSC_BOT_DataOut+0x62>
      break;
 8014524:	bf00      	nop
  }
}
 8014526:	3710      	adds	r7, #16
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}

0801452c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	32b0      	adds	r2, #176	; 0xb0
 801453e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014542:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d079      	beq.n	801463e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8014562:	4b3a      	ldr	r3, [pc, #232]	; (801464c <MSC_BOT_CBW_Decode+0x120>)
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	4619      	mov	r1, r3
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f007 f9ff 	bl	801b96c <USBD_LL_GetRxDataSize>
 801456e:	4603      	mov	r3, r0
 8014570:	2b1f      	cmp	r3, #31
 8014572:	d114      	bne.n	801459e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f8d3 3810 	ldr.w	r3, [r3, #2064]	; 0x810
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801457a:	4a35      	ldr	r2, [pc, #212]	; (8014650 <MSC_BOT_CBW_Decode+0x124>)
 801457c:	4293      	cmp	r3, r2
 801457e:	d10e      	bne.n	801459e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f893 381d 	ldrb.w	r3, [r3, #2077]	; 0x81d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014586:	2b01      	cmp	r3, #1
 8014588:	d809      	bhi.n	801459e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
 8014590:	2b00      	cmp	r3, #0
 8014592:	d004      	beq.n	801459e <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	f893 381e 	ldrb.w	r3, [r3, #2078]	; 0x81e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801459a:	2b10      	cmp	r3, #16
 801459c:	d90e      	bls.n	80145bc <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80145a4:	2320      	movs	r3, #32
 80145a6:	2205      	movs	r2, #5
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f000 fe2b 	bl	8015204 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	2202      	movs	r2, #2
 80145b2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80145b4:	6878      	ldr	r0, [r7, #4]
 80145b6:	f000 f8bd 	bl	8014734 <MSC_BOT_Abort>
 80145ba:	e043      	b.n	8014644 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	f603 031f 	addw	r3, r3, #2079	; 0x81f
 80145c8:	461a      	mov	r2, r3
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f000 f92e 	bl	801482c <SCSI_ProcessCmd>
 80145d0:	4603      	mov	r3, r0
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	da0c      	bge.n	80145f0 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	7a1b      	ldrb	r3, [r3, #8]
 80145da:	2b05      	cmp	r3, #5
 80145dc:	d104      	bne.n	80145e8 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80145de:	2101      	movs	r1, #1
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f000 f86d 	bl	80146c0 <MSC_BOT_SendCSW>
 80145e6:	e02d      	b.n	8014644 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 f8a3 	bl	8014734 <MSC_BOT_Abort>
 80145ee:	e029      	b.n	8014644 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	7a1b      	ldrb	r3, [r3, #8]
 80145f4:	2b02      	cmp	r3, #2
 80145f6:	d024      	beq.n	8014642 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d020      	beq.n	8014642 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8014604:	2b03      	cmp	r3, #3
 8014606:	d01c      	beq.n	8014642 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d009      	beq.n	8014624 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	f103 0110 	add.w	r1, r3, #16
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	68db      	ldr	r3, [r3, #12]
 801461a:	461a      	mov	r2, r3
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f000 f819 	bl	8014654 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8014622:	e00f      	b.n	8014644 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d104      	bne.n	8014636 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801462c:	2100      	movs	r1, #0
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f000 f846 	bl	80146c0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8014634:	e006      	b.n	8014644 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f000 f87c 	bl	8014734 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 801463c:	e002      	b.n	8014644 <MSC_BOT_CBW_Decode+0x118>
    return;
 801463e:	bf00      	nop
 8014640:	e000      	b.n	8014644 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8014642:	bf00      	nop
    }
  }
}
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	200000af 	.word	0x200000af
 8014650:	43425355 	.word	0x43425355

08014654 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b086      	sub	sp, #24
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	32b0      	adds	r2, #176	; 0xb0
 801466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801466e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d01e      	beq.n	80146b4 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	4293      	cmp	r3, r2
 8014680:	bf28      	it	cs
 8014682:	4613      	movcs	r3, r2
 8014684:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	1ad2      	subs	r2, r2, r3
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	2200      	movs	r2, #0
 801469a:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	2204      	movs	r2, #4
 80146a2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80146a4:	4b05      	ldr	r3, [pc, #20]	; (80146bc <MSC_BOT_SendData+0x68>)
 80146a6:	7819      	ldrb	r1, [r3, #0]
 80146a8:	693b      	ldr	r3, [r7, #16]
 80146aa:	68ba      	ldr	r2, [r7, #8]
 80146ac:	68f8      	ldr	r0, [r7, #12]
 80146ae:	f007 f91b 	bl	801b8e8 <USBD_LL_Transmit>
 80146b2:	e000      	b.n	80146b6 <MSC_BOT_SendData+0x62>
    return;
 80146b4:	bf00      	nop
}
 80146b6:	3718      	adds	r7, #24
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}
 80146bc:	200000ae 	.word	0x200000ae

080146c0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b084      	sub	sp, #16
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	460b      	mov	r3, r1
 80146ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	32b0      	adds	r2, #176	; 0xb0
 80146d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146da:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d01d      	beq.n	801471e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	4a10      	ldr	r2, [pc, #64]	; (8014728 <MSC_BOT_SendCSW+0x68>)
 80146e6:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
  hmsc->csw.bStatus = CSW_Status;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	78fa      	ldrb	r2, [r7, #3]
 80146ee:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
  hmsc->bot_state = USBD_BOT_IDLE;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2200      	movs	r2, #0
 80146f6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80146f8:	4b0c      	ldr	r3, [pc, #48]	; (801472c <MSC_BOT_SendCSW+0x6c>)
 80146fa:	7819      	ldrb	r1, [r3, #0]
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 8014702:	230d      	movs	r3, #13
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f007 f8ef 	bl	801b8e8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801470a:	4b09      	ldr	r3, [pc, #36]	; (8014730 <MSC_BOT_SendCSW+0x70>)
 801470c:	7819      	ldrb	r1, [r3, #0]
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8014714:	231f      	movs	r3, #31
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f007 f907 	bl	801b92a <USBD_LL_PrepareReceive>
 801471c:	e000      	b.n	8014720 <MSC_BOT_SendCSW+0x60>
    return;
 801471e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8014720:	3710      	adds	r7, #16
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	53425355 	.word	0x53425355
 801472c:	200000ae 	.word	0x200000ae
 8014730:	200000af 	.word	0x200000af

08014734 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	32b0      	adds	r2, #176	; 0xb0
 8014746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801474a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d02a      	beq.n	80147a8 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8014758:	2b00      	cmp	r3, #0
 801475a:	d10e      	bne.n	801477a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
  if ((hmsc->cbw.bmFlags == 0U) &&
 8014762:	2b00      	cmp	r3, #0
 8014764:	d009      	beq.n	801477a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801476a:	2b00      	cmp	r3, #0
 801476c:	d105      	bne.n	801477a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801476e:	4b10      	ldr	r3, [pc, #64]	; (80147b0 <MSC_BOT_Abort+0x7c>)
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	4619      	mov	r1, r3
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f007 f82e 	bl	801b7d6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801477a:	4b0e      	ldr	r3, [pc, #56]	; (80147b4 <MSC_BOT_Abort+0x80>)
 801477c:	781b      	ldrb	r3, [r3, #0]
 801477e:	4619      	mov	r1, r3
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f007 f828 	bl	801b7d6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	7a5b      	ldrb	r3, [r3, #9]
 801478a:	2b02      	cmp	r3, #2
 801478c:	d10d      	bne.n	80147aa <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801478e:	4b09      	ldr	r3, [pc, #36]	; (80147b4 <MSC_BOT_Abort+0x80>)
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	4619      	mov	r1, r3
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f007 f81e 	bl	801b7d6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801479a:	4b05      	ldr	r3, [pc, #20]	; (80147b0 <MSC_BOT_Abort+0x7c>)
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	4619      	mov	r1, r3
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f007 f818 	bl	801b7d6 <USBD_LL_StallEP>
 80147a6:	e000      	b.n	80147aa <MSC_BOT_Abort+0x76>
    return;
 80147a8:	bf00      	nop
  }
}
 80147aa:	3710      	adds	r7, #16
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	200000af 	.word	0x200000af
 80147b4:	200000ae 	.word	0x200000ae

080147b8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b084      	sub	sp, #16
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	460b      	mov	r3, r1
 80147c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	32b0      	adds	r2, #176	; 0xb0
 80147ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d01d      	beq.n	8014816 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	7a5b      	ldrb	r3, [r3, #9]
 80147de:	2b02      	cmp	r3, #2
 80147e0:	d10c      	bne.n	80147fc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80147e2:	4b10      	ldr	r3, [pc, #64]	; (8014824 <MSC_BOT_CplClrFeature+0x6c>)
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	4619      	mov	r1, r3
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f006 fff4 	bl	801b7d6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80147ee:	4b0e      	ldr	r3, [pc, #56]	; (8014828 <MSC_BOT_CplClrFeature+0x70>)
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	4619      	mov	r1, r3
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f006 ffee 	bl	801b7d6 <USBD_LL_StallEP>
 80147fa:	e00f      	b.n	801481c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80147fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014800:	2b00      	cmp	r3, #0
 8014802:	da0a      	bge.n	801481a <MSC_BOT_CplClrFeature+0x62>
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	7a5b      	ldrb	r3, [r3, #9]
 8014808:	2b01      	cmp	r3, #1
 801480a:	d006      	beq.n	801481a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801480c:	2101      	movs	r1, #1
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f7ff ff56 	bl	80146c0 <MSC_BOT_SendCSW>
 8014814:	e002      	b.n	801481c <MSC_BOT_CplClrFeature+0x64>
    return;
 8014816:	bf00      	nop
 8014818:	e000      	b.n	801481c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 801481a:	bf00      	nop
  }
}
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	200000ae 	.word	0x200000ae
 8014828:	200000af 	.word	0x200000af

0801482c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b086      	sub	sp, #24
 8014830:	af00      	add	r7, sp, #0
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	460b      	mov	r3, r1
 8014836:	607a      	str	r2, [r7, #4]
 8014838:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	32b0      	adds	r2, #176	; 0xb0
 8014844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014848:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d102      	bne.n	8014856 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8014850:	f04f 33ff 	mov.w	r3, #4294967295
 8014854:	e168      	b.n	8014b28 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	781b      	ldrb	r3, [r3, #0]
 801485a:	2baa      	cmp	r3, #170	; 0xaa
 801485c:	f000 8144 	beq.w	8014ae8 <SCSI_ProcessCmd+0x2bc>
 8014860:	2baa      	cmp	r3, #170	; 0xaa
 8014862:	f300 8153 	bgt.w	8014b0c <SCSI_ProcessCmd+0x2e0>
 8014866:	2ba8      	cmp	r3, #168	; 0xa8
 8014868:	f000 812c 	beq.w	8014ac4 <SCSI_ProcessCmd+0x298>
 801486c:	2ba8      	cmp	r3, #168	; 0xa8
 801486e:	f300 814d 	bgt.w	8014b0c <SCSI_ProcessCmd+0x2e0>
 8014872:	2b5a      	cmp	r3, #90	; 0x5a
 8014874:	f300 80c0 	bgt.w	80149f8 <SCSI_ProcessCmd+0x1cc>
 8014878:	2b00      	cmp	r3, #0
 801487a:	f2c0 8147 	blt.w	8014b0c <SCSI_ProcessCmd+0x2e0>
 801487e:	2b5a      	cmp	r3, #90	; 0x5a
 8014880:	f200 8144 	bhi.w	8014b0c <SCSI_ProcessCmd+0x2e0>
 8014884:	a201      	add	r2, pc, #4	; (adr r2, 801488c <SCSI_ProcessCmd+0x60>)
 8014886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801488a:	bf00      	nop
 801488c:	080149ff 	.word	0x080149ff
 8014890:	08014b0d 	.word	0x08014b0d
 8014894:	08014b0d 	.word	0x08014b0d
 8014898:	08014a11 	.word	0x08014a11
 801489c:	08014b0d 	.word	0x08014b0d
 80148a0:	08014b0d 	.word	0x08014b0d
 80148a4:	08014b0d 	.word	0x08014b0d
 80148a8:	08014b0d 	.word	0x08014b0d
 80148ac:	08014b0d 	.word	0x08014b0d
 80148b0:	08014b0d 	.word	0x08014b0d
 80148b4:	08014b0d 	.word	0x08014b0d
 80148b8:	08014b0d 	.word	0x08014b0d
 80148bc:	08014b0d 	.word	0x08014b0d
 80148c0:	08014b0d 	.word	0x08014b0d
 80148c4:	08014b0d 	.word	0x08014b0d
 80148c8:	08014b0d 	.word	0x08014b0d
 80148cc:	08014b0d 	.word	0x08014b0d
 80148d0:	08014b0d 	.word	0x08014b0d
 80148d4:	08014a23 	.word	0x08014a23
 80148d8:	08014b0d 	.word	0x08014b0d
 80148dc:	08014b0d 	.word	0x08014b0d
 80148e0:	08014b0d 	.word	0x08014b0d
 80148e4:	08014b0d 	.word	0x08014b0d
 80148e8:	08014b0d 	.word	0x08014b0d
 80148ec:	08014b0d 	.word	0x08014b0d
 80148f0:	08014b0d 	.word	0x08014b0d
 80148f4:	08014a59 	.word	0x08014a59
 80148f8:	08014a35 	.word	0x08014a35
 80148fc:	08014b0d 	.word	0x08014b0d
 8014900:	08014b0d 	.word	0x08014b0d
 8014904:	08014a47 	.word	0x08014a47
 8014908:	08014b0d 	.word	0x08014b0d
 801490c:	08014b0d 	.word	0x08014b0d
 8014910:	08014b0d 	.word	0x08014b0d
 8014914:	08014b0d 	.word	0x08014b0d
 8014918:	08014a7d 	.word	0x08014a7d
 801491c:	08014b0d 	.word	0x08014b0d
 8014920:	08014a8f 	.word	0x08014a8f
 8014924:	08014b0d 	.word	0x08014b0d
 8014928:	08014b0d 	.word	0x08014b0d
 801492c:	08014ab3 	.word	0x08014ab3
 8014930:	08014b0d 	.word	0x08014b0d
 8014934:	08014ad7 	.word	0x08014ad7
 8014938:	08014b0d 	.word	0x08014b0d
 801493c:	08014b0d 	.word	0x08014b0d
 8014940:	08014b0d 	.word	0x08014b0d
 8014944:	08014b0d 	.word	0x08014b0d
 8014948:	08014afb 	.word	0x08014afb
 801494c:	08014b0d 	.word	0x08014b0d
 8014950:	08014b0d 	.word	0x08014b0d
 8014954:	08014b0d 	.word	0x08014b0d
 8014958:	08014b0d 	.word	0x08014b0d
 801495c:	08014b0d 	.word	0x08014b0d
 8014960:	08014b0d 	.word	0x08014b0d
 8014964:	08014b0d 	.word	0x08014b0d
 8014968:	08014b0d 	.word	0x08014b0d
 801496c:	08014b0d 	.word	0x08014b0d
 8014970:	08014b0d 	.word	0x08014b0d
 8014974:	08014b0d 	.word	0x08014b0d
 8014978:	08014b0d 	.word	0x08014b0d
 801497c:	08014b0d 	.word	0x08014b0d
 8014980:	08014b0d 	.word	0x08014b0d
 8014984:	08014b0d 	.word	0x08014b0d
 8014988:	08014b0d 	.word	0x08014b0d
 801498c:	08014b0d 	.word	0x08014b0d
 8014990:	08014b0d 	.word	0x08014b0d
 8014994:	08014b0d 	.word	0x08014b0d
 8014998:	08014b0d 	.word	0x08014b0d
 801499c:	08014b0d 	.word	0x08014b0d
 80149a0:	08014b0d 	.word	0x08014b0d
 80149a4:	08014b0d 	.word	0x08014b0d
 80149a8:	08014b0d 	.word	0x08014b0d
 80149ac:	08014b0d 	.word	0x08014b0d
 80149b0:	08014b0d 	.word	0x08014b0d
 80149b4:	08014b0d 	.word	0x08014b0d
 80149b8:	08014b0d 	.word	0x08014b0d
 80149bc:	08014b0d 	.word	0x08014b0d
 80149c0:	08014b0d 	.word	0x08014b0d
 80149c4:	08014b0d 	.word	0x08014b0d
 80149c8:	08014b0d 	.word	0x08014b0d
 80149cc:	08014b0d 	.word	0x08014b0d
 80149d0:	08014b0d 	.word	0x08014b0d
 80149d4:	08014b0d 	.word	0x08014b0d
 80149d8:	08014b0d 	.word	0x08014b0d
 80149dc:	08014b0d 	.word	0x08014b0d
 80149e0:	08014b0d 	.word	0x08014b0d
 80149e4:	08014b0d 	.word	0x08014b0d
 80149e8:	08014b0d 	.word	0x08014b0d
 80149ec:	08014b0d 	.word	0x08014b0d
 80149f0:	08014b0d 	.word	0x08014b0d
 80149f4:	08014a6b 	.word	0x08014a6b
 80149f8:	2b9e      	cmp	r3, #158	; 0x9e
 80149fa:	d051      	beq.n	8014aa0 <SCSI_ProcessCmd+0x274>
 80149fc:	e086      	b.n	8014b0c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80149fe:	7afb      	ldrb	r3, [r7, #11]
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	4619      	mov	r1, r3
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f000 f893 	bl	8014b30 <SCSI_TestUnitReady>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8014a0e:	e089      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8014a10:	7afb      	ldrb	r3, [r7, #11]
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	4619      	mov	r1, r3
 8014a16:	68f8      	ldr	r0, [r7, #12]
 8014a18:	f000 fb6e 	bl	80150f8 <SCSI_RequestSense>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8014a20:	e080      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8014a22:	7afb      	ldrb	r3, [r7, #11]
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	4619      	mov	r1, r3
 8014a28:	68f8      	ldr	r0, [r7, #12]
 8014a2a:	f000 f8db 	bl	8014be4 <SCSI_Inquiry>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	75fb      	strb	r3, [r7, #23]
      break;
 8014a32:	e077      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014a34:	7afb      	ldrb	r3, [r7, #11]
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	4619      	mov	r1, r3
 8014a3a:	68f8      	ldr	r0, [r7, #12]
 8014a3c:	f000 fc30 	bl	80152a0 <SCSI_StartStopUnit>
 8014a40:	4603      	mov	r3, r0
 8014a42:	75fb      	strb	r3, [r7, #23]
      break;
 8014a44:	e06e      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014a46:	7afb      	ldrb	r3, [r7, #11]
 8014a48:	687a      	ldr	r2, [r7, #4]
 8014a4a:	4619      	mov	r1, r3
 8014a4c:	68f8      	ldr	r0, [r7, #12]
 8014a4e:	f000 fc7c 	bl	801534a <SCSI_AllowPreventRemovable>
 8014a52:	4603      	mov	r3, r0
 8014a54:	75fb      	strb	r3, [r7, #23]
      break;
 8014a56:	e065      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8014a58:	7afb      	ldrb	r3, [r7, #11]
 8014a5a:	687a      	ldr	r2, [r7, #4]
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	68f8      	ldr	r0, [r7, #12]
 8014a60:	f000 faea 	bl	8015038 <SCSI_ModeSense6>
 8014a64:	4603      	mov	r3, r0
 8014a66:	75fb      	strb	r3, [r7, #23]
      break;
 8014a68:	e05c      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8014a6a:	7afb      	ldrb	r3, [r7, #11]
 8014a6c:	687a      	ldr	r2, [r7, #4]
 8014a6e:	4619      	mov	r1, r3
 8014a70:	68f8      	ldr	r0, [r7, #12]
 8014a72:	f000 fb11 	bl	8015098 <SCSI_ModeSense10>
 8014a76:	4603      	mov	r3, r0
 8014a78:	75fb      	strb	r3, [r7, #23]
      break;
 8014a7a:	e053      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8014a7c:	7afb      	ldrb	r3, [r7, #11]
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	4619      	mov	r1, r3
 8014a82:	68f8      	ldr	r0, [r7, #12]
 8014a84:	f000 fa5d 	bl	8014f42 <SCSI_ReadFormatCapacity>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8014a8c:	e04a      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8014a8e:	7afb      	ldrb	r3, [r7, #11]
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	4619      	mov	r1, r3
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f000 f923 	bl	8014ce0 <SCSI_ReadCapacity10>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8014a9e:	e041      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8014aa0:	7afb      	ldrb	r3, [r7, #11]
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	68f8      	ldr	r0, [r7, #12]
 8014aa8:	f000 f998 	bl	8014ddc <SCSI_ReadCapacity16>
 8014aac:	4603      	mov	r3, r0
 8014aae:	75fb      	strb	r3, [r7, #23]
      break;
 8014ab0:	e038      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8014ab2:	7afb      	ldrb	r3, [r7, #11]
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	68f8      	ldr	r0, [r7, #12]
 8014aba:	f000 fc73 	bl	80153a4 <SCSI_Read10>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8014ac2:	e02f      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8014ac4:	7afb      	ldrb	r3, [r7, #11]
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	4619      	mov	r1, r3
 8014aca:	68f8      	ldr	r0, [r7, #12]
 8014acc:	f000 fd14 	bl	80154f8 <SCSI_Read12>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8014ad4:	e026      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8014ad6:	7afb      	ldrb	r3, [r7, #11]
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	4619      	mov	r1, r3
 8014adc:	68f8      	ldr	r0, [r7, #12]
 8014ade:	f000 fdbf 	bl	8015660 <SCSI_Write10>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8014ae6:	e01d      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8014ae8:	7afb      	ldrb	r3, [r7, #11]
 8014aea:	687a      	ldr	r2, [r7, #4]
 8014aec:	4619      	mov	r1, r3
 8014aee:	68f8      	ldr	r0, [r7, #12]
 8014af0:	f000 fe8c 	bl	801580c <SCSI_Write12>
 8014af4:	4603      	mov	r3, r0
 8014af6:	75fb      	strb	r3, [r7, #23]
      break;
 8014af8:	e014      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8014afa:	7afb      	ldrb	r3, [r7, #11]
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	4619      	mov	r1, r3
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f000 ff69 	bl	80159d8 <SCSI_Verify10>
 8014b06:	4603      	mov	r3, r0
 8014b08:	75fb      	strb	r3, [r7, #23]
      break;
 8014b0a:	e00b      	b.n	8014b24 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014b0c:	7af9      	ldrb	r1, [r7, #11]
 8014b0e:	2320      	movs	r3, #32
 8014b10:	2205      	movs	r2, #5
 8014b12:	68f8      	ldr	r0, [r7, #12]
 8014b14:	f000 fb76 	bl	8015204 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	2202      	movs	r2, #2
 8014b1c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8014b1e:	23ff      	movs	r3, #255	; 0xff
 8014b20:	75fb      	strb	r3, [r7, #23]
      break;
 8014b22:	bf00      	nop
  }

  return ret;
 8014b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b28:	4618      	mov	r0, r3
 8014b2a:	3718      	adds	r7, #24
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}

08014b30 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b086      	sub	sp, #24
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	60f8      	str	r0, [r7, #12]
 8014b38:	460b      	mov	r3, r1
 8014b3a:	607a      	str	r2, [r7, #4]
 8014b3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	32b0      	adds	r2, #176	; 0xb0
 8014b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b4c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d102      	bne.n	8014b5a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8014b54:	f04f 33ff 	mov.w	r3, #4294967295
 8014b58:	e03f      	b.n	8014bda <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d00a      	beq.n	8014b7a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014b6a:	2320      	movs	r3, #32
 8014b6c:	2205      	movs	r2, #5
 8014b6e:	68f8      	ldr	r0, [r7, #12]
 8014b70:	f000 fb48 	bl	8015204 <SCSI_SenseCode>

    return -1;
 8014b74:	f04f 33ff 	mov.w	r3, #4294967295
 8014b78:	e02f      	b.n	8014bda <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014b80:	2b02      	cmp	r3, #2
 8014b82:	d10b      	bne.n	8014b9c <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b84:	7af9      	ldrb	r1, [r7, #11]
 8014b86:	233a      	movs	r3, #58	; 0x3a
 8014b88:	2202      	movs	r2, #2
 8014b8a:	68f8      	ldr	r0, [r7, #12]
 8014b8c:	f000 fb3a 	bl	8015204 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014b90:	697b      	ldr	r3, [r7, #20]
 8014b92:	2205      	movs	r2, #5
 8014b94:	721a      	strb	r2, [r3, #8]
    return -1;
 8014b96:	f04f 33ff 	mov.w	r3, #4294967295
 8014b9a:	e01e      	b.n	8014bda <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ba2:	68fa      	ldr	r2, [r7, #12]
 8014ba4:	33b0      	adds	r3, #176	; 0xb0
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	4413      	add	r3, r2
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	689b      	ldr	r3, [r3, #8]
 8014bae:	7afa      	ldrb	r2, [r7, #11]
 8014bb0:	4610      	mov	r0, r2
 8014bb2:	4798      	blx	r3
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d00b      	beq.n	8014bd2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014bba:	7af9      	ldrb	r1, [r7, #11]
 8014bbc:	233a      	movs	r3, #58	; 0x3a
 8014bbe:	2202      	movs	r2, #2
 8014bc0:	68f8      	ldr	r0, [r7, #12]
 8014bc2:	f000 fb1f 	bl	8015204 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	2205      	movs	r2, #5
 8014bca:	721a      	strb	r2, [r3, #8]

    return -1;
 8014bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd0:	e003      	b.n	8014bda <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	60da      	str	r2, [r3, #12]

  return 0;
 8014bd8:	2300      	movs	r3, #0
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	3718      	adds	r7, #24
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}
	...

08014be4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b088      	sub	sp, #32
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	460b      	mov	r3, r1
 8014bee:	607a      	str	r2, [r7, #4]
 8014bf0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	32b0      	adds	r2, #176	; 0xb0
 8014bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c00:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014c02:	69bb      	ldr	r3, [r7, #24]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d102      	bne.n	8014c0e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8014c08:	f04f 33ff 	mov.w	r3, #4294967295
 8014c0c:	e05f      	b.n	8014cce <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8014c0e:	69bb      	ldr	r3, [r7, #24]
 8014c10:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d10a      	bne.n	8014c2e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c18:	69bb      	ldr	r3, [r7, #24]
 8014c1a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014c1e:	2320      	movs	r3, #32
 8014c20:	2205      	movs	r2, #5
 8014c22:	68f8      	ldr	r0, [r7, #12]
 8014c24:	f000 faee 	bl	8015204 <SCSI_SenseCode>
    return -1;
 8014c28:	f04f 33ff 	mov.w	r3, #4294967295
 8014c2c:	e04f      	b.n	8014cce <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	3301      	adds	r3, #1
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	f003 0301 	and.w	r3, r3, #1
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d020      	beq.n	8014c7e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	3302      	adds	r3, #2
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d105      	bne.n	8014c52 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8014c46:	2206      	movs	r2, #6
 8014c48:	4923      	ldr	r1, [pc, #140]	; (8014cd8 <SCSI_Inquiry+0xf4>)
 8014c4a:	69b8      	ldr	r0, [r7, #24]
 8014c4c:	f001 f84a 	bl	8015ce4 <SCSI_UpdateBotData>
 8014c50:	e03c      	b.n	8014ccc <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	3302      	adds	r3, #2
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	2b80      	cmp	r3, #128	; 0x80
 8014c5a:	d105      	bne.n	8014c68 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014c5c:	2208      	movs	r2, #8
 8014c5e:	491f      	ldr	r1, [pc, #124]	; (8014cdc <SCSI_Inquiry+0xf8>)
 8014c60:	69b8      	ldr	r0, [r7, #24]
 8014c62:	f001 f83f 	bl	8015ce4 <SCSI_UpdateBotData>
 8014c66:	e031      	b.n	8014ccc <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8014c6e:	2324      	movs	r3, #36	; 0x24
 8014c70:	2205      	movs	r2, #5
 8014c72:	68f8      	ldr	r0, [r7, #12]
 8014c74:	f000 fac6 	bl	8015204 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014c78:	f04f 33ff 	mov.w	r3, #4294967295
 8014c7c:	e027      	b.n	8014cce <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c84:	68fa      	ldr	r2, [r7, #12]
 8014c86:	33b0      	adds	r3, #176	; 0xb0
 8014c88:	009b      	lsls	r3, r3, #2
 8014c8a:	4413      	add	r3, r2
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	69d9      	ldr	r1, [r3, #28]
 8014c90:	7afa      	ldrb	r2, [r7, #11]
 8014c92:	4613      	mov	r3, r2
 8014c94:	00db      	lsls	r3, r3, #3
 8014c96:	4413      	add	r3, r2
 8014c98:	009b      	lsls	r3, r3, #2
 8014c9a:	440b      	add	r3, r1
 8014c9c:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	3304      	adds	r3, #4
 8014ca2:	781b      	ldrb	r3, [r3, #0]
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	3305      	adds	r3, #5
 8014ca8:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	3304      	adds	r3, #4
 8014cae:	781b      	ldrb	r3, [r3, #0]
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	8bfa      	ldrh	r2, [r7, #30]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d303      	bcc.n	8014cc0 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	3304      	adds	r3, #4
 8014cbc:	781b      	ldrb	r3, [r3, #0]
 8014cbe:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8014cc0:	8bfb      	ldrh	r3, [r7, #30]
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	6979      	ldr	r1, [r7, #20]
 8014cc6:	69b8      	ldr	r0, [r7, #24]
 8014cc8:	f001 f80c 	bl	8015ce4 <SCSI_UpdateBotData>
  }

  return 0;
 8014ccc:	2300      	movs	r3, #0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3720      	adds	r7, #32
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	200000b0 	.word	0x200000b0
 8014cdc:	200000b8 	.word	0x200000b8

08014ce0 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b086      	sub	sp, #24
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	60f8      	str	r0, [r7, #12]
 8014ce8:	460b      	mov	r3, r1
 8014cea:	607a      	str	r2, [r7, #4]
 8014cec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	32b0      	adds	r2, #176	; 0xb0
 8014cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cfc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8014cfe:	697b      	ldr	r3, [r7, #20]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d102      	bne.n	8014d0a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8014d04:	f04f 33ff 	mov.w	r3, #4294967295
 8014d08:	e064      	b.n	8014dd4 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d10:	68fa      	ldr	r2, [r7, #12]
 8014d12:	33b0      	adds	r3, #176	; 0xb0
 8014d14:	009b      	lsls	r3, r3, #2
 8014d16:	4413      	add	r3, r2
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	685b      	ldr	r3, [r3, #4]
 8014d1c:	697a      	ldr	r2, [r7, #20]
 8014d1e:	f602 0168 	addw	r1, r2, #2152	; 0x868
 8014d22:	697a      	ldr	r2, [r7, #20]
 8014d24:	f602 0264 	addw	r2, r2, #2148	; 0x864
 8014d28:	7af8      	ldrb	r0, [r7, #11]
 8014d2a:	4798      	blx	r3
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014d30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d104      	bne.n	8014d42 <SCSI_ReadCapacity10+0x62>
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014d3e:	2b02      	cmp	r3, #2
 8014d40:	d108      	bne.n	8014d54 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014d42:	7af9      	ldrb	r1, [r7, #11]
 8014d44:	233a      	movs	r3, #58	; 0x3a
 8014d46:	2202      	movs	r2, #2
 8014d48:	68f8      	ldr	r0, [r7, #12]
 8014d4a:	f000 fa5b 	bl	8015204 <SCSI_SenseCode>
    return -1;
 8014d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d52:	e03f      	b.n	8014dd4 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014d5a:	3b01      	subs	r3, #1
 8014d5c:	0e1b      	lsrs	r3, r3, #24
 8014d5e:	b2da      	uxtb	r2, r3
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014d6a:	3b01      	subs	r3, #1
 8014d6c:	0c1b      	lsrs	r3, r3, #16
 8014d6e:	b2da      	uxtb	r2, r3
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014d7a:	3b01      	subs	r3, #1
 8014d7c:	0a1b      	lsrs	r3, r3, #8
 8014d7e:	b2da      	uxtb	r2, r3
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014d8a:	b2db      	uxtb	r3, r3
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	b2da      	uxtb	r2, r3
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014d9a:	161b      	asrs	r3, r3, #24
 8014d9c:	b2da      	uxtb	r2, r3
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014da8:	141b      	asrs	r3, r3, #16
 8014daa:	b2da      	uxtb	r2, r3
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014db6:	0a1b      	lsrs	r3, r3, #8
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	b2da      	uxtb	r2, r3
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014dc6:	b2da      	uxtb	r2, r3
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	2208      	movs	r2, #8
 8014dd0:	60da      	str	r2, [r3, #12]

  return 0;
 8014dd2:	2300      	movs	r3, #0

}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3718      	adds	r7, #24
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b088      	sub	sp, #32
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	460b      	mov	r3, r1
 8014de6:	607a      	str	r2, [r7, #4]
 8014de8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	32b0      	adds	r2, #176	; 0xb0
 8014df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014df8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014dfa:	69bb      	ldr	r3, [r7, #24]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d102      	bne.n	8014e06 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8014e00:	f04f 33ff 	mov.w	r3, #4294967295
 8014e04:	e099      	b.n	8014f3a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e0c:	68fa      	ldr	r2, [r7, #12]
 8014e0e:	33b0      	adds	r3, #176	; 0xb0
 8014e10:	009b      	lsls	r3, r3, #2
 8014e12:	4413      	add	r3, r2
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	685b      	ldr	r3, [r3, #4]
 8014e18:	69ba      	ldr	r2, [r7, #24]
 8014e1a:	f602 0168 	addw	r1, r2, #2152	; 0x868
 8014e1e:	69ba      	ldr	r2, [r7, #24]
 8014e20:	f602 0264 	addw	r2, r2, #2148	; 0x864
 8014e24:	7af8      	ldrb	r0, [r7, #11]
 8014e26:	4798      	blx	r3
 8014e28:	4603      	mov	r3, r0
 8014e2a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d104      	bne.n	8014e3e <SCSI_ReadCapacity16+0x62>
 8014e34:	69bb      	ldr	r3, [r7, #24]
 8014e36:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014e3a:	2b02      	cmp	r3, #2
 8014e3c:	d108      	bne.n	8014e50 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014e3e:	7af9      	ldrb	r1, [r7, #11]
 8014e40:	233a      	movs	r3, #58	; 0x3a
 8014e42:	2202      	movs	r2, #2
 8014e44:	68f8      	ldr	r0, [r7, #12]
 8014e46:	f000 f9dd 	bl	8015204 <SCSI_SenseCode>
    return -1;
 8014e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e4e:	e074      	b.n	8014f3a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	330a      	adds	r3, #10
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	330b      	adds	r3, #11
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014e60:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	330c      	adds	r3, #12
 8014e66:	781b      	ldrb	r3, [r3, #0]
 8014e68:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014e6a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014e6c:	687a      	ldr	r2, [r7, #4]
 8014e6e:	320d      	adds	r2, #13
 8014e70:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014e72:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014e74:	69bb      	ldr	r3, [r7, #24]
 8014e76:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014e78:	2300      	movs	r3, #0
 8014e7a:	77fb      	strb	r3, [r7, #31]
 8014e7c:	e007      	b.n	8014e8e <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8014e7e:	7ffb      	ldrb	r3, [r7, #31]
 8014e80:	69ba      	ldr	r2, [r7, #24]
 8014e82:	4413      	add	r3, r2
 8014e84:	2200      	movs	r2, #0
 8014e86:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014e88:	7ffb      	ldrb	r3, [r7, #31]
 8014e8a:	3301      	adds	r3, #1
 8014e8c:	77fb      	strb	r3, [r7, #31]
 8014e8e:	7ffa      	ldrb	r2, [r7, #31]
 8014e90:	69bb      	ldr	r3, [r7, #24]
 8014e92:	68db      	ldr	r3, [r3, #12]
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d3f2      	bcc.n	8014e7e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014e98:	69bb      	ldr	r3, [r7, #24]
 8014e9a:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014e9e:	3b01      	subs	r3, #1
 8014ea0:	0e1b      	lsrs	r3, r3, #24
 8014ea2:	b2da      	uxtb	r2, r3
 8014ea4:	69bb      	ldr	r3, [r7, #24]
 8014ea6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014ea8:	69bb      	ldr	r3, [r7, #24]
 8014eaa:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014eae:	3b01      	subs	r3, #1
 8014eb0:	0c1b      	lsrs	r3, r3, #16
 8014eb2:	b2da      	uxtb	r2, r3
 8014eb4:	69bb      	ldr	r3, [r7, #24]
 8014eb6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014eb8:	69bb      	ldr	r3, [r7, #24]
 8014eba:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014ebe:	3b01      	subs	r3, #1
 8014ec0:	0a1b      	lsrs	r3, r3, #8
 8014ec2:	b2da      	uxtb	r2, r3
 8014ec4:	69bb      	ldr	r3, [r7, #24]
 8014ec6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014ec8:	69bb      	ldr	r3, [r7, #24]
 8014eca:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8014ece:	b2db      	uxtb	r3, r3
 8014ed0:	3b01      	subs	r3, #1
 8014ed2:	b2da      	uxtb	r2, r3
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014ed8:	69bb      	ldr	r3, [r7, #24]
 8014eda:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014ede:	161b      	asrs	r3, r3, #24
 8014ee0:	b2da      	uxtb	r2, r3
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014ee6:	69bb      	ldr	r3, [r7, #24]
 8014ee8:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014eec:	141b      	asrs	r3, r3, #16
 8014eee:	b2da      	uxtb	r2, r3
 8014ef0:	69bb      	ldr	r3, [r7, #24]
 8014ef2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014ef4:	69bb      	ldr	r3, [r7, #24]
 8014ef6:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014efa:	0a1b      	lsrs	r3, r3, #8
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	b2da      	uxtb	r2, r3
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8014f04:	69bb      	ldr	r3, [r7, #24]
 8014f06:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8014f0a:	b2da      	uxtb	r2, r3
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	330a      	adds	r3, #10
 8014f14:	781b      	ldrb	r3, [r3, #0]
 8014f16:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	330b      	adds	r3, #11
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014f20:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	330c      	adds	r3, #12
 8014f26:	781b      	ldrb	r3, [r3, #0]
 8014f28:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014f2a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	320d      	adds	r2, #13
 8014f30:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014f32:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014f34:	69bb      	ldr	r3, [r7, #24]
 8014f36:	60da      	str	r2, [r3, #12]

  return 0;
 8014f38:	2300      	movs	r3, #0
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3720      	adds	r7, #32
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}

08014f42 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f42:	b580      	push	{r7, lr}
 8014f44:	b088      	sub	sp, #32
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	60f8      	str	r0, [r7, #12]
 8014f4a:	460b      	mov	r3, r1
 8014f4c:	607a      	str	r2, [r7, #4]
 8014f4e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	32b0      	adds	r2, #176	; 0xb0
 8014f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f5e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8014f60:	69bb      	ldr	r3, [r7, #24]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d102      	bne.n	8014f6c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8014f66:	f04f 33ff 	mov.w	r3, #4294967295
 8014f6a:	e061      	b.n	8015030 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	33b0      	adds	r3, #176	; 0xb0
 8014f76:	009b      	lsls	r3, r3, #2
 8014f78:	4413      	add	r3, r2
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	f107 0214 	add.w	r2, r7, #20
 8014f82:	f107 0110 	add.w	r1, r7, #16
 8014f86:	7af8      	ldrb	r0, [r7, #11]
 8014f88:	4798      	blx	r3
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d104      	bne.n	8014fa0 <SCSI_ReadFormatCapacity+0x5e>
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8014f9c:	2b02      	cmp	r3, #2
 8014f9e:	d108      	bne.n	8014fb2 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014fa0:	7af9      	ldrb	r1, [r7, #11]
 8014fa2:	233a      	movs	r3, #58	; 0x3a
 8014fa4:	2202      	movs	r2, #2
 8014fa6:	68f8      	ldr	r0, [r7, #12]
 8014fa8:	f000 f92c 	bl	8015204 <SCSI_SenseCode>
    return -1;
 8014fac:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb0:	e03e      	b.n	8015030 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	83fb      	strh	r3, [r7, #30]
 8014fb6:	e007      	b.n	8014fc8 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8014fb8:	8bfb      	ldrh	r3, [r7, #30]
 8014fba:	69ba      	ldr	r2, [r7, #24]
 8014fbc:	4413      	add	r3, r2
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8014fc2:	8bfb      	ldrh	r3, [r7, #30]
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	83fb      	strh	r3, [r7, #30]
 8014fc8:	8bfb      	ldrh	r3, [r7, #30]
 8014fca:	2b0b      	cmp	r3, #11
 8014fcc:	d9f4      	bls.n	8014fb8 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	2208      	movs	r2, #8
 8014fd2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	3b01      	subs	r3, #1
 8014fd8:	0e1b      	lsrs	r3, r3, #24
 8014fda:	b2da      	uxtb	r2, r3
 8014fdc:	69bb      	ldr	r3, [r7, #24]
 8014fde:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8014fe0:	693b      	ldr	r3, [r7, #16]
 8014fe2:	3b01      	subs	r3, #1
 8014fe4:	0c1b      	lsrs	r3, r3, #16
 8014fe6:	b2da      	uxtb	r2, r3
 8014fe8:	69bb      	ldr	r3, [r7, #24]
 8014fea:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	0a1b      	lsrs	r3, r3, #8
 8014ff2:	b2da      	uxtb	r2, r3
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	3b01      	subs	r3, #1
 8014ffe:	b2da      	uxtb	r2, r3
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8015004:	69bb      	ldr	r3, [r7, #24]
 8015006:	2202      	movs	r2, #2
 8015008:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801500a:	8abb      	ldrh	r3, [r7, #20]
 801500c:	141b      	asrs	r3, r3, #16
 801500e:	b2da      	uxtb	r2, r3
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8015014:	8abb      	ldrh	r3, [r7, #20]
 8015016:	0a1b      	lsrs	r3, r3, #8
 8015018:	b29b      	uxth	r3, r3
 801501a:	b2da      	uxtb	r2, r3
 801501c:	69bb      	ldr	r3, [r7, #24]
 801501e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8015020:	8abb      	ldrh	r3, [r7, #20]
 8015022:	b2da      	uxtb	r2, r3
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8015028:	69bb      	ldr	r3, [r7, #24]
 801502a:	220c      	movs	r2, #12
 801502c:	60da      	str	r2, [r3, #12]

  return 0;
 801502e:	2300      	movs	r3, #0
}
 8015030:	4618      	mov	r0, r3
 8015032:	3720      	adds	r7, #32
 8015034:	46bd      	mov	sp, r7
 8015036:	bd80      	pop	{r7, pc}

08015038 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b086      	sub	sp, #24
 801503c:	af00      	add	r7, sp, #0
 801503e:	60f8      	str	r0, [r7, #12]
 8015040:	460b      	mov	r3, r1
 8015042:	607a      	str	r2, [r7, #4]
 8015044:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	32b0      	adds	r2, #176	; 0xb0
 8015050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015054:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8015056:	2317      	movs	r3, #23
 8015058:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d102      	bne.n	8015066 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8015060:	f04f 33ff 	mov.w	r3, #4294967295
 8015064:	e011      	b.n	801508a <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	3304      	adds	r3, #4
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	b29b      	uxth	r3, r3
 801506e:	8afa      	ldrh	r2, [r7, #22]
 8015070:	429a      	cmp	r2, r3
 8015072:	d303      	bcc.n	801507c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	3304      	adds	r3, #4
 8015078:	781b      	ldrb	r3, [r3, #0]
 801507a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801507c:	8afb      	ldrh	r3, [r7, #22]
 801507e:	461a      	mov	r2, r3
 8015080:	4904      	ldr	r1, [pc, #16]	; (8015094 <SCSI_ModeSense6+0x5c>)
 8015082:	6938      	ldr	r0, [r7, #16]
 8015084:	f000 fe2e 	bl	8015ce4 <SCSI_UpdateBotData>

  return 0;
 8015088:	2300      	movs	r3, #0
}
 801508a:	4618      	mov	r0, r3
 801508c:	3718      	adds	r7, #24
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}
 8015092:	bf00      	nop
 8015094:	200000c0 	.word	0x200000c0

08015098 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b086      	sub	sp, #24
 801509c:	af00      	add	r7, sp, #0
 801509e:	60f8      	str	r0, [r7, #12]
 80150a0:	460b      	mov	r3, r1
 80150a2:	607a      	str	r2, [r7, #4]
 80150a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	32b0      	adds	r2, #176	; 0xb0
 80150b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150b4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80150b6:	231b      	movs	r3, #27
 80150b8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d102      	bne.n	80150c6 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80150c0:	f04f 33ff 	mov.w	r3, #4294967295
 80150c4:	e011      	b.n	80150ea <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	3308      	adds	r3, #8
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	8afa      	ldrh	r2, [r7, #22]
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d303      	bcc.n	80150dc <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	3308      	adds	r3, #8
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80150dc:	8afb      	ldrh	r3, [r7, #22]
 80150de:	461a      	mov	r2, r3
 80150e0:	4904      	ldr	r1, [pc, #16]	; (80150f4 <SCSI_ModeSense10+0x5c>)
 80150e2:	6938      	ldr	r0, [r7, #16]
 80150e4:	f000 fdfe 	bl	8015ce4 <SCSI_UpdateBotData>

  return 0;
 80150e8:	2300      	movs	r3, #0
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3718      	adds	r7, #24
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}
 80150f2:	bf00      	nop
 80150f4:	200000d8 	.word	0x200000d8

080150f8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b086      	sub	sp, #24
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	460b      	mov	r3, r1
 8015102:	607a      	str	r2, [r7, #4]
 8015104:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	32b0      	adds	r2, #176	; 0xb0
 8015110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015114:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d102      	bne.n	8015122 <SCSI_RequestSense+0x2a>
  {
    return -1;
 801511c:	f04f 33ff 	mov.w	r3, #4294967295
 8015120:	e06c      	b.n	80151fc <SCSI_RequestSense+0x104>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8015128:	2b00      	cmp	r3, #0
 801512a:	d10a      	bne.n	8015142 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015132:	2320      	movs	r3, #32
 8015134:	2205      	movs	r2, #5
 8015136:	68f8      	ldr	r0, [r7, #12]
 8015138:	f000 f864 	bl	8015204 <SCSI_SenseCode>
    return -1;
 801513c:	f04f 33ff 	mov.w	r3, #4294967295
 8015140:	e05c      	b.n	80151fc <SCSI_RequestSense+0x104>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8015142:	2300      	movs	r3, #0
 8015144:	75fb      	strb	r3, [r7, #23]
 8015146:	e007      	b.n	8015158 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8015148:	7dfb      	ldrb	r3, [r7, #23]
 801514a:	693a      	ldr	r2, [r7, #16]
 801514c:	4413      	add	r3, r2
 801514e:	2200      	movs	r2, #0
 8015150:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8015152:	7dfb      	ldrb	r3, [r7, #23]
 8015154:	3301      	adds	r3, #1
 8015156:	75fb      	strb	r3, [r7, #23]
 8015158:	7dfb      	ldrb	r3, [r7, #23]
 801515a:	2b11      	cmp	r3, #17
 801515c:	d9f4      	bls.n	8015148 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	2270      	movs	r2, #112	; 0x70
 8015162:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	220c      	movs	r2, #12
 8015168:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	f893 2860 	ldrb.w	r2, [r3, #2144]	; 0x860
 8015170:	693b      	ldr	r3, [r7, #16]
 8015172:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8015176:	429a      	cmp	r2, r3
 8015178:	d031      	beq.n	80151de <SCSI_RequestSense+0xe6>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8015180:	461a      	mov	r2, r3
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8015188:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801518c:	693b      	ldr	r3, [r7, #16]
 801518e:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8015196:	693a      	ldr	r2, [r7, #16]
 8015198:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801519c:	00db      	lsls	r3, r3, #3
 801519e:	4413      	add	r3, r2
 80151a0:	791a      	ldrb	r2, [r3, #4]
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 80151ac:	693a      	ldr	r2, [r7, #16]
 80151ae:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80151b2:	00db      	lsls	r3, r3, #3
 80151b4:	4413      	add	r3, r2
 80151b6:	795a      	ldrb	r2, [r3, #5]
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 80151c2:	3301      	adds	r3, #1
 80151c4:	b2da      	uxtb	r2, r3
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 80151d2:	2b04      	cmp	r3, #4
 80151d4:	d103      	bne.n	80151de <SCSI_RequestSense+0xe6>
    {
      hmsc->scsi_sense_head = 0U;
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	2200      	movs	r2, #0
 80151da:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	2212      	movs	r2, #18
 80151e2:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	3304      	adds	r3, #4
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	2b12      	cmp	r3, #18
 80151ec:	d805      	bhi.n	80151fa <SCSI_RequestSense+0x102>
  {
    hmsc->bot_data_length = params[4];
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	3304      	adds	r3, #4
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	461a      	mov	r2, r3
 80151f6:	693b      	ldr	r3, [r7, #16]
 80151f8:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80151fa:	2300      	movs	r3, #0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3718      	adds	r7, #24
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8015204:	b480      	push	{r7}
 8015206:	b085      	sub	sp, #20
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	4608      	mov	r0, r1
 801520e:	4611      	mov	r1, r2
 8015210:	461a      	mov	r2, r3
 8015212:	4603      	mov	r3, r0
 8015214:	70fb      	strb	r3, [r7, #3]
 8015216:	460b      	mov	r3, r1
 8015218:	70bb      	strb	r3, [r7, #2]
 801521a:	4613      	mov	r3, r2
 801521c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	32b0      	adds	r2, #176	; 0xb0
 8015228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801522c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d02f      	beq.n	8015294 <SCSI_SenseCode+0x90>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801523a:	461a      	mov	r2, r3
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	f502 7284 	add.w	r2, r2, #264	; 0x108
 8015242:	78b9      	ldrb	r1, [r7, #2]
 8015244:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 801524e:	68fa      	ldr	r2, [r7, #12]
 8015250:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015254:	00db      	lsls	r3, r3, #3
 8015256:	4413      	add	r3, r2
 8015258:	787a      	ldrb	r2, [r7, #1]
 801525a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8015262:	68fa      	ldr	r2, [r7, #12]
 8015264:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015268:	00db      	lsls	r3, r3, #3
 801526a:	4413      	add	r3, r2
 801526c:	2200      	movs	r2, #0
 801526e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8015276:	3301      	adds	r3, #1
 8015278:	b2da      	uxtb	r2, r3
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f893 3861 	ldrb.w	r3, [r3, #2145]	; 0x861
 8015286:	2b04      	cmp	r3, #4
 8015288:	d105      	bne.n	8015296 <SCSI_SenseCode+0x92>
  {
    hmsc->scsi_sense_tail = 0U;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	2200      	movs	r2, #0
 801528e:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8015292:	e000      	b.n	8015296 <SCSI_SenseCode+0x92>
    return;
 8015294:	bf00      	nop
  }
}
 8015296:	3714      	adds	r7, #20
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b086      	sub	sp, #24
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	60f8      	str	r0, [r7, #12]
 80152a8:	460b      	mov	r3, r1
 80152aa:	607a      	str	r2, [r7, #4]
 80152ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	32b0      	adds	r2, #176	; 0xb0
 80152b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152bc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80152be:	697b      	ldr	r3, [r7, #20]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d102      	bne.n	80152ca <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80152c4:	f04f 33ff 	mov.w	r3, #4294967295
 80152c8:	e03b      	b.n	8015342 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d10f      	bne.n	80152f4 <SCSI_StartStopUnit+0x54>
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	3304      	adds	r3, #4
 80152d8:	781b      	ldrb	r3, [r3, #0]
 80152da:	f003 0303 	and.w	r3, r3, #3
 80152de:	2b02      	cmp	r3, #2
 80152e0:	d108      	bne.n	80152f4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80152e2:	7af9      	ldrb	r1, [r7, #11]
 80152e4:	2324      	movs	r3, #36	; 0x24
 80152e6:	2205      	movs	r2, #5
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f7ff ff8b 	bl	8015204 <SCSI_SenseCode>

    return -1;
 80152ee:	f04f 33ff 	mov.w	r3, #4294967295
 80152f2:	e026      	b.n	8015342 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	3304      	adds	r3, #4
 80152f8:	781b      	ldrb	r3, [r3, #0]
 80152fa:	f003 0303 	and.w	r3, r3, #3
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d104      	bne.n	801530c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	2200      	movs	r2, #0
 8015306:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 801530a:	e016      	b.n	801533a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	3304      	adds	r3, #4
 8015310:	781b      	ldrb	r3, [r3, #0]
 8015312:	f003 0303 	and.w	r3, r3, #3
 8015316:	2b02      	cmp	r3, #2
 8015318:	d104      	bne.n	8015324 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	2202      	movs	r2, #2
 801531e:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8015322:	e00a      	b.n	801533a <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	3304      	adds	r3, #4
 8015328:	781b      	ldrb	r3, [r3, #0]
 801532a:	f003 0303 	and.w	r3, r3, #3
 801532e:	2b03      	cmp	r3, #3
 8015330:	d103      	bne.n	801533a <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015332:	697b      	ldr	r3, [r7, #20]
 8015334:	2200      	movs	r2, #0
 8015336:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	2200      	movs	r2, #0
 801533e:	60da      	str	r2, [r3, #12]

  return 0;
 8015340:	2300      	movs	r3, #0
}
 8015342:	4618      	mov	r0, r3
 8015344:	3718      	adds	r7, #24
 8015346:	46bd      	mov	sp, r7
 8015348:	bd80      	pop	{r7, pc}

0801534a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801534a:	b480      	push	{r7}
 801534c:	b087      	sub	sp, #28
 801534e:	af00      	add	r7, sp, #0
 8015350:	60f8      	str	r0, [r7, #12]
 8015352:	460b      	mov	r3, r1
 8015354:	607a      	str	r2, [r7, #4]
 8015356:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	32b0      	adds	r2, #176	; 0xb0
 8015362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015366:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d102      	bne.n	8015374 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801536e:	f04f 33ff 	mov.w	r3, #4294967295
 8015372:	e011      	b.n	8015398 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	3304      	adds	r3, #4
 8015378:	781b      	ldrb	r3, [r3, #0]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d104      	bne.n	8015388 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	2200      	movs	r2, #0
 8015382:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
 8015386:	e003      	b.n	8015390 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	2201      	movs	r2, #1
 801538c:	f883 2862 	strb.w	r2, [r3, #2146]	; 0x862
  }

  hmsc->bot_data_length = 0U;
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	2200      	movs	r2, #0
 8015394:	60da      	str	r2, [r3, #12]

  return 0;
 8015396:	2300      	movs	r3, #0
}
 8015398:	4618      	mov	r0, r3
 801539a:	371c      	adds	r7, #28
 801539c:	46bd      	mov	sp, r7
 801539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a2:	4770      	bx	lr

080153a4 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b086      	sub	sp, #24
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	60f8      	str	r0, [r7, #12]
 80153ac:	460b      	mov	r3, r1
 80153ae:	607a      	str	r2, [r7, #4]
 80153b0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	32b0      	adds	r2, #176	; 0xb0
 80153bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153c0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d102      	bne.n	80153ce <SCSI_Read10+0x2a>
  {
    return -1;
 80153c8:	f04f 33ff 	mov.w	r3, #4294967295
 80153cc:	e090      	b.n	80154f0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	7a1b      	ldrb	r3, [r3, #8]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	f040 8082 	bne.w	80154dc <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80153d8:	697b      	ldr	r3, [r7, #20]
 80153da:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 80153de:	b25b      	sxtb	r3, r3
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	db0a      	blt.n	80153fa <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80153ea:	2320      	movs	r3, #32
 80153ec:	2205      	movs	r2, #5
 80153ee:	68f8      	ldr	r0, [r7, #12]
 80153f0:	f7ff ff08 	bl	8015204 <SCSI_SenseCode>
      return -1;
 80153f4:	f04f 33ff 	mov.w	r3, #4294967295
 80153f8:	e07a      	b.n	80154f0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80153fa:	697b      	ldr	r3, [r7, #20]
 80153fc:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8015400:	2b02      	cmp	r3, #2
 8015402:	d108      	bne.n	8015416 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015404:	7af9      	ldrb	r1, [r7, #11]
 8015406:	233a      	movs	r3, #58	; 0x3a
 8015408:	2202      	movs	r2, #2
 801540a:	68f8      	ldr	r0, [r7, #12]
 801540c:	f7ff fefa 	bl	8015204 <SCSI_SenseCode>

      return -1;
 8015410:	f04f 33ff 	mov.w	r3, #4294967295
 8015414:	e06c      	b.n	80154f0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801541c:	68fa      	ldr	r2, [r7, #12]
 801541e:	33b0      	adds	r3, #176	; 0xb0
 8015420:	009b      	lsls	r3, r3, #2
 8015422:	4413      	add	r3, r2
 8015424:	685b      	ldr	r3, [r3, #4]
 8015426:	689b      	ldr	r3, [r3, #8]
 8015428:	7afa      	ldrb	r2, [r7, #11]
 801542a:	4610      	mov	r0, r2
 801542c:	4798      	blx	r3
 801542e:	4603      	mov	r3, r0
 8015430:	2b00      	cmp	r3, #0
 8015432:	d008      	beq.n	8015446 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015434:	7af9      	ldrb	r1, [r7, #11]
 8015436:	233a      	movs	r3, #58	; 0x3a
 8015438:	2202      	movs	r2, #2
 801543a:	68f8      	ldr	r0, [r7, #12]
 801543c:	f7ff fee2 	bl	8015204 <SCSI_SenseCode>
      return -1;
 8015440:	f04f 33ff 	mov.w	r3, #4294967295
 8015444:	e054      	b.n	80154f0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	3302      	adds	r3, #2
 801544a:	781b      	ldrb	r3, [r3, #0]
 801544c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	3303      	adds	r3, #3
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015456:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	3304      	adds	r3, #4
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015460:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	3205      	adds	r2, #5
 8015466:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015468:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	3307      	adds	r3, #7
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	021b      	lsls	r3, r3, #8
 8015478:	687a      	ldr	r2, [r7, #4]
 801547a:	3208      	adds	r2, #8
 801547c:	7812      	ldrb	r2, [r2, #0]
 801547e:	431a      	orrs	r2, r3
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015492:	7af9      	ldrb	r1, [r7, #11]
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	f000 fadc 	bl	8015a52 <SCSI_CheckAddressRange>
 801549a:	4603      	mov	r3, r0
 801549c:	2b00      	cmp	r3, #0
 801549e:	da02      	bge.n	80154a6 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80154a0:	f04f 33ff 	mov.w	r3, #4294967295
 80154a4:	e024      	b.n	80154f0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80154b2:	6979      	ldr	r1, [r7, #20]
 80154b4:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 80154b8:	fb01 f303 	mul.w	r3, r1, r3
 80154bc:	429a      	cmp	r2, r3
 80154be:	d00a      	beq.n	80154d6 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80154c6:	2320      	movs	r3, #32
 80154c8:	2205      	movs	r2, #5
 80154ca:	68f8      	ldr	r0, [r7, #12]
 80154cc:	f7ff fe9a 	bl	8015204 <SCSI_SenseCode>
      return -1;
 80154d0:	f04f 33ff 	mov.w	r3, #4294967295
 80154d4:	e00c      	b.n	80154f0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	2202      	movs	r2, #2
 80154da:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80154e2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80154e4:	7afb      	ldrb	r3, [r7, #11]
 80154e6:	4619      	mov	r1, r3
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f000 fadf 	bl	8015aac <SCSI_ProcessRead>
 80154ee:	4603      	mov	r3, r0
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3718      	adds	r7, #24
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}

080154f8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b086      	sub	sp, #24
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	460b      	mov	r3, r1
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	32b0      	adds	r2, #176	; 0xb0
 8015510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015514:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d102      	bne.n	8015522 <SCSI_Read12+0x2a>
  {
    return -1;
 801551c:	f04f 33ff 	mov.w	r3, #4294967295
 8015520:	e09a      	b.n	8015658 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	7a1b      	ldrb	r3, [r3, #8]
 8015526:	2b00      	cmp	r3, #0
 8015528:	f040 808c 	bne.w	8015644 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8015532:	b25b      	sxtb	r3, r3
 8015534:	2b00      	cmp	r3, #0
 8015536:	db0a      	blt.n	801554e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801553e:	2320      	movs	r3, #32
 8015540:	2205      	movs	r2, #5
 8015542:	68f8      	ldr	r0, [r7, #12]
 8015544:	f7ff fe5e 	bl	8015204 <SCSI_SenseCode>
      return -1;
 8015548:	f04f 33ff 	mov.w	r3, #4294967295
 801554c:	e084      	b.n	8015658 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	f893 3862 	ldrb.w	r3, [r3, #2146]	; 0x862
 8015554:	2b02      	cmp	r3, #2
 8015556:	d108      	bne.n	801556a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015558:	7af9      	ldrb	r1, [r7, #11]
 801555a:	233a      	movs	r3, #58	; 0x3a
 801555c:	2202      	movs	r2, #2
 801555e:	68f8      	ldr	r0, [r7, #12]
 8015560:	f7ff fe50 	bl	8015204 <SCSI_SenseCode>
      return -1;
 8015564:	f04f 33ff 	mov.w	r3, #4294967295
 8015568:	e076      	b.n	8015658 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015570:	68fa      	ldr	r2, [r7, #12]
 8015572:	33b0      	adds	r3, #176	; 0xb0
 8015574:	009b      	lsls	r3, r3, #2
 8015576:	4413      	add	r3, r2
 8015578:	685b      	ldr	r3, [r3, #4]
 801557a:	689b      	ldr	r3, [r3, #8]
 801557c:	7afa      	ldrb	r2, [r7, #11]
 801557e:	4610      	mov	r0, r2
 8015580:	4798      	blx	r3
 8015582:	4603      	mov	r3, r0
 8015584:	2b00      	cmp	r3, #0
 8015586:	d008      	beq.n	801559a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015588:	7af9      	ldrb	r1, [r7, #11]
 801558a:	233a      	movs	r3, #58	; 0x3a
 801558c:	2202      	movs	r2, #2
 801558e:	68f8      	ldr	r0, [r7, #12]
 8015590:	f7ff fe38 	bl	8015204 <SCSI_SenseCode>
      return -1;
 8015594:	f04f 33ff 	mov.w	r3, #4294967295
 8015598:	e05e      	b.n	8015658 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	3302      	adds	r3, #2
 801559e:	781b      	ldrb	r3, [r3, #0]
 80155a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	3303      	adds	r3, #3
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80155aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	3304      	adds	r3, #4
 80155b0:	781b      	ldrb	r3, [r3, #0]
 80155b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80155b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80155b6:	687a      	ldr	r2, [r7, #4]
 80155b8:	3205      	adds	r2, #5
 80155ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80155bc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80155be:	697b      	ldr	r3, [r7, #20]
 80155c0:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	3306      	adds	r3, #6
 80155c8:	781b      	ldrb	r3, [r3, #0]
 80155ca:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	3307      	adds	r3, #7
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80155d4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	3308      	adds	r3, #8
 80155da:	781b      	ldrb	r3, [r3, #0]
 80155dc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80155de:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80155e0:	687a      	ldr	r2, [r7, #4]
 80155e2:	3209      	adds	r2, #9
 80155e4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80155e6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 80155fa:	7af9      	ldrb	r1, [r7, #11]
 80155fc:	68f8      	ldr	r0, [r7, #12]
 80155fe:	f000 fa28 	bl	8015a52 <SCSI_CheckAddressRange>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	da02      	bge.n	801560e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015608:	f04f 33ff 	mov.w	r3, #4294967295
 801560c:	e024      	b.n	8015658 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801561a:	6979      	ldr	r1, [r7, #20]
 801561c:	f8b1 1864 	ldrh.w	r1, [r1, #2148]	; 0x864
 8015620:	fb01 f303 	mul.w	r3, r1, r3
 8015624:	429a      	cmp	r2, r3
 8015626:	d00a      	beq.n	801563e <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 801562e:	2320      	movs	r3, #32
 8015630:	2205      	movs	r2, #5
 8015632:	68f8      	ldr	r0, [r7, #12]
 8015634:	f7ff fde6 	bl	8015204 <SCSI_SenseCode>
      return -1;
 8015638:	f04f 33ff 	mov.w	r3, #4294967295
 801563c:	e00c      	b.n	8015658 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	2202      	movs	r2, #2
 8015642:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801564a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801564c:	7afb      	ldrb	r3, [r7, #11]
 801564e:	4619      	mov	r1, r3
 8015650:	68f8      	ldr	r0, [r7, #12]
 8015652:	f000 fa2b 	bl	8015aac <SCSI_ProcessRead>
 8015656:	4603      	mov	r3, r0
}
 8015658:	4618      	mov	r0, r3
 801565a:	3718      	adds	r7, #24
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b086      	sub	sp, #24
 8015664:	af00      	add	r7, sp, #0
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	460b      	mov	r3, r1
 801566a:	607a      	str	r2, [r7, #4]
 801566c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	32b0      	adds	r2, #176	; 0xb0
 8015678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801567c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d102      	bne.n	801568a <SCSI_Write10+0x2a>
  {
    return -1;
 8015684:	f04f 33ff 	mov.w	r3, #4294967295
 8015688:	e0ba      	b.n	8015800 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	7a1b      	ldrb	r3, [r3, #8]
 801568e:	2b00      	cmp	r3, #0
 8015690:	f040 80b0 	bne.w	80157f4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801569a:	2b00      	cmp	r3, #0
 801569c:	d10a      	bne.n	80156b4 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801569e:	697b      	ldr	r3, [r7, #20]
 80156a0:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80156a4:	2320      	movs	r3, #32
 80156a6:	2205      	movs	r2, #5
 80156a8:	68f8      	ldr	r0, [r7, #12]
 80156aa:	f7ff fdab 	bl	8015204 <SCSI_SenseCode>
      return -1;
 80156ae:	f04f 33ff 	mov.w	r3, #4294967295
 80156b2:	e0a5      	b.n	8015800 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80156b4:	697b      	ldr	r3, [r7, #20]
 80156b6:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 80156ba:	b25b      	sxtb	r3, r3
 80156bc:	2b00      	cmp	r3, #0
 80156be:	da0a      	bge.n	80156d6 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80156c6:	2320      	movs	r3, #32
 80156c8:	2205      	movs	r2, #5
 80156ca:	68f8      	ldr	r0, [r7, #12]
 80156cc:	f7ff fd9a 	bl	8015204 <SCSI_SenseCode>
      return -1;
 80156d0:	f04f 33ff 	mov.w	r3, #4294967295
 80156d4:	e094      	b.n	8015800 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80156dc:	68fa      	ldr	r2, [r7, #12]
 80156de:	33b0      	adds	r3, #176	; 0xb0
 80156e0:	009b      	lsls	r3, r3, #2
 80156e2:	4413      	add	r3, r2
 80156e4:	685b      	ldr	r3, [r3, #4]
 80156e6:	689b      	ldr	r3, [r3, #8]
 80156e8:	7afa      	ldrb	r2, [r7, #11]
 80156ea:	4610      	mov	r0, r2
 80156ec:	4798      	blx	r3
 80156ee:	4603      	mov	r3, r0
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d008      	beq.n	8015706 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80156f4:	7af9      	ldrb	r1, [r7, #11]
 80156f6:	233a      	movs	r3, #58	; 0x3a
 80156f8:	2202      	movs	r2, #2
 80156fa:	68f8      	ldr	r0, [r7, #12]
 80156fc:	f7ff fd82 	bl	8015204 <SCSI_SenseCode>
      return -1;
 8015700:	f04f 33ff 	mov.w	r3, #4294967295
 8015704:	e07c      	b.n	8015800 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801570c:	68fa      	ldr	r2, [r7, #12]
 801570e:	33b0      	adds	r3, #176	; 0xb0
 8015710:	009b      	lsls	r3, r3, #2
 8015712:	4413      	add	r3, r2
 8015714:	685b      	ldr	r3, [r3, #4]
 8015716:	68db      	ldr	r3, [r3, #12]
 8015718:	7afa      	ldrb	r2, [r7, #11]
 801571a:	4610      	mov	r0, r2
 801571c:	4798      	blx	r3
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d008      	beq.n	8015736 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8015724:	7af9      	ldrb	r1, [r7, #11]
 8015726:	2327      	movs	r3, #39	; 0x27
 8015728:	2202      	movs	r2, #2
 801572a:	68f8      	ldr	r0, [r7, #12]
 801572c:	f7ff fd6a 	bl	8015204 <SCSI_SenseCode>
      return -1;
 8015730:	f04f 33ff 	mov.w	r3, #4294967295
 8015734:	e064      	b.n	8015800 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	3302      	adds	r3, #2
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	3303      	adds	r3, #3
 8015742:	781b      	ldrb	r3, [r3, #0]
 8015744:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015746:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	3304      	adds	r3, #4
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015750:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015752:	687a      	ldr	r2, [r7, #4]
 8015754:	3205      	adds	r2, #5
 8015756:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015758:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	3307      	adds	r3, #7
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015768:	687a      	ldr	r2, [r7, #4]
 801576a:	3208      	adds	r2, #8
 801576c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801576e:	431a      	orrs	r2, r3
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015782:	7af9      	ldrb	r1, [r7, #11]
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	f000 f964 	bl	8015a52 <SCSI_CheckAddressRange>
 801578a:	4603      	mov	r3, r0
 801578c:	2b00      	cmp	r3, #0
 801578e:	da02      	bge.n	8015796 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015790:	f04f 33ff 	mov.w	r3, #4294967295
 8015794:	e034      	b.n	8015800 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801579c:	697a      	ldr	r2, [r7, #20]
 801579e:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 80157a2:	fb02 f303 	mul.w	r3, r2, r3
 80157a6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 80157ae:	693a      	ldr	r2, [r7, #16]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d00a      	beq.n	80157ca <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 80157ba:	2320      	movs	r3, #32
 80157bc:	2205      	movs	r2, #5
 80157be:	68f8      	ldr	r0, [r7, #12]
 80157c0:	f7ff fd20 	bl	8015204 <SCSI_SenseCode>
      return -1;
 80157c4:	f04f 33ff 	mov.w	r3, #4294967295
 80157c8:	e01a      	b.n	8015800 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80157ca:	693b      	ldr	r3, [r7, #16]
 80157cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80157d0:	bf28      	it	cs
 80157d2:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80157d6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	2201      	movs	r2, #1
 80157dc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80157de:	4b0a      	ldr	r3, [pc, #40]	; (8015808 <SCSI_Write10+0x1a8>)
 80157e0:	7819      	ldrb	r1, [r3, #0]
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	f103 0210 	add.w	r2, r3, #16
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	68f8      	ldr	r0, [r7, #12]
 80157ec:	f006 f89d 	bl	801b92a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80157f0:	2300      	movs	r3, #0
 80157f2:	e005      	b.n	8015800 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80157f4:	7afb      	ldrb	r3, [r7, #11]
 80157f6:	4619      	mov	r1, r3
 80157f8:	68f8      	ldr	r0, [r7, #12]
 80157fa:	f000 f9dd 	bl	8015bb8 <SCSI_ProcessWrite>
 80157fe:	4603      	mov	r3, r0
}
 8015800:	4618      	mov	r0, r3
 8015802:	3718      	adds	r7, #24
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}
 8015808:	200000af 	.word	0x200000af

0801580c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b086      	sub	sp, #24
 8015810:	af00      	add	r7, sp, #0
 8015812:	60f8      	str	r0, [r7, #12]
 8015814:	460b      	mov	r3, r1
 8015816:	607a      	str	r2, [r7, #4]
 8015818:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	32b0      	adds	r2, #176	; 0xb0
 8015824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015828:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d102      	bne.n	8015836 <SCSI_Write12+0x2a>
  {
    return -1;
 8015830:	f04f 33ff 	mov.w	r3, #4294967295
 8015834:	e0ca      	b.n	80159cc <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	7a1b      	ldrb	r3, [r3, #8]
 801583a:	2b00      	cmp	r3, #0
 801583c:	f040 80c0 	bne.w	80159c0 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8015846:	2b00      	cmp	r3, #0
 8015848:	d10a      	bne.n	8015860 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015850:	2320      	movs	r3, #32
 8015852:	2205      	movs	r2, #5
 8015854:	68f8      	ldr	r0, [r7, #12]
 8015856:	f7ff fcd5 	bl	8015204 <SCSI_SenseCode>
      return -1;
 801585a:	f04f 33ff 	mov.w	r3, #4294967295
 801585e:	e0b5      	b.n	80159cc <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	f893 381c 	ldrb.w	r3, [r3, #2076]	; 0x81c
 8015866:	b25b      	sxtb	r3, r3
 8015868:	2b00      	cmp	r3, #0
 801586a:	da0a      	bge.n	8015882 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015872:	2320      	movs	r3, #32
 8015874:	2205      	movs	r2, #5
 8015876:	68f8      	ldr	r0, [r7, #12]
 8015878:	f7ff fcc4 	bl	8015204 <SCSI_SenseCode>
      return -1;
 801587c:	f04f 33ff 	mov.w	r3, #4294967295
 8015880:	e0a4      	b.n	80159cc <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015888:	68fa      	ldr	r2, [r7, #12]
 801588a:	33b0      	adds	r3, #176	; 0xb0
 801588c:	009b      	lsls	r3, r3, #2
 801588e:	4413      	add	r3, r2
 8015890:	685b      	ldr	r3, [r3, #4]
 8015892:	689b      	ldr	r3, [r3, #8]
 8015894:	7afa      	ldrb	r2, [r7, #11]
 8015896:	4610      	mov	r0, r2
 8015898:	4798      	blx	r3
 801589a:	4603      	mov	r3, r0
 801589c:	2b00      	cmp	r3, #0
 801589e:	d00b      	beq.n	80158b8 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80158a0:	7af9      	ldrb	r1, [r7, #11]
 80158a2:	233a      	movs	r3, #58	; 0x3a
 80158a4:	2202      	movs	r2, #2
 80158a6:	68f8      	ldr	r0, [r7, #12]
 80158a8:	f7ff fcac 	bl	8015204 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	2205      	movs	r2, #5
 80158b0:	721a      	strb	r2, [r3, #8]
      return -1;
 80158b2:	f04f 33ff 	mov.w	r3, #4294967295
 80158b6:	e089      	b.n	80159cc <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80158be:	68fa      	ldr	r2, [r7, #12]
 80158c0:	33b0      	adds	r3, #176	; 0xb0
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	4413      	add	r3, r2
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	7afa      	ldrb	r2, [r7, #11]
 80158cc:	4610      	mov	r0, r2
 80158ce:	4798      	blx	r3
 80158d0:	4603      	mov	r3, r0
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d00b      	beq.n	80158ee <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80158d6:	7af9      	ldrb	r1, [r7, #11]
 80158d8:	2327      	movs	r3, #39	; 0x27
 80158da:	2202      	movs	r2, #2
 80158dc:	68f8      	ldr	r0, [r7, #12]
 80158de:	f7ff fc91 	bl	8015204 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80158e2:	697b      	ldr	r3, [r7, #20]
 80158e4:	2205      	movs	r2, #5
 80158e6:	721a      	strb	r2, [r3, #8]
      return -1;
 80158e8:	f04f 33ff 	mov.w	r3, #4294967295
 80158ec:	e06e      	b.n	80159cc <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	3302      	adds	r3, #2
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	3303      	adds	r3, #3
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80158fe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	3304      	adds	r3, #4
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015908:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	3205      	adds	r2, #5
 801590e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015910:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	3306      	adds	r3, #6
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	3307      	adds	r3, #7
 8015924:	781b      	ldrb	r3, [r3, #0]
 8015926:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015928:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	3308      	adds	r3, #8
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015932:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	3209      	adds	r2, #9
 8015938:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801593a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801594e:	7af9      	ldrb	r1, [r7, #11]
 8015950:	68f8      	ldr	r0, [r7, #12]
 8015952:	f000 f87e 	bl	8015a52 <SCSI_CheckAddressRange>
 8015956:	4603      	mov	r3, r0
 8015958:	2b00      	cmp	r3, #0
 801595a:	da02      	bge.n	8015962 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801595c:	f04f 33ff 	mov.w	r3, #4294967295
 8015960:	e034      	b.n	80159cc <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015968:	697a      	ldr	r2, [r7, #20]
 801596a:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 801596e:	fb02 f303 	mul.w	r3, r2, r3
 8015972:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8015974:	697b      	ldr	r3, [r7, #20]
 8015976:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 801597a:	693a      	ldr	r2, [r7, #16]
 801597c:	429a      	cmp	r2, r3
 801597e:	d00a      	beq.n	8015996 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	f893 181d 	ldrb.w	r1, [r3, #2077]	; 0x81d
 8015986:	2320      	movs	r3, #32
 8015988:	2205      	movs	r2, #5
 801598a:	68f8      	ldr	r0, [r7, #12]
 801598c:	f7ff fc3a 	bl	8015204 <SCSI_SenseCode>
      return -1;
 8015990:	f04f 33ff 	mov.w	r3, #4294967295
 8015994:	e01a      	b.n	80159cc <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801599c:	bf28      	it	cs
 801599e:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80159a2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	2201      	movs	r2, #1
 80159a8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80159aa:	4b0a      	ldr	r3, [pc, #40]	; (80159d4 <SCSI_Write12+0x1c8>)
 80159ac:	7819      	ldrb	r1, [r3, #0]
 80159ae:	697b      	ldr	r3, [r7, #20]
 80159b0:	f103 0210 	add.w	r2, r3, #16
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f005 ffb7 	bl	801b92a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80159bc:	2300      	movs	r3, #0
 80159be:	e005      	b.n	80159cc <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80159c0:	7afb      	ldrb	r3, [r7, #11]
 80159c2:	4619      	mov	r1, r3
 80159c4:	68f8      	ldr	r0, [r7, #12]
 80159c6:	f000 f8f7 	bl	8015bb8 <SCSI_ProcessWrite>
 80159ca:	4603      	mov	r3, r0
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3718      	adds	r7, #24
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}
 80159d4:	200000af 	.word	0x200000af

080159d8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b086      	sub	sp, #24
 80159dc:	af00      	add	r7, sp, #0
 80159de:	60f8      	str	r0, [r7, #12]
 80159e0:	460b      	mov	r3, r1
 80159e2:	607a      	str	r2, [r7, #4]
 80159e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	32b0      	adds	r2, #176	; 0xb0
 80159f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80159f6:	697b      	ldr	r3, [r7, #20]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d102      	bne.n	8015a02 <SCSI_Verify10+0x2a>
  {
    return -1;
 80159fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015a00:	e023      	b.n	8015a4a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	3301      	adds	r3, #1
 8015a06:	781b      	ldrb	r3, [r3, #0]
 8015a08:	f003 0302 	and.w	r3, r3, #2
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d008      	beq.n	8015a22 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015a10:	7af9      	ldrb	r1, [r7, #11]
 8015a12:	2324      	movs	r3, #36	; 0x24
 8015a14:	2205      	movs	r2, #5
 8015a16:	68f8      	ldr	r0, [r7, #12]
 8015a18:	f7ff fbf4 	bl	8015204 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8015a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a20:	e013      	b.n	8015a4a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015a2e:	7af9      	ldrb	r1, [r7, #11]
 8015a30:	68f8      	ldr	r0, [r7, #12]
 8015a32:	f000 f80e 	bl	8015a52 <SCSI_CheckAddressRange>
 8015a36:	4603      	mov	r3, r0
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	da02      	bge.n	8015a42 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8015a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a40:	e003      	b.n	8015a4a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8015a42:	697b      	ldr	r3, [r7, #20]
 8015a44:	2200      	movs	r2, #0
 8015a46:	60da      	str	r2, [r3, #12]

  return 0;
 8015a48:	2300      	movs	r3, #0
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3718      	adds	r7, #24
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}

08015a52 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015a52:	b580      	push	{r7, lr}
 8015a54:	b086      	sub	sp, #24
 8015a56:	af00      	add	r7, sp, #0
 8015a58:	60f8      	str	r0, [r7, #12]
 8015a5a:	607a      	str	r2, [r7, #4]
 8015a5c:	603b      	str	r3, [r7, #0]
 8015a5e:	460b      	mov	r3, r1
 8015a60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	32b0      	adds	r2, #176	; 0xb0
 8015a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a70:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d102      	bne.n	8015a7e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8015a78:	f04f 33ff 	mov.w	r3, #4294967295
 8015a7c:	e011      	b.n	8015aa2 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	441a      	add	r2, r3
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d908      	bls.n	8015aa0 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8015a8e:	7af9      	ldrb	r1, [r7, #11]
 8015a90:	2321      	movs	r3, #33	; 0x21
 8015a92:	2205      	movs	r2, #5
 8015a94:	68f8      	ldr	r0, [r7, #12]
 8015a96:	f7ff fbb5 	bl	8015204 <SCSI_SenseCode>
    return -1;
 8015a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a9e:	e000      	b.n	8015aa2 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8015aa0:	2300      	movs	r3, #0
}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3718      	adds	r7, #24
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}
	...

08015aac <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015aac:	b590      	push	{r4, r7, lr}
 8015aae:	b085      	sub	sp, #20
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	460b      	mov	r3, r1
 8015ab6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	32b0      	adds	r2, #176	; 0xb0
 8015ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ac6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d102      	bne.n	8015ad4 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8015ace:	f04f 33ff 	mov.w	r3, #4294967295
 8015ad2:	e06a      	b.n	8015baa <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015ada:	68fa      	ldr	r2, [r7, #12]
 8015adc:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015ae0:	fb02 f303 	mul.w	r3, r2, r3
 8015ae4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015aec:	bf28      	it	cs
 8015aee:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015af2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015afa:	687a      	ldr	r2, [r7, #4]
 8015afc:	33b0      	adds	r3, #176	; 0xb0
 8015afe:	009b      	lsls	r3, r3, #2
 8015b00:	4413      	add	r3, r2
 8015b02:	685b      	ldr	r3, [r3, #4]
 8015b04:	691c      	ldr	r4, [r3, #16]
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	f103 0110 	add.w	r1, r3, #16
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015b18:	4618      	mov	r0, r3
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8015b20:	b29b      	uxth	r3, r3
 8015b22:	78f8      	ldrb	r0, [r7, #3]
 8015b24:	47a0      	blx	r4
 8015b26:	4603      	mov	r3, r0
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	da08      	bge.n	8015b3e <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015b2c:	78f9      	ldrb	r1, [r7, #3]
 8015b2e:	2311      	movs	r3, #17
 8015b30:	2204      	movs	r2, #4
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f7ff fb66 	bl	8015204 <SCSI_SenseCode>
    return -1;
 8015b38:	f04f 33ff 	mov.w	r3, #4294967295
 8015b3c:	e035      	b.n	8015baa <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8015b3e:	4b1d      	ldr	r3, [pc, #116]	; (8015bb4 <SCSI_ProcessRead+0x108>)
 8015b40:	7819      	ldrb	r1, [r3, #0]
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	f103 0210 	add.w	r2, r3, #16
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f005 fecc 	bl	801b8e8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015b5c:	4619      	mov	r1, r3
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	fbb3 f3f1 	udiv	r3, r3, r1
 8015b64:	441a      	add	r2, r3
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015b78:	4619      	mov	r1, r3
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015b80:	1ad2      	subs	r2, r2, r3
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015b8e:	68bb      	ldr	r3, [r7, #8]
 8015b90:	1ad2      	subs	r2, r2, r3
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d102      	bne.n	8015ba8 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	2203      	movs	r2, #3
 8015ba6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8015ba8:	2300      	movs	r3, #0
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3714      	adds	r7, #20
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd90      	pop	{r4, r7, pc}
 8015bb2:	bf00      	nop
 8015bb4:	200000ae 	.word	0x200000ae

08015bb8 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015bb8:	b590      	push	{r4, r7, lr}
 8015bba:	b085      	sub	sp, #20
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	460b      	mov	r3, r1
 8015bc2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	32b0      	adds	r2, #176	; 0xb0
 8015bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bd2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d102      	bne.n	8015be0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8015bda:	f04f 33ff 	mov.w	r3, #4294967295
 8015bde:	e07a      	b.n	8015cd6 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015be6:	68fa      	ldr	r2, [r7, #12]
 8015be8:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015bec:	fb02 f303 	mul.w	r3, r2, r3
 8015bf0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015bf8:	bf28      	it	cs
 8015bfa:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015bfe:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c06:	687a      	ldr	r2, [r7, #4]
 8015c08:	33b0      	adds	r3, #176	; 0xb0
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	4413      	add	r3, r2
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	695c      	ldr	r4, [r3, #20]
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	f103 0110 	add.w	r1, r3, #16
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015c24:	4618      	mov	r0, r3
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	78f8      	ldrb	r0, [r7, #3]
 8015c30:	47a0      	blx	r4
 8015c32:	4603      	mov	r3, r0
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	da08      	bge.n	8015c4a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015c38:	78f9      	ldrb	r1, [r7, #3]
 8015c3a:	2303      	movs	r3, #3
 8015c3c:	2204      	movs	r2, #4
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f7ff fae0 	bl	8015204 <SCSI_SenseCode>
    return -1;
 8015c44:	f04f 33ff 	mov.w	r3, #4294967295
 8015c48:	e045      	b.n	8015cd6 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015c56:	4619      	mov	r1, r3
 8015c58:	68bb      	ldr	r3, [r7, #8]
 8015c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8015c5e:	441a      	add	r2, r3
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	f8d3 2870 	ldr.w	r2, [r3, #2160]	; 0x870
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	f8b3 3864 	ldrh.w	r3, [r3, #2148]	; 0x864
 8015c72:	4619      	mov	r1, r3
 8015c74:	68bb      	ldr	r3, [r7, #8]
 8015c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8015c7a:	1ad2      	subs	r2, r2, r3
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f8d3 2838 	ldr.w	r2, [r3, #2104]	; 0x838
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	1ad2      	subs	r2, r2, r3
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	f8c3 2838 	str.w	r2, [r3, #2104]	; 0x838

  if (hmsc->scsi_blk_len == 0U)
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d104      	bne.n	8015ca6 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8015c9c:	2100      	movs	r1, #0
 8015c9e:	6878      	ldr	r0, [r7, #4]
 8015ca0:	f7fe fd0e 	bl	80146c0 <MSC_BOT_SendCSW>
 8015ca4:	e016      	b.n	8015cd4 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 8015cac:	68fa      	ldr	r2, [r7, #12]
 8015cae:	f8b2 2864 	ldrh.w	r2, [r2, #2148]	; 0x864
 8015cb2:	fb02 f303 	mul.w	r3, r2, r3
 8015cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015cba:	bf28      	it	cs
 8015cbc:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8015cc0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8015cc2:	4b07      	ldr	r3, [pc, #28]	; (8015ce0 <SCSI_ProcessWrite+0x128>)
 8015cc4:	7819      	ldrb	r1, [r3, #0]
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	f103 0210 	add.w	r2, r3, #16
 8015ccc:	68bb      	ldr	r3, [r7, #8]
 8015cce:	6878      	ldr	r0, [r7, #4]
 8015cd0:	f005 fe2b 	bl	801b92a <USBD_LL_PrepareReceive>
  }

  return 0;
 8015cd4:	2300      	movs	r3, #0
}
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	3714      	adds	r7, #20
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd90      	pop	{r4, r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	200000af 	.word	0x200000af

08015ce4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b087      	sub	sp, #28
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	4613      	mov	r3, r2
 8015cf0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8015cf2:	88fb      	ldrh	r3, [r7, #6]
 8015cf4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d102      	bne.n	8015d02 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8015cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8015d00:	e013      	b.n	8015d2a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8015d02:	8afa      	ldrh	r2, [r7, #22]
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015d08:	e00b      	b.n	8015d22 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8015d0a:	8afb      	ldrh	r3, [r7, #22]
 8015d0c:	3b01      	subs	r3, #1
 8015d0e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015d10:	8afb      	ldrh	r3, [r7, #22]
 8015d12:	68ba      	ldr	r2, [r7, #8]
 8015d14:	441a      	add	r2, r3
 8015d16:	8afb      	ldrh	r3, [r7, #22]
 8015d18:	7811      	ldrb	r1, [r2, #0]
 8015d1a:	68fa      	ldr	r2, [r7, #12]
 8015d1c:	4413      	add	r3, r2
 8015d1e:	460a      	mov	r2, r1
 8015d20:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8015d22:	8afb      	ldrh	r3, [r7, #22]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d1f0      	bne.n	8015d0a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8015d28:	2300      	movs	r3, #0
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	371c      	adds	r7, #28
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d34:	4770      	bx	lr

08015d36 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015d36:	b580      	push	{r7, lr}
 8015d38:	b086      	sub	sp, #24
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	60f8      	str	r0, [r7, #12]
 8015d3e:	60b9      	str	r1, [r7, #8]
 8015d40:	4613      	mov	r3, r2
 8015d42:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d101      	bne.n	8015d4e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015d4a:	2303      	movs	r3, #3
 8015d4c:	e01f      	b.n	8015d8e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	2200      	movs	r2, #0
 8015d52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	2200      	movs	r2, #0
 8015d5a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	2200      	movs	r2, #0
 8015d62:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015d66:	68bb      	ldr	r3, [r7, #8]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d003      	beq.n	8015d74 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	68ba      	ldr	r2, [r7, #8]
 8015d70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2201      	movs	r2, #1
 8015d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	79fa      	ldrb	r2, [r7, #7]
 8015d80:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	f005 fc26 	bl	801b5d4 <USBD_LL_Init>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3718      	adds	r7, #24
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}

08015d96 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8015d96:	b580      	push	{r7, lr}
 8015d98:	b084      	sub	sp, #16
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f005 fc9a 	bl	801b6d8 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2201      	movs	r2, #1
 8015da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
    }
  }
#else
  /* Free Class Resources */
  if (pdev->pClass[0] != NULL)
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d009      	beq.n	8015dca <USBD_DeInit+0x34>
  {
    pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	687a      	ldr	r2, [r7, #4]
 8015dc0:	6852      	ldr	r2, [r2, #4]
 8015dc2:	b2d2      	uxtb	r2, r2
 8015dc4:	4611      	mov	r1, r2
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	4798      	blx	r3
  }

  pdev->pUserData[0] = NULL;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

#endif /* USE_USBD_COMPOSITE */

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	2200      	movs	r2, #0
 8015dde:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f005 fc42 	bl	801b66c <USBD_LL_DeInit>
 8015de8:	4603      	mov	r3, r0
 8015dea:	73fb      	strb	r3, [r7, #15]

  return ret;
 8015dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dee:	4618      	mov	r0, r3
 8015df0:	3710      	adds	r7, #16
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}

08015df6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015df6:	b580      	push	{r7, lr}
 8015df8:	b084      	sub	sp, #16
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	6078      	str	r0, [r7, #4]
 8015dfe:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015e00:	2300      	movs	r3, #0
 8015e02:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d101      	bne.n	8015e0e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015e0a:	2303      	movs	r3, #3
 8015e0c:	e025      	b.n	8015e5a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	683a      	ldr	r2, [r7, #0]
 8015e12:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	32ae      	adds	r2, #174	; 0xae
 8015e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d00f      	beq.n	8015e4a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	32ae      	adds	r2, #174	; 0xae
 8015e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e3a:	f107 020e 	add.w	r2, r7, #14
 8015e3e:	4610      	mov	r0, r2
 8015e40:	4798      	blx	r3
 8015e42:	4602      	mov	r2, r0
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015e50:	1c5a      	adds	r2, r3, #1
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015e58:	2300      	movs	r3, #0
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3710      	adds	r7, #16
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b082      	sub	sp, #8
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015e6a:	6878      	ldr	r0, [r7, #4]
 8015e6c:	f005 fc19 	bl	801b6a2 <USBD_LL_Start>
 8015e70:	4603      	mov	r3, r0
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3708      	adds	r7, #8
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}

08015e7a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8015e7a:	b580      	push	{r7, lr}
 8015e7c:	b082      	sub	sp, #8
 8015e7e:	af00      	add	r7, sp, #0
 8015e80:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f005 fc28 	bl	801b6d8 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d009      	beq.n	8015ea6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	687a      	ldr	r2, [r7, #4]
 8015e9c:	6852      	ldr	r2, [r2, #4]
 8015e9e:	b2d2      	uxtb	r2, r2
 8015ea0:	4611      	mov	r1, r2
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8015ea6:	2300      	movs	r3, #0
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3708      	adds	r7, #8
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	b083      	sub	sp, #12
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015eb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	370c      	adds	r7, #12
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec4:	4770      	bx	lr

08015ec6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015ec6:	b580      	push	{r7, lr}
 8015ec8:	b084      	sub	sp, #16
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	6078      	str	r0, [r7, #4]
 8015ece:	460b      	mov	r3, r1
 8015ed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d009      	beq.n	8015ef4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	78fa      	ldrb	r2, [r7, #3]
 8015eea:	4611      	mov	r1, r2
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	4798      	blx	r3
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3710      	adds	r7, #16
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}

08015efe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015efe:	b580      	push	{r7, lr}
 8015f00:	b084      	sub	sp, #16
 8015f02:	af00      	add	r7, sp, #0
 8015f04:	6078      	str	r0, [r7, #4]
 8015f06:	460b      	mov	r3, r1
 8015f08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f14:	685b      	ldr	r3, [r3, #4]
 8015f16:	78fa      	ldrb	r2, [r7, #3]
 8015f18:	4611      	mov	r1, r2
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	4798      	blx	r3
 8015f1e:	4603      	mov	r3, r0
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d001      	beq.n	8015f28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015f24:	2303      	movs	r3, #3
 8015f26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3710      	adds	r7, #16
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}

08015f32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015f32:	b580      	push	{r7, lr}
 8015f34:	b084      	sub	sp, #16
 8015f36:	af00      	add	r7, sp, #0
 8015f38:	6078      	str	r0, [r7, #4]
 8015f3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f42:	6839      	ldr	r1, [r7, #0]
 8015f44:	4618      	mov	r0, r3
 8015f46:	f001 f908 	bl	801715a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015f58:	461a      	mov	r2, r3
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015f66:	f003 031f 	and.w	r3, r3, #31
 8015f6a:	2b02      	cmp	r3, #2
 8015f6c:	d01a      	beq.n	8015fa4 <USBD_LL_SetupStage+0x72>
 8015f6e:	2b02      	cmp	r3, #2
 8015f70:	d822      	bhi.n	8015fb8 <USBD_LL_SetupStage+0x86>
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d002      	beq.n	8015f7c <USBD_LL_SetupStage+0x4a>
 8015f76:	2b01      	cmp	r3, #1
 8015f78:	d00a      	beq.n	8015f90 <USBD_LL_SetupStage+0x5e>
 8015f7a:	e01d      	b.n	8015fb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f82:	4619      	mov	r1, r3
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f000 fb5f 	bl	8016648 <USBD_StdDevReq>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8015f8e:	e020      	b.n	8015fd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f96:	4619      	mov	r1, r3
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f000 fbc7 	bl	801672c <USBD_StdItfReq>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8015fa2:	e016      	b.n	8015fd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015faa:	4619      	mov	r1, r3
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f000 fc29 	bl	8016804 <USBD_StdEPReq>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8015fb6:	e00c      	b.n	8015fd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015fbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015fc2:	b2db      	uxtb	r3, r3
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f005 fc05 	bl	801b7d6 <USBD_LL_StallEP>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	73fb      	strb	r3, [r7, #15]
      break;
 8015fd0:	bf00      	nop
  }

  return ret;
 8015fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3710      	adds	r7, #16
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b086      	sub	sp, #24
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	460b      	mov	r3, r1
 8015fe6:	607a      	str	r2, [r7, #4]
 8015fe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015fea:	2300      	movs	r3, #0
 8015fec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015fee:	7afb      	ldrb	r3, [r7, #11]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d16e      	bne.n	80160d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015ffa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016002:	2b03      	cmp	r3, #3
 8016004:	f040 8098 	bne.w	8016138 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	689a      	ldr	r2, [r3, #8]
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	68db      	ldr	r3, [r3, #12]
 8016010:	429a      	cmp	r2, r3
 8016012:	d913      	bls.n	801603c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016014:	693b      	ldr	r3, [r7, #16]
 8016016:	689a      	ldr	r2, [r3, #8]
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	68db      	ldr	r3, [r3, #12]
 801601c:	1ad2      	subs	r2, r2, r3
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	68da      	ldr	r2, [r3, #12]
 8016026:	693b      	ldr	r3, [r7, #16]
 8016028:	689b      	ldr	r3, [r3, #8]
 801602a:	4293      	cmp	r3, r2
 801602c:	bf28      	it	cs
 801602e:	4613      	movcs	r3, r2
 8016030:	461a      	mov	r2, r3
 8016032:	6879      	ldr	r1, [r7, #4]
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f001 f967 	bl	8017308 <USBD_CtlContinueRx>
 801603a:	e07d      	b.n	8016138 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016042:	f003 031f 	and.w	r3, r3, #31
 8016046:	2b02      	cmp	r3, #2
 8016048:	d014      	beq.n	8016074 <USBD_LL_DataOutStage+0x98>
 801604a:	2b02      	cmp	r3, #2
 801604c:	d81d      	bhi.n	801608a <USBD_LL_DataOutStage+0xae>
 801604e:	2b00      	cmp	r3, #0
 8016050:	d002      	beq.n	8016058 <USBD_LL_DataOutStage+0x7c>
 8016052:	2b01      	cmp	r3, #1
 8016054:	d003      	beq.n	801605e <USBD_LL_DataOutStage+0x82>
 8016056:	e018      	b.n	801608a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016058:	2300      	movs	r3, #0
 801605a:	75bb      	strb	r3, [r7, #22]
            break;
 801605c:	e018      	b.n	8016090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016064:	b2db      	uxtb	r3, r3
 8016066:	4619      	mov	r1, r3
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f000 fa5e 	bl	801652a <USBD_CoreFindIF>
 801606e:	4603      	mov	r3, r0
 8016070:	75bb      	strb	r3, [r7, #22]
            break;
 8016072:	e00d      	b.n	8016090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801607a:	b2db      	uxtb	r3, r3
 801607c:	4619      	mov	r1, r3
 801607e:	68f8      	ldr	r0, [r7, #12]
 8016080:	f000 fa60 	bl	8016544 <USBD_CoreFindEP>
 8016084:	4603      	mov	r3, r0
 8016086:	75bb      	strb	r3, [r7, #22]
            break;
 8016088:	e002      	b.n	8016090 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801608a:	2300      	movs	r3, #0
 801608c:	75bb      	strb	r3, [r7, #22]
            break;
 801608e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016090:	7dbb      	ldrb	r3, [r7, #22]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d119      	bne.n	80160ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801609c:	b2db      	uxtb	r3, r3
 801609e:	2b03      	cmp	r3, #3
 80160a0:	d113      	bne.n	80160ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80160a2:	7dba      	ldrb	r2, [r7, #22]
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	32ae      	adds	r2, #174	; 0xae
 80160a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160ac:	691b      	ldr	r3, [r3, #16]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d00b      	beq.n	80160ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80160b2:	7dba      	ldrb	r2, [r7, #22]
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80160ba:	7dba      	ldrb	r2, [r7, #22]
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	32ae      	adds	r2, #174	; 0xae
 80160c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160c4:	691b      	ldr	r3, [r3, #16]
 80160c6:	68f8      	ldr	r0, [r7, #12]
 80160c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80160ca:	68f8      	ldr	r0, [r7, #12]
 80160cc:	f001 f92d 	bl	801732a <USBD_CtlSendStatus>
 80160d0:	e032      	b.n	8016138 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80160d2:	7afb      	ldrb	r3, [r7, #11]
 80160d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	4619      	mov	r1, r3
 80160dc:	68f8      	ldr	r0, [r7, #12]
 80160de:	f000 fa31 	bl	8016544 <USBD_CoreFindEP>
 80160e2:	4603      	mov	r3, r0
 80160e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160e6:	7dbb      	ldrb	r3, [r7, #22]
 80160e8:	2bff      	cmp	r3, #255	; 0xff
 80160ea:	d025      	beq.n	8016138 <USBD_LL_DataOutStage+0x15c>
 80160ec:	7dbb      	ldrb	r3, [r7, #22]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d122      	bne.n	8016138 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160f8:	b2db      	uxtb	r3, r3
 80160fa:	2b03      	cmp	r3, #3
 80160fc:	d117      	bne.n	801612e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80160fe:	7dba      	ldrb	r2, [r7, #22]
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	32ae      	adds	r2, #174	; 0xae
 8016104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016108:	699b      	ldr	r3, [r3, #24]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d00f      	beq.n	801612e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801610e:	7dba      	ldrb	r2, [r7, #22]
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016116:	7dba      	ldrb	r2, [r7, #22]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	32ae      	adds	r2, #174	; 0xae
 801611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016120:	699b      	ldr	r3, [r3, #24]
 8016122:	7afa      	ldrb	r2, [r7, #11]
 8016124:	4611      	mov	r1, r2
 8016126:	68f8      	ldr	r0, [r7, #12]
 8016128:	4798      	blx	r3
 801612a:	4603      	mov	r3, r0
 801612c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801612e:	7dfb      	ldrb	r3, [r7, #23]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d001      	beq.n	8016138 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016134:	7dfb      	ldrb	r3, [r7, #23]
 8016136:	e000      	b.n	801613a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016138:	2300      	movs	r3, #0
}
 801613a:	4618      	mov	r0, r3
 801613c:	3718      	adds	r7, #24
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}

08016142 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016142:	b580      	push	{r7, lr}
 8016144:	b086      	sub	sp, #24
 8016146:	af00      	add	r7, sp, #0
 8016148:	60f8      	str	r0, [r7, #12]
 801614a:	460b      	mov	r3, r1
 801614c:	607a      	str	r2, [r7, #4]
 801614e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016150:	7afb      	ldrb	r3, [r7, #11]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d16f      	bne.n	8016236 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	3314      	adds	r3, #20
 801615a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016162:	2b02      	cmp	r3, #2
 8016164:	d15a      	bne.n	801621c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	689a      	ldr	r2, [r3, #8]
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	68db      	ldr	r3, [r3, #12]
 801616e:	429a      	cmp	r2, r3
 8016170:	d914      	bls.n	801619c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	689a      	ldr	r2, [r3, #8]
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	68db      	ldr	r3, [r3, #12]
 801617a:	1ad2      	subs	r2, r2, r3
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	689b      	ldr	r3, [r3, #8]
 8016184:	461a      	mov	r2, r3
 8016186:	6879      	ldr	r1, [r7, #4]
 8016188:	68f8      	ldr	r0, [r7, #12]
 801618a:	f001 f8ac 	bl	80172e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801618e:	2300      	movs	r3, #0
 8016190:	2200      	movs	r2, #0
 8016192:	2100      	movs	r1, #0
 8016194:	68f8      	ldr	r0, [r7, #12]
 8016196:	f005 fbc8 	bl	801b92a <USBD_LL_PrepareReceive>
 801619a:	e03f      	b.n	801621c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	68da      	ldr	r2, [r3, #12]
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	689b      	ldr	r3, [r3, #8]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d11c      	bne.n	80161e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80161a8:	693b      	ldr	r3, [r7, #16]
 80161aa:	685a      	ldr	r2, [r3, #4]
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d316      	bcc.n	80161e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	685a      	ldr	r2, [r3, #4]
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80161be:	429a      	cmp	r2, r3
 80161c0:	d20f      	bcs.n	80161e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80161c2:	2200      	movs	r2, #0
 80161c4:	2100      	movs	r1, #0
 80161c6:	68f8      	ldr	r0, [r7, #12]
 80161c8:	f001 f88d 	bl	80172e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	2200      	movs	r2, #0
 80161d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80161d4:	2300      	movs	r3, #0
 80161d6:	2200      	movs	r2, #0
 80161d8:	2100      	movs	r1, #0
 80161da:	68f8      	ldr	r0, [r7, #12]
 80161dc:	f005 fba5 	bl	801b92a <USBD_LL_PrepareReceive>
 80161e0:	e01c      	b.n	801621c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161e8:	b2db      	uxtb	r3, r3
 80161ea:	2b03      	cmp	r3, #3
 80161ec:	d10f      	bne.n	801620e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161f4:	68db      	ldr	r3, [r3, #12]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d009      	beq.n	801620e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2200      	movs	r2, #0
 80161fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016208:	68db      	ldr	r3, [r3, #12]
 801620a:	68f8      	ldr	r0, [r7, #12]
 801620c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801620e:	2180      	movs	r1, #128	; 0x80
 8016210:	68f8      	ldr	r0, [r7, #12]
 8016212:	f005 fae0 	bl	801b7d6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016216:	68f8      	ldr	r0, [r7, #12]
 8016218:	f001 f89a 	bl	8017350 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016222:	2b00      	cmp	r3, #0
 8016224:	d03a      	beq.n	801629c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016226:	68f8      	ldr	r0, [r7, #12]
 8016228:	f7ff fe42 	bl	8015eb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	2200      	movs	r2, #0
 8016230:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016234:	e032      	b.n	801629c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016236:	7afb      	ldrb	r3, [r7, #11]
 8016238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801623c:	b2db      	uxtb	r3, r3
 801623e:	4619      	mov	r1, r3
 8016240:	68f8      	ldr	r0, [r7, #12]
 8016242:	f000 f97f 	bl	8016544 <USBD_CoreFindEP>
 8016246:	4603      	mov	r3, r0
 8016248:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801624a:	7dfb      	ldrb	r3, [r7, #23]
 801624c:	2bff      	cmp	r3, #255	; 0xff
 801624e:	d025      	beq.n	801629c <USBD_LL_DataInStage+0x15a>
 8016250:	7dfb      	ldrb	r3, [r7, #23]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d122      	bne.n	801629c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801625c:	b2db      	uxtb	r3, r3
 801625e:	2b03      	cmp	r3, #3
 8016260:	d11c      	bne.n	801629c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016262:	7dfa      	ldrb	r2, [r7, #23]
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	32ae      	adds	r2, #174	; 0xae
 8016268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801626c:	695b      	ldr	r3, [r3, #20]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d014      	beq.n	801629c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016272:	7dfa      	ldrb	r2, [r7, #23]
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801627a:	7dfa      	ldrb	r2, [r7, #23]
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	32ae      	adds	r2, #174	; 0xae
 8016280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016284:	695b      	ldr	r3, [r3, #20]
 8016286:	7afa      	ldrb	r2, [r7, #11]
 8016288:	4611      	mov	r1, r2
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	4798      	blx	r3
 801628e:	4603      	mov	r3, r0
 8016290:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016292:	7dbb      	ldrb	r3, [r7, #22]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d001      	beq.n	801629c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016298:	7dbb      	ldrb	r3, [r7, #22]
 801629a:	e000      	b.n	801629e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801629c:	2300      	movs	r3, #0
}
 801629e:	4618      	mov	r0, r3
 80162a0:	3718      	adds	r7, #24
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}

080162a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80162a6:	b580      	push	{r7, lr}
 80162a8:	b084      	sub	sp, #16
 80162aa:	af00      	add	r7, sp, #0
 80162ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80162ae:	2300      	movs	r3, #0
 80162b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	2201      	movs	r2, #1
 80162b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2200      	movs	r2, #0
 80162be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2200      	movs	r2, #0
 80162c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2200      	movs	r2, #0
 80162cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2200      	movs	r2, #0
 80162d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d014      	beq.n	801630c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162e8:	685b      	ldr	r3, [r3, #4]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d00e      	beq.n	801630c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162f4:	685b      	ldr	r3, [r3, #4]
 80162f6:	687a      	ldr	r2, [r7, #4]
 80162f8:	6852      	ldr	r2, [r2, #4]
 80162fa:	b2d2      	uxtb	r2, r2
 80162fc:	4611      	mov	r1, r2
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	4798      	blx	r3
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	d001      	beq.n	801630c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016308:	2303      	movs	r3, #3
 801630a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801630c:	2340      	movs	r3, #64	; 0x40
 801630e:	2200      	movs	r2, #0
 8016310:	2100      	movs	r1, #0
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f005 f9fb 	bl	801b70e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2201      	movs	r2, #1
 801631c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	2240      	movs	r2, #64	; 0x40
 8016324:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016328:	2340      	movs	r3, #64	; 0x40
 801632a:	2200      	movs	r2, #0
 801632c:	2180      	movs	r1, #128	; 0x80
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f005 f9ed 	bl	801b70e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	2201      	movs	r2, #1
 8016338:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2240      	movs	r2, #64	; 0x40
 801633e:	621a      	str	r2, [r3, #32]

  return ret;
 8016340:	7bfb      	ldrb	r3, [r7, #15]
}
 8016342:	4618      	mov	r0, r3
 8016344:	3710      	adds	r7, #16
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}

0801634a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801634a:	b480      	push	{r7}
 801634c:	b083      	sub	sp, #12
 801634e:	af00      	add	r7, sp, #0
 8016350:	6078      	str	r0, [r7, #4]
 8016352:	460b      	mov	r3, r1
 8016354:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	78fa      	ldrb	r2, [r7, #3]
 801635a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801635c:	2300      	movs	r3, #0
}
 801635e:	4618      	mov	r0, r3
 8016360:	370c      	adds	r7, #12
 8016362:	46bd      	mov	sp, r7
 8016364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016368:	4770      	bx	lr

0801636a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801636a:	b480      	push	{r7}
 801636c:	b083      	sub	sp, #12
 801636e:	af00      	add	r7, sp, #0
 8016370:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016378:	b2da      	uxtb	r2, r3
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2204      	movs	r2, #4
 8016384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016388:	2300      	movs	r3, #0
}
 801638a:	4618      	mov	r0, r3
 801638c:	370c      	adds	r7, #12
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr

08016396 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016396:	b480      	push	{r7}
 8016398:	b083      	sub	sp, #12
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163a4:	b2db      	uxtb	r3, r3
 80163a6:	2b04      	cmp	r3, #4
 80163a8:	d106      	bne.n	80163b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80163b0:	b2da      	uxtb	r2, r3
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80163b8:	2300      	movs	r3, #0
}
 80163ba:	4618      	mov	r0, r3
 80163bc:	370c      	adds	r7, #12
 80163be:	46bd      	mov	sp, r7
 80163c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c4:	4770      	bx	lr

080163c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80163c6:	b580      	push	{r7, lr}
 80163c8:	b082      	sub	sp, #8
 80163ca:	af00      	add	r7, sp, #0
 80163cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	2b03      	cmp	r3, #3
 80163d8:	d110      	bne.n	80163fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d00b      	beq.n	80163fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163ea:	69db      	ldr	r3, [r3, #28]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d005      	beq.n	80163fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163f6:	69db      	ldr	r3, [r3, #28]
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80163fc:	2300      	movs	r3, #0
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3708      	adds	r7, #8
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}

08016406 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016406:	b580      	push	{r7, lr}
 8016408:	b082      	sub	sp, #8
 801640a:	af00      	add	r7, sp, #0
 801640c:	6078      	str	r0, [r7, #4]
 801640e:	460b      	mov	r3, r1
 8016410:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	32ae      	adds	r2, #174	; 0xae
 801641c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d101      	bne.n	8016428 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016424:	2303      	movs	r3, #3
 8016426:	e01c      	b.n	8016462 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801642e:	b2db      	uxtb	r3, r3
 8016430:	2b03      	cmp	r3, #3
 8016432:	d115      	bne.n	8016460 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	32ae      	adds	r2, #174	; 0xae
 801643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016442:	6a1b      	ldr	r3, [r3, #32]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d00b      	beq.n	8016460 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	32ae      	adds	r2, #174	; 0xae
 8016452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016456:	6a1b      	ldr	r3, [r3, #32]
 8016458:	78fa      	ldrb	r2, [r7, #3]
 801645a:	4611      	mov	r1, r2
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016460:	2300      	movs	r3, #0
}
 8016462:	4618      	mov	r0, r3
 8016464:	3708      	adds	r7, #8
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}

0801646a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801646a:	b580      	push	{r7, lr}
 801646c:	b082      	sub	sp, #8
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
 8016472:	460b      	mov	r3, r1
 8016474:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	32ae      	adds	r2, #174	; 0xae
 8016480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d101      	bne.n	801648c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016488:	2303      	movs	r3, #3
 801648a:	e01c      	b.n	80164c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016492:	b2db      	uxtb	r3, r3
 8016494:	2b03      	cmp	r3, #3
 8016496:	d115      	bne.n	80164c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	32ae      	adds	r2, #174	; 0xae
 80164a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d00b      	beq.n	80164c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	32ae      	adds	r2, #174	; 0xae
 80164b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164bc:	78fa      	ldrb	r2, [r7, #3]
 80164be:	4611      	mov	r1, r2
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80164c4:	2300      	movs	r3, #0
}
 80164c6:	4618      	mov	r0, r3
 80164c8:	3708      	adds	r7, #8
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}

080164ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80164ce:	b480      	push	{r7}
 80164d0:	b083      	sub	sp, #12
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164d6:	2300      	movs	r3, #0
}
 80164d8:	4618      	mov	r0, r3
 80164da:	370c      	adds	r7, #12
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80164ec:	2300      	movs	r3, #0
 80164ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	2201      	movs	r2, #1
 80164f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d00e      	beq.n	8016520 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016508:	685b      	ldr	r3, [r3, #4]
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	6852      	ldr	r2, [r2, #4]
 801650e:	b2d2      	uxtb	r2, r2
 8016510:	4611      	mov	r1, r2
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	4798      	blx	r3
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d001      	beq.n	8016520 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801651c:	2303      	movs	r3, #3
 801651e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016520:	7bfb      	ldrb	r3, [r7, #15]
}
 8016522:	4618      	mov	r0, r3
 8016524:	3710      	adds	r7, #16
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}

0801652a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801652a:	b480      	push	{r7}
 801652c:	b083      	sub	sp, #12
 801652e:	af00      	add	r7, sp, #0
 8016530:	6078      	str	r0, [r7, #4]
 8016532:	460b      	mov	r3, r1
 8016534:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016536:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016538:	4618      	mov	r0, r3
 801653a:	370c      	adds	r7, #12
 801653c:	46bd      	mov	sp, r7
 801653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016542:	4770      	bx	lr

08016544 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	460b      	mov	r3, r1
 801654e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016550:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016552:	4618      	mov	r0, r3
 8016554:	370c      	adds	r7, #12
 8016556:	46bd      	mov	sp, r7
 8016558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655c:	4770      	bx	lr

0801655e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801655e:	b580      	push	{r7, lr}
 8016560:	b086      	sub	sp, #24
 8016562:	af00      	add	r7, sp, #0
 8016564:	6078      	str	r0, [r7, #4]
 8016566:	460b      	mov	r3, r1
 8016568:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016572:	2300      	movs	r3, #0
 8016574:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	885b      	ldrh	r3, [r3, #2]
 801657a:	b29a      	uxth	r2, r3
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	781b      	ldrb	r3, [r3, #0]
 8016580:	b29b      	uxth	r3, r3
 8016582:	429a      	cmp	r2, r3
 8016584:	d920      	bls.n	80165c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	b29b      	uxth	r3, r3
 801658c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801658e:	e013      	b.n	80165b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016590:	f107 030a 	add.w	r3, r7, #10
 8016594:	4619      	mov	r1, r3
 8016596:	6978      	ldr	r0, [r7, #20]
 8016598:	f000 f81b 	bl	80165d2 <USBD_GetNextDesc>
 801659c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	785b      	ldrb	r3, [r3, #1]
 80165a2:	2b05      	cmp	r3, #5
 80165a4:	d108      	bne.n	80165b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80165a6:	697b      	ldr	r3, [r7, #20]
 80165a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80165aa:	693b      	ldr	r3, [r7, #16]
 80165ac:	789b      	ldrb	r3, [r3, #2]
 80165ae:	78fa      	ldrb	r2, [r7, #3]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d008      	beq.n	80165c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80165b4:	2300      	movs	r3, #0
 80165b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	885b      	ldrh	r3, [r3, #2]
 80165bc:	b29a      	uxth	r2, r3
 80165be:	897b      	ldrh	r3, [r7, #10]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d8e5      	bhi.n	8016590 <USBD_GetEpDesc+0x32>
 80165c4:	e000      	b.n	80165c8 <USBD_GetEpDesc+0x6a>
          break;
 80165c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80165c8:	693b      	ldr	r3, [r7, #16]
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3718      	adds	r7, #24
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}

080165d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80165d2:	b480      	push	{r7}
 80165d4:	b085      	sub	sp, #20
 80165d6:	af00      	add	r7, sp, #0
 80165d8:	6078      	str	r0, [r7, #4]
 80165da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	881a      	ldrh	r2, [r3, #0]
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	b29b      	uxth	r3, r3
 80165ea:	4413      	add	r3, r2
 80165ec:	b29a      	uxth	r2, r3
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	461a      	mov	r2, r3
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	4413      	add	r3, r2
 80165fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80165fe:	68fb      	ldr	r3, [r7, #12]
}
 8016600:	4618      	mov	r0, r3
 8016602:	3714      	adds	r7, #20
 8016604:	46bd      	mov	sp, r7
 8016606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660a:	4770      	bx	lr

0801660c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801660c:	b480      	push	{r7}
 801660e:	b087      	sub	sp, #28
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	781b      	ldrb	r3, [r3, #0]
 801661c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	3301      	adds	r3, #1
 8016622:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801662a:	8a3b      	ldrh	r3, [r7, #16]
 801662c:	021b      	lsls	r3, r3, #8
 801662e:	b21a      	sxth	r2, r3
 8016630:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016634:	4313      	orrs	r3, r2
 8016636:	b21b      	sxth	r3, r3
 8016638:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801663a:	89fb      	ldrh	r3, [r7, #14]
}
 801663c:	4618      	mov	r0, r3
 801663e:	371c      	adds	r7, #28
 8016640:	46bd      	mov	sp, r7
 8016642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016646:	4770      	bx	lr

08016648 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016652:	2300      	movs	r3, #0
 8016654:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801665e:	2b40      	cmp	r3, #64	; 0x40
 8016660:	d005      	beq.n	801666e <USBD_StdDevReq+0x26>
 8016662:	2b40      	cmp	r3, #64	; 0x40
 8016664:	d857      	bhi.n	8016716 <USBD_StdDevReq+0xce>
 8016666:	2b00      	cmp	r3, #0
 8016668:	d00f      	beq.n	801668a <USBD_StdDevReq+0x42>
 801666a:	2b20      	cmp	r3, #32
 801666c:	d153      	bne.n	8016716 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	32ae      	adds	r2, #174	; 0xae
 8016678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801667c:	689b      	ldr	r3, [r3, #8]
 801667e:	6839      	ldr	r1, [r7, #0]
 8016680:	6878      	ldr	r0, [r7, #4]
 8016682:	4798      	blx	r3
 8016684:	4603      	mov	r3, r0
 8016686:	73fb      	strb	r3, [r7, #15]
      break;
 8016688:	e04a      	b.n	8016720 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	785b      	ldrb	r3, [r3, #1]
 801668e:	2b09      	cmp	r3, #9
 8016690:	d83b      	bhi.n	801670a <USBD_StdDevReq+0xc2>
 8016692:	a201      	add	r2, pc, #4	; (adr r2, 8016698 <USBD_StdDevReq+0x50>)
 8016694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016698:	080166ed 	.word	0x080166ed
 801669c:	08016701 	.word	0x08016701
 80166a0:	0801670b 	.word	0x0801670b
 80166a4:	080166f7 	.word	0x080166f7
 80166a8:	0801670b 	.word	0x0801670b
 80166ac:	080166cb 	.word	0x080166cb
 80166b0:	080166c1 	.word	0x080166c1
 80166b4:	0801670b 	.word	0x0801670b
 80166b8:	080166e3 	.word	0x080166e3
 80166bc:	080166d5 	.word	0x080166d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80166c0:	6839      	ldr	r1, [r7, #0]
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f000 fa3c 	bl	8016b40 <USBD_GetDescriptor>
          break;
 80166c8:	e024      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80166ca:	6839      	ldr	r1, [r7, #0]
 80166cc:	6878      	ldr	r0, [r7, #4]
 80166ce:	f000 fba1 	bl	8016e14 <USBD_SetAddress>
          break;
 80166d2:	e01f      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80166d4:	6839      	ldr	r1, [r7, #0]
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f000 fbe0 	bl	8016e9c <USBD_SetConfig>
 80166dc:	4603      	mov	r3, r0
 80166de:	73fb      	strb	r3, [r7, #15]
          break;
 80166e0:	e018      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80166e2:	6839      	ldr	r1, [r7, #0]
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f000 fc83 	bl	8016ff0 <USBD_GetConfig>
          break;
 80166ea:	e013      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80166ec:	6839      	ldr	r1, [r7, #0]
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f000 fcb4 	bl	801705c <USBD_GetStatus>
          break;
 80166f4:	e00e      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80166f6:	6839      	ldr	r1, [r7, #0]
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f000 fce3 	bl	80170c4 <USBD_SetFeature>
          break;
 80166fe:	e009      	b.n	8016714 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016700:	6839      	ldr	r1, [r7, #0]
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f000 fd07 	bl	8017116 <USBD_ClrFeature>
          break;
 8016708:	e004      	b.n	8016714 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801670a:	6839      	ldr	r1, [r7, #0]
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f000 fd5e 	bl	80171ce <USBD_CtlError>
          break;
 8016712:	bf00      	nop
      }
      break;
 8016714:	e004      	b.n	8016720 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016716:	6839      	ldr	r1, [r7, #0]
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f000 fd58 	bl	80171ce <USBD_CtlError>
      break;
 801671e:	bf00      	nop
  }

  return ret;
 8016720:	7bfb      	ldrb	r3, [r7, #15]
}
 8016722:	4618      	mov	r0, r3
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
 801672a:	bf00      	nop

0801672c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b084      	sub	sp, #16
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016736:	2300      	movs	r3, #0
 8016738:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016742:	2b40      	cmp	r3, #64	; 0x40
 8016744:	d005      	beq.n	8016752 <USBD_StdItfReq+0x26>
 8016746:	2b40      	cmp	r3, #64	; 0x40
 8016748:	d852      	bhi.n	80167f0 <USBD_StdItfReq+0xc4>
 801674a:	2b00      	cmp	r3, #0
 801674c:	d001      	beq.n	8016752 <USBD_StdItfReq+0x26>
 801674e:	2b20      	cmp	r3, #32
 8016750:	d14e      	bne.n	80167f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016758:	b2db      	uxtb	r3, r3
 801675a:	3b01      	subs	r3, #1
 801675c:	2b02      	cmp	r3, #2
 801675e:	d840      	bhi.n	80167e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	889b      	ldrh	r3, [r3, #4]
 8016764:	b2db      	uxtb	r3, r3
 8016766:	2b01      	cmp	r3, #1
 8016768:	d836      	bhi.n	80167d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	889b      	ldrh	r3, [r3, #4]
 801676e:	b2db      	uxtb	r3, r3
 8016770:	4619      	mov	r1, r3
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f7ff fed9 	bl	801652a <USBD_CoreFindIF>
 8016778:	4603      	mov	r3, r0
 801677a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801677c:	7bbb      	ldrb	r3, [r7, #14]
 801677e:	2bff      	cmp	r3, #255	; 0xff
 8016780:	d01d      	beq.n	80167be <USBD_StdItfReq+0x92>
 8016782:	7bbb      	ldrb	r3, [r7, #14]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d11a      	bne.n	80167be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016788:	7bba      	ldrb	r2, [r7, #14]
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	32ae      	adds	r2, #174	; 0xae
 801678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d00f      	beq.n	80167b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016798:	7bba      	ldrb	r2, [r7, #14]
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80167a0:	7bba      	ldrb	r2, [r7, #14]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	32ae      	adds	r2, #174	; 0xae
 80167a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167aa:	689b      	ldr	r3, [r3, #8]
 80167ac:	6839      	ldr	r1, [r7, #0]
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	4798      	blx	r3
 80167b2:	4603      	mov	r3, r0
 80167b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80167b6:	e004      	b.n	80167c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80167b8:	2303      	movs	r3, #3
 80167ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80167bc:	e001      	b.n	80167c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80167be:	2303      	movs	r3, #3
 80167c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	88db      	ldrh	r3, [r3, #6]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d110      	bne.n	80167ec <USBD_StdItfReq+0xc0>
 80167ca:	7bfb      	ldrb	r3, [r7, #15]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d10d      	bne.n	80167ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f000 fdaa 	bl	801732a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80167d6:	e009      	b.n	80167ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80167d8:	6839      	ldr	r1, [r7, #0]
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f000 fcf7 	bl	80171ce <USBD_CtlError>
          break;
 80167e0:	e004      	b.n	80167ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80167e2:	6839      	ldr	r1, [r7, #0]
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f000 fcf2 	bl	80171ce <USBD_CtlError>
          break;
 80167ea:	e000      	b.n	80167ee <USBD_StdItfReq+0xc2>
          break;
 80167ec:	bf00      	nop
      }
      break;
 80167ee:	e004      	b.n	80167fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80167f0:	6839      	ldr	r1, [r7, #0]
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f000 fceb 	bl	80171ce <USBD_CtlError>
      break;
 80167f8:	bf00      	nop
  }

  return ret;
 80167fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3710      	adds	r7, #16
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801680e:	2300      	movs	r3, #0
 8016810:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	889b      	ldrh	r3, [r3, #4]
 8016816:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	781b      	ldrb	r3, [r3, #0]
 801681c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016820:	2b40      	cmp	r3, #64	; 0x40
 8016822:	d007      	beq.n	8016834 <USBD_StdEPReq+0x30>
 8016824:	2b40      	cmp	r3, #64	; 0x40
 8016826:	f200 817f 	bhi.w	8016b28 <USBD_StdEPReq+0x324>
 801682a:	2b00      	cmp	r3, #0
 801682c:	d02a      	beq.n	8016884 <USBD_StdEPReq+0x80>
 801682e:	2b20      	cmp	r3, #32
 8016830:	f040 817a 	bne.w	8016b28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016834:	7bbb      	ldrb	r3, [r7, #14]
 8016836:	4619      	mov	r1, r3
 8016838:	6878      	ldr	r0, [r7, #4]
 801683a:	f7ff fe83 	bl	8016544 <USBD_CoreFindEP>
 801683e:	4603      	mov	r3, r0
 8016840:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016842:	7b7b      	ldrb	r3, [r7, #13]
 8016844:	2bff      	cmp	r3, #255	; 0xff
 8016846:	f000 8174 	beq.w	8016b32 <USBD_StdEPReq+0x32e>
 801684a:	7b7b      	ldrb	r3, [r7, #13]
 801684c:	2b00      	cmp	r3, #0
 801684e:	f040 8170 	bne.w	8016b32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016852:	7b7a      	ldrb	r2, [r7, #13]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801685a:	7b7a      	ldrb	r2, [r7, #13]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	32ae      	adds	r2, #174	; 0xae
 8016860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	2b00      	cmp	r3, #0
 8016868:	f000 8163 	beq.w	8016b32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801686c:	7b7a      	ldrb	r2, [r7, #13]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	32ae      	adds	r2, #174	; 0xae
 8016872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016876:	689b      	ldr	r3, [r3, #8]
 8016878:	6839      	ldr	r1, [r7, #0]
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	4798      	blx	r3
 801687e:	4603      	mov	r3, r0
 8016880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8016882:	e156      	b.n	8016b32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	785b      	ldrb	r3, [r3, #1]
 8016888:	2b03      	cmp	r3, #3
 801688a:	d008      	beq.n	801689e <USBD_StdEPReq+0x9a>
 801688c:	2b03      	cmp	r3, #3
 801688e:	f300 8145 	bgt.w	8016b1c <USBD_StdEPReq+0x318>
 8016892:	2b00      	cmp	r3, #0
 8016894:	f000 809b 	beq.w	80169ce <USBD_StdEPReq+0x1ca>
 8016898:	2b01      	cmp	r3, #1
 801689a:	d03c      	beq.n	8016916 <USBD_StdEPReq+0x112>
 801689c:	e13e      	b.n	8016b1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168a4:	b2db      	uxtb	r3, r3
 80168a6:	2b02      	cmp	r3, #2
 80168a8:	d002      	beq.n	80168b0 <USBD_StdEPReq+0xac>
 80168aa:	2b03      	cmp	r3, #3
 80168ac:	d016      	beq.n	80168dc <USBD_StdEPReq+0xd8>
 80168ae:	e02c      	b.n	801690a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80168b0:	7bbb      	ldrb	r3, [r7, #14]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d00d      	beq.n	80168d2 <USBD_StdEPReq+0xce>
 80168b6:	7bbb      	ldrb	r3, [r7, #14]
 80168b8:	2b80      	cmp	r3, #128	; 0x80
 80168ba:	d00a      	beq.n	80168d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80168bc:	7bbb      	ldrb	r3, [r7, #14]
 80168be:	4619      	mov	r1, r3
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f004 ff88 	bl	801b7d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80168c6:	2180      	movs	r1, #128	; 0x80
 80168c8:	6878      	ldr	r0, [r7, #4]
 80168ca:	f004 ff84 	bl	801b7d6 <USBD_LL_StallEP>
 80168ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80168d0:	e020      	b.n	8016914 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80168d2:	6839      	ldr	r1, [r7, #0]
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	f000 fc7a 	bl	80171ce <USBD_CtlError>
              break;
 80168da:	e01b      	b.n	8016914 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	885b      	ldrh	r3, [r3, #2]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d10e      	bne.n	8016902 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80168e4:	7bbb      	ldrb	r3, [r7, #14]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d00b      	beq.n	8016902 <USBD_StdEPReq+0xfe>
 80168ea:	7bbb      	ldrb	r3, [r7, #14]
 80168ec:	2b80      	cmp	r3, #128	; 0x80
 80168ee:	d008      	beq.n	8016902 <USBD_StdEPReq+0xfe>
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	88db      	ldrh	r3, [r3, #6]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d104      	bne.n	8016902 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80168f8:	7bbb      	ldrb	r3, [r7, #14]
 80168fa:	4619      	mov	r1, r3
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f004 ff6a 	bl	801b7d6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f000 fd11 	bl	801732a <USBD_CtlSendStatus>

              break;
 8016908:	e004      	b.n	8016914 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801690a:	6839      	ldr	r1, [r7, #0]
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 fc5e 	bl	80171ce <USBD_CtlError>
              break;
 8016912:	bf00      	nop
          }
          break;
 8016914:	e107      	b.n	8016b26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801691c:	b2db      	uxtb	r3, r3
 801691e:	2b02      	cmp	r3, #2
 8016920:	d002      	beq.n	8016928 <USBD_StdEPReq+0x124>
 8016922:	2b03      	cmp	r3, #3
 8016924:	d016      	beq.n	8016954 <USBD_StdEPReq+0x150>
 8016926:	e04b      	b.n	80169c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016928:	7bbb      	ldrb	r3, [r7, #14]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d00d      	beq.n	801694a <USBD_StdEPReq+0x146>
 801692e:	7bbb      	ldrb	r3, [r7, #14]
 8016930:	2b80      	cmp	r3, #128	; 0x80
 8016932:	d00a      	beq.n	801694a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016934:	7bbb      	ldrb	r3, [r7, #14]
 8016936:	4619      	mov	r1, r3
 8016938:	6878      	ldr	r0, [r7, #4]
 801693a:	f004 ff4c 	bl	801b7d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801693e:	2180      	movs	r1, #128	; 0x80
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	f004 ff48 	bl	801b7d6 <USBD_LL_StallEP>
 8016946:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016948:	e040      	b.n	80169cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801694a:	6839      	ldr	r1, [r7, #0]
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f000 fc3e 	bl	80171ce <USBD_CtlError>
              break;
 8016952:	e03b      	b.n	80169cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	885b      	ldrh	r3, [r3, #2]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d136      	bne.n	80169ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801695c:	7bbb      	ldrb	r3, [r7, #14]
 801695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016962:	2b00      	cmp	r3, #0
 8016964:	d004      	beq.n	8016970 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016966:	7bbb      	ldrb	r3, [r7, #14]
 8016968:	4619      	mov	r1, r3
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f004 ff52 	bl	801b814 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 fcda 	bl	801732a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016976:	7bbb      	ldrb	r3, [r7, #14]
 8016978:	4619      	mov	r1, r3
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f7ff fde2 	bl	8016544 <USBD_CoreFindEP>
 8016980:	4603      	mov	r3, r0
 8016982:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016984:	7b7b      	ldrb	r3, [r7, #13]
 8016986:	2bff      	cmp	r3, #255	; 0xff
 8016988:	d01f      	beq.n	80169ca <USBD_StdEPReq+0x1c6>
 801698a:	7b7b      	ldrb	r3, [r7, #13]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d11c      	bne.n	80169ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016990:	7b7a      	ldrb	r2, [r7, #13]
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016998:	7b7a      	ldrb	r2, [r7, #13]
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	32ae      	adds	r2, #174	; 0xae
 801699e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169a2:	689b      	ldr	r3, [r3, #8]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d010      	beq.n	80169ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80169a8:	7b7a      	ldrb	r2, [r7, #13]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	32ae      	adds	r2, #174	; 0xae
 80169ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169b2:	689b      	ldr	r3, [r3, #8]
 80169b4:	6839      	ldr	r1, [r7, #0]
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	4798      	blx	r3
 80169ba:	4603      	mov	r3, r0
 80169bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80169be:	e004      	b.n	80169ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80169c0:	6839      	ldr	r1, [r7, #0]
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f000 fc03 	bl	80171ce <USBD_CtlError>
              break;
 80169c8:	e000      	b.n	80169cc <USBD_StdEPReq+0x1c8>
              break;
 80169ca:	bf00      	nop
          }
          break;
 80169cc:	e0ab      	b.n	8016b26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169d4:	b2db      	uxtb	r3, r3
 80169d6:	2b02      	cmp	r3, #2
 80169d8:	d002      	beq.n	80169e0 <USBD_StdEPReq+0x1dc>
 80169da:	2b03      	cmp	r3, #3
 80169dc:	d032      	beq.n	8016a44 <USBD_StdEPReq+0x240>
 80169de:	e097      	b.n	8016b10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80169e0:	7bbb      	ldrb	r3, [r7, #14]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d007      	beq.n	80169f6 <USBD_StdEPReq+0x1f2>
 80169e6:	7bbb      	ldrb	r3, [r7, #14]
 80169e8:	2b80      	cmp	r3, #128	; 0x80
 80169ea:	d004      	beq.n	80169f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80169ec:	6839      	ldr	r1, [r7, #0]
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f000 fbed 	bl	80171ce <USBD_CtlError>
                break;
 80169f4:	e091      	b.n	8016b1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	da0b      	bge.n	8016a16 <USBD_StdEPReq+0x212>
 80169fe:	7bbb      	ldrb	r3, [r7, #14]
 8016a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a04:	4613      	mov	r3, r2
 8016a06:	009b      	lsls	r3, r3, #2
 8016a08:	4413      	add	r3, r2
 8016a0a:	009b      	lsls	r3, r3, #2
 8016a0c:	3310      	adds	r3, #16
 8016a0e:	687a      	ldr	r2, [r7, #4]
 8016a10:	4413      	add	r3, r2
 8016a12:	3304      	adds	r3, #4
 8016a14:	e00b      	b.n	8016a2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016a16:	7bbb      	ldrb	r3, [r7, #14]
 8016a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	009b      	lsls	r3, r3, #2
 8016a20:	4413      	add	r3, r2
 8016a22:	009b      	lsls	r3, r3, #2
 8016a24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016a28:	687a      	ldr	r2, [r7, #4]
 8016a2a:	4413      	add	r3, r2
 8016a2c:	3304      	adds	r3, #4
 8016a2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	2200      	movs	r2, #0
 8016a34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	2202      	movs	r2, #2
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f000 fc37 	bl	80172b0 <USBD_CtlSendData>
              break;
 8016a42:	e06a      	b.n	8016b1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	da11      	bge.n	8016a70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016a4c:	7bbb      	ldrb	r3, [r7, #14]
 8016a4e:	f003 020f 	and.w	r2, r3, #15
 8016a52:	6879      	ldr	r1, [r7, #4]
 8016a54:	4613      	mov	r3, r2
 8016a56:	009b      	lsls	r3, r3, #2
 8016a58:	4413      	add	r3, r2
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	440b      	add	r3, r1
 8016a5e:	3324      	adds	r3, #36	; 0x24
 8016a60:	881b      	ldrh	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d117      	bne.n	8016a96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a66:	6839      	ldr	r1, [r7, #0]
 8016a68:	6878      	ldr	r0, [r7, #4]
 8016a6a:	f000 fbb0 	bl	80171ce <USBD_CtlError>
                  break;
 8016a6e:	e054      	b.n	8016b1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016a70:	7bbb      	ldrb	r3, [r7, #14]
 8016a72:	f003 020f 	and.w	r2, r3, #15
 8016a76:	6879      	ldr	r1, [r7, #4]
 8016a78:	4613      	mov	r3, r2
 8016a7a:	009b      	lsls	r3, r3, #2
 8016a7c:	4413      	add	r3, r2
 8016a7e:	009b      	lsls	r3, r3, #2
 8016a80:	440b      	add	r3, r1
 8016a82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016a86:	881b      	ldrh	r3, [r3, #0]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d104      	bne.n	8016a96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a8c:	6839      	ldr	r1, [r7, #0]
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f000 fb9d 	bl	80171ce <USBD_CtlError>
                  break;
 8016a94:	e041      	b.n	8016b1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	da0b      	bge.n	8016ab6 <USBD_StdEPReq+0x2b2>
 8016a9e:	7bbb      	ldrb	r3, [r7, #14]
 8016aa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016aa4:	4613      	mov	r3, r2
 8016aa6:	009b      	lsls	r3, r3, #2
 8016aa8:	4413      	add	r3, r2
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	3310      	adds	r3, #16
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	4413      	add	r3, r2
 8016ab2:	3304      	adds	r3, #4
 8016ab4:	e00b      	b.n	8016ace <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016ab6:	7bbb      	ldrb	r3, [r7, #14]
 8016ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016abc:	4613      	mov	r3, r2
 8016abe:	009b      	lsls	r3, r3, #2
 8016ac0:	4413      	add	r3, r2
 8016ac2:	009b      	lsls	r3, r3, #2
 8016ac4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016ac8:	687a      	ldr	r2, [r7, #4]
 8016aca:	4413      	add	r3, r2
 8016acc:	3304      	adds	r3, #4
 8016ace:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016ad0:	7bbb      	ldrb	r3, [r7, #14]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d002      	beq.n	8016adc <USBD_StdEPReq+0x2d8>
 8016ad6:	7bbb      	ldrb	r3, [r7, #14]
 8016ad8:	2b80      	cmp	r3, #128	; 0x80
 8016ada:	d103      	bne.n	8016ae4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016adc:	68bb      	ldr	r3, [r7, #8]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	601a      	str	r2, [r3, #0]
 8016ae2:	e00e      	b.n	8016b02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016ae4:	7bbb      	ldrb	r3, [r7, #14]
 8016ae6:	4619      	mov	r1, r3
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f004 feb2 	bl	801b852 <USBD_LL_IsStallEP>
 8016aee:	4603      	mov	r3, r0
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d003      	beq.n	8016afc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	2201      	movs	r2, #1
 8016af8:	601a      	str	r2, [r3, #0]
 8016afa:	e002      	b.n	8016b02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	2200      	movs	r2, #0
 8016b00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	2202      	movs	r2, #2
 8016b06:	4619      	mov	r1, r3
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	f000 fbd1 	bl	80172b0 <USBD_CtlSendData>
              break;
 8016b0e:	e004      	b.n	8016b1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016b10:	6839      	ldr	r1, [r7, #0]
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f000 fb5b 	bl	80171ce <USBD_CtlError>
              break;
 8016b18:	bf00      	nop
          }
          break;
 8016b1a:	e004      	b.n	8016b26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016b1c:	6839      	ldr	r1, [r7, #0]
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f000 fb55 	bl	80171ce <USBD_CtlError>
          break;
 8016b24:	bf00      	nop
      }
      break;
 8016b26:	e005      	b.n	8016b34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016b28:	6839      	ldr	r1, [r7, #0]
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f000 fb4f 	bl	80171ce <USBD_CtlError>
      break;
 8016b30:	e000      	b.n	8016b34 <USBD_StdEPReq+0x330>
      break;
 8016b32:	bf00      	nop
  }

  return ret;
 8016b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3710      	adds	r7, #16
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
	...

08016b40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b084      	sub	sp, #16
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016b52:	2300      	movs	r3, #0
 8016b54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	885b      	ldrh	r3, [r3, #2]
 8016b5a:	0a1b      	lsrs	r3, r3, #8
 8016b5c:	b29b      	uxth	r3, r3
 8016b5e:	3b01      	subs	r3, #1
 8016b60:	2b06      	cmp	r3, #6
 8016b62:	f200 8128 	bhi.w	8016db6 <USBD_GetDescriptor+0x276>
 8016b66:	a201      	add	r2, pc, #4	; (adr r2, 8016b6c <USBD_GetDescriptor+0x2c>)
 8016b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b6c:	08016b89 	.word	0x08016b89
 8016b70:	08016ba1 	.word	0x08016ba1
 8016b74:	08016be1 	.word	0x08016be1
 8016b78:	08016db7 	.word	0x08016db7
 8016b7c:	08016db7 	.word	0x08016db7
 8016b80:	08016d57 	.word	0x08016d57
 8016b84:	08016d83 	.word	0x08016d83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	687a      	ldr	r2, [r7, #4]
 8016b92:	7c12      	ldrb	r2, [r2, #16]
 8016b94:	f107 0108 	add.w	r1, r7, #8
 8016b98:	4610      	mov	r0, r2
 8016b9a:	4798      	blx	r3
 8016b9c:	60f8      	str	r0, [r7, #12]
      break;
 8016b9e:	e112      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	7c1b      	ldrb	r3, [r3, #16]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d10d      	bne.n	8016bc4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bb0:	f107 0208 	add.w	r2, r7, #8
 8016bb4:	4610      	mov	r0, r2
 8016bb6:	4798      	blx	r3
 8016bb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	2202      	movs	r2, #2
 8016bc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016bc2:	e100      	b.n	8016dc6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bcc:	f107 0208 	add.w	r2, r7, #8
 8016bd0:	4610      	mov	r0, r2
 8016bd2:	4798      	blx	r3
 8016bd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	3301      	adds	r3, #1
 8016bda:	2202      	movs	r2, #2
 8016bdc:	701a      	strb	r2, [r3, #0]
      break;
 8016bde:	e0f2      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	885b      	ldrh	r3, [r3, #2]
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	2b05      	cmp	r3, #5
 8016be8:	f200 80ac 	bhi.w	8016d44 <USBD_GetDescriptor+0x204>
 8016bec:	a201      	add	r2, pc, #4	; (adr r2, 8016bf4 <USBD_GetDescriptor+0xb4>)
 8016bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bf2:	bf00      	nop
 8016bf4:	08016c0d 	.word	0x08016c0d
 8016bf8:	08016c41 	.word	0x08016c41
 8016bfc:	08016c75 	.word	0x08016c75
 8016c00:	08016ca9 	.word	0x08016ca9
 8016c04:	08016cdd 	.word	0x08016cdd
 8016c08:	08016d11 	.word	0x08016d11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c12:	685b      	ldr	r3, [r3, #4]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d00b      	beq.n	8016c30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	7c12      	ldrb	r2, [r2, #16]
 8016c24:	f107 0108 	add.w	r1, r7, #8
 8016c28:	4610      	mov	r0, r2
 8016c2a:	4798      	blx	r3
 8016c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c2e:	e091      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c30:	6839      	ldr	r1, [r7, #0]
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f000 facb 	bl	80171ce <USBD_CtlError>
            err++;
 8016c38:	7afb      	ldrb	r3, [r7, #11]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8016c3e:	e089      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c46:	689b      	ldr	r3, [r3, #8]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d00b      	beq.n	8016c64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	7c12      	ldrb	r2, [r2, #16]
 8016c58:	f107 0108 	add.w	r1, r7, #8
 8016c5c:	4610      	mov	r0, r2
 8016c5e:	4798      	blx	r3
 8016c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c62:	e077      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c64:	6839      	ldr	r1, [r7, #0]
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	f000 fab1 	bl	80171ce <USBD_CtlError>
            err++;
 8016c6c:	7afb      	ldrb	r3, [r7, #11]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	72fb      	strb	r3, [r7, #11]
          break;
 8016c72:	e06f      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c7a:	68db      	ldr	r3, [r3, #12]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d00b      	beq.n	8016c98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c86:	68db      	ldr	r3, [r3, #12]
 8016c88:	687a      	ldr	r2, [r7, #4]
 8016c8a:	7c12      	ldrb	r2, [r2, #16]
 8016c8c:	f107 0108 	add.w	r1, r7, #8
 8016c90:	4610      	mov	r0, r2
 8016c92:	4798      	blx	r3
 8016c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c96:	e05d      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c98:	6839      	ldr	r1, [r7, #0]
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	f000 fa97 	bl	80171ce <USBD_CtlError>
            err++;
 8016ca0:	7afb      	ldrb	r3, [r7, #11]
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ca6:	e055      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cae:	691b      	ldr	r3, [r3, #16]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d00b      	beq.n	8016ccc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cba:	691b      	ldr	r3, [r3, #16]
 8016cbc:	687a      	ldr	r2, [r7, #4]
 8016cbe:	7c12      	ldrb	r2, [r2, #16]
 8016cc0:	f107 0108 	add.w	r1, r7, #8
 8016cc4:	4610      	mov	r0, r2
 8016cc6:	4798      	blx	r3
 8016cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cca:	e043      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016ccc:	6839      	ldr	r1, [r7, #0]
 8016cce:	6878      	ldr	r0, [r7, #4]
 8016cd0:	f000 fa7d 	bl	80171ce <USBD_CtlError>
            err++;
 8016cd4:	7afb      	ldrb	r3, [r7, #11]
 8016cd6:	3301      	adds	r3, #1
 8016cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8016cda:	e03b      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ce2:	695b      	ldr	r3, [r3, #20]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d00b      	beq.n	8016d00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cee:	695b      	ldr	r3, [r3, #20]
 8016cf0:	687a      	ldr	r2, [r7, #4]
 8016cf2:	7c12      	ldrb	r2, [r2, #16]
 8016cf4:	f107 0108 	add.w	r1, r7, #8
 8016cf8:	4610      	mov	r0, r2
 8016cfa:	4798      	blx	r3
 8016cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cfe:	e029      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d00:	6839      	ldr	r1, [r7, #0]
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f000 fa63 	bl	80171ce <USBD_CtlError>
            err++;
 8016d08:	7afb      	ldrb	r3, [r7, #11]
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8016d0e:	e021      	b.n	8016d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d16:	699b      	ldr	r3, [r3, #24]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d00b      	beq.n	8016d34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d22:	699b      	ldr	r3, [r3, #24]
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	7c12      	ldrb	r2, [r2, #16]
 8016d28:	f107 0108 	add.w	r1, r7, #8
 8016d2c:	4610      	mov	r0, r2
 8016d2e:	4798      	blx	r3
 8016d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d32:	e00f      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d34:	6839      	ldr	r1, [r7, #0]
 8016d36:	6878      	ldr	r0, [r7, #4]
 8016d38:	f000 fa49 	bl	80171ce <USBD_CtlError>
            err++;
 8016d3c:	7afb      	ldrb	r3, [r7, #11]
 8016d3e:	3301      	adds	r3, #1
 8016d40:	72fb      	strb	r3, [r7, #11]
          break;
 8016d42:	e007      	b.n	8016d54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016d44:	6839      	ldr	r1, [r7, #0]
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f000 fa41 	bl	80171ce <USBD_CtlError>
          err++;
 8016d4c:	7afb      	ldrb	r3, [r7, #11]
 8016d4e:	3301      	adds	r3, #1
 8016d50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016d52:	bf00      	nop
      }
      break;
 8016d54:	e037      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	7c1b      	ldrb	r3, [r3, #16]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d109      	bne.n	8016d72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d66:	f107 0208 	add.w	r2, r7, #8
 8016d6a:	4610      	mov	r0, r2
 8016d6c:	4798      	blx	r3
 8016d6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d70:	e029      	b.n	8016dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016d72:	6839      	ldr	r1, [r7, #0]
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f000 fa2a 	bl	80171ce <USBD_CtlError>
        err++;
 8016d7a:	7afb      	ldrb	r3, [r7, #11]
 8016d7c:	3301      	adds	r3, #1
 8016d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8016d80:	e021      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	7c1b      	ldrb	r3, [r3, #16]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d10d      	bne.n	8016da6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d92:	f107 0208 	add.w	r2, r7, #8
 8016d96:	4610      	mov	r0, r2
 8016d98:	4798      	blx	r3
 8016d9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	3301      	adds	r3, #1
 8016da0:	2207      	movs	r2, #7
 8016da2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016da4:	e00f      	b.n	8016dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016da6:	6839      	ldr	r1, [r7, #0]
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	f000 fa10 	bl	80171ce <USBD_CtlError>
        err++;
 8016dae:	7afb      	ldrb	r3, [r7, #11]
 8016db0:	3301      	adds	r3, #1
 8016db2:	72fb      	strb	r3, [r7, #11]
      break;
 8016db4:	e007      	b.n	8016dc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016db6:	6839      	ldr	r1, [r7, #0]
 8016db8:	6878      	ldr	r0, [r7, #4]
 8016dba:	f000 fa08 	bl	80171ce <USBD_CtlError>
      err++;
 8016dbe:	7afb      	ldrb	r3, [r7, #11]
 8016dc0:	3301      	adds	r3, #1
 8016dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8016dc4:	bf00      	nop
  }

  if (err != 0U)
 8016dc6:	7afb      	ldrb	r3, [r7, #11]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d11e      	bne.n	8016e0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	88db      	ldrh	r3, [r3, #6]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d016      	beq.n	8016e02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016dd4:	893b      	ldrh	r3, [r7, #8]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d00e      	beq.n	8016df8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	88da      	ldrh	r2, [r3, #6]
 8016dde:	893b      	ldrh	r3, [r7, #8]
 8016de0:	4293      	cmp	r3, r2
 8016de2:	bf28      	it	cs
 8016de4:	4613      	movcs	r3, r2
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016dea:	893b      	ldrh	r3, [r7, #8]
 8016dec:	461a      	mov	r2, r3
 8016dee:	68f9      	ldr	r1, [r7, #12]
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f000 fa5d 	bl	80172b0 <USBD_CtlSendData>
 8016df6:	e009      	b.n	8016e0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 f9e7 	bl	80171ce <USBD_CtlError>
 8016e00:	e004      	b.n	8016e0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f000 fa91 	bl	801732a <USBD_CtlSendStatus>
 8016e08:	e000      	b.n	8016e0c <USBD_GetDescriptor+0x2cc>
    return;
 8016e0a:	bf00      	nop
  }
}
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop

08016e14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b084      	sub	sp, #16
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
 8016e1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	889b      	ldrh	r3, [r3, #4]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d131      	bne.n	8016e8a <USBD_SetAddress+0x76>
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	88db      	ldrh	r3, [r3, #6]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d12d      	bne.n	8016e8a <USBD_SetAddress+0x76>
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	885b      	ldrh	r3, [r3, #2]
 8016e32:	2b7f      	cmp	r3, #127	; 0x7f
 8016e34:	d829      	bhi.n	8016e8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016e36:	683b      	ldr	r3, [r7, #0]
 8016e38:	885b      	ldrh	r3, [r3, #2]
 8016e3a:	b2db      	uxtb	r3, r3
 8016e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	2b03      	cmp	r3, #3
 8016e4c:	d104      	bne.n	8016e58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016e4e:	6839      	ldr	r1, [r7, #0]
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f000 f9bc 	bl	80171ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e56:	e01d      	b.n	8016e94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	7bfa      	ldrb	r2, [r7, #15]
 8016e5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016e60:	7bfb      	ldrb	r3, [r7, #15]
 8016e62:	4619      	mov	r1, r3
 8016e64:	6878      	ldr	r0, [r7, #4]
 8016e66:	f004 fd20 	bl	801b8aa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016e6a:	6878      	ldr	r0, [r7, #4]
 8016e6c:	f000 fa5d 	bl	801732a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016e70:	7bfb      	ldrb	r3, [r7, #15]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d004      	beq.n	8016e80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	2202      	movs	r2, #2
 8016e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e7e:	e009      	b.n	8016e94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2201      	movs	r2, #1
 8016e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e88:	e004      	b.n	8016e94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016e8a:	6839      	ldr	r1, [r7, #0]
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f000 f99e 	bl	80171ce <USBD_CtlError>
  }
}
 8016e92:	bf00      	nop
 8016e94:	bf00      	nop
 8016e96:	3710      	adds	r7, #16
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}

08016e9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b084      	sub	sp, #16
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
 8016ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	885b      	ldrh	r3, [r3, #2]
 8016eae:	b2da      	uxtb	r2, r3
 8016eb0:	4b4e      	ldr	r3, [pc, #312]	; (8016fec <USBD_SetConfig+0x150>)
 8016eb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016eb4:	4b4d      	ldr	r3, [pc, #308]	; (8016fec <USBD_SetConfig+0x150>)
 8016eb6:	781b      	ldrb	r3, [r3, #0]
 8016eb8:	2b01      	cmp	r3, #1
 8016eba:	d905      	bls.n	8016ec8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016ebc:	6839      	ldr	r1, [r7, #0]
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	f000 f985 	bl	80171ce <USBD_CtlError>
    return USBD_FAIL;
 8016ec4:	2303      	movs	r3, #3
 8016ec6:	e08c      	b.n	8016fe2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ece:	b2db      	uxtb	r3, r3
 8016ed0:	2b02      	cmp	r3, #2
 8016ed2:	d002      	beq.n	8016eda <USBD_SetConfig+0x3e>
 8016ed4:	2b03      	cmp	r3, #3
 8016ed6:	d029      	beq.n	8016f2c <USBD_SetConfig+0x90>
 8016ed8:	e075      	b.n	8016fc6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016eda:	4b44      	ldr	r3, [pc, #272]	; (8016fec <USBD_SetConfig+0x150>)
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d020      	beq.n	8016f24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016ee2:	4b42      	ldr	r3, [pc, #264]	; (8016fec <USBD_SetConfig+0x150>)
 8016ee4:	781b      	ldrb	r3, [r3, #0]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016eec:	4b3f      	ldr	r3, [pc, #252]	; (8016fec <USBD_SetConfig+0x150>)
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	f7fe ffe7 	bl	8015ec6 <USBD_SetClassConfig>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016efc:	7bfb      	ldrb	r3, [r7, #15]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d008      	beq.n	8016f14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016f02:	6839      	ldr	r1, [r7, #0]
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f000 f962 	bl	80171ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2202      	movs	r2, #2
 8016f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f12:	e065      	b.n	8016fe0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016f14:	6878      	ldr	r0, [r7, #4]
 8016f16:	f000 fa08 	bl	801732a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2203      	movs	r2, #3
 8016f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016f22:	e05d      	b.n	8016fe0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f000 fa00 	bl	801732a <USBD_CtlSendStatus>
      break;
 8016f2a:	e059      	b.n	8016fe0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016f2c:	4b2f      	ldr	r3, [pc, #188]	; (8016fec <USBD_SetConfig+0x150>)
 8016f2e:	781b      	ldrb	r3, [r3, #0]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d112      	bne.n	8016f5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2202      	movs	r2, #2
 8016f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016f3c:	4b2b      	ldr	r3, [pc, #172]	; (8016fec <USBD_SetConfig+0x150>)
 8016f3e:	781b      	ldrb	r3, [r3, #0]
 8016f40:	461a      	mov	r2, r3
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016f46:	4b29      	ldr	r3, [pc, #164]	; (8016fec <USBD_SetConfig+0x150>)
 8016f48:	781b      	ldrb	r3, [r3, #0]
 8016f4a:	4619      	mov	r1, r3
 8016f4c:	6878      	ldr	r0, [r7, #4]
 8016f4e:	f7fe ffd6 	bl	8015efe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016f52:	6878      	ldr	r0, [r7, #4]
 8016f54:	f000 f9e9 	bl	801732a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f58:	e042      	b.n	8016fe0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016f5a:	4b24      	ldr	r3, [pc, #144]	; (8016fec <USBD_SetConfig+0x150>)
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	429a      	cmp	r2, r3
 8016f66:	d02a      	beq.n	8016fbe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	4619      	mov	r1, r3
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f7fe ffc4 	bl	8015efe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016f76:	4b1d      	ldr	r3, [pc, #116]	; (8016fec <USBD_SetConfig+0x150>)
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016f80:	4b1a      	ldr	r3, [pc, #104]	; (8016fec <USBD_SetConfig+0x150>)
 8016f82:	781b      	ldrb	r3, [r3, #0]
 8016f84:	4619      	mov	r1, r3
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	f7fe ff9d 	bl	8015ec6 <USBD_SetClassConfig>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016f90:	7bfb      	ldrb	r3, [r7, #15]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00f      	beq.n	8016fb6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016f96:	6839      	ldr	r1, [r7, #0]
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	f000 f918 	bl	80171ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f7fe ffa9 	bl	8015efe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	2202      	movs	r2, #2
 8016fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016fb4:	e014      	b.n	8016fe0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f000 f9b7 	bl	801732a <USBD_CtlSendStatus>
      break;
 8016fbc:	e010      	b.n	8016fe0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016fbe:	6878      	ldr	r0, [r7, #4]
 8016fc0:	f000 f9b3 	bl	801732a <USBD_CtlSendStatus>
      break;
 8016fc4:	e00c      	b.n	8016fe0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016fc6:	6839      	ldr	r1, [r7, #0]
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f000 f900 	bl	80171ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016fce:	4b07      	ldr	r3, [pc, #28]	; (8016fec <USBD_SetConfig+0x150>)
 8016fd0:	781b      	ldrb	r3, [r3, #0]
 8016fd2:	4619      	mov	r1, r3
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f7fe ff92 	bl	8015efe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016fda:	2303      	movs	r3, #3
 8016fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8016fde:	bf00      	nop
  }

  return ret;
 8016fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3710      	adds	r7, #16
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}
 8016fea:	bf00      	nop
 8016fec:	20001aa8 	.word	0x20001aa8

08016ff0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
 8016ff8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	88db      	ldrh	r3, [r3, #6]
 8016ffe:	2b01      	cmp	r3, #1
 8017000:	d004      	beq.n	801700c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017002:	6839      	ldr	r1, [r7, #0]
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	f000 f8e2 	bl	80171ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801700a:	e023      	b.n	8017054 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017012:	b2db      	uxtb	r3, r3
 8017014:	2b02      	cmp	r3, #2
 8017016:	dc02      	bgt.n	801701e <USBD_GetConfig+0x2e>
 8017018:	2b00      	cmp	r3, #0
 801701a:	dc03      	bgt.n	8017024 <USBD_GetConfig+0x34>
 801701c:	e015      	b.n	801704a <USBD_GetConfig+0x5a>
 801701e:	2b03      	cmp	r3, #3
 8017020:	d00b      	beq.n	801703a <USBD_GetConfig+0x4a>
 8017022:	e012      	b.n	801704a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2200      	movs	r2, #0
 8017028:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	3308      	adds	r3, #8
 801702e:	2201      	movs	r2, #1
 8017030:	4619      	mov	r1, r3
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f000 f93c 	bl	80172b0 <USBD_CtlSendData>
        break;
 8017038:	e00c      	b.n	8017054 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	3304      	adds	r3, #4
 801703e:	2201      	movs	r2, #1
 8017040:	4619      	mov	r1, r3
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f000 f934 	bl	80172b0 <USBD_CtlSendData>
        break;
 8017048:	e004      	b.n	8017054 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801704a:	6839      	ldr	r1, [r7, #0]
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f000 f8be 	bl	80171ce <USBD_CtlError>
        break;
 8017052:	bf00      	nop
}
 8017054:	bf00      	nop
 8017056:	3708      	adds	r7, #8
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}

0801705c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b082      	sub	sp, #8
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
 8017064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801706c:	b2db      	uxtb	r3, r3
 801706e:	3b01      	subs	r3, #1
 8017070:	2b02      	cmp	r3, #2
 8017072:	d81e      	bhi.n	80170b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	88db      	ldrh	r3, [r3, #6]
 8017078:	2b02      	cmp	r3, #2
 801707a:	d004      	beq.n	8017086 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801707c:	6839      	ldr	r1, [r7, #0]
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 f8a5 	bl	80171ce <USBD_CtlError>
        break;
 8017084:	e01a      	b.n	80170bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2201      	movs	r2, #1
 801708a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017092:	2b00      	cmp	r3, #0
 8017094:	d005      	beq.n	80170a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	68db      	ldr	r3, [r3, #12]
 801709a:	f043 0202 	orr.w	r2, r3, #2
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	330c      	adds	r3, #12
 80170a6:	2202      	movs	r2, #2
 80170a8:	4619      	mov	r1, r3
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f000 f900 	bl	80172b0 <USBD_CtlSendData>
      break;
 80170b0:	e004      	b.n	80170bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80170b2:	6839      	ldr	r1, [r7, #0]
 80170b4:	6878      	ldr	r0, [r7, #4]
 80170b6:	f000 f88a 	bl	80171ce <USBD_CtlError>
      break;
 80170ba:	bf00      	nop
  }
}
 80170bc:	bf00      	nop
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	885b      	ldrh	r3, [r3, #2]
 80170d2:	2b01      	cmp	r3, #1
 80170d4:	d107      	bne.n	80170e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	2201      	movs	r2, #1
 80170da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f000 f923 	bl	801732a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80170e4:	e013      	b.n	801710e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	885b      	ldrh	r3, [r3, #2]
 80170ea:	2b02      	cmp	r3, #2
 80170ec:	d10b      	bne.n	8017106 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	889b      	ldrh	r3, [r3, #4]
 80170f2:	0a1b      	lsrs	r3, r3, #8
 80170f4:	b29b      	uxth	r3, r3
 80170f6:	b2da      	uxtb	r2, r3
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f000 f913 	bl	801732a <USBD_CtlSendStatus>
}
 8017104:	e003      	b.n	801710e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017106:	6839      	ldr	r1, [r7, #0]
 8017108:	6878      	ldr	r0, [r7, #4]
 801710a:	f000 f860 	bl	80171ce <USBD_CtlError>
}
 801710e:	bf00      	nop
 8017110:	3708      	adds	r7, #8
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}

08017116 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017116:	b580      	push	{r7, lr}
 8017118:	b082      	sub	sp, #8
 801711a:	af00      	add	r7, sp, #0
 801711c:	6078      	str	r0, [r7, #4]
 801711e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017126:	b2db      	uxtb	r3, r3
 8017128:	3b01      	subs	r3, #1
 801712a:	2b02      	cmp	r3, #2
 801712c:	d80b      	bhi.n	8017146 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	885b      	ldrh	r3, [r3, #2]
 8017132:	2b01      	cmp	r3, #1
 8017134:	d10c      	bne.n	8017150 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	2200      	movs	r2, #0
 801713a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f000 f8f3 	bl	801732a <USBD_CtlSendStatus>
      }
      break;
 8017144:	e004      	b.n	8017150 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017146:	6839      	ldr	r1, [r7, #0]
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f000 f840 	bl	80171ce <USBD_CtlError>
      break;
 801714e:	e000      	b.n	8017152 <USBD_ClrFeature+0x3c>
      break;
 8017150:	bf00      	nop
  }
}
 8017152:	bf00      	nop
 8017154:	3708      	adds	r7, #8
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}

0801715a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801715a:	b580      	push	{r7, lr}
 801715c:	b084      	sub	sp, #16
 801715e:	af00      	add	r7, sp, #0
 8017160:	6078      	str	r0, [r7, #4]
 8017162:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	781a      	ldrb	r2, [r3, #0]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	3301      	adds	r3, #1
 8017174:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	781a      	ldrb	r2, [r3, #0]
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	3301      	adds	r3, #1
 8017182:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017184:	68f8      	ldr	r0, [r7, #12]
 8017186:	f7ff fa41 	bl	801660c <SWAPBYTE>
 801718a:	4603      	mov	r3, r0
 801718c:	461a      	mov	r2, r3
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	3301      	adds	r3, #1
 8017196:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	3301      	adds	r3, #1
 801719c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801719e:	68f8      	ldr	r0, [r7, #12]
 80171a0:	f7ff fa34 	bl	801660c <SWAPBYTE>
 80171a4:	4603      	mov	r3, r0
 80171a6:	461a      	mov	r2, r3
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	3301      	adds	r3, #1
 80171b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	3301      	adds	r3, #1
 80171b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80171b8:	68f8      	ldr	r0, [r7, #12]
 80171ba:	f7ff fa27 	bl	801660c <SWAPBYTE>
 80171be:	4603      	mov	r3, r0
 80171c0:	461a      	mov	r2, r3
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	80da      	strh	r2, [r3, #6]
}
 80171c6:	bf00      	nop
 80171c8:	3710      	adds	r7, #16
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}

080171ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171ce:	b580      	push	{r7, lr}
 80171d0:	b082      	sub	sp, #8
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	6078      	str	r0, [r7, #4]
 80171d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80171d8:	2180      	movs	r1, #128	; 0x80
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f004 fafb 	bl	801b7d6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80171e0:	2100      	movs	r1, #0
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	f004 faf7 	bl	801b7d6 <USBD_LL_StallEP>
}
 80171e8:	bf00      	nop
 80171ea:	3708      	adds	r7, #8
 80171ec:	46bd      	mov	sp, r7
 80171ee:	bd80      	pop	{r7, pc}

080171f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b086      	sub	sp, #24
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	60f8      	str	r0, [r7, #12]
 80171f8:	60b9      	str	r1, [r7, #8]
 80171fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80171fc:	2300      	movs	r3, #0
 80171fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d036      	beq.n	8017274 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801720a:	6938      	ldr	r0, [r7, #16]
 801720c:	f000 f836 	bl	801727c <USBD_GetLen>
 8017210:	4603      	mov	r3, r0
 8017212:	3301      	adds	r3, #1
 8017214:	b29b      	uxth	r3, r3
 8017216:	005b      	lsls	r3, r3, #1
 8017218:	b29a      	uxth	r2, r3
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801721e:	7dfb      	ldrb	r3, [r7, #23]
 8017220:	68ba      	ldr	r2, [r7, #8]
 8017222:	4413      	add	r3, r2
 8017224:	687a      	ldr	r2, [r7, #4]
 8017226:	7812      	ldrb	r2, [r2, #0]
 8017228:	701a      	strb	r2, [r3, #0]
  idx++;
 801722a:	7dfb      	ldrb	r3, [r7, #23]
 801722c:	3301      	adds	r3, #1
 801722e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017230:	7dfb      	ldrb	r3, [r7, #23]
 8017232:	68ba      	ldr	r2, [r7, #8]
 8017234:	4413      	add	r3, r2
 8017236:	2203      	movs	r2, #3
 8017238:	701a      	strb	r2, [r3, #0]
  idx++;
 801723a:	7dfb      	ldrb	r3, [r7, #23]
 801723c:	3301      	adds	r3, #1
 801723e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017240:	e013      	b.n	801726a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017242:	7dfb      	ldrb	r3, [r7, #23]
 8017244:	68ba      	ldr	r2, [r7, #8]
 8017246:	4413      	add	r3, r2
 8017248:	693a      	ldr	r2, [r7, #16]
 801724a:	7812      	ldrb	r2, [r2, #0]
 801724c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801724e:	693b      	ldr	r3, [r7, #16]
 8017250:	3301      	adds	r3, #1
 8017252:	613b      	str	r3, [r7, #16]
    idx++;
 8017254:	7dfb      	ldrb	r3, [r7, #23]
 8017256:	3301      	adds	r3, #1
 8017258:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801725a:	7dfb      	ldrb	r3, [r7, #23]
 801725c:	68ba      	ldr	r2, [r7, #8]
 801725e:	4413      	add	r3, r2
 8017260:	2200      	movs	r2, #0
 8017262:	701a      	strb	r2, [r3, #0]
    idx++;
 8017264:	7dfb      	ldrb	r3, [r7, #23]
 8017266:	3301      	adds	r3, #1
 8017268:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d1e7      	bne.n	8017242 <USBD_GetString+0x52>
 8017272:	e000      	b.n	8017276 <USBD_GetString+0x86>
    return;
 8017274:	bf00      	nop
  }
}
 8017276:	3718      	adds	r7, #24
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}

0801727c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801727c:	b480      	push	{r7}
 801727e:	b085      	sub	sp, #20
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017284:	2300      	movs	r3, #0
 8017286:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801728c:	e005      	b.n	801729a <USBD_GetLen+0x1e>
  {
    len++;
 801728e:	7bfb      	ldrb	r3, [r7, #15]
 8017290:	3301      	adds	r3, #1
 8017292:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	3301      	adds	r3, #1
 8017298:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d1f5      	bne.n	801728e <USBD_GetLen+0x12>
  }

  return len;
 80172a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3714      	adds	r7, #20
 80172a8:	46bd      	mov	sp, r7
 80172aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ae:	4770      	bx	lr

080172b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b084      	sub	sp, #16
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	60b9      	str	r1, [r7, #8]
 80172ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	2202      	movs	r2, #2
 80172c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	687a      	ldr	r2, [r7, #4]
 80172c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	68ba      	ldr	r2, [r7, #8]
 80172d4:	2100      	movs	r1, #0
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f004 fb06 	bl	801b8e8 <USBD_LL_Transmit>

  return USBD_OK;
 80172dc:	2300      	movs	r3, #0
}
 80172de:	4618      	mov	r0, r3
 80172e0:	3710      	adds	r7, #16
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}

080172e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80172e6:	b580      	push	{r7, lr}
 80172e8:	b084      	sub	sp, #16
 80172ea:	af00      	add	r7, sp, #0
 80172ec:	60f8      	str	r0, [r7, #12]
 80172ee:	60b9      	str	r1, [r7, #8]
 80172f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	68ba      	ldr	r2, [r7, #8]
 80172f6:	2100      	movs	r1, #0
 80172f8:	68f8      	ldr	r0, [r7, #12]
 80172fa:	f004 faf5 	bl	801b8e8 <USBD_LL_Transmit>

  return USBD_OK;
 80172fe:	2300      	movs	r3, #0
}
 8017300:	4618      	mov	r0, r3
 8017302:	3710      	adds	r7, #16
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}

08017308 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b084      	sub	sp, #16
 801730c:	af00      	add	r7, sp, #0
 801730e:	60f8      	str	r0, [r7, #12]
 8017310:	60b9      	str	r1, [r7, #8]
 8017312:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	68ba      	ldr	r2, [r7, #8]
 8017318:	2100      	movs	r1, #0
 801731a:	68f8      	ldr	r0, [r7, #12]
 801731c:	f004 fb05 	bl	801b92a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017320:	2300      	movs	r3, #0
}
 8017322:	4618      	mov	r0, r3
 8017324:	3710      	adds	r7, #16
 8017326:	46bd      	mov	sp, r7
 8017328:	bd80      	pop	{r7, pc}

0801732a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801732a:	b580      	push	{r7, lr}
 801732c:	b082      	sub	sp, #8
 801732e:	af00      	add	r7, sp, #0
 8017330:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	2204      	movs	r2, #4
 8017336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801733a:	2300      	movs	r3, #0
 801733c:	2200      	movs	r2, #0
 801733e:	2100      	movs	r1, #0
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f004 fad1 	bl	801b8e8 <USBD_LL_Transmit>

  return USBD_OK;
 8017346:	2300      	movs	r3, #0
}
 8017348:	4618      	mov	r0, r3
 801734a:	3708      	adds	r7, #8
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2205      	movs	r2, #5
 801735c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017360:	2300      	movs	r3, #0
 8017362:	2200      	movs	r2, #0
 8017364:	2100      	movs	r1, #0
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f004 fadf 	bl	801b92a <USBD_LL_PrepareReceive>

  return USBD_OK;
 801736c:	2300      	movs	r3, #0
}
 801736e:	4618      	mov	r0, r3
 8017370:	3708      	adds	r7, #8
 8017372:	46bd      	mov	sp, r7
 8017374:	bd80      	pop	{r7, pc}
	...

08017378 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b084      	sub	sp, #16
 801737c:	af00      	add	r7, sp, #0
 801737e:	4603      	mov	r3, r0
 8017380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8017382:	79fb      	ldrb	r3, [r7, #7]
 8017384:	4a08      	ldr	r2, [pc, #32]	; (80173a8 <disk_status+0x30>)
 8017386:	009b      	lsls	r3, r3, #2
 8017388:	4413      	add	r3, r2
 801738a:	685b      	ldr	r3, [r3, #4]
 801738c:	685b      	ldr	r3, [r3, #4]
 801738e:	79fa      	ldrb	r2, [r7, #7]
 8017390:	4905      	ldr	r1, [pc, #20]	; (80173a8 <disk_status+0x30>)
 8017392:	440a      	add	r2, r1
 8017394:	7a12      	ldrb	r2, [r2, #8]
 8017396:	4610      	mov	r0, r2
 8017398:	4798      	blx	r3
 801739a:	4603      	mov	r3, r0
 801739c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80173a0:	4618      	mov	r0, r3
 80173a2:	3710      	adds	r7, #16
 80173a4:	46bd      	mov	sp, r7
 80173a6:	bd80      	pop	{r7, pc}
 80173a8:	20001cd4 	.word	0x20001cd4

080173ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b084      	sub	sp, #16
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	4603      	mov	r3, r0
 80173b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80173b6:	2300      	movs	r3, #0
 80173b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80173ba:	79fb      	ldrb	r3, [r7, #7]
 80173bc:	4a0d      	ldr	r2, [pc, #52]	; (80173f4 <disk_initialize+0x48>)
 80173be:	5cd3      	ldrb	r3, [r2, r3]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d111      	bne.n	80173e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80173c4:	79fb      	ldrb	r3, [r7, #7]
 80173c6:	4a0b      	ldr	r2, [pc, #44]	; (80173f4 <disk_initialize+0x48>)
 80173c8:	2101      	movs	r1, #1
 80173ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80173cc:	79fb      	ldrb	r3, [r7, #7]
 80173ce:	4a09      	ldr	r2, [pc, #36]	; (80173f4 <disk_initialize+0x48>)
 80173d0:	009b      	lsls	r3, r3, #2
 80173d2:	4413      	add	r3, r2
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	79fa      	ldrb	r2, [r7, #7]
 80173da:	4906      	ldr	r1, [pc, #24]	; (80173f4 <disk_initialize+0x48>)
 80173dc:	440a      	add	r2, r1
 80173de:	7a12      	ldrb	r2, [r2, #8]
 80173e0:	4610      	mov	r0, r2
 80173e2:	4798      	blx	r3
 80173e4:	4603      	mov	r3, r0
 80173e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80173e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80173ea:	4618      	mov	r0, r3
 80173ec:	3710      	adds	r7, #16
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}
 80173f2:	bf00      	nop
 80173f4:	20001cd4 	.word	0x20001cd4

080173f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80173f8:	b590      	push	{r4, r7, lr}
 80173fa:	b087      	sub	sp, #28
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	60b9      	str	r1, [r7, #8]
 8017400:	607a      	str	r2, [r7, #4]
 8017402:	603b      	str	r3, [r7, #0]
 8017404:	4603      	mov	r3, r0
 8017406:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017408:	7bfb      	ldrb	r3, [r7, #15]
 801740a:	4a0a      	ldr	r2, [pc, #40]	; (8017434 <disk_read+0x3c>)
 801740c:	009b      	lsls	r3, r3, #2
 801740e:	4413      	add	r3, r2
 8017410:	685b      	ldr	r3, [r3, #4]
 8017412:	689c      	ldr	r4, [r3, #8]
 8017414:	7bfb      	ldrb	r3, [r7, #15]
 8017416:	4a07      	ldr	r2, [pc, #28]	; (8017434 <disk_read+0x3c>)
 8017418:	4413      	add	r3, r2
 801741a:	7a18      	ldrb	r0, [r3, #8]
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	687a      	ldr	r2, [r7, #4]
 8017420:	68b9      	ldr	r1, [r7, #8]
 8017422:	47a0      	blx	r4
 8017424:	4603      	mov	r3, r0
 8017426:	75fb      	strb	r3, [r7, #23]
  return res;
 8017428:	7dfb      	ldrb	r3, [r7, #23]
}
 801742a:	4618      	mov	r0, r3
 801742c:	371c      	adds	r7, #28
 801742e:	46bd      	mov	sp, r7
 8017430:	bd90      	pop	{r4, r7, pc}
 8017432:	bf00      	nop
 8017434:	20001cd4 	.word	0x20001cd4

08017438 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017438:	b590      	push	{r4, r7, lr}
 801743a:	b087      	sub	sp, #28
 801743c:	af00      	add	r7, sp, #0
 801743e:	60b9      	str	r1, [r7, #8]
 8017440:	607a      	str	r2, [r7, #4]
 8017442:	603b      	str	r3, [r7, #0]
 8017444:	4603      	mov	r3, r0
 8017446:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017448:	7bfb      	ldrb	r3, [r7, #15]
 801744a:	4a0a      	ldr	r2, [pc, #40]	; (8017474 <disk_write+0x3c>)
 801744c:	009b      	lsls	r3, r3, #2
 801744e:	4413      	add	r3, r2
 8017450:	685b      	ldr	r3, [r3, #4]
 8017452:	68dc      	ldr	r4, [r3, #12]
 8017454:	7bfb      	ldrb	r3, [r7, #15]
 8017456:	4a07      	ldr	r2, [pc, #28]	; (8017474 <disk_write+0x3c>)
 8017458:	4413      	add	r3, r2
 801745a:	7a18      	ldrb	r0, [r3, #8]
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	687a      	ldr	r2, [r7, #4]
 8017460:	68b9      	ldr	r1, [r7, #8]
 8017462:	47a0      	blx	r4
 8017464:	4603      	mov	r3, r0
 8017466:	75fb      	strb	r3, [r7, #23]
  return res;
 8017468:	7dfb      	ldrb	r3, [r7, #23]
}
 801746a:	4618      	mov	r0, r3
 801746c:	371c      	adds	r7, #28
 801746e:	46bd      	mov	sp, r7
 8017470:	bd90      	pop	{r4, r7, pc}
 8017472:	bf00      	nop
 8017474:	20001cd4 	.word	0x20001cd4

08017478 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b084      	sub	sp, #16
 801747c:	af00      	add	r7, sp, #0
 801747e:	4603      	mov	r3, r0
 8017480:	603a      	str	r2, [r7, #0]
 8017482:	71fb      	strb	r3, [r7, #7]
 8017484:	460b      	mov	r3, r1
 8017486:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017488:	79fb      	ldrb	r3, [r7, #7]
 801748a:	4a09      	ldr	r2, [pc, #36]	; (80174b0 <disk_ioctl+0x38>)
 801748c:	009b      	lsls	r3, r3, #2
 801748e:	4413      	add	r3, r2
 8017490:	685b      	ldr	r3, [r3, #4]
 8017492:	691b      	ldr	r3, [r3, #16]
 8017494:	79fa      	ldrb	r2, [r7, #7]
 8017496:	4906      	ldr	r1, [pc, #24]	; (80174b0 <disk_ioctl+0x38>)
 8017498:	440a      	add	r2, r1
 801749a:	7a10      	ldrb	r0, [r2, #8]
 801749c:	79b9      	ldrb	r1, [r7, #6]
 801749e:	683a      	ldr	r2, [r7, #0]
 80174a0:	4798      	blx	r3
 80174a2:	4603      	mov	r3, r0
 80174a4:	73fb      	strb	r3, [r7, #15]
  return res;
 80174a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	3710      	adds	r7, #16
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}
 80174b0:	20001cd4 	.word	0x20001cd4

080174b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80174b4:	b480      	push	{r7}
 80174b6:	b085      	sub	sp, #20
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	3301      	adds	r3, #1
 80174c0:	781b      	ldrb	r3, [r3, #0]
 80174c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80174c4:	89fb      	ldrh	r3, [r7, #14]
 80174c6:	021b      	lsls	r3, r3, #8
 80174c8:	b21a      	sxth	r2, r3
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	b21b      	sxth	r3, r3
 80174d0:	4313      	orrs	r3, r2
 80174d2:	b21b      	sxth	r3, r3
 80174d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80174d6:	89fb      	ldrh	r3, [r7, #14]
}
 80174d8:	4618      	mov	r0, r3
 80174da:	3714      	adds	r7, #20
 80174dc:	46bd      	mov	sp, r7
 80174de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e2:	4770      	bx	lr

080174e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80174e4:	b480      	push	{r7}
 80174e6:	b085      	sub	sp, #20
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	3303      	adds	r3, #3
 80174f0:	781b      	ldrb	r3, [r3, #0]
 80174f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	021b      	lsls	r3, r3, #8
 80174f8:	687a      	ldr	r2, [r7, #4]
 80174fa:	3202      	adds	r2, #2
 80174fc:	7812      	ldrb	r2, [r2, #0]
 80174fe:	4313      	orrs	r3, r2
 8017500:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	021b      	lsls	r3, r3, #8
 8017506:	687a      	ldr	r2, [r7, #4]
 8017508:	3201      	adds	r2, #1
 801750a:	7812      	ldrb	r2, [r2, #0]
 801750c:	4313      	orrs	r3, r2
 801750e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	021b      	lsls	r3, r3, #8
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	7812      	ldrb	r2, [r2, #0]
 8017518:	4313      	orrs	r3, r2
 801751a:	60fb      	str	r3, [r7, #12]
	return rv;
 801751c:	68fb      	ldr	r3, [r7, #12]
}
 801751e:	4618      	mov	r0, r3
 8017520:	3714      	adds	r7, #20
 8017522:	46bd      	mov	sp, r7
 8017524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017528:	4770      	bx	lr

0801752a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801752a:	b480      	push	{r7}
 801752c:	b083      	sub	sp, #12
 801752e:	af00      	add	r7, sp, #0
 8017530:	6078      	str	r0, [r7, #4]
 8017532:	460b      	mov	r3, r1
 8017534:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	1c5a      	adds	r2, r3, #1
 801753a:	607a      	str	r2, [r7, #4]
 801753c:	887a      	ldrh	r2, [r7, #2]
 801753e:	b2d2      	uxtb	r2, r2
 8017540:	701a      	strb	r2, [r3, #0]
 8017542:	887b      	ldrh	r3, [r7, #2]
 8017544:	0a1b      	lsrs	r3, r3, #8
 8017546:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	1c5a      	adds	r2, r3, #1
 801754c:	607a      	str	r2, [r7, #4]
 801754e:	887a      	ldrh	r2, [r7, #2]
 8017550:	b2d2      	uxtb	r2, r2
 8017552:	701a      	strb	r2, [r3, #0]
}
 8017554:	bf00      	nop
 8017556:	370c      	adds	r7, #12
 8017558:	46bd      	mov	sp, r7
 801755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755e:	4770      	bx	lr

08017560 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017560:	b480      	push	{r7}
 8017562:	b083      	sub	sp, #12
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
 8017568:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	1c5a      	adds	r2, r3, #1
 801756e:	607a      	str	r2, [r7, #4]
 8017570:	683a      	ldr	r2, [r7, #0]
 8017572:	b2d2      	uxtb	r2, r2
 8017574:	701a      	strb	r2, [r3, #0]
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	0a1b      	lsrs	r3, r3, #8
 801757a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	1c5a      	adds	r2, r3, #1
 8017580:	607a      	str	r2, [r7, #4]
 8017582:	683a      	ldr	r2, [r7, #0]
 8017584:	b2d2      	uxtb	r2, r2
 8017586:	701a      	strb	r2, [r3, #0]
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	0a1b      	lsrs	r3, r3, #8
 801758c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	1c5a      	adds	r2, r3, #1
 8017592:	607a      	str	r2, [r7, #4]
 8017594:	683a      	ldr	r2, [r7, #0]
 8017596:	b2d2      	uxtb	r2, r2
 8017598:	701a      	strb	r2, [r3, #0]
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	0a1b      	lsrs	r3, r3, #8
 801759e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	1c5a      	adds	r2, r3, #1
 80175a4:	607a      	str	r2, [r7, #4]
 80175a6:	683a      	ldr	r2, [r7, #0]
 80175a8:	b2d2      	uxtb	r2, r2
 80175aa:	701a      	strb	r2, [r3, #0]
}
 80175ac:	bf00      	nop
 80175ae:	370c      	adds	r7, #12
 80175b0:	46bd      	mov	sp, r7
 80175b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b6:	4770      	bx	lr

080175b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80175b8:	b480      	push	{r7}
 80175ba:	b087      	sub	sp, #28
 80175bc:	af00      	add	r7, sp, #0
 80175be:	60f8      	str	r0, [r7, #12]
 80175c0:	60b9      	str	r1, [r7, #8]
 80175c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d00d      	beq.n	80175ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80175d2:	693a      	ldr	r2, [r7, #16]
 80175d4:	1c53      	adds	r3, r2, #1
 80175d6:	613b      	str	r3, [r7, #16]
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	1c59      	adds	r1, r3, #1
 80175dc:	6179      	str	r1, [r7, #20]
 80175de:	7812      	ldrb	r2, [r2, #0]
 80175e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	3b01      	subs	r3, #1
 80175e6:	607b      	str	r3, [r7, #4]
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d1f1      	bne.n	80175d2 <mem_cpy+0x1a>
	}
}
 80175ee:	bf00      	nop
 80175f0:	371c      	adds	r7, #28
 80175f2:	46bd      	mov	sp, r7
 80175f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f8:	4770      	bx	lr

080175fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80175fa:	b480      	push	{r7}
 80175fc:	b087      	sub	sp, #28
 80175fe:	af00      	add	r7, sp, #0
 8017600:	60f8      	str	r0, [r7, #12]
 8017602:	60b9      	str	r1, [r7, #8]
 8017604:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801760a:	697b      	ldr	r3, [r7, #20]
 801760c:	1c5a      	adds	r2, r3, #1
 801760e:	617a      	str	r2, [r7, #20]
 8017610:	68ba      	ldr	r2, [r7, #8]
 8017612:	b2d2      	uxtb	r2, r2
 8017614:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	3b01      	subs	r3, #1
 801761a:	607b      	str	r3, [r7, #4]
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d1f3      	bne.n	801760a <mem_set+0x10>
}
 8017622:	bf00      	nop
 8017624:	bf00      	nop
 8017626:	371c      	adds	r7, #28
 8017628:	46bd      	mov	sp, r7
 801762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762e:	4770      	bx	lr

08017630 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017630:	b480      	push	{r7}
 8017632:	b089      	sub	sp, #36	; 0x24
 8017634:	af00      	add	r7, sp, #0
 8017636:	60f8      	str	r0, [r7, #12]
 8017638:	60b9      	str	r1, [r7, #8]
 801763a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	61fb      	str	r3, [r7, #28]
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017644:	2300      	movs	r3, #0
 8017646:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017648:	69fb      	ldr	r3, [r7, #28]
 801764a:	1c5a      	adds	r2, r3, #1
 801764c:	61fa      	str	r2, [r7, #28]
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	4619      	mov	r1, r3
 8017652:	69bb      	ldr	r3, [r7, #24]
 8017654:	1c5a      	adds	r2, r3, #1
 8017656:	61ba      	str	r2, [r7, #24]
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	1acb      	subs	r3, r1, r3
 801765c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	3b01      	subs	r3, #1
 8017662:	607b      	str	r3, [r7, #4]
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d002      	beq.n	8017670 <mem_cmp+0x40>
 801766a:	697b      	ldr	r3, [r7, #20]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d0eb      	beq.n	8017648 <mem_cmp+0x18>

	return r;
 8017670:	697b      	ldr	r3, [r7, #20]
}
 8017672:	4618      	mov	r0, r3
 8017674:	3724      	adds	r7, #36	; 0x24
 8017676:	46bd      	mov	sp, r7
 8017678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767c:	4770      	bx	lr

0801767e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801767e:	b480      	push	{r7}
 8017680:	b083      	sub	sp, #12
 8017682:	af00      	add	r7, sp, #0
 8017684:	6078      	str	r0, [r7, #4]
 8017686:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017688:	e002      	b.n	8017690 <chk_chr+0x12>
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	3301      	adds	r3, #1
 801768e:	607b      	str	r3, [r7, #4]
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d005      	beq.n	80176a4 <chk_chr+0x26>
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	461a      	mov	r2, r3
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	4293      	cmp	r3, r2
 80176a2:	d1f2      	bne.n	801768a <chk_chr+0xc>
	return *str;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	781b      	ldrb	r3, [r3, #0]
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	370c      	adds	r7, #12
 80176ac:	46bd      	mov	sp, r7
 80176ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b2:	4770      	bx	lr

080176b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80176b4:	b480      	push	{r7}
 80176b6:	b085      	sub	sp, #20
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80176be:	2300      	movs	r3, #0
 80176c0:	60bb      	str	r3, [r7, #8]
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	60fb      	str	r3, [r7, #12]
 80176c6:	e029      	b.n	801771c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80176c8:	4a27      	ldr	r2, [pc, #156]	; (8017768 <chk_lock+0xb4>)
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	011b      	lsls	r3, r3, #4
 80176ce:	4413      	add	r3, r2
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d01d      	beq.n	8017712 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80176d6:	4a24      	ldr	r2, [pc, #144]	; (8017768 <chk_lock+0xb4>)
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	011b      	lsls	r3, r3, #4
 80176dc:	4413      	add	r3, r2
 80176de:	681a      	ldr	r2, [r3, #0]
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	429a      	cmp	r2, r3
 80176e6:	d116      	bne.n	8017716 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80176e8:	4a1f      	ldr	r2, [pc, #124]	; (8017768 <chk_lock+0xb4>)
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	011b      	lsls	r3, r3, #4
 80176ee:	4413      	add	r3, r2
 80176f0:	3304      	adds	r3, #4
 80176f2:	681a      	ldr	r2, [r3, #0]
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d10c      	bne.n	8017716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80176fc:	4a1a      	ldr	r2, [pc, #104]	; (8017768 <chk_lock+0xb4>)
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	011b      	lsls	r3, r3, #4
 8017702:	4413      	add	r3, r2
 8017704:	3308      	adds	r3, #8
 8017706:	681a      	ldr	r2, [r3, #0]
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801770c:	429a      	cmp	r2, r3
 801770e:	d102      	bne.n	8017716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017710:	e007      	b.n	8017722 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017712:	2301      	movs	r3, #1
 8017714:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	3301      	adds	r3, #1
 801771a:	60fb      	str	r3, [r7, #12]
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	2b01      	cmp	r3, #1
 8017720:	d9d2      	bls.n	80176c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	2b02      	cmp	r3, #2
 8017726:	d109      	bne.n	801773c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d102      	bne.n	8017734 <chk_lock+0x80>
 801772e:	683b      	ldr	r3, [r7, #0]
 8017730:	2b02      	cmp	r3, #2
 8017732:	d101      	bne.n	8017738 <chk_lock+0x84>
 8017734:	2300      	movs	r3, #0
 8017736:	e010      	b.n	801775a <chk_lock+0xa6>
 8017738:	2312      	movs	r3, #18
 801773a:	e00e      	b.n	801775a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d108      	bne.n	8017754 <chk_lock+0xa0>
 8017742:	4a09      	ldr	r2, [pc, #36]	; (8017768 <chk_lock+0xb4>)
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	011b      	lsls	r3, r3, #4
 8017748:	4413      	add	r3, r2
 801774a:	330c      	adds	r3, #12
 801774c:	881b      	ldrh	r3, [r3, #0]
 801774e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017752:	d101      	bne.n	8017758 <chk_lock+0xa4>
 8017754:	2310      	movs	r3, #16
 8017756:	e000      	b.n	801775a <chk_lock+0xa6>
 8017758:	2300      	movs	r3, #0
}
 801775a:	4618      	mov	r0, r3
 801775c:	3714      	adds	r7, #20
 801775e:	46bd      	mov	sp, r7
 8017760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017764:	4770      	bx	lr
 8017766:	bf00      	nop
 8017768:	20001ab4 	.word	0x20001ab4

0801776c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801776c:	b480      	push	{r7}
 801776e:	b083      	sub	sp, #12
 8017770:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017772:	2300      	movs	r3, #0
 8017774:	607b      	str	r3, [r7, #4]
 8017776:	e002      	b.n	801777e <enq_lock+0x12>
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	3301      	adds	r3, #1
 801777c:	607b      	str	r3, [r7, #4]
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2b01      	cmp	r3, #1
 8017782:	d806      	bhi.n	8017792 <enq_lock+0x26>
 8017784:	4a09      	ldr	r2, [pc, #36]	; (80177ac <enq_lock+0x40>)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	011b      	lsls	r3, r3, #4
 801778a:	4413      	add	r3, r2
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d1f2      	bne.n	8017778 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	2b02      	cmp	r3, #2
 8017796:	bf14      	ite	ne
 8017798:	2301      	movne	r3, #1
 801779a:	2300      	moveq	r3, #0
 801779c:	b2db      	uxtb	r3, r3
}
 801779e:	4618      	mov	r0, r3
 80177a0:	370c      	adds	r7, #12
 80177a2:	46bd      	mov	sp, r7
 80177a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a8:	4770      	bx	lr
 80177aa:	bf00      	nop
 80177ac:	20001ab4 	.word	0x20001ab4

080177b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80177b0:	b480      	push	{r7}
 80177b2:	b085      	sub	sp, #20
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
 80177b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80177ba:	2300      	movs	r3, #0
 80177bc:	60fb      	str	r3, [r7, #12]
 80177be:	e01f      	b.n	8017800 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80177c0:	4a41      	ldr	r2, [pc, #260]	; (80178c8 <inc_lock+0x118>)
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	011b      	lsls	r3, r3, #4
 80177c6:	4413      	add	r3, r2
 80177c8:	681a      	ldr	r2, [r3, #0]
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	429a      	cmp	r2, r3
 80177d0:	d113      	bne.n	80177fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80177d2:	4a3d      	ldr	r2, [pc, #244]	; (80178c8 <inc_lock+0x118>)
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	011b      	lsls	r3, r3, #4
 80177d8:	4413      	add	r3, r2
 80177da:	3304      	adds	r3, #4
 80177dc:	681a      	ldr	r2, [r3, #0]
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80177e2:	429a      	cmp	r2, r3
 80177e4:	d109      	bne.n	80177fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80177e6:	4a38      	ldr	r2, [pc, #224]	; (80178c8 <inc_lock+0x118>)
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	011b      	lsls	r3, r3, #4
 80177ec:	4413      	add	r3, r2
 80177ee:	3308      	adds	r3, #8
 80177f0:	681a      	ldr	r2, [r3, #0]
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d006      	beq.n	8017808 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	3301      	adds	r3, #1
 80177fe:	60fb      	str	r3, [r7, #12]
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	2b01      	cmp	r3, #1
 8017804:	d9dc      	bls.n	80177c0 <inc_lock+0x10>
 8017806:	e000      	b.n	801780a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017808:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	2b02      	cmp	r3, #2
 801780e:	d132      	bne.n	8017876 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017810:	2300      	movs	r3, #0
 8017812:	60fb      	str	r3, [r7, #12]
 8017814:	e002      	b.n	801781c <inc_lock+0x6c>
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	3301      	adds	r3, #1
 801781a:	60fb      	str	r3, [r7, #12]
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	2b01      	cmp	r3, #1
 8017820:	d806      	bhi.n	8017830 <inc_lock+0x80>
 8017822:	4a29      	ldr	r2, [pc, #164]	; (80178c8 <inc_lock+0x118>)
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	011b      	lsls	r3, r3, #4
 8017828:	4413      	add	r3, r2
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d1f2      	bne.n	8017816 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	2b02      	cmp	r3, #2
 8017834:	d101      	bne.n	801783a <inc_lock+0x8a>
 8017836:	2300      	movs	r3, #0
 8017838:	e040      	b.n	80178bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	681a      	ldr	r2, [r3, #0]
 801783e:	4922      	ldr	r1, [pc, #136]	; (80178c8 <inc_lock+0x118>)
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	011b      	lsls	r3, r3, #4
 8017844:	440b      	add	r3, r1
 8017846:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	689a      	ldr	r2, [r3, #8]
 801784c:	491e      	ldr	r1, [pc, #120]	; (80178c8 <inc_lock+0x118>)
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	011b      	lsls	r3, r3, #4
 8017852:	440b      	add	r3, r1
 8017854:	3304      	adds	r3, #4
 8017856:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	695a      	ldr	r2, [r3, #20]
 801785c:	491a      	ldr	r1, [pc, #104]	; (80178c8 <inc_lock+0x118>)
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	011b      	lsls	r3, r3, #4
 8017862:	440b      	add	r3, r1
 8017864:	3308      	adds	r3, #8
 8017866:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017868:	4a17      	ldr	r2, [pc, #92]	; (80178c8 <inc_lock+0x118>)
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	011b      	lsls	r3, r3, #4
 801786e:	4413      	add	r3, r2
 8017870:	330c      	adds	r3, #12
 8017872:	2200      	movs	r2, #0
 8017874:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d009      	beq.n	8017890 <inc_lock+0xe0>
 801787c:	4a12      	ldr	r2, [pc, #72]	; (80178c8 <inc_lock+0x118>)
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	011b      	lsls	r3, r3, #4
 8017882:	4413      	add	r3, r2
 8017884:	330c      	adds	r3, #12
 8017886:	881b      	ldrh	r3, [r3, #0]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d001      	beq.n	8017890 <inc_lock+0xe0>
 801788c:	2300      	movs	r3, #0
 801788e:	e015      	b.n	80178bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017890:	683b      	ldr	r3, [r7, #0]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d108      	bne.n	80178a8 <inc_lock+0xf8>
 8017896:	4a0c      	ldr	r2, [pc, #48]	; (80178c8 <inc_lock+0x118>)
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	011b      	lsls	r3, r3, #4
 801789c:	4413      	add	r3, r2
 801789e:	330c      	adds	r3, #12
 80178a0:	881b      	ldrh	r3, [r3, #0]
 80178a2:	3301      	adds	r3, #1
 80178a4:	b29a      	uxth	r2, r3
 80178a6:	e001      	b.n	80178ac <inc_lock+0xfc>
 80178a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80178ac:	4906      	ldr	r1, [pc, #24]	; (80178c8 <inc_lock+0x118>)
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	011b      	lsls	r3, r3, #4
 80178b2:	440b      	add	r3, r1
 80178b4:	330c      	adds	r3, #12
 80178b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	3301      	adds	r3, #1
}
 80178bc:	4618      	mov	r0, r3
 80178be:	3714      	adds	r7, #20
 80178c0:	46bd      	mov	sp, r7
 80178c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c6:	4770      	bx	lr
 80178c8:	20001ab4 	.word	0x20001ab4

080178cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80178cc:	b480      	push	{r7}
 80178ce:	b085      	sub	sp, #20
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	3b01      	subs	r3, #1
 80178d8:	607b      	str	r3, [r7, #4]
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	2b01      	cmp	r3, #1
 80178de:	d825      	bhi.n	801792c <dec_lock+0x60>
		n = Files[i].ctr;
 80178e0:	4a17      	ldr	r2, [pc, #92]	; (8017940 <dec_lock+0x74>)
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	011b      	lsls	r3, r3, #4
 80178e6:	4413      	add	r3, r2
 80178e8:	330c      	adds	r3, #12
 80178ea:	881b      	ldrh	r3, [r3, #0]
 80178ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80178ee:	89fb      	ldrh	r3, [r7, #14]
 80178f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80178f4:	d101      	bne.n	80178fa <dec_lock+0x2e>
 80178f6:	2300      	movs	r3, #0
 80178f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80178fa:	89fb      	ldrh	r3, [r7, #14]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d002      	beq.n	8017906 <dec_lock+0x3a>
 8017900:	89fb      	ldrh	r3, [r7, #14]
 8017902:	3b01      	subs	r3, #1
 8017904:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017906:	4a0e      	ldr	r2, [pc, #56]	; (8017940 <dec_lock+0x74>)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	011b      	lsls	r3, r3, #4
 801790c:	4413      	add	r3, r2
 801790e:	330c      	adds	r3, #12
 8017910:	89fa      	ldrh	r2, [r7, #14]
 8017912:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017914:	89fb      	ldrh	r3, [r7, #14]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d105      	bne.n	8017926 <dec_lock+0x5a>
 801791a:	4a09      	ldr	r2, [pc, #36]	; (8017940 <dec_lock+0x74>)
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	011b      	lsls	r3, r3, #4
 8017920:	4413      	add	r3, r2
 8017922:	2200      	movs	r2, #0
 8017924:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017926:	2300      	movs	r3, #0
 8017928:	737b      	strb	r3, [r7, #13]
 801792a:	e001      	b.n	8017930 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801792c:	2302      	movs	r3, #2
 801792e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017930:	7b7b      	ldrb	r3, [r7, #13]
}
 8017932:	4618      	mov	r0, r3
 8017934:	3714      	adds	r7, #20
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr
 801793e:	bf00      	nop
 8017940:	20001ab4 	.word	0x20001ab4

08017944 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017944:	b480      	push	{r7}
 8017946:	b085      	sub	sp, #20
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801794c:	2300      	movs	r3, #0
 801794e:	60fb      	str	r3, [r7, #12]
 8017950:	e010      	b.n	8017974 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017952:	4a0d      	ldr	r2, [pc, #52]	; (8017988 <clear_lock+0x44>)
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	011b      	lsls	r3, r3, #4
 8017958:	4413      	add	r3, r2
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	687a      	ldr	r2, [r7, #4]
 801795e:	429a      	cmp	r2, r3
 8017960:	d105      	bne.n	801796e <clear_lock+0x2a>
 8017962:	4a09      	ldr	r2, [pc, #36]	; (8017988 <clear_lock+0x44>)
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	011b      	lsls	r3, r3, #4
 8017968:	4413      	add	r3, r2
 801796a:	2200      	movs	r2, #0
 801796c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	3301      	adds	r3, #1
 8017972:	60fb      	str	r3, [r7, #12]
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	2b01      	cmp	r3, #1
 8017978:	d9eb      	bls.n	8017952 <clear_lock+0xe>
	}
}
 801797a:	bf00      	nop
 801797c:	bf00      	nop
 801797e:	3714      	adds	r7, #20
 8017980:	46bd      	mov	sp, r7
 8017982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017986:	4770      	bx	lr
 8017988:	20001ab4 	.word	0x20001ab4

0801798c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b086      	sub	sp, #24
 8017990:	af00      	add	r7, sp, #0
 8017992:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017994:	2300      	movs	r3, #0
 8017996:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	78db      	ldrb	r3, [r3, #3]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d034      	beq.n	8017a0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	7858      	ldrb	r0, [r3, #1]
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80179b0:	2301      	movs	r3, #1
 80179b2:	697a      	ldr	r2, [r7, #20]
 80179b4:	f7ff fd40 	bl	8017438 <disk_write>
 80179b8:	4603      	mov	r3, r0
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d002      	beq.n	80179c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80179be:	2301      	movs	r3, #1
 80179c0:	73fb      	strb	r3, [r7, #15]
 80179c2:	e022      	b.n	8017a0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2200      	movs	r2, #0
 80179c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ce:	697a      	ldr	r2, [r7, #20]
 80179d0:	1ad2      	subs	r2, r2, r3
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	69db      	ldr	r3, [r3, #28]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d217      	bcs.n	8017a0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	789b      	ldrb	r3, [r3, #2]
 80179de:	613b      	str	r3, [r7, #16]
 80179e0:	e010      	b.n	8017a04 <sync_window+0x78>
					wsect += fs->fsize;
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	69db      	ldr	r3, [r3, #28]
 80179e6:	697a      	ldr	r2, [r7, #20]
 80179e8:	4413      	add	r3, r2
 80179ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	7858      	ldrb	r0, [r3, #1]
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80179f6:	2301      	movs	r3, #1
 80179f8:	697a      	ldr	r2, [r7, #20]
 80179fa:	f7ff fd1d 	bl	8017438 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80179fe:	693b      	ldr	r3, [r7, #16]
 8017a00:	3b01      	subs	r3, #1
 8017a02:	613b      	str	r3, [r7, #16]
 8017a04:	693b      	ldr	r3, [r7, #16]
 8017a06:	2b01      	cmp	r3, #1
 8017a08:	d8eb      	bhi.n	80179e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	3718      	adds	r7, #24
 8017a10:	46bd      	mov	sp, r7
 8017a12:	bd80      	pop	{r7, pc}

08017a14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b084      	sub	sp, #16
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
 8017a1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017a1e:	2300      	movs	r3, #0
 8017a20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a26:	683a      	ldr	r2, [r7, #0]
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d01b      	beq.n	8017a64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017a2c:	6878      	ldr	r0, [r7, #4]
 8017a2e:	f7ff ffad 	bl	801798c <sync_window>
 8017a32:	4603      	mov	r3, r0
 8017a34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017a36:	7bfb      	ldrb	r3, [r7, #15]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d113      	bne.n	8017a64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	7858      	ldrb	r0, [r3, #1]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017a46:	2301      	movs	r3, #1
 8017a48:	683a      	ldr	r2, [r7, #0]
 8017a4a:	f7ff fcd5 	bl	80173f8 <disk_read>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d004      	beq.n	8017a5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017a54:	f04f 33ff 	mov.w	r3, #4294967295
 8017a58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	683a      	ldr	r2, [r7, #0]
 8017a62:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8017a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a66:	4618      	mov	r0, r3
 8017a68:	3710      	adds	r7, #16
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	bd80      	pop	{r7, pc}
	...

08017a70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b084      	sub	sp, #16
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	f7ff ff87 	bl	801798c <sync_window>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017a82:	7bfb      	ldrb	r3, [r7, #15]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d158      	bne.n	8017b3a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	2b03      	cmp	r3, #3
 8017a8e:	d148      	bne.n	8017b22 <sync_fs+0xb2>
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	791b      	ldrb	r3, [r3, #4]
 8017a94:	2b01      	cmp	r3, #1
 8017a96:	d144      	bne.n	8017b22 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	3334      	adds	r3, #52	; 0x34
 8017a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017aa0:	2100      	movs	r1, #0
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7ff fda9 	bl	80175fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	3334      	adds	r3, #52	; 0x34
 8017aac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017ab0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	f7ff fd38 	bl	801752a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	3334      	adds	r3, #52	; 0x34
 8017abe:	4921      	ldr	r1, [pc, #132]	; (8017b44 <sync_fs+0xd4>)
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7ff fd4d 	bl	8017560 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	3334      	adds	r3, #52	; 0x34
 8017aca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017ace:	491e      	ldr	r1, [pc, #120]	; (8017b48 <sync_fs+0xd8>)
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f7ff fd45 	bl	8017560 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	3334      	adds	r3, #52	; 0x34
 8017ada:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	695b      	ldr	r3, [r3, #20]
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	4610      	mov	r0, r2
 8017ae6:	f7ff fd3b 	bl	8017560 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	3334      	adds	r3, #52	; 0x34
 8017aee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	691b      	ldr	r3, [r3, #16]
 8017af6:	4619      	mov	r1, r3
 8017af8:	4610      	mov	r0, r2
 8017afa:	f7ff fd31 	bl	8017560 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6a1b      	ldr	r3, [r3, #32]
 8017b02:	1c5a      	adds	r2, r3, #1
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	7858      	ldrb	r0, [r3, #1]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017b16:	2301      	movs	r3, #1
 8017b18:	f7ff fc8e 	bl	8017438 <disk_write>
			fs->fsi_flag = 0;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	785b      	ldrb	r3, [r3, #1]
 8017b26:	2200      	movs	r2, #0
 8017b28:	2100      	movs	r1, #0
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	f7ff fca4 	bl	8017478 <disk_ioctl>
 8017b30:	4603      	mov	r3, r0
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d001      	beq.n	8017b3a <sync_fs+0xca>
 8017b36:	2301      	movs	r3, #1
 8017b38:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3710      	adds	r7, #16
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}
 8017b44:	41615252 	.word	0x41615252
 8017b48:	61417272 	.word	0x61417272

08017b4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	b083      	sub	sp, #12
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
 8017b54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	3b02      	subs	r3, #2
 8017b5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	699b      	ldr	r3, [r3, #24]
 8017b60:	3b02      	subs	r3, #2
 8017b62:	683a      	ldr	r2, [r7, #0]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d301      	bcc.n	8017b6c <clust2sect+0x20>
 8017b68:	2300      	movs	r3, #0
 8017b6a:	e008      	b.n	8017b7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	895b      	ldrh	r3, [r3, #10]
 8017b70:	461a      	mov	r2, r3
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	fb03 f202 	mul.w	r2, r3, r2
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b7c:	4413      	add	r3, r2
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	370c      	adds	r7, #12
 8017b82:	46bd      	mov	sp, r7
 8017b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b88:	4770      	bx	lr

08017b8a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017b8a:	b580      	push	{r7, lr}
 8017b8c:	b086      	sub	sp, #24
 8017b8e:	af00      	add	r7, sp, #0
 8017b90:	6078      	str	r0, [r7, #4]
 8017b92:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017b9a:	683b      	ldr	r3, [r7, #0]
 8017b9c:	2b01      	cmp	r3, #1
 8017b9e:	d904      	bls.n	8017baa <get_fat+0x20>
 8017ba0:	693b      	ldr	r3, [r7, #16]
 8017ba2:	699b      	ldr	r3, [r3, #24]
 8017ba4:	683a      	ldr	r2, [r7, #0]
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	d302      	bcc.n	8017bb0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017baa:	2301      	movs	r3, #1
 8017bac:	617b      	str	r3, [r7, #20]
 8017bae:	e08f      	b.n	8017cd0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8017bb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017bb6:	693b      	ldr	r3, [r7, #16]
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	2b03      	cmp	r3, #3
 8017bbc:	d062      	beq.n	8017c84 <get_fat+0xfa>
 8017bbe:	2b03      	cmp	r3, #3
 8017bc0:	dc7c      	bgt.n	8017cbc <get_fat+0x132>
 8017bc2:	2b01      	cmp	r3, #1
 8017bc4:	d002      	beq.n	8017bcc <get_fat+0x42>
 8017bc6:	2b02      	cmp	r3, #2
 8017bc8:	d042      	beq.n	8017c50 <get_fat+0xc6>
 8017bca:	e077      	b.n	8017cbc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017bcc:	683b      	ldr	r3, [r7, #0]
 8017bce:	60fb      	str	r3, [r7, #12]
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	085b      	lsrs	r3, r3, #1
 8017bd4:	68fa      	ldr	r2, [r7, #12]
 8017bd6:	4413      	add	r3, r2
 8017bd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	0a5b      	lsrs	r3, r3, #9
 8017be2:	4413      	add	r3, r2
 8017be4:	4619      	mov	r1, r3
 8017be6:	6938      	ldr	r0, [r7, #16]
 8017be8:	f7ff ff14 	bl	8017a14 <move_window>
 8017bec:	4603      	mov	r3, r0
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d167      	bne.n	8017cc2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	1c5a      	adds	r2, r3, #1
 8017bf6:	60fa      	str	r2, [r7, #12]
 8017bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017bfc:	693a      	ldr	r2, [r7, #16]
 8017bfe:	4413      	add	r3, r2
 8017c00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017c04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017c06:	693b      	ldr	r3, [r7, #16]
 8017c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	0a5b      	lsrs	r3, r3, #9
 8017c0e:	4413      	add	r3, r2
 8017c10:	4619      	mov	r1, r3
 8017c12:	6938      	ldr	r0, [r7, #16]
 8017c14:	f7ff fefe 	bl	8017a14 <move_window>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d153      	bne.n	8017cc6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c24:	693a      	ldr	r2, [r7, #16]
 8017c26:	4413      	add	r3, r2
 8017c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017c2c:	021b      	lsls	r3, r3, #8
 8017c2e:	461a      	mov	r2, r3
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	4313      	orrs	r3, r2
 8017c34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	f003 0301 	and.w	r3, r3, #1
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d002      	beq.n	8017c46 <get_fat+0xbc>
 8017c40:	68bb      	ldr	r3, [r7, #8]
 8017c42:	091b      	lsrs	r3, r3, #4
 8017c44:	e002      	b.n	8017c4c <get_fat+0xc2>
 8017c46:	68bb      	ldr	r3, [r7, #8]
 8017c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017c4c:	617b      	str	r3, [r7, #20]
			break;
 8017c4e:	e03f      	b.n	8017cd0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017c50:	693b      	ldr	r3, [r7, #16]
 8017c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017c54:	683b      	ldr	r3, [r7, #0]
 8017c56:	0a1b      	lsrs	r3, r3, #8
 8017c58:	4413      	add	r3, r2
 8017c5a:	4619      	mov	r1, r3
 8017c5c:	6938      	ldr	r0, [r7, #16]
 8017c5e:	f7ff fed9 	bl	8017a14 <move_window>
 8017c62:	4603      	mov	r3, r0
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d130      	bne.n	8017cca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	005b      	lsls	r3, r3, #1
 8017c72:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017c76:	4413      	add	r3, r2
 8017c78:	4618      	mov	r0, r3
 8017c7a:	f7ff fc1b 	bl	80174b4 <ld_word>
 8017c7e:	4603      	mov	r3, r0
 8017c80:	617b      	str	r3, [r7, #20]
			break;
 8017c82:	e025      	b.n	8017cd0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017c84:	693b      	ldr	r3, [r7, #16]
 8017c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	09db      	lsrs	r3, r3, #7
 8017c8c:	4413      	add	r3, r2
 8017c8e:	4619      	mov	r1, r3
 8017c90:	6938      	ldr	r0, [r7, #16]
 8017c92:	f7ff febf 	bl	8017a14 <move_window>
 8017c96:	4603      	mov	r3, r0
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d118      	bne.n	8017cce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017c9c:	693b      	ldr	r3, [r7, #16]
 8017c9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	009b      	lsls	r3, r3, #2
 8017ca6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017caa:	4413      	add	r3, r2
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7ff fc19 	bl	80174e4 <ld_dword>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017cb8:	617b      	str	r3, [r7, #20]
			break;
 8017cba:	e009      	b.n	8017cd0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017cbc:	2301      	movs	r3, #1
 8017cbe:	617b      	str	r3, [r7, #20]
 8017cc0:	e006      	b.n	8017cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cc2:	bf00      	nop
 8017cc4:	e004      	b.n	8017cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017cc6:	bf00      	nop
 8017cc8:	e002      	b.n	8017cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017cca:	bf00      	nop
 8017ccc:	e000      	b.n	8017cd0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017cce:	bf00      	nop
		}
	}

	return val;
 8017cd0:	697b      	ldr	r3, [r7, #20]
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	3718      	adds	r7, #24
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}

08017cda <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017cda:	b590      	push	{r4, r7, lr}
 8017cdc:	b089      	sub	sp, #36	; 0x24
 8017cde:	af00      	add	r7, sp, #0
 8017ce0:	60f8      	str	r0, [r7, #12]
 8017ce2:	60b9      	str	r1, [r7, #8]
 8017ce4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017ce6:	2302      	movs	r3, #2
 8017ce8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	2b01      	cmp	r3, #1
 8017cee:	f240 80d2 	bls.w	8017e96 <put_fat+0x1bc>
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	699b      	ldr	r3, [r3, #24]
 8017cf6:	68ba      	ldr	r2, [r7, #8]
 8017cf8:	429a      	cmp	r2, r3
 8017cfa:	f080 80cc 	bcs.w	8017e96 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	2b03      	cmp	r3, #3
 8017d04:	f000 8096 	beq.w	8017e34 <put_fat+0x15a>
 8017d08:	2b03      	cmp	r3, #3
 8017d0a:	f300 80cd 	bgt.w	8017ea8 <put_fat+0x1ce>
 8017d0e:	2b01      	cmp	r3, #1
 8017d10:	d002      	beq.n	8017d18 <put_fat+0x3e>
 8017d12:	2b02      	cmp	r3, #2
 8017d14:	d06e      	beq.n	8017df4 <put_fat+0x11a>
 8017d16:	e0c7      	b.n	8017ea8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017d18:	68bb      	ldr	r3, [r7, #8]
 8017d1a:	61bb      	str	r3, [r7, #24]
 8017d1c:	69bb      	ldr	r3, [r7, #24]
 8017d1e:	085b      	lsrs	r3, r3, #1
 8017d20:	69ba      	ldr	r2, [r7, #24]
 8017d22:	4413      	add	r3, r2
 8017d24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017d2a:	69bb      	ldr	r3, [r7, #24]
 8017d2c:	0a5b      	lsrs	r3, r3, #9
 8017d2e:	4413      	add	r3, r2
 8017d30:	4619      	mov	r1, r3
 8017d32:	68f8      	ldr	r0, [r7, #12]
 8017d34:	f7ff fe6e 	bl	8017a14 <move_window>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017d3c:	7ffb      	ldrb	r3, [r7, #31]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	f040 80ab 	bne.w	8017e9a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017d4a:	69bb      	ldr	r3, [r7, #24]
 8017d4c:	1c59      	adds	r1, r3, #1
 8017d4e:	61b9      	str	r1, [r7, #24]
 8017d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017d54:	4413      	add	r3, r2
 8017d56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	f003 0301 	and.w	r3, r3, #1
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d00d      	beq.n	8017d7e <put_fat+0xa4>
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	781b      	ldrb	r3, [r3, #0]
 8017d66:	b25b      	sxtb	r3, r3
 8017d68:	f003 030f 	and.w	r3, r3, #15
 8017d6c:	b25a      	sxtb	r2, r3
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	b2db      	uxtb	r3, r3
 8017d72:	011b      	lsls	r3, r3, #4
 8017d74:	b25b      	sxtb	r3, r3
 8017d76:	4313      	orrs	r3, r2
 8017d78:	b25b      	sxtb	r3, r3
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	e001      	b.n	8017d82 <put_fat+0xa8>
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	b2db      	uxtb	r3, r3
 8017d82:	697a      	ldr	r2, [r7, #20]
 8017d84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	2201      	movs	r2, #1
 8017d8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017d90:	69bb      	ldr	r3, [r7, #24]
 8017d92:	0a5b      	lsrs	r3, r3, #9
 8017d94:	4413      	add	r3, r2
 8017d96:	4619      	mov	r1, r3
 8017d98:	68f8      	ldr	r0, [r7, #12]
 8017d9a:	f7ff fe3b 	bl	8017a14 <move_window>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017da2:	7ffb      	ldrb	r3, [r7, #31]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d17a      	bne.n	8017e9e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8017da8:	68fb      	ldr	r3, [r7, #12]
 8017daa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017dae:	69bb      	ldr	r3, [r7, #24]
 8017db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017db4:	4413      	add	r3, r2
 8017db6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017db8:	68bb      	ldr	r3, [r7, #8]
 8017dba:	f003 0301 	and.w	r3, r3, #1
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d003      	beq.n	8017dca <put_fat+0xf0>
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	091b      	lsrs	r3, r3, #4
 8017dc6:	b2db      	uxtb	r3, r3
 8017dc8:	e00e      	b.n	8017de8 <put_fat+0x10e>
 8017dca:	697b      	ldr	r3, [r7, #20]
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	b25b      	sxtb	r3, r3
 8017dd0:	f023 030f 	bic.w	r3, r3, #15
 8017dd4:	b25a      	sxtb	r2, r3
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	0a1b      	lsrs	r3, r3, #8
 8017dda:	b25b      	sxtb	r3, r3
 8017ddc:	f003 030f 	and.w	r3, r3, #15
 8017de0:	b25b      	sxtb	r3, r3
 8017de2:	4313      	orrs	r3, r2
 8017de4:	b25b      	sxtb	r3, r3
 8017de6:	b2db      	uxtb	r3, r3
 8017de8:	697a      	ldr	r2, [r7, #20]
 8017dea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	2201      	movs	r2, #1
 8017df0:	70da      	strb	r2, [r3, #3]
			break;
 8017df2:	e059      	b.n	8017ea8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	0a1b      	lsrs	r3, r3, #8
 8017dfc:	4413      	add	r3, r2
 8017dfe:	4619      	mov	r1, r3
 8017e00:	68f8      	ldr	r0, [r7, #12]
 8017e02:	f7ff fe07 	bl	8017a14 <move_window>
 8017e06:	4603      	mov	r3, r0
 8017e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017e0a:	7ffb      	ldrb	r3, [r7, #31]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d148      	bne.n	8017ea2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017e16:	68bb      	ldr	r3, [r7, #8]
 8017e18:	005b      	lsls	r3, r3, #1
 8017e1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017e1e:	4413      	add	r3, r2
 8017e20:	687a      	ldr	r2, [r7, #4]
 8017e22:	b292      	uxth	r2, r2
 8017e24:	4611      	mov	r1, r2
 8017e26:	4618      	mov	r0, r3
 8017e28:	f7ff fb7f 	bl	801752a <st_word>
			fs->wflag = 1;
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	2201      	movs	r2, #1
 8017e30:	70da      	strb	r2, [r3, #3]
			break;
 8017e32:	e039      	b.n	8017ea8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	09db      	lsrs	r3, r3, #7
 8017e3c:	4413      	add	r3, r2
 8017e3e:	4619      	mov	r1, r3
 8017e40:	68f8      	ldr	r0, [r7, #12]
 8017e42:	f7ff fde7 	bl	8017a14 <move_window>
 8017e46:	4603      	mov	r3, r0
 8017e48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017e4a:	7ffb      	ldrb	r3, [r7, #31]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d12a      	bne.n	8017ea6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017e5c:	68bb      	ldr	r3, [r7, #8]
 8017e5e:	009b      	lsls	r3, r3, #2
 8017e60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017e64:	4413      	add	r3, r2
 8017e66:	4618      	mov	r0, r3
 8017e68:	f7ff fb3c 	bl	80174e4 <ld_dword>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017e72:	4323      	orrs	r3, r4
 8017e74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017e7c:	68bb      	ldr	r3, [r7, #8]
 8017e7e:	009b      	lsls	r3, r3, #2
 8017e80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017e84:	4413      	add	r3, r2
 8017e86:	6879      	ldr	r1, [r7, #4]
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7ff fb69 	bl	8017560 <st_dword>
			fs->wflag = 1;
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	2201      	movs	r2, #1
 8017e92:	70da      	strb	r2, [r3, #3]
			break;
 8017e94:	e008      	b.n	8017ea8 <put_fat+0x1ce>
		}
	}
 8017e96:	bf00      	nop
 8017e98:	e006      	b.n	8017ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017e9a:	bf00      	nop
 8017e9c:	e004      	b.n	8017ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017e9e:	bf00      	nop
 8017ea0:	e002      	b.n	8017ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017ea2:	bf00      	nop
 8017ea4:	e000      	b.n	8017ea8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017ea6:	bf00      	nop
	return res;
 8017ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8017eaa:	4618      	mov	r0, r3
 8017eac:	3724      	adds	r7, #36	; 0x24
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bd90      	pop	{r4, r7, pc}

08017eb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017eb2:	b580      	push	{r7, lr}
 8017eb4:	b088      	sub	sp, #32
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	60f8      	str	r0, [r7, #12]
 8017eba:	60b9      	str	r1, [r7, #8]
 8017ebc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	2b01      	cmp	r3, #1
 8017ecc:	d904      	bls.n	8017ed8 <remove_chain+0x26>
 8017ece:	69bb      	ldr	r3, [r7, #24]
 8017ed0:	699b      	ldr	r3, [r3, #24]
 8017ed2:	68ba      	ldr	r2, [r7, #8]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d301      	bcc.n	8017edc <remove_chain+0x2a>
 8017ed8:	2302      	movs	r3, #2
 8017eda:	e04b      	b.n	8017f74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d00c      	beq.n	8017efc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8017ee6:	6879      	ldr	r1, [r7, #4]
 8017ee8:	69b8      	ldr	r0, [r7, #24]
 8017eea:	f7ff fef6 	bl	8017cda <put_fat>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017ef2:	7ffb      	ldrb	r3, [r7, #31]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d001      	beq.n	8017efc <remove_chain+0x4a>
 8017ef8:	7ffb      	ldrb	r3, [r7, #31]
 8017efa:	e03b      	b.n	8017f74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017efc:	68b9      	ldr	r1, [r7, #8]
 8017efe:	68f8      	ldr	r0, [r7, #12]
 8017f00:	f7ff fe43 	bl	8017b8a <get_fat>
 8017f04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017f06:	697b      	ldr	r3, [r7, #20]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d031      	beq.n	8017f70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	2b01      	cmp	r3, #1
 8017f10:	d101      	bne.n	8017f16 <remove_chain+0x64>
 8017f12:	2302      	movs	r3, #2
 8017f14:	e02e      	b.n	8017f74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017f16:	697b      	ldr	r3, [r7, #20]
 8017f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f1c:	d101      	bne.n	8017f22 <remove_chain+0x70>
 8017f1e:	2301      	movs	r3, #1
 8017f20:	e028      	b.n	8017f74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017f22:	2200      	movs	r2, #0
 8017f24:	68b9      	ldr	r1, [r7, #8]
 8017f26:	69b8      	ldr	r0, [r7, #24]
 8017f28:	f7ff fed7 	bl	8017cda <put_fat>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017f30:	7ffb      	ldrb	r3, [r7, #31]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d001      	beq.n	8017f3a <remove_chain+0x88>
 8017f36:	7ffb      	ldrb	r3, [r7, #31]
 8017f38:	e01c      	b.n	8017f74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017f3a:	69bb      	ldr	r3, [r7, #24]
 8017f3c:	695a      	ldr	r2, [r3, #20]
 8017f3e:	69bb      	ldr	r3, [r7, #24]
 8017f40:	699b      	ldr	r3, [r3, #24]
 8017f42:	3b02      	subs	r3, #2
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d20b      	bcs.n	8017f60 <remove_chain+0xae>
			fs->free_clst++;
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	695b      	ldr	r3, [r3, #20]
 8017f4c:	1c5a      	adds	r2, r3, #1
 8017f4e:	69bb      	ldr	r3, [r7, #24]
 8017f50:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8017f52:	69bb      	ldr	r3, [r7, #24]
 8017f54:	791b      	ldrb	r3, [r3, #4]
 8017f56:	f043 0301 	orr.w	r3, r3, #1
 8017f5a:	b2da      	uxtb	r2, r3
 8017f5c:	69bb      	ldr	r3, [r7, #24]
 8017f5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017f60:	697b      	ldr	r3, [r7, #20]
 8017f62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017f64:	69bb      	ldr	r3, [r7, #24]
 8017f66:	699b      	ldr	r3, [r3, #24]
 8017f68:	68ba      	ldr	r2, [r7, #8]
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d3c6      	bcc.n	8017efc <remove_chain+0x4a>
 8017f6e:	e000      	b.n	8017f72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017f70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017f72:	2300      	movs	r3, #0
}
 8017f74:	4618      	mov	r0, r3
 8017f76:	3720      	adds	r7, #32
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}

08017f7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b088      	sub	sp, #32
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
 8017f84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017f8c:	683b      	ldr	r3, [r7, #0]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d10d      	bne.n	8017fae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017f92:	693b      	ldr	r3, [r7, #16]
 8017f94:	691b      	ldr	r3, [r3, #16]
 8017f96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017f98:	69bb      	ldr	r3, [r7, #24]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d004      	beq.n	8017fa8 <create_chain+0x2c>
 8017f9e:	693b      	ldr	r3, [r7, #16]
 8017fa0:	699b      	ldr	r3, [r3, #24]
 8017fa2:	69ba      	ldr	r2, [r7, #24]
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d31b      	bcc.n	8017fe0 <create_chain+0x64>
 8017fa8:	2301      	movs	r3, #1
 8017faa:	61bb      	str	r3, [r7, #24]
 8017fac:	e018      	b.n	8017fe0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017fae:	6839      	ldr	r1, [r7, #0]
 8017fb0:	6878      	ldr	r0, [r7, #4]
 8017fb2:	f7ff fdea 	bl	8017b8a <get_fat>
 8017fb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	2b01      	cmp	r3, #1
 8017fbc:	d801      	bhi.n	8017fc2 <create_chain+0x46>
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	e070      	b.n	80180a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fc8:	d101      	bne.n	8017fce <create_chain+0x52>
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	e06a      	b.n	80180a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017fce:	693b      	ldr	r3, [r7, #16]
 8017fd0:	699b      	ldr	r3, [r3, #24]
 8017fd2:	68fa      	ldr	r2, [r7, #12]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d201      	bcs.n	8017fdc <create_chain+0x60>
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	e063      	b.n	80180a4 <create_chain+0x128>
		scl = clst;
 8017fdc:	683b      	ldr	r3, [r7, #0]
 8017fde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017fe0:	69bb      	ldr	r3, [r7, #24]
 8017fe2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017fe4:	69fb      	ldr	r3, [r7, #28]
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	699b      	ldr	r3, [r3, #24]
 8017fee:	69fa      	ldr	r2, [r7, #28]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d307      	bcc.n	8018004 <create_chain+0x88>
				ncl = 2;
 8017ff4:	2302      	movs	r3, #2
 8017ff6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017ff8:	69fa      	ldr	r2, [r7, #28]
 8017ffa:	69bb      	ldr	r3, [r7, #24]
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	d901      	bls.n	8018004 <create_chain+0x88>
 8018000:	2300      	movs	r3, #0
 8018002:	e04f      	b.n	80180a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018004:	69f9      	ldr	r1, [r7, #28]
 8018006:	6878      	ldr	r0, [r7, #4]
 8018008:	f7ff fdbf 	bl	8017b8a <get_fat>
 801800c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d00e      	beq.n	8018032 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	2b01      	cmp	r3, #1
 8018018:	d003      	beq.n	8018022 <create_chain+0xa6>
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018020:	d101      	bne.n	8018026 <create_chain+0xaa>
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	e03e      	b.n	80180a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8018026:	69fa      	ldr	r2, [r7, #28]
 8018028:	69bb      	ldr	r3, [r7, #24]
 801802a:	429a      	cmp	r2, r3
 801802c:	d1da      	bne.n	8017fe4 <create_chain+0x68>
 801802e:	2300      	movs	r3, #0
 8018030:	e038      	b.n	80180a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8018032:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018034:	f04f 32ff 	mov.w	r2, #4294967295
 8018038:	69f9      	ldr	r1, [r7, #28]
 801803a:	6938      	ldr	r0, [r7, #16]
 801803c:	f7ff fe4d 	bl	8017cda <put_fat>
 8018040:	4603      	mov	r3, r0
 8018042:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018044:	7dfb      	ldrb	r3, [r7, #23]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d109      	bne.n	801805e <create_chain+0xe2>
 801804a:	683b      	ldr	r3, [r7, #0]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d006      	beq.n	801805e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8018050:	69fa      	ldr	r2, [r7, #28]
 8018052:	6839      	ldr	r1, [r7, #0]
 8018054:	6938      	ldr	r0, [r7, #16]
 8018056:	f7ff fe40 	bl	8017cda <put_fat>
 801805a:	4603      	mov	r3, r0
 801805c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801805e:	7dfb      	ldrb	r3, [r7, #23]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d116      	bne.n	8018092 <create_chain+0x116>
		fs->last_clst = ncl;
 8018064:	693b      	ldr	r3, [r7, #16]
 8018066:	69fa      	ldr	r2, [r7, #28]
 8018068:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801806a:	693b      	ldr	r3, [r7, #16]
 801806c:	695a      	ldr	r2, [r3, #20]
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	699b      	ldr	r3, [r3, #24]
 8018072:	3b02      	subs	r3, #2
 8018074:	429a      	cmp	r2, r3
 8018076:	d804      	bhi.n	8018082 <create_chain+0x106>
 8018078:	693b      	ldr	r3, [r7, #16]
 801807a:	695b      	ldr	r3, [r3, #20]
 801807c:	1e5a      	subs	r2, r3, #1
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8018082:	693b      	ldr	r3, [r7, #16]
 8018084:	791b      	ldrb	r3, [r3, #4]
 8018086:	f043 0301 	orr.w	r3, r3, #1
 801808a:	b2da      	uxtb	r2, r3
 801808c:	693b      	ldr	r3, [r7, #16]
 801808e:	711a      	strb	r2, [r3, #4]
 8018090:	e007      	b.n	80180a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8018092:	7dfb      	ldrb	r3, [r7, #23]
 8018094:	2b01      	cmp	r3, #1
 8018096:	d102      	bne.n	801809e <create_chain+0x122>
 8018098:	f04f 33ff 	mov.w	r3, #4294967295
 801809c:	e000      	b.n	80180a0 <create_chain+0x124>
 801809e:	2301      	movs	r3, #1
 80180a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80180a2:	69fb      	ldr	r3, [r7, #28]
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	3720      	adds	r7, #32
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd80      	pop	{r7, pc}

080180ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80180ac:	b480      	push	{r7}
 80180ae:	b087      	sub	sp, #28
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
 80180b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180c0:	3304      	adds	r3, #4
 80180c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	0a5b      	lsrs	r3, r3, #9
 80180c8:	68fa      	ldr	r2, [r7, #12]
 80180ca:	8952      	ldrh	r2, [r2, #10]
 80180cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80180d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80180d2:	693b      	ldr	r3, [r7, #16]
 80180d4:	1d1a      	adds	r2, r3, #4
 80180d6:	613a      	str	r2, [r7, #16]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d101      	bne.n	80180e6 <clmt_clust+0x3a>
 80180e2:	2300      	movs	r3, #0
 80180e4:	e010      	b.n	8018108 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80180e6:	697a      	ldr	r2, [r7, #20]
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	429a      	cmp	r2, r3
 80180ec:	d307      	bcc.n	80180fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80180ee:	697a      	ldr	r2, [r7, #20]
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	1ad3      	subs	r3, r2, r3
 80180f4:	617b      	str	r3, [r7, #20]
 80180f6:	693b      	ldr	r3, [r7, #16]
 80180f8:	3304      	adds	r3, #4
 80180fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80180fc:	e7e9      	b.n	80180d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80180fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8018100:	693b      	ldr	r3, [r7, #16]
 8018102:	681a      	ldr	r2, [r3, #0]
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	4413      	add	r3, r2
}
 8018108:	4618      	mov	r0, r3
 801810a:	371c      	adds	r7, #28
 801810c:	46bd      	mov	sp, r7
 801810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018112:	4770      	bx	lr

08018114 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b086      	sub	sp, #24
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801812a:	d204      	bcs.n	8018136 <dir_sdi+0x22>
 801812c:	683b      	ldr	r3, [r7, #0]
 801812e:	f003 031f 	and.w	r3, r3, #31
 8018132:	2b00      	cmp	r3, #0
 8018134:	d001      	beq.n	801813a <dir_sdi+0x26>
		return FR_INT_ERR;
 8018136:	2302      	movs	r3, #2
 8018138:	e063      	b.n	8018202 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	683a      	ldr	r2, [r7, #0]
 801813e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	689b      	ldr	r3, [r3, #8]
 8018144:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8018146:	697b      	ldr	r3, [r7, #20]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d106      	bne.n	801815a <dir_sdi+0x46>
 801814c:	693b      	ldr	r3, [r7, #16]
 801814e:	781b      	ldrb	r3, [r3, #0]
 8018150:	2b02      	cmp	r3, #2
 8018152:	d902      	bls.n	801815a <dir_sdi+0x46>
		clst = fs->dirbase;
 8018154:	693b      	ldr	r3, [r7, #16]
 8018156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018158:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801815a:	697b      	ldr	r3, [r7, #20]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d10c      	bne.n	801817a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018160:	683b      	ldr	r3, [r7, #0]
 8018162:	095b      	lsrs	r3, r3, #5
 8018164:	693a      	ldr	r2, [r7, #16]
 8018166:	8912      	ldrh	r2, [r2, #8]
 8018168:	4293      	cmp	r3, r2
 801816a:	d301      	bcc.n	8018170 <dir_sdi+0x5c>
 801816c:	2302      	movs	r3, #2
 801816e:	e048      	b.n	8018202 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8018170:	693b      	ldr	r3, [r7, #16]
 8018172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	61da      	str	r2, [r3, #28]
 8018178:	e029      	b.n	80181ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801817a:	693b      	ldr	r3, [r7, #16]
 801817c:	895b      	ldrh	r3, [r3, #10]
 801817e:	025b      	lsls	r3, r3, #9
 8018180:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018182:	e019      	b.n	80181b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	6979      	ldr	r1, [r7, #20]
 8018188:	4618      	mov	r0, r3
 801818a:	f7ff fcfe 	bl	8017b8a <get_fat>
 801818e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8018190:	697b      	ldr	r3, [r7, #20]
 8018192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018196:	d101      	bne.n	801819c <dir_sdi+0x88>
 8018198:	2301      	movs	r3, #1
 801819a:	e032      	b.n	8018202 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801819c:	697b      	ldr	r3, [r7, #20]
 801819e:	2b01      	cmp	r3, #1
 80181a0:	d904      	bls.n	80181ac <dir_sdi+0x98>
 80181a2:	693b      	ldr	r3, [r7, #16]
 80181a4:	699b      	ldr	r3, [r3, #24]
 80181a6:	697a      	ldr	r2, [r7, #20]
 80181a8:	429a      	cmp	r2, r3
 80181aa:	d301      	bcc.n	80181b0 <dir_sdi+0x9c>
 80181ac:	2302      	movs	r3, #2
 80181ae:	e028      	b.n	8018202 <dir_sdi+0xee>
			ofs -= csz;
 80181b0:	683a      	ldr	r2, [r7, #0]
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	1ad3      	subs	r3, r2, r3
 80181b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80181b8:	683a      	ldr	r2, [r7, #0]
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	429a      	cmp	r2, r3
 80181be:	d2e1      	bcs.n	8018184 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80181c0:	6979      	ldr	r1, [r7, #20]
 80181c2:	6938      	ldr	r0, [r7, #16]
 80181c4:	f7ff fcc2 	bl	8017b4c <clust2sect>
 80181c8:	4602      	mov	r2, r0
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	697a      	ldr	r2, [r7, #20]
 80181d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	69db      	ldr	r3, [r3, #28]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d101      	bne.n	80181e0 <dir_sdi+0xcc>
 80181dc:	2302      	movs	r3, #2
 80181de:	e010      	b.n	8018202 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	69da      	ldr	r2, [r3, #28]
 80181e4:	683b      	ldr	r3, [r7, #0]
 80181e6:	0a5b      	lsrs	r3, r3, #9
 80181e8:	441a      	add	r2, r3
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80181ee:	693b      	ldr	r3, [r7, #16]
 80181f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80181f4:	683b      	ldr	r3, [r7, #0]
 80181f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181fa:	441a      	add	r2, r3
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8018200:	2300      	movs	r3, #0
}
 8018202:	4618      	mov	r0, r3
 8018204:	3718      	adds	r7, #24
 8018206:	46bd      	mov	sp, r7
 8018208:	bd80      	pop	{r7, pc}

0801820a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801820a:	b580      	push	{r7, lr}
 801820c:	b086      	sub	sp, #24
 801820e:	af00      	add	r7, sp, #0
 8018210:	6078      	str	r0, [r7, #4]
 8018212:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	695b      	ldr	r3, [r3, #20]
 801821e:	3320      	adds	r3, #32
 8018220:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	69db      	ldr	r3, [r3, #28]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d003      	beq.n	8018232 <dir_next+0x28>
 801822a:	68bb      	ldr	r3, [r7, #8]
 801822c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018230:	d301      	bcc.n	8018236 <dir_next+0x2c>
 8018232:	2304      	movs	r3, #4
 8018234:	e0aa      	b.n	801838c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018236:	68bb      	ldr	r3, [r7, #8]
 8018238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801823c:	2b00      	cmp	r3, #0
 801823e:	f040 8098 	bne.w	8018372 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	69db      	ldr	r3, [r3, #28]
 8018246:	1c5a      	adds	r2, r3, #1
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	699b      	ldr	r3, [r3, #24]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d10b      	bne.n	801826c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	095b      	lsrs	r3, r3, #5
 8018258:	68fa      	ldr	r2, [r7, #12]
 801825a:	8912      	ldrh	r2, [r2, #8]
 801825c:	4293      	cmp	r3, r2
 801825e:	f0c0 8088 	bcc.w	8018372 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2200      	movs	r2, #0
 8018266:	61da      	str	r2, [r3, #28]
 8018268:	2304      	movs	r3, #4
 801826a:	e08f      	b.n	801838c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	0a5b      	lsrs	r3, r3, #9
 8018270:	68fa      	ldr	r2, [r7, #12]
 8018272:	8952      	ldrh	r2, [r2, #10]
 8018274:	3a01      	subs	r2, #1
 8018276:	4013      	ands	r3, r2
 8018278:	2b00      	cmp	r3, #0
 801827a:	d17a      	bne.n	8018372 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801827c:	687a      	ldr	r2, [r7, #4]
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	699b      	ldr	r3, [r3, #24]
 8018282:	4619      	mov	r1, r3
 8018284:	4610      	mov	r0, r2
 8018286:	f7ff fc80 	bl	8017b8a <get_fat>
 801828a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	2b01      	cmp	r3, #1
 8018290:	d801      	bhi.n	8018296 <dir_next+0x8c>
 8018292:	2302      	movs	r3, #2
 8018294:	e07a      	b.n	801838c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8018296:	697b      	ldr	r3, [r7, #20]
 8018298:	f1b3 3fff 	cmp.w	r3, #4294967295
 801829c:	d101      	bne.n	80182a2 <dir_next+0x98>
 801829e:	2301      	movs	r3, #1
 80182a0:	e074      	b.n	801838c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	699b      	ldr	r3, [r3, #24]
 80182a6:	697a      	ldr	r2, [r7, #20]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d358      	bcc.n	801835e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80182ac:	683b      	ldr	r3, [r7, #0]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d104      	bne.n	80182bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	2200      	movs	r2, #0
 80182b6:	61da      	str	r2, [r3, #28]
 80182b8:	2304      	movs	r3, #4
 80182ba:	e067      	b.n	801838c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80182bc:	687a      	ldr	r2, [r7, #4]
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	699b      	ldr	r3, [r3, #24]
 80182c2:	4619      	mov	r1, r3
 80182c4:	4610      	mov	r0, r2
 80182c6:	f7ff fe59 	bl	8017f7c <create_chain>
 80182ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d101      	bne.n	80182d6 <dir_next+0xcc>
 80182d2:	2307      	movs	r3, #7
 80182d4:	e05a      	b.n	801838c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80182d6:	697b      	ldr	r3, [r7, #20]
 80182d8:	2b01      	cmp	r3, #1
 80182da:	d101      	bne.n	80182e0 <dir_next+0xd6>
 80182dc:	2302      	movs	r3, #2
 80182de:	e055      	b.n	801838c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80182e0:	697b      	ldr	r3, [r7, #20]
 80182e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182e6:	d101      	bne.n	80182ec <dir_next+0xe2>
 80182e8:	2301      	movs	r3, #1
 80182ea:	e04f      	b.n	801838c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80182ec:	68f8      	ldr	r0, [r7, #12]
 80182ee:	f7ff fb4d 	bl	801798c <sync_window>
 80182f2:	4603      	mov	r3, r0
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d001      	beq.n	80182fc <dir_next+0xf2>
 80182f8:	2301      	movs	r3, #1
 80182fa:	e047      	b.n	801838c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	3334      	adds	r3, #52	; 0x34
 8018300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018304:	2100      	movs	r1, #0
 8018306:	4618      	mov	r0, r3
 8018308:	f7ff f977 	bl	80175fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801830c:	2300      	movs	r3, #0
 801830e:	613b      	str	r3, [r7, #16]
 8018310:	6979      	ldr	r1, [r7, #20]
 8018312:	68f8      	ldr	r0, [r7, #12]
 8018314:	f7ff fc1a 	bl	8017b4c <clust2sect>
 8018318:	4602      	mov	r2, r0
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	631a      	str	r2, [r3, #48]	; 0x30
 801831e:	e012      	b.n	8018346 <dir_next+0x13c>
						fs->wflag = 1;
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	2201      	movs	r2, #1
 8018324:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8018326:	68f8      	ldr	r0, [r7, #12]
 8018328:	f7ff fb30 	bl	801798c <sync_window>
 801832c:	4603      	mov	r3, r0
 801832e:	2b00      	cmp	r3, #0
 8018330:	d001      	beq.n	8018336 <dir_next+0x12c>
 8018332:	2301      	movs	r3, #1
 8018334:	e02a      	b.n	801838c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018336:	693b      	ldr	r3, [r7, #16]
 8018338:	3301      	adds	r3, #1
 801833a:	613b      	str	r3, [r7, #16]
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018340:	1c5a      	adds	r2, r3, #1
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	631a      	str	r2, [r3, #48]	; 0x30
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	895b      	ldrh	r3, [r3, #10]
 801834a:	461a      	mov	r2, r3
 801834c:	693b      	ldr	r3, [r7, #16]
 801834e:	4293      	cmp	r3, r2
 8018350:	d3e6      	bcc.n	8018320 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018356:	693b      	ldr	r3, [r7, #16]
 8018358:	1ad2      	subs	r2, r2, r3
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	697a      	ldr	r2, [r7, #20]
 8018362:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8018364:	6979      	ldr	r1, [r7, #20]
 8018366:	68f8      	ldr	r0, [r7, #12]
 8018368:	f7ff fbf0 	bl	8017b4c <clust2sect>
 801836c:	4602      	mov	r2, r0
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	68ba      	ldr	r2, [r7, #8]
 8018376:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018384:	441a      	add	r2, r3
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801838a:	2300      	movs	r3, #0
}
 801838c:	4618      	mov	r0, r3
 801838e:	3718      	adds	r7, #24
 8018390:	46bd      	mov	sp, r7
 8018392:	bd80      	pop	{r7, pc}

08018394 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b086      	sub	sp, #24
 8018398:	af00      	add	r7, sp, #0
 801839a:	6078      	str	r0, [r7, #4]
 801839c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80183a4:	2100      	movs	r1, #0
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f7ff feb4 	bl	8018114 <dir_sdi>
 80183ac:	4603      	mov	r3, r0
 80183ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80183b0:	7dfb      	ldrb	r3, [r7, #23]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d12b      	bne.n	801840e <dir_alloc+0x7a>
		n = 0;
 80183b6:	2300      	movs	r3, #0
 80183b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	69db      	ldr	r3, [r3, #28]
 80183be:	4619      	mov	r1, r3
 80183c0:	68f8      	ldr	r0, [r7, #12]
 80183c2:	f7ff fb27 	bl	8017a14 <move_window>
 80183c6:	4603      	mov	r3, r0
 80183c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80183ca:	7dfb      	ldrb	r3, [r7, #23]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d11d      	bne.n	801840c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	6a1b      	ldr	r3, [r3, #32]
 80183d4:	781b      	ldrb	r3, [r3, #0]
 80183d6:	2be5      	cmp	r3, #229	; 0xe5
 80183d8:	d004      	beq.n	80183e4 <dir_alloc+0x50>
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	6a1b      	ldr	r3, [r3, #32]
 80183de:	781b      	ldrb	r3, [r3, #0]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d107      	bne.n	80183f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80183e4:	693b      	ldr	r3, [r7, #16]
 80183e6:	3301      	adds	r3, #1
 80183e8:	613b      	str	r3, [r7, #16]
 80183ea:	693a      	ldr	r2, [r7, #16]
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	429a      	cmp	r2, r3
 80183f0:	d102      	bne.n	80183f8 <dir_alloc+0x64>
 80183f2:	e00c      	b.n	801840e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80183f4:	2300      	movs	r3, #0
 80183f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80183f8:	2101      	movs	r1, #1
 80183fa:	6878      	ldr	r0, [r7, #4]
 80183fc:	f7ff ff05 	bl	801820a <dir_next>
 8018400:	4603      	mov	r3, r0
 8018402:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8018404:	7dfb      	ldrb	r3, [r7, #23]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d0d7      	beq.n	80183ba <dir_alloc+0x26>
 801840a:	e000      	b.n	801840e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801840c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801840e:	7dfb      	ldrb	r3, [r7, #23]
 8018410:	2b04      	cmp	r3, #4
 8018412:	d101      	bne.n	8018418 <dir_alloc+0x84>
 8018414:	2307      	movs	r3, #7
 8018416:	75fb      	strb	r3, [r7, #23]
	return res;
 8018418:	7dfb      	ldrb	r3, [r7, #23]
}
 801841a:	4618      	mov	r0, r3
 801841c:	3718      	adds	r7, #24
 801841e:	46bd      	mov	sp, r7
 8018420:	bd80      	pop	{r7, pc}

08018422 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018422:	b580      	push	{r7, lr}
 8018424:	b084      	sub	sp, #16
 8018426:	af00      	add	r7, sp, #0
 8018428:	6078      	str	r0, [r7, #4]
 801842a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801842c:	683b      	ldr	r3, [r7, #0]
 801842e:	331a      	adds	r3, #26
 8018430:	4618      	mov	r0, r3
 8018432:	f7ff f83f 	bl	80174b4 <ld_word>
 8018436:	4603      	mov	r3, r0
 8018438:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	781b      	ldrb	r3, [r3, #0]
 801843e:	2b03      	cmp	r3, #3
 8018440:	d109      	bne.n	8018456 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	3314      	adds	r3, #20
 8018446:	4618      	mov	r0, r3
 8018448:	f7ff f834 	bl	80174b4 <ld_word>
 801844c:	4603      	mov	r3, r0
 801844e:	041b      	lsls	r3, r3, #16
 8018450:	68fa      	ldr	r2, [r7, #12]
 8018452:	4313      	orrs	r3, r2
 8018454:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018456:	68fb      	ldr	r3, [r7, #12]
}
 8018458:	4618      	mov	r0, r3
 801845a:	3710      	adds	r7, #16
 801845c:	46bd      	mov	sp, r7
 801845e:	bd80      	pop	{r7, pc}

08018460 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b084      	sub	sp, #16
 8018464:	af00      	add	r7, sp, #0
 8018466:	60f8      	str	r0, [r7, #12]
 8018468:	60b9      	str	r1, [r7, #8]
 801846a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801846c:	68bb      	ldr	r3, [r7, #8]
 801846e:	331a      	adds	r3, #26
 8018470:	687a      	ldr	r2, [r7, #4]
 8018472:	b292      	uxth	r2, r2
 8018474:	4611      	mov	r1, r2
 8018476:	4618      	mov	r0, r3
 8018478:	f7ff f857 	bl	801752a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	781b      	ldrb	r3, [r3, #0]
 8018480:	2b03      	cmp	r3, #3
 8018482:	d109      	bne.n	8018498 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018484:	68bb      	ldr	r3, [r7, #8]
 8018486:	f103 0214 	add.w	r2, r3, #20
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	0c1b      	lsrs	r3, r3, #16
 801848e:	b29b      	uxth	r3, r3
 8018490:	4619      	mov	r1, r3
 8018492:	4610      	mov	r0, r2
 8018494:	f7ff f849 	bl	801752a <st_word>
	}
}
 8018498:	bf00      	nop
 801849a:	3710      	adds	r7, #16
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}

080184a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80184a0:	b590      	push	{r4, r7, lr}
 80184a2:	b087      	sub	sp, #28
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
 80184a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80184aa:	683b      	ldr	r3, [r7, #0]
 80184ac:	331a      	adds	r3, #26
 80184ae:	4618      	mov	r0, r3
 80184b0:	f7ff f800 	bl	80174b4 <ld_word>
 80184b4:	4603      	mov	r3, r0
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d001      	beq.n	80184be <cmp_lfn+0x1e>
 80184ba:	2300      	movs	r3, #0
 80184bc:	e059      	b.n	8018572 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80184be:	683b      	ldr	r3, [r7, #0]
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80184c6:	1e5a      	subs	r2, r3, #1
 80184c8:	4613      	mov	r3, r2
 80184ca:	005b      	lsls	r3, r3, #1
 80184cc:	4413      	add	r3, r2
 80184ce:	009b      	lsls	r3, r3, #2
 80184d0:	4413      	add	r3, r2
 80184d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80184d4:	2301      	movs	r3, #1
 80184d6:	81fb      	strh	r3, [r7, #14]
 80184d8:	2300      	movs	r3, #0
 80184da:	613b      	str	r3, [r7, #16]
 80184dc:	e033      	b.n	8018546 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80184de:	4a27      	ldr	r2, [pc, #156]	; (801857c <cmp_lfn+0xdc>)
 80184e0:	693b      	ldr	r3, [r7, #16]
 80184e2:	4413      	add	r3, r2
 80184e4:	781b      	ldrb	r3, [r3, #0]
 80184e6:	461a      	mov	r2, r3
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	4413      	add	r3, r2
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7fe ffe1 	bl	80174b4 <ld_word>
 80184f2:	4603      	mov	r3, r0
 80184f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80184f6:	89fb      	ldrh	r3, [r7, #14]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d01a      	beq.n	8018532 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80184fc:	697b      	ldr	r3, [r7, #20]
 80184fe:	2bfe      	cmp	r3, #254	; 0xfe
 8018500:	d812      	bhi.n	8018528 <cmp_lfn+0x88>
 8018502:	89bb      	ldrh	r3, [r7, #12]
 8018504:	4618      	mov	r0, r3
 8018506:	f001 fe25 	bl	801a154 <ff_wtoupper>
 801850a:	4603      	mov	r3, r0
 801850c:	461c      	mov	r4, r3
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	1c5a      	adds	r2, r3, #1
 8018512:	617a      	str	r2, [r7, #20]
 8018514:	005b      	lsls	r3, r3, #1
 8018516:	687a      	ldr	r2, [r7, #4]
 8018518:	4413      	add	r3, r2
 801851a:	881b      	ldrh	r3, [r3, #0]
 801851c:	4618      	mov	r0, r3
 801851e:	f001 fe19 	bl	801a154 <ff_wtoupper>
 8018522:	4603      	mov	r3, r0
 8018524:	429c      	cmp	r4, r3
 8018526:	d001      	beq.n	801852c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8018528:	2300      	movs	r3, #0
 801852a:	e022      	b.n	8018572 <cmp_lfn+0xd2>
			}
			wc = uc;
 801852c:	89bb      	ldrh	r3, [r7, #12]
 801852e:	81fb      	strh	r3, [r7, #14]
 8018530:	e006      	b.n	8018540 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018532:	89bb      	ldrh	r3, [r7, #12]
 8018534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018538:	4293      	cmp	r3, r2
 801853a:	d001      	beq.n	8018540 <cmp_lfn+0xa0>
 801853c:	2300      	movs	r3, #0
 801853e:	e018      	b.n	8018572 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	3301      	adds	r3, #1
 8018544:	613b      	str	r3, [r7, #16]
 8018546:	693b      	ldr	r3, [r7, #16]
 8018548:	2b0c      	cmp	r3, #12
 801854a:	d9c8      	bls.n	80184de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801854c:	683b      	ldr	r3, [r7, #0]
 801854e:	781b      	ldrb	r3, [r3, #0]
 8018550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018554:	2b00      	cmp	r3, #0
 8018556:	d00b      	beq.n	8018570 <cmp_lfn+0xd0>
 8018558:	89fb      	ldrh	r3, [r7, #14]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d008      	beq.n	8018570 <cmp_lfn+0xd0>
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	687a      	ldr	r2, [r7, #4]
 8018564:	4413      	add	r3, r2
 8018566:	881b      	ldrh	r3, [r3, #0]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d001      	beq.n	8018570 <cmp_lfn+0xd0>
 801856c:	2300      	movs	r3, #0
 801856e:	e000      	b.n	8018572 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018570:	2301      	movs	r3, #1
}
 8018572:	4618      	mov	r0, r3
 8018574:	371c      	adds	r7, #28
 8018576:	46bd      	mov	sp, r7
 8018578:	bd90      	pop	{r4, r7, pc}
 801857a:	bf00      	nop
 801857c:	080227b0 	.word	0x080227b0

08018580 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b088      	sub	sp, #32
 8018584:	af00      	add	r7, sp, #0
 8018586:	60f8      	str	r0, [r7, #12]
 8018588:	60b9      	str	r1, [r7, #8]
 801858a:	4611      	mov	r1, r2
 801858c:	461a      	mov	r2, r3
 801858e:	460b      	mov	r3, r1
 8018590:	71fb      	strb	r3, [r7, #7]
 8018592:	4613      	mov	r3, r2
 8018594:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8018596:	68bb      	ldr	r3, [r7, #8]
 8018598:	330d      	adds	r3, #13
 801859a:	79ba      	ldrb	r2, [r7, #6]
 801859c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801859e:	68bb      	ldr	r3, [r7, #8]
 80185a0:	330b      	adds	r3, #11
 80185a2:	220f      	movs	r2, #15
 80185a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80185a6:	68bb      	ldr	r3, [r7, #8]
 80185a8:	330c      	adds	r3, #12
 80185aa:	2200      	movs	r2, #0
 80185ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80185ae:	68bb      	ldr	r3, [r7, #8]
 80185b0:	331a      	adds	r3, #26
 80185b2:	2100      	movs	r1, #0
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7fe ffb8 	bl	801752a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80185ba:	79fb      	ldrb	r3, [r7, #7]
 80185bc:	1e5a      	subs	r2, r3, #1
 80185be:	4613      	mov	r3, r2
 80185c0:	005b      	lsls	r3, r3, #1
 80185c2:	4413      	add	r3, r2
 80185c4:	009b      	lsls	r3, r3, #2
 80185c6:	4413      	add	r3, r2
 80185c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80185ca:	2300      	movs	r3, #0
 80185cc:	82fb      	strh	r3, [r7, #22]
 80185ce:	2300      	movs	r3, #0
 80185d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80185d2:	8afb      	ldrh	r3, [r7, #22]
 80185d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185d8:	4293      	cmp	r3, r2
 80185da:	d007      	beq.n	80185ec <put_lfn+0x6c>
 80185dc:	69fb      	ldr	r3, [r7, #28]
 80185de:	1c5a      	adds	r2, r3, #1
 80185e0:	61fa      	str	r2, [r7, #28]
 80185e2:	005b      	lsls	r3, r3, #1
 80185e4:	68fa      	ldr	r2, [r7, #12]
 80185e6:	4413      	add	r3, r2
 80185e8:	881b      	ldrh	r3, [r3, #0]
 80185ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80185ec:	4a17      	ldr	r2, [pc, #92]	; (801864c <put_lfn+0xcc>)
 80185ee:	69bb      	ldr	r3, [r7, #24]
 80185f0:	4413      	add	r3, r2
 80185f2:	781b      	ldrb	r3, [r3, #0]
 80185f4:	461a      	mov	r2, r3
 80185f6:	68bb      	ldr	r3, [r7, #8]
 80185f8:	4413      	add	r3, r2
 80185fa:	8afa      	ldrh	r2, [r7, #22]
 80185fc:	4611      	mov	r1, r2
 80185fe:	4618      	mov	r0, r3
 8018600:	f7fe ff93 	bl	801752a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018604:	8afb      	ldrh	r3, [r7, #22]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d102      	bne.n	8018610 <put_lfn+0x90>
 801860a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801860e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018610:	69bb      	ldr	r3, [r7, #24]
 8018612:	3301      	adds	r3, #1
 8018614:	61bb      	str	r3, [r7, #24]
 8018616:	69bb      	ldr	r3, [r7, #24]
 8018618:	2b0c      	cmp	r3, #12
 801861a:	d9da      	bls.n	80185d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801861c:	8afb      	ldrh	r3, [r7, #22]
 801861e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018622:	4293      	cmp	r3, r2
 8018624:	d006      	beq.n	8018634 <put_lfn+0xb4>
 8018626:	69fb      	ldr	r3, [r7, #28]
 8018628:	005b      	lsls	r3, r3, #1
 801862a:	68fa      	ldr	r2, [r7, #12]
 801862c:	4413      	add	r3, r2
 801862e:	881b      	ldrh	r3, [r3, #0]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d103      	bne.n	801863c <put_lfn+0xbc>
 8018634:	79fb      	ldrb	r3, [r7, #7]
 8018636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801863a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801863c:	68bb      	ldr	r3, [r7, #8]
 801863e:	79fa      	ldrb	r2, [r7, #7]
 8018640:	701a      	strb	r2, [r3, #0]
}
 8018642:	bf00      	nop
 8018644:	3720      	adds	r7, #32
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
 801864a:	bf00      	nop
 801864c:	080227b0 	.word	0x080227b0

08018650 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b08c      	sub	sp, #48	; 0x30
 8018654:	af00      	add	r7, sp, #0
 8018656:	60f8      	str	r0, [r7, #12]
 8018658:	60b9      	str	r1, [r7, #8]
 801865a:	607a      	str	r2, [r7, #4]
 801865c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801865e:	220b      	movs	r2, #11
 8018660:	68b9      	ldr	r1, [r7, #8]
 8018662:	68f8      	ldr	r0, [r7, #12]
 8018664:	f7fe ffa8 	bl	80175b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	2b05      	cmp	r3, #5
 801866c:	d92b      	bls.n	80186c6 <gen_numname+0x76>
		sr = seq;
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018672:	e022      	b.n	80186ba <gen_numname+0x6a>
			wc = *lfn++;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	1c9a      	adds	r2, r3, #2
 8018678:	607a      	str	r2, [r7, #4]
 801867a:	881b      	ldrh	r3, [r3, #0]
 801867c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801867e:	2300      	movs	r3, #0
 8018680:	62bb      	str	r3, [r7, #40]	; 0x28
 8018682:	e017      	b.n	80186b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8018684:	69fb      	ldr	r3, [r7, #28]
 8018686:	005a      	lsls	r2, r3, #1
 8018688:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801868a:	f003 0301 	and.w	r3, r3, #1
 801868e:	4413      	add	r3, r2
 8018690:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8018692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018694:	085b      	lsrs	r3, r3, #1
 8018696:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8018698:	69fb      	ldr	r3, [r7, #28]
 801869a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d005      	beq.n	80186ae <gen_numname+0x5e>
 80186a2:	69fb      	ldr	r3, [r7, #28]
 80186a4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80186a8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80186ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80186ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b0:	3301      	adds	r3, #1
 80186b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80186b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b6:	2b0f      	cmp	r3, #15
 80186b8:	d9e4      	bls.n	8018684 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	881b      	ldrh	r3, [r3, #0]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d1d8      	bne.n	8018674 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80186c2:	69fb      	ldr	r3, [r7, #28]
 80186c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80186c6:	2307      	movs	r3, #7
 80186c8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	f003 030f 	and.w	r3, r3, #15
 80186d2:	b2db      	uxtb	r3, r3
 80186d4:	3330      	adds	r3, #48	; 0x30
 80186d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80186da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80186de:	2b39      	cmp	r3, #57	; 0x39
 80186e0:	d904      	bls.n	80186ec <gen_numname+0x9c>
 80186e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80186e6:	3307      	adds	r3, #7
 80186e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80186ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ee:	1e5a      	subs	r2, r3, #1
 80186f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80186f2:	3330      	adds	r3, #48	; 0x30
 80186f4:	443b      	add	r3, r7
 80186f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80186fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80186fe:	683b      	ldr	r3, [r7, #0]
 8018700:	091b      	lsrs	r3, r3, #4
 8018702:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018704:	683b      	ldr	r3, [r7, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d1df      	bne.n	80186ca <gen_numname+0x7a>
	ns[i] = '~';
 801870a:	f107 0214 	add.w	r2, r7, #20
 801870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018710:	4413      	add	r3, r2
 8018712:	227e      	movs	r2, #126	; 0x7e
 8018714:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018716:	2300      	movs	r3, #0
 8018718:	627b      	str	r3, [r7, #36]	; 0x24
 801871a:	e002      	b.n	8018722 <gen_numname+0xd2>
 801871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801871e:	3301      	adds	r3, #1
 8018720:	627b      	str	r3, [r7, #36]	; 0x24
 8018722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018726:	429a      	cmp	r2, r3
 8018728:	d205      	bcs.n	8018736 <gen_numname+0xe6>
 801872a:	68fa      	ldr	r2, [r7, #12]
 801872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801872e:	4413      	add	r3, r2
 8018730:	781b      	ldrb	r3, [r3, #0]
 8018732:	2b20      	cmp	r3, #32
 8018734:	d1f2      	bne.n	801871c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018738:	2b07      	cmp	r3, #7
 801873a:	d807      	bhi.n	801874c <gen_numname+0xfc>
 801873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801873e:	1c5a      	adds	r2, r3, #1
 8018740:	62ba      	str	r2, [r7, #40]	; 0x28
 8018742:	3330      	adds	r3, #48	; 0x30
 8018744:	443b      	add	r3, r7
 8018746:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801874a:	e000      	b.n	801874e <gen_numname+0xfe>
 801874c:	2120      	movs	r1, #32
 801874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018750:	1c5a      	adds	r2, r3, #1
 8018752:	627a      	str	r2, [r7, #36]	; 0x24
 8018754:	68fa      	ldr	r2, [r7, #12]
 8018756:	4413      	add	r3, r2
 8018758:	460a      	mov	r2, r1
 801875a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801875e:	2b07      	cmp	r3, #7
 8018760:	d9e9      	bls.n	8018736 <gen_numname+0xe6>
}
 8018762:	bf00      	nop
 8018764:	bf00      	nop
 8018766:	3730      	adds	r7, #48	; 0x30
 8018768:	46bd      	mov	sp, r7
 801876a:	bd80      	pop	{r7, pc}

0801876c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801876c:	b480      	push	{r7}
 801876e:	b085      	sub	sp, #20
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018774:	2300      	movs	r3, #0
 8018776:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8018778:	230b      	movs	r3, #11
 801877a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801877c:	7bfb      	ldrb	r3, [r7, #15]
 801877e:	b2da      	uxtb	r2, r3
 8018780:	0852      	lsrs	r2, r2, #1
 8018782:	01db      	lsls	r3, r3, #7
 8018784:	4313      	orrs	r3, r2
 8018786:	b2da      	uxtb	r2, r3
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	1c59      	adds	r1, r3, #1
 801878c:	6079      	str	r1, [r7, #4]
 801878e:	781b      	ldrb	r3, [r3, #0]
 8018790:	4413      	add	r3, r2
 8018792:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8018794:	68bb      	ldr	r3, [r7, #8]
 8018796:	3b01      	subs	r3, #1
 8018798:	60bb      	str	r3, [r7, #8]
 801879a:	68bb      	ldr	r3, [r7, #8]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d1ed      	bne.n	801877c <sum_sfn+0x10>
	return sum;
 80187a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80187a2:	4618      	mov	r0, r3
 80187a4:	3714      	adds	r7, #20
 80187a6:	46bd      	mov	sp, r7
 80187a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ac:	4770      	bx	lr

080187ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80187ae:	b580      	push	{r7, lr}
 80187b0:	b086      	sub	sp, #24
 80187b2:	af00      	add	r7, sp, #0
 80187b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80187bc:	2100      	movs	r1, #0
 80187be:	6878      	ldr	r0, [r7, #4]
 80187c0:	f7ff fca8 	bl	8018114 <dir_sdi>
 80187c4:	4603      	mov	r3, r0
 80187c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80187c8:	7dfb      	ldrb	r3, [r7, #23]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d001      	beq.n	80187d2 <dir_find+0x24>
 80187ce:	7dfb      	ldrb	r3, [r7, #23]
 80187d0:	e0a9      	b.n	8018926 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80187d2:	23ff      	movs	r3, #255	; 0xff
 80187d4:	753b      	strb	r3, [r7, #20]
 80187d6:	7d3b      	ldrb	r3, [r7, #20]
 80187d8:	757b      	strb	r3, [r7, #21]
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	f04f 32ff 	mov.w	r2, #4294967295
 80187e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	69db      	ldr	r3, [r3, #28]
 80187e6:	4619      	mov	r1, r3
 80187e8:	6938      	ldr	r0, [r7, #16]
 80187ea:	f7ff f913 	bl	8017a14 <move_window>
 80187ee:	4603      	mov	r3, r0
 80187f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80187f2:	7dfb      	ldrb	r3, [r7, #23]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	f040 8090 	bne.w	801891a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6a1b      	ldr	r3, [r3, #32]
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018802:	7dbb      	ldrb	r3, [r7, #22]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d102      	bne.n	801880e <dir_find+0x60>
 8018808:	2304      	movs	r3, #4
 801880a:	75fb      	strb	r3, [r7, #23]
 801880c:	e08a      	b.n	8018924 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6a1b      	ldr	r3, [r3, #32]
 8018812:	330b      	adds	r3, #11
 8018814:	781b      	ldrb	r3, [r3, #0]
 8018816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801881a:	73fb      	strb	r3, [r7, #15]
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	7bfa      	ldrb	r2, [r7, #15]
 8018820:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018822:	7dbb      	ldrb	r3, [r7, #22]
 8018824:	2be5      	cmp	r3, #229	; 0xe5
 8018826:	d007      	beq.n	8018838 <dir_find+0x8a>
 8018828:	7bfb      	ldrb	r3, [r7, #15]
 801882a:	f003 0308 	and.w	r3, r3, #8
 801882e:	2b00      	cmp	r3, #0
 8018830:	d009      	beq.n	8018846 <dir_find+0x98>
 8018832:	7bfb      	ldrb	r3, [r7, #15]
 8018834:	2b0f      	cmp	r3, #15
 8018836:	d006      	beq.n	8018846 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018838:	23ff      	movs	r3, #255	; 0xff
 801883a:	757b      	strb	r3, [r7, #21]
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	f04f 32ff 	mov.w	r2, #4294967295
 8018842:	631a      	str	r2, [r3, #48]	; 0x30
 8018844:	e05e      	b.n	8018904 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018846:	7bfb      	ldrb	r3, [r7, #15]
 8018848:	2b0f      	cmp	r3, #15
 801884a:	d136      	bne.n	80188ba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018856:	2b00      	cmp	r3, #0
 8018858:	d154      	bne.n	8018904 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801885a:	7dbb      	ldrb	r3, [r7, #22]
 801885c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018860:	2b00      	cmp	r3, #0
 8018862:	d00d      	beq.n	8018880 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	6a1b      	ldr	r3, [r3, #32]
 8018868:	7b5b      	ldrb	r3, [r3, #13]
 801886a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801886c:	7dbb      	ldrb	r3, [r7, #22]
 801886e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018872:	75bb      	strb	r3, [r7, #22]
 8018874:	7dbb      	ldrb	r3, [r7, #22]
 8018876:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	695a      	ldr	r2, [r3, #20]
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018880:	7dba      	ldrb	r2, [r7, #22]
 8018882:	7d7b      	ldrb	r3, [r7, #21]
 8018884:	429a      	cmp	r2, r3
 8018886:	d115      	bne.n	80188b4 <dir_find+0x106>
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	6a1b      	ldr	r3, [r3, #32]
 801888c:	330d      	adds	r3, #13
 801888e:	781b      	ldrb	r3, [r3, #0]
 8018890:	7d3a      	ldrb	r2, [r7, #20]
 8018892:	429a      	cmp	r2, r3
 8018894:	d10e      	bne.n	80188b4 <dir_find+0x106>
 8018896:	693b      	ldr	r3, [r7, #16]
 8018898:	68da      	ldr	r2, [r3, #12]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	6a1b      	ldr	r3, [r3, #32]
 801889e:	4619      	mov	r1, r3
 80188a0:	4610      	mov	r0, r2
 80188a2:	f7ff fdfd 	bl	80184a0 <cmp_lfn>
 80188a6:	4603      	mov	r3, r0
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d003      	beq.n	80188b4 <dir_find+0x106>
 80188ac:	7d7b      	ldrb	r3, [r7, #21]
 80188ae:	3b01      	subs	r3, #1
 80188b0:	b2db      	uxtb	r3, r3
 80188b2:	e000      	b.n	80188b6 <dir_find+0x108>
 80188b4:	23ff      	movs	r3, #255	; 0xff
 80188b6:	757b      	strb	r3, [r7, #21]
 80188b8:	e024      	b.n	8018904 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80188ba:	7d7b      	ldrb	r3, [r7, #21]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d109      	bne.n	80188d4 <dir_find+0x126>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	6a1b      	ldr	r3, [r3, #32]
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7ff ff51 	bl	801876c <sum_sfn>
 80188ca:	4603      	mov	r3, r0
 80188cc:	461a      	mov	r2, r3
 80188ce:	7d3b      	ldrb	r3, [r7, #20]
 80188d0:	4293      	cmp	r3, r2
 80188d2:	d024      	beq.n	801891e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80188da:	f003 0301 	and.w	r3, r3, #1
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d10a      	bne.n	80188f8 <dir_find+0x14a>
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	6a18      	ldr	r0, [r3, #32]
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	3324      	adds	r3, #36	; 0x24
 80188ea:	220b      	movs	r2, #11
 80188ec:	4619      	mov	r1, r3
 80188ee:	f7fe fe9f 	bl	8017630 <mem_cmp>
 80188f2:	4603      	mov	r3, r0
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d014      	beq.n	8018922 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80188f8:	23ff      	movs	r3, #255	; 0xff
 80188fa:	757b      	strb	r3, [r7, #21]
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	f04f 32ff 	mov.w	r2, #4294967295
 8018902:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018904:	2100      	movs	r1, #0
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f7ff fc7f 	bl	801820a <dir_next>
 801890c:	4603      	mov	r3, r0
 801890e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018910:	7dfb      	ldrb	r3, [r7, #23]
 8018912:	2b00      	cmp	r3, #0
 8018914:	f43f af65 	beq.w	80187e2 <dir_find+0x34>
 8018918:	e004      	b.n	8018924 <dir_find+0x176>
		if (res != FR_OK) break;
 801891a:	bf00      	nop
 801891c:	e002      	b.n	8018924 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801891e:	bf00      	nop
 8018920:	e000      	b.n	8018924 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018922:	bf00      	nop

	return res;
 8018924:	7dfb      	ldrb	r3, [r7, #23]
}
 8018926:	4618      	mov	r0, r3
 8018928:	3718      	adds	r7, #24
 801892a:	46bd      	mov	sp, r7
 801892c:	bd80      	pop	{r7, pc}
	...

08018930 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b08c      	sub	sp, #48	; 0x30
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018944:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018948:	2b00      	cmp	r3, #0
 801894a:	d001      	beq.n	8018950 <dir_register+0x20>
 801894c:	2306      	movs	r3, #6
 801894e:	e0e0      	b.n	8018b12 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018950:	2300      	movs	r3, #0
 8018952:	627b      	str	r3, [r7, #36]	; 0x24
 8018954:	e002      	b.n	801895c <dir_register+0x2c>
 8018956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018958:	3301      	adds	r3, #1
 801895a:	627b      	str	r3, [r7, #36]	; 0x24
 801895c:	69fb      	ldr	r3, [r7, #28]
 801895e:	68da      	ldr	r2, [r3, #12]
 8018960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018962:	005b      	lsls	r3, r3, #1
 8018964:	4413      	add	r3, r2
 8018966:	881b      	ldrh	r3, [r3, #0]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d1f4      	bne.n	8018956 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018972:	f107 030c 	add.w	r3, r7, #12
 8018976:	220c      	movs	r2, #12
 8018978:	4618      	mov	r0, r3
 801897a:	f7fe fe1d 	bl	80175b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801897e:	7dfb      	ldrb	r3, [r7, #23]
 8018980:	f003 0301 	and.w	r3, r3, #1
 8018984:	2b00      	cmp	r3, #0
 8018986:	d032      	beq.n	80189ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2240      	movs	r2, #64	; 0x40
 801898c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018990:	2301      	movs	r3, #1
 8018992:	62bb      	str	r3, [r7, #40]	; 0x28
 8018994:	e016      	b.n	80189c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801899c:	69fb      	ldr	r3, [r7, #28]
 801899e:	68da      	ldr	r2, [r3, #12]
 80189a0:	f107 010c 	add.w	r1, r7, #12
 80189a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a6:	f7ff fe53 	bl	8018650 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f7ff feff 	bl	80187ae <dir_find>
 80189b0:	4603      	mov	r3, r0
 80189b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80189b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d106      	bne.n	80189cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80189be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c0:	3301      	adds	r3, #1
 80189c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80189c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c6:	2b63      	cmp	r3, #99	; 0x63
 80189c8:	d9e5      	bls.n	8018996 <dir_register+0x66>
 80189ca:	e000      	b.n	80189ce <dir_register+0x9e>
			if (res != FR_OK) break;
 80189cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80189ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d0:	2b64      	cmp	r3, #100	; 0x64
 80189d2:	d101      	bne.n	80189d8 <dir_register+0xa8>
 80189d4:	2307      	movs	r3, #7
 80189d6:	e09c      	b.n	8018b12 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80189d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80189dc:	2b04      	cmp	r3, #4
 80189de:	d002      	beq.n	80189e6 <dir_register+0xb6>
 80189e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80189e4:	e095      	b.n	8018b12 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80189e6:	7dfa      	ldrb	r2, [r7, #23]
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80189ee:	7dfb      	ldrb	r3, [r7, #23]
 80189f0:	f003 0302 	and.w	r3, r3, #2
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d007      	beq.n	8018a08 <dir_register+0xd8>
 80189f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189fa:	330c      	adds	r3, #12
 80189fc:	4a47      	ldr	r2, [pc, #284]	; (8018b1c <dir_register+0x1ec>)
 80189fe:	fba2 2303 	umull	r2, r3, r2, r3
 8018a02:	089b      	lsrs	r3, r3, #2
 8018a04:	3301      	adds	r3, #1
 8018a06:	e000      	b.n	8018a0a <dir_register+0xda>
 8018a08:	2301      	movs	r3, #1
 8018a0a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018a0c:	6a39      	ldr	r1, [r7, #32]
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f7ff fcc0 	bl	8018394 <dir_alloc>
 8018a14:	4603      	mov	r3, r0
 8018a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d148      	bne.n	8018ab4 <dir_register+0x184>
 8018a22:	6a3b      	ldr	r3, [r7, #32]
 8018a24:	3b01      	subs	r3, #1
 8018a26:	623b      	str	r3, [r7, #32]
 8018a28:	6a3b      	ldr	r3, [r7, #32]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d042      	beq.n	8018ab4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	695a      	ldr	r2, [r3, #20]
 8018a32:	6a3b      	ldr	r3, [r7, #32]
 8018a34:	015b      	lsls	r3, r3, #5
 8018a36:	1ad3      	subs	r3, r2, r3
 8018a38:	4619      	mov	r1, r3
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f7ff fb6a 	bl	8018114 <dir_sdi>
 8018a40:	4603      	mov	r3, r0
 8018a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d132      	bne.n	8018ab4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	3324      	adds	r3, #36	; 0x24
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7ff fe8a 	bl	801876c <sum_sfn>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	69db      	ldr	r3, [r3, #28]
 8018a60:	4619      	mov	r1, r3
 8018a62:	69f8      	ldr	r0, [r7, #28]
 8018a64:	f7fe ffd6 	bl	8017a14 <move_window>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d11d      	bne.n	8018ab2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	68d8      	ldr	r0, [r3, #12]
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	6a19      	ldr	r1, [r3, #32]
 8018a7e:	6a3b      	ldr	r3, [r7, #32]
 8018a80:	b2da      	uxtb	r2, r3
 8018a82:	7efb      	ldrb	r3, [r7, #27]
 8018a84:	f7ff fd7c 	bl	8018580 <put_lfn>
				fs->wflag = 1;
 8018a88:	69fb      	ldr	r3, [r7, #28]
 8018a8a:	2201      	movs	r2, #1
 8018a8c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018a8e:	2100      	movs	r1, #0
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f7ff fbba 	bl	801820a <dir_next>
 8018a96:	4603      	mov	r3, r0
 8018a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d107      	bne.n	8018ab4 <dir_register+0x184>
 8018aa4:	6a3b      	ldr	r3, [r7, #32]
 8018aa6:	3b01      	subs	r3, #1
 8018aa8:	623b      	str	r3, [r7, #32]
 8018aaa:	6a3b      	ldr	r3, [r7, #32]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d1d5      	bne.n	8018a5c <dir_register+0x12c>
 8018ab0:	e000      	b.n	8018ab4 <dir_register+0x184>
				if (res != FR_OK) break;
 8018ab2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d128      	bne.n	8018b0e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	69db      	ldr	r3, [r3, #28]
 8018ac0:	4619      	mov	r1, r3
 8018ac2:	69f8      	ldr	r0, [r7, #28]
 8018ac4:	f7fe ffa6 	bl	8017a14 <move_window>
 8018ac8:	4603      	mov	r3, r0
 8018aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d11b      	bne.n	8018b0e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	6a1b      	ldr	r3, [r3, #32]
 8018ada:	2220      	movs	r2, #32
 8018adc:	2100      	movs	r1, #0
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fe fd8b 	bl	80175fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	6a18      	ldr	r0, [r3, #32]
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	3324      	adds	r3, #36	; 0x24
 8018aec:	220b      	movs	r2, #11
 8018aee:	4619      	mov	r1, r3
 8018af0:	f7fe fd62 	bl	80175b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	6a1b      	ldr	r3, [r3, #32]
 8018afe:	330c      	adds	r3, #12
 8018b00:	f002 0218 	and.w	r2, r2, #24
 8018b04:	b2d2      	uxtb	r2, r2
 8018b06:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018b08:	69fb      	ldr	r3, [r7, #28]
 8018b0a:	2201      	movs	r2, #1
 8018b0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018b12:	4618      	mov	r0, r3
 8018b14:	3730      	adds	r7, #48	; 0x30
 8018b16:	46bd      	mov	sp, r7
 8018b18:	bd80      	pop	{r7, pc}
 8018b1a:	bf00      	nop
 8018b1c:	4ec4ec4f 	.word	0x4ec4ec4f

08018b20 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b088      	sub	sp, #32
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
 8018b28:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8018b30:	683b      	ldr	r3, [r7, #0]
 8018b32:	2200      	movs	r2, #0
 8018b34:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	69db      	ldr	r3, [r3, #28]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	f000 80c9 	beq.w	8018cd2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b48:	d032      	beq.n	8018bb0 <get_fileinfo+0x90>
			i = j = 0;
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	61bb      	str	r3, [r7, #24]
 8018b4e:	69bb      	ldr	r3, [r7, #24]
 8018b50:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018b52:	e01b      	b.n	8018b8c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8018b54:	89fb      	ldrh	r3, [r7, #14]
 8018b56:	2100      	movs	r1, #0
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f001 fabf 	bl	801a0dc <ff_convert>
 8018b5e:	4603      	mov	r3, r0
 8018b60:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8018b62:	89fb      	ldrh	r3, [r7, #14]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d102      	bne.n	8018b6e <get_fileinfo+0x4e>
 8018b68:	2300      	movs	r3, #0
 8018b6a:	61fb      	str	r3, [r7, #28]
 8018b6c:	e01a      	b.n	8018ba4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8018b6e:	69fb      	ldr	r3, [r7, #28]
 8018b70:	2bfe      	cmp	r3, #254	; 0xfe
 8018b72:	d902      	bls.n	8018b7a <get_fileinfo+0x5a>
 8018b74:	2300      	movs	r3, #0
 8018b76:	61fb      	str	r3, [r7, #28]
 8018b78:	e014      	b.n	8018ba4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8018b7a:	69fb      	ldr	r3, [r7, #28]
 8018b7c:	1c5a      	adds	r2, r3, #1
 8018b7e:	61fa      	str	r2, [r7, #28]
 8018b80:	89fa      	ldrh	r2, [r7, #14]
 8018b82:	b2d1      	uxtb	r1, r2
 8018b84:	683a      	ldr	r2, [r7, #0]
 8018b86:	4413      	add	r3, r2
 8018b88:	460a      	mov	r2, r1
 8018b8a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8018b8c:	693b      	ldr	r3, [r7, #16]
 8018b8e:	68da      	ldr	r2, [r3, #12]
 8018b90:	69bb      	ldr	r3, [r7, #24]
 8018b92:	1c59      	adds	r1, r3, #1
 8018b94:	61b9      	str	r1, [r7, #24]
 8018b96:	005b      	lsls	r3, r3, #1
 8018b98:	4413      	add	r3, r2
 8018b9a:	881b      	ldrh	r3, [r3, #0]
 8018b9c:	81fb      	strh	r3, [r7, #14]
 8018b9e:	89fb      	ldrh	r3, [r7, #14]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d1d7      	bne.n	8018b54 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8018ba4:	683a      	ldr	r2, [r7, #0]
 8018ba6:	69fb      	ldr	r3, [r7, #28]
 8018ba8:	4413      	add	r3, r2
 8018baa:	3316      	adds	r3, #22
 8018bac:	2200      	movs	r2, #0
 8018bae:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	61bb      	str	r3, [r7, #24]
 8018bb4:	69bb      	ldr	r3, [r7, #24]
 8018bb6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8018bb8:	683a      	ldr	r2, [r7, #0]
 8018bba:	69fb      	ldr	r3, [r7, #28]
 8018bbc:	4413      	add	r3, r2
 8018bbe:	3316      	adds	r3, #22
 8018bc0:	781b      	ldrb	r3, [r3, #0]
 8018bc2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8018bc4:	e04c      	b.n	8018c60 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	6a1a      	ldr	r2, [r3, #32]
 8018bca:	69fb      	ldr	r3, [r7, #28]
 8018bcc:	1c59      	adds	r1, r3, #1
 8018bce:	61f9      	str	r1, [r7, #28]
 8018bd0:	4413      	add	r3, r2
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8018bd6:	7dfb      	ldrb	r3, [r7, #23]
 8018bd8:	2b20      	cmp	r3, #32
 8018bda:	d100      	bne.n	8018bde <get_fileinfo+0xbe>
 8018bdc:	e040      	b.n	8018c60 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8018bde:	7dfb      	ldrb	r3, [r7, #23]
 8018be0:	2b05      	cmp	r3, #5
 8018be2:	d101      	bne.n	8018be8 <get_fileinfo+0xc8>
 8018be4:	23e5      	movs	r3, #229	; 0xe5
 8018be6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8018be8:	69fb      	ldr	r3, [r7, #28]
 8018bea:	2b09      	cmp	r3, #9
 8018bec:	d10f      	bne.n	8018c0e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8018bee:	89bb      	ldrh	r3, [r7, #12]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d105      	bne.n	8018c00 <get_fileinfo+0xe0>
 8018bf4:	683a      	ldr	r2, [r7, #0]
 8018bf6:	69bb      	ldr	r3, [r7, #24]
 8018bf8:	4413      	add	r3, r2
 8018bfa:	3316      	adds	r3, #22
 8018bfc:	222e      	movs	r2, #46	; 0x2e
 8018bfe:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8018c00:	69bb      	ldr	r3, [r7, #24]
 8018c02:	1c5a      	adds	r2, r3, #1
 8018c04:	61ba      	str	r2, [r7, #24]
 8018c06:	683a      	ldr	r2, [r7, #0]
 8018c08:	4413      	add	r3, r2
 8018c0a:	222e      	movs	r2, #46	; 0x2e
 8018c0c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8018c0e:	683a      	ldr	r2, [r7, #0]
 8018c10:	69bb      	ldr	r3, [r7, #24]
 8018c12:	4413      	add	r3, r2
 8018c14:	3309      	adds	r3, #9
 8018c16:	7dfa      	ldrb	r2, [r7, #23]
 8018c18:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8018c1a:	89bb      	ldrh	r3, [r7, #12]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d11c      	bne.n	8018c5a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8018c20:	7dfb      	ldrb	r3, [r7, #23]
 8018c22:	2b40      	cmp	r3, #64	; 0x40
 8018c24:	d913      	bls.n	8018c4e <get_fileinfo+0x12e>
 8018c26:	7dfb      	ldrb	r3, [r7, #23]
 8018c28:	2b5a      	cmp	r3, #90	; 0x5a
 8018c2a:	d810      	bhi.n	8018c4e <get_fileinfo+0x12e>
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	6a1b      	ldr	r3, [r3, #32]
 8018c30:	330c      	adds	r3, #12
 8018c32:	781b      	ldrb	r3, [r3, #0]
 8018c34:	461a      	mov	r2, r3
 8018c36:	69fb      	ldr	r3, [r7, #28]
 8018c38:	2b08      	cmp	r3, #8
 8018c3a:	d901      	bls.n	8018c40 <get_fileinfo+0x120>
 8018c3c:	2310      	movs	r3, #16
 8018c3e:	e000      	b.n	8018c42 <get_fileinfo+0x122>
 8018c40:	2308      	movs	r3, #8
 8018c42:	4013      	ands	r3, r2
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d002      	beq.n	8018c4e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8018c48:	7dfb      	ldrb	r3, [r7, #23]
 8018c4a:	3320      	adds	r3, #32
 8018c4c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8018c4e:	683a      	ldr	r2, [r7, #0]
 8018c50:	69bb      	ldr	r3, [r7, #24]
 8018c52:	4413      	add	r3, r2
 8018c54:	3316      	adds	r3, #22
 8018c56:	7dfa      	ldrb	r2, [r7, #23]
 8018c58:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8018c5a:	69bb      	ldr	r3, [r7, #24]
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8018c60:	69fb      	ldr	r3, [r7, #28]
 8018c62:	2b0a      	cmp	r3, #10
 8018c64:	d9af      	bls.n	8018bc6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8018c66:	89bb      	ldrh	r3, [r7, #12]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d10d      	bne.n	8018c88 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8018c6c:	683a      	ldr	r2, [r7, #0]
 8018c6e:	69bb      	ldr	r3, [r7, #24]
 8018c70:	4413      	add	r3, r2
 8018c72:	3316      	adds	r3, #22
 8018c74:	2200      	movs	r2, #0
 8018c76:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	6a1b      	ldr	r3, [r3, #32]
 8018c7c:	330c      	adds	r3, #12
 8018c7e:	781b      	ldrb	r3, [r3, #0]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d101      	bne.n	8018c88 <get_fileinfo+0x168>
 8018c84:	2300      	movs	r3, #0
 8018c86:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8018c88:	683a      	ldr	r2, [r7, #0]
 8018c8a:	69bb      	ldr	r3, [r7, #24]
 8018c8c:	4413      	add	r3, r2
 8018c8e:	3309      	adds	r3, #9
 8018c90:	2200      	movs	r2, #0
 8018c92:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6a1b      	ldr	r3, [r3, #32]
 8018c98:	7ada      	ldrb	r2, [r3, #11]
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	6a1b      	ldr	r3, [r3, #32]
 8018ca2:	331c      	adds	r3, #28
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	f7fe fc1d 	bl	80174e4 <ld_dword>
 8018caa:	4602      	mov	r2, r0
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6a1b      	ldr	r3, [r3, #32]
 8018cb4:	3316      	adds	r3, #22
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	f7fe fc14 	bl	80174e4 <ld_dword>
 8018cbc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8018cbe:	68bb      	ldr	r3, [r7, #8]
 8018cc0:	b29a      	uxth	r2, r3
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	80da      	strh	r2, [r3, #6]
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	0c1b      	lsrs	r3, r3, #16
 8018cca:	b29a      	uxth	r2, r3
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	809a      	strh	r2, [r3, #4]
 8018cd0:	e000      	b.n	8018cd4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8018cd2:	bf00      	nop
}
 8018cd4:	3720      	adds	r7, #32
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	bd80      	pop	{r7, pc}
	...

08018cdc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b08a      	sub	sp, #40	; 0x28
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
 8018ce4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	613b      	str	r3, [r7, #16]
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	68db      	ldr	r3, [r3, #12]
 8018cf2:	60fb      	str	r3, [r7, #12]
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	617b      	str	r3, [r7, #20]
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018cfc:	69bb      	ldr	r3, [r7, #24]
 8018cfe:	1c5a      	adds	r2, r3, #1
 8018d00:	61ba      	str	r2, [r7, #24]
 8018d02:	693a      	ldr	r2, [r7, #16]
 8018d04:	4413      	add	r3, r2
 8018d06:	781b      	ldrb	r3, [r3, #0]
 8018d08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d0c:	2b1f      	cmp	r3, #31
 8018d0e:	d940      	bls.n	8018d92 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d12:	2b2f      	cmp	r3, #47	; 0x2f
 8018d14:	d006      	beq.n	8018d24 <create_name+0x48>
 8018d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d18:	2b5c      	cmp	r3, #92	; 0x5c
 8018d1a:	d110      	bne.n	8018d3e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018d1c:	e002      	b.n	8018d24 <create_name+0x48>
 8018d1e:	69bb      	ldr	r3, [r7, #24]
 8018d20:	3301      	adds	r3, #1
 8018d22:	61bb      	str	r3, [r7, #24]
 8018d24:	693a      	ldr	r2, [r7, #16]
 8018d26:	69bb      	ldr	r3, [r7, #24]
 8018d28:	4413      	add	r3, r2
 8018d2a:	781b      	ldrb	r3, [r3, #0]
 8018d2c:	2b2f      	cmp	r3, #47	; 0x2f
 8018d2e:	d0f6      	beq.n	8018d1e <create_name+0x42>
 8018d30:	693a      	ldr	r2, [r7, #16]
 8018d32:	69bb      	ldr	r3, [r7, #24]
 8018d34:	4413      	add	r3, r2
 8018d36:	781b      	ldrb	r3, [r3, #0]
 8018d38:	2b5c      	cmp	r3, #92	; 0x5c
 8018d3a:	d0f0      	beq.n	8018d1e <create_name+0x42>
			break;
 8018d3c:	e02a      	b.n	8018d94 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018d3e:	697b      	ldr	r3, [r7, #20]
 8018d40:	2bfe      	cmp	r3, #254	; 0xfe
 8018d42:	d901      	bls.n	8018d48 <create_name+0x6c>
 8018d44:	2306      	movs	r3, #6
 8018d46:	e17d      	b.n	8019044 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d4a:	b2db      	uxtb	r3, r3
 8018d4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d50:	2101      	movs	r1, #1
 8018d52:	4618      	mov	r0, r3
 8018d54:	f001 f9c2 	bl	801a0dc <ff_convert>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d101      	bne.n	8018d66 <create_name+0x8a>
 8018d62:	2306      	movs	r3, #6
 8018d64:	e16e      	b.n	8019044 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d68:	2b7f      	cmp	r3, #127	; 0x7f
 8018d6a:	d809      	bhi.n	8018d80 <create_name+0xa4>
 8018d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d6e:	4619      	mov	r1, r3
 8018d70:	488d      	ldr	r0, [pc, #564]	; (8018fa8 <create_name+0x2cc>)
 8018d72:	f7fe fc84 	bl	801767e <chk_chr>
 8018d76:	4603      	mov	r3, r0
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d001      	beq.n	8018d80 <create_name+0xa4>
 8018d7c:	2306      	movs	r3, #6
 8018d7e:	e161      	b.n	8019044 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	1c5a      	adds	r2, r3, #1
 8018d84:	617a      	str	r2, [r7, #20]
 8018d86:	005b      	lsls	r3, r3, #1
 8018d88:	68fa      	ldr	r2, [r7, #12]
 8018d8a:	4413      	add	r3, r2
 8018d8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018d8e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018d90:	e7b4      	b.n	8018cfc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018d92:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018d94:	693a      	ldr	r2, [r7, #16]
 8018d96:	69bb      	ldr	r3, [r7, #24]
 8018d98:	441a      	add	r2, r3
 8018d9a:	683b      	ldr	r3, [r7, #0]
 8018d9c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018da0:	2b1f      	cmp	r3, #31
 8018da2:	d801      	bhi.n	8018da8 <create_name+0xcc>
 8018da4:	2304      	movs	r3, #4
 8018da6:	e000      	b.n	8018daa <create_name+0xce>
 8018da8:	2300      	movs	r3, #0
 8018daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018dae:	e011      	b.n	8018dd4 <create_name+0xf8>
		w = lfn[di - 1];
 8018db0:	697b      	ldr	r3, [r7, #20]
 8018db2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018db6:	3b01      	subs	r3, #1
 8018db8:	005b      	lsls	r3, r3, #1
 8018dba:	68fa      	ldr	r2, [r7, #12]
 8018dbc:	4413      	add	r3, r2
 8018dbe:	881b      	ldrh	r3, [r3, #0]
 8018dc0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dc4:	2b20      	cmp	r3, #32
 8018dc6:	d002      	beq.n	8018dce <create_name+0xf2>
 8018dc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dca:	2b2e      	cmp	r3, #46	; 0x2e
 8018dcc:	d106      	bne.n	8018ddc <create_name+0x100>
		di--;
 8018dce:	697b      	ldr	r3, [r7, #20]
 8018dd0:	3b01      	subs	r3, #1
 8018dd2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d1ea      	bne.n	8018db0 <create_name+0xd4>
 8018dda:	e000      	b.n	8018dde <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018ddc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018dde:	697b      	ldr	r3, [r7, #20]
 8018de0:	005b      	lsls	r3, r3, #1
 8018de2:	68fa      	ldr	r2, [r7, #12]
 8018de4:	4413      	add	r3, r2
 8018de6:	2200      	movs	r2, #0
 8018de8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018dea:	697b      	ldr	r3, [r7, #20]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d101      	bne.n	8018df4 <create_name+0x118>
 8018df0:	2306      	movs	r3, #6
 8018df2:	e127      	b.n	8019044 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	3324      	adds	r3, #36	; 0x24
 8018df8:	220b      	movs	r2, #11
 8018dfa:	2120      	movs	r1, #32
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	f7fe fbfc 	bl	80175fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018e02:	2300      	movs	r3, #0
 8018e04:	61bb      	str	r3, [r7, #24]
 8018e06:	e002      	b.n	8018e0e <create_name+0x132>
 8018e08:	69bb      	ldr	r3, [r7, #24]
 8018e0a:	3301      	adds	r3, #1
 8018e0c:	61bb      	str	r3, [r7, #24]
 8018e0e:	69bb      	ldr	r3, [r7, #24]
 8018e10:	005b      	lsls	r3, r3, #1
 8018e12:	68fa      	ldr	r2, [r7, #12]
 8018e14:	4413      	add	r3, r2
 8018e16:	881b      	ldrh	r3, [r3, #0]
 8018e18:	2b20      	cmp	r3, #32
 8018e1a:	d0f5      	beq.n	8018e08 <create_name+0x12c>
 8018e1c:	69bb      	ldr	r3, [r7, #24]
 8018e1e:	005b      	lsls	r3, r3, #1
 8018e20:	68fa      	ldr	r2, [r7, #12]
 8018e22:	4413      	add	r3, r2
 8018e24:	881b      	ldrh	r3, [r3, #0]
 8018e26:	2b2e      	cmp	r3, #46	; 0x2e
 8018e28:	d0ee      	beq.n	8018e08 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018e2a:	69bb      	ldr	r3, [r7, #24]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d009      	beq.n	8018e44 <create_name+0x168>
 8018e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e34:	f043 0303 	orr.w	r3, r3, #3
 8018e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018e3c:	e002      	b.n	8018e44 <create_name+0x168>
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	3b01      	subs	r3, #1
 8018e42:	617b      	str	r3, [r7, #20]
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d009      	beq.n	8018e5e <create_name+0x182>
 8018e4a:	697b      	ldr	r3, [r7, #20]
 8018e4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018e50:	3b01      	subs	r3, #1
 8018e52:	005b      	lsls	r3, r3, #1
 8018e54:	68fa      	ldr	r2, [r7, #12]
 8018e56:	4413      	add	r3, r2
 8018e58:	881b      	ldrh	r3, [r3, #0]
 8018e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8018e5c:	d1ef      	bne.n	8018e3e <create_name+0x162>

	i = b = 0; ni = 8;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018e64:	2300      	movs	r3, #0
 8018e66:	623b      	str	r3, [r7, #32]
 8018e68:	2308      	movs	r3, #8
 8018e6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018e6c:	69bb      	ldr	r3, [r7, #24]
 8018e6e:	1c5a      	adds	r2, r3, #1
 8018e70:	61ba      	str	r2, [r7, #24]
 8018e72:	005b      	lsls	r3, r3, #1
 8018e74:	68fa      	ldr	r2, [r7, #12]
 8018e76:	4413      	add	r3, r2
 8018e78:	881b      	ldrh	r3, [r3, #0]
 8018e7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	f000 8090 	beq.w	8018fa4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e86:	2b20      	cmp	r3, #32
 8018e88:	d006      	beq.n	8018e98 <create_name+0x1bc>
 8018e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8018e8e:	d10a      	bne.n	8018ea6 <create_name+0x1ca>
 8018e90:	69ba      	ldr	r2, [r7, #24]
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d006      	beq.n	8018ea6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e9c:	f043 0303 	orr.w	r3, r3, #3
 8018ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ea4:	e07d      	b.n	8018fa2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018ea6:	6a3a      	ldr	r2, [r7, #32]
 8018ea8:	69fb      	ldr	r3, [r7, #28]
 8018eaa:	429a      	cmp	r2, r3
 8018eac:	d203      	bcs.n	8018eb6 <create_name+0x1da>
 8018eae:	69ba      	ldr	r2, [r7, #24]
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d123      	bne.n	8018efe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018eb6:	69fb      	ldr	r3, [r7, #28]
 8018eb8:	2b0b      	cmp	r3, #11
 8018eba:	d106      	bne.n	8018eca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ec0:	f043 0303 	orr.w	r3, r3, #3
 8018ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ec8:	e075      	b.n	8018fb6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018eca:	69ba      	ldr	r2, [r7, #24]
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	d005      	beq.n	8018ede <create_name+0x202>
 8018ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ed6:	f043 0303 	orr.w	r3, r3, #3
 8018eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018ede:	69ba      	ldr	r2, [r7, #24]
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	429a      	cmp	r2, r3
 8018ee4:	d866      	bhi.n	8018fb4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	61bb      	str	r3, [r7, #24]
 8018eea:	2308      	movs	r3, #8
 8018eec:	623b      	str	r3, [r7, #32]
 8018eee:	230b      	movs	r3, #11
 8018ef0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ef6:	009b      	lsls	r3, r3, #2
 8018ef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018efc:	e051      	b.n	8018fa2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f00:	2b7f      	cmp	r3, #127	; 0x7f
 8018f02:	d914      	bls.n	8018f2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f06:	2100      	movs	r1, #0
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f001 f8e7 	bl	801a0dc <ff_convert>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d004      	beq.n	8018f22 <create_name+0x246>
 8018f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f1a:	3b80      	subs	r3, #128	; 0x80
 8018f1c:	4a23      	ldr	r2, [pc, #140]	; (8018fac <create_name+0x2d0>)
 8018f1e:	5cd3      	ldrb	r3, [r2, r3]
 8018f20:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f26:	f043 0302 	orr.w	r3, r3, #2
 8018f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d007      	beq.n	8018f44 <create_name+0x268>
 8018f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f36:	4619      	mov	r1, r3
 8018f38:	481d      	ldr	r0, [pc, #116]	; (8018fb0 <create_name+0x2d4>)
 8018f3a:	f7fe fba0 	bl	801767e <chk_chr>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d008      	beq.n	8018f56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018f44:	235f      	movs	r3, #95	; 0x5f
 8018f46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f4c:	f043 0303 	orr.w	r3, r3, #3
 8018f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018f54:	e01b      	b.n	8018f8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f58:	2b40      	cmp	r3, #64	; 0x40
 8018f5a:	d909      	bls.n	8018f70 <create_name+0x294>
 8018f5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f5e:	2b5a      	cmp	r3, #90	; 0x5a
 8018f60:	d806      	bhi.n	8018f70 <create_name+0x294>
					b |= 2;
 8018f62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f66:	f043 0302 	orr.w	r3, r3, #2
 8018f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018f6e:	e00e      	b.n	8018f8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f72:	2b60      	cmp	r3, #96	; 0x60
 8018f74:	d90b      	bls.n	8018f8e <create_name+0x2b2>
 8018f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f78:	2b7a      	cmp	r3, #122	; 0x7a
 8018f7a:	d808      	bhi.n	8018f8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f80:	f043 0301 	orr.w	r3, r3, #1
 8018f84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f8a:	3b20      	subs	r3, #32
 8018f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018f8e:	6a3b      	ldr	r3, [r7, #32]
 8018f90:	1c5a      	adds	r2, r3, #1
 8018f92:	623a      	str	r2, [r7, #32]
 8018f94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018f96:	b2d1      	uxtb	r1, r2
 8018f98:	687a      	ldr	r2, [r7, #4]
 8018f9a:	4413      	add	r3, r2
 8018f9c:	460a      	mov	r2, r1
 8018f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018fa2:	e763      	b.n	8018e6c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018fa4:	bf00      	nop
 8018fa6:	e006      	b.n	8018fb6 <create_name+0x2da>
 8018fa8:	08021ec8 	.word	0x08021ec8
 8018fac:	08022730 	.word	0x08022730
 8018fb0:	08021ed4 	.word	0x08021ed4
			if (si > di) break;			/* No extension */
 8018fb4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018fbc:	2be5      	cmp	r3, #229	; 0xe5
 8018fbe:	d103      	bne.n	8018fc8 <create_name+0x2ec>
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	2205      	movs	r2, #5
 8018fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018fc8:	69fb      	ldr	r3, [r7, #28]
 8018fca:	2b08      	cmp	r3, #8
 8018fcc:	d104      	bne.n	8018fd8 <create_name+0x2fc>
 8018fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fd2:	009b      	lsls	r3, r3, #2
 8018fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fdc:	f003 030c 	and.w	r3, r3, #12
 8018fe0:	2b0c      	cmp	r3, #12
 8018fe2:	d005      	beq.n	8018ff0 <create_name+0x314>
 8018fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fe8:	f003 0303 	and.w	r3, r3, #3
 8018fec:	2b03      	cmp	r3, #3
 8018fee:	d105      	bne.n	8018ffc <create_name+0x320>
 8018ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ff4:	f043 0302 	orr.w	r3, r3, #2
 8018ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019000:	f003 0302 	and.w	r3, r3, #2
 8019004:	2b00      	cmp	r3, #0
 8019006:	d117      	bne.n	8019038 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8019008:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801900c:	f003 0303 	and.w	r3, r3, #3
 8019010:	2b01      	cmp	r3, #1
 8019012:	d105      	bne.n	8019020 <create_name+0x344>
 8019014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019018:	f043 0310 	orr.w	r3, r3, #16
 801901c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8019020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019024:	f003 030c 	and.w	r3, r3, #12
 8019028:	2b04      	cmp	r3, #4
 801902a:	d105      	bne.n	8019038 <create_name+0x35c>
 801902c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019030:	f043 0308 	orr.w	r3, r3, #8
 8019034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801903e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8019042:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8019044:	4618      	mov	r0, r3
 8019046:	3728      	adds	r7, #40	; 0x28
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}

0801904c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b086      	sub	sp, #24
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801905a:	693b      	ldr	r3, [r7, #16]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019060:	e002      	b.n	8019068 <follow_path+0x1c>
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	3301      	adds	r3, #1
 8019066:	603b      	str	r3, [r7, #0]
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	781b      	ldrb	r3, [r3, #0]
 801906c:	2b2f      	cmp	r3, #47	; 0x2f
 801906e:	d0f8      	beq.n	8019062 <follow_path+0x16>
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	781b      	ldrb	r3, [r3, #0]
 8019074:	2b5c      	cmp	r3, #92	; 0x5c
 8019076:	d0f4      	beq.n	8019062 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8019078:	693b      	ldr	r3, [r7, #16]
 801907a:	2200      	movs	r2, #0
 801907c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	781b      	ldrb	r3, [r3, #0]
 8019082:	2b1f      	cmp	r3, #31
 8019084:	d80a      	bhi.n	801909c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	2280      	movs	r2, #128	; 0x80
 801908a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801908e:	2100      	movs	r1, #0
 8019090:	6878      	ldr	r0, [r7, #4]
 8019092:	f7ff f83f 	bl	8018114 <dir_sdi>
 8019096:	4603      	mov	r3, r0
 8019098:	75fb      	strb	r3, [r7, #23]
 801909a:	e043      	b.n	8019124 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801909c:	463b      	mov	r3, r7
 801909e:	4619      	mov	r1, r3
 80190a0:	6878      	ldr	r0, [r7, #4]
 80190a2:	f7ff fe1b 	bl	8018cdc <create_name>
 80190a6:	4603      	mov	r3, r0
 80190a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80190aa:	7dfb      	ldrb	r3, [r7, #23]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d134      	bne.n	801911a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	f7ff fb7c 	bl	80187ae <dir_find>
 80190b6:	4603      	mov	r3, r0
 80190b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80190c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80190c2:	7dfb      	ldrb	r3, [r7, #23]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d00a      	beq.n	80190de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80190c8:	7dfb      	ldrb	r3, [r7, #23]
 80190ca:	2b04      	cmp	r3, #4
 80190cc:	d127      	bne.n	801911e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80190ce:	7afb      	ldrb	r3, [r7, #11]
 80190d0:	f003 0304 	and.w	r3, r3, #4
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d122      	bne.n	801911e <follow_path+0xd2>
 80190d8:	2305      	movs	r3, #5
 80190da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80190dc:	e01f      	b.n	801911e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80190de:	7afb      	ldrb	r3, [r7, #11]
 80190e0:	f003 0304 	and.w	r3, r3, #4
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d11c      	bne.n	8019122 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80190e8:	693b      	ldr	r3, [r7, #16]
 80190ea:	799b      	ldrb	r3, [r3, #6]
 80190ec:	f003 0310 	and.w	r3, r3, #16
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d102      	bne.n	80190fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80190f4:	2305      	movs	r3, #5
 80190f6:	75fb      	strb	r3, [r7, #23]
 80190f8:	e014      	b.n	8019124 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	695b      	ldr	r3, [r3, #20]
 8019104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019108:	4413      	add	r3, r2
 801910a:	4619      	mov	r1, r3
 801910c:	68f8      	ldr	r0, [r7, #12]
 801910e:	f7ff f988 	bl	8018422 <ld_clust>
 8019112:	4602      	mov	r2, r0
 8019114:	693b      	ldr	r3, [r7, #16]
 8019116:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019118:	e7c0      	b.n	801909c <follow_path+0x50>
			if (res != FR_OK) break;
 801911a:	bf00      	nop
 801911c:	e002      	b.n	8019124 <follow_path+0xd8>
				break;
 801911e:	bf00      	nop
 8019120:	e000      	b.n	8019124 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8019122:	bf00      	nop
			}
		}
	}

	return res;
 8019124:	7dfb      	ldrb	r3, [r7, #23]
}
 8019126:	4618      	mov	r0, r3
 8019128:	3718      	adds	r7, #24
 801912a:	46bd      	mov	sp, r7
 801912c:	bd80      	pop	{r7, pc}

0801912e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801912e:	b480      	push	{r7}
 8019130:	b087      	sub	sp, #28
 8019132:	af00      	add	r7, sp, #0
 8019134:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8019136:	f04f 33ff 	mov.w	r3, #4294967295
 801913a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d031      	beq.n	80191a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	617b      	str	r3, [r7, #20]
 801914a:	e002      	b.n	8019152 <get_ldnumber+0x24>
 801914c:	697b      	ldr	r3, [r7, #20]
 801914e:	3301      	adds	r3, #1
 8019150:	617b      	str	r3, [r7, #20]
 8019152:	697b      	ldr	r3, [r7, #20]
 8019154:	781b      	ldrb	r3, [r3, #0]
 8019156:	2b1f      	cmp	r3, #31
 8019158:	d903      	bls.n	8019162 <get_ldnumber+0x34>
 801915a:	697b      	ldr	r3, [r7, #20]
 801915c:	781b      	ldrb	r3, [r3, #0]
 801915e:	2b3a      	cmp	r3, #58	; 0x3a
 8019160:	d1f4      	bne.n	801914c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8019162:	697b      	ldr	r3, [r7, #20]
 8019164:	781b      	ldrb	r3, [r3, #0]
 8019166:	2b3a      	cmp	r3, #58	; 0x3a
 8019168:	d11c      	bne.n	80191a4 <get_ldnumber+0x76>
			tp = *path;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	1c5a      	adds	r2, r3, #1
 8019174:	60fa      	str	r2, [r7, #12]
 8019176:	781b      	ldrb	r3, [r3, #0]
 8019178:	3b30      	subs	r3, #48	; 0x30
 801917a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801917c:	68bb      	ldr	r3, [r7, #8]
 801917e:	2b09      	cmp	r3, #9
 8019180:	d80e      	bhi.n	80191a0 <get_ldnumber+0x72>
 8019182:	68fa      	ldr	r2, [r7, #12]
 8019184:	697b      	ldr	r3, [r7, #20]
 8019186:	429a      	cmp	r2, r3
 8019188:	d10a      	bne.n	80191a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801918a:	68bb      	ldr	r3, [r7, #8]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d107      	bne.n	80191a0 <get_ldnumber+0x72>
					vol = (int)i;
 8019190:	68bb      	ldr	r3, [r7, #8]
 8019192:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8019194:	697b      	ldr	r3, [r7, #20]
 8019196:	3301      	adds	r3, #1
 8019198:	617b      	str	r3, [r7, #20]
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	697a      	ldr	r2, [r7, #20]
 801919e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80191a0:	693b      	ldr	r3, [r7, #16]
 80191a2:	e002      	b.n	80191aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80191a4:	2300      	movs	r3, #0
 80191a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80191a8:	693b      	ldr	r3, [r7, #16]
}
 80191aa:	4618      	mov	r0, r3
 80191ac:	371c      	adds	r7, #28
 80191ae:	46bd      	mov	sp, r7
 80191b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b4:	4770      	bx	lr
	...

080191b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b082      	sub	sp, #8
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	2200      	movs	r2, #0
 80191c6:	70da      	strb	r2, [r3, #3]
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	f04f 32ff 	mov.w	r2, #4294967295
 80191ce:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80191d0:	6839      	ldr	r1, [r7, #0]
 80191d2:	6878      	ldr	r0, [r7, #4]
 80191d4:	f7fe fc1e 	bl	8017a14 <move_window>
 80191d8:	4603      	mov	r3, r0
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d001      	beq.n	80191e2 <check_fs+0x2a>
 80191de:	2304      	movs	r3, #4
 80191e0:	e038      	b.n	8019254 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	3334      	adds	r3, #52	; 0x34
 80191e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80191ea:	4618      	mov	r0, r3
 80191ec:	f7fe f962 	bl	80174b4 <ld_word>
 80191f0:	4603      	mov	r3, r0
 80191f2:	461a      	mov	r2, r3
 80191f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80191f8:	429a      	cmp	r2, r3
 80191fa:	d001      	beq.n	8019200 <check_fs+0x48>
 80191fc:	2303      	movs	r3, #3
 80191fe:	e029      	b.n	8019254 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019206:	2be9      	cmp	r3, #233	; 0xe9
 8019208:	d009      	beq.n	801921e <check_fs+0x66>
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019210:	2beb      	cmp	r3, #235	; 0xeb
 8019212:	d11e      	bne.n	8019252 <check_fs+0x9a>
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801921a:	2b90      	cmp	r3, #144	; 0x90
 801921c:	d119      	bne.n	8019252 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	3334      	adds	r3, #52	; 0x34
 8019222:	3336      	adds	r3, #54	; 0x36
 8019224:	4618      	mov	r0, r3
 8019226:	f7fe f95d 	bl	80174e4 <ld_dword>
 801922a:	4603      	mov	r3, r0
 801922c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019230:	4a0a      	ldr	r2, [pc, #40]	; (801925c <check_fs+0xa4>)
 8019232:	4293      	cmp	r3, r2
 8019234:	d101      	bne.n	801923a <check_fs+0x82>
 8019236:	2300      	movs	r3, #0
 8019238:	e00c      	b.n	8019254 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	3334      	adds	r3, #52	; 0x34
 801923e:	3352      	adds	r3, #82	; 0x52
 8019240:	4618      	mov	r0, r3
 8019242:	f7fe f94f 	bl	80174e4 <ld_dword>
 8019246:	4603      	mov	r3, r0
 8019248:	4a05      	ldr	r2, [pc, #20]	; (8019260 <check_fs+0xa8>)
 801924a:	4293      	cmp	r3, r2
 801924c:	d101      	bne.n	8019252 <check_fs+0x9a>
 801924e:	2300      	movs	r3, #0
 8019250:	e000      	b.n	8019254 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8019252:	2302      	movs	r3, #2
}
 8019254:	4618      	mov	r0, r3
 8019256:	3708      	adds	r7, #8
 8019258:	46bd      	mov	sp, r7
 801925a:	bd80      	pop	{r7, pc}
 801925c:	00544146 	.word	0x00544146
 8019260:	33544146 	.word	0x33544146

08019264 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b096      	sub	sp, #88	; 0x58
 8019268:	af00      	add	r7, sp, #0
 801926a:	60f8      	str	r0, [r7, #12]
 801926c:	60b9      	str	r1, [r7, #8]
 801926e:	4613      	mov	r3, r2
 8019270:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019272:	68bb      	ldr	r3, [r7, #8]
 8019274:	2200      	movs	r2, #0
 8019276:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8019278:	68f8      	ldr	r0, [r7, #12]
 801927a:	f7ff ff58 	bl	801912e <get_ldnumber>
 801927e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8019280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019282:	2b00      	cmp	r3, #0
 8019284:	da01      	bge.n	801928a <find_volume+0x26>
 8019286:	230b      	movs	r3, #11
 8019288:	e230      	b.n	80196ec <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801928a:	4aa1      	ldr	r2, [pc, #644]	; (8019510 <find_volume+0x2ac>)
 801928c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801928e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019292:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019296:	2b00      	cmp	r3, #0
 8019298:	d101      	bne.n	801929e <find_volume+0x3a>
 801929a:	230c      	movs	r3, #12
 801929c:	e226      	b.n	80196ec <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801929e:	68bb      	ldr	r3, [r7, #8]
 80192a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80192a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80192a4:	79fb      	ldrb	r3, [r7, #7]
 80192a6:	f023 0301 	bic.w	r3, r3, #1
 80192aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80192ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ae:	781b      	ldrb	r3, [r3, #0]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d01a      	beq.n	80192ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80192b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192b6:	785b      	ldrb	r3, [r3, #1]
 80192b8:	4618      	mov	r0, r3
 80192ba:	f7fe f85d 	bl	8017378 <disk_status>
 80192be:	4603      	mov	r3, r0
 80192c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80192c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80192c8:	f003 0301 	and.w	r3, r3, #1
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d10c      	bne.n	80192ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80192d0:	79fb      	ldrb	r3, [r7, #7]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d007      	beq.n	80192e6 <find_volume+0x82>
 80192d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80192da:	f003 0304 	and.w	r3, r3, #4
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d001      	beq.n	80192e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80192e2:	230a      	movs	r3, #10
 80192e4:	e202      	b.n	80196ec <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80192e6:	2300      	movs	r3, #0
 80192e8:	e200      	b.n	80196ec <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80192ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192ec:	2200      	movs	r2, #0
 80192ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80192f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80192f2:	b2da      	uxtb	r2, r3
 80192f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80192f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192fa:	785b      	ldrb	r3, [r3, #1]
 80192fc:	4618      	mov	r0, r3
 80192fe:	f7fe f855 	bl	80173ac <disk_initialize>
 8019302:	4603      	mov	r3, r0
 8019304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801930c:	f003 0301 	and.w	r3, r3, #1
 8019310:	2b00      	cmp	r3, #0
 8019312:	d001      	beq.n	8019318 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8019314:	2303      	movs	r3, #3
 8019316:	e1e9      	b.n	80196ec <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8019318:	79fb      	ldrb	r3, [r7, #7]
 801931a:	2b00      	cmp	r3, #0
 801931c:	d007      	beq.n	801932e <find_volume+0xca>
 801931e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019322:	f003 0304 	and.w	r3, r3, #4
 8019326:	2b00      	cmp	r3, #0
 8019328:	d001      	beq.n	801932e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801932a:	230a      	movs	r3, #10
 801932c:	e1de      	b.n	80196ec <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801932e:	2300      	movs	r3, #0
 8019330:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8019332:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8019334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019336:	f7ff ff3f 	bl	80191b8 <check_fs>
 801933a:	4603      	mov	r3, r0
 801933c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8019340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019344:	2b02      	cmp	r3, #2
 8019346:	d149      	bne.n	80193dc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019348:	2300      	movs	r3, #0
 801934a:	643b      	str	r3, [r7, #64]	; 0x40
 801934c:	e01e      	b.n	801938c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019350:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019356:	011b      	lsls	r3, r3, #4
 8019358:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801935c:	4413      	add	r3, r2
 801935e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019362:	3304      	adds	r3, #4
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d006      	beq.n	8019378 <find_volume+0x114>
 801936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801936c:	3308      	adds	r3, #8
 801936e:	4618      	mov	r0, r3
 8019370:	f7fe f8b8 	bl	80174e4 <ld_dword>
 8019374:	4602      	mov	r2, r0
 8019376:	e000      	b.n	801937a <find_volume+0x116>
 8019378:	2200      	movs	r2, #0
 801937a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801937c:	009b      	lsls	r3, r3, #2
 801937e:	3358      	adds	r3, #88	; 0x58
 8019380:	443b      	add	r3, r7
 8019382:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8019386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019388:	3301      	adds	r3, #1
 801938a:	643b      	str	r3, [r7, #64]	; 0x40
 801938c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801938e:	2b03      	cmp	r3, #3
 8019390:	d9dd      	bls.n	801934e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8019392:	2300      	movs	r3, #0
 8019394:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8019396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019398:	2b00      	cmp	r3, #0
 801939a:	d002      	beq.n	80193a2 <find_volume+0x13e>
 801939c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801939e:	3b01      	subs	r3, #1
 80193a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80193a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193a4:	009b      	lsls	r3, r3, #2
 80193a6:	3358      	adds	r3, #88	; 0x58
 80193a8:	443b      	add	r3, r7
 80193aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80193ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80193b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d005      	beq.n	80193c2 <find_volume+0x15e>
 80193b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80193b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80193ba:	f7ff fefd 	bl	80191b8 <check_fs>
 80193be:	4603      	mov	r3, r0
 80193c0:	e000      	b.n	80193c4 <find_volume+0x160>
 80193c2:	2303      	movs	r3, #3
 80193c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80193c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80193cc:	2b01      	cmp	r3, #1
 80193ce:	d905      	bls.n	80193dc <find_volume+0x178>
 80193d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193d2:	3301      	adds	r3, #1
 80193d4:	643b      	str	r3, [r7, #64]	; 0x40
 80193d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193d8:	2b03      	cmp	r3, #3
 80193da:	d9e2      	bls.n	80193a2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80193dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80193e0:	2b04      	cmp	r3, #4
 80193e2:	d101      	bne.n	80193e8 <find_volume+0x184>
 80193e4:	2301      	movs	r3, #1
 80193e6:	e181      	b.n	80196ec <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80193e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80193ec:	2b01      	cmp	r3, #1
 80193ee:	d901      	bls.n	80193f4 <find_volume+0x190>
 80193f0:	230d      	movs	r3, #13
 80193f2:	e17b      	b.n	80196ec <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80193f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193f6:	3334      	adds	r3, #52	; 0x34
 80193f8:	330b      	adds	r3, #11
 80193fa:	4618      	mov	r0, r3
 80193fc:	f7fe f85a 	bl	80174b4 <ld_word>
 8019400:	4603      	mov	r3, r0
 8019402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019406:	d001      	beq.n	801940c <find_volume+0x1a8>
 8019408:	230d      	movs	r3, #13
 801940a:	e16f      	b.n	80196ec <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801940e:	3334      	adds	r3, #52	; 0x34
 8019410:	3316      	adds	r3, #22
 8019412:	4618      	mov	r0, r3
 8019414:	f7fe f84e 	bl	80174b4 <ld_word>
 8019418:	4603      	mov	r3, r0
 801941a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801941c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801941e:	2b00      	cmp	r3, #0
 8019420:	d106      	bne.n	8019430 <find_volume+0x1cc>
 8019422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019424:	3334      	adds	r3, #52	; 0x34
 8019426:	3324      	adds	r3, #36	; 0x24
 8019428:	4618      	mov	r0, r3
 801942a:	f7fe f85b 	bl	80174e4 <ld_dword>
 801942e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8019430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019432:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019434:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8019436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019438:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801943e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8019440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019442:	789b      	ldrb	r3, [r3, #2]
 8019444:	2b01      	cmp	r3, #1
 8019446:	d005      	beq.n	8019454 <find_volume+0x1f0>
 8019448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801944a:	789b      	ldrb	r3, [r3, #2]
 801944c:	2b02      	cmp	r3, #2
 801944e:	d001      	beq.n	8019454 <find_volume+0x1f0>
 8019450:	230d      	movs	r3, #13
 8019452:	e14b      	b.n	80196ec <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8019454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019456:	789b      	ldrb	r3, [r3, #2]
 8019458:	461a      	mov	r2, r3
 801945a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801945c:	fb02 f303 	mul.w	r3, r2, r3
 8019460:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8019462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019468:	b29a      	uxth	r2, r3
 801946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801946c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019470:	895b      	ldrh	r3, [r3, #10]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d008      	beq.n	8019488 <find_volume+0x224>
 8019476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019478:	895b      	ldrh	r3, [r3, #10]
 801947a:	461a      	mov	r2, r3
 801947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801947e:	895b      	ldrh	r3, [r3, #10]
 8019480:	3b01      	subs	r3, #1
 8019482:	4013      	ands	r3, r2
 8019484:	2b00      	cmp	r3, #0
 8019486:	d001      	beq.n	801948c <find_volume+0x228>
 8019488:	230d      	movs	r3, #13
 801948a:	e12f      	b.n	80196ec <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801948e:	3334      	adds	r3, #52	; 0x34
 8019490:	3311      	adds	r3, #17
 8019492:	4618      	mov	r0, r3
 8019494:	f7fe f80e 	bl	80174b4 <ld_word>
 8019498:	4603      	mov	r3, r0
 801949a:	461a      	mov	r2, r3
 801949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801949e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80194a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194a2:	891b      	ldrh	r3, [r3, #8]
 80194a4:	f003 030f 	and.w	r3, r3, #15
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d001      	beq.n	80194b2 <find_volume+0x24e>
 80194ae:	230d      	movs	r3, #13
 80194b0:	e11c      	b.n	80196ec <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80194b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194b4:	3334      	adds	r3, #52	; 0x34
 80194b6:	3313      	adds	r3, #19
 80194b8:	4618      	mov	r0, r3
 80194ba:	f7fd fffb 	bl	80174b4 <ld_word>
 80194be:	4603      	mov	r3, r0
 80194c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80194c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d106      	bne.n	80194d6 <find_volume+0x272>
 80194c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ca:	3334      	adds	r3, #52	; 0x34
 80194cc:	3320      	adds	r3, #32
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7fe f808 	bl	80174e4 <ld_dword>
 80194d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80194d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194d8:	3334      	adds	r3, #52	; 0x34
 80194da:	330e      	adds	r3, #14
 80194dc:	4618      	mov	r0, r3
 80194de:	f7fd ffe9 	bl	80174b4 <ld_word>
 80194e2:	4603      	mov	r3, r0
 80194e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80194e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d101      	bne.n	80194f0 <find_volume+0x28c>
 80194ec:	230d      	movs	r3, #13
 80194ee:	e0fd      	b.n	80196ec <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80194f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80194f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194f4:	4413      	add	r3, r2
 80194f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194f8:	8912      	ldrh	r2, [r2, #8]
 80194fa:	0912      	lsrs	r2, r2, #4
 80194fc:	b292      	uxth	r2, r2
 80194fe:	4413      	add	r3, r2
 8019500:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8019502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019506:	429a      	cmp	r2, r3
 8019508:	d204      	bcs.n	8019514 <find_volume+0x2b0>
 801950a:	230d      	movs	r3, #13
 801950c:	e0ee      	b.n	80196ec <find_volume+0x488>
 801950e:	bf00      	nop
 8019510:	20001aac 	.word	0x20001aac
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8019514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019518:	1ad3      	subs	r3, r2, r3
 801951a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801951c:	8952      	ldrh	r2, [r2, #10]
 801951e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019522:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8019524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019526:	2b00      	cmp	r3, #0
 8019528:	d101      	bne.n	801952e <find_volume+0x2ca>
 801952a:	230d      	movs	r3, #13
 801952c:	e0de      	b.n	80196ec <find_volume+0x488>
		fmt = FS_FAT32;
 801952e:	2303      	movs	r3, #3
 8019530:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8019534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019536:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801953a:	4293      	cmp	r3, r2
 801953c:	d802      	bhi.n	8019544 <find_volume+0x2e0>
 801953e:	2302      	movs	r3, #2
 8019540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019546:	f640 72f5 	movw	r2, #4085	; 0xff5
 801954a:	4293      	cmp	r3, r2
 801954c:	d802      	bhi.n	8019554 <find_volume+0x2f0>
 801954e:	2301      	movs	r3, #1
 8019550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019556:	1c9a      	adds	r2, r3, #2
 8019558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801955a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801955e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019560:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019562:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019566:	441a      	add	r2, r3
 8019568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801956a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801956c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019570:	441a      	add	r2, r3
 8019572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019574:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8019576:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801957a:	2b03      	cmp	r3, #3
 801957c:	d11e      	bne.n	80195bc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019580:	3334      	adds	r3, #52	; 0x34
 8019582:	332a      	adds	r3, #42	; 0x2a
 8019584:	4618      	mov	r0, r3
 8019586:	f7fd ff95 	bl	80174b4 <ld_word>
 801958a:	4603      	mov	r3, r0
 801958c:	2b00      	cmp	r3, #0
 801958e:	d001      	beq.n	8019594 <find_volume+0x330>
 8019590:	230d      	movs	r3, #13
 8019592:	e0ab      	b.n	80196ec <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019596:	891b      	ldrh	r3, [r3, #8]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d001      	beq.n	80195a0 <find_volume+0x33c>
 801959c:	230d      	movs	r3, #13
 801959e:	e0a5      	b.n	80196ec <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80195a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a2:	3334      	adds	r3, #52	; 0x34
 80195a4:	332c      	adds	r3, #44	; 0x2c
 80195a6:	4618      	mov	r0, r3
 80195a8:	f7fd ff9c 	bl	80174e4 <ld_dword>
 80195ac:	4602      	mov	r2, r0
 80195ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80195b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195b4:	699b      	ldr	r3, [r3, #24]
 80195b6:	009b      	lsls	r3, r3, #2
 80195b8:	647b      	str	r3, [r7, #68]	; 0x44
 80195ba:	e01f      	b.n	80195fc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80195bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195be:	891b      	ldrh	r3, [r3, #8]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d101      	bne.n	80195c8 <find_volume+0x364>
 80195c4:	230d      	movs	r3, #13
 80195c6:	e091      	b.n	80196ec <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80195c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80195cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195ce:	441a      	add	r2, r3
 80195d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80195d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80195d8:	2b02      	cmp	r3, #2
 80195da:	d103      	bne.n	80195e4 <find_volume+0x380>
 80195dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195de:	699b      	ldr	r3, [r3, #24]
 80195e0:	005b      	lsls	r3, r3, #1
 80195e2:	e00a      	b.n	80195fa <find_volume+0x396>
 80195e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e6:	699a      	ldr	r2, [r3, #24]
 80195e8:	4613      	mov	r3, r2
 80195ea:	005b      	lsls	r3, r3, #1
 80195ec:	4413      	add	r3, r2
 80195ee:	085a      	lsrs	r2, r3, #1
 80195f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195f2:	699b      	ldr	r3, [r3, #24]
 80195f4:	f003 0301 	and.w	r3, r3, #1
 80195f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80195fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80195fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195fe:	69da      	ldr	r2, [r3, #28]
 8019600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019602:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8019606:	0a5b      	lsrs	r3, r3, #9
 8019608:	429a      	cmp	r2, r3
 801960a:	d201      	bcs.n	8019610 <find_volume+0x3ac>
 801960c:	230d      	movs	r3, #13
 801960e:	e06d      	b.n	80196ec <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8019610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019612:	f04f 32ff 	mov.w	r2, #4294967295
 8019616:	615a      	str	r2, [r3, #20]
 8019618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801961a:	695a      	ldr	r2, [r3, #20]
 801961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801961e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8019620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019622:	2280      	movs	r2, #128	; 0x80
 8019624:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8019626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801962a:	2b03      	cmp	r3, #3
 801962c:	d149      	bne.n	80196c2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019630:	3334      	adds	r3, #52	; 0x34
 8019632:	3330      	adds	r3, #48	; 0x30
 8019634:	4618      	mov	r0, r3
 8019636:	f7fd ff3d 	bl	80174b4 <ld_word>
 801963a:	4603      	mov	r3, r0
 801963c:	2b01      	cmp	r3, #1
 801963e:	d140      	bne.n	80196c2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8019640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019642:	3301      	adds	r3, #1
 8019644:	4619      	mov	r1, r3
 8019646:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019648:	f7fe f9e4 	bl	8017a14 <move_window>
 801964c:	4603      	mov	r3, r0
 801964e:	2b00      	cmp	r3, #0
 8019650:	d137      	bne.n	80196c2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8019652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019654:	2200      	movs	r2, #0
 8019656:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801965a:	3334      	adds	r3, #52	; 0x34
 801965c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019660:	4618      	mov	r0, r3
 8019662:	f7fd ff27 	bl	80174b4 <ld_word>
 8019666:	4603      	mov	r3, r0
 8019668:	461a      	mov	r2, r3
 801966a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801966e:	429a      	cmp	r2, r3
 8019670:	d127      	bne.n	80196c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8019672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019674:	3334      	adds	r3, #52	; 0x34
 8019676:	4618      	mov	r0, r3
 8019678:	f7fd ff34 	bl	80174e4 <ld_dword>
 801967c:	4603      	mov	r3, r0
 801967e:	4a1d      	ldr	r2, [pc, #116]	; (80196f4 <find_volume+0x490>)
 8019680:	4293      	cmp	r3, r2
 8019682:	d11e      	bne.n	80196c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8019684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019686:	3334      	adds	r3, #52	; 0x34
 8019688:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801968c:	4618      	mov	r0, r3
 801968e:	f7fd ff29 	bl	80174e4 <ld_dword>
 8019692:	4603      	mov	r3, r0
 8019694:	4a18      	ldr	r2, [pc, #96]	; (80196f8 <find_volume+0x494>)
 8019696:	4293      	cmp	r3, r2
 8019698:	d113      	bne.n	80196c2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801969c:	3334      	adds	r3, #52	; 0x34
 801969e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80196a2:	4618      	mov	r0, r3
 80196a4:	f7fd ff1e 	bl	80174e4 <ld_dword>
 80196a8:	4602      	mov	r2, r0
 80196aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80196ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196b0:	3334      	adds	r3, #52	; 0x34
 80196b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80196b6:	4618      	mov	r0, r3
 80196b8:	f7fd ff14 	bl	80174e4 <ld_dword>
 80196bc:	4602      	mov	r2, r0
 80196be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80196c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80196c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80196ca:	4b0c      	ldr	r3, [pc, #48]	; (80196fc <find_volume+0x498>)
 80196cc:	881b      	ldrh	r3, [r3, #0]
 80196ce:	3301      	adds	r3, #1
 80196d0:	b29a      	uxth	r2, r3
 80196d2:	4b0a      	ldr	r3, [pc, #40]	; (80196fc <find_volume+0x498>)
 80196d4:	801a      	strh	r2, [r3, #0]
 80196d6:	4b09      	ldr	r3, [pc, #36]	; (80196fc <find_volume+0x498>)
 80196d8:	881a      	ldrh	r2, [r3, #0]
 80196da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196dc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80196de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e0:	4a07      	ldr	r2, [pc, #28]	; (8019700 <find_volume+0x49c>)
 80196e2:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80196e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80196e6:	f7fe f92d 	bl	8017944 <clear_lock>
#endif
	return FR_OK;
 80196ea:	2300      	movs	r3, #0
}
 80196ec:	4618      	mov	r0, r3
 80196ee:	3758      	adds	r7, #88	; 0x58
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}
 80196f4:	41615252 	.word	0x41615252
 80196f8:	61417272 	.word	0x61417272
 80196fc:	20001ab0 	.word	0x20001ab0
 8019700:	20001ad4 	.word	0x20001ad4

08019704 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8019704:	b580      	push	{r7, lr}
 8019706:	b084      	sub	sp, #16
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801970e:	2309      	movs	r3, #9
 8019710:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d01c      	beq.n	8019752 <validate+0x4e>
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d018      	beq.n	8019752 <validate+0x4e>
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	781b      	ldrb	r3, [r3, #0]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d013      	beq.n	8019752 <validate+0x4e>
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	889a      	ldrh	r2, [r3, #4]
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	88db      	ldrh	r3, [r3, #6]
 8019734:	429a      	cmp	r2, r3
 8019736:	d10c      	bne.n	8019752 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	785b      	ldrb	r3, [r3, #1]
 801973e:	4618      	mov	r0, r3
 8019740:	f7fd fe1a 	bl	8017378 <disk_status>
 8019744:	4603      	mov	r3, r0
 8019746:	f003 0301 	and.w	r3, r3, #1
 801974a:	2b00      	cmp	r3, #0
 801974c:	d101      	bne.n	8019752 <validate+0x4e>
			res = FR_OK;
 801974e:	2300      	movs	r3, #0
 8019750:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8019752:	7bfb      	ldrb	r3, [r7, #15]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d102      	bne.n	801975e <validate+0x5a>
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	e000      	b.n	8019760 <validate+0x5c>
 801975e:	2300      	movs	r3, #0
 8019760:	683a      	ldr	r2, [r7, #0]
 8019762:	6013      	str	r3, [r2, #0]
	return res;
 8019764:	7bfb      	ldrb	r3, [r7, #15]
}
 8019766:	4618      	mov	r0, r3
 8019768:	3710      	adds	r7, #16
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}
	...

08019770 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8019770:	b580      	push	{r7, lr}
 8019772:	b088      	sub	sp, #32
 8019774:	af00      	add	r7, sp, #0
 8019776:	60f8      	str	r0, [r7, #12]
 8019778:	60b9      	str	r1, [r7, #8]
 801977a:	4613      	mov	r3, r2
 801977c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801977e:	68bb      	ldr	r3, [r7, #8]
 8019780:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8019782:	f107 0310 	add.w	r3, r7, #16
 8019786:	4618      	mov	r0, r3
 8019788:	f7ff fcd1 	bl	801912e <get_ldnumber>
 801978c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	2b00      	cmp	r3, #0
 8019792:	da01      	bge.n	8019798 <f_mount+0x28>
 8019794:	230b      	movs	r3, #11
 8019796:	e02b      	b.n	80197f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019798:	4a17      	ldr	r2, [pc, #92]	; (80197f8 <f_mount+0x88>)
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80197a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80197a2:	69bb      	ldr	r3, [r7, #24]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d005      	beq.n	80197b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80197a8:	69b8      	ldr	r0, [r7, #24]
 80197aa:	f7fe f8cb 	bl	8017944 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80197ae:	69bb      	ldr	r3, [r7, #24]
 80197b0:	2200      	movs	r2, #0
 80197b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d002      	beq.n	80197c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	2200      	movs	r2, #0
 80197be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80197c0:	68fa      	ldr	r2, [r7, #12]
 80197c2:	490d      	ldr	r1, [pc, #52]	; (80197f8 <f_mount+0x88>)
 80197c4:	69fb      	ldr	r3, [r7, #28]
 80197c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d002      	beq.n	80197d6 <f_mount+0x66>
 80197d0:	79fb      	ldrb	r3, [r7, #7]
 80197d2:	2b01      	cmp	r3, #1
 80197d4:	d001      	beq.n	80197da <f_mount+0x6a>
 80197d6:	2300      	movs	r3, #0
 80197d8:	e00a      	b.n	80197f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80197da:	f107 010c 	add.w	r1, r7, #12
 80197de:	f107 0308 	add.w	r3, r7, #8
 80197e2:	2200      	movs	r2, #0
 80197e4:	4618      	mov	r0, r3
 80197e6:	f7ff fd3d 	bl	8019264 <find_volume>
 80197ea:	4603      	mov	r3, r0
 80197ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80197ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80197f0:	4618      	mov	r0, r3
 80197f2:	3720      	adds	r7, #32
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bd80      	pop	{r7, pc}
 80197f8:	20001aac 	.word	0x20001aac

080197fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b09a      	sub	sp, #104	; 0x68
 8019800:	af00      	add	r7, sp, #0
 8019802:	60f8      	str	r0, [r7, #12]
 8019804:	60b9      	str	r1, [r7, #8]
 8019806:	4613      	mov	r3, r2
 8019808:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d101      	bne.n	8019814 <f_open+0x18>
 8019810:	2309      	movs	r3, #9
 8019812:	e1ad      	b.n	8019b70 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8019814:	79fb      	ldrb	r3, [r7, #7]
 8019816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801981a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801981c:	79fa      	ldrb	r2, [r7, #7]
 801981e:	f107 0114 	add.w	r1, r7, #20
 8019822:	f107 0308 	add.w	r3, r7, #8
 8019826:	4618      	mov	r0, r3
 8019828:	f7ff fd1c 	bl	8019264 <find_volume>
 801982c:	4603      	mov	r3, r0
 801982e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8019832:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019836:	2b00      	cmp	r3, #0
 8019838:	f040 8191 	bne.w	8019b5e <f_open+0x362>
		dj.obj.fs = fs;
 801983c:	697b      	ldr	r3, [r7, #20]
 801983e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019840:	68ba      	ldr	r2, [r7, #8]
 8019842:	f107 0318 	add.w	r3, r7, #24
 8019846:	4611      	mov	r1, r2
 8019848:	4618      	mov	r0, r3
 801984a:	f7ff fbff 	bl	801904c <follow_path>
 801984e:	4603      	mov	r3, r0
 8019850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019854:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019858:	2b00      	cmp	r3, #0
 801985a:	d11a      	bne.n	8019892 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801985c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019860:	b25b      	sxtb	r3, r3
 8019862:	2b00      	cmp	r3, #0
 8019864:	da03      	bge.n	801986e <f_open+0x72>
				res = FR_INVALID_NAME;
 8019866:	2306      	movs	r3, #6
 8019868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801986c:	e011      	b.n	8019892 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801986e:	79fb      	ldrb	r3, [r7, #7]
 8019870:	f023 0301 	bic.w	r3, r3, #1
 8019874:	2b00      	cmp	r3, #0
 8019876:	bf14      	ite	ne
 8019878:	2301      	movne	r3, #1
 801987a:	2300      	moveq	r3, #0
 801987c:	b2db      	uxtb	r3, r3
 801987e:	461a      	mov	r2, r3
 8019880:	f107 0318 	add.w	r3, r7, #24
 8019884:	4611      	mov	r1, r2
 8019886:	4618      	mov	r0, r3
 8019888:	f7fd ff14 	bl	80176b4 <chk_lock>
 801988c:	4603      	mov	r3, r0
 801988e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8019892:	79fb      	ldrb	r3, [r7, #7]
 8019894:	f003 031c 	and.w	r3, r3, #28
 8019898:	2b00      	cmp	r3, #0
 801989a:	d07f      	beq.n	801999c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801989c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d017      	beq.n	80198d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80198a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198a8:	2b04      	cmp	r3, #4
 80198aa:	d10e      	bne.n	80198ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80198ac:	f7fd ff5e 	bl	801776c <enq_lock>
 80198b0:	4603      	mov	r3, r0
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d006      	beq.n	80198c4 <f_open+0xc8>
 80198b6:	f107 0318 	add.w	r3, r7, #24
 80198ba:	4618      	mov	r0, r3
 80198bc:	f7ff f838 	bl	8018930 <dir_register>
 80198c0:	4603      	mov	r3, r0
 80198c2:	e000      	b.n	80198c6 <f_open+0xca>
 80198c4:	2312      	movs	r3, #18
 80198c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80198ca:	79fb      	ldrb	r3, [r7, #7]
 80198cc:	f043 0308 	orr.w	r3, r3, #8
 80198d0:	71fb      	strb	r3, [r7, #7]
 80198d2:	e010      	b.n	80198f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80198d4:	7fbb      	ldrb	r3, [r7, #30]
 80198d6:	f003 0311 	and.w	r3, r3, #17
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d003      	beq.n	80198e6 <f_open+0xea>
					res = FR_DENIED;
 80198de:	2307      	movs	r3, #7
 80198e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80198e4:	e007      	b.n	80198f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80198e6:	79fb      	ldrb	r3, [r7, #7]
 80198e8:	f003 0304 	and.w	r3, r3, #4
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d002      	beq.n	80198f6 <f_open+0xfa>
 80198f0:	2308      	movs	r3, #8
 80198f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80198f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d168      	bne.n	80199d0 <f_open+0x1d4>
 80198fe:	79fb      	ldrb	r3, [r7, #7]
 8019900:	f003 0308 	and.w	r3, r3, #8
 8019904:	2b00      	cmp	r3, #0
 8019906:	d063      	beq.n	80199d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8019908:	f7f8 fccc 	bl	80122a4 <get_fattime>
 801990c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019910:	330e      	adds	r3, #14
 8019912:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019914:	4618      	mov	r0, r3
 8019916:	f7fd fe23 	bl	8017560 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801991c:	3316      	adds	r3, #22
 801991e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019920:	4618      	mov	r0, r3
 8019922:	f7fd fe1d 	bl	8017560 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8019926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019928:	330b      	adds	r3, #11
 801992a:	2220      	movs	r2, #32
 801992c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801992e:	697b      	ldr	r3, [r7, #20]
 8019930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019932:	4611      	mov	r1, r2
 8019934:	4618      	mov	r0, r3
 8019936:	f7fe fd74 	bl	8018422 <ld_clust>
 801993a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801993c:	697b      	ldr	r3, [r7, #20]
 801993e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8019940:	2200      	movs	r2, #0
 8019942:	4618      	mov	r0, r3
 8019944:	f7fe fd8c 	bl	8018460 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801994a:	331c      	adds	r3, #28
 801994c:	2100      	movs	r1, #0
 801994e:	4618      	mov	r0, r3
 8019950:	f7fd fe06 	bl	8017560 <st_dword>
					fs->wflag = 1;
 8019954:	697b      	ldr	r3, [r7, #20]
 8019956:	2201      	movs	r2, #1
 8019958:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801995a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801995c:	2b00      	cmp	r3, #0
 801995e:	d037      	beq.n	80199d0 <f_open+0x1d4>
						dw = fs->winsect;
 8019960:	697b      	ldr	r3, [r7, #20]
 8019962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019964:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019966:	f107 0318 	add.w	r3, r7, #24
 801996a:	2200      	movs	r2, #0
 801996c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801996e:	4618      	mov	r0, r3
 8019970:	f7fe fa9f 	bl	8017eb2 <remove_chain>
 8019974:	4603      	mov	r3, r0
 8019976:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801997a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801997e:	2b00      	cmp	r3, #0
 8019980:	d126      	bne.n	80199d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8019982:	697b      	ldr	r3, [r7, #20]
 8019984:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019986:	4618      	mov	r0, r3
 8019988:	f7fe f844 	bl	8017a14 <move_window>
 801998c:	4603      	mov	r3, r0
 801998e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019996:	3a01      	subs	r2, #1
 8019998:	611a      	str	r2, [r3, #16]
 801999a:	e019      	b.n	80199d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801999c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d115      	bne.n	80199d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80199a4:	7fbb      	ldrb	r3, [r7, #30]
 80199a6:	f003 0310 	and.w	r3, r3, #16
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d003      	beq.n	80199b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80199ae:	2304      	movs	r3, #4
 80199b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80199b4:	e00c      	b.n	80199d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80199b6:	79fb      	ldrb	r3, [r7, #7]
 80199b8:	f003 0302 	and.w	r3, r3, #2
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d007      	beq.n	80199d0 <f_open+0x1d4>
 80199c0:	7fbb      	ldrb	r3, [r7, #30]
 80199c2:	f003 0301 	and.w	r3, r3, #1
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d002      	beq.n	80199d0 <f_open+0x1d4>
						res = FR_DENIED;
 80199ca:	2307      	movs	r3, #7
 80199cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80199d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d128      	bne.n	8019a2a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80199d8:	79fb      	ldrb	r3, [r7, #7]
 80199da:	f003 0308 	and.w	r3, r3, #8
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d003      	beq.n	80199ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80199e2:	79fb      	ldrb	r3, [r7, #7]
 80199e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80199f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80199f8:	79fb      	ldrb	r3, [r7, #7]
 80199fa:	f023 0301 	bic.w	r3, r3, #1
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	bf14      	ite	ne
 8019a02:	2301      	movne	r3, #1
 8019a04:	2300      	moveq	r3, #0
 8019a06:	b2db      	uxtb	r3, r3
 8019a08:	461a      	mov	r2, r3
 8019a0a:	f107 0318 	add.w	r3, r7, #24
 8019a0e:	4611      	mov	r1, r2
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7fd fecd 	bl	80177b0 <inc_lock>
 8019a16:	4602      	mov	r2, r0
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8019a1c:	68fb      	ldr	r3, [r7, #12]
 8019a1e:	691b      	ldr	r3, [r3, #16]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d102      	bne.n	8019a2a <f_open+0x22e>
 8019a24:	2302      	movs	r3, #2
 8019a26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8019a2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	f040 8095 	bne.w	8019b5e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019a34:	697b      	ldr	r3, [r7, #20]
 8019a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a38:	4611      	mov	r1, r2
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f7fe fcf1 	bl	8018422 <ld_clust>
 8019a40:	4602      	mov	r2, r0
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a48:	331c      	adds	r3, #28
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	f7fd fd4a 	bl	80174e4 <ld_dword>
 8019a50:	4602      	mov	r2, r0
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	2200      	movs	r2, #0
 8019a5a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019a5c:	697a      	ldr	r2, [r7, #20]
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	88da      	ldrh	r2, [r3, #6]
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	79fa      	ldrb	r2, [r7, #7]
 8019a6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	2200      	movs	r2, #0
 8019a74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	2200      	movs	r2, #0
 8019a7a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	2200      	movs	r2, #0
 8019a80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	3330      	adds	r3, #48	; 0x30
 8019a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019a8a:	2100      	movs	r1, #0
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7fd fdb4 	bl	80175fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019a92:	79fb      	ldrb	r3, [r7, #7]
 8019a94:	f003 0320 	and.w	r3, r3, #32
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d060      	beq.n	8019b5e <f_open+0x362>
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	68db      	ldr	r3, [r3, #12]
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d05c      	beq.n	8019b5e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	68da      	ldr	r2, [r3, #12]
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019aac:	697b      	ldr	r3, [r7, #20]
 8019aae:	895b      	ldrh	r3, [r3, #10]
 8019ab0:	025b      	lsls	r3, r3, #9
 8019ab2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	689b      	ldr	r3, [r3, #8]
 8019ab8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	68db      	ldr	r3, [r3, #12]
 8019abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019ac0:	e016      	b.n	8019af0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f7fe f85f 	bl	8017b8a <get_fat>
 8019acc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019ad0:	2b01      	cmp	r3, #1
 8019ad2:	d802      	bhi.n	8019ada <f_open+0x2de>
 8019ad4:	2302      	movs	r3, #2
 8019ad6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ae0:	d102      	bne.n	8019ae8 <f_open+0x2ec>
 8019ae2:	2301      	movs	r3, #1
 8019ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019aec:	1ad3      	subs	r3, r2, r3
 8019aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019af0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d103      	bne.n	8019b00 <f_open+0x304>
 8019af8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019afc:	429a      	cmp	r2, r3
 8019afe:	d8e0      	bhi.n	8019ac2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019b04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019b06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d127      	bne.n	8019b5e <f_open+0x362>
 8019b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d022      	beq.n	8019b5e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019b18:	697b      	ldr	r3, [r7, #20]
 8019b1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7fe f815 	bl	8017b4c <clust2sect>
 8019b22:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d103      	bne.n	8019b32 <f_open+0x336>
						res = FR_INT_ERR;
 8019b2a:	2302      	movs	r3, #2
 8019b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019b30:	e015      	b.n	8019b5e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b34:	0a5a      	lsrs	r2, r3, #9
 8019b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b38:	441a      	add	r2, r3
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019b3e:	697b      	ldr	r3, [r7, #20]
 8019b40:	7858      	ldrb	r0, [r3, #1]
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	6a1a      	ldr	r2, [r3, #32]
 8019b4c:	2301      	movs	r3, #1
 8019b4e:	f7fd fc53 	bl	80173f8 <disk_read>
 8019b52:	4603      	mov	r3, r0
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d002      	beq.n	8019b5e <f_open+0x362>
 8019b58:	2301      	movs	r3, #1
 8019b5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d002      	beq.n	8019b6c <f_open+0x370>
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	2200      	movs	r2, #0
 8019b6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019b6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019b70:	4618      	mov	r0, r3
 8019b72:	3768      	adds	r7, #104	; 0x68
 8019b74:	46bd      	mov	sp, r7
 8019b76:	bd80      	pop	{r7, pc}

08019b78 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b08c      	sub	sp, #48	; 0x30
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	60f8      	str	r0, [r7, #12]
 8019b80:	60b9      	str	r1, [r7, #8]
 8019b82:	607a      	str	r2, [r7, #4]
 8019b84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019b86:	68bb      	ldr	r3, [r7, #8]
 8019b88:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	f107 0210 	add.w	r2, r7, #16
 8019b96:	4611      	mov	r1, r2
 8019b98:	4618      	mov	r0, r3
 8019b9a:	f7ff fdb3 	bl	8019704 <validate>
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d107      	bne.n	8019bbc <f_write+0x44>
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	7d5b      	ldrb	r3, [r3, #21]
 8019bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d002      	beq.n	8019bc2 <f_write+0x4a>
 8019bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019bc0:	e14b      	b.n	8019e5a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	7d1b      	ldrb	r3, [r3, #20]
 8019bc6:	f003 0302 	and.w	r3, r3, #2
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d101      	bne.n	8019bd2 <f_write+0x5a>
 8019bce:	2307      	movs	r3, #7
 8019bd0:	e143      	b.n	8019e5a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	699a      	ldr	r2, [r3, #24]
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	441a      	add	r2, r3
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	699b      	ldr	r3, [r3, #24]
 8019bde:	429a      	cmp	r2, r3
 8019be0:	f080 812d 	bcs.w	8019e3e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	699b      	ldr	r3, [r3, #24]
 8019be8:	43db      	mvns	r3, r3
 8019bea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019bec:	e127      	b.n	8019e3e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	699b      	ldr	r3, [r3, #24]
 8019bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	f040 80e3 	bne.w	8019dc2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	699b      	ldr	r3, [r3, #24]
 8019c00:	0a5b      	lsrs	r3, r3, #9
 8019c02:	693a      	ldr	r2, [r7, #16]
 8019c04:	8952      	ldrh	r2, [r2, #10]
 8019c06:	3a01      	subs	r2, #1
 8019c08:	4013      	ands	r3, r2
 8019c0a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019c0c:	69bb      	ldr	r3, [r7, #24]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d143      	bne.n	8019c9a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	699b      	ldr	r3, [r3, #24]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d10c      	bne.n	8019c34 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	689b      	ldr	r3, [r3, #8]
 8019c1e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d11a      	bne.n	8019c5c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	2100      	movs	r1, #0
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7fe f9a6 	bl	8017f7c <create_chain>
 8019c30:	62b8      	str	r0, [r7, #40]	; 0x28
 8019c32:	e013      	b.n	8019c5c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d007      	beq.n	8019c4c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	699b      	ldr	r3, [r3, #24]
 8019c40:	4619      	mov	r1, r3
 8019c42:	68f8      	ldr	r0, [r7, #12]
 8019c44:	f7fe fa32 	bl	80180ac <clmt_clust>
 8019c48:	62b8      	str	r0, [r7, #40]	; 0x28
 8019c4a:	e007      	b.n	8019c5c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019c4c:	68fa      	ldr	r2, [r7, #12]
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	69db      	ldr	r3, [r3, #28]
 8019c52:	4619      	mov	r1, r3
 8019c54:	4610      	mov	r0, r2
 8019c56:	f7fe f991 	bl	8017f7c <create_chain>
 8019c5a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	f000 80f2 	beq.w	8019e48 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c66:	2b01      	cmp	r3, #1
 8019c68:	d104      	bne.n	8019c74 <f_write+0xfc>
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	2202      	movs	r2, #2
 8019c6e:	755a      	strb	r2, [r3, #21]
 8019c70:	2302      	movs	r3, #2
 8019c72:	e0f2      	b.n	8019e5a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c7a:	d104      	bne.n	8019c86 <f_write+0x10e>
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	2201      	movs	r2, #1
 8019c80:	755a      	strb	r2, [r3, #21]
 8019c82:	2301      	movs	r3, #1
 8019c84:	e0e9      	b.n	8019e5a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c8a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	689b      	ldr	r3, [r3, #8]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d102      	bne.n	8019c9a <f_write+0x122>
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c98:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	7d1b      	ldrb	r3, [r3, #20]
 8019c9e:	b25b      	sxtb	r3, r3
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	da18      	bge.n	8019cd6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019ca4:	693b      	ldr	r3, [r7, #16]
 8019ca6:	7858      	ldrb	r0, [r3, #1]
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	6a1a      	ldr	r2, [r3, #32]
 8019cb2:	2301      	movs	r3, #1
 8019cb4:	f7fd fbc0 	bl	8017438 <disk_write>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d004      	beq.n	8019cc8 <f_write+0x150>
 8019cbe:	68fb      	ldr	r3, [r7, #12]
 8019cc0:	2201      	movs	r2, #1
 8019cc2:	755a      	strb	r2, [r3, #21]
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	e0c8      	b.n	8019e5a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	7d1b      	ldrb	r3, [r3, #20]
 8019ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019cd0:	b2da      	uxtb	r2, r3
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019cd6:	693a      	ldr	r2, [r7, #16]
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	69db      	ldr	r3, [r3, #28]
 8019cdc:	4619      	mov	r1, r3
 8019cde:	4610      	mov	r0, r2
 8019ce0:	f7fd ff34 	bl	8017b4c <clust2sect>
 8019ce4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019ce6:	697b      	ldr	r3, [r7, #20]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d104      	bne.n	8019cf6 <f_write+0x17e>
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	2202      	movs	r2, #2
 8019cf0:	755a      	strb	r2, [r3, #21]
 8019cf2:	2302      	movs	r3, #2
 8019cf4:	e0b1      	b.n	8019e5a <f_write+0x2e2>
			sect += csect;
 8019cf6:	697a      	ldr	r2, [r7, #20]
 8019cf8:	69bb      	ldr	r3, [r7, #24]
 8019cfa:	4413      	add	r3, r2
 8019cfc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	0a5b      	lsrs	r3, r3, #9
 8019d02:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019d04:	6a3b      	ldr	r3, [r7, #32]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d03c      	beq.n	8019d84 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019d0a:	69ba      	ldr	r2, [r7, #24]
 8019d0c:	6a3b      	ldr	r3, [r7, #32]
 8019d0e:	4413      	add	r3, r2
 8019d10:	693a      	ldr	r2, [r7, #16]
 8019d12:	8952      	ldrh	r2, [r2, #10]
 8019d14:	4293      	cmp	r3, r2
 8019d16:	d905      	bls.n	8019d24 <f_write+0x1ac>
					cc = fs->csize - csect;
 8019d18:	693b      	ldr	r3, [r7, #16]
 8019d1a:	895b      	ldrh	r3, [r3, #10]
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	69bb      	ldr	r3, [r7, #24]
 8019d20:	1ad3      	subs	r3, r2, r3
 8019d22:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019d24:	693b      	ldr	r3, [r7, #16]
 8019d26:	7858      	ldrb	r0, [r3, #1]
 8019d28:	6a3b      	ldr	r3, [r7, #32]
 8019d2a:	697a      	ldr	r2, [r7, #20]
 8019d2c:	69f9      	ldr	r1, [r7, #28]
 8019d2e:	f7fd fb83 	bl	8017438 <disk_write>
 8019d32:	4603      	mov	r3, r0
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d004      	beq.n	8019d42 <f_write+0x1ca>
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	2201      	movs	r2, #1
 8019d3c:	755a      	strb	r2, [r3, #21]
 8019d3e:	2301      	movs	r3, #1
 8019d40:	e08b      	b.n	8019e5a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	6a1a      	ldr	r2, [r3, #32]
 8019d46:	697b      	ldr	r3, [r7, #20]
 8019d48:	1ad3      	subs	r3, r2, r3
 8019d4a:	6a3a      	ldr	r2, [r7, #32]
 8019d4c:	429a      	cmp	r2, r3
 8019d4e:	d915      	bls.n	8019d7c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	6a1a      	ldr	r2, [r3, #32]
 8019d5a:	697b      	ldr	r3, [r7, #20]
 8019d5c:	1ad3      	subs	r3, r2, r3
 8019d5e:	025b      	lsls	r3, r3, #9
 8019d60:	69fa      	ldr	r2, [r7, #28]
 8019d62:	4413      	add	r3, r2
 8019d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019d68:	4619      	mov	r1, r3
 8019d6a:	f7fd fc25 	bl	80175b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	7d1b      	ldrb	r3, [r3, #20]
 8019d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019d76:	b2da      	uxtb	r2, r3
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019d7c:	6a3b      	ldr	r3, [r7, #32]
 8019d7e:	025b      	lsls	r3, r3, #9
 8019d80:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019d82:	e03f      	b.n	8019e04 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	6a1b      	ldr	r3, [r3, #32]
 8019d88:	697a      	ldr	r2, [r7, #20]
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d016      	beq.n	8019dbc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	699a      	ldr	r2, [r3, #24]
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019d96:	429a      	cmp	r2, r3
 8019d98:	d210      	bcs.n	8019dbc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019d9a:	693b      	ldr	r3, [r7, #16]
 8019d9c:	7858      	ldrb	r0, [r3, #1]
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019da4:	2301      	movs	r3, #1
 8019da6:	697a      	ldr	r2, [r7, #20]
 8019da8:	f7fd fb26 	bl	80173f8 <disk_read>
 8019dac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d004      	beq.n	8019dbc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	2201      	movs	r2, #1
 8019db6:	755a      	strb	r2, [r3, #21]
 8019db8:	2301      	movs	r3, #1
 8019dba:	e04e      	b.n	8019e5a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	697a      	ldr	r2, [r7, #20]
 8019dc0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019dc2:	68fb      	ldr	r3, [r7, #12]
 8019dc4:	699b      	ldr	r3, [r3, #24]
 8019dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019dca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8019dce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	429a      	cmp	r2, r3
 8019dd6:	d901      	bls.n	8019ddc <f_write+0x264>
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	699b      	ldr	r3, [r3, #24]
 8019de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019dea:	4413      	add	r3, r2
 8019dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dee:	69f9      	ldr	r1, [r7, #28]
 8019df0:	4618      	mov	r0, r3
 8019df2:	f7fd fbe1 	bl	80175b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	7d1b      	ldrb	r3, [r3, #20]
 8019dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019dfe:	b2da      	uxtb	r2, r3
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019e04:	69fa      	ldr	r2, [r7, #28]
 8019e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e08:	4413      	add	r3, r2
 8019e0a:	61fb      	str	r3, [r7, #28]
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	699a      	ldr	r2, [r3, #24]
 8019e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e12:	441a      	add	r2, r3
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	619a      	str	r2, [r3, #24]
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	68da      	ldr	r2, [r3, #12]
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	699b      	ldr	r3, [r3, #24]
 8019e20:	429a      	cmp	r2, r3
 8019e22:	bf38      	it	cc
 8019e24:	461a      	movcc	r2, r3
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	60da      	str	r2, [r3, #12]
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	681a      	ldr	r2, [r3, #0]
 8019e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e30:	441a      	add	r2, r3
 8019e32:	683b      	ldr	r3, [r7, #0]
 8019e34:	601a      	str	r2, [r3, #0]
 8019e36:	687a      	ldr	r2, [r7, #4]
 8019e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e3a:	1ad3      	subs	r3, r2, r3
 8019e3c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	f47f aed4 	bne.w	8019bee <f_write+0x76>
 8019e46:	e000      	b.n	8019e4a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019e48:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	7d1b      	ldrb	r3, [r3, #20]
 8019e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e52:	b2da      	uxtb	r2, r3
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019e58:	2300      	movs	r3, #0
}
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	3730      	adds	r7, #48	; 0x30
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	bd80      	pop	{r7, pc}

08019e62 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019e62:	b580      	push	{r7, lr}
 8019e64:	b086      	sub	sp, #24
 8019e66:	af00      	add	r7, sp, #0
 8019e68:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	f107 0208 	add.w	r2, r7, #8
 8019e70:	4611      	mov	r1, r2
 8019e72:	4618      	mov	r0, r3
 8019e74:	f7ff fc46 	bl	8019704 <validate>
 8019e78:	4603      	mov	r3, r0
 8019e7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019e7c:	7dfb      	ldrb	r3, [r7, #23]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d168      	bne.n	8019f54 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	7d1b      	ldrb	r3, [r3, #20]
 8019e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d062      	beq.n	8019f54 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	7d1b      	ldrb	r3, [r3, #20]
 8019e92:	b25b      	sxtb	r3, r3
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	da15      	bge.n	8019ec4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019e98:	68bb      	ldr	r3, [r7, #8]
 8019e9a:	7858      	ldrb	r0, [r3, #1]
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	6a1a      	ldr	r2, [r3, #32]
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	f7fd fac6 	bl	8017438 <disk_write>
 8019eac:	4603      	mov	r3, r0
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d001      	beq.n	8019eb6 <f_sync+0x54>
 8019eb2:	2301      	movs	r3, #1
 8019eb4:	e04f      	b.n	8019f56 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	7d1b      	ldrb	r3, [r3, #20]
 8019eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019ebe:	b2da      	uxtb	r2, r3
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019ec4:	f7f8 f9ee 	bl	80122a4 <get_fattime>
 8019ec8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019eca:	68ba      	ldr	r2, [r7, #8]
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ed0:	4619      	mov	r1, r3
 8019ed2:	4610      	mov	r0, r2
 8019ed4:	f7fd fd9e 	bl	8017a14 <move_window>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019edc:	7dfb      	ldrb	r3, [r7, #23]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d138      	bne.n	8019f54 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ee6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	330b      	adds	r3, #11
 8019eec:	781a      	ldrb	r2, [r3, #0]
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	330b      	adds	r3, #11
 8019ef2:	f042 0220 	orr.w	r2, r2, #32
 8019ef6:	b2d2      	uxtb	r2, r2
 8019ef8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	6818      	ldr	r0, [r3, #0]
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	689b      	ldr	r3, [r3, #8]
 8019f02:	461a      	mov	r2, r3
 8019f04:	68f9      	ldr	r1, [r7, #12]
 8019f06:	f7fe faab 	bl	8018460 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	f103 021c 	add.w	r2, r3, #28
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	68db      	ldr	r3, [r3, #12]
 8019f14:	4619      	mov	r1, r3
 8019f16:	4610      	mov	r0, r2
 8019f18:	f7fd fb22 	bl	8017560 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	3316      	adds	r3, #22
 8019f20:	6939      	ldr	r1, [r7, #16]
 8019f22:	4618      	mov	r0, r3
 8019f24:	f7fd fb1c 	bl	8017560 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	3312      	adds	r3, #18
 8019f2c:	2100      	movs	r1, #0
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f7fd fafb 	bl	801752a <st_word>
					fs->wflag = 1;
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	2201      	movs	r2, #1
 8019f38:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019f3a:	68bb      	ldr	r3, [r7, #8]
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	f7fd fd97 	bl	8017a70 <sync_fs>
 8019f42:	4603      	mov	r3, r0
 8019f44:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	7d1b      	ldrb	r3, [r3, #20]
 8019f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019f4e:	b2da      	uxtb	r2, r3
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8019f56:	4618      	mov	r0, r3
 8019f58:	3718      	adds	r7, #24
 8019f5a:	46bd      	mov	sp, r7
 8019f5c:	bd80      	pop	{r7, pc}

08019f5e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019f5e:	b580      	push	{r7, lr}
 8019f60:	b084      	sub	sp, #16
 8019f62:	af00      	add	r7, sp, #0
 8019f64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f7ff ff7b 	bl	8019e62 <f_sync>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019f70:	7bfb      	ldrb	r3, [r7, #15]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d118      	bne.n	8019fa8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	f107 0208 	add.w	r2, r7, #8
 8019f7c:	4611      	mov	r1, r2
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f7ff fbc0 	bl	8019704 <validate>
 8019f84:	4603      	mov	r3, r0
 8019f86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019f88:	7bfb      	ldrb	r3, [r7, #15]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d10c      	bne.n	8019fa8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	691b      	ldr	r3, [r3, #16]
 8019f92:	4618      	mov	r0, r3
 8019f94:	f7fd fc9a 	bl	80178cc <dec_lock>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019f9c:	7bfb      	ldrb	r3, [r7, #15]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d102      	bne.n	8019fa8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	2200      	movs	r2, #0
 8019fa6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8019faa:	4618      	mov	r0, r3
 8019fac:	3710      	adds	r7, #16
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}

08019fb2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8019fb2:	b580      	push	{r7, lr}
 8019fb4:	b090      	sub	sp, #64	; 0x40
 8019fb6:	af00      	add	r7, sp, #0
 8019fb8:	6078      	str	r0, [r7, #4]
 8019fba:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8019fbc:	f107 0108 	add.w	r1, r7, #8
 8019fc0:	1d3b      	adds	r3, r7, #4
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7ff f94d 	bl	8019264 <find_volume>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8019fd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d11f      	bne.n	801a018 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8019fd8:	687a      	ldr	r2, [r7, #4]
 8019fda:	f107 0308 	add.w	r3, r7, #8
 8019fde:	4611      	mov	r1, r2
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f7ff f833 	bl	801904c <follow_path>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8019fec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d111      	bne.n	801a018 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8019ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019ff8:	b25b      	sxtb	r3, r3
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	da03      	bge.n	801a006 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8019ffe:	2306      	movs	r3, #6
 801a000:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801a004:	e008      	b.n	801a018 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d005      	beq.n	801a018 <f_stat+0x66>
 801a00c:	f107 0308 	add.w	r3, r7, #8
 801a010:	6839      	ldr	r1, [r7, #0]
 801a012:	4618      	mov	r0, r3
 801a014:	f7fe fd84 	bl	8018b20 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801a018:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801a01c:	4618      	mov	r0, r3
 801a01e:	3740      	adds	r7, #64	; 0x40
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}

0801a024 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a024:	b480      	push	{r7}
 801a026:	b087      	sub	sp, #28
 801a028:	af00      	add	r7, sp, #0
 801a02a:	60f8      	str	r0, [r7, #12]
 801a02c:	60b9      	str	r1, [r7, #8]
 801a02e:	4613      	mov	r3, r2
 801a030:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a032:	2301      	movs	r3, #1
 801a034:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a036:	2300      	movs	r3, #0
 801a038:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a03a:	4b1f      	ldr	r3, [pc, #124]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a03c:	7a5b      	ldrb	r3, [r3, #9]
 801a03e:	b2db      	uxtb	r3, r3
 801a040:	2b00      	cmp	r3, #0
 801a042:	d131      	bne.n	801a0a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a044:	4b1c      	ldr	r3, [pc, #112]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a046:	7a5b      	ldrb	r3, [r3, #9]
 801a048:	b2db      	uxtb	r3, r3
 801a04a:	461a      	mov	r2, r3
 801a04c:	4b1a      	ldr	r3, [pc, #104]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a04e:	2100      	movs	r1, #0
 801a050:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a052:	4b19      	ldr	r3, [pc, #100]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a054:	7a5b      	ldrb	r3, [r3, #9]
 801a056:	b2db      	uxtb	r3, r3
 801a058:	4a17      	ldr	r2, [pc, #92]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a05a:	009b      	lsls	r3, r3, #2
 801a05c:	4413      	add	r3, r2
 801a05e:	68fa      	ldr	r2, [r7, #12]
 801a060:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a062:	4b15      	ldr	r3, [pc, #84]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a064:	7a5b      	ldrb	r3, [r3, #9]
 801a066:	b2db      	uxtb	r3, r3
 801a068:	461a      	mov	r2, r3
 801a06a:	4b13      	ldr	r3, [pc, #76]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a06c:	4413      	add	r3, r2
 801a06e:	79fa      	ldrb	r2, [r7, #7]
 801a070:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a072:	4b11      	ldr	r3, [pc, #68]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a074:	7a5b      	ldrb	r3, [r3, #9]
 801a076:	b2db      	uxtb	r3, r3
 801a078:	1c5a      	adds	r2, r3, #1
 801a07a:	b2d1      	uxtb	r1, r2
 801a07c:	4a0e      	ldr	r2, [pc, #56]	; (801a0b8 <FATFS_LinkDriverEx+0x94>)
 801a07e:	7251      	strb	r1, [r2, #9]
 801a080:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a082:	7dbb      	ldrb	r3, [r7, #22]
 801a084:	3330      	adds	r3, #48	; 0x30
 801a086:	b2da      	uxtb	r2, r3
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a08c:	68bb      	ldr	r3, [r7, #8]
 801a08e:	3301      	adds	r3, #1
 801a090:	223a      	movs	r2, #58	; 0x3a
 801a092:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a094:	68bb      	ldr	r3, [r7, #8]
 801a096:	3302      	adds	r3, #2
 801a098:	222f      	movs	r2, #47	; 0x2f
 801a09a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a09c:	68bb      	ldr	r3, [r7, #8]
 801a09e:	3303      	adds	r3, #3
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	371c      	adds	r7, #28
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b4:	4770      	bx	lr
 801a0b6:	bf00      	nop
 801a0b8:	20001cd4 	.word	0x20001cd4

0801a0bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b082      	sub	sp, #8
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
 801a0c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a0c6:	2200      	movs	r2, #0
 801a0c8:	6839      	ldr	r1, [r7, #0]
 801a0ca:	6878      	ldr	r0, [r7, #4]
 801a0cc:	f7ff ffaa 	bl	801a024 <FATFS_LinkDriverEx>
 801a0d0:	4603      	mov	r3, r0
}
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	3708      	adds	r7, #8
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bd80      	pop	{r7, pc}
	...

0801a0dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a0dc:	b480      	push	{r7}
 801a0de:	b085      	sub	sp, #20
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	6039      	str	r1, [r7, #0]
 801a0e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a0e8:	88fb      	ldrh	r3, [r7, #6]
 801a0ea:	2b7f      	cmp	r3, #127	; 0x7f
 801a0ec:	d802      	bhi.n	801a0f4 <ff_convert+0x18>
		c = chr;
 801a0ee:	88fb      	ldrh	r3, [r7, #6]
 801a0f0:	81fb      	strh	r3, [r7, #14]
 801a0f2:	e025      	b.n	801a140 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d00b      	beq.n	801a112 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a0fa:	88fb      	ldrh	r3, [r7, #6]
 801a0fc:	2bff      	cmp	r3, #255	; 0xff
 801a0fe:	d805      	bhi.n	801a10c <ff_convert+0x30>
 801a100:	88fb      	ldrh	r3, [r7, #6]
 801a102:	3b80      	subs	r3, #128	; 0x80
 801a104:	4a12      	ldr	r2, [pc, #72]	; (801a150 <ff_convert+0x74>)
 801a106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a10a:	e000      	b.n	801a10e <ff_convert+0x32>
 801a10c:	2300      	movs	r3, #0
 801a10e:	81fb      	strh	r3, [r7, #14]
 801a110:	e016      	b.n	801a140 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a112:	2300      	movs	r3, #0
 801a114:	81fb      	strh	r3, [r7, #14]
 801a116:	e009      	b.n	801a12c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a118:	89fb      	ldrh	r3, [r7, #14]
 801a11a:	4a0d      	ldr	r2, [pc, #52]	; (801a150 <ff_convert+0x74>)
 801a11c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a120:	88fa      	ldrh	r2, [r7, #6]
 801a122:	429a      	cmp	r2, r3
 801a124:	d006      	beq.n	801a134 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a126:	89fb      	ldrh	r3, [r7, #14]
 801a128:	3301      	adds	r3, #1
 801a12a:	81fb      	strh	r3, [r7, #14]
 801a12c:	89fb      	ldrh	r3, [r7, #14]
 801a12e:	2b7f      	cmp	r3, #127	; 0x7f
 801a130:	d9f2      	bls.n	801a118 <ff_convert+0x3c>
 801a132:	e000      	b.n	801a136 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a134:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a136:	89fb      	ldrh	r3, [r7, #14]
 801a138:	3380      	adds	r3, #128	; 0x80
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	b2db      	uxtb	r3, r3
 801a13e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a140:	89fb      	ldrh	r3, [r7, #14]
}
 801a142:	4618      	mov	r0, r3
 801a144:	3714      	adds	r7, #20
 801a146:	46bd      	mov	sp, r7
 801a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a14c:	4770      	bx	lr
 801a14e:	bf00      	nop
 801a150:	080227c0 	.word	0x080227c0

0801a154 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a154:	b480      	push	{r7}
 801a156:	b087      	sub	sp, #28
 801a158:	af00      	add	r7, sp, #0
 801a15a:	4603      	mov	r3, r0
 801a15c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a15e:	88fb      	ldrh	r3, [r7, #6]
 801a160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a164:	d201      	bcs.n	801a16a <ff_wtoupper+0x16>
 801a166:	4b3e      	ldr	r3, [pc, #248]	; (801a260 <ff_wtoupper+0x10c>)
 801a168:	e000      	b.n	801a16c <ff_wtoupper+0x18>
 801a16a:	4b3e      	ldr	r3, [pc, #248]	; (801a264 <ff_wtoupper+0x110>)
 801a16c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a16e:	697b      	ldr	r3, [r7, #20]
 801a170:	1c9a      	adds	r2, r3, #2
 801a172:	617a      	str	r2, [r7, #20]
 801a174:	881b      	ldrh	r3, [r3, #0]
 801a176:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a178:	8a7b      	ldrh	r3, [r7, #18]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d068      	beq.n	801a250 <ff_wtoupper+0xfc>
 801a17e:	88fa      	ldrh	r2, [r7, #6]
 801a180:	8a7b      	ldrh	r3, [r7, #18]
 801a182:	429a      	cmp	r2, r3
 801a184:	d364      	bcc.n	801a250 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a186:	697b      	ldr	r3, [r7, #20]
 801a188:	1c9a      	adds	r2, r3, #2
 801a18a:	617a      	str	r2, [r7, #20]
 801a18c:	881b      	ldrh	r3, [r3, #0]
 801a18e:	823b      	strh	r3, [r7, #16]
 801a190:	8a3b      	ldrh	r3, [r7, #16]
 801a192:	0a1b      	lsrs	r3, r3, #8
 801a194:	81fb      	strh	r3, [r7, #14]
 801a196:	8a3b      	ldrh	r3, [r7, #16]
 801a198:	b2db      	uxtb	r3, r3
 801a19a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a19c:	88fa      	ldrh	r2, [r7, #6]
 801a19e:	8a79      	ldrh	r1, [r7, #18]
 801a1a0:	8a3b      	ldrh	r3, [r7, #16]
 801a1a2:	440b      	add	r3, r1
 801a1a4:	429a      	cmp	r2, r3
 801a1a6:	da49      	bge.n	801a23c <ff_wtoupper+0xe8>
			switch (cmd) {
 801a1a8:	89fb      	ldrh	r3, [r7, #14]
 801a1aa:	2b08      	cmp	r3, #8
 801a1ac:	d84f      	bhi.n	801a24e <ff_wtoupper+0xfa>
 801a1ae:	a201      	add	r2, pc, #4	; (adr r2, 801a1b4 <ff_wtoupper+0x60>)
 801a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1b4:	0801a1d9 	.word	0x0801a1d9
 801a1b8:	0801a1eb 	.word	0x0801a1eb
 801a1bc:	0801a201 	.word	0x0801a201
 801a1c0:	0801a209 	.word	0x0801a209
 801a1c4:	0801a211 	.word	0x0801a211
 801a1c8:	0801a219 	.word	0x0801a219
 801a1cc:	0801a221 	.word	0x0801a221
 801a1d0:	0801a229 	.word	0x0801a229
 801a1d4:	0801a231 	.word	0x0801a231
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a1d8:	88fa      	ldrh	r2, [r7, #6]
 801a1da:	8a7b      	ldrh	r3, [r7, #18]
 801a1dc:	1ad3      	subs	r3, r2, r3
 801a1de:	005b      	lsls	r3, r3, #1
 801a1e0:	697a      	ldr	r2, [r7, #20]
 801a1e2:	4413      	add	r3, r2
 801a1e4:	881b      	ldrh	r3, [r3, #0]
 801a1e6:	80fb      	strh	r3, [r7, #6]
 801a1e8:	e027      	b.n	801a23a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a1ea:	88fa      	ldrh	r2, [r7, #6]
 801a1ec:	8a7b      	ldrh	r3, [r7, #18]
 801a1ee:	1ad3      	subs	r3, r2, r3
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	f003 0301 	and.w	r3, r3, #1
 801a1f6:	b29b      	uxth	r3, r3
 801a1f8:	88fa      	ldrh	r2, [r7, #6]
 801a1fa:	1ad3      	subs	r3, r2, r3
 801a1fc:	80fb      	strh	r3, [r7, #6]
 801a1fe:	e01c      	b.n	801a23a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a200:	88fb      	ldrh	r3, [r7, #6]
 801a202:	3b10      	subs	r3, #16
 801a204:	80fb      	strh	r3, [r7, #6]
 801a206:	e018      	b.n	801a23a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a208:	88fb      	ldrh	r3, [r7, #6]
 801a20a:	3b20      	subs	r3, #32
 801a20c:	80fb      	strh	r3, [r7, #6]
 801a20e:	e014      	b.n	801a23a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a210:	88fb      	ldrh	r3, [r7, #6]
 801a212:	3b30      	subs	r3, #48	; 0x30
 801a214:	80fb      	strh	r3, [r7, #6]
 801a216:	e010      	b.n	801a23a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a218:	88fb      	ldrh	r3, [r7, #6]
 801a21a:	3b1a      	subs	r3, #26
 801a21c:	80fb      	strh	r3, [r7, #6]
 801a21e:	e00c      	b.n	801a23a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a220:	88fb      	ldrh	r3, [r7, #6]
 801a222:	3308      	adds	r3, #8
 801a224:	80fb      	strh	r3, [r7, #6]
 801a226:	e008      	b.n	801a23a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a228:	88fb      	ldrh	r3, [r7, #6]
 801a22a:	3b50      	subs	r3, #80	; 0x50
 801a22c:	80fb      	strh	r3, [r7, #6]
 801a22e:	e004      	b.n	801a23a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a230:	88fb      	ldrh	r3, [r7, #6]
 801a232:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a236:	80fb      	strh	r3, [r7, #6]
 801a238:	bf00      	nop
			}
			break;
 801a23a:	e008      	b.n	801a24e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a23c:	89fb      	ldrh	r3, [r7, #14]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d195      	bne.n	801a16e <ff_wtoupper+0x1a>
 801a242:	8a3b      	ldrh	r3, [r7, #16]
 801a244:	005b      	lsls	r3, r3, #1
 801a246:	697a      	ldr	r2, [r7, #20]
 801a248:	4413      	add	r3, r2
 801a24a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a24c:	e78f      	b.n	801a16e <ff_wtoupper+0x1a>
			break;
 801a24e:	bf00      	nop
	}

	return chr;
 801a250:	88fb      	ldrh	r3, [r7, #6]
}
 801a252:	4618      	mov	r0, r3
 801a254:	371c      	adds	r7, #28
 801a256:	46bd      	mov	sp, r7
 801a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a25c:	4770      	bx	lr
 801a25e:	bf00      	nop
 801a260:	080228c0 	.word	0x080228c0
 801a264:	08022ab4 	.word	0x08022ab4

0801a268 <Mount_SD>:
//			printf("Successfully saved to SD Card\n");
//			}
//	}
//}

FRESULT Mount_SD(const TCHAR *path) {
 801a268:	b580      	push	{r7, lr}
 801a26a:	b082      	sub	sp, #8
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 801a270:	2201      	movs	r2, #1
 801a272:	6879      	ldr	r1, [r7, #4]
 801a274:	480e      	ldr	r0, [pc, #56]	; (801a2b0 <Mount_SD+0x48>)
 801a276:	f7ff fa7b 	bl	8019770 <f_mount>
 801a27a:	4603      	mov	r3, r0
 801a27c:	461a      	mov	r2, r3
 801a27e:	4b0d      	ldr	r3, [pc, #52]	; (801a2b4 <Mount_SD+0x4c>)
 801a280:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801a282:	4b0c      	ldr	r3, [pc, #48]	; (801a2b4 <Mount_SD+0x4c>)
 801a284:	781b      	ldrb	r3, [r3, #0]
 801a286:	2b00      	cmp	r3, #0
 801a288:	d006      	beq.n	801a298 <Mount_SD+0x30>
		if (sdioPrints)
 801a28a:	2300      	movs	r3, #0
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d009      	beq.n	801a2a4 <Mount_SD+0x3c>
			printf("ERROR!!! in mounting SD CARD...\n");
 801a290:	4809      	ldr	r0, [pc, #36]	; (801a2b8 <Mount_SD+0x50>)
 801a292:	f002 fc7b 	bl	801cb8c <puts>
 801a296:	e005      	b.n	801a2a4 <Mount_SD+0x3c>
	} else if (sdioPrints)
 801a298:	2300      	movs	r3, #0
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d002      	beq.n	801a2a4 <Mount_SD+0x3c>
		printf("SD CARD mounted successfully...\n");
 801a29e:	4807      	ldr	r0, [pc, #28]	; (801a2bc <Mount_SD+0x54>)
 801a2a0:	f002 fc74 	bl	801cb8c <puts>

	return fresult;
 801a2a4:	4b03      	ldr	r3, [pc, #12]	; (801a2b4 <Mount_SD+0x4c>)
 801a2a6:	781b      	ldrb	r3, [r3, #0]
}
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	3708      	adds	r7, #8
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd80      	pop	{r7, pc}
 801a2b0:	20001ce0 	.word	0x20001ce0
 801a2b4:	2000225c 	.word	0x2000225c
 801a2b8:	08021f10 	.word	0x08021f10
 801a2bc:	08021f30 	.word	0x08021f30

0801a2c0 <Unmount_SD>:

void Unmount_SD(const TCHAR *path) {
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b082      	sub	sp, #8
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 801a2c8:	2201      	movs	r2, #1
 801a2ca:	6879      	ldr	r1, [r7, #4]
 801a2cc:	2000      	movs	r0, #0
 801a2ce:	f7ff fa4f 	bl	8019770 <f_mount>
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	461a      	mov	r2, r3
 801a2d6:	4b0b      	ldr	r3, [pc, #44]	; (801a304 <Unmount_SD+0x44>)
 801a2d8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801a2da:	4b0a      	ldr	r3, [pc, #40]	; (801a304 <Unmount_SD+0x44>)
 801a2dc:	781b      	ldrb	r3, [r3, #0]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d106      	bne.n	801a2f0 <Unmount_SD+0x30>
		if (sdioPrints)
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d009      	beq.n	801a2fc <Unmount_SD+0x3c>
			printf("SD CARD UNMOUNTED successfully...\n\n");
 801a2e8:	4807      	ldr	r0, [pc, #28]	; (801a308 <Unmount_SD+0x48>)
 801a2ea:	f002 fc4f 	bl	801cb8c <puts>
	} else if (sdioPrints)
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 801a2ee:	e005      	b.n	801a2fc <Unmount_SD+0x3c>
	} else if (sdioPrints)
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d002      	beq.n	801a2fc <Unmount_SD+0x3c>
		printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 801a2f6:	4805      	ldr	r0, [pc, #20]	; (801a30c <Unmount_SD+0x4c>)
 801a2f8:	f002 fc48 	bl	801cb8c <puts>
}
 801a2fc:	bf00      	nop
 801a2fe:	3708      	adds	r7, #8
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}
 801a304:	2000225c 	.word	0x2000225c
 801a308:	08021f50 	.word	0x08021f50
 801a30c:	08021f74 	.word	0x08021f74

0801a310 <Create_File>:
		}
		return fresult;
	}
}

FRESULT Create_File(char *name) {
 801a310:	b580      	push	{r7, lr}
 801a312:	b0a8      	sub	sp, #160	; 0xa0
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
	char buf[150];
	fresult = f_stat(name, &fno);
 801a318:	4941      	ldr	r1, [pc, #260]	; (801a420 <Create_File+0x110>)
 801a31a:	6878      	ldr	r0, [r7, #4]
 801a31c:	f7ff fe49 	bl	8019fb2 <f_stat>
 801a320:	4603      	mov	r3, r0
 801a322:	461a      	mov	r2, r3
 801a324:	4b3f      	ldr	r3, [pc, #252]	; (801a424 <Create_File+0x114>)
 801a326:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 801a328:	4b3e      	ldr	r3, [pc, #248]	; (801a424 <Create_File+0x114>)
 801a32a:	781b      	ldrb	r3, [r3, #0]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d114      	bne.n	801a35a <Create_File+0x4a>
		file_already_exist = 1; //file is alrready there so now we dont create csv header
 801a330:	4b3d      	ldr	r3, [pc, #244]	; (801a428 <Create_File+0x118>)
 801a332:	2201      	movs	r2, #1
 801a334:	701a      	strb	r2, [r3, #0]

		sprintf(buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",
 801a336:	f107 0308 	add.w	r3, r7, #8
 801a33a:	687a      	ldr	r2, [r7, #4]
 801a33c:	493b      	ldr	r1, [pc, #236]	; (801a42c <Create_File+0x11c>)
 801a33e:	4618      	mov	r0, r3
 801a340:	f002 fc42 	bl	801cbc8 <siprintf>
				name);
		if (sdioPrints)
 801a344:	2300      	movs	r3, #0
 801a346:	2b00      	cmp	r3, #0
 801a348:	d004      	beq.n	801a354 <Create_File+0x44>
			printf(buf);
 801a34a:	f107 0308 	add.w	r3, r7, #8
 801a34e:	4618      	mov	r0, r3
 801a350:	f002 fb96 	bl	801ca80 <iprintf>

		return fresult;
 801a354:	4b33      	ldr	r3, [pc, #204]	; (801a424 <Create_File+0x114>)
 801a356:	781b      	ldrb	r3, [r3, #0]
 801a358:	e05d      	b.n	801a416 <Create_File+0x106>
	} else {
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 801a35a:	220b      	movs	r2, #11
 801a35c:	6879      	ldr	r1, [r7, #4]
 801a35e:	4834      	ldr	r0, [pc, #208]	; (801a430 <Create_File+0x120>)
 801a360:	f7ff fa4c 	bl	80197fc <f_open>
 801a364:	4603      	mov	r3, r0
 801a366:	461a      	mov	r2, r3
 801a368:	4b2e      	ldr	r3, [pc, #184]	; (801a424 <Create_File+0x114>)
 801a36a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a36c:	4b2d      	ldr	r3, [pc, #180]	; (801a424 <Create_File+0x114>)
 801a36e:	781b      	ldrb	r3, [r3, #0]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d013      	beq.n	801a39c <Create_File+0x8c>

			sprintf(buf, "ERROR!!! No. %d in creating file *%s*\n", fresult,
 801a374:	4b2b      	ldr	r3, [pc, #172]	; (801a424 <Create_File+0x114>)
 801a376:	781b      	ldrb	r3, [r3, #0]
 801a378:	461a      	mov	r2, r3
 801a37a:	f107 0008 	add.w	r0, r7, #8
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	492c      	ldr	r1, [pc, #176]	; (801a434 <Create_File+0x124>)
 801a382:	f002 fc21 	bl	801cbc8 <siprintf>
					name);
			if (sdioPrints)
 801a386:	2300      	movs	r3, #0
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d004      	beq.n	801a396 <Create_File+0x86>
				printf(buf);
 801a38c:	f107 0308 	add.w	r3, r7, #8
 801a390:	4618      	mov	r0, r3
 801a392:	f002 fb75 	bl	801ca80 <iprintf>

			return fresult;
 801a396:	4b23      	ldr	r3, [pc, #140]	; (801a424 <Create_File+0x114>)
 801a398:	781b      	ldrb	r3, [r3, #0]
 801a39a:	e03c      	b.n	801a416 <Create_File+0x106>
		} else {

			sprintf(buf,
 801a39c:	f107 0308 	add.w	r3, r7, #8
 801a3a0:	687a      	ldr	r2, [r7, #4]
 801a3a2:	4925      	ldr	r1, [pc, #148]	; (801a438 <Create_File+0x128>)
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	f002 fc0f 	bl	801cbc8 <siprintf>
					"*%s* created successfully\n Now use Write_File to write data\n",
					name);
			if (sdioPrints)
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d004      	beq.n	801a3ba <Create_File+0xaa>
				printf(buf);
 801a3b0:	f107 0308 	add.w	r3, r7, #8
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	f002 fb63 	bl	801ca80 <iprintf>

		}

		fresult = f_close(&fil);
 801a3ba:	481d      	ldr	r0, [pc, #116]	; (801a430 <Create_File+0x120>)
 801a3bc:	f7ff fdcf 	bl	8019f5e <f_close>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	461a      	mov	r2, r3
 801a3c4:	4b17      	ldr	r3, [pc, #92]	; (801a424 <Create_File+0x114>)
 801a3c6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a3c8:	4b16      	ldr	r3, [pc, #88]	; (801a424 <Create_File+0x114>)
 801a3ca:	781b      	ldrb	r3, [r3, #0]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d011      	beq.n	801a3f4 <Create_File+0xe4>

			sprintf(buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 801a3d0:	4b14      	ldr	r3, [pc, #80]	; (801a424 <Create_File+0x114>)
 801a3d2:	781b      	ldrb	r3, [r3, #0]
 801a3d4:	461a      	mov	r2, r3
 801a3d6:	f107 0008 	add.w	r0, r7, #8
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	4917      	ldr	r1, [pc, #92]	; (801a43c <Create_File+0x12c>)
 801a3de:	f002 fbf3 	bl	801cbc8 <siprintf>
			if (sdioPrints)
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d014      	beq.n	801a412 <Create_File+0x102>
				printf(buf);
 801a3e8:	f107 0308 	add.w	r3, r7, #8
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	f002 fb47 	bl	801ca80 <iprintf>
 801a3f2:	e00e      	b.n	801a412 <Create_File+0x102>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801a3f4:	f107 0308 	add.w	r3, r7, #8
 801a3f8:	687a      	ldr	r2, [r7, #4]
 801a3fa:	4911      	ldr	r1, [pc, #68]	; (801a440 <Create_File+0x130>)
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	f002 fbe3 	bl	801cbc8 <siprintf>
			if (sdioPrints)
 801a402:	2300      	movs	r3, #0
 801a404:	2b00      	cmp	r3, #0
 801a406:	d004      	beq.n	801a412 <Create_File+0x102>
				printf(buf);
 801a408:	f107 0308 	add.w	r3, r7, #8
 801a40c:	4618      	mov	r0, r3
 801a40e:	f002 fb37 	bl	801ca80 <iprintf>

		}
	}
	return fresult;
 801a412:	4b04      	ldr	r3, [pc, #16]	; (801a424 <Create_File+0x114>)
 801a414:	781b      	ldrb	r3, [r3, #0]
}
 801a416:	4618      	mov	r0, r3
 801a418:	37a0      	adds	r7, #160	; 0xa0
 801a41a:	46bd      	mov	sp, r7
 801a41c:	bd80      	pop	{r7, pc}
 801a41e:	bf00      	nop
 801a420:	20002144 	.word	0x20002144
 801a424:	2000225c 	.word	0x2000225c
 801a428:	20002330 	.word	0x20002330
 801a42c:	08022138 	.word	0x08022138
 801a430:	20001f14 	.word	0x20001f14
 801a434:	0802216c 	.word	0x0802216c
 801a438:	08022194 	.word	0x08022194
 801a43c:	080221d4 	.word	0x080221d4
 801a440:	08022118 	.word	0x08022118

0801a444 <Update_File>:

FRESULT Update_File(char *name, char *data) {
 801a444:	b580      	push	{r7, lr}
 801a446:	b0a8      	sub	sp, #160	; 0xa0
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
 801a44c:	6039      	str	r1, [r7, #0]
	char buf[150];
	/**** check whether the file exists or not ****/
	fresult = f_stat(name, &fno);
 801a44e:	4951      	ldr	r1, [pc, #324]	; (801a594 <Update_File+0x150>)
 801a450:	6878      	ldr	r0, [r7, #4]
 801a452:	f7ff fdae 	bl	8019fb2 <f_stat>
 801a456:	4603      	mov	r3, r0
 801a458:	461a      	mov	r2, r3
 801a45a:	4b4f      	ldr	r3, [pc, #316]	; (801a598 <Update_File+0x154>)
 801a45c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 801a45e:	4b4e      	ldr	r3, [pc, #312]	; (801a598 <Update_File+0x154>)
 801a460:	781b      	ldrb	r3, [r3, #0]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d011      	beq.n	801a48a <Update_File+0x46>

		sprintf(buf, "ERROR!!! *%s* does not exists\n", name);
 801a466:	f107 0308 	add.w	r3, r7, #8
 801a46a:	687a      	ldr	r2, [r7, #4]
 801a46c:	494b      	ldr	r1, [pc, #300]	; (801a59c <Update_File+0x158>)
 801a46e:	4618      	mov	r0, r3
 801a470:	f002 fbaa 	bl	801cbc8 <siprintf>
		if (sdioPrints)
 801a474:	2300      	movs	r3, #0
 801a476:	2b00      	cmp	r3, #0
 801a478:	d004      	beq.n	801a484 <Update_File+0x40>
			printf(buf);
 801a47a:	f107 0308 	add.w	r3, r7, #8
 801a47e:	4618      	mov	r0, r3
 801a480:	f002 fafe 	bl	801ca80 <iprintf>

		return fresult;
 801a484:	4b44      	ldr	r3, [pc, #272]	; (801a598 <Update_File+0x154>)
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	e080      	b.n	801a58c <Update_File+0x148>
	}

	else {
		/* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 801a48a:	2232      	movs	r2, #50	; 0x32
 801a48c:	6879      	ldr	r1, [r7, #4]
 801a48e:	4844      	ldr	r0, [pc, #272]	; (801a5a0 <Update_File+0x15c>)
 801a490:	f7ff f9b4 	bl	80197fc <f_open>
 801a494:	4603      	mov	r3, r0
 801a496:	461a      	mov	r2, r3
 801a498:	4b3f      	ldr	r3, [pc, #252]	; (801a598 <Update_File+0x154>)
 801a49a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a49c:	4b3e      	ldr	r3, [pc, #248]	; (801a598 <Update_File+0x154>)
 801a49e:	781b      	ldrb	r3, [r3, #0]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d013      	beq.n	801a4cc <Update_File+0x88>

			sprintf(buf, "ERROR!!! No. %d in opening file *%s*\n", fresult,
 801a4a4:	4b3c      	ldr	r3, [pc, #240]	; (801a598 <Update_File+0x154>)
 801a4a6:	781b      	ldrb	r3, [r3, #0]
 801a4a8:	461a      	mov	r2, r3
 801a4aa:	f107 0008 	add.w	r0, r7, #8
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	493c      	ldr	r1, [pc, #240]	; (801a5a4 <Update_File+0x160>)
 801a4b2:	f002 fb89 	bl	801cbc8 <siprintf>
					name);
			if (sdioPrints)
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d004      	beq.n	801a4c6 <Update_File+0x82>
				printf(buf);
 801a4bc:	f107 0308 	add.w	r3, r7, #8
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	f002 fadd 	bl	801ca80 <iprintf>

			return fresult;
 801a4c6:	4b34      	ldr	r3, [pc, #208]	; (801a598 <Update_File+0x154>)
 801a4c8:	781b      	ldrb	r3, [r3, #0]
 801a4ca:	e05f      	b.n	801a58c <Update_File+0x148>
		}

		/* Writing text */
		fresult = f_write(&fil, data, strlen(data), &bw);
 801a4cc:	6838      	ldr	r0, [r7, #0]
 801a4ce:	f7e5 fe91 	bl	80001f4 <strlen>
 801a4d2:	4602      	mov	r2, r0
 801a4d4:	4b34      	ldr	r3, [pc, #208]	; (801a5a8 <Update_File+0x164>)
 801a4d6:	6839      	ldr	r1, [r7, #0]
 801a4d8:	4831      	ldr	r0, [pc, #196]	; (801a5a0 <Update_File+0x15c>)
 801a4da:	f7ff fb4d 	bl	8019b78 <f_write>
 801a4de:	4603      	mov	r3, r0
 801a4e0:	461a      	mov	r2, r3
 801a4e2:	4b2d      	ldr	r3, [pc, #180]	; (801a598 <Update_File+0x154>)
 801a4e4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a4e6:	4b2c      	ldr	r3, [pc, #176]	; (801a598 <Update_File+0x154>)
 801a4e8:	781b      	ldrb	r3, [r3, #0]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d011      	beq.n	801a512 <Update_File+0xce>

			sprintf(buf, "ERROR!!! No. %d in writing file *%s*\n", fresult,
 801a4ee:	4b2a      	ldr	r3, [pc, #168]	; (801a598 <Update_File+0x154>)
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	461a      	mov	r2, r3
 801a4f4:	f107 0008 	add.w	r0, r7, #8
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	492c      	ldr	r1, [pc, #176]	; (801a5ac <Update_File+0x168>)
 801a4fc:	f002 fb64 	bl	801cbc8 <siprintf>
					name);
			if (sdioPrints)
 801a500:	2300      	movs	r3, #0
 801a502:	2b00      	cmp	r3, #0
 801a504:	d014      	beq.n	801a530 <Update_File+0xec>
				printf(buf);
 801a506:	f107 0308 	add.w	r3, r7, #8
 801a50a:	4618      	mov	r0, r3
 801a50c:	f002 fab8 	bl	801ca80 <iprintf>
 801a510:	e00e      	b.n	801a530 <Update_File+0xec>

		}

		else {

			sprintf(buf, "*%s* UPDATED successfully\n", name);
 801a512:	f107 0308 	add.w	r3, r7, #8
 801a516:	687a      	ldr	r2, [r7, #4]
 801a518:	4925      	ldr	r1, [pc, #148]	; (801a5b0 <Update_File+0x16c>)
 801a51a:	4618      	mov	r0, r3
 801a51c:	f002 fb54 	bl	801cbc8 <siprintf>
			if (sdioPrints)
 801a520:	2300      	movs	r3, #0
 801a522:	2b00      	cmp	r3, #0
 801a524:	d004      	beq.n	801a530 <Update_File+0xec>
				printf(buf);
 801a526:	f107 0308 	add.w	r3, r7, #8
 801a52a:	4618      	mov	r0, r3
 801a52c:	f002 faa8 	bl	801ca80 <iprintf>

		}

		/* Close file */
		fresult = f_close(&fil);
 801a530:	481b      	ldr	r0, [pc, #108]	; (801a5a0 <Update_File+0x15c>)
 801a532:	f7ff fd14 	bl	8019f5e <f_close>
 801a536:	4603      	mov	r3, r0
 801a538:	461a      	mov	r2, r3
 801a53a:	4b17      	ldr	r3, [pc, #92]	; (801a598 <Update_File+0x154>)
 801a53c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK) {
 801a53e:	4b16      	ldr	r3, [pc, #88]	; (801a598 <Update_File+0x154>)
 801a540:	781b      	ldrb	r3, [r3, #0]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d011      	beq.n	801a56a <Update_File+0x126>

			sprintf(buf, "ERROR!!! No. %d in closing file *%s*\n", fresult,
 801a546:	4b14      	ldr	r3, [pc, #80]	; (801a598 <Update_File+0x154>)
 801a548:	781b      	ldrb	r3, [r3, #0]
 801a54a:	461a      	mov	r2, r3
 801a54c:	f107 0008 	add.w	r0, r7, #8
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	4918      	ldr	r1, [pc, #96]	; (801a5b4 <Update_File+0x170>)
 801a554:	f002 fb38 	bl	801cbc8 <siprintf>
					name);
			if (sdioPrints)
 801a558:	2300      	movs	r3, #0
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d014      	beq.n	801a588 <Update_File+0x144>
				printf(buf);
 801a55e:	f107 0308 	add.w	r3, r7, #8
 801a562:	4618      	mov	r0, r3
 801a564:	f002 fa8c 	bl	801ca80 <iprintf>
 801a568:	e00e      	b.n	801a588 <Update_File+0x144>

		} else {

			sprintf(buf, "File *%s* CLOSED successfully\n", name);
 801a56a:	f107 0308 	add.w	r3, r7, #8
 801a56e:	687a      	ldr	r2, [r7, #4]
 801a570:	4911      	ldr	r1, [pc, #68]	; (801a5b8 <Update_File+0x174>)
 801a572:	4618      	mov	r0, r3
 801a574:	f002 fb28 	bl	801cbc8 <siprintf>
			if (sdioPrints)
 801a578:	2300      	movs	r3, #0
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d004      	beq.n	801a588 <Update_File+0x144>
				printf(buf);
 801a57e:	f107 0308 	add.w	r3, r7, #8
 801a582:	4618      	mov	r0, r3
 801a584:	f002 fa7c 	bl	801ca80 <iprintf>

		}
	}
	return fresult;
 801a588:	4b03      	ldr	r3, [pc, #12]	; (801a598 <Update_File+0x154>)
 801a58a:	781b      	ldrb	r3, [r3, #0]
}
 801a58c:	4618      	mov	r0, r3
 801a58e:	37a0      	adds	r7, #160	; 0xa0
 801a590:	46bd      	mov	sp, r7
 801a592:	bd80      	pop	{r7, pc}
 801a594:	20002144 	.word	0x20002144
 801a598:	2000225c 	.word	0x2000225c
 801a59c:	08021fc8 	.word	0x08021fc8
 801a5a0:	20001f14 	.word	0x20001f14
 801a5a4:	08021fe8 	.word	0x08021fe8
 801a5a8:	20002260 	.word	0x20002260
 801a5ac:	080221f8 	.word	0x080221f8
 801a5b0:	08022220 	.word	0x08022220
 801a5b4:	080220f0 	.word	0x080220f0
 801a5b8:	08022118 	.word	0x08022118

0801a5bc <json_update>:
uint8_t fileWrite_sec = 0;

uint8_t datawritten = 0;
char buffer[255];

void json_update() {
 801a5bc:	b580      	push	{r7, lr}
 801a5be:	b088      	sub	sp, #32
 801a5c0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a5c2:	f107 0314 	add.w	r3, r7, #20
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	4619      	mov	r1, r3
 801a5ca:	48ae      	ldr	r0, [pc, #696]	; (801a884 <json_update+0x2c8>)
 801a5cc:	f7ee fea6 	bl	800931c <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a5d0:	463b      	mov	r3, r7
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	4619      	mov	r1, r3
 801a5d6:	48ab      	ldr	r0, [pc, #684]	; (801a884 <json_update+0x2c8>)
 801a5d8:	f7ee fdbe 	bl	8009158 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801a5dc:	7dba      	ldrb	r2, [r7, #22]
 801a5de:	4baa      	ldr	r3, [pc, #680]	; (801a888 <json_update+0x2cc>)
 801a5e0:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801a5e2:	7d7a      	ldrb	r2, [r7, #21]
 801a5e4:	4ba9      	ldr	r3, [pc, #676]	; (801a88c <json_update+0x2d0>)
 801a5e6:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801a5e8:	7dfa      	ldrb	r2, [r7, #23]
 801a5ea:	4ba9      	ldr	r3, [pc, #676]	; (801a890 <json_update+0x2d4>)
 801a5ec:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801a5ee:	783a      	ldrb	r2, [r7, #0]
 801a5f0:	4ba8      	ldr	r3, [pc, #672]	; (801a894 <json_update+0x2d8>)
 801a5f2:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801a5f4:	787a      	ldrb	r2, [r7, #1]
 801a5f6:	4ba8      	ldr	r3, [pc, #672]	; (801a898 <json_update+0x2dc>)
 801a5f8:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801a5fa:	78ba      	ldrb	r2, [r7, #2]
 801a5fc:	4ba7      	ldr	r3, [pc, #668]	; (801a89c <json_update+0x2e0>)
 801a5fe:	701a      	strb	r2, [r3, #0]

	fresult1 = Mount_SD("/");
 801a600:	48a7      	ldr	r0, [pc, #668]	; (801a8a0 <json_update+0x2e4>)
 801a602:	f7ff fe31 	bl	801a268 <Mount_SD>
 801a606:	4603      	mov	r3, r0
 801a608:	461a      	mov	r2, r3
 801a60a:	4ba6      	ldr	r3, [pc, #664]	; (801a8a4 <json_update+0x2e8>)
 801a60c:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a60e:	4ba5      	ldr	r3, [pc, #660]	; (801a8a4 <json_update+0x2e8>)
 801a610:	781b      	ldrb	r3, [r3, #0]
 801a612:	2b00      	cmp	r3, #0
 801a614:	f040 812b 	bne.w	801a86e <json_update+0x2b2>
		//CAN Bus
		sprintf(buffer, "{\n");
 801a618:	49a3      	ldr	r1, [pc, #652]	; (801a8a8 <json_update+0x2ec>)
 801a61a:	48a4      	ldr	r0, [pc, #656]	; (801a8ac <json_update+0x2f0>)
 801a61c:	f002 fad4 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a620:	49a2      	ldr	r1, [pc, #648]	; (801a8ac <json_update+0x2f0>)
 801a622:	48a3      	ldr	r0, [pc, #652]	; (801a8b0 <json_update+0x2f4>)
 801a624:	f7ff ff0e 	bl	801a444 <Update_File>
 801a628:	4603      	mov	r3, r0
 801a62a:	461a      	mov	r2, r3
 801a62c:	4b9d      	ldr	r3, [pc, #628]	; (801a8a4 <json_update+0x2e8>)
 801a62e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a630:	22ff      	movs	r2, #255	; 0xff
 801a632:	2100      	movs	r1, #0
 801a634:	489d      	ldr	r0, [pc, #628]	; (801a8ac <json_update+0x2f0>)
 801a636:	f001 fac1 	bl	801bbbc <memset>
		sprintf(buffer, "\"devEUI\":\"%s\",\n", ver_GetUid());
 801a63a:	f7e7 fe8d 	bl	8002358 <ver_GetUid>
 801a63e:	4603      	mov	r3, r0
 801a640:	461a      	mov	r2, r3
 801a642:	499c      	ldr	r1, [pc, #624]	; (801a8b4 <json_update+0x2f8>)
 801a644:	4899      	ldr	r0, [pc, #612]	; (801a8ac <json_update+0x2f0>)
 801a646:	f002 fabf 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a64a:	4998      	ldr	r1, [pc, #608]	; (801a8ac <json_update+0x2f0>)
 801a64c:	4898      	ldr	r0, [pc, #608]	; (801a8b0 <json_update+0x2f4>)
 801a64e:	f7ff fef9 	bl	801a444 <Update_File>
 801a652:	4603      	mov	r3, r0
 801a654:	461a      	mov	r2, r3
 801a656:	4b93      	ldr	r3, [pc, #588]	; (801a8a4 <json_update+0x2e8>)
 801a658:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a65a:	22ff      	movs	r2, #255	; 0xff
 801a65c:	2100      	movs	r1, #0
 801a65e:	4893      	ldr	r0, [pc, #588]	; (801a8ac <json_update+0x2f0>)
 801a660:	f001 faac 	bl	801bbbc <memset>
		sprintf(buffer, "\"id\":\"%s\",\n", _Flash_Packet.id);
 801a664:	4a94      	ldr	r2, [pc, #592]	; (801a8b8 <json_update+0x2fc>)
 801a666:	4995      	ldr	r1, [pc, #596]	; (801a8bc <json_update+0x300>)
 801a668:	4890      	ldr	r0, [pc, #576]	; (801a8ac <json_update+0x2f0>)
 801a66a:	f002 faad 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a66e:	498f      	ldr	r1, [pc, #572]	; (801a8ac <json_update+0x2f0>)
 801a670:	488f      	ldr	r0, [pc, #572]	; (801a8b0 <json_update+0x2f4>)
 801a672:	f7ff fee7 	bl	801a444 <Update_File>
 801a676:	4603      	mov	r3, r0
 801a678:	461a      	mov	r2, r3
 801a67a:	4b8a      	ldr	r3, [pc, #552]	; (801a8a4 <json_update+0x2e8>)
 801a67c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a67e:	22ff      	movs	r2, #255	; 0xff
 801a680:	2100      	movs	r1, #0
 801a682:	488a      	ldr	r0, [pc, #552]	; (801a8ac <json_update+0x2f0>)
 801a684:	f001 fa9a 	bl	801bbbc <memset>
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a688:	783b      	ldrb	r3, [r7, #0]
 801a68a:	461a      	mov	r2, r3
				sTime.Minutes, sTime.Seconds);
 801a68c:	787b      	ldrb	r3, [r7, #1]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a68e:	4619      	mov	r1, r3
				sTime.Minutes, sTime.Seconds);
 801a690:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "\"timestamp\":\"%02d:%02d:%02d\",\n", sTime.Hours,
 801a692:	9300      	str	r3, [sp, #0]
 801a694:	460b      	mov	r3, r1
 801a696:	498a      	ldr	r1, [pc, #552]	; (801a8c0 <json_update+0x304>)
 801a698:	4884      	ldr	r0, [pc, #528]	; (801a8ac <json_update+0x2f0>)
 801a69a:	f002 fa95 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a69e:	4983      	ldr	r1, [pc, #524]	; (801a8ac <json_update+0x2f0>)
 801a6a0:	4883      	ldr	r0, [pc, #524]	; (801a8b0 <json_update+0x2f4>)
 801a6a2:	f7ff fecf 	bl	801a444 <Update_File>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	461a      	mov	r2, r3
 801a6aa:	4b7e      	ldr	r3, [pc, #504]	; (801a8a4 <json_update+0x2e8>)
 801a6ac:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a6ae:	22ff      	movs	r2, #255	; 0xff
 801a6b0:	2100      	movs	r1, #0
 801a6b2:	487e      	ldr	r0, [pc, #504]	; (801a8ac <json_update+0x2f0>)
 801a6b4:	f001 fa82 	bl	801bbbc <memset>
		sprintf(buffer, "\"location\":\"%s\",\n", _Flash_Packet.location);
 801a6b8:	4a82      	ldr	r2, [pc, #520]	; (801a8c4 <json_update+0x308>)
 801a6ba:	4983      	ldr	r1, [pc, #524]	; (801a8c8 <json_update+0x30c>)
 801a6bc:	487b      	ldr	r0, [pc, #492]	; (801a8ac <json_update+0x2f0>)
 801a6be:	f002 fa83 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a6c2:	497a      	ldr	r1, [pc, #488]	; (801a8ac <json_update+0x2f0>)
 801a6c4:	487a      	ldr	r0, [pc, #488]	; (801a8b0 <json_update+0x2f4>)
 801a6c6:	f7ff febd 	bl	801a444 <Update_File>
 801a6ca:	4603      	mov	r3, r0
 801a6cc:	461a      	mov	r2, r3
 801a6ce:	4b75      	ldr	r3, [pc, #468]	; (801a8a4 <json_update+0x2e8>)
 801a6d0:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a6d2:	22ff      	movs	r2, #255	; 0xff
 801a6d4:	2100      	movs	r1, #0
 801a6d6:	4875      	ldr	r0, [pc, #468]	; (801a8ac <json_update+0x2f0>)
 801a6d8:	f001 fa70 	bl	801bbbc <memset>
		sprintf(buffer, "\"Filename\":\"%s\",\n", filename_ver_date);
 801a6dc:	4a7b      	ldr	r2, [pc, #492]	; (801a8cc <json_update+0x310>)
 801a6de:	497c      	ldr	r1, [pc, #496]	; (801a8d0 <json_update+0x314>)
 801a6e0:	4872      	ldr	r0, [pc, #456]	; (801a8ac <json_update+0x2f0>)
 801a6e2:	f002 fa71 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a6e6:	4971      	ldr	r1, [pc, #452]	; (801a8ac <json_update+0x2f0>)
 801a6e8:	4871      	ldr	r0, [pc, #452]	; (801a8b0 <json_update+0x2f4>)
 801a6ea:	f7ff feab 	bl	801a444 <Update_File>
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	461a      	mov	r2, r3
 801a6f2:	4b6c      	ldr	r3, [pc, #432]	; (801a8a4 <json_update+0x2e8>)
 801a6f4:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a6f6:	22ff      	movs	r2, #255	; 0xff
 801a6f8:	2100      	movs	r1, #0
 801a6fa:	486c      	ldr	r0, [pc, #432]	; (801a8ac <json_update+0x2f0>)
 801a6fc:	f001 fa5e 	bl	801bbbc <memset>
		sprintf(buffer, "\"group\":\"%s\",\n", _Flash_Packet.group);
 801a700:	4a74      	ldr	r2, [pc, #464]	; (801a8d4 <json_update+0x318>)
 801a702:	4975      	ldr	r1, [pc, #468]	; (801a8d8 <json_update+0x31c>)
 801a704:	4869      	ldr	r0, [pc, #420]	; (801a8ac <json_update+0x2f0>)
 801a706:	f002 fa5f 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a70a:	4968      	ldr	r1, [pc, #416]	; (801a8ac <json_update+0x2f0>)
 801a70c:	4868      	ldr	r0, [pc, #416]	; (801a8b0 <json_update+0x2f4>)
 801a70e:	f7ff fe99 	bl	801a444 <Update_File>
 801a712:	4603      	mov	r3, r0
 801a714:	461a      	mov	r2, r3
 801a716:	4b63      	ldr	r3, [pc, #396]	; (801a8a4 <json_update+0x2e8>)
 801a718:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a71a:	22ff      	movs	r2, #255	; 0xff
 801a71c:	2100      	movs	r1, #0
 801a71e:	4863      	ldr	r0, [pc, #396]	; (801a8ac <json_update+0x2f0>)
 801a720:	f001 fa4c 	bl	801bbbc <memset>
		sprintf(buffer, "\"co2\":\"%d\",\n", _RunTime_Packet.co2);
 801a724:	4b6d      	ldr	r3, [pc, #436]	; (801a8dc <json_update+0x320>)
 801a726:	881b      	ldrh	r3, [r3, #0]
 801a728:	461a      	mov	r2, r3
 801a72a:	496d      	ldr	r1, [pc, #436]	; (801a8e0 <json_update+0x324>)
 801a72c:	485f      	ldr	r0, [pc, #380]	; (801a8ac <json_update+0x2f0>)
 801a72e:	f002 fa4b 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a732:	495e      	ldr	r1, [pc, #376]	; (801a8ac <json_update+0x2f0>)
 801a734:	485e      	ldr	r0, [pc, #376]	; (801a8b0 <json_update+0x2f4>)
 801a736:	f7ff fe85 	bl	801a444 <Update_File>
 801a73a:	4603      	mov	r3, r0
 801a73c:	461a      	mov	r2, r3
 801a73e:	4b59      	ldr	r3, [pc, #356]	; (801a8a4 <json_update+0x2e8>)
 801a740:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a742:	22ff      	movs	r2, #255	; 0xff
 801a744:	2100      	movs	r1, #0
 801a746:	4859      	ldr	r0, [pc, #356]	; (801a8ac <json_update+0x2f0>)
 801a748:	f001 fa38 	bl	801bbbc <memset>
		sprintf(buffer, "\"temperature\":\"%ld\",\n",
 801a74c:	4b63      	ldr	r3, [pc, #396]	; (801a8dc <json_update+0x320>)
 801a74e:	685b      	ldr	r3, [r3, #4]
 801a750:	461a      	mov	r2, r3
 801a752:	4964      	ldr	r1, [pc, #400]	; (801a8e4 <json_update+0x328>)
 801a754:	4855      	ldr	r0, [pc, #340]	; (801a8ac <json_update+0x2f0>)
 801a756:	f002 fa37 	bl	801cbc8 <siprintf>
				_RunTime_Packet.temperature);
		fresult1 = Update_File(filename_with_format, buffer);
 801a75a:	4954      	ldr	r1, [pc, #336]	; (801a8ac <json_update+0x2f0>)
 801a75c:	4854      	ldr	r0, [pc, #336]	; (801a8b0 <json_update+0x2f4>)
 801a75e:	f7ff fe71 	bl	801a444 <Update_File>
 801a762:	4603      	mov	r3, r0
 801a764:	461a      	mov	r2, r3
 801a766:	4b4f      	ldr	r3, [pc, #316]	; (801a8a4 <json_update+0x2e8>)
 801a768:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a76a:	22ff      	movs	r2, #255	; 0xff
 801a76c:	2100      	movs	r1, #0
 801a76e:	484f      	ldr	r0, [pc, #316]	; (801a8ac <json_update+0x2f0>)
 801a770:	f001 fa24 	bl	801bbbc <memset>
		sprintf(buffer, "\"humidity\":\"%ld\",\n", _RunTime_Packet.humidity);
 801a774:	4b59      	ldr	r3, [pc, #356]	; (801a8dc <json_update+0x320>)
 801a776:	689b      	ldr	r3, [r3, #8]
 801a778:	461a      	mov	r2, r3
 801a77a:	495b      	ldr	r1, [pc, #364]	; (801a8e8 <json_update+0x32c>)
 801a77c:	484b      	ldr	r0, [pc, #300]	; (801a8ac <json_update+0x2f0>)
 801a77e:	f002 fa23 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a782:	494a      	ldr	r1, [pc, #296]	; (801a8ac <json_update+0x2f0>)
 801a784:	484a      	ldr	r0, [pc, #296]	; (801a8b0 <json_update+0x2f4>)
 801a786:	f7ff fe5d 	bl	801a444 <Update_File>
 801a78a:	4603      	mov	r3, r0
 801a78c:	461a      	mov	r2, r3
 801a78e:	4b45      	ldr	r3, [pc, #276]	; (801a8a4 <json_update+0x2e8>)
 801a790:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a792:	22ff      	movs	r2, #255	; 0xff
 801a794:	2100      	movs	r1, #0
 801a796:	4845      	ldr	r0, [pc, #276]	; (801a8ac <json_update+0x2f0>)
 801a798:	f001 fa10 	bl	801bbbc <memset>
		sprintf(buffer, "\"pir\":\"%s\",\n",
				_RunTime_Packet.motion_detection ? "TRUE" : "FALSE");
 801a79c:	4b4f      	ldr	r3, [pc, #316]	; (801a8dc <json_update+0x320>)
 801a79e:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "\"pir\":\"%s\",\n",
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d001      	beq.n	801a7a8 <json_update+0x1ec>
 801a7a4:	4b51      	ldr	r3, [pc, #324]	; (801a8ec <json_update+0x330>)
 801a7a6:	e000      	b.n	801a7aa <json_update+0x1ee>
 801a7a8:	4b51      	ldr	r3, [pc, #324]	; (801a8f0 <json_update+0x334>)
 801a7aa:	461a      	mov	r2, r3
 801a7ac:	4951      	ldr	r1, [pc, #324]	; (801a8f4 <json_update+0x338>)
 801a7ae:	483f      	ldr	r0, [pc, #252]	; (801a8ac <json_update+0x2f0>)
 801a7b0:	f002 fa0a 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a7b4:	493d      	ldr	r1, [pc, #244]	; (801a8ac <json_update+0x2f0>)
 801a7b6:	483e      	ldr	r0, [pc, #248]	; (801a8b0 <json_update+0x2f4>)
 801a7b8:	f7ff fe44 	bl	801a444 <Update_File>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	461a      	mov	r2, r3
 801a7c0:	4b38      	ldr	r3, [pc, #224]	; (801a8a4 <json_update+0x2e8>)
 801a7c2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a7c4:	22ff      	movs	r2, #255	; 0xff
 801a7c6:	2100      	movs	r1, #0
 801a7c8:	4838      	ldr	r0, [pc, #224]	; (801a8ac <json_update+0x2f0>)
 801a7ca:	f001 f9f7 	bl	801bbbc <memset>
		sprintf(buffer, "\"pm2.5\":\"%.02f\",\n", _RunTime_Packet.pm2_5);
 801a7ce:	4b43      	ldr	r3, [pc, #268]	; (801a8dc <json_update+0x320>)
 801a7d0:	695b      	ldr	r3, [r3, #20]
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f7e5 fed0 	bl	8000578 <__aeabi_f2d>
 801a7d8:	4602      	mov	r2, r0
 801a7da:	460b      	mov	r3, r1
 801a7dc:	4946      	ldr	r1, [pc, #280]	; (801a8f8 <json_update+0x33c>)
 801a7de:	4833      	ldr	r0, [pc, #204]	; (801a8ac <json_update+0x2f0>)
 801a7e0:	f002 f9f2 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a7e4:	4931      	ldr	r1, [pc, #196]	; (801a8ac <json_update+0x2f0>)
 801a7e6:	4832      	ldr	r0, [pc, #200]	; (801a8b0 <json_update+0x2f4>)
 801a7e8:	f7ff fe2c 	bl	801a444 <Update_File>
 801a7ec:	4603      	mov	r3, r0
 801a7ee:	461a      	mov	r2, r3
 801a7f0:	4b2c      	ldr	r3, [pc, #176]	; (801a8a4 <json_update+0x2e8>)
 801a7f2:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a7f4:	22ff      	movs	r2, #255	; 0xff
 801a7f6:	2100      	movs	r1, #0
 801a7f8:	482c      	ldr	r0, [pc, #176]	; (801a8ac <json_update+0x2f0>)
 801a7fa:	f001 f9df 	bl	801bbbc <memset>
		sprintf(buffer, "\"port\":\"none\",\n");
 801a7fe:	493f      	ldr	r1, [pc, #252]	; (801a8fc <json_update+0x340>)
 801a800:	482a      	ldr	r0, [pc, #168]	; (801a8ac <json_update+0x2f0>)
 801a802:	f002 f9e1 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a806:	4929      	ldr	r1, [pc, #164]	; (801a8ac <json_update+0x2f0>)
 801a808:	4829      	ldr	r0, [pc, #164]	; (801a8b0 <json_update+0x2f4>)
 801a80a:	f7ff fe1b 	bl	801a444 <Update_File>
 801a80e:	4603      	mov	r3, r0
 801a810:	461a      	mov	r2, r3
 801a812:	4b24      	ldr	r3, [pc, #144]	; (801a8a4 <json_update+0x2e8>)
 801a814:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a816:	22ff      	movs	r2, #255	; 0xff
 801a818:	2100      	movs	r1, #0
 801a81a:	4824      	ldr	r0, [pc, #144]	; (801a8ac <json_update+0x2f0>)
 801a81c:	f001 f9ce 	bl	801bbbc <memset>
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
				_RunTime_Packet.battery_voltage);
 801a820:	4b2e      	ldr	r3, [pc, #184]	; (801a8dc <json_update+0x320>)
 801a822:	6a1b      	ldr	r3, [r3, #32]
		sprintf(buffer, "\"battery\":\"%.02f\",\n",
 801a824:	4618      	mov	r0, r3
 801a826:	f7e5 fea7 	bl	8000578 <__aeabi_f2d>
 801a82a:	4602      	mov	r2, r0
 801a82c:	460b      	mov	r3, r1
 801a82e:	4934      	ldr	r1, [pc, #208]	; (801a900 <json_update+0x344>)
 801a830:	481e      	ldr	r0, [pc, #120]	; (801a8ac <json_update+0x2f0>)
 801a832:	f002 f9c9 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a836:	491d      	ldr	r1, [pc, #116]	; (801a8ac <json_update+0x2f0>)
 801a838:	481d      	ldr	r0, [pc, #116]	; (801a8b0 <json_update+0x2f4>)
 801a83a:	f7ff fe03 	bl	801a444 <Update_File>
 801a83e:	4603      	mov	r3, r0
 801a840:	461a      	mov	r2, r3
 801a842:	4b18      	ldr	r3, [pc, #96]	; (801a8a4 <json_update+0x2e8>)
 801a844:	701a      	strb	r2, [r3, #0]

		//we end it
		memset(buffer, 0, sizeof(buffer));
 801a846:	22ff      	movs	r2, #255	; 0xff
 801a848:	2100      	movs	r1, #0
 801a84a:	4818      	ldr	r0, [pc, #96]	; (801a8ac <json_update+0x2f0>)
 801a84c:	f001 f9b6 	bl	801bbbc <memset>
		sprintf(buffer, "}\n\n");
 801a850:	492c      	ldr	r1, [pc, #176]	; (801a904 <json_update+0x348>)
 801a852:	4816      	ldr	r0, [pc, #88]	; (801a8ac <json_update+0x2f0>)
 801a854:	f002 f9b8 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a858:	4914      	ldr	r1, [pc, #80]	; (801a8ac <json_update+0x2f0>)
 801a85a:	4815      	ldr	r0, [pc, #84]	; (801a8b0 <json_update+0x2f4>)
 801a85c:	f7ff fdf2 	bl	801a444 <Update_File>
 801a860:	4603      	mov	r3, r0
 801a862:	461a      	mov	r2, r3
 801a864:	4b0f      	ldr	r3, [pc, #60]	; (801a8a4 <json_update+0x2e8>)
 801a866:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801a868:	480d      	ldr	r0, [pc, #52]	; (801a8a0 <json_update+0x2e4>)
 801a86a:	f7ff fd29 	bl	801a2c0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801a86e:	4b0d      	ldr	r3, [pc, #52]	; (801a8a4 <json_update+0x2e8>)
 801a870:	781b      	ldrb	r3, [r3, #0]
 801a872:	b25a      	sxtb	r2, r3
 801a874:	4b19      	ldr	r3, [pc, #100]	; (801a8dc <json_update+0x320>)
 801a876:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 801a87a:	bf00      	nop
 801a87c:	3718      	adds	r7, #24
 801a87e:	46bd      	mov	sp, r7
 801a880:	bd80      	pop	{r7, pc}
 801a882:	bf00      	nop
 801a884:	200017e4 	.word	0x200017e4
 801a888:	20002331 	.word	0x20002331
 801a88c:	20002332 	.word	0x20002332
 801a890:	20002333 	.word	0x20002333
 801a894:	20002334 	.word	0x20002334
 801a898:	20002335 	.word	0x20002335
 801a89c:	20002336 	.word	0x20002336
 801a8a0:	0802230c 	.word	0x0802230c
 801a8a4:	20002264 	.word	0x20002264
 801a8a8:	08022310 	.word	0x08022310
 801a8ac:	20002338 	.word	0x20002338
 801a8b0:	20002268 	.word	0x20002268
 801a8b4:	08022314 	.word	0x08022314
 801a8b8:	200013c9 	.word	0x200013c9
 801a8bc:	08022324 	.word	0x08022324
 801a8c0:	08022330 	.word	0x08022330
 801a8c4:	200013fb 	.word	0x200013fb
 801a8c8:	08022350 	.word	0x08022350
 801a8cc:	200022cc 	.word	0x200022cc
 801a8d0:	08022364 	.word	0x08022364
 801a8d4:	2000145f 	.word	0x2000145f
 801a8d8:	08022378 	.word	0x08022378
 801a8dc:	20001494 	.word	0x20001494
 801a8e0:	08022388 	.word	0x08022388
 801a8e4:	08022398 	.word	0x08022398
 801a8e8:	080223b0 	.word	0x080223b0
 801a8ec:	080223c4 	.word	0x080223c4
 801a8f0:	080223cc 	.word	0x080223cc
 801a8f4:	080223d4 	.word	0x080223d4
 801a8f8:	080223e4 	.word	0x080223e4
 801a8fc:	080223f8 	.word	0x080223f8
 801a900:	08022408 	.word	0x08022408
 801a904:	0802241c 	.word	0x0802241c

0801a908 <csv_update>:
void csv_update() {
 801a908:	b580      	push	{r7, lr}
 801a90a:	b088      	sub	sp, #32
 801a90c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801a90e:	f107 0314 	add.w	r3, r7, #20
 801a912:	2200      	movs	r2, #0
 801a914:	4619      	mov	r1, r3
 801a916:	48a5      	ldr	r0, [pc, #660]	; (801abac <csv_update+0x2a4>)
 801a918:	f7ee fd00 	bl	800931c <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801a91c:	463b      	mov	r3, r7
 801a91e:	2200      	movs	r2, #0
 801a920:	4619      	mov	r1, r3
 801a922:	48a2      	ldr	r0, [pc, #648]	; (801abac <csv_update+0x2a4>)
 801a924:	f7ee fc18 	bl	8009158 <HAL_RTC_GetTime>
	fileWrite_day = sDate.Date;
 801a928:	7dba      	ldrb	r2, [r7, #22]
 801a92a:	4ba1      	ldr	r3, [pc, #644]	; (801abb0 <csv_update+0x2a8>)
 801a92c:	701a      	strb	r2, [r3, #0]
	fileWrite_month = sDate.Month;
 801a92e:	7d7a      	ldrb	r2, [r7, #21]
 801a930:	4ba0      	ldr	r3, [pc, #640]	; (801abb4 <csv_update+0x2ac>)
 801a932:	701a      	strb	r2, [r3, #0]
	fileWrite_year = sDate.Year;
 801a934:	7dfa      	ldrb	r2, [r7, #23]
 801a936:	4ba0      	ldr	r3, [pc, #640]	; (801abb8 <csv_update+0x2b0>)
 801a938:	701a      	strb	r2, [r3, #0]
	fileWrite_hour = sTime.Hours;
 801a93a:	783a      	ldrb	r2, [r7, #0]
 801a93c:	4b9f      	ldr	r3, [pc, #636]	; (801abbc <csv_update+0x2b4>)
 801a93e:	701a      	strb	r2, [r3, #0]
	fileWrite_min = sTime.Minutes;
 801a940:	787a      	ldrb	r2, [r7, #1]
 801a942:	4b9f      	ldr	r3, [pc, #636]	; (801abc0 <csv_update+0x2b8>)
 801a944:	701a      	strb	r2, [r3, #0]
	fileWrite_sec = sTime.Seconds;
 801a946:	78ba      	ldrb	r2, [r7, #2]
 801a948:	4b9e      	ldr	r3, [pc, #632]	; (801abc4 <csv_update+0x2bc>)
 801a94a:	701a      	strb	r2, [r3, #0]
	fresult1 = Mount_SD("/");
 801a94c:	489e      	ldr	r0, [pc, #632]	; (801abc8 <csv_update+0x2c0>)
 801a94e:	f7ff fc8b 	bl	801a268 <Mount_SD>
 801a952:	4603      	mov	r3, r0
 801a954:	461a      	mov	r2, r3
 801a956:	4b9d      	ldr	r3, [pc, #628]	; (801abcc <csv_update+0x2c4>)
 801a958:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801a95a:	4b9c      	ldr	r3, [pc, #624]	; (801abcc <csv_update+0x2c4>)
 801a95c:	781b      	ldrb	r3, [r3, #0]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	f040 811a 	bne.w	801ab98 <csv_update+0x290>
//				_RunTime_Packet.pm2_5, _RunTime_Packet.battery_voltage);
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, "\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "%s ,", ver_GetUid());
 801a964:	f7e7 fcf8 	bl	8002358 <ver_GetUid>
 801a968:	4603      	mov	r3, r0
 801a96a:	461a      	mov	r2, r3
 801a96c:	4998      	ldr	r1, [pc, #608]	; (801abd0 <csv_update+0x2c8>)
 801a96e:	4899      	ldr	r0, [pc, #612]	; (801abd4 <csv_update+0x2cc>)
 801a970:	f002 f92a 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a974:	4997      	ldr	r1, [pc, #604]	; (801abd4 <csv_update+0x2cc>)
 801a976:	4898      	ldr	r0, [pc, #608]	; (801abd8 <csv_update+0x2d0>)
 801a978:	f7ff fd64 	bl	801a444 <Update_File>
 801a97c:	4603      	mov	r3, r0
 801a97e:	461a      	mov	r2, r3
 801a980:	4b92      	ldr	r3, [pc, #584]	; (801abcc <csv_update+0x2c4>)
 801a982:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a984:	22ff      	movs	r2, #255	; 0xff
 801a986:	2100      	movs	r1, #0
 801a988:	4892      	ldr	r0, [pc, #584]	; (801abd4 <csv_update+0x2cc>)
 801a98a:	f001 f917 	bl	801bbbc <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.id);
 801a98e:	4a93      	ldr	r2, [pc, #588]	; (801abdc <csv_update+0x2d4>)
 801a990:	498f      	ldr	r1, [pc, #572]	; (801abd0 <csv_update+0x2c8>)
 801a992:	4890      	ldr	r0, [pc, #576]	; (801abd4 <csv_update+0x2cc>)
 801a994:	f002 f918 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a998:	498e      	ldr	r1, [pc, #568]	; (801abd4 <csv_update+0x2cc>)
 801a99a:	488f      	ldr	r0, [pc, #572]	; (801abd8 <csv_update+0x2d0>)
 801a99c:	f7ff fd52 	bl	801a444 <Update_File>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	461a      	mov	r2, r3
 801a9a4:	4b89      	ldr	r3, [pc, #548]	; (801abcc <csv_update+0x2c4>)
 801a9a6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a9a8:	22ff      	movs	r2, #255	; 0xff
 801a9aa:	2100      	movs	r1, #0
 801a9ac:	4889      	ldr	r0, [pc, #548]	; (801abd4 <csv_update+0x2cc>)
 801a9ae:	f001 f905 	bl	801bbbc <memset>
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801a9b2:	783b      	ldrb	r3, [r7, #0]
 801a9b4:	461a      	mov	r2, r3
 801a9b6:	787b      	ldrb	r3, [r7, #1]
 801a9b8:	4619      	mov	r1, r3
				sTime.Seconds);
 801a9ba:	78bb      	ldrb	r3, [r7, #2]
		sprintf(buffer, "%02d:%02d:%02d ,", sTime.Hours, sTime.Minutes,
 801a9bc:	9300      	str	r3, [sp, #0]
 801a9be:	460b      	mov	r3, r1
 801a9c0:	4987      	ldr	r1, [pc, #540]	; (801abe0 <csv_update+0x2d8>)
 801a9c2:	4884      	ldr	r0, [pc, #528]	; (801abd4 <csv_update+0x2cc>)
 801a9c4:	f002 f900 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a9c8:	4982      	ldr	r1, [pc, #520]	; (801abd4 <csv_update+0x2cc>)
 801a9ca:	4883      	ldr	r0, [pc, #524]	; (801abd8 <csv_update+0x2d0>)
 801a9cc:	f7ff fd3a 	bl	801a444 <Update_File>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	461a      	mov	r2, r3
 801a9d4:	4b7d      	ldr	r3, [pc, #500]	; (801abcc <csv_update+0x2c4>)
 801a9d6:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a9d8:	22ff      	movs	r2, #255	; 0xff
 801a9da:	2100      	movs	r1, #0
 801a9dc:	487d      	ldr	r0, [pc, #500]	; (801abd4 <csv_update+0x2cc>)
 801a9de:	f001 f8ed 	bl	801bbbc <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.location);
 801a9e2:	4a80      	ldr	r2, [pc, #512]	; (801abe4 <csv_update+0x2dc>)
 801a9e4:	497a      	ldr	r1, [pc, #488]	; (801abd0 <csv_update+0x2c8>)
 801a9e6:	487b      	ldr	r0, [pc, #492]	; (801abd4 <csv_update+0x2cc>)
 801a9e8:	f002 f8ee 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801a9ec:	4979      	ldr	r1, [pc, #484]	; (801abd4 <csv_update+0x2cc>)
 801a9ee:	487a      	ldr	r0, [pc, #488]	; (801abd8 <csv_update+0x2d0>)
 801a9f0:	f7ff fd28 	bl	801a444 <Update_File>
 801a9f4:	4603      	mov	r3, r0
 801a9f6:	461a      	mov	r2, r3
 801a9f8:	4b74      	ldr	r3, [pc, #464]	; (801abcc <csv_update+0x2c4>)
 801a9fa:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801a9fc:	22ff      	movs	r2, #255	; 0xff
 801a9fe:	2100      	movs	r1, #0
 801aa00:	4874      	ldr	r0, [pc, #464]	; (801abd4 <csv_update+0x2cc>)
 801aa02:	f001 f8db 	bl	801bbbc <memset>
		sprintf(buffer, "%s ,", filename_ver_date);
 801aa06:	4a78      	ldr	r2, [pc, #480]	; (801abe8 <csv_update+0x2e0>)
 801aa08:	4971      	ldr	r1, [pc, #452]	; (801abd0 <csv_update+0x2c8>)
 801aa0a:	4872      	ldr	r0, [pc, #456]	; (801abd4 <csv_update+0x2cc>)
 801aa0c:	f002 f8dc 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa10:	4970      	ldr	r1, [pc, #448]	; (801abd4 <csv_update+0x2cc>)
 801aa12:	4871      	ldr	r0, [pc, #452]	; (801abd8 <csv_update+0x2d0>)
 801aa14:	f7ff fd16 	bl	801a444 <Update_File>
 801aa18:	4603      	mov	r3, r0
 801aa1a:	461a      	mov	r2, r3
 801aa1c:	4b6b      	ldr	r3, [pc, #428]	; (801abcc <csv_update+0x2c4>)
 801aa1e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa20:	22ff      	movs	r2, #255	; 0xff
 801aa22:	2100      	movs	r1, #0
 801aa24:	486b      	ldr	r0, [pc, #428]	; (801abd4 <csv_update+0x2cc>)
 801aa26:	f001 f8c9 	bl	801bbbc <memset>
		sprintf(buffer, "%s ,", _Flash_Packet.group);
 801aa2a:	4a70      	ldr	r2, [pc, #448]	; (801abec <csv_update+0x2e4>)
 801aa2c:	4968      	ldr	r1, [pc, #416]	; (801abd0 <csv_update+0x2c8>)
 801aa2e:	4869      	ldr	r0, [pc, #420]	; (801abd4 <csv_update+0x2cc>)
 801aa30:	f002 f8ca 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa34:	4967      	ldr	r1, [pc, #412]	; (801abd4 <csv_update+0x2cc>)
 801aa36:	4868      	ldr	r0, [pc, #416]	; (801abd8 <csv_update+0x2d0>)
 801aa38:	f7ff fd04 	bl	801a444 <Update_File>
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	461a      	mov	r2, r3
 801aa40:	4b62      	ldr	r3, [pc, #392]	; (801abcc <csv_update+0x2c4>)
 801aa42:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa44:	22ff      	movs	r2, #255	; 0xff
 801aa46:	2100      	movs	r1, #0
 801aa48:	4862      	ldr	r0, [pc, #392]	; (801abd4 <csv_update+0x2cc>)
 801aa4a:	f001 f8b7 	bl	801bbbc <memset>
		sprintf(buffer, "%d ,", _RunTime_Packet.co2);
 801aa4e:	4b68      	ldr	r3, [pc, #416]	; (801abf0 <csv_update+0x2e8>)
 801aa50:	881b      	ldrh	r3, [r3, #0]
 801aa52:	461a      	mov	r2, r3
 801aa54:	4967      	ldr	r1, [pc, #412]	; (801abf4 <csv_update+0x2ec>)
 801aa56:	485f      	ldr	r0, [pc, #380]	; (801abd4 <csv_update+0x2cc>)
 801aa58:	f002 f8b6 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa5c:	495d      	ldr	r1, [pc, #372]	; (801abd4 <csv_update+0x2cc>)
 801aa5e:	485e      	ldr	r0, [pc, #376]	; (801abd8 <csv_update+0x2d0>)
 801aa60:	f7ff fcf0 	bl	801a444 <Update_File>
 801aa64:	4603      	mov	r3, r0
 801aa66:	461a      	mov	r2, r3
 801aa68:	4b58      	ldr	r3, [pc, #352]	; (801abcc <csv_update+0x2c4>)
 801aa6a:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa6c:	22ff      	movs	r2, #255	; 0xff
 801aa6e:	2100      	movs	r1, #0
 801aa70:	4858      	ldr	r0, [pc, #352]	; (801abd4 <csv_update+0x2cc>)
 801aa72:	f001 f8a3 	bl	801bbbc <memset>
		sprintf(buffer, "%ld ,", _RunTime_Packet.temperature);
 801aa76:	4b5e      	ldr	r3, [pc, #376]	; (801abf0 <csv_update+0x2e8>)
 801aa78:	685b      	ldr	r3, [r3, #4]
 801aa7a:	461a      	mov	r2, r3
 801aa7c:	495e      	ldr	r1, [pc, #376]	; (801abf8 <csv_update+0x2f0>)
 801aa7e:	4855      	ldr	r0, [pc, #340]	; (801abd4 <csv_update+0x2cc>)
 801aa80:	f002 f8a2 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aa84:	4953      	ldr	r1, [pc, #332]	; (801abd4 <csv_update+0x2cc>)
 801aa86:	4854      	ldr	r0, [pc, #336]	; (801abd8 <csv_update+0x2d0>)
 801aa88:	f7ff fcdc 	bl	801a444 <Update_File>
 801aa8c:	4603      	mov	r3, r0
 801aa8e:	461a      	mov	r2, r3
 801aa90:	4b4e      	ldr	r3, [pc, #312]	; (801abcc <csv_update+0x2c4>)
 801aa92:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aa94:	22ff      	movs	r2, #255	; 0xff
 801aa96:	2100      	movs	r1, #0
 801aa98:	484e      	ldr	r0, [pc, #312]	; (801abd4 <csv_update+0x2cc>)
 801aa9a:	f001 f88f 	bl	801bbbc <memset>
		sprintf(buffer, "%ld ,", _RunTime_Packet.humidity);
 801aa9e:	4b54      	ldr	r3, [pc, #336]	; (801abf0 <csv_update+0x2e8>)
 801aaa0:	689b      	ldr	r3, [r3, #8]
 801aaa2:	461a      	mov	r2, r3
 801aaa4:	4954      	ldr	r1, [pc, #336]	; (801abf8 <csv_update+0x2f0>)
 801aaa6:	484b      	ldr	r0, [pc, #300]	; (801abd4 <csv_update+0x2cc>)
 801aaa8:	f002 f88e 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aaac:	4949      	ldr	r1, [pc, #292]	; (801abd4 <csv_update+0x2cc>)
 801aaae:	484a      	ldr	r0, [pc, #296]	; (801abd8 <csv_update+0x2d0>)
 801aab0:	f7ff fcc8 	bl	801a444 <Update_File>
 801aab4:	4603      	mov	r3, r0
 801aab6:	461a      	mov	r2, r3
 801aab8:	4b44      	ldr	r3, [pc, #272]	; (801abcc <csv_update+0x2c4>)
 801aaba:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aabc:	22ff      	movs	r2, #255	; 0xff
 801aabe:	2100      	movs	r1, #0
 801aac0:	4844      	ldr	r0, [pc, #272]	; (801abd4 <csv_update+0x2cc>)
 801aac2:	f001 f87b 	bl	801bbbc <memset>
		sprintf(buffer, "%s ,",
				_RunTime_Packet.motion_detection == 1 ? "TRUE" : "FALSE");
 801aac6:	4b4a      	ldr	r3, [pc, #296]	; (801abf0 <csv_update+0x2e8>)
 801aac8:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buffer, "%s ,",
 801aaca:	2b01      	cmp	r3, #1
 801aacc:	d101      	bne.n	801aad2 <csv_update+0x1ca>
 801aace:	4b4b      	ldr	r3, [pc, #300]	; (801abfc <csv_update+0x2f4>)
 801aad0:	e000      	b.n	801aad4 <csv_update+0x1cc>
 801aad2:	4b4b      	ldr	r3, [pc, #300]	; (801ac00 <csv_update+0x2f8>)
 801aad4:	461a      	mov	r2, r3
 801aad6:	493e      	ldr	r1, [pc, #248]	; (801abd0 <csv_update+0x2c8>)
 801aad8:	483e      	ldr	r0, [pc, #248]	; (801abd4 <csv_update+0x2cc>)
 801aada:	f002 f875 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801aade:	493d      	ldr	r1, [pc, #244]	; (801abd4 <csv_update+0x2cc>)
 801aae0:	483d      	ldr	r0, [pc, #244]	; (801abd8 <csv_update+0x2d0>)
 801aae2:	f7ff fcaf 	bl	801a444 <Update_File>
 801aae6:	4603      	mov	r3, r0
 801aae8:	461a      	mov	r2, r3
 801aaea:	4b38      	ldr	r3, [pc, #224]	; (801abcc <csv_update+0x2c4>)
 801aaec:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801aaee:	22ff      	movs	r2, #255	; 0xff
 801aaf0:	2100      	movs	r1, #0
 801aaf2:	4838      	ldr	r0, [pc, #224]	; (801abd4 <csv_update+0x2cc>)
 801aaf4:	f001 f862 	bl	801bbbc <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.pm2_5);
 801aaf8:	4b3d      	ldr	r3, [pc, #244]	; (801abf0 <csv_update+0x2e8>)
 801aafa:	695b      	ldr	r3, [r3, #20]
 801aafc:	4618      	mov	r0, r3
 801aafe:	f7e5 fd3b 	bl	8000578 <__aeabi_f2d>
 801ab02:	4602      	mov	r2, r0
 801ab04:	460b      	mov	r3, r1
 801ab06:	493f      	ldr	r1, [pc, #252]	; (801ac04 <csv_update+0x2fc>)
 801ab08:	4832      	ldr	r0, [pc, #200]	; (801abd4 <csv_update+0x2cc>)
 801ab0a:	f002 f85d 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab0e:	4931      	ldr	r1, [pc, #196]	; (801abd4 <csv_update+0x2cc>)
 801ab10:	4831      	ldr	r0, [pc, #196]	; (801abd8 <csv_update+0x2d0>)
 801ab12:	f7ff fc97 	bl	801a444 <Update_File>
 801ab16:	4603      	mov	r3, r0
 801ab18:	461a      	mov	r2, r3
 801ab1a:	4b2c      	ldr	r3, [pc, #176]	; (801abcc <csv_update+0x2c4>)
 801ab1c:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab1e:	22ff      	movs	r2, #255	; 0xff
 801ab20:	2100      	movs	r1, #0
 801ab22:	482c      	ldr	r0, [pc, #176]	; (801abd4 <csv_update+0x2cc>)
 801ab24:	f001 f84a 	bl	801bbbc <memset>
		sprintf(buffer, "NONE ,");
 801ab28:	4937      	ldr	r1, [pc, #220]	; (801ac08 <csv_update+0x300>)
 801ab2a:	482a      	ldr	r0, [pc, #168]	; (801abd4 <csv_update+0x2cc>)
 801ab2c:	f002 f84c 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab30:	4928      	ldr	r1, [pc, #160]	; (801abd4 <csv_update+0x2cc>)
 801ab32:	4829      	ldr	r0, [pc, #164]	; (801abd8 <csv_update+0x2d0>)
 801ab34:	f7ff fc86 	bl	801a444 <Update_File>
 801ab38:	4603      	mov	r3, r0
 801ab3a:	461a      	mov	r2, r3
 801ab3c:	4b23      	ldr	r3, [pc, #140]	; (801abcc <csv_update+0x2c4>)
 801ab3e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab40:	22ff      	movs	r2, #255	; 0xff
 801ab42:	2100      	movs	r1, #0
 801ab44:	4823      	ldr	r0, [pc, #140]	; (801abd4 <csv_update+0x2cc>)
 801ab46:	f001 f839 	bl	801bbbc <memset>
		sprintf(buffer, "%.02f ,", _RunTime_Packet.battery_voltage);
 801ab4a:	4b29      	ldr	r3, [pc, #164]	; (801abf0 <csv_update+0x2e8>)
 801ab4c:	6a1b      	ldr	r3, [r3, #32]
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f7e5 fd12 	bl	8000578 <__aeabi_f2d>
 801ab54:	4602      	mov	r2, r0
 801ab56:	460b      	mov	r3, r1
 801ab58:	492a      	ldr	r1, [pc, #168]	; (801ac04 <csv_update+0x2fc>)
 801ab5a:	481e      	ldr	r0, [pc, #120]	; (801abd4 <csv_update+0x2cc>)
 801ab5c:	f002 f834 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab60:	491c      	ldr	r1, [pc, #112]	; (801abd4 <csv_update+0x2cc>)
 801ab62:	481d      	ldr	r0, [pc, #116]	; (801abd8 <csv_update+0x2d0>)
 801ab64:	f7ff fc6e 	bl	801a444 <Update_File>
 801ab68:	4603      	mov	r3, r0
 801ab6a:	461a      	mov	r2, r3
 801ab6c:	4b17      	ldr	r3, [pc, #92]	; (801abcc <csv_update+0x2c4>)
 801ab6e:	701a      	strb	r2, [r3, #0]

		memset(buffer, 0, sizeof(buffer));
 801ab70:	22ff      	movs	r2, #255	; 0xff
 801ab72:	2100      	movs	r1, #0
 801ab74:	4817      	ldr	r0, [pc, #92]	; (801abd4 <csv_update+0x2cc>)
 801ab76:	f001 f821 	bl	801bbbc <memset>
		sprintf(buffer, "\n");
 801ab7a:	4924      	ldr	r1, [pc, #144]	; (801ac0c <csv_update+0x304>)
 801ab7c:	4815      	ldr	r0, [pc, #84]	; (801abd4 <csv_update+0x2cc>)
 801ab7e:	f002 f823 	bl	801cbc8 <siprintf>
		fresult1 = Update_File(filename_with_format, buffer);
 801ab82:	4914      	ldr	r1, [pc, #80]	; (801abd4 <csv_update+0x2cc>)
 801ab84:	4814      	ldr	r0, [pc, #80]	; (801abd8 <csv_update+0x2d0>)
 801ab86:	f7ff fc5d 	bl	801a444 <Update_File>
 801ab8a:	4603      	mov	r3, r0
 801ab8c:	461a      	mov	r2, r3
 801ab8e:	4b0f      	ldr	r3, [pc, #60]	; (801abcc <csv_update+0x2c4>)
 801ab90:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801ab92:	480d      	ldr	r0, [pc, #52]	; (801abc8 <csv_update+0x2c0>)
 801ab94:	f7ff fb94 	bl	801a2c0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801ab98:	4b0c      	ldr	r3, [pc, #48]	; (801abcc <csv_update+0x2c4>)
 801ab9a:	781b      	ldrb	r3, [r3, #0]
 801ab9c:	b25a      	sxtb	r2, r3
 801ab9e:	4b14      	ldr	r3, [pc, #80]	; (801abf0 <csv_update+0x2e8>)
 801aba0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 801aba4:	bf00      	nop
 801aba6:	3718      	adds	r7, #24
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}
 801abac:	200017e4 	.word	0x200017e4
 801abb0:	20002331 	.word	0x20002331
 801abb4:	20002332 	.word	0x20002332
 801abb8:	20002333 	.word	0x20002333
 801abbc:	20002334 	.word	0x20002334
 801abc0:	20002335 	.word	0x20002335
 801abc4:	20002336 	.word	0x20002336
 801abc8:	0802230c 	.word	0x0802230c
 801abcc:	20002264 	.word	0x20002264
 801abd0:	08022420 	.word	0x08022420
 801abd4:	20002338 	.word	0x20002338
 801abd8:	20002268 	.word	0x20002268
 801abdc:	200013c9 	.word	0x200013c9
 801abe0:	08022428 	.word	0x08022428
 801abe4:	200013fb 	.word	0x200013fb
 801abe8:	200022cc 	.word	0x200022cc
 801abec:	2000145f 	.word	0x2000145f
 801abf0:	20001494 	.word	0x20001494
 801abf4:	0802243c 	.word	0x0802243c
 801abf8:	08022444 	.word	0x08022444
 801abfc:	080223c4 	.word	0x080223c4
 801ac00:	080223cc 	.word	0x080223cc
 801ac04:	0802244c 	.word	0x0802244c
 801ac08:	08022454 	.word	0x08022454
 801ac0c:	0802245c 	.word	0x0802245c

0801ac10 <csv_header>:
void csv_header() {
 801ac10:	b580      	push	{r7, lr}
 801ac12:	af00      	add	r7, sp, #0

	fresult1 = Mount_SD("/");
 801ac14:	485d      	ldr	r0, [pc, #372]	; (801ad8c <csv_header+0x17c>)
 801ac16:	f7ff fb27 	bl	801a268 <Mount_SD>
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	461a      	mov	r2, r3
 801ac1e:	4b5c      	ldr	r3, [pc, #368]	; (801ad90 <csv_header+0x180>)
 801ac20:	701a      	strb	r2, [r3, #0]

	if (fresult1 == FR_OK) {
 801ac22:	4b5b      	ldr	r3, [pc, #364]	; (801ad90 <csv_header+0x180>)
 801ac24:	781b      	ldrb	r3, [r3, #0]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	f040 80a7 	bne.w	801ad7a <csv_header+0x16a>
//		sprintf(buffer, " co2 , temperature , humidity ,");
//		Update_File(filename_with_format, buffer);
//		sprintf(buffer, " pir , pm2.5 , port ,battery\n\n");
//		Update_File(filename_with_format, buffer);

		sprintf(buffer, "devEUI ,");
 801ac2c:	4959      	ldr	r1, [pc, #356]	; (801ad94 <csv_header+0x184>)
 801ac2e:	485a      	ldr	r0, [pc, #360]	; (801ad98 <csv_header+0x188>)
 801ac30:	f001 ffca 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ac34:	4958      	ldr	r1, [pc, #352]	; (801ad98 <csv_header+0x188>)
 801ac36:	4859      	ldr	r0, [pc, #356]	; (801ad9c <csv_header+0x18c>)
 801ac38:	f7ff fc04 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ac3c:	22ff      	movs	r2, #255	; 0xff
 801ac3e:	2100      	movs	r1, #0
 801ac40:	4855      	ldr	r0, [pc, #340]	; (801ad98 <csv_header+0x188>)
 801ac42:	f000 ffbb 	bl	801bbbc <memset>
		sprintf(buffer, "id ,");
 801ac46:	4956      	ldr	r1, [pc, #344]	; (801ada0 <csv_header+0x190>)
 801ac48:	4853      	ldr	r0, [pc, #332]	; (801ad98 <csv_header+0x188>)
 801ac4a:	f001 ffbd 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ac4e:	4952      	ldr	r1, [pc, #328]	; (801ad98 <csv_header+0x188>)
 801ac50:	4852      	ldr	r0, [pc, #328]	; (801ad9c <csv_header+0x18c>)
 801ac52:	f7ff fbf7 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ac56:	22ff      	movs	r2, #255	; 0xff
 801ac58:	2100      	movs	r1, #0
 801ac5a:	484f      	ldr	r0, [pc, #316]	; (801ad98 <csv_header+0x188>)
 801ac5c:	f000 ffae 	bl	801bbbc <memset>
		sprintf(buffer, "timestamp ,");
 801ac60:	4950      	ldr	r1, [pc, #320]	; (801ada4 <csv_header+0x194>)
 801ac62:	484d      	ldr	r0, [pc, #308]	; (801ad98 <csv_header+0x188>)
 801ac64:	f001 ffb0 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ac68:	494b      	ldr	r1, [pc, #300]	; (801ad98 <csv_header+0x188>)
 801ac6a:	484c      	ldr	r0, [pc, #304]	; (801ad9c <csv_header+0x18c>)
 801ac6c:	f7ff fbea 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ac70:	22ff      	movs	r2, #255	; 0xff
 801ac72:	2100      	movs	r1, #0
 801ac74:	4848      	ldr	r0, [pc, #288]	; (801ad98 <csv_header+0x188>)
 801ac76:	f000 ffa1 	bl	801bbbc <memset>
		sprintf(buffer, "location ,");
 801ac7a:	494b      	ldr	r1, [pc, #300]	; (801ada8 <csv_header+0x198>)
 801ac7c:	4846      	ldr	r0, [pc, #280]	; (801ad98 <csv_header+0x188>)
 801ac7e:	f001 ffa3 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ac82:	4945      	ldr	r1, [pc, #276]	; (801ad98 <csv_header+0x188>)
 801ac84:	4845      	ldr	r0, [pc, #276]	; (801ad9c <csv_header+0x18c>)
 801ac86:	f7ff fbdd 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ac8a:	22ff      	movs	r2, #255	; 0xff
 801ac8c:	2100      	movs	r1, #0
 801ac8e:	4842      	ldr	r0, [pc, #264]	; (801ad98 <csv_header+0x188>)
 801ac90:	f000 ff94 	bl	801bbbc <memset>
		sprintf(buffer, "Filename ,");
 801ac94:	4945      	ldr	r1, [pc, #276]	; (801adac <csv_header+0x19c>)
 801ac96:	4840      	ldr	r0, [pc, #256]	; (801ad98 <csv_header+0x188>)
 801ac98:	f001 ff96 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ac9c:	493e      	ldr	r1, [pc, #248]	; (801ad98 <csv_header+0x188>)
 801ac9e:	483f      	ldr	r0, [pc, #252]	; (801ad9c <csv_header+0x18c>)
 801aca0:	f7ff fbd0 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801aca4:	22ff      	movs	r2, #255	; 0xff
 801aca6:	2100      	movs	r1, #0
 801aca8:	483b      	ldr	r0, [pc, #236]	; (801ad98 <csv_header+0x188>)
 801acaa:	f000 ff87 	bl	801bbbc <memset>
		sprintf(buffer, "group ,");
 801acae:	4940      	ldr	r1, [pc, #256]	; (801adb0 <csv_header+0x1a0>)
 801acb0:	4839      	ldr	r0, [pc, #228]	; (801ad98 <csv_header+0x188>)
 801acb2:	f001 ff89 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801acb6:	4938      	ldr	r1, [pc, #224]	; (801ad98 <csv_header+0x188>)
 801acb8:	4838      	ldr	r0, [pc, #224]	; (801ad9c <csv_header+0x18c>)
 801acba:	f7ff fbc3 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801acbe:	22ff      	movs	r2, #255	; 0xff
 801acc0:	2100      	movs	r1, #0
 801acc2:	4835      	ldr	r0, [pc, #212]	; (801ad98 <csv_header+0x188>)
 801acc4:	f000 ff7a 	bl	801bbbc <memset>
		sprintf(buffer, "co2 ,");
 801acc8:	493a      	ldr	r1, [pc, #232]	; (801adb4 <csv_header+0x1a4>)
 801acca:	4833      	ldr	r0, [pc, #204]	; (801ad98 <csv_header+0x188>)
 801accc:	f001 ff7c 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801acd0:	4931      	ldr	r1, [pc, #196]	; (801ad98 <csv_header+0x188>)
 801acd2:	4832      	ldr	r0, [pc, #200]	; (801ad9c <csv_header+0x18c>)
 801acd4:	f7ff fbb6 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801acd8:	22ff      	movs	r2, #255	; 0xff
 801acda:	2100      	movs	r1, #0
 801acdc:	482e      	ldr	r0, [pc, #184]	; (801ad98 <csv_header+0x188>)
 801acde:	f000 ff6d 	bl	801bbbc <memset>
		sprintf(buffer, "temperature ,");
 801ace2:	4935      	ldr	r1, [pc, #212]	; (801adb8 <csv_header+0x1a8>)
 801ace4:	482c      	ldr	r0, [pc, #176]	; (801ad98 <csv_header+0x188>)
 801ace6:	f001 ff6f 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801acea:	492b      	ldr	r1, [pc, #172]	; (801ad98 <csv_header+0x188>)
 801acec:	482b      	ldr	r0, [pc, #172]	; (801ad9c <csv_header+0x18c>)
 801acee:	f7ff fba9 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801acf2:	22ff      	movs	r2, #255	; 0xff
 801acf4:	2100      	movs	r1, #0
 801acf6:	4828      	ldr	r0, [pc, #160]	; (801ad98 <csv_header+0x188>)
 801acf8:	f000 ff60 	bl	801bbbc <memset>
		sprintf(buffer, "humidity ,");
 801acfc:	492f      	ldr	r1, [pc, #188]	; (801adbc <csv_header+0x1ac>)
 801acfe:	4826      	ldr	r0, [pc, #152]	; (801ad98 <csv_header+0x188>)
 801ad00:	f001 ff62 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ad04:	4924      	ldr	r1, [pc, #144]	; (801ad98 <csv_header+0x188>)
 801ad06:	4825      	ldr	r0, [pc, #148]	; (801ad9c <csv_header+0x18c>)
 801ad08:	f7ff fb9c 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ad0c:	22ff      	movs	r2, #255	; 0xff
 801ad0e:	2100      	movs	r1, #0
 801ad10:	4821      	ldr	r0, [pc, #132]	; (801ad98 <csv_header+0x188>)
 801ad12:	f000 ff53 	bl	801bbbc <memset>
		sprintf(buffer, "pir ,");
 801ad16:	492a      	ldr	r1, [pc, #168]	; (801adc0 <csv_header+0x1b0>)
 801ad18:	481f      	ldr	r0, [pc, #124]	; (801ad98 <csv_header+0x188>)
 801ad1a:	f001 ff55 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ad1e:	491e      	ldr	r1, [pc, #120]	; (801ad98 <csv_header+0x188>)
 801ad20:	481e      	ldr	r0, [pc, #120]	; (801ad9c <csv_header+0x18c>)
 801ad22:	f7ff fb8f 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ad26:	22ff      	movs	r2, #255	; 0xff
 801ad28:	2100      	movs	r1, #0
 801ad2a:	481b      	ldr	r0, [pc, #108]	; (801ad98 <csv_header+0x188>)
 801ad2c:	f000 ff46 	bl	801bbbc <memset>
		sprintf(buffer, "pm2.5 ,");
 801ad30:	4924      	ldr	r1, [pc, #144]	; (801adc4 <csv_header+0x1b4>)
 801ad32:	4819      	ldr	r0, [pc, #100]	; (801ad98 <csv_header+0x188>)
 801ad34:	f001 ff48 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ad38:	4917      	ldr	r1, [pc, #92]	; (801ad98 <csv_header+0x188>)
 801ad3a:	4818      	ldr	r0, [pc, #96]	; (801ad9c <csv_header+0x18c>)
 801ad3c:	f7ff fb82 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ad40:	22ff      	movs	r2, #255	; 0xff
 801ad42:	2100      	movs	r1, #0
 801ad44:	4814      	ldr	r0, [pc, #80]	; (801ad98 <csv_header+0x188>)
 801ad46:	f000 ff39 	bl	801bbbc <memset>
		sprintf(buffer, "port ,");
 801ad4a:	491f      	ldr	r1, [pc, #124]	; (801adc8 <csv_header+0x1b8>)
 801ad4c:	4812      	ldr	r0, [pc, #72]	; (801ad98 <csv_header+0x188>)
 801ad4e:	f001 ff3b 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ad52:	4911      	ldr	r1, [pc, #68]	; (801ad98 <csv_header+0x188>)
 801ad54:	4811      	ldr	r0, [pc, #68]	; (801ad9c <csv_header+0x18c>)
 801ad56:	f7ff fb75 	bl	801a444 <Update_File>

		memset(buffer, 0, sizeof(buffer));
 801ad5a:	22ff      	movs	r2, #255	; 0xff
 801ad5c:	2100      	movs	r1, #0
 801ad5e:	480e      	ldr	r0, [pc, #56]	; (801ad98 <csv_header+0x188>)
 801ad60:	f000 ff2c 	bl	801bbbc <memset>
		sprintf(buffer, "battery \n\n");
 801ad64:	4919      	ldr	r1, [pc, #100]	; (801adcc <csv_header+0x1bc>)
 801ad66:	480c      	ldr	r0, [pc, #48]	; (801ad98 <csv_header+0x188>)
 801ad68:	f001 ff2e 	bl	801cbc8 <siprintf>
		Update_File(filename_with_format, buffer);
 801ad6c:	490a      	ldr	r1, [pc, #40]	; (801ad98 <csv_header+0x188>)
 801ad6e:	480b      	ldr	r0, [pc, #44]	; (801ad9c <csv_header+0x18c>)
 801ad70:	f7ff fb68 	bl	801a444 <Update_File>

		Unmount_SD("/");
 801ad74:	4805      	ldr	r0, [pc, #20]	; (801ad8c <csv_header+0x17c>)
 801ad76:	f7ff faa3 	bl	801a2c0 <Unmount_SD>
	}
	_RunTime_Packet.sd_card_disk_write_error = fresult1;
 801ad7a:	4b05      	ldr	r3, [pc, #20]	; (801ad90 <csv_header+0x180>)
 801ad7c:	781b      	ldrb	r3, [r3, #0]
 801ad7e:	b25a      	sxtb	r2, r3
 801ad80:	4b13      	ldr	r3, [pc, #76]	; (801add0 <csv_header+0x1c0>)
 801ad82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

}
 801ad86:	bf00      	nop
 801ad88:	bd80      	pop	{r7, pc}
 801ad8a:	bf00      	nop
 801ad8c:	0802230c 	.word	0x0802230c
 801ad90:	20002264 	.word	0x20002264
 801ad94:	08022460 	.word	0x08022460
 801ad98:	20002338 	.word	0x20002338
 801ad9c:	20002268 	.word	0x20002268
 801ada0:	0802246c 	.word	0x0802246c
 801ada4:	08022474 	.word	0x08022474
 801ada8:	08022480 	.word	0x08022480
 801adac:	0802248c 	.word	0x0802248c
 801adb0:	08022498 	.word	0x08022498
 801adb4:	080224a0 	.word	0x080224a0
 801adb8:	080224a8 	.word	0x080224a8
 801adbc:	080224b8 	.word	0x080224b8
 801adc0:	080224c4 	.word	0x080224c4
 801adc4:	080224cc 	.word	0x080224cc
 801adc8:	080224d4 	.word	0x080224d4
 801adcc:	080224dc 	.word	0x080224dc
 801add0:	20001494 	.word	0x20001494

0801add4 <filesaving_process>:
uint8_t filesaving_process() {
 801add4:	b580      	push	{r7, lr}
 801add6:	af00      	add	r7, sp, #0
//	__disable_irq();

	memset(buffer, 0, sizeof(buffer));
 801add8:	22ff      	movs	r2, #255	; 0xff
 801adda:	2100      	movs	r1, #0
 801addc:	480f      	ldr	r0, [pc, #60]	; (801ae1c <filesaving_process+0x48>)
 801adde:	f000 feed 	bl	801bbbc <memset>
	if (_RunTime_Packet.fileformat_selection) {
 801ade2:	4b0f      	ldr	r3, [pc, #60]	; (801ae20 <filesaving_process+0x4c>)
 801ade4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d002      	beq.n	801adf2 <filesaving_process+0x1e>
		csv_update();
 801adec:	f7ff fd8c 	bl	801a908 <csv_update>
 801adf0:	e001      	b.n	801adf6 <filesaving_process+0x22>
	} else {
		json_update();
 801adf2:	f7ff fbe3 	bl	801a5bc <json_update>
	}

	if (_RunTime_Packet.sd_card_disk_write_error != 0) //means there is error
 801adf6:	4b0a      	ldr	r3, [pc, #40]	; (801ae20 <filesaving_process+0x4c>)
 801adf8:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d006      	beq.n	801ae0e <filesaving_process+0x3a>
			{
		//blink red so user can know
		blink_red();
 801ae00:	f7e7 f8ac 	bl	8001f5c <blink_red>
		datawritten = 2;
 801ae04:	4b07      	ldr	r3, [pc, #28]	; (801ae24 <filesaving_process+0x50>)
 801ae06:	2202      	movs	r2, #2
 801ae08:	701a      	strb	r2, [r3, #0]
		return 1; //not working
 801ae0a:	2301      	movs	r3, #1
 801ae0c:	e003      	b.n	801ae16 <filesaving_process+0x42>
	} else //packet written succesfully
	{
		datawritten = 1;
 801ae0e:	4b05      	ldr	r3, [pc, #20]	; (801ae24 <filesaving_process+0x50>)
 801ae10:	2201      	movs	r2, #1
 801ae12:	701a      	strb	r2, [r3, #0]
	}

	return 0; //all good
 801ae14:	2300      	movs	r3, #0
//	__enable_irq();
}
 801ae16:	4618      	mov	r0, r3
 801ae18:	bd80      	pop	{r7, pc}
 801ae1a:	bf00      	nop
 801ae1c:	20002338 	.word	0x20002338
 801ae20:	20001494 	.word	0x20001494
 801ae24:	20002337 	.word	0x20002337

0801ae28 <createfile>:
int8_t createfile(char *filename, char *fileformat) {
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b08c      	sub	sp, #48	; 0x30
 801ae2c:	af04      	add	r7, sp, #16
 801ae2e:	6078      	str	r0, [r7, #4]
 801ae30:	6039      	str	r1, [r7, #0]

	RTC_DateTypeDef sDate;
	HAL_RTC_GetDate(RTC_Handle, &sDate, RTC_FORMAT_BIN);
 801ae32:	f107 031c 	add.w	r3, r7, #28
 801ae36:	2200      	movs	r2, #0
 801ae38:	4619      	mov	r1, r3
 801ae3a:	482f      	ldr	r0, [pc, #188]	; (801aef8 <createfile+0xd0>)
 801ae3c:	f7ee fa6e 	bl	800931c <HAL_RTC_GetDate>
	RTC_TimeTypeDef sTime;
	HAL_RTC_GetTime(RTC_Handle, &sTime, RTC_FORMAT_BIN);
 801ae40:	f107 0308 	add.w	r3, r7, #8
 801ae44:	2200      	movs	r2, #0
 801ae46:	4619      	mov	r1, r3
 801ae48:	482b      	ldr	r0, [pc, #172]	; (801aef8 <createfile+0xd0>)
 801ae4a:	f7ee f985 	bl	8009158 <HAL_RTC_GetTime>

	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
			sDate.Year, sDate.Month, sDate.Date, fileformat);
 801ae4e:	7ffb      	ldrb	r3, [r7, #31]
	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801ae50:	4618      	mov	r0, r3
			sDate.Year, sDate.Month, sDate.Date, fileformat);
 801ae52:	7f7b      	ldrb	r3, [r7, #29]
	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801ae54:	461a      	mov	r2, r3
			sDate.Year, sDate.Month, sDate.Date, fileformat);
 801ae56:	7fbb      	ldrb	r3, [r7, #30]
	sprintf(filename_with_format, "%s_%02d-%02d-%02d%s", filename,
 801ae58:	4619      	mov	r1, r3
 801ae5a:	683b      	ldr	r3, [r7, #0]
 801ae5c:	9302      	str	r3, [sp, #8]
 801ae5e:	9101      	str	r1, [sp, #4]
 801ae60:	9200      	str	r2, [sp, #0]
 801ae62:	4603      	mov	r3, r0
 801ae64:	687a      	ldr	r2, [r7, #4]
 801ae66:	4925      	ldr	r1, [pc, #148]	; (801aefc <createfile+0xd4>)
 801ae68:	4825      	ldr	r0, [pc, #148]	; (801af00 <createfile+0xd8>)
 801ae6a:	f001 fead 	bl	801cbc8 <siprintf>

	sprintf(filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,
 801ae6e:	7ffb      	ldrb	r3, [r7, #31]
 801ae70:	4619      	mov	r1, r3
				sDate.Month, sDate.Date);
 801ae72:	7f7b      	ldrb	r3, [r7, #29]
 801ae74:	7fba      	ldrb	r2, [r7, #30]
	sprintf(filename_ver_date, "%s_%02d-%02d-%02d", filename, sDate.Year,
 801ae76:	9201      	str	r2, [sp, #4]
 801ae78:	9300      	str	r3, [sp, #0]
 801ae7a:	460b      	mov	r3, r1
 801ae7c:	687a      	ldr	r2, [r7, #4]
 801ae7e:	4921      	ldr	r1, [pc, #132]	; (801af04 <createfile+0xdc>)
 801ae80:	4821      	ldr	r0, [pc, #132]	; (801af08 <createfile+0xe0>)
 801ae82:	f001 fea1 	bl	801cbc8 <siprintf>


	//__disable_irq();
	if (Mount_SD("/") == FR_OK) {
 801ae86:	4821      	ldr	r0, [pc, #132]	; (801af0c <createfile+0xe4>)
 801ae88:	f7ff f9ee 	bl	801a268 <Mount_SD>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d002      	beq.n	801ae98 <createfile+0x70>
	} else {
		//	__enable_irq();
		return -1;
 801ae92:	f04f 33ff 	mov.w	r3, #4294967295
 801ae96:	e02b      	b.n	801aef0 <createfile+0xc8>
	}
	Unmount_SD("/");
 801ae98:	481c      	ldr	r0, [pc, #112]	; (801af0c <createfile+0xe4>)
 801ae9a:	f7ff fa11 	bl	801a2c0 <Unmount_SD>



	fresult1 = Mount_SD("/");
 801ae9e:	481b      	ldr	r0, [pc, #108]	; (801af0c <createfile+0xe4>)
 801aea0:	f7ff f9e2 	bl	801a268 <Mount_SD>
 801aea4:	4603      	mov	r3, r0
 801aea6:	461a      	mov	r2, r3
 801aea8:	4b19      	ldr	r3, [pc, #100]	; (801af10 <createfile+0xe8>)
 801aeaa:	701a      	strb	r2, [r3, #0]
	if (fresult1 == FR_OK) {
 801aeac:	4b18      	ldr	r3, [pc, #96]	; (801af10 <createfile+0xe8>)
 801aeae:	781b      	ldrb	r3, [r3, #0]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d119      	bne.n	801aee8 <createfile+0xc0>





		fresult1 = Create_File(filename_with_format);
 801aeb4:	4812      	ldr	r0, [pc, #72]	; (801af00 <createfile+0xd8>)
 801aeb6:	f7ff fa2b 	bl	801a310 <Create_File>
 801aeba:	4603      	mov	r3, r0
 801aebc:	461a      	mov	r2, r3
 801aebe:	4b14      	ldr	r3, [pc, #80]	; (801af10 <createfile+0xe8>)
 801aec0:	701a      	strb	r2, [r3, #0]

		Unmount_SD("/");
 801aec2:	4812      	ldr	r0, [pc, #72]	; (801af0c <createfile+0xe4>)
 801aec4:	f7ff f9fc 	bl	801a2c0 <Unmount_SD>

		if (_RunTime_Packet.fileformat_selection) {
 801aec8:	4b12      	ldr	r3, [pc, #72]	; (801af14 <createfile+0xec>)
 801aeca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d00d      	beq.n	801aeee <createfile+0xc6>
			if (file_already_exist) {
 801aed2:	4b11      	ldr	r3, [pc, #68]	; (801af18 <createfile+0xf0>)
 801aed4:	781b      	ldrb	r3, [r3, #0]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d003      	beq.n	801aee2 <createfile+0xba>
				file_already_exist = 0;
 801aeda:	4b0f      	ldr	r3, [pc, #60]	; (801af18 <createfile+0xf0>)
 801aedc:	2200      	movs	r2, #0
 801aede:	701a      	strb	r2, [r3, #0]
 801aee0:	e005      	b.n	801aeee <createfile+0xc6>
			} else {
				csv_header();  //json does not require an header only csv
 801aee2:	f7ff fe95 	bl	801ac10 <csv_header>
 801aee6:	e002      	b.n	801aeee <createfile+0xc6>
			}
		}

	} else {
		//	__enable_irq();
		return -1;
 801aee8:	f04f 33ff 	mov.w	r3, #4294967295
 801aeec:	e000      	b.n	801aef0 <createfile+0xc8>
	}
//	__enable_irq();
	return 0;
 801aeee:	2300      	movs	r3, #0
}
 801aef0:	4618      	mov	r0, r3
 801aef2:	3720      	adds	r7, #32
 801aef4:	46bd      	mov	sp, r7
 801aef6:	bd80      	pop	{r7, pc}
 801aef8:	200017e4 	.word	0x200017e4
 801aefc:	080224e8 	.word	0x080224e8
 801af00:	20002268 	.word	0x20002268
 801af04:	080224fc 	.word	0x080224fc
 801af08:	200022cc 	.word	0x200022cc
 801af0c:	0802230c 	.word	0x0802230c
 801af10:	20002264 	.word	0x20002264
 801af14:	20001494 	.word	0x20001494
 801af18:	20002330 	.word	0x20002330

0801af1c <MX_USB_DEVICE_DeInit>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_DeInit(void)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	af00      	add	r7, sp, #0

	USBD_MSC_DeInit(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 801af20:	4905      	ldr	r1, [pc, #20]	; (801af38 <MX_USB_DEVICE_DeInit+0x1c>)
 801af22:	4806      	ldr	r0, [pc, #24]	; (801af3c <MX_USB_DEVICE_DeInit+0x20>)
 801af24:	f7f8 ffdc 	bl	8013ee0 <USBD_MSC_DeInit>
	USBD_Stop(&hUsbDeviceFS);
 801af28:	4804      	ldr	r0, [pc, #16]	; (801af3c <MX_USB_DEVICE_DeInit+0x20>)
 801af2a:	f7fa ffa6 	bl	8015e7a <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 801af2e:	4803      	ldr	r0, [pc, #12]	; (801af3c <MX_USB_DEVICE_DeInit+0x20>)
 801af30:	f7fa ff31 	bl	8015d96 <USBD_DeInit>

}
 801af34:	bf00      	nop
 801af36:	bd80      	pop	{r7, pc}
 801af38:	20000144 	.word	0x20000144
 801af3c:	20002438 	.word	0x20002438

0801af40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801af40:	b580      	push	{r7, lr}
 801af42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801af44:	2200      	movs	r2, #0
 801af46:	4912      	ldr	r1, [pc, #72]	; (801af90 <MX_USB_DEVICE_Init+0x50>)
 801af48:	4812      	ldr	r0, [pc, #72]	; (801af94 <MX_USB_DEVICE_Init+0x54>)
 801af4a:	f7fa fef4 	bl	8015d36 <USBD_Init>
 801af4e:	4603      	mov	r3, r0
 801af50:	2b00      	cmp	r3, #0
 801af52:	d001      	beq.n	801af58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801af54:	f7e8 f92e 	bl	80031b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801af58:	490f      	ldr	r1, [pc, #60]	; (801af98 <MX_USB_DEVICE_Init+0x58>)
 801af5a:	480e      	ldr	r0, [pc, #56]	; (801af94 <MX_USB_DEVICE_Init+0x54>)
 801af5c:	f7fa ff4b 	bl	8015df6 <USBD_RegisterClass>
 801af60:	4603      	mov	r3, r0
 801af62:	2b00      	cmp	r3, #0
 801af64:	d001      	beq.n	801af6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801af66:	f7e8 f925 	bl	80031b4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801af6a:	490c      	ldr	r1, [pc, #48]	; (801af9c <MX_USB_DEVICE_Init+0x5c>)
 801af6c:	4809      	ldr	r0, [pc, #36]	; (801af94 <MX_USB_DEVICE_Init+0x54>)
 801af6e:	f7f9 f9bf 	bl	80142f0 <USBD_MSC_RegisterStorage>
 801af72:	4603      	mov	r3, r0
 801af74:	2b00      	cmp	r3, #0
 801af76:	d001      	beq.n	801af7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801af78:	f7e8 f91c 	bl	80031b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801af7c:	4805      	ldr	r0, [pc, #20]	; (801af94 <MX_USB_DEVICE_Init+0x54>)
 801af7e:	f7fa ff70 	bl	8015e62 <USBD_Start>
 801af82:	4603      	mov	r3, r0
 801af84:	2b00      	cmp	r3, #0
 801af86:	d001      	beq.n	801af8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801af88:	f7e8 f914 	bl	80031b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801af8c:	bf00      	nop
 801af8e:	bd80      	pop	{r7, pc}
 801af90:	200000f4 	.word	0x200000f4
 801af94:	20002438 	.word	0x20002438
 801af98:	2000004c 	.word	0x2000004c
 801af9c:	20000144 	.word	0x20000144

0801afa0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801afa0:	b480      	push	{r7}
 801afa2:	b083      	sub	sp, #12
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	4603      	mov	r3, r0
 801afa8:	6039      	str	r1, [r7, #0]
 801afaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801afac:	683b      	ldr	r3, [r7, #0]
 801afae:	2212      	movs	r2, #18
 801afb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801afb2:	4b03      	ldr	r3, [pc, #12]	; (801afc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801afb4:	4618      	mov	r0, r3
 801afb6:	370c      	adds	r7, #12
 801afb8:	46bd      	mov	sp, r7
 801afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afbe:	4770      	bx	lr
 801afc0:	20000110 	.word	0x20000110

0801afc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801afc4:	b480      	push	{r7}
 801afc6:	b083      	sub	sp, #12
 801afc8:	af00      	add	r7, sp, #0
 801afca:	4603      	mov	r3, r0
 801afcc:	6039      	str	r1, [r7, #0]
 801afce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801afd0:	683b      	ldr	r3, [r7, #0]
 801afd2:	2204      	movs	r2, #4
 801afd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801afd6:	4b03      	ldr	r3, [pc, #12]	; (801afe4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801afd8:	4618      	mov	r0, r3
 801afda:	370c      	adds	r7, #12
 801afdc:	46bd      	mov	sp, r7
 801afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afe2:	4770      	bx	lr
 801afe4:	20000124 	.word	0x20000124

0801afe8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b082      	sub	sp, #8
 801afec:	af00      	add	r7, sp, #0
 801afee:	4603      	mov	r3, r0
 801aff0:	6039      	str	r1, [r7, #0]
 801aff2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801aff4:	79fb      	ldrb	r3, [r7, #7]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d105      	bne.n	801b006 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801affa:	683a      	ldr	r2, [r7, #0]
 801affc:	4907      	ldr	r1, [pc, #28]	; (801b01c <USBD_FS_ProductStrDescriptor+0x34>)
 801affe:	4808      	ldr	r0, [pc, #32]	; (801b020 <USBD_FS_ProductStrDescriptor+0x38>)
 801b000:	f7fc f8f6 	bl	80171f0 <USBD_GetString>
 801b004:	e004      	b.n	801b010 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b006:	683a      	ldr	r2, [r7, #0]
 801b008:	4904      	ldr	r1, [pc, #16]	; (801b01c <USBD_FS_ProductStrDescriptor+0x34>)
 801b00a:	4805      	ldr	r0, [pc, #20]	; (801b020 <USBD_FS_ProductStrDescriptor+0x38>)
 801b00c:	f7fc f8f0 	bl	80171f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b010:	4b02      	ldr	r3, [pc, #8]	; (801b01c <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b012:	4618      	mov	r0, r3
 801b014:	3708      	adds	r7, #8
 801b016:	46bd      	mov	sp, r7
 801b018:	bd80      	pop	{r7, pc}
 801b01a:	bf00      	nop
 801b01c:	20002714 	.word	0x20002714
 801b020:	08022510 	.word	0x08022510

0801b024 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b024:	b580      	push	{r7, lr}
 801b026:	b082      	sub	sp, #8
 801b028:	af00      	add	r7, sp, #0
 801b02a:	4603      	mov	r3, r0
 801b02c:	6039      	str	r1, [r7, #0]
 801b02e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b030:	683a      	ldr	r2, [r7, #0]
 801b032:	4904      	ldr	r1, [pc, #16]	; (801b044 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b034:	4804      	ldr	r0, [pc, #16]	; (801b048 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b036:	f7fc f8db 	bl	80171f0 <USBD_GetString>
  return USBD_StrDesc;
 801b03a:	4b02      	ldr	r3, [pc, #8]	; (801b044 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b03c:	4618      	mov	r0, r3
 801b03e:	3708      	adds	r7, #8
 801b040:	46bd      	mov	sp, r7
 801b042:	bd80      	pop	{r7, pc}
 801b044:	20002714 	.word	0x20002714
 801b048:	08022524 	.word	0x08022524

0801b04c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b082      	sub	sp, #8
 801b050:	af00      	add	r7, sp, #0
 801b052:	4603      	mov	r3, r0
 801b054:	6039      	str	r1, [r7, #0]
 801b056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b058:	683b      	ldr	r3, [r7, #0]
 801b05a:	221a      	movs	r2, #26
 801b05c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b05e:	f000 f843 	bl	801b0e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b062:	4b02      	ldr	r3, [pc, #8]	; (801b06c <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b064:	4618      	mov	r0, r3
 801b066:	3708      	adds	r7, #8
 801b068:	46bd      	mov	sp, r7
 801b06a:	bd80      	pop	{r7, pc}
 801b06c:	20000128 	.word	0x20000128

0801b070 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b082      	sub	sp, #8
 801b074:	af00      	add	r7, sp, #0
 801b076:	4603      	mov	r3, r0
 801b078:	6039      	str	r1, [r7, #0]
 801b07a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b07c:	79fb      	ldrb	r3, [r7, #7]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d105      	bne.n	801b08e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b082:	683a      	ldr	r2, [r7, #0]
 801b084:	4907      	ldr	r1, [pc, #28]	; (801b0a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b086:	4808      	ldr	r0, [pc, #32]	; (801b0a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b088:	f7fc f8b2 	bl	80171f0 <USBD_GetString>
 801b08c:	e004      	b.n	801b098 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b08e:	683a      	ldr	r2, [r7, #0]
 801b090:	4904      	ldr	r1, [pc, #16]	; (801b0a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b092:	4805      	ldr	r0, [pc, #20]	; (801b0a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 801b094:	f7fc f8ac 	bl	80171f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b098:	4b02      	ldr	r3, [pc, #8]	; (801b0a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	3708      	adds	r7, #8
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}
 801b0a2:	bf00      	nop
 801b0a4:	20002714 	.word	0x20002714
 801b0a8:	08022538 	.word	0x08022538

0801b0ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b082      	sub	sp, #8
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	6039      	str	r1, [r7, #0]
 801b0b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b0b8:	79fb      	ldrb	r3, [r7, #7]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d105      	bne.n	801b0ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b0be:	683a      	ldr	r2, [r7, #0]
 801b0c0:	4907      	ldr	r1, [pc, #28]	; (801b0e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b0c2:	4808      	ldr	r0, [pc, #32]	; (801b0e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b0c4:	f7fc f894 	bl	80171f0 <USBD_GetString>
 801b0c8:	e004      	b.n	801b0d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b0ca:	683a      	ldr	r2, [r7, #0]
 801b0cc:	4904      	ldr	r1, [pc, #16]	; (801b0e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b0ce:	4805      	ldr	r0, [pc, #20]	; (801b0e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b0d0:	f7fc f88e 	bl	80171f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b0d4:	4b02      	ldr	r3, [pc, #8]	; (801b0e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	3708      	adds	r7, #8
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	bd80      	pop	{r7, pc}
 801b0de:	bf00      	nop
 801b0e0:	20002714 	.word	0x20002714
 801b0e4:	08022544 	.word	0x08022544

0801b0e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b0e8:	b580      	push	{r7, lr}
 801b0ea:	b084      	sub	sp, #16
 801b0ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b0ee:	4b0f      	ldr	r3, [pc, #60]	; (801b12c <Get_SerialNum+0x44>)
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b0f4:	4b0e      	ldr	r3, [pc, #56]	; (801b130 <Get_SerialNum+0x48>)
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b0fa:	4b0e      	ldr	r3, [pc, #56]	; (801b134 <Get_SerialNum+0x4c>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b100:	68fa      	ldr	r2, [r7, #12]
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	4413      	add	r3, r2
 801b106:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d009      	beq.n	801b122 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b10e:	2208      	movs	r2, #8
 801b110:	4909      	ldr	r1, [pc, #36]	; (801b138 <Get_SerialNum+0x50>)
 801b112:	68f8      	ldr	r0, [r7, #12]
 801b114:	f000 f814 	bl	801b140 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b118:	2204      	movs	r2, #4
 801b11a:	4908      	ldr	r1, [pc, #32]	; (801b13c <Get_SerialNum+0x54>)
 801b11c:	68b8      	ldr	r0, [r7, #8]
 801b11e:	f000 f80f 	bl	801b140 <IntToUnicode>
  }
}
 801b122:	bf00      	nop
 801b124:	3710      	adds	r7, #16
 801b126:	46bd      	mov	sp, r7
 801b128:	bd80      	pop	{r7, pc}
 801b12a:	bf00      	nop
 801b12c:	1fff7a10 	.word	0x1fff7a10
 801b130:	1fff7a14 	.word	0x1fff7a14
 801b134:	1fff7a18 	.word	0x1fff7a18
 801b138:	2000012a 	.word	0x2000012a
 801b13c:	2000013a 	.word	0x2000013a

0801b140 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b140:	b480      	push	{r7}
 801b142:	b087      	sub	sp, #28
 801b144:	af00      	add	r7, sp, #0
 801b146:	60f8      	str	r0, [r7, #12]
 801b148:	60b9      	str	r1, [r7, #8]
 801b14a:	4613      	mov	r3, r2
 801b14c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b14e:	2300      	movs	r3, #0
 801b150:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b152:	2300      	movs	r3, #0
 801b154:	75fb      	strb	r3, [r7, #23]
 801b156:	e027      	b.n	801b1a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	0f1b      	lsrs	r3, r3, #28
 801b15c:	2b09      	cmp	r3, #9
 801b15e:	d80b      	bhi.n	801b178 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	0f1b      	lsrs	r3, r3, #28
 801b164:	b2da      	uxtb	r2, r3
 801b166:	7dfb      	ldrb	r3, [r7, #23]
 801b168:	005b      	lsls	r3, r3, #1
 801b16a:	4619      	mov	r1, r3
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	440b      	add	r3, r1
 801b170:	3230      	adds	r2, #48	; 0x30
 801b172:	b2d2      	uxtb	r2, r2
 801b174:	701a      	strb	r2, [r3, #0]
 801b176:	e00a      	b.n	801b18e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	0f1b      	lsrs	r3, r3, #28
 801b17c:	b2da      	uxtb	r2, r3
 801b17e:	7dfb      	ldrb	r3, [r7, #23]
 801b180:	005b      	lsls	r3, r3, #1
 801b182:	4619      	mov	r1, r3
 801b184:	68bb      	ldr	r3, [r7, #8]
 801b186:	440b      	add	r3, r1
 801b188:	3237      	adds	r2, #55	; 0x37
 801b18a:	b2d2      	uxtb	r2, r2
 801b18c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	011b      	lsls	r3, r3, #4
 801b192:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b194:	7dfb      	ldrb	r3, [r7, #23]
 801b196:	005b      	lsls	r3, r3, #1
 801b198:	3301      	adds	r3, #1
 801b19a:	68ba      	ldr	r2, [r7, #8]
 801b19c:	4413      	add	r3, r2
 801b19e:	2200      	movs	r2, #0
 801b1a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b1a2:	7dfb      	ldrb	r3, [r7, #23]
 801b1a4:	3301      	adds	r3, #1
 801b1a6:	75fb      	strb	r3, [r7, #23]
 801b1a8:	7dfa      	ldrb	r2, [r7, #23]
 801b1aa:	79fb      	ldrb	r3, [r7, #7]
 801b1ac:	429a      	cmp	r2, r3
 801b1ae:	d3d3      	bcc.n	801b158 <IntToUnicode+0x18>
  }
}
 801b1b0:	bf00      	nop
 801b1b2:	bf00      	nop
 801b1b4:	371c      	adds	r7, #28
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1bc:	4770      	bx	lr

0801b1be <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801b1be:	b480      	push	{r7}
 801b1c0:	b083      	sub	sp, #12
 801b1c2:	af00      	add	r7, sp, #0
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 801b1c8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	370c      	adds	r7, #12
 801b1ce:	46bd      	mov	sp, r7
 801b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d4:	4770      	bx	lr
	...

0801b1d8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b08e      	sub	sp, #56	; 0x38
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	4603      	mov	r3, r0
 801b1e0:	60b9      	str	r1, [r7, #8]
 801b1e2:	607a      	str	r2, [r7, #4]
 801b1e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	  /* USER CODE BEGIN 3 */
	  HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 801b1e6:	23ff      	movs	r3, #255	; 0xff
 801b1e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd, &info);
 801b1ec:	f107 0314 	add.w	r3, r7, #20
 801b1f0:	4619      	mov	r1, r3
 801b1f2:	480a      	ldr	r0, [pc, #40]	; (801b21c <STORAGE_GetCapacity_FS+0x44>)
 801b1f4:	f7ef f8ea 	bl	800a3cc <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 801b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1fa:	1e5a      	subs	r2, r3, #1
 801b1fc:	68bb      	ldr	r3, [r7, #8]
 801b1fe:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 801b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b202:	b29a      	uxth	r2, r3
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 801b208:	2300      	movs	r3, #0
 801b20a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 801b20e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 801b212:	4618      	mov	r0, r3
 801b214:	3738      	adds	r7, #56	; 0x38
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}
 801b21a:	bf00      	nop
 801b21c:	20001804 	.word	0x20001804

0801b220 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801b220:	b480      	push	{r7}
 801b222:	b083      	sub	sp, #12
 801b224:	af00      	add	r7, sp, #0
 801b226:	4603      	mov	r3, r0
 801b228:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 801b22a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b22c:	4618      	mov	r0, r3
 801b22e:	370c      	adds	r7, #12
 801b230:	46bd      	mov	sp, r7
 801b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b236:	4770      	bx	lr

0801b238 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801b238:	b480      	push	{r7}
 801b23a:	b083      	sub	sp, #12
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	4603      	mov	r3, r0
 801b240:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 801b242:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b244:	4618      	mov	r0, r3
 801b246:	370c      	adds	r7, #12
 801b248:	46bd      	mov	sp, r7
 801b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24e:	4770      	bx	lr

0801b250 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b250:	b580      	push	{r7, lr}
 801b252:	b088      	sub	sp, #32
 801b254:	af02      	add	r7, sp, #8
 801b256:	60b9      	str	r1, [r7, #8]
 801b258:	607a      	str	r2, [r7, #4]
 801b25a:	461a      	mov	r2, r3
 801b25c:	4603      	mov	r3, r0
 801b25e:	73fb      	strb	r3, [r7, #15]
 801b260:	4613      	mov	r3, r2
 801b262:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	   int8_t ret = -1;
 801b264:	23ff      	movs	r3, #255	; 0xff
 801b266:	75fb      	strb	r3, [r7, #23]

		prev_sleep_time = HAL_GetTick();
 801b268:	f7e8 fce4 	bl	8003c34 <HAL_GetTick>
 801b26c:	4603      	mov	r3, r0
 801b26e:	4a0d      	ldr	r2, [pc, #52]	; (801b2a4 <STORAGE_Read_FS+0x54>)
 801b270:	6013      	str	r3, [r2, #0]
	  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b272:	89bb      	ldrh	r3, [r7, #12]
 801b274:	f04f 32ff 	mov.w	r2, #4294967295
 801b278:	9200      	str	r2, [sp, #0]
 801b27a:	687a      	ldr	r2, [r7, #4]
 801b27c:	68b9      	ldr	r1, [r7, #8]
 801b27e:	480a      	ldr	r0, [pc, #40]	; (801b2a8 <STORAGE_Read_FS+0x58>)
 801b280:	f7ee fb9c 	bl	80099bc <HAL_SD_ReadBlocks>

	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b284:	bf00      	nop
 801b286:	4808      	ldr	r0, [pc, #32]	; (801b2a8 <STORAGE_Read_FS+0x58>)
 801b288:	f7ef f8cc 	bl	800a424 <HAL_SD_GetCardState>
 801b28c:	4603      	mov	r3, r0
 801b28e:	2b04      	cmp	r3, #4
 801b290:	d1f9      	bne.n	801b286 <STORAGE_Read_FS+0x36>
	  ret = 0;
 801b292:	2300      	movs	r3, #0
 801b294:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801b296:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	3718      	adds	r7, #24
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	20001718 	.word	0x20001718
 801b2a8:	20001804 	.word	0x20001804

0801b2ac <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b088      	sub	sp, #32
 801b2b0:	af02      	add	r7, sp, #8
 801b2b2:	60b9      	str	r1, [r7, #8]
 801b2b4:	607a      	str	r2, [r7, #4]
 801b2b6:	461a      	mov	r2, r3
 801b2b8:	4603      	mov	r3, r0
 801b2ba:	73fb      	strb	r3, [r7, #15]
 801b2bc:	4613      	mov	r3, r2
 801b2be:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	 int8_t ret = -1;
 801b2c0:	23ff      	movs	r3, #255	; 0xff
 801b2c2:	75fb      	strb	r3, [r7, #23]

	   HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 801b2c4:	89bb      	ldrh	r3, [r7, #12]
 801b2c6:	f04f 32ff 	mov.w	r2, #4294967295
 801b2ca:	9200      	str	r2, [sp, #0]
 801b2cc:	687a      	ldr	r2, [r7, #4]
 801b2ce:	68b9      	ldr	r1, [r7, #8]
 801b2d0:	4808      	ldr	r0, [pc, #32]	; (801b2f4 <STORAGE_Write_FS+0x48>)
 801b2d2:	f7ee fd51 	bl	8009d78 <HAL_SD_WriteBlocks>


	  /* Wait until SD card is ready to use for new operation */
	  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER){}
 801b2d6:	bf00      	nop
 801b2d8:	4806      	ldr	r0, [pc, #24]	; (801b2f4 <STORAGE_Write_FS+0x48>)
 801b2da:	f7ef f8a3 	bl	800a424 <HAL_SD_GetCardState>
 801b2de:	4603      	mov	r3, r0
 801b2e0:	2b04      	cmp	r3, #4
 801b2e2:	d1f9      	bne.n	801b2d8 <STORAGE_Write_FS+0x2c>
	  ret = 0;
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	75fb      	strb	r3, [r7, #23]
	  return ret;
 801b2e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	3718      	adds	r7, #24
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}
 801b2f4:	20001804 	.word	0x20001804

0801b2f8 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 801b2f8:	b480      	push	{r7}
 801b2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801b2fc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801b2fe:	4618      	mov	r0, r3
 801b300:	46bd      	mov	sp, r7
 801b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b306:	4770      	bx	lr

0801b308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b308:	b580      	push	{r7, lr}
 801b30a:	b08a      	sub	sp, #40	; 0x28
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b310:	f107 0314 	add.w	r3, r7, #20
 801b314:	2200      	movs	r2, #0
 801b316:	601a      	str	r2, [r3, #0]
 801b318:	605a      	str	r2, [r3, #4]
 801b31a:	609a      	str	r2, [r3, #8]
 801b31c:	60da      	str	r2, [r3, #12]
 801b31e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b328:	d13a      	bne.n	801b3a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b32a:	2300      	movs	r3, #0
 801b32c:	613b      	str	r3, [r7, #16]
 801b32e:	4b1e      	ldr	r3, [pc, #120]	; (801b3a8 <HAL_PCD_MspInit+0xa0>)
 801b330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b332:	4a1d      	ldr	r2, [pc, #116]	; (801b3a8 <HAL_PCD_MspInit+0xa0>)
 801b334:	f043 0301 	orr.w	r3, r3, #1
 801b338:	6313      	str	r3, [r2, #48]	; 0x30
 801b33a:	4b1b      	ldr	r3, [pc, #108]	; (801b3a8 <HAL_PCD_MspInit+0xa0>)
 801b33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b33e:	f003 0301 	and.w	r3, r3, #1
 801b342:	613b      	str	r3, [r7, #16]
 801b344:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801b346:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801b34a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b34c:	2302      	movs	r3, #2
 801b34e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b350:	2300      	movs	r3, #0
 801b352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b354:	2303      	movs	r3, #3
 801b356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801b358:	230a      	movs	r3, #10
 801b35a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b35c:	f107 0314 	add.w	r3, r7, #20
 801b360:	4619      	mov	r1, r3
 801b362:	4812      	ldr	r0, [pc, #72]	; (801b3ac <HAL_PCD_MspInit+0xa4>)
 801b364:	f7ea f9ca 	bl	80056fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b368:	4b0f      	ldr	r3, [pc, #60]	; (801b3a8 <HAL_PCD_MspInit+0xa0>)
 801b36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b36c:	4a0e      	ldr	r2, [pc, #56]	; (801b3a8 <HAL_PCD_MspInit+0xa0>)
 801b36e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b372:	6353      	str	r3, [r2, #52]	; 0x34
 801b374:	2300      	movs	r3, #0
 801b376:	60fb      	str	r3, [r7, #12]
 801b378:	4b0b      	ldr	r3, [pc, #44]	; (801b3a8 <HAL_PCD_MspInit+0xa0>)
 801b37a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b37c:	4a0a      	ldr	r2, [pc, #40]	; (801b3a8 <HAL_PCD_MspInit+0xa0>)
 801b37e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b382:	6453      	str	r3, [r2, #68]	; 0x44
 801b384:	4b08      	ldr	r3, [pc, #32]	; (801b3a8 <HAL_PCD_MspInit+0xa0>)
 801b386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b38c:	60fb      	str	r3, [r7, #12]
 801b38e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801b390:	2200      	movs	r2, #0
 801b392:	2100      	movs	r1, #0
 801b394:	2043      	movs	r0, #67	; 0x43
 801b396:	f7e9 fa30 	bl	80047fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b39a:	2043      	movs	r0, #67	; 0x43
 801b39c:	f7e9 fa49 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b3a0:	bf00      	nop
 801b3a2:	3728      	adds	r7, #40	; 0x28
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	bd80      	pop	{r7, pc}
 801b3a8:	40023800 	.word	0x40023800
 801b3ac:	40020000 	.word	0x40020000

0801b3b0 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b082      	sub	sp, #8
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b3c0:	d10d      	bne.n	801b3de <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801b3c2:	4b09      	ldr	r3, [pc, #36]	; (801b3e8 <HAL_PCD_MspDeInit+0x38>)
 801b3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3c6:	4a08      	ldr	r2, [pc, #32]	; (801b3e8 <HAL_PCD_MspDeInit+0x38>)
 801b3c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b3cc:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801b3ce:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801b3d2:	4806      	ldr	r0, [pc, #24]	; (801b3ec <HAL_PCD_MspDeInit+0x3c>)
 801b3d4:	f7ea fb16 	bl	8005a04 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801b3d8:	2043      	movs	r0, #67	; 0x43
 801b3da:	f7e9 fa38 	bl	800484e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801b3de:	bf00      	nop
 801b3e0:	3708      	adds	r7, #8
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	bd80      	pop	{r7, pc}
 801b3e6:	bf00      	nop
 801b3e8:	40023800 	.word	0x40023800
 801b3ec:	40020000 	.word	0x40020000

0801b3f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b082      	sub	sp, #8
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801b404:	4619      	mov	r1, r3
 801b406:	4610      	mov	r0, r2
 801b408:	f7fa fd93 	bl	8015f32 <USBD_LL_SetupStage>
}
 801b40c:	bf00      	nop
 801b40e:	3708      	adds	r7, #8
 801b410:	46bd      	mov	sp, r7
 801b412:	bd80      	pop	{r7, pc}

0801b414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b082      	sub	sp, #8
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	460b      	mov	r3, r1
 801b41e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801b426:	78fa      	ldrb	r2, [r7, #3]
 801b428:	6879      	ldr	r1, [r7, #4]
 801b42a:	4613      	mov	r3, r2
 801b42c:	00db      	lsls	r3, r3, #3
 801b42e:	4413      	add	r3, r2
 801b430:	009b      	lsls	r3, r3, #2
 801b432:	440b      	add	r3, r1
 801b434:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801b438:	681a      	ldr	r2, [r3, #0]
 801b43a:	78fb      	ldrb	r3, [r7, #3]
 801b43c:	4619      	mov	r1, r3
 801b43e:	f7fa fdcd 	bl	8015fdc <USBD_LL_DataOutStage>
}
 801b442:	bf00      	nop
 801b444:	3708      	adds	r7, #8
 801b446:	46bd      	mov	sp, r7
 801b448:	bd80      	pop	{r7, pc}

0801b44a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b44a:	b580      	push	{r7, lr}
 801b44c:	b082      	sub	sp, #8
 801b44e:	af00      	add	r7, sp, #0
 801b450:	6078      	str	r0, [r7, #4]
 801b452:	460b      	mov	r3, r1
 801b454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801b45c:	78fa      	ldrb	r2, [r7, #3]
 801b45e:	6879      	ldr	r1, [r7, #4]
 801b460:	4613      	mov	r3, r2
 801b462:	00db      	lsls	r3, r3, #3
 801b464:	4413      	add	r3, r2
 801b466:	009b      	lsls	r3, r3, #2
 801b468:	440b      	add	r3, r1
 801b46a:	334c      	adds	r3, #76	; 0x4c
 801b46c:	681a      	ldr	r2, [r3, #0]
 801b46e:	78fb      	ldrb	r3, [r7, #3]
 801b470:	4619      	mov	r1, r3
 801b472:	f7fa fe66 	bl	8016142 <USBD_LL_DataInStage>
}
 801b476:	bf00      	nop
 801b478:	3708      	adds	r7, #8
 801b47a:	46bd      	mov	sp, r7
 801b47c:	bd80      	pop	{r7, pc}

0801b47e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b47e:	b580      	push	{r7, lr}
 801b480:	b082      	sub	sp, #8
 801b482:	af00      	add	r7, sp, #0
 801b484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b48c:	4618      	mov	r0, r3
 801b48e:	f7fa ff9a 	bl	80163c6 <USBD_LL_SOF>
}
 801b492:	bf00      	nop
 801b494:	3708      	adds	r7, #8
 801b496:	46bd      	mov	sp, r7
 801b498:	bd80      	pop	{r7, pc}

0801b49a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b49a:	b580      	push	{r7, lr}
 801b49c:	b084      	sub	sp, #16
 801b49e:	af00      	add	r7, sp, #0
 801b4a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b4a2:	2301      	movs	r3, #1
 801b4a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	68db      	ldr	r3, [r3, #12]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d102      	bne.n	801b4b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	73fb      	strb	r3, [r7, #15]
 801b4b2:	e008      	b.n	801b4c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	68db      	ldr	r3, [r3, #12]
 801b4b8:	2b02      	cmp	r3, #2
 801b4ba:	d102      	bne.n	801b4c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801b4bc:	2301      	movs	r3, #1
 801b4be:	73fb      	strb	r3, [r7, #15]
 801b4c0:	e001      	b.n	801b4c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801b4c2:	f7e7 fe77 	bl	80031b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b4cc:	7bfa      	ldrb	r2, [r7, #15]
 801b4ce:	4611      	mov	r1, r2
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	f7fa ff3a 	bl	801634a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b4dc:	4618      	mov	r0, r3
 801b4de:	f7fa fee2 	bl	80162a6 <USBD_LL_Reset>
}
 801b4e2:	bf00      	nop
 801b4e4:	3710      	adds	r7, #16
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	bd80      	pop	{r7, pc}
	...

0801b4ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b082      	sub	sp, #8
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	f7fa ff35 	bl	801636a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	687a      	ldr	r2, [r7, #4]
 801b50c:	6812      	ldr	r2, [r2, #0]
 801b50e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801b512:	f043 0301 	orr.w	r3, r3, #1
 801b516:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	6a1b      	ldr	r3, [r3, #32]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d005      	beq.n	801b52c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b520:	4b04      	ldr	r3, [pc, #16]	; (801b534 <HAL_PCD_SuspendCallback+0x48>)
 801b522:	691b      	ldr	r3, [r3, #16]
 801b524:	4a03      	ldr	r2, [pc, #12]	; (801b534 <HAL_PCD_SuspendCallback+0x48>)
 801b526:	f043 0306 	orr.w	r3, r3, #6
 801b52a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b52c:	bf00      	nop
 801b52e:	3708      	adds	r7, #8
 801b530:	46bd      	mov	sp, r7
 801b532:	bd80      	pop	{r7, pc}
 801b534:	e000ed00 	.word	0xe000ed00

0801b538 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b538:	b580      	push	{r7, lr}
 801b53a:	b082      	sub	sp, #8
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b546:	4618      	mov	r0, r3
 801b548:	f7fa ff25 	bl	8016396 <USBD_LL_Resume>
}
 801b54c:	bf00      	nop
 801b54e:	3708      	adds	r7, #8
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}

0801b554 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b082      	sub	sp, #8
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
 801b55c:	460b      	mov	r3, r1
 801b55e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b566:	78fa      	ldrb	r2, [r7, #3]
 801b568:	4611      	mov	r1, r2
 801b56a:	4618      	mov	r0, r3
 801b56c:	f7fa ff7d 	bl	801646a <USBD_LL_IsoOUTIncomplete>
}
 801b570:	bf00      	nop
 801b572:	3708      	adds	r7, #8
 801b574:	46bd      	mov	sp, r7
 801b576:	bd80      	pop	{r7, pc}

0801b578 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b082      	sub	sp, #8
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	6078      	str	r0, [r7, #4]
 801b580:	460b      	mov	r3, r1
 801b582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b58a:	78fa      	ldrb	r2, [r7, #3]
 801b58c:	4611      	mov	r1, r2
 801b58e:	4618      	mov	r0, r3
 801b590:	f7fa ff39 	bl	8016406 <USBD_LL_IsoINIncomplete>
}
 801b594:	bf00      	nop
 801b596:	3708      	adds	r7, #8
 801b598:	46bd      	mov	sp, r7
 801b59a:	bd80      	pop	{r7, pc}

0801b59c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b082      	sub	sp, #8
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	f7fa ff8f 	bl	80164ce <USBD_LL_DevConnected>
}
 801b5b0:	bf00      	nop
 801b5b2:	3708      	adds	r7, #8
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	bd80      	pop	{r7, pc}

0801b5b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b082      	sub	sp, #8
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	f7fa ff8c 	bl	80164e4 <USBD_LL_DevDisconnected>
}
 801b5cc:	bf00      	nop
 801b5ce:	3708      	adds	r7, #8
 801b5d0:	46bd      	mov	sp, r7
 801b5d2:	bd80      	pop	{r7, pc}

0801b5d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b082      	sub	sp, #8
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	781b      	ldrb	r3, [r3, #0]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d13c      	bne.n	801b65e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801b5e4:	4a20      	ldr	r2, [pc, #128]	; (801b668 <USBD_LL_Init+0x94>)
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	4a1e      	ldr	r2, [pc, #120]	; (801b668 <USBD_LL_Init+0x94>)
 801b5f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b5f4:	4b1c      	ldr	r3, [pc, #112]	; (801b668 <USBD_LL_Init+0x94>)
 801b5f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801b5fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801b5fc:	4b1a      	ldr	r3, [pc, #104]	; (801b668 <USBD_LL_Init+0x94>)
 801b5fe:	2204      	movs	r2, #4
 801b600:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801b602:	4b19      	ldr	r3, [pc, #100]	; (801b668 <USBD_LL_Init+0x94>)
 801b604:	2202      	movs	r2, #2
 801b606:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b608:	4b17      	ldr	r3, [pc, #92]	; (801b668 <USBD_LL_Init+0x94>)
 801b60a:	2200      	movs	r2, #0
 801b60c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b60e:	4b16      	ldr	r3, [pc, #88]	; (801b668 <USBD_LL_Init+0x94>)
 801b610:	2202      	movs	r2, #2
 801b612:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b614:	4b14      	ldr	r3, [pc, #80]	; (801b668 <USBD_LL_Init+0x94>)
 801b616:	2200      	movs	r2, #0
 801b618:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801b61a:	4b13      	ldr	r3, [pc, #76]	; (801b668 <USBD_LL_Init+0x94>)
 801b61c:	2200      	movs	r2, #0
 801b61e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801b620:	4b11      	ldr	r3, [pc, #68]	; (801b668 <USBD_LL_Init+0x94>)
 801b622:	2200      	movs	r2, #0
 801b624:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801b626:	4b10      	ldr	r3, [pc, #64]	; (801b668 <USBD_LL_Init+0x94>)
 801b628:	2200      	movs	r2, #0
 801b62a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801b62c:	4b0e      	ldr	r3, [pc, #56]	; (801b668 <USBD_LL_Init+0x94>)
 801b62e:	2200      	movs	r2, #0
 801b630:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801b632:	480d      	ldr	r0, [pc, #52]	; (801b668 <USBD_LL_Init+0x94>)
 801b634:	f7eb fc07 	bl	8006e46 <HAL_PCD_Init>
 801b638:	4603      	mov	r3, r0
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d001      	beq.n	801b642 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801b63e:	f7e7 fdb9 	bl	80031b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801b642:	2180      	movs	r1, #128	; 0x80
 801b644:	4808      	ldr	r0, [pc, #32]	; (801b668 <USBD_LL_Init+0x94>)
 801b646:	f7ec fee8 	bl	800841a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801b64a:	2240      	movs	r2, #64	; 0x40
 801b64c:	2100      	movs	r1, #0
 801b64e:	4806      	ldr	r0, [pc, #24]	; (801b668 <USBD_LL_Init+0x94>)
 801b650:	f7ec fe9c 	bl	800838c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801b654:	2280      	movs	r2, #128	; 0x80
 801b656:	2101      	movs	r1, #1
 801b658:	4803      	ldr	r0, [pc, #12]	; (801b668 <USBD_LL_Init+0x94>)
 801b65a:	f7ec fe97 	bl	800838c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801b65e:	2300      	movs	r3, #0
}
 801b660:	4618      	mov	r0, r3
 801b662:	3708      	adds	r7, #8
 801b664:	46bd      	mov	sp, r7
 801b666:	bd80      	pop	{r7, pc}
 801b668:	20002914 	.word	0x20002914

0801b66c <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b084      	sub	sp, #16
 801b670:	af00      	add	r7, sp, #0
 801b672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b674:	2300      	movs	r3, #0
 801b676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b678:	2300      	movs	r3, #0
 801b67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b682:	4618      	mov	r0, r3
 801b684:	f7eb fcfc 	bl	8007080 <HAL_PCD_DeInit>
 801b688:	4603      	mov	r3, r0
 801b68a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b68c:	7bfb      	ldrb	r3, [r7, #15]
 801b68e:	4618      	mov	r0, r3
 801b690:	f000 f998 	bl	801b9c4 <USBD_Get_USB_Status>
 801b694:	4603      	mov	r3, r0
 801b696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b698:	7bbb      	ldrb	r3, [r7, #14]
}
 801b69a:	4618      	mov	r0, r3
 801b69c:	3710      	adds	r7, #16
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	bd80      	pop	{r7, pc}

0801b6a2 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b6a2:	b580      	push	{r7, lr}
 801b6a4:	b084      	sub	sp, #16
 801b6a6:	af00      	add	r7, sp, #0
 801b6a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b6ae:	2300      	movs	r3, #0
 801b6b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	f7eb fd04 	bl	80070c6 <HAL_PCD_Start>
 801b6be:	4603      	mov	r3, r0
 801b6c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b6c2:	7bfb      	ldrb	r3, [r7, #15]
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f000 f97d 	bl	801b9c4 <USBD_Get_USB_Status>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b6ce:	7bbb      	ldrb	r3, [r7, #14]
}
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	3710      	adds	r7, #16
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bd80      	pop	{r7, pc}

0801b6d8 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801b6d8:	b580      	push	{r7, lr}
 801b6da:	b084      	sub	sp, #16
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b6e0:	2300      	movs	r3, #0
 801b6e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f7eb fd1c 	bl	800712c <HAL_PCD_Stop>
 801b6f4:	4603      	mov	r3, r0
 801b6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b6f8:	7bfb      	ldrb	r3, [r7, #15]
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	f000 f962 	bl	801b9c4 <USBD_Get_USB_Status>
 801b700:	4603      	mov	r3, r0
 801b702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b704:	7bbb      	ldrb	r3, [r7, #14]
}
 801b706:	4618      	mov	r0, r3
 801b708:	3710      	adds	r7, #16
 801b70a:	46bd      	mov	sp, r7
 801b70c:	bd80      	pop	{r7, pc}

0801b70e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b70e:	b580      	push	{r7, lr}
 801b710:	b084      	sub	sp, #16
 801b712:	af00      	add	r7, sp, #0
 801b714:	6078      	str	r0, [r7, #4]
 801b716:	4608      	mov	r0, r1
 801b718:	4611      	mov	r1, r2
 801b71a:	461a      	mov	r2, r3
 801b71c:	4603      	mov	r3, r0
 801b71e:	70fb      	strb	r3, [r7, #3]
 801b720:	460b      	mov	r3, r1
 801b722:	70bb      	strb	r3, [r7, #2]
 801b724:	4613      	mov	r3, r2
 801b726:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b728:	2300      	movs	r3, #0
 801b72a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b72c:	2300      	movs	r3, #0
 801b72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b736:	78bb      	ldrb	r3, [r7, #2]
 801b738:	883a      	ldrh	r2, [r7, #0]
 801b73a:	78f9      	ldrb	r1, [r7, #3]
 801b73c:	f7ec f9f3 	bl	8007b26 <HAL_PCD_EP_Open>
 801b740:	4603      	mov	r3, r0
 801b742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b744:	7bfb      	ldrb	r3, [r7, #15]
 801b746:	4618      	mov	r0, r3
 801b748:	f000 f93c 	bl	801b9c4 <USBD_Get_USB_Status>
 801b74c:	4603      	mov	r3, r0
 801b74e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b750:	7bbb      	ldrb	r3, [r7, #14]
}
 801b752:	4618      	mov	r0, r3
 801b754:	3710      	adds	r7, #16
 801b756:	46bd      	mov	sp, r7
 801b758:	bd80      	pop	{r7, pc}

0801b75a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b75a:	b580      	push	{r7, lr}
 801b75c:	b084      	sub	sp, #16
 801b75e:	af00      	add	r7, sp, #0
 801b760:	6078      	str	r0, [r7, #4]
 801b762:	460b      	mov	r3, r1
 801b764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b766:	2300      	movs	r3, #0
 801b768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b76a:	2300      	movs	r3, #0
 801b76c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b774:	78fa      	ldrb	r2, [r7, #3]
 801b776:	4611      	mov	r1, r2
 801b778:	4618      	mov	r0, r3
 801b77a:	f7ec fa3c 	bl	8007bf6 <HAL_PCD_EP_Close>
 801b77e:	4603      	mov	r3, r0
 801b780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b782:	7bfb      	ldrb	r3, [r7, #15]
 801b784:	4618      	mov	r0, r3
 801b786:	f000 f91d 	bl	801b9c4 <USBD_Get_USB_Status>
 801b78a:	4603      	mov	r3, r0
 801b78c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b78e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b790:	4618      	mov	r0, r3
 801b792:	3710      	adds	r7, #16
 801b794:	46bd      	mov	sp, r7
 801b796:	bd80      	pop	{r7, pc}

0801b798 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b084      	sub	sp, #16
 801b79c:	af00      	add	r7, sp, #0
 801b79e:	6078      	str	r0, [r7, #4]
 801b7a0:	460b      	mov	r3, r1
 801b7a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b7b2:	78fa      	ldrb	r2, [r7, #3]
 801b7b4:	4611      	mov	r1, r2
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7ec fbff 	bl	8007fba <HAL_PCD_EP_Flush>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b7c0:	7bfb      	ldrb	r3, [r7, #15]
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	f000 f8fe 	bl	801b9c4 <USBD_Get_USB_Status>
 801b7c8:	4603      	mov	r3, r0
 801b7ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b7cc:	7bbb      	ldrb	r3, [r7, #14]
}
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	3710      	adds	r7, #16
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	bd80      	pop	{r7, pc}

0801b7d6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b7d6:	b580      	push	{r7, lr}
 801b7d8:	b084      	sub	sp, #16
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	6078      	str	r0, [r7, #4]
 801b7de:	460b      	mov	r3, r1
 801b7e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b7e2:	2300      	movs	r3, #0
 801b7e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b7e6:	2300      	movs	r3, #0
 801b7e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b7f0:	78fa      	ldrb	r2, [r7, #3]
 801b7f2:	4611      	mov	r1, r2
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	f7ec faf5 	bl	8007de4 <HAL_PCD_EP_SetStall>
 801b7fa:	4603      	mov	r3, r0
 801b7fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b7fe:	7bfb      	ldrb	r3, [r7, #15]
 801b800:	4618      	mov	r0, r3
 801b802:	f000 f8df 	bl	801b9c4 <USBD_Get_USB_Status>
 801b806:	4603      	mov	r3, r0
 801b808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b80a:	7bbb      	ldrb	r3, [r7, #14]
}
 801b80c:	4618      	mov	r0, r3
 801b80e:	3710      	adds	r7, #16
 801b810:	46bd      	mov	sp, r7
 801b812:	bd80      	pop	{r7, pc}

0801b814 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b814:	b580      	push	{r7, lr}
 801b816:	b084      	sub	sp, #16
 801b818:	af00      	add	r7, sp, #0
 801b81a:	6078      	str	r0, [r7, #4]
 801b81c:	460b      	mov	r3, r1
 801b81e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b820:	2300      	movs	r3, #0
 801b822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b824:	2300      	movs	r3, #0
 801b826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b82e:	78fa      	ldrb	r2, [r7, #3]
 801b830:	4611      	mov	r1, r2
 801b832:	4618      	mov	r0, r3
 801b834:	f7ec fb3a 	bl	8007eac <HAL_PCD_EP_ClrStall>
 801b838:	4603      	mov	r3, r0
 801b83a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b83c:	7bfb      	ldrb	r3, [r7, #15]
 801b83e:	4618      	mov	r0, r3
 801b840:	f000 f8c0 	bl	801b9c4 <USBD_Get_USB_Status>
 801b844:	4603      	mov	r3, r0
 801b846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b848:	7bbb      	ldrb	r3, [r7, #14]
}
 801b84a:	4618      	mov	r0, r3
 801b84c:	3710      	adds	r7, #16
 801b84e:	46bd      	mov	sp, r7
 801b850:	bd80      	pop	{r7, pc}

0801b852 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b852:	b480      	push	{r7}
 801b854:	b085      	sub	sp, #20
 801b856:	af00      	add	r7, sp, #0
 801b858:	6078      	str	r0, [r7, #4]
 801b85a:	460b      	mov	r3, r1
 801b85c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b864:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	da0b      	bge.n	801b886 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b86e:	78fb      	ldrb	r3, [r7, #3]
 801b870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b874:	68f9      	ldr	r1, [r7, #12]
 801b876:	4613      	mov	r3, r2
 801b878:	00db      	lsls	r3, r3, #3
 801b87a:	4413      	add	r3, r2
 801b87c:	009b      	lsls	r3, r3, #2
 801b87e:	440b      	add	r3, r1
 801b880:	333e      	adds	r3, #62	; 0x3e
 801b882:	781b      	ldrb	r3, [r3, #0]
 801b884:	e00b      	b.n	801b89e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b886:	78fb      	ldrb	r3, [r7, #3]
 801b888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b88c:	68f9      	ldr	r1, [r7, #12]
 801b88e:	4613      	mov	r3, r2
 801b890:	00db      	lsls	r3, r3, #3
 801b892:	4413      	add	r3, r2
 801b894:	009b      	lsls	r3, r3, #2
 801b896:	440b      	add	r3, r1
 801b898:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801b89c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b89e:	4618      	mov	r0, r3
 801b8a0:	3714      	adds	r7, #20
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8a8:	4770      	bx	lr

0801b8aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b8aa:	b580      	push	{r7, lr}
 801b8ac:	b084      	sub	sp, #16
 801b8ae:	af00      	add	r7, sp, #0
 801b8b0:	6078      	str	r0, [r7, #4]
 801b8b2:	460b      	mov	r3, r1
 801b8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b8c4:	78fa      	ldrb	r2, [r7, #3]
 801b8c6:	4611      	mov	r1, r2
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7ec f907 	bl	8007adc <HAL_PCD_SetAddress>
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b8d2:	7bfb      	ldrb	r3, [r7, #15]
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	f000 f875 	bl	801b9c4 <USBD_Get_USB_Status>
 801b8da:	4603      	mov	r3, r0
 801b8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b8de:	7bbb      	ldrb	r3, [r7, #14]
}
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	3710      	adds	r7, #16
 801b8e4:	46bd      	mov	sp, r7
 801b8e6:	bd80      	pop	{r7, pc}

0801b8e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b8e8:	b580      	push	{r7, lr}
 801b8ea:	b086      	sub	sp, #24
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	60f8      	str	r0, [r7, #12]
 801b8f0:	607a      	str	r2, [r7, #4]
 801b8f2:	603b      	str	r3, [r7, #0]
 801b8f4:	460b      	mov	r3, r1
 801b8f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b906:	7af9      	ldrb	r1, [r7, #11]
 801b908:	683b      	ldr	r3, [r7, #0]
 801b90a:	687a      	ldr	r2, [r7, #4]
 801b90c:	f7ec fa20 	bl	8007d50 <HAL_PCD_EP_Transmit>
 801b910:	4603      	mov	r3, r0
 801b912:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b914:	7dfb      	ldrb	r3, [r7, #23]
 801b916:	4618      	mov	r0, r3
 801b918:	f000 f854 	bl	801b9c4 <USBD_Get_USB_Status>
 801b91c:	4603      	mov	r3, r0
 801b91e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b920:	7dbb      	ldrb	r3, [r7, #22]
}
 801b922:	4618      	mov	r0, r3
 801b924:	3718      	adds	r7, #24
 801b926:	46bd      	mov	sp, r7
 801b928:	bd80      	pop	{r7, pc}

0801b92a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b92a:	b580      	push	{r7, lr}
 801b92c:	b086      	sub	sp, #24
 801b92e:	af00      	add	r7, sp, #0
 801b930:	60f8      	str	r0, [r7, #12]
 801b932:	607a      	str	r2, [r7, #4]
 801b934:	603b      	str	r3, [r7, #0]
 801b936:	460b      	mov	r3, r1
 801b938:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b93a:	2300      	movs	r3, #0
 801b93c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b93e:	2300      	movs	r3, #0
 801b940:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801b948:	7af9      	ldrb	r1, [r7, #11]
 801b94a:	683b      	ldr	r3, [r7, #0]
 801b94c:	687a      	ldr	r2, [r7, #4]
 801b94e:	f7ec f99c 	bl	8007c8a <HAL_PCD_EP_Receive>
 801b952:	4603      	mov	r3, r0
 801b954:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b956:	7dfb      	ldrb	r3, [r7, #23]
 801b958:	4618      	mov	r0, r3
 801b95a:	f000 f833 	bl	801b9c4 <USBD_Get_USB_Status>
 801b95e:	4603      	mov	r3, r0
 801b960:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b962:	7dbb      	ldrb	r3, [r7, #22]
}
 801b964:	4618      	mov	r0, r3
 801b966:	3718      	adds	r7, #24
 801b968:	46bd      	mov	sp, r7
 801b96a:	bd80      	pop	{r7, pc}

0801b96c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b082      	sub	sp, #8
 801b970:	af00      	add	r7, sp, #0
 801b972:	6078      	str	r0, [r7, #4]
 801b974:	460b      	mov	r3, r1
 801b976:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801b97e:	78fa      	ldrb	r2, [r7, #3]
 801b980:	4611      	mov	r1, r2
 801b982:	4618      	mov	r0, r3
 801b984:	f7ec f9cc 	bl	8007d20 <HAL_PCD_EP_GetRxCount>
 801b988:	4603      	mov	r3, r0
}
 801b98a:	4618      	mov	r0, r3
 801b98c:	3708      	adds	r7, #8
 801b98e:	46bd      	mov	sp, r7
 801b990:	bd80      	pop	{r7, pc}
	...

0801b994 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b994:	b480      	push	{r7}
 801b996:	b083      	sub	sp, #12
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b99c:	4b03      	ldr	r3, [pc, #12]	; (801b9ac <USBD_static_malloc+0x18>)
}
 801b99e:	4618      	mov	r0, r3
 801b9a0:	370c      	adds	r7, #12
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9a8:	4770      	bx	lr
 801b9aa:	bf00      	nop
 801b9ac:	20002e20 	.word	0x20002e20

0801b9b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b9b0:	b480      	push	{r7}
 801b9b2:	b083      	sub	sp, #12
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]

}
 801b9b8:	bf00      	nop
 801b9ba:	370c      	adds	r7, #12
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c2:	4770      	bx	lr

0801b9c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b9c4:	b480      	push	{r7}
 801b9c6:	b085      	sub	sp, #20
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b9d2:	79fb      	ldrb	r3, [r7, #7]
 801b9d4:	2b03      	cmp	r3, #3
 801b9d6:	d817      	bhi.n	801ba08 <USBD_Get_USB_Status+0x44>
 801b9d8:	a201      	add	r2, pc, #4	; (adr r2, 801b9e0 <USBD_Get_USB_Status+0x1c>)
 801b9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9de:	bf00      	nop
 801b9e0:	0801b9f1 	.word	0x0801b9f1
 801b9e4:	0801b9f7 	.word	0x0801b9f7
 801b9e8:	0801b9fd 	.word	0x0801b9fd
 801b9ec:	0801ba03 	.word	0x0801ba03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	73fb      	strb	r3, [r7, #15]
    break;
 801b9f4:	e00b      	b.n	801ba0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b9f6:	2303      	movs	r3, #3
 801b9f8:	73fb      	strb	r3, [r7, #15]
    break;
 801b9fa:	e008      	b.n	801ba0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b9fc:	2301      	movs	r3, #1
 801b9fe:	73fb      	strb	r3, [r7, #15]
    break;
 801ba00:	e005      	b.n	801ba0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ba02:	2303      	movs	r3, #3
 801ba04:	73fb      	strb	r3, [r7, #15]
    break;
 801ba06:	e002      	b.n	801ba0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ba08:	2303      	movs	r3, #3
 801ba0a:	73fb      	strb	r3, [r7, #15]
    break;
 801ba0c:	bf00      	nop
  }
  return usb_status;
 801ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba10:	4618      	mov	r0, r3
 801ba12:	3714      	adds	r7, #20
 801ba14:	46bd      	mov	sp, r7
 801ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba1a:	4770      	bx	lr

0801ba1c <atoi>:
 801ba1c:	220a      	movs	r2, #10
 801ba1e:	2100      	movs	r1, #0
 801ba20:	f002 b826 	b.w	801da70 <strtol>

0801ba24 <__errno>:
 801ba24:	4b01      	ldr	r3, [pc, #4]	; (801ba2c <__errno+0x8>)
 801ba26:	6818      	ldr	r0, [r3, #0]
 801ba28:	4770      	bx	lr
 801ba2a:	bf00      	nop
 801ba2c:	20000164 	.word	0x20000164

0801ba30 <_fwrite_r>:
 801ba30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba34:	9c08      	ldr	r4, [sp, #32]
 801ba36:	468a      	mov	sl, r1
 801ba38:	4690      	mov	r8, r2
 801ba3a:	fb02 f903 	mul.w	r9, r2, r3
 801ba3e:	4605      	mov	r5, r0
 801ba40:	b118      	cbz	r0, 801ba4a <_fwrite_r+0x1a>
 801ba42:	6983      	ldr	r3, [r0, #24]
 801ba44:	b90b      	cbnz	r3, 801ba4a <_fwrite_r+0x1a>
 801ba46:	f003 f8cb 	bl	801ebe0 <__sinit>
 801ba4a:	4b26      	ldr	r3, [pc, #152]	; (801bae4 <_fwrite_r+0xb4>)
 801ba4c:	429c      	cmp	r4, r3
 801ba4e:	d123      	bne.n	801ba98 <_fwrite_r+0x68>
 801ba50:	686c      	ldr	r4, [r5, #4]
 801ba52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba54:	07de      	lsls	r6, r3, #31
 801ba56:	d405      	bmi.n	801ba64 <_fwrite_r+0x34>
 801ba58:	89a3      	ldrh	r3, [r4, #12]
 801ba5a:	0598      	lsls	r0, r3, #22
 801ba5c:	d402      	bmi.n	801ba64 <_fwrite_r+0x34>
 801ba5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba60:	f000 f879 	bl	801bb56 <__retarget_lock_acquire_recursive>
 801ba64:	89a3      	ldrh	r3, [r4, #12]
 801ba66:	0719      	lsls	r1, r3, #28
 801ba68:	d520      	bpl.n	801baac <_fwrite_r+0x7c>
 801ba6a:	6923      	ldr	r3, [r4, #16]
 801ba6c:	b1f3      	cbz	r3, 801baac <_fwrite_r+0x7c>
 801ba6e:	2600      	movs	r6, #0
 801ba70:	454e      	cmp	r6, r9
 801ba72:	d029      	beq.n	801bac8 <_fwrite_r+0x98>
 801ba74:	68a7      	ldr	r7, [r4, #8]
 801ba76:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801ba7a:	3f01      	subs	r7, #1
 801ba7c:	2f00      	cmp	r7, #0
 801ba7e:	60a7      	str	r7, [r4, #8]
 801ba80:	da04      	bge.n	801ba8c <_fwrite_r+0x5c>
 801ba82:	69a3      	ldr	r3, [r4, #24]
 801ba84:	429f      	cmp	r7, r3
 801ba86:	db19      	blt.n	801babc <_fwrite_r+0x8c>
 801ba88:	290a      	cmp	r1, #10
 801ba8a:	d017      	beq.n	801babc <_fwrite_r+0x8c>
 801ba8c:	6823      	ldr	r3, [r4, #0]
 801ba8e:	1c5a      	adds	r2, r3, #1
 801ba90:	6022      	str	r2, [r4, #0]
 801ba92:	7019      	strb	r1, [r3, #0]
 801ba94:	3601      	adds	r6, #1
 801ba96:	e7eb      	b.n	801ba70 <_fwrite_r+0x40>
 801ba98:	4b13      	ldr	r3, [pc, #76]	; (801bae8 <_fwrite_r+0xb8>)
 801ba9a:	429c      	cmp	r4, r3
 801ba9c:	d101      	bne.n	801baa2 <_fwrite_r+0x72>
 801ba9e:	68ac      	ldr	r4, [r5, #8]
 801baa0:	e7d7      	b.n	801ba52 <_fwrite_r+0x22>
 801baa2:	4b12      	ldr	r3, [pc, #72]	; (801baec <_fwrite_r+0xbc>)
 801baa4:	429c      	cmp	r4, r3
 801baa6:	bf08      	it	eq
 801baa8:	68ec      	ldreq	r4, [r5, #12]
 801baaa:	e7d2      	b.n	801ba52 <_fwrite_r+0x22>
 801baac:	4621      	mov	r1, r4
 801baae:	4628      	mov	r0, r5
 801bab0:	f002 f874 	bl	801db9c <__swsetup_r>
 801bab4:	2800      	cmp	r0, #0
 801bab6:	d0da      	beq.n	801ba6e <_fwrite_r+0x3e>
 801bab8:	2600      	movs	r6, #0
 801baba:	e005      	b.n	801bac8 <_fwrite_r+0x98>
 801babc:	4622      	mov	r2, r4
 801babe:	4628      	mov	r0, r5
 801bac0:	f002 f81a 	bl	801daf8 <__swbuf_r>
 801bac4:	3001      	adds	r0, #1
 801bac6:	d1e5      	bne.n	801ba94 <_fwrite_r+0x64>
 801bac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801baca:	07da      	lsls	r2, r3, #31
 801bacc:	d405      	bmi.n	801bada <_fwrite_r+0xaa>
 801bace:	89a3      	ldrh	r3, [r4, #12]
 801bad0:	059b      	lsls	r3, r3, #22
 801bad2:	d402      	bmi.n	801bada <_fwrite_r+0xaa>
 801bad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bad6:	f000 f83f 	bl	801bb58 <__retarget_lock_release_recursive>
 801bada:	fbb6 f0f8 	udiv	r0, r6, r8
 801bade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bae2:	bf00      	nop
 801bae4:	08022e74 	.word	0x08022e74
 801bae8:	08022e94 	.word	0x08022e94
 801baec:	08022e54 	.word	0x08022e54

0801baf0 <fwrite>:
 801baf0:	b507      	push	{r0, r1, r2, lr}
 801baf2:	9300      	str	r3, [sp, #0]
 801baf4:	4613      	mov	r3, r2
 801baf6:	460a      	mov	r2, r1
 801baf8:	4601      	mov	r1, r0
 801bafa:	4803      	ldr	r0, [pc, #12]	; (801bb08 <fwrite+0x18>)
 801bafc:	6800      	ldr	r0, [r0, #0]
 801bafe:	f7ff ff97 	bl	801ba30 <_fwrite_r>
 801bb02:	b003      	add	sp, #12
 801bb04:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb08:	20000164 	.word	0x20000164

0801bb0c <__libc_init_array>:
 801bb0c:	b570      	push	{r4, r5, r6, lr}
 801bb0e:	4d0d      	ldr	r5, [pc, #52]	; (801bb44 <__libc_init_array+0x38>)
 801bb10:	4c0d      	ldr	r4, [pc, #52]	; (801bb48 <__libc_init_array+0x3c>)
 801bb12:	1b64      	subs	r4, r4, r5
 801bb14:	10a4      	asrs	r4, r4, #2
 801bb16:	2600      	movs	r6, #0
 801bb18:	42a6      	cmp	r6, r4
 801bb1a:	d109      	bne.n	801bb30 <__libc_init_array+0x24>
 801bb1c:	4d0b      	ldr	r5, [pc, #44]	; (801bb4c <__libc_init_array+0x40>)
 801bb1e:	4c0c      	ldr	r4, [pc, #48]	; (801bb50 <__libc_init_array+0x44>)
 801bb20:	f004 fdea 	bl	80206f8 <_init>
 801bb24:	1b64      	subs	r4, r4, r5
 801bb26:	10a4      	asrs	r4, r4, #2
 801bb28:	2600      	movs	r6, #0
 801bb2a:	42a6      	cmp	r6, r4
 801bb2c:	d105      	bne.n	801bb3a <__libc_init_array+0x2e>
 801bb2e:	bd70      	pop	{r4, r5, r6, pc}
 801bb30:	f855 3b04 	ldr.w	r3, [r5], #4
 801bb34:	4798      	blx	r3
 801bb36:	3601      	adds	r6, #1
 801bb38:	e7ee      	b.n	801bb18 <__libc_init_array+0xc>
 801bb3a:	f855 3b04 	ldr.w	r3, [r5], #4
 801bb3e:	4798      	blx	r3
 801bb40:	3601      	adds	r6, #1
 801bb42:	e7f2      	b.n	801bb2a <__libc_init_array+0x1e>
 801bb44:	080230a8 	.word	0x080230a8
 801bb48:	080230a8 	.word	0x080230a8
 801bb4c:	080230a8 	.word	0x080230a8
 801bb50:	080230ac 	.word	0x080230ac

0801bb54 <__retarget_lock_init_recursive>:
 801bb54:	4770      	bx	lr

0801bb56 <__retarget_lock_acquire_recursive>:
 801bb56:	4770      	bx	lr

0801bb58 <__retarget_lock_release_recursive>:
 801bb58:	4770      	bx	lr
	...

0801bb5c <malloc>:
 801bb5c:	4b02      	ldr	r3, [pc, #8]	; (801bb68 <malloc+0xc>)
 801bb5e:	4601      	mov	r1, r0
 801bb60:	6818      	ldr	r0, [r3, #0]
 801bb62:	f000 b89f 	b.w	801bca4 <_malloc_r>
 801bb66:	bf00      	nop
 801bb68:	20000164 	.word	0x20000164

0801bb6c <memcpy>:
 801bb6c:	440a      	add	r2, r1
 801bb6e:	4291      	cmp	r1, r2
 801bb70:	f100 33ff 	add.w	r3, r0, #4294967295
 801bb74:	d100      	bne.n	801bb78 <memcpy+0xc>
 801bb76:	4770      	bx	lr
 801bb78:	b510      	push	{r4, lr}
 801bb7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb82:	4291      	cmp	r1, r2
 801bb84:	d1f9      	bne.n	801bb7a <memcpy+0xe>
 801bb86:	bd10      	pop	{r4, pc}

0801bb88 <memmove>:
 801bb88:	4288      	cmp	r0, r1
 801bb8a:	b510      	push	{r4, lr}
 801bb8c:	eb01 0402 	add.w	r4, r1, r2
 801bb90:	d902      	bls.n	801bb98 <memmove+0x10>
 801bb92:	4284      	cmp	r4, r0
 801bb94:	4623      	mov	r3, r4
 801bb96:	d807      	bhi.n	801bba8 <memmove+0x20>
 801bb98:	1e43      	subs	r3, r0, #1
 801bb9a:	42a1      	cmp	r1, r4
 801bb9c:	d008      	beq.n	801bbb0 <memmove+0x28>
 801bb9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bba2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bba6:	e7f8      	b.n	801bb9a <memmove+0x12>
 801bba8:	4402      	add	r2, r0
 801bbaa:	4601      	mov	r1, r0
 801bbac:	428a      	cmp	r2, r1
 801bbae:	d100      	bne.n	801bbb2 <memmove+0x2a>
 801bbb0:	bd10      	pop	{r4, pc}
 801bbb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bbb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bbba:	e7f7      	b.n	801bbac <memmove+0x24>

0801bbbc <memset>:
 801bbbc:	4402      	add	r2, r0
 801bbbe:	4603      	mov	r3, r0
 801bbc0:	4293      	cmp	r3, r2
 801bbc2:	d100      	bne.n	801bbc6 <memset+0xa>
 801bbc4:	4770      	bx	lr
 801bbc6:	f803 1b01 	strb.w	r1, [r3], #1
 801bbca:	e7f9      	b.n	801bbc0 <memset+0x4>

0801bbcc <_free_r>:
 801bbcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bbce:	2900      	cmp	r1, #0
 801bbd0:	d044      	beq.n	801bc5c <_free_r+0x90>
 801bbd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bbd6:	9001      	str	r0, [sp, #4]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	f1a1 0404 	sub.w	r4, r1, #4
 801bbde:	bfb8      	it	lt
 801bbe0:	18e4      	addlt	r4, r4, r3
 801bbe2:	f003 fc97 	bl	801f514 <__malloc_lock>
 801bbe6:	4a1e      	ldr	r2, [pc, #120]	; (801bc60 <_free_r+0x94>)
 801bbe8:	9801      	ldr	r0, [sp, #4]
 801bbea:	6813      	ldr	r3, [r2, #0]
 801bbec:	b933      	cbnz	r3, 801bbfc <_free_r+0x30>
 801bbee:	6063      	str	r3, [r4, #4]
 801bbf0:	6014      	str	r4, [r2, #0]
 801bbf2:	b003      	add	sp, #12
 801bbf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bbf8:	f003 bc92 	b.w	801f520 <__malloc_unlock>
 801bbfc:	42a3      	cmp	r3, r4
 801bbfe:	d908      	bls.n	801bc12 <_free_r+0x46>
 801bc00:	6825      	ldr	r5, [r4, #0]
 801bc02:	1961      	adds	r1, r4, r5
 801bc04:	428b      	cmp	r3, r1
 801bc06:	bf01      	itttt	eq
 801bc08:	6819      	ldreq	r1, [r3, #0]
 801bc0a:	685b      	ldreq	r3, [r3, #4]
 801bc0c:	1949      	addeq	r1, r1, r5
 801bc0e:	6021      	streq	r1, [r4, #0]
 801bc10:	e7ed      	b.n	801bbee <_free_r+0x22>
 801bc12:	461a      	mov	r2, r3
 801bc14:	685b      	ldr	r3, [r3, #4]
 801bc16:	b10b      	cbz	r3, 801bc1c <_free_r+0x50>
 801bc18:	42a3      	cmp	r3, r4
 801bc1a:	d9fa      	bls.n	801bc12 <_free_r+0x46>
 801bc1c:	6811      	ldr	r1, [r2, #0]
 801bc1e:	1855      	adds	r5, r2, r1
 801bc20:	42a5      	cmp	r5, r4
 801bc22:	d10b      	bne.n	801bc3c <_free_r+0x70>
 801bc24:	6824      	ldr	r4, [r4, #0]
 801bc26:	4421      	add	r1, r4
 801bc28:	1854      	adds	r4, r2, r1
 801bc2a:	42a3      	cmp	r3, r4
 801bc2c:	6011      	str	r1, [r2, #0]
 801bc2e:	d1e0      	bne.n	801bbf2 <_free_r+0x26>
 801bc30:	681c      	ldr	r4, [r3, #0]
 801bc32:	685b      	ldr	r3, [r3, #4]
 801bc34:	6053      	str	r3, [r2, #4]
 801bc36:	4421      	add	r1, r4
 801bc38:	6011      	str	r1, [r2, #0]
 801bc3a:	e7da      	b.n	801bbf2 <_free_r+0x26>
 801bc3c:	d902      	bls.n	801bc44 <_free_r+0x78>
 801bc3e:	230c      	movs	r3, #12
 801bc40:	6003      	str	r3, [r0, #0]
 801bc42:	e7d6      	b.n	801bbf2 <_free_r+0x26>
 801bc44:	6825      	ldr	r5, [r4, #0]
 801bc46:	1961      	adds	r1, r4, r5
 801bc48:	428b      	cmp	r3, r1
 801bc4a:	bf04      	itt	eq
 801bc4c:	6819      	ldreq	r1, [r3, #0]
 801bc4e:	685b      	ldreq	r3, [r3, #4]
 801bc50:	6063      	str	r3, [r4, #4]
 801bc52:	bf04      	itt	eq
 801bc54:	1949      	addeq	r1, r1, r5
 801bc56:	6021      	streq	r1, [r4, #0]
 801bc58:	6054      	str	r4, [r2, #4]
 801bc5a:	e7ca      	b.n	801bbf2 <_free_r+0x26>
 801bc5c:	b003      	add	sp, #12
 801bc5e:	bd30      	pop	{r4, r5, pc}
 801bc60:	2000369c 	.word	0x2000369c

0801bc64 <sbrk_aligned>:
 801bc64:	b570      	push	{r4, r5, r6, lr}
 801bc66:	4e0e      	ldr	r6, [pc, #56]	; (801bca0 <sbrk_aligned+0x3c>)
 801bc68:	460c      	mov	r4, r1
 801bc6a:	6831      	ldr	r1, [r6, #0]
 801bc6c:	4605      	mov	r5, r0
 801bc6e:	b911      	cbnz	r1, 801bc76 <sbrk_aligned+0x12>
 801bc70:	f000 ff94 	bl	801cb9c <_sbrk_r>
 801bc74:	6030      	str	r0, [r6, #0]
 801bc76:	4621      	mov	r1, r4
 801bc78:	4628      	mov	r0, r5
 801bc7a:	f000 ff8f 	bl	801cb9c <_sbrk_r>
 801bc7e:	1c43      	adds	r3, r0, #1
 801bc80:	d00a      	beq.n	801bc98 <sbrk_aligned+0x34>
 801bc82:	1cc4      	adds	r4, r0, #3
 801bc84:	f024 0403 	bic.w	r4, r4, #3
 801bc88:	42a0      	cmp	r0, r4
 801bc8a:	d007      	beq.n	801bc9c <sbrk_aligned+0x38>
 801bc8c:	1a21      	subs	r1, r4, r0
 801bc8e:	4628      	mov	r0, r5
 801bc90:	f000 ff84 	bl	801cb9c <_sbrk_r>
 801bc94:	3001      	adds	r0, #1
 801bc96:	d101      	bne.n	801bc9c <sbrk_aligned+0x38>
 801bc98:	f04f 34ff 	mov.w	r4, #4294967295
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	bd70      	pop	{r4, r5, r6, pc}
 801bca0:	200036a0 	.word	0x200036a0

0801bca4 <_malloc_r>:
 801bca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bca8:	1ccd      	adds	r5, r1, #3
 801bcaa:	f025 0503 	bic.w	r5, r5, #3
 801bcae:	3508      	adds	r5, #8
 801bcb0:	2d0c      	cmp	r5, #12
 801bcb2:	bf38      	it	cc
 801bcb4:	250c      	movcc	r5, #12
 801bcb6:	2d00      	cmp	r5, #0
 801bcb8:	4607      	mov	r7, r0
 801bcba:	db01      	blt.n	801bcc0 <_malloc_r+0x1c>
 801bcbc:	42a9      	cmp	r1, r5
 801bcbe:	d905      	bls.n	801bccc <_malloc_r+0x28>
 801bcc0:	230c      	movs	r3, #12
 801bcc2:	603b      	str	r3, [r7, #0]
 801bcc4:	2600      	movs	r6, #0
 801bcc6:	4630      	mov	r0, r6
 801bcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bccc:	4e2e      	ldr	r6, [pc, #184]	; (801bd88 <_malloc_r+0xe4>)
 801bcce:	f003 fc21 	bl	801f514 <__malloc_lock>
 801bcd2:	6833      	ldr	r3, [r6, #0]
 801bcd4:	461c      	mov	r4, r3
 801bcd6:	bb34      	cbnz	r4, 801bd26 <_malloc_r+0x82>
 801bcd8:	4629      	mov	r1, r5
 801bcda:	4638      	mov	r0, r7
 801bcdc:	f7ff ffc2 	bl	801bc64 <sbrk_aligned>
 801bce0:	1c43      	adds	r3, r0, #1
 801bce2:	4604      	mov	r4, r0
 801bce4:	d14d      	bne.n	801bd82 <_malloc_r+0xde>
 801bce6:	6834      	ldr	r4, [r6, #0]
 801bce8:	4626      	mov	r6, r4
 801bcea:	2e00      	cmp	r6, #0
 801bcec:	d140      	bne.n	801bd70 <_malloc_r+0xcc>
 801bcee:	6823      	ldr	r3, [r4, #0]
 801bcf0:	4631      	mov	r1, r6
 801bcf2:	4638      	mov	r0, r7
 801bcf4:	eb04 0803 	add.w	r8, r4, r3
 801bcf8:	f000 ff50 	bl	801cb9c <_sbrk_r>
 801bcfc:	4580      	cmp	r8, r0
 801bcfe:	d13a      	bne.n	801bd76 <_malloc_r+0xd2>
 801bd00:	6821      	ldr	r1, [r4, #0]
 801bd02:	3503      	adds	r5, #3
 801bd04:	1a6d      	subs	r5, r5, r1
 801bd06:	f025 0503 	bic.w	r5, r5, #3
 801bd0a:	3508      	adds	r5, #8
 801bd0c:	2d0c      	cmp	r5, #12
 801bd0e:	bf38      	it	cc
 801bd10:	250c      	movcc	r5, #12
 801bd12:	4629      	mov	r1, r5
 801bd14:	4638      	mov	r0, r7
 801bd16:	f7ff ffa5 	bl	801bc64 <sbrk_aligned>
 801bd1a:	3001      	adds	r0, #1
 801bd1c:	d02b      	beq.n	801bd76 <_malloc_r+0xd2>
 801bd1e:	6823      	ldr	r3, [r4, #0]
 801bd20:	442b      	add	r3, r5
 801bd22:	6023      	str	r3, [r4, #0]
 801bd24:	e00e      	b.n	801bd44 <_malloc_r+0xa0>
 801bd26:	6822      	ldr	r2, [r4, #0]
 801bd28:	1b52      	subs	r2, r2, r5
 801bd2a:	d41e      	bmi.n	801bd6a <_malloc_r+0xc6>
 801bd2c:	2a0b      	cmp	r2, #11
 801bd2e:	d916      	bls.n	801bd5e <_malloc_r+0xba>
 801bd30:	1961      	adds	r1, r4, r5
 801bd32:	42a3      	cmp	r3, r4
 801bd34:	6025      	str	r5, [r4, #0]
 801bd36:	bf18      	it	ne
 801bd38:	6059      	strne	r1, [r3, #4]
 801bd3a:	6863      	ldr	r3, [r4, #4]
 801bd3c:	bf08      	it	eq
 801bd3e:	6031      	streq	r1, [r6, #0]
 801bd40:	5162      	str	r2, [r4, r5]
 801bd42:	604b      	str	r3, [r1, #4]
 801bd44:	4638      	mov	r0, r7
 801bd46:	f104 060b 	add.w	r6, r4, #11
 801bd4a:	f003 fbe9 	bl	801f520 <__malloc_unlock>
 801bd4e:	f026 0607 	bic.w	r6, r6, #7
 801bd52:	1d23      	adds	r3, r4, #4
 801bd54:	1af2      	subs	r2, r6, r3
 801bd56:	d0b6      	beq.n	801bcc6 <_malloc_r+0x22>
 801bd58:	1b9b      	subs	r3, r3, r6
 801bd5a:	50a3      	str	r3, [r4, r2]
 801bd5c:	e7b3      	b.n	801bcc6 <_malloc_r+0x22>
 801bd5e:	6862      	ldr	r2, [r4, #4]
 801bd60:	42a3      	cmp	r3, r4
 801bd62:	bf0c      	ite	eq
 801bd64:	6032      	streq	r2, [r6, #0]
 801bd66:	605a      	strne	r2, [r3, #4]
 801bd68:	e7ec      	b.n	801bd44 <_malloc_r+0xa0>
 801bd6a:	4623      	mov	r3, r4
 801bd6c:	6864      	ldr	r4, [r4, #4]
 801bd6e:	e7b2      	b.n	801bcd6 <_malloc_r+0x32>
 801bd70:	4634      	mov	r4, r6
 801bd72:	6876      	ldr	r6, [r6, #4]
 801bd74:	e7b9      	b.n	801bcea <_malloc_r+0x46>
 801bd76:	230c      	movs	r3, #12
 801bd78:	603b      	str	r3, [r7, #0]
 801bd7a:	4638      	mov	r0, r7
 801bd7c:	f003 fbd0 	bl	801f520 <__malloc_unlock>
 801bd80:	e7a1      	b.n	801bcc6 <_malloc_r+0x22>
 801bd82:	6025      	str	r5, [r4, #0]
 801bd84:	e7de      	b.n	801bd44 <_malloc_r+0xa0>
 801bd86:	bf00      	nop
 801bd88:	2000369c 	.word	0x2000369c

0801bd8c <__cvt>:
 801bd8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bd90:	ec55 4b10 	vmov	r4, r5, d0
 801bd94:	2d00      	cmp	r5, #0
 801bd96:	460e      	mov	r6, r1
 801bd98:	4619      	mov	r1, r3
 801bd9a:	462b      	mov	r3, r5
 801bd9c:	bfbb      	ittet	lt
 801bd9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801bda2:	461d      	movlt	r5, r3
 801bda4:	2300      	movge	r3, #0
 801bda6:	232d      	movlt	r3, #45	; 0x2d
 801bda8:	700b      	strb	r3, [r1, #0]
 801bdaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bdac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801bdb0:	4691      	mov	r9, r2
 801bdb2:	f023 0820 	bic.w	r8, r3, #32
 801bdb6:	bfbc      	itt	lt
 801bdb8:	4622      	movlt	r2, r4
 801bdba:	4614      	movlt	r4, r2
 801bdbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bdc0:	d005      	beq.n	801bdce <__cvt+0x42>
 801bdc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801bdc6:	d100      	bne.n	801bdca <__cvt+0x3e>
 801bdc8:	3601      	adds	r6, #1
 801bdca:	2102      	movs	r1, #2
 801bdcc:	e000      	b.n	801bdd0 <__cvt+0x44>
 801bdce:	2103      	movs	r1, #3
 801bdd0:	ab03      	add	r3, sp, #12
 801bdd2:	9301      	str	r3, [sp, #4]
 801bdd4:	ab02      	add	r3, sp, #8
 801bdd6:	9300      	str	r3, [sp, #0]
 801bdd8:	ec45 4b10 	vmov	d0, r4, r5
 801bddc:	4653      	mov	r3, sl
 801bdde:	4632      	mov	r2, r6
 801bde0:	f001 fff6 	bl	801ddd0 <_dtoa_r>
 801bde4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801bde8:	4607      	mov	r7, r0
 801bdea:	d102      	bne.n	801bdf2 <__cvt+0x66>
 801bdec:	f019 0f01 	tst.w	r9, #1
 801bdf0:	d022      	beq.n	801be38 <__cvt+0xac>
 801bdf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801bdf6:	eb07 0906 	add.w	r9, r7, r6
 801bdfa:	d110      	bne.n	801be1e <__cvt+0x92>
 801bdfc:	783b      	ldrb	r3, [r7, #0]
 801bdfe:	2b30      	cmp	r3, #48	; 0x30
 801be00:	d10a      	bne.n	801be18 <__cvt+0x8c>
 801be02:	2200      	movs	r2, #0
 801be04:	2300      	movs	r3, #0
 801be06:	4620      	mov	r0, r4
 801be08:	4629      	mov	r1, r5
 801be0a:	f7e4 fe75 	bl	8000af8 <__aeabi_dcmpeq>
 801be0e:	b918      	cbnz	r0, 801be18 <__cvt+0x8c>
 801be10:	f1c6 0601 	rsb	r6, r6, #1
 801be14:	f8ca 6000 	str.w	r6, [sl]
 801be18:	f8da 3000 	ldr.w	r3, [sl]
 801be1c:	4499      	add	r9, r3
 801be1e:	2200      	movs	r2, #0
 801be20:	2300      	movs	r3, #0
 801be22:	4620      	mov	r0, r4
 801be24:	4629      	mov	r1, r5
 801be26:	f7e4 fe67 	bl	8000af8 <__aeabi_dcmpeq>
 801be2a:	b108      	cbz	r0, 801be30 <__cvt+0xa4>
 801be2c:	f8cd 900c 	str.w	r9, [sp, #12]
 801be30:	2230      	movs	r2, #48	; 0x30
 801be32:	9b03      	ldr	r3, [sp, #12]
 801be34:	454b      	cmp	r3, r9
 801be36:	d307      	bcc.n	801be48 <__cvt+0xbc>
 801be38:	9b03      	ldr	r3, [sp, #12]
 801be3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801be3c:	1bdb      	subs	r3, r3, r7
 801be3e:	4638      	mov	r0, r7
 801be40:	6013      	str	r3, [r2, #0]
 801be42:	b004      	add	sp, #16
 801be44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be48:	1c59      	adds	r1, r3, #1
 801be4a:	9103      	str	r1, [sp, #12]
 801be4c:	701a      	strb	r2, [r3, #0]
 801be4e:	e7f0      	b.n	801be32 <__cvt+0xa6>

0801be50 <__exponent>:
 801be50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801be52:	4603      	mov	r3, r0
 801be54:	2900      	cmp	r1, #0
 801be56:	bfb8      	it	lt
 801be58:	4249      	neglt	r1, r1
 801be5a:	f803 2b02 	strb.w	r2, [r3], #2
 801be5e:	bfb4      	ite	lt
 801be60:	222d      	movlt	r2, #45	; 0x2d
 801be62:	222b      	movge	r2, #43	; 0x2b
 801be64:	2909      	cmp	r1, #9
 801be66:	7042      	strb	r2, [r0, #1]
 801be68:	dd2a      	ble.n	801bec0 <__exponent+0x70>
 801be6a:	f10d 0407 	add.w	r4, sp, #7
 801be6e:	46a4      	mov	ip, r4
 801be70:	270a      	movs	r7, #10
 801be72:	46a6      	mov	lr, r4
 801be74:	460a      	mov	r2, r1
 801be76:	fb91 f6f7 	sdiv	r6, r1, r7
 801be7a:	fb07 1516 	mls	r5, r7, r6, r1
 801be7e:	3530      	adds	r5, #48	; 0x30
 801be80:	2a63      	cmp	r2, #99	; 0x63
 801be82:	f104 34ff 	add.w	r4, r4, #4294967295
 801be86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801be8a:	4631      	mov	r1, r6
 801be8c:	dcf1      	bgt.n	801be72 <__exponent+0x22>
 801be8e:	3130      	adds	r1, #48	; 0x30
 801be90:	f1ae 0502 	sub.w	r5, lr, #2
 801be94:	f804 1c01 	strb.w	r1, [r4, #-1]
 801be98:	1c44      	adds	r4, r0, #1
 801be9a:	4629      	mov	r1, r5
 801be9c:	4561      	cmp	r1, ip
 801be9e:	d30a      	bcc.n	801beb6 <__exponent+0x66>
 801bea0:	f10d 0209 	add.w	r2, sp, #9
 801bea4:	eba2 020e 	sub.w	r2, r2, lr
 801bea8:	4565      	cmp	r5, ip
 801beaa:	bf88      	it	hi
 801beac:	2200      	movhi	r2, #0
 801beae:	4413      	add	r3, r2
 801beb0:	1a18      	subs	r0, r3, r0
 801beb2:	b003      	add	sp, #12
 801beb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801beb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801beba:	f804 2f01 	strb.w	r2, [r4, #1]!
 801bebe:	e7ed      	b.n	801be9c <__exponent+0x4c>
 801bec0:	2330      	movs	r3, #48	; 0x30
 801bec2:	3130      	adds	r1, #48	; 0x30
 801bec4:	7083      	strb	r3, [r0, #2]
 801bec6:	70c1      	strb	r1, [r0, #3]
 801bec8:	1d03      	adds	r3, r0, #4
 801beca:	e7f1      	b.n	801beb0 <__exponent+0x60>

0801becc <_printf_float>:
 801becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bed0:	ed2d 8b02 	vpush	{d8}
 801bed4:	b08d      	sub	sp, #52	; 0x34
 801bed6:	460c      	mov	r4, r1
 801bed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801bedc:	4616      	mov	r6, r2
 801bede:	461f      	mov	r7, r3
 801bee0:	4605      	mov	r5, r0
 801bee2:	f003 fa9b 	bl	801f41c <_localeconv_r>
 801bee6:	f8d0 a000 	ldr.w	sl, [r0]
 801beea:	4650      	mov	r0, sl
 801beec:	f7e4 f982 	bl	80001f4 <strlen>
 801bef0:	2300      	movs	r3, #0
 801bef2:	930a      	str	r3, [sp, #40]	; 0x28
 801bef4:	6823      	ldr	r3, [r4, #0]
 801bef6:	9305      	str	r3, [sp, #20]
 801bef8:	f8d8 3000 	ldr.w	r3, [r8]
 801befc:	f894 b018 	ldrb.w	fp, [r4, #24]
 801bf00:	3307      	adds	r3, #7
 801bf02:	f023 0307 	bic.w	r3, r3, #7
 801bf06:	f103 0208 	add.w	r2, r3, #8
 801bf0a:	f8c8 2000 	str.w	r2, [r8]
 801bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801bf16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801bf1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801bf1e:	9307      	str	r3, [sp, #28]
 801bf20:	f8cd 8018 	str.w	r8, [sp, #24]
 801bf24:	ee08 0a10 	vmov	s16, r0
 801bf28:	4b9f      	ldr	r3, [pc, #636]	; (801c1a8 <_printf_float+0x2dc>)
 801bf2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bf2e:	f04f 32ff 	mov.w	r2, #4294967295
 801bf32:	f7e4 fe13 	bl	8000b5c <__aeabi_dcmpun>
 801bf36:	bb88      	cbnz	r0, 801bf9c <_printf_float+0xd0>
 801bf38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bf3c:	4b9a      	ldr	r3, [pc, #616]	; (801c1a8 <_printf_float+0x2dc>)
 801bf3e:	f04f 32ff 	mov.w	r2, #4294967295
 801bf42:	f7e4 fded 	bl	8000b20 <__aeabi_dcmple>
 801bf46:	bb48      	cbnz	r0, 801bf9c <_printf_float+0xd0>
 801bf48:	2200      	movs	r2, #0
 801bf4a:	2300      	movs	r3, #0
 801bf4c:	4640      	mov	r0, r8
 801bf4e:	4649      	mov	r1, r9
 801bf50:	f7e4 fddc 	bl	8000b0c <__aeabi_dcmplt>
 801bf54:	b110      	cbz	r0, 801bf5c <_printf_float+0x90>
 801bf56:	232d      	movs	r3, #45	; 0x2d
 801bf58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bf5c:	4b93      	ldr	r3, [pc, #588]	; (801c1ac <_printf_float+0x2e0>)
 801bf5e:	4894      	ldr	r0, [pc, #592]	; (801c1b0 <_printf_float+0x2e4>)
 801bf60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801bf64:	bf94      	ite	ls
 801bf66:	4698      	movls	r8, r3
 801bf68:	4680      	movhi	r8, r0
 801bf6a:	2303      	movs	r3, #3
 801bf6c:	6123      	str	r3, [r4, #16]
 801bf6e:	9b05      	ldr	r3, [sp, #20]
 801bf70:	f023 0204 	bic.w	r2, r3, #4
 801bf74:	6022      	str	r2, [r4, #0]
 801bf76:	f04f 0900 	mov.w	r9, #0
 801bf7a:	9700      	str	r7, [sp, #0]
 801bf7c:	4633      	mov	r3, r6
 801bf7e:	aa0b      	add	r2, sp, #44	; 0x2c
 801bf80:	4621      	mov	r1, r4
 801bf82:	4628      	mov	r0, r5
 801bf84:	f000 f9d8 	bl	801c338 <_printf_common>
 801bf88:	3001      	adds	r0, #1
 801bf8a:	f040 8090 	bne.w	801c0ae <_printf_float+0x1e2>
 801bf8e:	f04f 30ff 	mov.w	r0, #4294967295
 801bf92:	b00d      	add	sp, #52	; 0x34
 801bf94:	ecbd 8b02 	vpop	{d8}
 801bf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf9c:	4642      	mov	r2, r8
 801bf9e:	464b      	mov	r3, r9
 801bfa0:	4640      	mov	r0, r8
 801bfa2:	4649      	mov	r1, r9
 801bfa4:	f7e4 fdda 	bl	8000b5c <__aeabi_dcmpun>
 801bfa8:	b140      	cbz	r0, 801bfbc <_printf_float+0xf0>
 801bfaa:	464b      	mov	r3, r9
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	bfbc      	itt	lt
 801bfb0:	232d      	movlt	r3, #45	; 0x2d
 801bfb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bfb6:	487f      	ldr	r0, [pc, #508]	; (801c1b4 <_printf_float+0x2e8>)
 801bfb8:	4b7f      	ldr	r3, [pc, #508]	; (801c1b8 <_printf_float+0x2ec>)
 801bfba:	e7d1      	b.n	801bf60 <_printf_float+0x94>
 801bfbc:	6863      	ldr	r3, [r4, #4]
 801bfbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801bfc2:	9206      	str	r2, [sp, #24]
 801bfc4:	1c5a      	adds	r2, r3, #1
 801bfc6:	d13f      	bne.n	801c048 <_printf_float+0x17c>
 801bfc8:	2306      	movs	r3, #6
 801bfca:	6063      	str	r3, [r4, #4]
 801bfcc:	9b05      	ldr	r3, [sp, #20]
 801bfce:	6861      	ldr	r1, [r4, #4]
 801bfd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801bfd4:	2300      	movs	r3, #0
 801bfd6:	9303      	str	r3, [sp, #12]
 801bfd8:	ab0a      	add	r3, sp, #40	; 0x28
 801bfda:	e9cd b301 	strd	fp, r3, [sp, #4]
 801bfde:	ab09      	add	r3, sp, #36	; 0x24
 801bfe0:	ec49 8b10 	vmov	d0, r8, r9
 801bfe4:	9300      	str	r3, [sp, #0]
 801bfe6:	6022      	str	r2, [r4, #0]
 801bfe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801bfec:	4628      	mov	r0, r5
 801bfee:	f7ff fecd 	bl	801bd8c <__cvt>
 801bff2:	9b06      	ldr	r3, [sp, #24]
 801bff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bff6:	2b47      	cmp	r3, #71	; 0x47
 801bff8:	4680      	mov	r8, r0
 801bffa:	d108      	bne.n	801c00e <_printf_float+0x142>
 801bffc:	1cc8      	adds	r0, r1, #3
 801bffe:	db02      	blt.n	801c006 <_printf_float+0x13a>
 801c000:	6863      	ldr	r3, [r4, #4]
 801c002:	4299      	cmp	r1, r3
 801c004:	dd41      	ble.n	801c08a <_printf_float+0x1be>
 801c006:	f1ab 0b02 	sub.w	fp, fp, #2
 801c00a:	fa5f fb8b 	uxtb.w	fp, fp
 801c00e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c012:	d820      	bhi.n	801c056 <_printf_float+0x18a>
 801c014:	3901      	subs	r1, #1
 801c016:	465a      	mov	r2, fp
 801c018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c01c:	9109      	str	r1, [sp, #36]	; 0x24
 801c01e:	f7ff ff17 	bl	801be50 <__exponent>
 801c022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c024:	1813      	adds	r3, r2, r0
 801c026:	2a01      	cmp	r2, #1
 801c028:	4681      	mov	r9, r0
 801c02a:	6123      	str	r3, [r4, #16]
 801c02c:	dc02      	bgt.n	801c034 <_printf_float+0x168>
 801c02e:	6822      	ldr	r2, [r4, #0]
 801c030:	07d2      	lsls	r2, r2, #31
 801c032:	d501      	bpl.n	801c038 <_printf_float+0x16c>
 801c034:	3301      	adds	r3, #1
 801c036:	6123      	str	r3, [r4, #16]
 801c038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d09c      	beq.n	801bf7a <_printf_float+0xae>
 801c040:	232d      	movs	r3, #45	; 0x2d
 801c042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c046:	e798      	b.n	801bf7a <_printf_float+0xae>
 801c048:	9a06      	ldr	r2, [sp, #24]
 801c04a:	2a47      	cmp	r2, #71	; 0x47
 801c04c:	d1be      	bne.n	801bfcc <_printf_float+0x100>
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d1bc      	bne.n	801bfcc <_printf_float+0x100>
 801c052:	2301      	movs	r3, #1
 801c054:	e7b9      	b.n	801bfca <_printf_float+0xfe>
 801c056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c05a:	d118      	bne.n	801c08e <_printf_float+0x1c2>
 801c05c:	2900      	cmp	r1, #0
 801c05e:	6863      	ldr	r3, [r4, #4]
 801c060:	dd0b      	ble.n	801c07a <_printf_float+0x1ae>
 801c062:	6121      	str	r1, [r4, #16]
 801c064:	b913      	cbnz	r3, 801c06c <_printf_float+0x1a0>
 801c066:	6822      	ldr	r2, [r4, #0]
 801c068:	07d0      	lsls	r0, r2, #31
 801c06a:	d502      	bpl.n	801c072 <_printf_float+0x1a6>
 801c06c:	3301      	adds	r3, #1
 801c06e:	440b      	add	r3, r1
 801c070:	6123      	str	r3, [r4, #16]
 801c072:	65a1      	str	r1, [r4, #88]	; 0x58
 801c074:	f04f 0900 	mov.w	r9, #0
 801c078:	e7de      	b.n	801c038 <_printf_float+0x16c>
 801c07a:	b913      	cbnz	r3, 801c082 <_printf_float+0x1b6>
 801c07c:	6822      	ldr	r2, [r4, #0]
 801c07e:	07d2      	lsls	r2, r2, #31
 801c080:	d501      	bpl.n	801c086 <_printf_float+0x1ba>
 801c082:	3302      	adds	r3, #2
 801c084:	e7f4      	b.n	801c070 <_printf_float+0x1a4>
 801c086:	2301      	movs	r3, #1
 801c088:	e7f2      	b.n	801c070 <_printf_float+0x1a4>
 801c08a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c090:	4299      	cmp	r1, r3
 801c092:	db05      	blt.n	801c0a0 <_printf_float+0x1d4>
 801c094:	6823      	ldr	r3, [r4, #0]
 801c096:	6121      	str	r1, [r4, #16]
 801c098:	07d8      	lsls	r0, r3, #31
 801c09a:	d5ea      	bpl.n	801c072 <_printf_float+0x1a6>
 801c09c:	1c4b      	adds	r3, r1, #1
 801c09e:	e7e7      	b.n	801c070 <_printf_float+0x1a4>
 801c0a0:	2900      	cmp	r1, #0
 801c0a2:	bfd4      	ite	le
 801c0a4:	f1c1 0202 	rsble	r2, r1, #2
 801c0a8:	2201      	movgt	r2, #1
 801c0aa:	4413      	add	r3, r2
 801c0ac:	e7e0      	b.n	801c070 <_printf_float+0x1a4>
 801c0ae:	6823      	ldr	r3, [r4, #0]
 801c0b0:	055a      	lsls	r2, r3, #21
 801c0b2:	d407      	bmi.n	801c0c4 <_printf_float+0x1f8>
 801c0b4:	6923      	ldr	r3, [r4, #16]
 801c0b6:	4642      	mov	r2, r8
 801c0b8:	4631      	mov	r1, r6
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	47b8      	blx	r7
 801c0be:	3001      	adds	r0, #1
 801c0c0:	d12c      	bne.n	801c11c <_printf_float+0x250>
 801c0c2:	e764      	b.n	801bf8e <_printf_float+0xc2>
 801c0c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c0c8:	f240 80e0 	bls.w	801c28c <_printf_float+0x3c0>
 801c0cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	f7e4 fd10 	bl	8000af8 <__aeabi_dcmpeq>
 801c0d8:	2800      	cmp	r0, #0
 801c0da:	d034      	beq.n	801c146 <_printf_float+0x27a>
 801c0dc:	4a37      	ldr	r2, [pc, #220]	; (801c1bc <_printf_float+0x2f0>)
 801c0de:	2301      	movs	r3, #1
 801c0e0:	4631      	mov	r1, r6
 801c0e2:	4628      	mov	r0, r5
 801c0e4:	47b8      	blx	r7
 801c0e6:	3001      	adds	r0, #1
 801c0e8:	f43f af51 	beq.w	801bf8e <_printf_float+0xc2>
 801c0ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c0f0:	429a      	cmp	r2, r3
 801c0f2:	db02      	blt.n	801c0fa <_printf_float+0x22e>
 801c0f4:	6823      	ldr	r3, [r4, #0]
 801c0f6:	07d8      	lsls	r0, r3, #31
 801c0f8:	d510      	bpl.n	801c11c <_printf_float+0x250>
 801c0fa:	ee18 3a10 	vmov	r3, s16
 801c0fe:	4652      	mov	r2, sl
 801c100:	4631      	mov	r1, r6
 801c102:	4628      	mov	r0, r5
 801c104:	47b8      	blx	r7
 801c106:	3001      	adds	r0, #1
 801c108:	f43f af41 	beq.w	801bf8e <_printf_float+0xc2>
 801c10c:	f04f 0800 	mov.w	r8, #0
 801c110:	f104 091a 	add.w	r9, r4, #26
 801c114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c116:	3b01      	subs	r3, #1
 801c118:	4543      	cmp	r3, r8
 801c11a:	dc09      	bgt.n	801c130 <_printf_float+0x264>
 801c11c:	6823      	ldr	r3, [r4, #0]
 801c11e:	079b      	lsls	r3, r3, #30
 801c120:	f100 8105 	bmi.w	801c32e <_printf_float+0x462>
 801c124:	68e0      	ldr	r0, [r4, #12]
 801c126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c128:	4298      	cmp	r0, r3
 801c12a:	bfb8      	it	lt
 801c12c:	4618      	movlt	r0, r3
 801c12e:	e730      	b.n	801bf92 <_printf_float+0xc6>
 801c130:	2301      	movs	r3, #1
 801c132:	464a      	mov	r2, r9
 801c134:	4631      	mov	r1, r6
 801c136:	4628      	mov	r0, r5
 801c138:	47b8      	blx	r7
 801c13a:	3001      	adds	r0, #1
 801c13c:	f43f af27 	beq.w	801bf8e <_printf_float+0xc2>
 801c140:	f108 0801 	add.w	r8, r8, #1
 801c144:	e7e6      	b.n	801c114 <_printf_float+0x248>
 801c146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c148:	2b00      	cmp	r3, #0
 801c14a:	dc39      	bgt.n	801c1c0 <_printf_float+0x2f4>
 801c14c:	4a1b      	ldr	r2, [pc, #108]	; (801c1bc <_printf_float+0x2f0>)
 801c14e:	2301      	movs	r3, #1
 801c150:	4631      	mov	r1, r6
 801c152:	4628      	mov	r0, r5
 801c154:	47b8      	blx	r7
 801c156:	3001      	adds	r0, #1
 801c158:	f43f af19 	beq.w	801bf8e <_printf_float+0xc2>
 801c15c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c160:	4313      	orrs	r3, r2
 801c162:	d102      	bne.n	801c16a <_printf_float+0x29e>
 801c164:	6823      	ldr	r3, [r4, #0]
 801c166:	07d9      	lsls	r1, r3, #31
 801c168:	d5d8      	bpl.n	801c11c <_printf_float+0x250>
 801c16a:	ee18 3a10 	vmov	r3, s16
 801c16e:	4652      	mov	r2, sl
 801c170:	4631      	mov	r1, r6
 801c172:	4628      	mov	r0, r5
 801c174:	47b8      	blx	r7
 801c176:	3001      	adds	r0, #1
 801c178:	f43f af09 	beq.w	801bf8e <_printf_float+0xc2>
 801c17c:	f04f 0900 	mov.w	r9, #0
 801c180:	f104 0a1a 	add.w	sl, r4, #26
 801c184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c186:	425b      	negs	r3, r3
 801c188:	454b      	cmp	r3, r9
 801c18a:	dc01      	bgt.n	801c190 <_printf_float+0x2c4>
 801c18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c18e:	e792      	b.n	801c0b6 <_printf_float+0x1ea>
 801c190:	2301      	movs	r3, #1
 801c192:	4652      	mov	r2, sl
 801c194:	4631      	mov	r1, r6
 801c196:	4628      	mov	r0, r5
 801c198:	47b8      	blx	r7
 801c19a:	3001      	adds	r0, #1
 801c19c:	f43f aef7 	beq.w	801bf8e <_printf_float+0xc2>
 801c1a0:	f109 0901 	add.w	r9, r9, #1
 801c1a4:	e7ee      	b.n	801c184 <_printf_float+0x2b8>
 801c1a6:	bf00      	nop
 801c1a8:	7fefffff 	.word	0x7fefffff
 801c1ac:	08022b98 	.word	0x08022b98
 801c1b0:	08022b9c 	.word	0x08022b9c
 801c1b4:	08022ba4 	.word	0x08022ba4
 801c1b8:	08022ba0 	.word	0x08022ba0
 801c1bc:	08022ba8 	.word	0x08022ba8
 801c1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c1c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c1c4:	429a      	cmp	r2, r3
 801c1c6:	bfa8      	it	ge
 801c1c8:	461a      	movge	r2, r3
 801c1ca:	2a00      	cmp	r2, #0
 801c1cc:	4691      	mov	r9, r2
 801c1ce:	dc37      	bgt.n	801c240 <_printf_float+0x374>
 801c1d0:	f04f 0b00 	mov.w	fp, #0
 801c1d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c1d8:	f104 021a 	add.w	r2, r4, #26
 801c1dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c1de:	9305      	str	r3, [sp, #20]
 801c1e0:	eba3 0309 	sub.w	r3, r3, r9
 801c1e4:	455b      	cmp	r3, fp
 801c1e6:	dc33      	bgt.n	801c250 <_printf_float+0x384>
 801c1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c1ec:	429a      	cmp	r2, r3
 801c1ee:	db3b      	blt.n	801c268 <_printf_float+0x39c>
 801c1f0:	6823      	ldr	r3, [r4, #0]
 801c1f2:	07da      	lsls	r2, r3, #31
 801c1f4:	d438      	bmi.n	801c268 <_printf_float+0x39c>
 801c1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1f8:	9a05      	ldr	r2, [sp, #20]
 801c1fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c1fc:	1a9a      	subs	r2, r3, r2
 801c1fe:	eba3 0901 	sub.w	r9, r3, r1
 801c202:	4591      	cmp	r9, r2
 801c204:	bfa8      	it	ge
 801c206:	4691      	movge	r9, r2
 801c208:	f1b9 0f00 	cmp.w	r9, #0
 801c20c:	dc35      	bgt.n	801c27a <_printf_float+0x3ae>
 801c20e:	f04f 0800 	mov.w	r8, #0
 801c212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c216:	f104 0a1a 	add.w	sl, r4, #26
 801c21a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c21e:	1a9b      	subs	r3, r3, r2
 801c220:	eba3 0309 	sub.w	r3, r3, r9
 801c224:	4543      	cmp	r3, r8
 801c226:	f77f af79 	ble.w	801c11c <_printf_float+0x250>
 801c22a:	2301      	movs	r3, #1
 801c22c:	4652      	mov	r2, sl
 801c22e:	4631      	mov	r1, r6
 801c230:	4628      	mov	r0, r5
 801c232:	47b8      	blx	r7
 801c234:	3001      	adds	r0, #1
 801c236:	f43f aeaa 	beq.w	801bf8e <_printf_float+0xc2>
 801c23a:	f108 0801 	add.w	r8, r8, #1
 801c23e:	e7ec      	b.n	801c21a <_printf_float+0x34e>
 801c240:	4613      	mov	r3, r2
 801c242:	4631      	mov	r1, r6
 801c244:	4642      	mov	r2, r8
 801c246:	4628      	mov	r0, r5
 801c248:	47b8      	blx	r7
 801c24a:	3001      	adds	r0, #1
 801c24c:	d1c0      	bne.n	801c1d0 <_printf_float+0x304>
 801c24e:	e69e      	b.n	801bf8e <_printf_float+0xc2>
 801c250:	2301      	movs	r3, #1
 801c252:	4631      	mov	r1, r6
 801c254:	4628      	mov	r0, r5
 801c256:	9205      	str	r2, [sp, #20]
 801c258:	47b8      	blx	r7
 801c25a:	3001      	adds	r0, #1
 801c25c:	f43f ae97 	beq.w	801bf8e <_printf_float+0xc2>
 801c260:	9a05      	ldr	r2, [sp, #20]
 801c262:	f10b 0b01 	add.w	fp, fp, #1
 801c266:	e7b9      	b.n	801c1dc <_printf_float+0x310>
 801c268:	ee18 3a10 	vmov	r3, s16
 801c26c:	4652      	mov	r2, sl
 801c26e:	4631      	mov	r1, r6
 801c270:	4628      	mov	r0, r5
 801c272:	47b8      	blx	r7
 801c274:	3001      	adds	r0, #1
 801c276:	d1be      	bne.n	801c1f6 <_printf_float+0x32a>
 801c278:	e689      	b.n	801bf8e <_printf_float+0xc2>
 801c27a:	9a05      	ldr	r2, [sp, #20]
 801c27c:	464b      	mov	r3, r9
 801c27e:	4442      	add	r2, r8
 801c280:	4631      	mov	r1, r6
 801c282:	4628      	mov	r0, r5
 801c284:	47b8      	blx	r7
 801c286:	3001      	adds	r0, #1
 801c288:	d1c1      	bne.n	801c20e <_printf_float+0x342>
 801c28a:	e680      	b.n	801bf8e <_printf_float+0xc2>
 801c28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c28e:	2a01      	cmp	r2, #1
 801c290:	dc01      	bgt.n	801c296 <_printf_float+0x3ca>
 801c292:	07db      	lsls	r3, r3, #31
 801c294:	d538      	bpl.n	801c308 <_printf_float+0x43c>
 801c296:	2301      	movs	r3, #1
 801c298:	4642      	mov	r2, r8
 801c29a:	4631      	mov	r1, r6
 801c29c:	4628      	mov	r0, r5
 801c29e:	47b8      	blx	r7
 801c2a0:	3001      	adds	r0, #1
 801c2a2:	f43f ae74 	beq.w	801bf8e <_printf_float+0xc2>
 801c2a6:	ee18 3a10 	vmov	r3, s16
 801c2aa:	4652      	mov	r2, sl
 801c2ac:	4631      	mov	r1, r6
 801c2ae:	4628      	mov	r0, r5
 801c2b0:	47b8      	blx	r7
 801c2b2:	3001      	adds	r0, #1
 801c2b4:	f43f ae6b 	beq.w	801bf8e <_printf_float+0xc2>
 801c2b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c2bc:	2200      	movs	r2, #0
 801c2be:	2300      	movs	r3, #0
 801c2c0:	f7e4 fc1a 	bl	8000af8 <__aeabi_dcmpeq>
 801c2c4:	b9d8      	cbnz	r0, 801c2fe <_printf_float+0x432>
 801c2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2c8:	f108 0201 	add.w	r2, r8, #1
 801c2cc:	3b01      	subs	r3, #1
 801c2ce:	4631      	mov	r1, r6
 801c2d0:	4628      	mov	r0, r5
 801c2d2:	47b8      	blx	r7
 801c2d4:	3001      	adds	r0, #1
 801c2d6:	d10e      	bne.n	801c2f6 <_printf_float+0x42a>
 801c2d8:	e659      	b.n	801bf8e <_printf_float+0xc2>
 801c2da:	2301      	movs	r3, #1
 801c2dc:	4652      	mov	r2, sl
 801c2de:	4631      	mov	r1, r6
 801c2e0:	4628      	mov	r0, r5
 801c2e2:	47b8      	blx	r7
 801c2e4:	3001      	adds	r0, #1
 801c2e6:	f43f ae52 	beq.w	801bf8e <_printf_float+0xc2>
 801c2ea:	f108 0801 	add.w	r8, r8, #1
 801c2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2f0:	3b01      	subs	r3, #1
 801c2f2:	4543      	cmp	r3, r8
 801c2f4:	dcf1      	bgt.n	801c2da <_printf_float+0x40e>
 801c2f6:	464b      	mov	r3, r9
 801c2f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c2fc:	e6dc      	b.n	801c0b8 <_printf_float+0x1ec>
 801c2fe:	f04f 0800 	mov.w	r8, #0
 801c302:	f104 0a1a 	add.w	sl, r4, #26
 801c306:	e7f2      	b.n	801c2ee <_printf_float+0x422>
 801c308:	2301      	movs	r3, #1
 801c30a:	4642      	mov	r2, r8
 801c30c:	e7df      	b.n	801c2ce <_printf_float+0x402>
 801c30e:	2301      	movs	r3, #1
 801c310:	464a      	mov	r2, r9
 801c312:	4631      	mov	r1, r6
 801c314:	4628      	mov	r0, r5
 801c316:	47b8      	blx	r7
 801c318:	3001      	adds	r0, #1
 801c31a:	f43f ae38 	beq.w	801bf8e <_printf_float+0xc2>
 801c31e:	f108 0801 	add.w	r8, r8, #1
 801c322:	68e3      	ldr	r3, [r4, #12]
 801c324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c326:	1a5b      	subs	r3, r3, r1
 801c328:	4543      	cmp	r3, r8
 801c32a:	dcf0      	bgt.n	801c30e <_printf_float+0x442>
 801c32c:	e6fa      	b.n	801c124 <_printf_float+0x258>
 801c32e:	f04f 0800 	mov.w	r8, #0
 801c332:	f104 0919 	add.w	r9, r4, #25
 801c336:	e7f4      	b.n	801c322 <_printf_float+0x456>

0801c338 <_printf_common>:
 801c338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c33c:	4616      	mov	r6, r2
 801c33e:	4699      	mov	r9, r3
 801c340:	688a      	ldr	r2, [r1, #8]
 801c342:	690b      	ldr	r3, [r1, #16]
 801c344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c348:	4293      	cmp	r3, r2
 801c34a:	bfb8      	it	lt
 801c34c:	4613      	movlt	r3, r2
 801c34e:	6033      	str	r3, [r6, #0]
 801c350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c354:	4607      	mov	r7, r0
 801c356:	460c      	mov	r4, r1
 801c358:	b10a      	cbz	r2, 801c35e <_printf_common+0x26>
 801c35a:	3301      	adds	r3, #1
 801c35c:	6033      	str	r3, [r6, #0]
 801c35e:	6823      	ldr	r3, [r4, #0]
 801c360:	0699      	lsls	r1, r3, #26
 801c362:	bf42      	ittt	mi
 801c364:	6833      	ldrmi	r3, [r6, #0]
 801c366:	3302      	addmi	r3, #2
 801c368:	6033      	strmi	r3, [r6, #0]
 801c36a:	6825      	ldr	r5, [r4, #0]
 801c36c:	f015 0506 	ands.w	r5, r5, #6
 801c370:	d106      	bne.n	801c380 <_printf_common+0x48>
 801c372:	f104 0a19 	add.w	sl, r4, #25
 801c376:	68e3      	ldr	r3, [r4, #12]
 801c378:	6832      	ldr	r2, [r6, #0]
 801c37a:	1a9b      	subs	r3, r3, r2
 801c37c:	42ab      	cmp	r3, r5
 801c37e:	dc26      	bgt.n	801c3ce <_printf_common+0x96>
 801c380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c384:	1e13      	subs	r3, r2, #0
 801c386:	6822      	ldr	r2, [r4, #0]
 801c388:	bf18      	it	ne
 801c38a:	2301      	movne	r3, #1
 801c38c:	0692      	lsls	r2, r2, #26
 801c38e:	d42b      	bmi.n	801c3e8 <_printf_common+0xb0>
 801c390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c394:	4649      	mov	r1, r9
 801c396:	4638      	mov	r0, r7
 801c398:	47c0      	blx	r8
 801c39a:	3001      	adds	r0, #1
 801c39c:	d01e      	beq.n	801c3dc <_printf_common+0xa4>
 801c39e:	6823      	ldr	r3, [r4, #0]
 801c3a0:	68e5      	ldr	r5, [r4, #12]
 801c3a2:	6832      	ldr	r2, [r6, #0]
 801c3a4:	f003 0306 	and.w	r3, r3, #6
 801c3a8:	2b04      	cmp	r3, #4
 801c3aa:	bf08      	it	eq
 801c3ac:	1aad      	subeq	r5, r5, r2
 801c3ae:	68a3      	ldr	r3, [r4, #8]
 801c3b0:	6922      	ldr	r2, [r4, #16]
 801c3b2:	bf0c      	ite	eq
 801c3b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c3b8:	2500      	movne	r5, #0
 801c3ba:	4293      	cmp	r3, r2
 801c3bc:	bfc4      	itt	gt
 801c3be:	1a9b      	subgt	r3, r3, r2
 801c3c0:	18ed      	addgt	r5, r5, r3
 801c3c2:	2600      	movs	r6, #0
 801c3c4:	341a      	adds	r4, #26
 801c3c6:	42b5      	cmp	r5, r6
 801c3c8:	d11a      	bne.n	801c400 <_printf_common+0xc8>
 801c3ca:	2000      	movs	r0, #0
 801c3cc:	e008      	b.n	801c3e0 <_printf_common+0xa8>
 801c3ce:	2301      	movs	r3, #1
 801c3d0:	4652      	mov	r2, sl
 801c3d2:	4649      	mov	r1, r9
 801c3d4:	4638      	mov	r0, r7
 801c3d6:	47c0      	blx	r8
 801c3d8:	3001      	adds	r0, #1
 801c3da:	d103      	bne.n	801c3e4 <_printf_common+0xac>
 801c3dc:	f04f 30ff 	mov.w	r0, #4294967295
 801c3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3e4:	3501      	adds	r5, #1
 801c3e6:	e7c6      	b.n	801c376 <_printf_common+0x3e>
 801c3e8:	18e1      	adds	r1, r4, r3
 801c3ea:	1c5a      	adds	r2, r3, #1
 801c3ec:	2030      	movs	r0, #48	; 0x30
 801c3ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c3f2:	4422      	add	r2, r4
 801c3f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c3f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c3fc:	3302      	adds	r3, #2
 801c3fe:	e7c7      	b.n	801c390 <_printf_common+0x58>
 801c400:	2301      	movs	r3, #1
 801c402:	4622      	mov	r2, r4
 801c404:	4649      	mov	r1, r9
 801c406:	4638      	mov	r0, r7
 801c408:	47c0      	blx	r8
 801c40a:	3001      	adds	r0, #1
 801c40c:	d0e6      	beq.n	801c3dc <_printf_common+0xa4>
 801c40e:	3601      	adds	r6, #1
 801c410:	e7d9      	b.n	801c3c6 <_printf_common+0x8e>
	...

0801c414 <_printf_i>:
 801c414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c418:	7e0f      	ldrb	r7, [r1, #24]
 801c41a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c41c:	2f78      	cmp	r7, #120	; 0x78
 801c41e:	4691      	mov	r9, r2
 801c420:	4680      	mov	r8, r0
 801c422:	460c      	mov	r4, r1
 801c424:	469a      	mov	sl, r3
 801c426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c42a:	d807      	bhi.n	801c43c <_printf_i+0x28>
 801c42c:	2f62      	cmp	r7, #98	; 0x62
 801c42e:	d80a      	bhi.n	801c446 <_printf_i+0x32>
 801c430:	2f00      	cmp	r7, #0
 801c432:	f000 80d8 	beq.w	801c5e6 <_printf_i+0x1d2>
 801c436:	2f58      	cmp	r7, #88	; 0x58
 801c438:	f000 80a3 	beq.w	801c582 <_printf_i+0x16e>
 801c43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c444:	e03a      	b.n	801c4bc <_printf_i+0xa8>
 801c446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c44a:	2b15      	cmp	r3, #21
 801c44c:	d8f6      	bhi.n	801c43c <_printf_i+0x28>
 801c44e:	a101      	add	r1, pc, #4	; (adr r1, 801c454 <_printf_i+0x40>)
 801c450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c454:	0801c4ad 	.word	0x0801c4ad
 801c458:	0801c4c1 	.word	0x0801c4c1
 801c45c:	0801c43d 	.word	0x0801c43d
 801c460:	0801c43d 	.word	0x0801c43d
 801c464:	0801c43d 	.word	0x0801c43d
 801c468:	0801c43d 	.word	0x0801c43d
 801c46c:	0801c4c1 	.word	0x0801c4c1
 801c470:	0801c43d 	.word	0x0801c43d
 801c474:	0801c43d 	.word	0x0801c43d
 801c478:	0801c43d 	.word	0x0801c43d
 801c47c:	0801c43d 	.word	0x0801c43d
 801c480:	0801c5cd 	.word	0x0801c5cd
 801c484:	0801c4f1 	.word	0x0801c4f1
 801c488:	0801c5af 	.word	0x0801c5af
 801c48c:	0801c43d 	.word	0x0801c43d
 801c490:	0801c43d 	.word	0x0801c43d
 801c494:	0801c5ef 	.word	0x0801c5ef
 801c498:	0801c43d 	.word	0x0801c43d
 801c49c:	0801c4f1 	.word	0x0801c4f1
 801c4a0:	0801c43d 	.word	0x0801c43d
 801c4a4:	0801c43d 	.word	0x0801c43d
 801c4a8:	0801c5b7 	.word	0x0801c5b7
 801c4ac:	682b      	ldr	r3, [r5, #0]
 801c4ae:	1d1a      	adds	r2, r3, #4
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	602a      	str	r2, [r5, #0]
 801c4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c4b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c4bc:	2301      	movs	r3, #1
 801c4be:	e0a3      	b.n	801c608 <_printf_i+0x1f4>
 801c4c0:	6820      	ldr	r0, [r4, #0]
 801c4c2:	6829      	ldr	r1, [r5, #0]
 801c4c4:	0606      	lsls	r6, r0, #24
 801c4c6:	f101 0304 	add.w	r3, r1, #4
 801c4ca:	d50a      	bpl.n	801c4e2 <_printf_i+0xce>
 801c4cc:	680e      	ldr	r6, [r1, #0]
 801c4ce:	602b      	str	r3, [r5, #0]
 801c4d0:	2e00      	cmp	r6, #0
 801c4d2:	da03      	bge.n	801c4dc <_printf_i+0xc8>
 801c4d4:	232d      	movs	r3, #45	; 0x2d
 801c4d6:	4276      	negs	r6, r6
 801c4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c4dc:	485e      	ldr	r0, [pc, #376]	; (801c658 <_printf_i+0x244>)
 801c4de:	230a      	movs	r3, #10
 801c4e0:	e019      	b.n	801c516 <_printf_i+0x102>
 801c4e2:	680e      	ldr	r6, [r1, #0]
 801c4e4:	602b      	str	r3, [r5, #0]
 801c4e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c4ea:	bf18      	it	ne
 801c4ec:	b236      	sxthne	r6, r6
 801c4ee:	e7ef      	b.n	801c4d0 <_printf_i+0xbc>
 801c4f0:	682b      	ldr	r3, [r5, #0]
 801c4f2:	6820      	ldr	r0, [r4, #0]
 801c4f4:	1d19      	adds	r1, r3, #4
 801c4f6:	6029      	str	r1, [r5, #0]
 801c4f8:	0601      	lsls	r1, r0, #24
 801c4fa:	d501      	bpl.n	801c500 <_printf_i+0xec>
 801c4fc:	681e      	ldr	r6, [r3, #0]
 801c4fe:	e002      	b.n	801c506 <_printf_i+0xf2>
 801c500:	0646      	lsls	r6, r0, #25
 801c502:	d5fb      	bpl.n	801c4fc <_printf_i+0xe8>
 801c504:	881e      	ldrh	r6, [r3, #0]
 801c506:	4854      	ldr	r0, [pc, #336]	; (801c658 <_printf_i+0x244>)
 801c508:	2f6f      	cmp	r7, #111	; 0x6f
 801c50a:	bf0c      	ite	eq
 801c50c:	2308      	moveq	r3, #8
 801c50e:	230a      	movne	r3, #10
 801c510:	2100      	movs	r1, #0
 801c512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c516:	6865      	ldr	r5, [r4, #4]
 801c518:	60a5      	str	r5, [r4, #8]
 801c51a:	2d00      	cmp	r5, #0
 801c51c:	bfa2      	ittt	ge
 801c51e:	6821      	ldrge	r1, [r4, #0]
 801c520:	f021 0104 	bicge.w	r1, r1, #4
 801c524:	6021      	strge	r1, [r4, #0]
 801c526:	b90e      	cbnz	r6, 801c52c <_printf_i+0x118>
 801c528:	2d00      	cmp	r5, #0
 801c52a:	d04d      	beq.n	801c5c8 <_printf_i+0x1b4>
 801c52c:	4615      	mov	r5, r2
 801c52e:	fbb6 f1f3 	udiv	r1, r6, r3
 801c532:	fb03 6711 	mls	r7, r3, r1, r6
 801c536:	5dc7      	ldrb	r7, [r0, r7]
 801c538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c53c:	4637      	mov	r7, r6
 801c53e:	42bb      	cmp	r3, r7
 801c540:	460e      	mov	r6, r1
 801c542:	d9f4      	bls.n	801c52e <_printf_i+0x11a>
 801c544:	2b08      	cmp	r3, #8
 801c546:	d10b      	bne.n	801c560 <_printf_i+0x14c>
 801c548:	6823      	ldr	r3, [r4, #0]
 801c54a:	07de      	lsls	r6, r3, #31
 801c54c:	d508      	bpl.n	801c560 <_printf_i+0x14c>
 801c54e:	6923      	ldr	r3, [r4, #16]
 801c550:	6861      	ldr	r1, [r4, #4]
 801c552:	4299      	cmp	r1, r3
 801c554:	bfde      	ittt	le
 801c556:	2330      	movle	r3, #48	; 0x30
 801c558:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c55c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c560:	1b52      	subs	r2, r2, r5
 801c562:	6122      	str	r2, [r4, #16]
 801c564:	f8cd a000 	str.w	sl, [sp]
 801c568:	464b      	mov	r3, r9
 801c56a:	aa03      	add	r2, sp, #12
 801c56c:	4621      	mov	r1, r4
 801c56e:	4640      	mov	r0, r8
 801c570:	f7ff fee2 	bl	801c338 <_printf_common>
 801c574:	3001      	adds	r0, #1
 801c576:	d14c      	bne.n	801c612 <_printf_i+0x1fe>
 801c578:	f04f 30ff 	mov.w	r0, #4294967295
 801c57c:	b004      	add	sp, #16
 801c57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c582:	4835      	ldr	r0, [pc, #212]	; (801c658 <_printf_i+0x244>)
 801c584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c588:	6829      	ldr	r1, [r5, #0]
 801c58a:	6823      	ldr	r3, [r4, #0]
 801c58c:	f851 6b04 	ldr.w	r6, [r1], #4
 801c590:	6029      	str	r1, [r5, #0]
 801c592:	061d      	lsls	r5, r3, #24
 801c594:	d514      	bpl.n	801c5c0 <_printf_i+0x1ac>
 801c596:	07df      	lsls	r7, r3, #31
 801c598:	bf44      	itt	mi
 801c59a:	f043 0320 	orrmi.w	r3, r3, #32
 801c59e:	6023      	strmi	r3, [r4, #0]
 801c5a0:	b91e      	cbnz	r6, 801c5aa <_printf_i+0x196>
 801c5a2:	6823      	ldr	r3, [r4, #0]
 801c5a4:	f023 0320 	bic.w	r3, r3, #32
 801c5a8:	6023      	str	r3, [r4, #0]
 801c5aa:	2310      	movs	r3, #16
 801c5ac:	e7b0      	b.n	801c510 <_printf_i+0xfc>
 801c5ae:	6823      	ldr	r3, [r4, #0]
 801c5b0:	f043 0320 	orr.w	r3, r3, #32
 801c5b4:	6023      	str	r3, [r4, #0]
 801c5b6:	2378      	movs	r3, #120	; 0x78
 801c5b8:	4828      	ldr	r0, [pc, #160]	; (801c65c <_printf_i+0x248>)
 801c5ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c5be:	e7e3      	b.n	801c588 <_printf_i+0x174>
 801c5c0:	0659      	lsls	r1, r3, #25
 801c5c2:	bf48      	it	mi
 801c5c4:	b2b6      	uxthmi	r6, r6
 801c5c6:	e7e6      	b.n	801c596 <_printf_i+0x182>
 801c5c8:	4615      	mov	r5, r2
 801c5ca:	e7bb      	b.n	801c544 <_printf_i+0x130>
 801c5cc:	682b      	ldr	r3, [r5, #0]
 801c5ce:	6826      	ldr	r6, [r4, #0]
 801c5d0:	6961      	ldr	r1, [r4, #20]
 801c5d2:	1d18      	adds	r0, r3, #4
 801c5d4:	6028      	str	r0, [r5, #0]
 801c5d6:	0635      	lsls	r5, r6, #24
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	d501      	bpl.n	801c5e0 <_printf_i+0x1cc>
 801c5dc:	6019      	str	r1, [r3, #0]
 801c5de:	e002      	b.n	801c5e6 <_printf_i+0x1d2>
 801c5e0:	0670      	lsls	r0, r6, #25
 801c5e2:	d5fb      	bpl.n	801c5dc <_printf_i+0x1c8>
 801c5e4:	8019      	strh	r1, [r3, #0]
 801c5e6:	2300      	movs	r3, #0
 801c5e8:	6123      	str	r3, [r4, #16]
 801c5ea:	4615      	mov	r5, r2
 801c5ec:	e7ba      	b.n	801c564 <_printf_i+0x150>
 801c5ee:	682b      	ldr	r3, [r5, #0]
 801c5f0:	1d1a      	adds	r2, r3, #4
 801c5f2:	602a      	str	r2, [r5, #0]
 801c5f4:	681d      	ldr	r5, [r3, #0]
 801c5f6:	6862      	ldr	r2, [r4, #4]
 801c5f8:	2100      	movs	r1, #0
 801c5fa:	4628      	mov	r0, r5
 801c5fc:	f7e3 fe08 	bl	8000210 <memchr>
 801c600:	b108      	cbz	r0, 801c606 <_printf_i+0x1f2>
 801c602:	1b40      	subs	r0, r0, r5
 801c604:	6060      	str	r0, [r4, #4]
 801c606:	6863      	ldr	r3, [r4, #4]
 801c608:	6123      	str	r3, [r4, #16]
 801c60a:	2300      	movs	r3, #0
 801c60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c610:	e7a8      	b.n	801c564 <_printf_i+0x150>
 801c612:	6923      	ldr	r3, [r4, #16]
 801c614:	462a      	mov	r2, r5
 801c616:	4649      	mov	r1, r9
 801c618:	4640      	mov	r0, r8
 801c61a:	47d0      	blx	sl
 801c61c:	3001      	adds	r0, #1
 801c61e:	d0ab      	beq.n	801c578 <_printf_i+0x164>
 801c620:	6823      	ldr	r3, [r4, #0]
 801c622:	079b      	lsls	r3, r3, #30
 801c624:	d413      	bmi.n	801c64e <_printf_i+0x23a>
 801c626:	68e0      	ldr	r0, [r4, #12]
 801c628:	9b03      	ldr	r3, [sp, #12]
 801c62a:	4298      	cmp	r0, r3
 801c62c:	bfb8      	it	lt
 801c62e:	4618      	movlt	r0, r3
 801c630:	e7a4      	b.n	801c57c <_printf_i+0x168>
 801c632:	2301      	movs	r3, #1
 801c634:	4632      	mov	r2, r6
 801c636:	4649      	mov	r1, r9
 801c638:	4640      	mov	r0, r8
 801c63a:	47d0      	blx	sl
 801c63c:	3001      	adds	r0, #1
 801c63e:	d09b      	beq.n	801c578 <_printf_i+0x164>
 801c640:	3501      	adds	r5, #1
 801c642:	68e3      	ldr	r3, [r4, #12]
 801c644:	9903      	ldr	r1, [sp, #12]
 801c646:	1a5b      	subs	r3, r3, r1
 801c648:	42ab      	cmp	r3, r5
 801c64a:	dcf2      	bgt.n	801c632 <_printf_i+0x21e>
 801c64c:	e7eb      	b.n	801c626 <_printf_i+0x212>
 801c64e:	2500      	movs	r5, #0
 801c650:	f104 0619 	add.w	r6, r4, #25
 801c654:	e7f5      	b.n	801c642 <_printf_i+0x22e>
 801c656:	bf00      	nop
 801c658:	08022baa 	.word	0x08022baa
 801c65c:	08022bbb 	.word	0x08022bbb

0801c660 <_scanf_float>:
 801c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c664:	b087      	sub	sp, #28
 801c666:	4617      	mov	r7, r2
 801c668:	9303      	str	r3, [sp, #12]
 801c66a:	688b      	ldr	r3, [r1, #8]
 801c66c:	1e5a      	subs	r2, r3, #1
 801c66e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c672:	bf83      	ittte	hi
 801c674:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c678:	195b      	addhi	r3, r3, r5
 801c67a:	9302      	strhi	r3, [sp, #8]
 801c67c:	2300      	movls	r3, #0
 801c67e:	bf86      	itte	hi
 801c680:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c684:	608b      	strhi	r3, [r1, #8]
 801c686:	9302      	strls	r3, [sp, #8]
 801c688:	680b      	ldr	r3, [r1, #0]
 801c68a:	468b      	mov	fp, r1
 801c68c:	2500      	movs	r5, #0
 801c68e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c692:	f84b 3b1c 	str.w	r3, [fp], #28
 801c696:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c69a:	4680      	mov	r8, r0
 801c69c:	460c      	mov	r4, r1
 801c69e:	465e      	mov	r6, fp
 801c6a0:	46aa      	mov	sl, r5
 801c6a2:	46a9      	mov	r9, r5
 801c6a4:	9501      	str	r5, [sp, #4]
 801c6a6:	68a2      	ldr	r2, [r4, #8]
 801c6a8:	b152      	cbz	r2, 801c6c0 <_scanf_float+0x60>
 801c6aa:	683b      	ldr	r3, [r7, #0]
 801c6ac:	781b      	ldrb	r3, [r3, #0]
 801c6ae:	2b4e      	cmp	r3, #78	; 0x4e
 801c6b0:	d864      	bhi.n	801c77c <_scanf_float+0x11c>
 801c6b2:	2b40      	cmp	r3, #64	; 0x40
 801c6b4:	d83c      	bhi.n	801c730 <_scanf_float+0xd0>
 801c6b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c6ba:	b2c8      	uxtb	r0, r1
 801c6bc:	280e      	cmp	r0, #14
 801c6be:	d93a      	bls.n	801c736 <_scanf_float+0xd6>
 801c6c0:	f1b9 0f00 	cmp.w	r9, #0
 801c6c4:	d003      	beq.n	801c6ce <_scanf_float+0x6e>
 801c6c6:	6823      	ldr	r3, [r4, #0]
 801c6c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c6cc:	6023      	str	r3, [r4, #0]
 801c6ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c6d2:	f1ba 0f01 	cmp.w	sl, #1
 801c6d6:	f200 8113 	bhi.w	801c900 <_scanf_float+0x2a0>
 801c6da:	455e      	cmp	r6, fp
 801c6dc:	f200 8105 	bhi.w	801c8ea <_scanf_float+0x28a>
 801c6e0:	2501      	movs	r5, #1
 801c6e2:	4628      	mov	r0, r5
 801c6e4:	b007      	add	sp, #28
 801c6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c6ee:	2a0d      	cmp	r2, #13
 801c6f0:	d8e6      	bhi.n	801c6c0 <_scanf_float+0x60>
 801c6f2:	a101      	add	r1, pc, #4	; (adr r1, 801c6f8 <_scanf_float+0x98>)
 801c6f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c6f8:	0801c837 	.word	0x0801c837
 801c6fc:	0801c6c1 	.word	0x0801c6c1
 801c700:	0801c6c1 	.word	0x0801c6c1
 801c704:	0801c6c1 	.word	0x0801c6c1
 801c708:	0801c897 	.word	0x0801c897
 801c70c:	0801c86f 	.word	0x0801c86f
 801c710:	0801c6c1 	.word	0x0801c6c1
 801c714:	0801c6c1 	.word	0x0801c6c1
 801c718:	0801c845 	.word	0x0801c845
 801c71c:	0801c6c1 	.word	0x0801c6c1
 801c720:	0801c6c1 	.word	0x0801c6c1
 801c724:	0801c6c1 	.word	0x0801c6c1
 801c728:	0801c6c1 	.word	0x0801c6c1
 801c72c:	0801c7fd 	.word	0x0801c7fd
 801c730:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c734:	e7db      	b.n	801c6ee <_scanf_float+0x8e>
 801c736:	290e      	cmp	r1, #14
 801c738:	d8c2      	bhi.n	801c6c0 <_scanf_float+0x60>
 801c73a:	a001      	add	r0, pc, #4	; (adr r0, 801c740 <_scanf_float+0xe0>)
 801c73c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c740:	0801c7ef 	.word	0x0801c7ef
 801c744:	0801c6c1 	.word	0x0801c6c1
 801c748:	0801c7ef 	.word	0x0801c7ef
 801c74c:	0801c883 	.word	0x0801c883
 801c750:	0801c6c1 	.word	0x0801c6c1
 801c754:	0801c79d 	.word	0x0801c79d
 801c758:	0801c7d9 	.word	0x0801c7d9
 801c75c:	0801c7d9 	.word	0x0801c7d9
 801c760:	0801c7d9 	.word	0x0801c7d9
 801c764:	0801c7d9 	.word	0x0801c7d9
 801c768:	0801c7d9 	.word	0x0801c7d9
 801c76c:	0801c7d9 	.word	0x0801c7d9
 801c770:	0801c7d9 	.word	0x0801c7d9
 801c774:	0801c7d9 	.word	0x0801c7d9
 801c778:	0801c7d9 	.word	0x0801c7d9
 801c77c:	2b6e      	cmp	r3, #110	; 0x6e
 801c77e:	d809      	bhi.n	801c794 <_scanf_float+0x134>
 801c780:	2b60      	cmp	r3, #96	; 0x60
 801c782:	d8b2      	bhi.n	801c6ea <_scanf_float+0x8a>
 801c784:	2b54      	cmp	r3, #84	; 0x54
 801c786:	d077      	beq.n	801c878 <_scanf_float+0x218>
 801c788:	2b59      	cmp	r3, #89	; 0x59
 801c78a:	d199      	bne.n	801c6c0 <_scanf_float+0x60>
 801c78c:	2d07      	cmp	r5, #7
 801c78e:	d197      	bne.n	801c6c0 <_scanf_float+0x60>
 801c790:	2508      	movs	r5, #8
 801c792:	e029      	b.n	801c7e8 <_scanf_float+0x188>
 801c794:	2b74      	cmp	r3, #116	; 0x74
 801c796:	d06f      	beq.n	801c878 <_scanf_float+0x218>
 801c798:	2b79      	cmp	r3, #121	; 0x79
 801c79a:	e7f6      	b.n	801c78a <_scanf_float+0x12a>
 801c79c:	6821      	ldr	r1, [r4, #0]
 801c79e:	05c8      	lsls	r0, r1, #23
 801c7a0:	d51a      	bpl.n	801c7d8 <_scanf_float+0x178>
 801c7a2:	9b02      	ldr	r3, [sp, #8]
 801c7a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c7a8:	6021      	str	r1, [r4, #0]
 801c7aa:	f109 0901 	add.w	r9, r9, #1
 801c7ae:	b11b      	cbz	r3, 801c7b8 <_scanf_float+0x158>
 801c7b0:	3b01      	subs	r3, #1
 801c7b2:	3201      	adds	r2, #1
 801c7b4:	9302      	str	r3, [sp, #8]
 801c7b6:	60a2      	str	r2, [r4, #8]
 801c7b8:	68a3      	ldr	r3, [r4, #8]
 801c7ba:	3b01      	subs	r3, #1
 801c7bc:	60a3      	str	r3, [r4, #8]
 801c7be:	6923      	ldr	r3, [r4, #16]
 801c7c0:	3301      	adds	r3, #1
 801c7c2:	6123      	str	r3, [r4, #16]
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	3b01      	subs	r3, #1
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	607b      	str	r3, [r7, #4]
 801c7cc:	f340 8084 	ble.w	801c8d8 <_scanf_float+0x278>
 801c7d0:	683b      	ldr	r3, [r7, #0]
 801c7d2:	3301      	adds	r3, #1
 801c7d4:	603b      	str	r3, [r7, #0]
 801c7d6:	e766      	b.n	801c6a6 <_scanf_float+0x46>
 801c7d8:	eb1a 0f05 	cmn.w	sl, r5
 801c7dc:	f47f af70 	bne.w	801c6c0 <_scanf_float+0x60>
 801c7e0:	6822      	ldr	r2, [r4, #0]
 801c7e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c7e6:	6022      	str	r2, [r4, #0]
 801c7e8:	f806 3b01 	strb.w	r3, [r6], #1
 801c7ec:	e7e4      	b.n	801c7b8 <_scanf_float+0x158>
 801c7ee:	6822      	ldr	r2, [r4, #0]
 801c7f0:	0610      	lsls	r0, r2, #24
 801c7f2:	f57f af65 	bpl.w	801c6c0 <_scanf_float+0x60>
 801c7f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c7fa:	e7f4      	b.n	801c7e6 <_scanf_float+0x186>
 801c7fc:	f1ba 0f00 	cmp.w	sl, #0
 801c800:	d10e      	bne.n	801c820 <_scanf_float+0x1c0>
 801c802:	f1b9 0f00 	cmp.w	r9, #0
 801c806:	d10e      	bne.n	801c826 <_scanf_float+0x1c6>
 801c808:	6822      	ldr	r2, [r4, #0]
 801c80a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c80e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c812:	d108      	bne.n	801c826 <_scanf_float+0x1c6>
 801c814:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c818:	6022      	str	r2, [r4, #0]
 801c81a:	f04f 0a01 	mov.w	sl, #1
 801c81e:	e7e3      	b.n	801c7e8 <_scanf_float+0x188>
 801c820:	f1ba 0f02 	cmp.w	sl, #2
 801c824:	d055      	beq.n	801c8d2 <_scanf_float+0x272>
 801c826:	2d01      	cmp	r5, #1
 801c828:	d002      	beq.n	801c830 <_scanf_float+0x1d0>
 801c82a:	2d04      	cmp	r5, #4
 801c82c:	f47f af48 	bne.w	801c6c0 <_scanf_float+0x60>
 801c830:	3501      	adds	r5, #1
 801c832:	b2ed      	uxtb	r5, r5
 801c834:	e7d8      	b.n	801c7e8 <_scanf_float+0x188>
 801c836:	f1ba 0f01 	cmp.w	sl, #1
 801c83a:	f47f af41 	bne.w	801c6c0 <_scanf_float+0x60>
 801c83e:	f04f 0a02 	mov.w	sl, #2
 801c842:	e7d1      	b.n	801c7e8 <_scanf_float+0x188>
 801c844:	b97d      	cbnz	r5, 801c866 <_scanf_float+0x206>
 801c846:	f1b9 0f00 	cmp.w	r9, #0
 801c84a:	f47f af3c 	bne.w	801c6c6 <_scanf_float+0x66>
 801c84e:	6822      	ldr	r2, [r4, #0]
 801c850:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c854:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c858:	f47f af39 	bne.w	801c6ce <_scanf_float+0x6e>
 801c85c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c860:	6022      	str	r2, [r4, #0]
 801c862:	2501      	movs	r5, #1
 801c864:	e7c0      	b.n	801c7e8 <_scanf_float+0x188>
 801c866:	2d03      	cmp	r5, #3
 801c868:	d0e2      	beq.n	801c830 <_scanf_float+0x1d0>
 801c86a:	2d05      	cmp	r5, #5
 801c86c:	e7de      	b.n	801c82c <_scanf_float+0x1cc>
 801c86e:	2d02      	cmp	r5, #2
 801c870:	f47f af26 	bne.w	801c6c0 <_scanf_float+0x60>
 801c874:	2503      	movs	r5, #3
 801c876:	e7b7      	b.n	801c7e8 <_scanf_float+0x188>
 801c878:	2d06      	cmp	r5, #6
 801c87a:	f47f af21 	bne.w	801c6c0 <_scanf_float+0x60>
 801c87e:	2507      	movs	r5, #7
 801c880:	e7b2      	b.n	801c7e8 <_scanf_float+0x188>
 801c882:	6822      	ldr	r2, [r4, #0]
 801c884:	0591      	lsls	r1, r2, #22
 801c886:	f57f af1b 	bpl.w	801c6c0 <_scanf_float+0x60>
 801c88a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c88e:	6022      	str	r2, [r4, #0]
 801c890:	f8cd 9004 	str.w	r9, [sp, #4]
 801c894:	e7a8      	b.n	801c7e8 <_scanf_float+0x188>
 801c896:	6822      	ldr	r2, [r4, #0]
 801c898:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c89c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c8a0:	d006      	beq.n	801c8b0 <_scanf_float+0x250>
 801c8a2:	0550      	lsls	r0, r2, #21
 801c8a4:	f57f af0c 	bpl.w	801c6c0 <_scanf_float+0x60>
 801c8a8:	f1b9 0f00 	cmp.w	r9, #0
 801c8ac:	f43f af0f 	beq.w	801c6ce <_scanf_float+0x6e>
 801c8b0:	0591      	lsls	r1, r2, #22
 801c8b2:	bf58      	it	pl
 801c8b4:	9901      	ldrpl	r1, [sp, #4]
 801c8b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c8ba:	bf58      	it	pl
 801c8bc:	eba9 0101 	subpl.w	r1, r9, r1
 801c8c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c8c4:	bf58      	it	pl
 801c8c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c8ca:	6022      	str	r2, [r4, #0]
 801c8cc:	f04f 0900 	mov.w	r9, #0
 801c8d0:	e78a      	b.n	801c7e8 <_scanf_float+0x188>
 801c8d2:	f04f 0a03 	mov.w	sl, #3
 801c8d6:	e787      	b.n	801c7e8 <_scanf_float+0x188>
 801c8d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c8dc:	4639      	mov	r1, r7
 801c8de:	4640      	mov	r0, r8
 801c8e0:	4798      	blx	r3
 801c8e2:	2800      	cmp	r0, #0
 801c8e4:	f43f aedf 	beq.w	801c6a6 <_scanf_float+0x46>
 801c8e8:	e6ea      	b.n	801c6c0 <_scanf_float+0x60>
 801c8ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c8ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c8f2:	463a      	mov	r2, r7
 801c8f4:	4640      	mov	r0, r8
 801c8f6:	4798      	blx	r3
 801c8f8:	6923      	ldr	r3, [r4, #16]
 801c8fa:	3b01      	subs	r3, #1
 801c8fc:	6123      	str	r3, [r4, #16]
 801c8fe:	e6ec      	b.n	801c6da <_scanf_float+0x7a>
 801c900:	1e6b      	subs	r3, r5, #1
 801c902:	2b06      	cmp	r3, #6
 801c904:	d825      	bhi.n	801c952 <_scanf_float+0x2f2>
 801c906:	2d02      	cmp	r5, #2
 801c908:	d836      	bhi.n	801c978 <_scanf_float+0x318>
 801c90a:	455e      	cmp	r6, fp
 801c90c:	f67f aee8 	bls.w	801c6e0 <_scanf_float+0x80>
 801c910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c914:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c918:	463a      	mov	r2, r7
 801c91a:	4640      	mov	r0, r8
 801c91c:	4798      	blx	r3
 801c91e:	6923      	ldr	r3, [r4, #16]
 801c920:	3b01      	subs	r3, #1
 801c922:	6123      	str	r3, [r4, #16]
 801c924:	e7f1      	b.n	801c90a <_scanf_float+0x2aa>
 801c926:	9802      	ldr	r0, [sp, #8]
 801c928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c92c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c930:	9002      	str	r0, [sp, #8]
 801c932:	463a      	mov	r2, r7
 801c934:	4640      	mov	r0, r8
 801c936:	4798      	blx	r3
 801c938:	6923      	ldr	r3, [r4, #16]
 801c93a:	3b01      	subs	r3, #1
 801c93c:	6123      	str	r3, [r4, #16]
 801c93e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c942:	fa5f fa8a 	uxtb.w	sl, sl
 801c946:	f1ba 0f02 	cmp.w	sl, #2
 801c94a:	d1ec      	bne.n	801c926 <_scanf_float+0x2c6>
 801c94c:	3d03      	subs	r5, #3
 801c94e:	b2ed      	uxtb	r5, r5
 801c950:	1b76      	subs	r6, r6, r5
 801c952:	6823      	ldr	r3, [r4, #0]
 801c954:	05da      	lsls	r2, r3, #23
 801c956:	d52f      	bpl.n	801c9b8 <_scanf_float+0x358>
 801c958:	055b      	lsls	r3, r3, #21
 801c95a:	d510      	bpl.n	801c97e <_scanf_float+0x31e>
 801c95c:	455e      	cmp	r6, fp
 801c95e:	f67f aebf 	bls.w	801c6e0 <_scanf_float+0x80>
 801c962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c966:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c96a:	463a      	mov	r2, r7
 801c96c:	4640      	mov	r0, r8
 801c96e:	4798      	blx	r3
 801c970:	6923      	ldr	r3, [r4, #16]
 801c972:	3b01      	subs	r3, #1
 801c974:	6123      	str	r3, [r4, #16]
 801c976:	e7f1      	b.n	801c95c <_scanf_float+0x2fc>
 801c978:	46aa      	mov	sl, r5
 801c97a:	9602      	str	r6, [sp, #8]
 801c97c:	e7df      	b.n	801c93e <_scanf_float+0x2de>
 801c97e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c982:	6923      	ldr	r3, [r4, #16]
 801c984:	2965      	cmp	r1, #101	; 0x65
 801c986:	f103 33ff 	add.w	r3, r3, #4294967295
 801c98a:	f106 35ff 	add.w	r5, r6, #4294967295
 801c98e:	6123      	str	r3, [r4, #16]
 801c990:	d00c      	beq.n	801c9ac <_scanf_float+0x34c>
 801c992:	2945      	cmp	r1, #69	; 0x45
 801c994:	d00a      	beq.n	801c9ac <_scanf_float+0x34c>
 801c996:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c99a:	463a      	mov	r2, r7
 801c99c:	4640      	mov	r0, r8
 801c99e:	4798      	blx	r3
 801c9a0:	6923      	ldr	r3, [r4, #16]
 801c9a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c9a6:	3b01      	subs	r3, #1
 801c9a8:	1eb5      	subs	r5, r6, #2
 801c9aa:	6123      	str	r3, [r4, #16]
 801c9ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c9b0:	463a      	mov	r2, r7
 801c9b2:	4640      	mov	r0, r8
 801c9b4:	4798      	blx	r3
 801c9b6:	462e      	mov	r6, r5
 801c9b8:	6825      	ldr	r5, [r4, #0]
 801c9ba:	f015 0510 	ands.w	r5, r5, #16
 801c9be:	d159      	bne.n	801ca74 <_scanf_float+0x414>
 801c9c0:	7035      	strb	r5, [r6, #0]
 801c9c2:	6823      	ldr	r3, [r4, #0]
 801c9c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c9c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9cc:	d11b      	bne.n	801ca06 <_scanf_float+0x3a6>
 801c9ce:	9b01      	ldr	r3, [sp, #4]
 801c9d0:	454b      	cmp	r3, r9
 801c9d2:	eba3 0209 	sub.w	r2, r3, r9
 801c9d6:	d123      	bne.n	801ca20 <_scanf_float+0x3c0>
 801c9d8:	2200      	movs	r2, #0
 801c9da:	4659      	mov	r1, fp
 801c9dc:	4640      	mov	r0, r8
 801c9de:	f000 ff61 	bl	801d8a4 <_strtod_r>
 801c9e2:	6822      	ldr	r2, [r4, #0]
 801c9e4:	9b03      	ldr	r3, [sp, #12]
 801c9e6:	f012 0f02 	tst.w	r2, #2
 801c9ea:	ec57 6b10 	vmov	r6, r7, d0
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	d021      	beq.n	801ca36 <_scanf_float+0x3d6>
 801c9f2:	9903      	ldr	r1, [sp, #12]
 801c9f4:	1d1a      	adds	r2, r3, #4
 801c9f6:	600a      	str	r2, [r1, #0]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	e9c3 6700 	strd	r6, r7, [r3]
 801c9fe:	68e3      	ldr	r3, [r4, #12]
 801ca00:	3301      	adds	r3, #1
 801ca02:	60e3      	str	r3, [r4, #12]
 801ca04:	e66d      	b.n	801c6e2 <_scanf_float+0x82>
 801ca06:	9b04      	ldr	r3, [sp, #16]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d0e5      	beq.n	801c9d8 <_scanf_float+0x378>
 801ca0c:	9905      	ldr	r1, [sp, #20]
 801ca0e:	230a      	movs	r3, #10
 801ca10:	462a      	mov	r2, r5
 801ca12:	3101      	adds	r1, #1
 801ca14:	4640      	mov	r0, r8
 801ca16:	f001 f829 	bl	801da6c <_strtol_r>
 801ca1a:	9b04      	ldr	r3, [sp, #16]
 801ca1c:	9e05      	ldr	r6, [sp, #20]
 801ca1e:	1ac2      	subs	r2, r0, r3
 801ca20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ca24:	429e      	cmp	r6, r3
 801ca26:	bf28      	it	cs
 801ca28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ca2c:	4912      	ldr	r1, [pc, #72]	; (801ca78 <_scanf_float+0x418>)
 801ca2e:	4630      	mov	r0, r6
 801ca30:	f000 f8ca 	bl	801cbc8 <siprintf>
 801ca34:	e7d0      	b.n	801c9d8 <_scanf_float+0x378>
 801ca36:	9903      	ldr	r1, [sp, #12]
 801ca38:	f012 0f04 	tst.w	r2, #4
 801ca3c:	f103 0204 	add.w	r2, r3, #4
 801ca40:	600a      	str	r2, [r1, #0]
 801ca42:	d1d9      	bne.n	801c9f8 <_scanf_float+0x398>
 801ca44:	f8d3 8000 	ldr.w	r8, [r3]
 801ca48:	ee10 2a10 	vmov	r2, s0
 801ca4c:	ee10 0a10 	vmov	r0, s0
 801ca50:	463b      	mov	r3, r7
 801ca52:	4639      	mov	r1, r7
 801ca54:	f7e4 f882 	bl	8000b5c <__aeabi_dcmpun>
 801ca58:	b128      	cbz	r0, 801ca66 <_scanf_float+0x406>
 801ca5a:	4808      	ldr	r0, [pc, #32]	; (801ca7c <_scanf_float+0x41c>)
 801ca5c:	f000 f8ae 	bl	801cbbc <nanf>
 801ca60:	ed88 0a00 	vstr	s0, [r8]
 801ca64:	e7cb      	b.n	801c9fe <_scanf_float+0x39e>
 801ca66:	4630      	mov	r0, r6
 801ca68:	4639      	mov	r1, r7
 801ca6a:	f7e4 f8d5 	bl	8000c18 <__aeabi_d2f>
 801ca6e:	f8c8 0000 	str.w	r0, [r8]
 801ca72:	e7c4      	b.n	801c9fe <_scanf_float+0x39e>
 801ca74:	2500      	movs	r5, #0
 801ca76:	e634      	b.n	801c6e2 <_scanf_float+0x82>
 801ca78:	08022bcc 	.word	0x08022bcc
 801ca7c:	08022cd7 	.word	0x08022cd7

0801ca80 <iprintf>:
 801ca80:	b40f      	push	{r0, r1, r2, r3}
 801ca82:	4b0a      	ldr	r3, [pc, #40]	; (801caac <iprintf+0x2c>)
 801ca84:	b513      	push	{r0, r1, r4, lr}
 801ca86:	681c      	ldr	r4, [r3, #0]
 801ca88:	b124      	cbz	r4, 801ca94 <iprintf+0x14>
 801ca8a:	69a3      	ldr	r3, [r4, #24]
 801ca8c:	b913      	cbnz	r3, 801ca94 <iprintf+0x14>
 801ca8e:	4620      	mov	r0, r4
 801ca90:	f002 f8a6 	bl	801ebe0 <__sinit>
 801ca94:	ab05      	add	r3, sp, #20
 801ca96:	9a04      	ldr	r2, [sp, #16]
 801ca98:	68a1      	ldr	r1, [r4, #8]
 801ca9a:	9301      	str	r3, [sp, #4]
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	f003 fba1 	bl	80201e4 <_vfiprintf_r>
 801caa2:	b002      	add	sp, #8
 801caa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801caa8:	b004      	add	sp, #16
 801caaa:	4770      	bx	lr
 801caac:	20000164 	.word	0x20000164

0801cab0 <_puts_r>:
 801cab0:	b570      	push	{r4, r5, r6, lr}
 801cab2:	460e      	mov	r6, r1
 801cab4:	4605      	mov	r5, r0
 801cab6:	b118      	cbz	r0, 801cac0 <_puts_r+0x10>
 801cab8:	6983      	ldr	r3, [r0, #24]
 801caba:	b90b      	cbnz	r3, 801cac0 <_puts_r+0x10>
 801cabc:	f002 f890 	bl	801ebe0 <__sinit>
 801cac0:	69ab      	ldr	r3, [r5, #24]
 801cac2:	68ac      	ldr	r4, [r5, #8]
 801cac4:	b913      	cbnz	r3, 801cacc <_puts_r+0x1c>
 801cac6:	4628      	mov	r0, r5
 801cac8:	f002 f88a 	bl	801ebe0 <__sinit>
 801cacc:	4b2c      	ldr	r3, [pc, #176]	; (801cb80 <_puts_r+0xd0>)
 801cace:	429c      	cmp	r4, r3
 801cad0:	d120      	bne.n	801cb14 <_puts_r+0x64>
 801cad2:	686c      	ldr	r4, [r5, #4]
 801cad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cad6:	07db      	lsls	r3, r3, #31
 801cad8:	d405      	bmi.n	801cae6 <_puts_r+0x36>
 801cada:	89a3      	ldrh	r3, [r4, #12]
 801cadc:	0598      	lsls	r0, r3, #22
 801cade:	d402      	bmi.n	801cae6 <_puts_r+0x36>
 801cae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cae2:	f7ff f838 	bl	801bb56 <__retarget_lock_acquire_recursive>
 801cae6:	89a3      	ldrh	r3, [r4, #12]
 801cae8:	0719      	lsls	r1, r3, #28
 801caea:	d51d      	bpl.n	801cb28 <_puts_r+0x78>
 801caec:	6923      	ldr	r3, [r4, #16]
 801caee:	b1db      	cbz	r3, 801cb28 <_puts_r+0x78>
 801caf0:	3e01      	subs	r6, #1
 801caf2:	68a3      	ldr	r3, [r4, #8]
 801caf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801caf8:	3b01      	subs	r3, #1
 801cafa:	60a3      	str	r3, [r4, #8]
 801cafc:	bb39      	cbnz	r1, 801cb4e <_puts_r+0x9e>
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	da38      	bge.n	801cb74 <_puts_r+0xc4>
 801cb02:	4622      	mov	r2, r4
 801cb04:	210a      	movs	r1, #10
 801cb06:	4628      	mov	r0, r5
 801cb08:	f000 fff6 	bl	801daf8 <__swbuf_r>
 801cb0c:	3001      	adds	r0, #1
 801cb0e:	d011      	beq.n	801cb34 <_puts_r+0x84>
 801cb10:	250a      	movs	r5, #10
 801cb12:	e011      	b.n	801cb38 <_puts_r+0x88>
 801cb14:	4b1b      	ldr	r3, [pc, #108]	; (801cb84 <_puts_r+0xd4>)
 801cb16:	429c      	cmp	r4, r3
 801cb18:	d101      	bne.n	801cb1e <_puts_r+0x6e>
 801cb1a:	68ac      	ldr	r4, [r5, #8]
 801cb1c:	e7da      	b.n	801cad4 <_puts_r+0x24>
 801cb1e:	4b1a      	ldr	r3, [pc, #104]	; (801cb88 <_puts_r+0xd8>)
 801cb20:	429c      	cmp	r4, r3
 801cb22:	bf08      	it	eq
 801cb24:	68ec      	ldreq	r4, [r5, #12]
 801cb26:	e7d5      	b.n	801cad4 <_puts_r+0x24>
 801cb28:	4621      	mov	r1, r4
 801cb2a:	4628      	mov	r0, r5
 801cb2c:	f001 f836 	bl	801db9c <__swsetup_r>
 801cb30:	2800      	cmp	r0, #0
 801cb32:	d0dd      	beq.n	801caf0 <_puts_r+0x40>
 801cb34:	f04f 35ff 	mov.w	r5, #4294967295
 801cb38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cb3a:	07da      	lsls	r2, r3, #31
 801cb3c:	d405      	bmi.n	801cb4a <_puts_r+0x9a>
 801cb3e:	89a3      	ldrh	r3, [r4, #12]
 801cb40:	059b      	lsls	r3, r3, #22
 801cb42:	d402      	bmi.n	801cb4a <_puts_r+0x9a>
 801cb44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb46:	f7ff f807 	bl	801bb58 <__retarget_lock_release_recursive>
 801cb4a:	4628      	mov	r0, r5
 801cb4c:	bd70      	pop	{r4, r5, r6, pc}
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	da04      	bge.n	801cb5c <_puts_r+0xac>
 801cb52:	69a2      	ldr	r2, [r4, #24]
 801cb54:	429a      	cmp	r2, r3
 801cb56:	dc06      	bgt.n	801cb66 <_puts_r+0xb6>
 801cb58:	290a      	cmp	r1, #10
 801cb5a:	d004      	beq.n	801cb66 <_puts_r+0xb6>
 801cb5c:	6823      	ldr	r3, [r4, #0]
 801cb5e:	1c5a      	adds	r2, r3, #1
 801cb60:	6022      	str	r2, [r4, #0]
 801cb62:	7019      	strb	r1, [r3, #0]
 801cb64:	e7c5      	b.n	801caf2 <_puts_r+0x42>
 801cb66:	4622      	mov	r2, r4
 801cb68:	4628      	mov	r0, r5
 801cb6a:	f000 ffc5 	bl	801daf8 <__swbuf_r>
 801cb6e:	3001      	adds	r0, #1
 801cb70:	d1bf      	bne.n	801caf2 <_puts_r+0x42>
 801cb72:	e7df      	b.n	801cb34 <_puts_r+0x84>
 801cb74:	6823      	ldr	r3, [r4, #0]
 801cb76:	250a      	movs	r5, #10
 801cb78:	1c5a      	adds	r2, r3, #1
 801cb7a:	6022      	str	r2, [r4, #0]
 801cb7c:	701d      	strb	r5, [r3, #0]
 801cb7e:	e7db      	b.n	801cb38 <_puts_r+0x88>
 801cb80:	08022e74 	.word	0x08022e74
 801cb84:	08022e94 	.word	0x08022e94
 801cb88:	08022e54 	.word	0x08022e54

0801cb8c <puts>:
 801cb8c:	4b02      	ldr	r3, [pc, #8]	; (801cb98 <puts+0xc>)
 801cb8e:	4601      	mov	r1, r0
 801cb90:	6818      	ldr	r0, [r3, #0]
 801cb92:	f7ff bf8d 	b.w	801cab0 <_puts_r>
 801cb96:	bf00      	nop
 801cb98:	20000164 	.word	0x20000164

0801cb9c <_sbrk_r>:
 801cb9c:	b538      	push	{r3, r4, r5, lr}
 801cb9e:	4d06      	ldr	r5, [pc, #24]	; (801cbb8 <_sbrk_r+0x1c>)
 801cba0:	2300      	movs	r3, #0
 801cba2:	4604      	mov	r4, r0
 801cba4:	4608      	mov	r0, r1
 801cba6:	602b      	str	r3, [r5, #0]
 801cba8:	f7e6 ff6c 	bl	8003a84 <_sbrk>
 801cbac:	1c43      	adds	r3, r0, #1
 801cbae:	d102      	bne.n	801cbb6 <_sbrk_r+0x1a>
 801cbb0:	682b      	ldr	r3, [r5, #0]
 801cbb2:	b103      	cbz	r3, 801cbb6 <_sbrk_r+0x1a>
 801cbb4:	6023      	str	r3, [r4, #0]
 801cbb6:	bd38      	pop	{r3, r4, r5, pc}
 801cbb8:	200036a4 	.word	0x200036a4

0801cbbc <nanf>:
 801cbbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801cbc4 <nanf+0x8>
 801cbc0:	4770      	bx	lr
 801cbc2:	bf00      	nop
 801cbc4:	7fc00000 	.word	0x7fc00000

0801cbc8 <siprintf>:
 801cbc8:	b40e      	push	{r1, r2, r3}
 801cbca:	b500      	push	{lr}
 801cbcc:	b09c      	sub	sp, #112	; 0x70
 801cbce:	ab1d      	add	r3, sp, #116	; 0x74
 801cbd0:	9002      	str	r0, [sp, #8]
 801cbd2:	9006      	str	r0, [sp, #24]
 801cbd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801cbd8:	4809      	ldr	r0, [pc, #36]	; (801cc00 <siprintf+0x38>)
 801cbda:	9107      	str	r1, [sp, #28]
 801cbdc:	9104      	str	r1, [sp, #16]
 801cbde:	4909      	ldr	r1, [pc, #36]	; (801cc04 <siprintf+0x3c>)
 801cbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbe4:	9105      	str	r1, [sp, #20]
 801cbe6:	6800      	ldr	r0, [r0, #0]
 801cbe8:	9301      	str	r3, [sp, #4]
 801cbea:	a902      	add	r1, sp, #8
 801cbec:	f003 f9d0 	bl	801ff90 <_svfiprintf_r>
 801cbf0:	9b02      	ldr	r3, [sp, #8]
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	701a      	strb	r2, [r3, #0]
 801cbf6:	b01c      	add	sp, #112	; 0x70
 801cbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 801cbfc:	b003      	add	sp, #12
 801cbfe:	4770      	bx	lr
 801cc00:	20000164 	.word	0x20000164
 801cc04:	ffff0208 	.word	0xffff0208

0801cc08 <strchr>:
 801cc08:	b2c9      	uxtb	r1, r1
 801cc0a:	4603      	mov	r3, r0
 801cc0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cc10:	b11a      	cbz	r2, 801cc1a <strchr+0x12>
 801cc12:	428a      	cmp	r2, r1
 801cc14:	d1f9      	bne.n	801cc0a <strchr+0x2>
 801cc16:	4618      	mov	r0, r3
 801cc18:	4770      	bx	lr
 801cc1a:	2900      	cmp	r1, #0
 801cc1c:	bf18      	it	ne
 801cc1e:	2300      	movne	r3, #0
 801cc20:	e7f9      	b.n	801cc16 <strchr+0xe>

0801cc22 <strcpy>:
 801cc22:	4603      	mov	r3, r0
 801cc24:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cc28:	f803 2b01 	strb.w	r2, [r3], #1
 801cc2c:	2a00      	cmp	r2, #0
 801cc2e:	d1f9      	bne.n	801cc24 <strcpy+0x2>
 801cc30:	4770      	bx	lr

0801cc32 <strstr>:
 801cc32:	780a      	ldrb	r2, [r1, #0]
 801cc34:	b570      	push	{r4, r5, r6, lr}
 801cc36:	b96a      	cbnz	r2, 801cc54 <strstr+0x22>
 801cc38:	bd70      	pop	{r4, r5, r6, pc}
 801cc3a:	429a      	cmp	r2, r3
 801cc3c:	d109      	bne.n	801cc52 <strstr+0x20>
 801cc3e:	460c      	mov	r4, r1
 801cc40:	4605      	mov	r5, r0
 801cc42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d0f6      	beq.n	801cc38 <strstr+0x6>
 801cc4a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801cc4e:	429e      	cmp	r6, r3
 801cc50:	d0f7      	beq.n	801cc42 <strstr+0x10>
 801cc52:	3001      	adds	r0, #1
 801cc54:	7803      	ldrb	r3, [r0, #0]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d1ef      	bne.n	801cc3a <strstr+0x8>
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	e7ec      	b.n	801cc38 <strstr+0x6>

0801cc5e <sulp>:
 801cc5e:	b570      	push	{r4, r5, r6, lr}
 801cc60:	4604      	mov	r4, r0
 801cc62:	460d      	mov	r5, r1
 801cc64:	ec45 4b10 	vmov	d0, r4, r5
 801cc68:	4616      	mov	r6, r2
 801cc6a:	f002 ffd1 	bl	801fc10 <__ulp>
 801cc6e:	ec51 0b10 	vmov	r0, r1, d0
 801cc72:	b17e      	cbz	r6, 801cc94 <sulp+0x36>
 801cc74:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801cc78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	dd09      	ble.n	801cc94 <sulp+0x36>
 801cc80:	051b      	lsls	r3, r3, #20
 801cc82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801cc86:	2400      	movs	r4, #0
 801cc88:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801cc8c:	4622      	mov	r2, r4
 801cc8e:	462b      	mov	r3, r5
 801cc90:	f7e3 fcca 	bl	8000628 <__aeabi_dmul>
 801cc94:	bd70      	pop	{r4, r5, r6, pc}
	...

0801cc98 <_strtod_l>:
 801cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc9c:	ed2d 8b02 	vpush	{d8}
 801cca0:	b09d      	sub	sp, #116	; 0x74
 801cca2:	461f      	mov	r7, r3
 801cca4:	2300      	movs	r3, #0
 801cca6:	9318      	str	r3, [sp, #96]	; 0x60
 801cca8:	4ba2      	ldr	r3, [pc, #648]	; (801cf34 <_strtod_l+0x29c>)
 801ccaa:	9213      	str	r2, [sp, #76]	; 0x4c
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	9305      	str	r3, [sp, #20]
 801ccb0:	4604      	mov	r4, r0
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	4688      	mov	r8, r1
 801ccb6:	f7e3 fa9d 	bl	80001f4 <strlen>
 801ccba:	f04f 0a00 	mov.w	sl, #0
 801ccbe:	4605      	mov	r5, r0
 801ccc0:	f04f 0b00 	mov.w	fp, #0
 801ccc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801ccc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ccca:	781a      	ldrb	r2, [r3, #0]
 801cccc:	2a2b      	cmp	r2, #43	; 0x2b
 801ccce:	d04e      	beq.n	801cd6e <_strtod_l+0xd6>
 801ccd0:	d83b      	bhi.n	801cd4a <_strtod_l+0xb2>
 801ccd2:	2a0d      	cmp	r2, #13
 801ccd4:	d834      	bhi.n	801cd40 <_strtod_l+0xa8>
 801ccd6:	2a08      	cmp	r2, #8
 801ccd8:	d834      	bhi.n	801cd44 <_strtod_l+0xac>
 801ccda:	2a00      	cmp	r2, #0
 801ccdc:	d03e      	beq.n	801cd5c <_strtod_l+0xc4>
 801ccde:	2300      	movs	r3, #0
 801cce0:	930a      	str	r3, [sp, #40]	; 0x28
 801cce2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801cce4:	7833      	ldrb	r3, [r6, #0]
 801cce6:	2b30      	cmp	r3, #48	; 0x30
 801cce8:	f040 80b0 	bne.w	801ce4c <_strtod_l+0x1b4>
 801ccec:	7873      	ldrb	r3, [r6, #1]
 801ccee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ccf2:	2b58      	cmp	r3, #88	; 0x58
 801ccf4:	d168      	bne.n	801cdc8 <_strtod_l+0x130>
 801ccf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccf8:	9301      	str	r3, [sp, #4]
 801ccfa:	ab18      	add	r3, sp, #96	; 0x60
 801ccfc:	9702      	str	r7, [sp, #8]
 801ccfe:	9300      	str	r3, [sp, #0]
 801cd00:	4a8d      	ldr	r2, [pc, #564]	; (801cf38 <_strtod_l+0x2a0>)
 801cd02:	ab19      	add	r3, sp, #100	; 0x64
 801cd04:	a917      	add	r1, sp, #92	; 0x5c
 801cd06:	4620      	mov	r0, r4
 801cd08:	f002 f880 	bl	801ee0c <__gethex>
 801cd0c:	f010 0707 	ands.w	r7, r0, #7
 801cd10:	4605      	mov	r5, r0
 801cd12:	d005      	beq.n	801cd20 <_strtod_l+0x88>
 801cd14:	2f06      	cmp	r7, #6
 801cd16:	d12c      	bne.n	801cd72 <_strtod_l+0xda>
 801cd18:	3601      	adds	r6, #1
 801cd1a:	2300      	movs	r3, #0
 801cd1c:	9617      	str	r6, [sp, #92]	; 0x5c
 801cd1e:	930a      	str	r3, [sp, #40]	; 0x28
 801cd20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	f040 8590 	bne.w	801d848 <_strtod_l+0xbb0>
 801cd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd2a:	b1eb      	cbz	r3, 801cd68 <_strtod_l+0xd0>
 801cd2c:	4652      	mov	r2, sl
 801cd2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801cd32:	ec43 2b10 	vmov	d0, r2, r3
 801cd36:	b01d      	add	sp, #116	; 0x74
 801cd38:	ecbd 8b02 	vpop	{d8}
 801cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd40:	2a20      	cmp	r2, #32
 801cd42:	d1cc      	bne.n	801ccde <_strtod_l+0x46>
 801cd44:	3301      	adds	r3, #1
 801cd46:	9317      	str	r3, [sp, #92]	; 0x5c
 801cd48:	e7be      	b.n	801ccc8 <_strtod_l+0x30>
 801cd4a:	2a2d      	cmp	r2, #45	; 0x2d
 801cd4c:	d1c7      	bne.n	801ccde <_strtod_l+0x46>
 801cd4e:	2201      	movs	r2, #1
 801cd50:	920a      	str	r2, [sp, #40]	; 0x28
 801cd52:	1c5a      	adds	r2, r3, #1
 801cd54:	9217      	str	r2, [sp, #92]	; 0x5c
 801cd56:	785b      	ldrb	r3, [r3, #1]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d1c2      	bne.n	801cce2 <_strtod_l+0x4a>
 801cd5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd5e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	f040 856e 	bne.w	801d844 <_strtod_l+0xbac>
 801cd68:	4652      	mov	r2, sl
 801cd6a:	465b      	mov	r3, fp
 801cd6c:	e7e1      	b.n	801cd32 <_strtod_l+0x9a>
 801cd6e:	2200      	movs	r2, #0
 801cd70:	e7ee      	b.n	801cd50 <_strtod_l+0xb8>
 801cd72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801cd74:	b13a      	cbz	r2, 801cd86 <_strtod_l+0xee>
 801cd76:	2135      	movs	r1, #53	; 0x35
 801cd78:	a81a      	add	r0, sp, #104	; 0x68
 801cd7a:	f003 f854 	bl	801fe26 <__copybits>
 801cd7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cd80:	4620      	mov	r0, r4
 801cd82:	f002 fc13 	bl	801f5ac <_Bfree>
 801cd86:	3f01      	subs	r7, #1
 801cd88:	2f04      	cmp	r7, #4
 801cd8a:	d806      	bhi.n	801cd9a <_strtod_l+0x102>
 801cd8c:	e8df f007 	tbb	[pc, r7]
 801cd90:	1714030a 	.word	0x1714030a
 801cd94:	0a          	.byte	0x0a
 801cd95:	00          	.byte	0x00
 801cd96:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801cd9a:	0728      	lsls	r0, r5, #28
 801cd9c:	d5c0      	bpl.n	801cd20 <_strtod_l+0x88>
 801cd9e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801cda2:	e7bd      	b.n	801cd20 <_strtod_l+0x88>
 801cda4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801cda8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801cdaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801cdae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cdb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801cdb6:	e7f0      	b.n	801cd9a <_strtod_l+0x102>
 801cdb8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801cf3c <_strtod_l+0x2a4>
 801cdbc:	e7ed      	b.n	801cd9a <_strtod_l+0x102>
 801cdbe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801cdc2:	f04f 3aff 	mov.w	sl, #4294967295
 801cdc6:	e7e8      	b.n	801cd9a <_strtod_l+0x102>
 801cdc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cdca:	1c5a      	adds	r2, r3, #1
 801cdcc:	9217      	str	r2, [sp, #92]	; 0x5c
 801cdce:	785b      	ldrb	r3, [r3, #1]
 801cdd0:	2b30      	cmp	r3, #48	; 0x30
 801cdd2:	d0f9      	beq.n	801cdc8 <_strtod_l+0x130>
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d0a3      	beq.n	801cd20 <_strtod_l+0x88>
 801cdd8:	2301      	movs	r3, #1
 801cdda:	f04f 0900 	mov.w	r9, #0
 801cdde:	9304      	str	r3, [sp, #16]
 801cde0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cde2:	9308      	str	r3, [sp, #32]
 801cde4:	f8cd 901c 	str.w	r9, [sp, #28]
 801cde8:	464f      	mov	r7, r9
 801cdea:	220a      	movs	r2, #10
 801cdec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801cdee:	7806      	ldrb	r6, [r0, #0]
 801cdf0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801cdf4:	b2d9      	uxtb	r1, r3
 801cdf6:	2909      	cmp	r1, #9
 801cdf8:	d92a      	bls.n	801ce50 <_strtod_l+0x1b8>
 801cdfa:	9905      	ldr	r1, [sp, #20]
 801cdfc:	462a      	mov	r2, r5
 801cdfe:	f003 fb6e 	bl	80204de <strncmp>
 801ce02:	b398      	cbz	r0, 801ce6c <_strtod_l+0x1d4>
 801ce04:	2000      	movs	r0, #0
 801ce06:	4632      	mov	r2, r6
 801ce08:	463d      	mov	r5, r7
 801ce0a:	9005      	str	r0, [sp, #20]
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	2a65      	cmp	r2, #101	; 0x65
 801ce10:	d001      	beq.n	801ce16 <_strtod_l+0x17e>
 801ce12:	2a45      	cmp	r2, #69	; 0x45
 801ce14:	d118      	bne.n	801ce48 <_strtod_l+0x1b0>
 801ce16:	b91d      	cbnz	r5, 801ce20 <_strtod_l+0x188>
 801ce18:	9a04      	ldr	r2, [sp, #16]
 801ce1a:	4302      	orrs	r2, r0
 801ce1c:	d09e      	beq.n	801cd5c <_strtod_l+0xc4>
 801ce1e:	2500      	movs	r5, #0
 801ce20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801ce24:	f108 0201 	add.w	r2, r8, #1
 801ce28:	9217      	str	r2, [sp, #92]	; 0x5c
 801ce2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ce2e:	2a2b      	cmp	r2, #43	; 0x2b
 801ce30:	d075      	beq.n	801cf1e <_strtod_l+0x286>
 801ce32:	2a2d      	cmp	r2, #45	; 0x2d
 801ce34:	d07b      	beq.n	801cf2e <_strtod_l+0x296>
 801ce36:	f04f 0c00 	mov.w	ip, #0
 801ce3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801ce3e:	2909      	cmp	r1, #9
 801ce40:	f240 8082 	bls.w	801cf48 <_strtod_l+0x2b0>
 801ce44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801ce48:	2600      	movs	r6, #0
 801ce4a:	e09d      	b.n	801cf88 <_strtod_l+0x2f0>
 801ce4c:	2300      	movs	r3, #0
 801ce4e:	e7c4      	b.n	801cdda <_strtod_l+0x142>
 801ce50:	2f08      	cmp	r7, #8
 801ce52:	bfd8      	it	le
 801ce54:	9907      	ldrle	r1, [sp, #28]
 801ce56:	f100 0001 	add.w	r0, r0, #1
 801ce5a:	bfda      	itte	le
 801ce5c:	fb02 3301 	mlale	r3, r2, r1, r3
 801ce60:	9307      	strle	r3, [sp, #28]
 801ce62:	fb02 3909 	mlagt	r9, r2, r9, r3
 801ce66:	3701      	adds	r7, #1
 801ce68:	9017      	str	r0, [sp, #92]	; 0x5c
 801ce6a:	e7bf      	b.n	801cdec <_strtod_l+0x154>
 801ce6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ce6e:	195a      	adds	r2, r3, r5
 801ce70:	9217      	str	r2, [sp, #92]	; 0x5c
 801ce72:	5d5a      	ldrb	r2, [r3, r5]
 801ce74:	2f00      	cmp	r7, #0
 801ce76:	d037      	beq.n	801cee8 <_strtod_l+0x250>
 801ce78:	9005      	str	r0, [sp, #20]
 801ce7a:	463d      	mov	r5, r7
 801ce7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801ce80:	2b09      	cmp	r3, #9
 801ce82:	d912      	bls.n	801ceaa <_strtod_l+0x212>
 801ce84:	2301      	movs	r3, #1
 801ce86:	e7c2      	b.n	801ce0e <_strtod_l+0x176>
 801ce88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ce8a:	1c5a      	adds	r2, r3, #1
 801ce8c:	9217      	str	r2, [sp, #92]	; 0x5c
 801ce8e:	785a      	ldrb	r2, [r3, #1]
 801ce90:	3001      	adds	r0, #1
 801ce92:	2a30      	cmp	r2, #48	; 0x30
 801ce94:	d0f8      	beq.n	801ce88 <_strtod_l+0x1f0>
 801ce96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801ce9a:	2b08      	cmp	r3, #8
 801ce9c:	f200 84d9 	bhi.w	801d852 <_strtod_l+0xbba>
 801cea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cea2:	9005      	str	r0, [sp, #20]
 801cea4:	2000      	movs	r0, #0
 801cea6:	9308      	str	r3, [sp, #32]
 801cea8:	4605      	mov	r5, r0
 801ceaa:	3a30      	subs	r2, #48	; 0x30
 801ceac:	f100 0301 	add.w	r3, r0, #1
 801ceb0:	d014      	beq.n	801cedc <_strtod_l+0x244>
 801ceb2:	9905      	ldr	r1, [sp, #20]
 801ceb4:	4419      	add	r1, r3
 801ceb6:	9105      	str	r1, [sp, #20]
 801ceb8:	462b      	mov	r3, r5
 801ceba:	eb00 0e05 	add.w	lr, r0, r5
 801cebe:	210a      	movs	r1, #10
 801cec0:	4573      	cmp	r3, lr
 801cec2:	d113      	bne.n	801ceec <_strtod_l+0x254>
 801cec4:	182b      	adds	r3, r5, r0
 801cec6:	2b08      	cmp	r3, #8
 801cec8:	f105 0501 	add.w	r5, r5, #1
 801cecc:	4405      	add	r5, r0
 801cece:	dc1c      	bgt.n	801cf0a <_strtod_l+0x272>
 801ced0:	9907      	ldr	r1, [sp, #28]
 801ced2:	230a      	movs	r3, #10
 801ced4:	fb03 2301 	mla	r3, r3, r1, r2
 801ced8:	9307      	str	r3, [sp, #28]
 801ceda:	2300      	movs	r3, #0
 801cedc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801cede:	1c51      	adds	r1, r2, #1
 801cee0:	9117      	str	r1, [sp, #92]	; 0x5c
 801cee2:	7852      	ldrb	r2, [r2, #1]
 801cee4:	4618      	mov	r0, r3
 801cee6:	e7c9      	b.n	801ce7c <_strtod_l+0x1e4>
 801cee8:	4638      	mov	r0, r7
 801ceea:	e7d2      	b.n	801ce92 <_strtod_l+0x1fa>
 801ceec:	2b08      	cmp	r3, #8
 801ceee:	dc04      	bgt.n	801cefa <_strtod_l+0x262>
 801cef0:	9e07      	ldr	r6, [sp, #28]
 801cef2:	434e      	muls	r6, r1
 801cef4:	9607      	str	r6, [sp, #28]
 801cef6:	3301      	adds	r3, #1
 801cef8:	e7e2      	b.n	801cec0 <_strtod_l+0x228>
 801cefa:	f103 0c01 	add.w	ip, r3, #1
 801cefe:	f1bc 0f10 	cmp.w	ip, #16
 801cf02:	bfd8      	it	le
 801cf04:	fb01 f909 	mulle.w	r9, r1, r9
 801cf08:	e7f5      	b.n	801cef6 <_strtod_l+0x25e>
 801cf0a:	2d10      	cmp	r5, #16
 801cf0c:	bfdc      	itt	le
 801cf0e:	230a      	movle	r3, #10
 801cf10:	fb03 2909 	mlale	r9, r3, r9, r2
 801cf14:	e7e1      	b.n	801ceda <_strtod_l+0x242>
 801cf16:	2300      	movs	r3, #0
 801cf18:	9305      	str	r3, [sp, #20]
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	e77c      	b.n	801ce18 <_strtod_l+0x180>
 801cf1e:	f04f 0c00 	mov.w	ip, #0
 801cf22:	f108 0202 	add.w	r2, r8, #2
 801cf26:	9217      	str	r2, [sp, #92]	; 0x5c
 801cf28:	f898 2002 	ldrb.w	r2, [r8, #2]
 801cf2c:	e785      	b.n	801ce3a <_strtod_l+0x1a2>
 801cf2e:	f04f 0c01 	mov.w	ip, #1
 801cf32:	e7f6      	b.n	801cf22 <_strtod_l+0x28a>
 801cf34:	08022f1c 	.word	0x08022f1c
 801cf38:	08022bd4 	.word	0x08022bd4
 801cf3c:	7ff00000 	.word	0x7ff00000
 801cf40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801cf42:	1c51      	adds	r1, r2, #1
 801cf44:	9117      	str	r1, [sp, #92]	; 0x5c
 801cf46:	7852      	ldrb	r2, [r2, #1]
 801cf48:	2a30      	cmp	r2, #48	; 0x30
 801cf4a:	d0f9      	beq.n	801cf40 <_strtod_l+0x2a8>
 801cf4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801cf50:	2908      	cmp	r1, #8
 801cf52:	f63f af79 	bhi.w	801ce48 <_strtod_l+0x1b0>
 801cf56:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801cf5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801cf5c:	9206      	str	r2, [sp, #24]
 801cf5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801cf60:	1c51      	adds	r1, r2, #1
 801cf62:	9117      	str	r1, [sp, #92]	; 0x5c
 801cf64:	7852      	ldrb	r2, [r2, #1]
 801cf66:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801cf6a:	2e09      	cmp	r6, #9
 801cf6c:	d937      	bls.n	801cfde <_strtod_l+0x346>
 801cf6e:	9e06      	ldr	r6, [sp, #24]
 801cf70:	1b89      	subs	r1, r1, r6
 801cf72:	2908      	cmp	r1, #8
 801cf74:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801cf78:	dc02      	bgt.n	801cf80 <_strtod_l+0x2e8>
 801cf7a:	4576      	cmp	r6, lr
 801cf7c:	bfa8      	it	ge
 801cf7e:	4676      	movge	r6, lr
 801cf80:	f1bc 0f00 	cmp.w	ip, #0
 801cf84:	d000      	beq.n	801cf88 <_strtod_l+0x2f0>
 801cf86:	4276      	negs	r6, r6
 801cf88:	2d00      	cmp	r5, #0
 801cf8a:	d14d      	bne.n	801d028 <_strtod_l+0x390>
 801cf8c:	9904      	ldr	r1, [sp, #16]
 801cf8e:	4301      	orrs	r1, r0
 801cf90:	f47f aec6 	bne.w	801cd20 <_strtod_l+0x88>
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	f47f aee1 	bne.w	801cd5c <_strtod_l+0xc4>
 801cf9a:	2a69      	cmp	r2, #105	; 0x69
 801cf9c:	d027      	beq.n	801cfee <_strtod_l+0x356>
 801cf9e:	dc24      	bgt.n	801cfea <_strtod_l+0x352>
 801cfa0:	2a49      	cmp	r2, #73	; 0x49
 801cfa2:	d024      	beq.n	801cfee <_strtod_l+0x356>
 801cfa4:	2a4e      	cmp	r2, #78	; 0x4e
 801cfa6:	f47f aed9 	bne.w	801cd5c <_strtod_l+0xc4>
 801cfaa:	499f      	ldr	r1, [pc, #636]	; (801d228 <_strtod_l+0x590>)
 801cfac:	a817      	add	r0, sp, #92	; 0x5c
 801cfae:	f002 f985 	bl	801f2bc <__match>
 801cfb2:	2800      	cmp	r0, #0
 801cfb4:	f43f aed2 	beq.w	801cd5c <_strtod_l+0xc4>
 801cfb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cfba:	781b      	ldrb	r3, [r3, #0]
 801cfbc:	2b28      	cmp	r3, #40	; 0x28
 801cfbe:	d12d      	bne.n	801d01c <_strtod_l+0x384>
 801cfc0:	499a      	ldr	r1, [pc, #616]	; (801d22c <_strtod_l+0x594>)
 801cfc2:	aa1a      	add	r2, sp, #104	; 0x68
 801cfc4:	a817      	add	r0, sp, #92	; 0x5c
 801cfc6:	f002 f98d 	bl	801f2e4 <__hexnan>
 801cfca:	2805      	cmp	r0, #5
 801cfcc:	d126      	bne.n	801d01c <_strtod_l+0x384>
 801cfce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801cfd0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801cfd4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801cfd8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801cfdc:	e6a0      	b.n	801cd20 <_strtod_l+0x88>
 801cfde:	210a      	movs	r1, #10
 801cfe0:	fb01 2e0e 	mla	lr, r1, lr, r2
 801cfe4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801cfe8:	e7b9      	b.n	801cf5e <_strtod_l+0x2c6>
 801cfea:	2a6e      	cmp	r2, #110	; 0x6e
 801cfec:	e7db      	b.n	801cfa6 <_strtod_l+0x30e>
 801cfee:	4990      	ldr	r1, [pc, #576]	; (801d230 <_strtod_l+0x598>)
 801cff0:	a817      	add	r0, sp, #92	; 0x5c
 801cff2:	f002 f963 	bl	801f2bc <__match>
 801cff6:	2800      	cmp	r0, #0
 801cff8:	f43f aeb0 	beq.w	801cd5c <_strtod_l+0xc4>
 801cffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cffe:	498d      	ldr	r1, [pc, #564]	; (801d234 <_strtod_l+0x59c>)
 801d000:	3b01      	subs	r3, #1
 801d002:	a817      	add	r0, sp, #92	; 0x5c
 801d004:	9317      	str	r3, [sp, #92]	; 0x5c
 801d006:	f002 f959 	bl	801f2bc <__match>
 801d00a:	b910      	cbnz	r0, 801d012 <_strtod_l+0x37a>
 801d00c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d00e:	3301      	adds	r3, #1
 801d010:	9317      	str	r3, [sp, #92]	; 0x5c
 801d012:	f8df b230 	ldr.w	fp, [pc, #560]	; 801d244 <_strtod_l+0x5ac>
 801d016:	f04f 0a00 	mov.w	sl, #0
 801d01a:	e681      	b.n	801cd20 <_strtod_l+0x88>
 801d01c:	4886      	ldr	r0, [pc, #536]	; (801d238 <_strtod_l+0x5a0>)
 801d01e:	f003 fa13 	bl	8020448 <nan>
 801d022:	ec5b ab10 	vmov	sl, fp, d0
 801d026:	e67b      	b.n	801cd20 <_strtod_l+0x88>
 801d028:	9b05      	ldr	r3, [sp, #20]
 801d02a:	9807      	ldr	r0, [sp, #28]
 801d02c:	1af3      	subs	r3, r6, r3
 801d02e:	2f00      	cmp	r7, #0
 801d030:	bf08      	it	eq
 801d032:	462f      	moveq	r7, r5
 801d034:	2d10      	cmp	r5, #16
 801d036:	9306      	str	r3, [sp, #24]
 801d038:	46a8      	mov	r8, r5
 801d03a:	bfa8      	it	ge
 801d03c:	f04f 0810 	movge.w	r8, #16
 801d040:	f7e3 fa78 	bl	8000534 <__aeabi_ui2d>
 801d044:	2d09      	cmp	r5, #9
 801d046:	4682      	mov	sl, r0
 801d048:	468b      	mov	fp, r1
 801d04a:	dd13      	ble.n	801d074 <_strtod_l+0x3dc>
 801d04c:	4b7b      	ldr	r3, [pc, #492]	; (801d23c <_strtod_l+0x5a4>)
 801d04e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801d052:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801d056:	f7e3 fae7 	bl	8000628 <__aeabi_dmul>
 801d05a:	4682      	mov	sl, r0
 801d05c:	4648      	mov	r0, r9
 801d05e:	468b      	mov	fp, r1
 801d060:	f7e3 fa68 	bl	8000534 <__aeabi_ui2d>
 801d064:	4602      	mov	r2, r0
 801d066:	460b      	mov	r3, r1
 801d068:	4650      	mov	r0, sl
 801d06a:	4659      	mov	r1, fp
 801d06c:	f7e3 f926 	bl	80002bc <__adddf3>
 801d070:	4682      	mov	sl, r0
 801d072:	468b      	mov	fp, r1
 801d074:	2d0f      	cmp	r5, #15
 801d076:	dc38      	bgt.n	801d0ea <_strtod_l+0x452>
 801d078:	9b06      	ldr	r3, [sp, #24]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	f43f ae50 	beq.w	801cd20 <_strtod_l+0x88>
 801d080:	dd24      	ble.n	801d0cc <_strtod_l+0x434>
 801d082:	2b16      	cmp	r3, #22
 801d084:	dc0b      	bgt.n	801d09e <_strtod_l+0x406>
 801d086:	496d      	ldr	r1, [pc, #436]	; (801d23c <_strtod_l+0x5a4>)
 801d088:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d090:	4652      	mov	r2, sl
 801d092:	465b      	mov	r3, fp
 801d094:	f7e3 fac8 	bl	8000628 <__aeabi_dmul>
 801d098:	4682      	mov	sl, r0
 801d09a:	468b      	mov	fp, r1
 801d09c:	e640      	b.n	801cd20 <_strtod_l+0x88>
 801d09e:	9a06      	ldr	r2, [sp, #24]
 801d0a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801d0a4:	4293      	cmp	r3, r2
 801d0a6:	db20      	blt.n	801d0ea <_strtod_l+0x452>
 801d0a8:	4c64      	ldr	r4, [pc, #400]	; (801d23c <_strtod_l+0x5a4>)
 801d0aa:	f1c5 050f 	rsb	r5, r5, #15
 801d0ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d0b2:	4652      	mov	r2, sl
 801d0b4:	465b      	mov	r3, fp
 801d0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d0ba:	f7e3 fab5 	bl	8000628 <__aeabi_dmul>
 801d0be:	9b06      	ldr	r3, [sp, #24]
 801d0c0:	1b5d      	subs	r5, r3, r5
 801d0c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d0c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d0ca:	e7e3      	b.n	801d094 <_strtod_l+0x3fc>
 801d0cc:	9b06      	ldr	r3, [sp, #24]
 801d0ce:	3316      	adds	r3, #22
 801d0d0:	db0b      	blt.n	801d0ea <_strtod_l+0x452>
 801d0d2:	9b05      	ldr	r3, [sp, #20]
 801d0d4:	1b9e      	subs	r6, r3, r6
 801d0d6:	4b59      	ldr	r3, [pc, #356]	; (801d23c <_strtod_l+0x5a4>)
 801d0d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801d0dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d0e0:	4650      	mov	r0, sl
 801d0e2:	4659      	mov	r1, fp
 801d0e4:	f7e3 fbca 	bl	800087c <__aeabi_ddiv>
 801d0e8:	e7d6      	b.n	801d098 <_strtod_l+0x400>
 801d0ea:	9b06      	ldr	r3, [sp, #24]
 801d0ec:	eba5 0808 	sub.w	r8, r5, r8
 801d0f0:	4498      	add	r8, r3
 801d0f2:	f1b8 0f00 	cmp.w	r8, #0
 801d0f6:	dd74      	ble.n	801d1e2 <_strtod_l+0x54a>
 801d0f8:	f018 030f 	ands.w	r3, r8, #15
 801d0fc:	d00a      	beq.n	801d114 <_strtod_l+0x47c>
 801d0fe:	494f      	ldr	r1, [pc, #316]	; (801d23c <_strtod_l+0x5a4>)
 801d100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d104:	4652      	mov	r2, sl
 801d106:	465b      	mov	r3, fp
 801d108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d10c:	f7e3 fa8c 	bl	8000628 <__aeabi_dmul>
 801d110:	4682      	mov	sl, r0
 801d112:	468b      	mov	fp, r1
 801d114:	f038 080f 	bics.w	r8, r8, #15
 801d118:	d04f      	beq.n	801d1ba <_strtod_l+0x522>
 801d11a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801d11e:	dd22      	ble.n	801d166 <_strtod_l+0x4ce>
 801d120:	2500      	movs	r5, #0
 801d122:	462e      	mov	r6, r5
 801d124:	9507      	str	r5, [sp, #28]
 801d126:	9505      	str	r5, [sp, #20]
 801d128:	2322      	movs	r3, #34	; 0x22
 801d12a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801d244 <_strtod_l+0x5ac>
 801d12e:	6023      	str	r3, [r4, #0]
 801d130:	f04f 0a00 	mov.w	sl, #0
 801d134:	9b07      	ldr	r3, [sp, #28]
 801d136:	2b00      	cmp	r3, #0
 801d138:	f43f adf2 	beq.w	801cd20 <_strtod_l+0x88>
 801d13c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d13e:	4620      	mov	r0, r4
 801d140:	f002 fa34 	bl	801f5ac <_Bfree>
 801d144:	9905      	ldr	r1, [sp, #20]
 801d146:	4620      	mov	r0, r4
 801d148:	f002 fa30 	bl	801f5ac <_Bfree>
 801d14c:	4631      	mov	r1, r6
 801d14e:	4620      	mov	r0, r4
 801d150:	f002 fa2c 	bl	801f5ac <_Bfree>
 801d154:	9907      	ldr	r1, [sp, #28]
 801d156:	4620      	mov	r0, r4
 801d158:	f002 fa28 	bl	801f5ac <_Bfree>
 801d15c:	4629      	mov	r1, r5
 801d15e:	4620      	mov	r0, r4
 801d160:	f002 fa24 	bl	801f5ac <_Bfree>
 801d164:	e5dc      	b.n	801cd20 <_strtod_l+0x88>
 801d166:	4b36      	ldr	r3, [pc, #216]	; (801d240 <_strtod_l+0x5a8>)
 801d168:	9304      	str	r3, [sp, #16]
 801d16a:	2300      	movs	r3, #0
 801d16c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801d170:	4650      	mov	r0, sl
 801d172:	4659      	mov	r1, fp
 801d174:	4699      	mov	r9, r3
 801d176:	f1b8 0f01 	cmp.w	r8, #1
 801d17a:	dc21      	bgt.n	801d1c0 <_strtod_l+0x528>
 801d17c:	b10b      	cbz	r3, 801d182 <_strtod_l+0x4ea>
 801d17e:	4682      	mov	sl, r0
 801d180:	468b      	mov	fp, r1
 801d182:	4b2f      	ldr	r3, [pc, #188]	; (801d240 <_strtod_l+0x5a8>)
 801d184:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801d188:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801d18c:	4652      	mov	r2, sl
 801d18e:	465b      	mov	r3, fp
 801d190:	e9d9 0100 	ldrd	r0, r1, [r9]
 801d194:	f7e3 fa48 	bl	8000628 <__aeabi_dmul>
 801d198:	4b2a      	ldr	r3, [pc, #168]	; (801d244 <_strtod_l+0x5ac>)
 801d19a:	460a      	mov	r2, r1
 801d19c:	400b      	ands	r3, r1
 801d19e:	492a      	ldr	r1, [pc, #168]	; (801d248 <_strtod_l+0x5b0>)
 801d1a0:	428b      	cmp	r3, r1
 801d1a2:	4682      	mov	sl, r0
 801d1a4:	d8bc      	bhi.n	801d120 <_strtod_l+0x488>
 801d1a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801d1aa:	428b      	cmp	r3, r1
 801d1ac:	bf86      	itte	hi
 801d1ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801d24c <_strtod_l+0x5b4>
 801d1b2:	f04f 3aff 	movhi.w	sl, #4294967295
 801d1b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	9304      	str	r3, [sp, #16]
 801d1be:	e084      	b.n	801d2ca <_strtod_l+0x632>
 801d1c0:	f018 0f01 	tst.w	r8, #1
 801d1c4:	d005      	beq.n	801d1d2 <_strtod_l+0x53a>
 801d1c6:	9b04      	ldr	r3, [sp, #16]
 801d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1cc:	f7e3 fa2c 	bl	8000628 <__aeabi_dmul>
 801d1d0:	2301      	movs	r3, #1
 801d1d2:	9a04      	ldr	r2, [sp, #16]
 801d1d4:	3208      	adds	r2, #8
 801d1d6:	f109 0901 	add.w	r9, r9, #1
 801d1da:	ea4f 0868 	mov.w	r8, r8, asr #1
 801d1de:	9204      	str	r2, [sp, #16]
 801d1e0:	e7c9      	b.n	801d176 <_strtod_l+0x4de>
 801d1e2:	d0ea      	beq.n	801d1ba <_strtod_l+0x522>
 801d1e4:	f1c8 0800 	rsb	r8, r8, #0
 801d1e8:	f018 020f 	ands.w	r2, r8, #15
 801d1ec:	d00a      	beq.n	801d204 <_strtod_l+0x56c>
 801d1ee:	4b13      	ldr	r3, [pc, #76]	; (801d23c <_strtod_l+0x5a4>)
 801d1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d1f4:	4650      	mov	r0, sl
 801d1f6:	4659      	mov	r1, fp
 801d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1fc:	f7e3 fb3e 	bl	800087c <__aeabi_ddiv>
 801d200:	4682      	mov	sl, r0
 801d202:	468b      	mov	fp, r1
 801d204:	ea5f 1828 	movs.w	r8, r8, asr #4
 801d208:	d0d7      	beq.n	801d1ba <_strtod_l+0x522>
 801d20a:	f1b8 0f1f 	cmp.w	r8, #31
 801d20e:	dd1f      	ble.n	801d250 <_strtod_l+0x5b8>
 801d210:	2500      	movs	r5, #0
 801d212:	462e      	mov	r6, r5
 801d214:	9507      	str	r5, [sp, #28]
 801d216:	9505      	str	r5, [sp, #20]
 801d218:	2322      	movs	r3, #34	; 0x22
 801d21a:	f04f 0a00 	mov.w	sl, #0
 801d21e:	f04f 0b00 	mov.w	fp, #0
 801d222:	6023      	str	r3, [r4, #0]
 801d224:	e786      	b.n	801d134 <_strtod_l+0x49c>
 801d226:	bf00      	nop
 801d228:	08022ba5 	.word	0x08022ba5
 801d22c:	08022be8 	.word	0x08022be8
 801d230:	08022b9d 	.word	0x08022b9d
 801d234:	08022ddc 	.word	0x08022ddc
 801d238:	08022cd7 	.word	0x08022cd7
 801d23c:	08022fb8 	.word	0x08022fb8
 801d240:	08022f90 	.word	0x08022f90
 801d244:	7ff00000 	.word	0x7ff00000
 801d248:	7ca00000 	.word	0x7ca00000
 801d24c:	7fefffff 	.word	0x7fefffff
 801d250:	f018 0310 	ands.w	r3, r8, #16
 801d254:	bf18      	it	ne
 801d256:	236a      	movne	r3, #106	; 0x6a
 801d258:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801d608 <_strtod_l+0x970>
 801d25c:	9304      	str	r3, [sp, #16]
 801d25e:	4650      	mov	r0, sl
 801d260:	4659      	mov	r1, fp
 801d262:	2300      	movs	r3, #0
 801d264:	f018 0f01 	tst.w	r8, #1
 801d268:	d004      	beq.n	801d274 <_strtod_l+0x5dc>
 801d26a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d26e:	f7e3 f9db 	bl	8000628 <__aeabi_dmul>
 801d272:	2301      	movs	r3, #1
 801d274:	ea5f 0868 	movs.w	r8, r8, asr #1
 801d278:	f109 0908 	add.w	r9, r9, #8
 801d27c:	d1f2      	bne.n	801d264 <_strtod_l+0x5cc>
 801d27e:	b10b      	cbz	r3, 801d284 <_strtod_l+0x5ec>
 801d280:	4682      	mov	sl, r0
 801d282:	468b      	mov	fp, r1
 801d284:	9b04      	ldr	r3, [sp, #16]
 801d286:	b1c3      	cbz	r3, 801d2ba <_strtod_l+0x622>
 801d288:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801d28c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801d290:	2b00      	cmp	r3, #0
 801d292:	4659      	mov	r1, fp
 801d294:	dd11      	ble.n	801d2ba <_strtod_l+0x622>
 801d296:	2b1f      	cmp	r3, #31
 801d298:	f340 8124 	ble.w	801d4e4 <_strtod_l+0x84c>
 801d29c:	2b34      	cmp	r3, #52	; 0x34
 801d29e:	bfde      	ittt	le
 801d2a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801d2a4:	f04f 33ff 	movle.w	r3, #4294967295
 801d2a8:	fa03 f202 	lslle.w	r2, r3, r2
 801d2ac:	f04f 0a00 	mov.w	sl, #0
 801d2b0:	bfcc      	ite	gt
 801d2b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801d2b6:	ea02 0b01 	andle.w	fp, r2, r1
 801d2ba:	2200      	movs	r2, #0
 801d2bc:	2300      	movs	r3, #0
 801d2be:	4650      	mov	r0, sl
 801d2c0:	4659      	mov	r1, fp
 801d2c2:	f7e3 fc19 	bl	8000af8 <__aeabi_dcmpeq>
 801d2c6:	2800      	cmp	r0, #0
 801d2c8:	d1a2      	bne.n	801d210 <_strtod_l+0x578>
 801d2ca:	9b07      	ldr	r3, [sp, #28]
 801d2cc:	9300      	str	r3, [sp, #0]
 801d2ce:	9908      	ldr	r1, [sp, #32]
 801d2d0:	462b      	mov	r3, r5
 801d2d2:	463a      	mov	r2, r7
 801d2d4:	4620      	mov	r0, r4
 801d2d6:	f002 f9d1 	bl	801f67c <__s2b>
 801d2da:	9007      	str	r0, [sp, #28]
 801d2dc:	2800      	cmp	r0, #0
 801d2de:	f43f af1f 	beq.w	801d120 <_strtod_l+0x488>
 801d2e2:	9b05      	ldr	r3, [sp, #20]
 801d2e4:	1b9e      	subs	r6, r3, r6
 801d2e6:	9b06      	ldr	r3, [sp, #24]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	bfb4      	ite	lt
 801d2ec:	4633      	movlt	r3, r6
 801d2ee:	2300      	movge	r3, #0
 801d2f0:	930c      	str	r3, [sp, #48]	; 0x30
 801d2f2:	9b06      	ldr	r3, [sp, #24]
 801d2f4:	2500      	movs	r5, #0
 801d2f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d2fa:	9312      	str	r3, [sp, #72]	; 0x48
 801d2fc:	462e      	mov	r6, r5
 801d2fe:	9b07      	ldr	r3, [sp, #28]
 801d300:	4620      	mov	r0, r4
 801d302:	6859      	ldr	r1, [r3, #4]
 801d304:	f002 f912 	bl	801f52c <_Balloc>
 801d308:	9005      	str	r0, [sp, #20]
 801d30a:	2800      	cmp	r0, #0
 801d30c:	f43f af0c 	beq.w	801d128 <_strtod_l+0x490>
 801d310:	9b07      	ldr	r3, [sp, #28]
 801d312:	691a      	ldr	r2, [r3, #16]
 801d314:	3202      	adds	r2, #2
 801d316:	f103 010c 	add.w	r1, r3, #12
 801d31a:	0092      	lsls	r2, r2, #2
 801d31c:	300c      	adds	r0, #12
 801d31e:	f7fe fc25 	bl	801bb6c <memcpy>
 801d322:	ec4b ab10 	vmov	d0, sl, fp
 801d326:	aa1a      	add	r2, sp, #104	; 0x68
 801d328:	a919      	add	r1, sp, #100	; 0x64
 801d32a:	4620      	mov	r0, r4
 801d32c:	f002 fcec 	bl	801fd08 <__d2b>
 801d330:	ec4b ab18 	vmov	d8, sl, fp
 801d334:	9018      	str	r0, [sp, #96]	; 0x60
 801d336:	2800      	cmp	r0, #0
 801d338:	f43f aef6 	beq.w	801d128 <_strtod_l+0x490>
 801d33c:	2101      	movs	r1, #1
 801d33e:	4620      	mov	r0, r4
 801d340:	f002 fa36 	bl	801f7b0 <__i2b>
 801d344:	4606      	mov	r6, r0
 801d346:	2800      	cmp	r0, #0
 801d348:	f43f aeee 	beq.w	801d128 <_strtod_l+0x490>
 801d34c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d34e:	9904      	ldr	r1, [sp, #16]
 801d350:	2b00      	cmp	r3, #0
 801d352:	bfab      	itete	ge
 801d354:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801d356:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801d358:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801d35a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801d35e:	bfac      	ite	ge
 801d360:	eb03 0902 	addge.w	r9, r3, r2
 801d364:	1ad7      	sublt	r7, r2, r3
 801d366:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d368:	eba3 0801 	sub.w	r8, r3, r1
 801d36c:	4490      	add	r8, r2
 801d36e:	4ba1      	ldr	r3, [pc, #644]	; (801d5f4 <_strtod_l+0x95c>)
 801d370:	f108 38ff 	add.w	r8, r8, #4294967295
 801d374:	4598      	cmp	r8, r3
 801d376:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d37a:	f280 80c7 	bge.w	801d50c <_strtod_l+0x874>
 801d37e:	eba3 0308 	sub.w	r3, r3, r8
 801d382:	2b1f      	cmp	r3, #31
 801d384:	eba2 0203 	sub.w	r2, r2, r3
 801d388:	f04f 0101 	mov.w	r1, #1
 801d38c:	f300 80b1 	bgt.w	801d4f2 <_strtod_l+0x85a>
 801d390:	fa01 f303 	lsl.w	r3, r1, r3
 801d394:	930d      	str	r3, [sp, #52]	; 0x34
 801d396:	2300      	movs	r3, #0
 801d398:	9308      	str	r3, [sp, #32]
 801d39a:	eb09 0802 	add.w	r8, r9, r2
 801d39e:	9b04      	ldr	r3, [sp, #16]
 801d3a0:	45c1      	cmp	r9, r8
 801d3a2:	4417      	add	r7, r2
 801d3a4:	441f      	add	r7, r3
 801d3a6:	464b      	mov	r3, r9
 801d3a8:	bfa8      	it	ge
 801d3aa:	4643      	movge	r3, r8
 801d3ac:	42bb      	cmp	r3, r7
 801d3ae:	bfa8      	it	ge
 801d3b0:	463b      	movge	r3, r7
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	bfc2      	ittt	gt
 801d3b6:	eba8 0803 	subgt.w	r8, r8, r3
 801d3ba:	1aff      	subgt	r7, r7, r3
 801d3bc:	eba9 0903 	subgt.w	r9, r9, r3
 801d3c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	dd17      	ble.n	801d3f6 <_strtod_l+0x75e>
 801d3c6:	4631      	mov	r1, r6
 801d3c8:	461a      	mov	r2, r3
 801d3ca:	4620      	mov	r0, r4
 801d3cc:	f002 fab0 	bl	801f930 <__pow5mult>
 801d3d0:	4606      	mov	r6, r0
 801d3d2:	2800      	cmp	r0, #0
 801d3d4:	f43f aea8 	beq.w	801d128 <_strtod_l+0x490>
 801d3d8:	4601      	mov	r1, r0
 801d3da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d3dc:	4620      	mov	r0, r4
 801d3de:	f002 f9fd 	bl	801f7dc <__multiply>
 801d3e2:	900b      	str	r0, [sp, #44]	; 0x2c
 801d3e4:	2800      	cmp	r0, #0
 801d3e6:	f43f ae9f 	beq.w	801d128 <_strtod_l+0x490>
 801d3ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d3ec:	4620      	mov	r0, r4
 801d3ee:	f002 f8dd 	bl	801f5ac <_Bfree>
 801d3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d3f4:	9318      	str	r3, [sp, #96]	; 0x60
 801d3f6:	f1b8 0f00 	cmp.w	r8, #0
 801d3fa:	f300 808c 	bgt.w	801d516 <_strtod_l+0x87e>
 801d3fe:	9b06      	ldr	r3, [sp, #24]
 801d400:	2b00      	cmp	r3, #0
 801d402:	dd08      	ble.n	801d416 <_strtod_l+0x77e>
 801d404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d406:	9905      	ldr	r1, [sp, #20]
 801d408:	4620      	mov	r0, r4
 801d40a:	f002 fa91 	bl	801f930 <__pow5mult>
 801d40e:	9005      	str	r0, [sp, #20]
 801d410:	2800      	cmp	r0, #0
 801d412:	f43f ae89 	beq.w	801d128 <_strtod_l+0x490>
 801d416:	2f00      	cmp	r7, #0
 801d418:	dd08      	ble.n	801d42c <_strtod_l+0x794>
 801d41a:	9905      	ldr	r1, [sp, #20]
 801d41c:	463a      	mov	r2, r7
 801d41e:	4620      	mov	r0, r4
 801d420:	f002 fae0 	bl	801f9e4 <__lshift>
 801d424:	9005      	str	r0, [sp, #20]
 801d426:	2800      	cmp	r0, #0
 801d428:	f43f ae7e 	beq.w	801d128 <_strtod_l+0x490>
 801d42c:	f1b9 0f00 	cmp.w	r9, #0
 801d430:	dd08      	ble.n	801d444 <_strtod_l+0x7ac>
 801d432:	4631      	mov	r1, r6
 801d434:	464a      	mov	r2, r9
 801d436:	4620      	mov	r0, r4
 801d438:	f002 fad4 	bl	801f9e4 <__lshift>
 801d43c:	4606      	mov	r6, r0
 801d43e:	2800      	cmp	r0, #0
 801d440:	f43f ae72 	beq.w	801d128 <_strtod_l+0x490>
 801d444:	9a05      	ldr	r2, [sp, #20]
 801d446:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d448:	4620      	mov	r0, r4
 801d44a:	f002 fb57 	bl	801fafc <__mdiff>
 801d44e:	4605      	mov	r5, r0
 801d450:	2800      	cmp	r0, #0
 801d452:	f43f ae69 	beq.w	801d128 <_strtod_l+0x490>
 801d456:	68c3      	ldr	r3, [r0, #12]
 801d458:	930b      	str	r3, [sp, #44]	; 0x2c
 801d45a:	2300      	movs	r3, #0
 801d45c:	60c3      	str	r3, [r0, #12]
 801d45e:	4631      	mov	r1, r6
 801d460:	f002 fb30 	bl	801fac4 <__mcmp>
 801d464:	2800      	cmp	r0, #0
 801d466:	da60      	bge.n	801d52a <_strtod_l+0x892>
 801d468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d46a:	ea53 030a 	orrs.w	r3, r3, sl
 801d46e:	f040 8082 	bne.w	801d576 <_strtod_l+0x8de>
 801d472:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d476:	2b00      	cmp	r3, #0
 801d478:	d17d      	bne.n	801d576 <_strtod_l+0x8de>
 801d47a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d47e:	0d1b      	lsrs	r3, r3, #20
 801d480:	051b      	lsls	r3, r3, #20
 801d482:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d486:	d976      	bls.n	801d576 <_strtod_l+0x8de>
 801d488:	696b      	ldr	r3, [r5, #20]
 801d48a:	b913      	cbnz	r3, 801d492 <_strtod_l+0x7fa>
 801d48c:	692b      	ldr	r3, [r5, #16]
 801d48e:	2b01      	cmp	r3, #1
 801d490:	dd71      	ble.n	801d576 <_strtod_l+0x8de>
 801d492:	4629      	mov	r1, r5
 801d494:	2201      	movs	r2, #1
 801d496:	4620      	mov	r0, r4
 801d498:	f002 faa4 	bl	801f9e4 <__lshift>
 801d49c:	4631      	mov	r1, r6
 801d49e:	4605      	mov	r5, r0
 801d4a0:	f002 fb10 	bl	801fac4 <__mcmp>
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	dd66      	ble.n	801d576 <_strtod_l+0x8de>
 801d4a8:	9904      	ldr	r1, [sp, #16]
 801d4aa:	4a53      	ldr	r2, [pc, #332]	; (801d5f8 <_strtod_l+0x960>)
 801d4ac:	465b      	mov	r3, fp
 801d4ae:	2900      	cmp	r1, #0
 801d4b0:	f000 8081 	beq.w	801d5b6 <_strtod_l+0x91e>
 801d4b4:	ea02 010b 	and.w	r1, r2, fp
 801d4b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d4bc:	dc7b      	bgt.n	801d5b6 <_strtod_l+0x91e>
 801d4be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d4c2:	f77f aea9 	ble.w	801d218 <_strtod_l+0x580>
 801d4c6:	4b4d      	ldr	r3, [pc, #308]	; (801d5fc <_strtod_l+0x964>)
 801d4c8:	4650      	mov	r0, sl
 801d4ca:	4659      	mov	r1, fp
 801d4cc:	2200      	movs	r2, #0
 801d4ce:	f7e3 f8ab 	bl	8000628 <__aeabi_dmul>
 801d4d2:	460b      	mov	r3, r1
 801d4d4:	4303      	orrs	r3, r0
 801d4d6:	bf08      	it	eq
 801d4d8:	2322      	moveq	r3, #34	; 0x22
 801d4da:	4682      	mov	sl, r0
 801d4dc:	468b      	mov	fp, r1
 801d4de:	bf08      	it	eq
 801d4e0:	6023      	streq	r3, [r4, #0]
 801d4e2:	e62b      	b.n	801d13c <_strtod_l+0x4a4>
 801d4e4:	f04f 32ff 	mov.w	r2, #4294967295
 801d4e8:	fa02 f303 	lsl.w	r3, r2, r3
 801d4ec:	ea03 0a0a 	and.w	sl, r3, sl
 801d4f0:	e6e3      	b.n	801d2ba <_strtod_l+0x622>
 801d4f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801d4f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801d4fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801d4fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801d502:	fa01 f308 	lsl.w	r3, r1, r8
 801d506:	9308      	str	r3, [sp, #32]
 801d508:	910d      	str	r1, [sp, #52]	; 0x34
 801d50a:	e746      	b.n	801d39a <_strtod_l+0x702>
 801d50c:	2300      	movs	r3, #0
 801d50e:	9308      	str	r3, [sp, #32]
 801d510:	2301      	movs	r3, #1
 801d512:	930d      	str	r3, [sp, #52]	; 0x34
 801d514:	e741      	b.n	801d39a <_strtod_l+0x702>
 801d516:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d518:	4642      	mov	r2, r8
 801d51a:	4620      	mov	r0, r4
 801d51c:	f002 fa62 	bl	801f9e4 <__lshift>
 801d520:	9018      	str	r0, [sp, #96]	; 0x60
 801d522:	2800      	cmp	r0, #0
 801d524:	f47f af6b 	bne.w	801d3fe <_strtod_l+0x766>
 801d528:	e5fe      	b.n	801d128 <_strtod_l+0x490>
 801d52a:	465f      	mov	r7, fp
 801d52c:	d16e      	bne.n	801d60c <_strtod_l+0x974>
 801d52e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d534:	b342      	cbz	r2, 801d588 <_strtod_l+0x8f0>
 801d536:	4a32      	ldr	r2, [pc, #200]	; (801d600 <_strtod_l+0x968>)
 801d538:	4293      	cmp	r3, r2
 801d53a:	d128      	bne.n	801d58e <_strtod_l+0x8f6>
 801d53c:	9b04      	ldr	r3, [sp, #16]
 801d53e:	4651      	mov	r1, sl
 801d540:	b1eb      	cbz	r3, 801d57e <_strtod_l+0x8e6>
 801d542:	4b2d      	ldr	r3, [pc, #180]	; (801d5f8 <_strtod_l+0x960>)
 801d544:	403b      	ands	r3, r7
 801d546:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d54a:	f04f 32ff 	mov.w	r2, #4294967295
 801d54e:	d819      	bhi.n	801d584 <_strtod_l+0x8ec>
 801d550:	0d1b      	lsrs	r3, r3, #20
 801d552:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d556:	fa02 f303 	lsl.w	r3, r2, r3
 801d55a:	4299      	cmp	r1, r3
 801d55c:	d117      	bne.n	801d58e <_strtod_l+0x8f6>
 801d55e:	4b29      	ldr	r3, [pc, #164]	; (801d604 <_strtod_l+0x96c>)
 801d560:	429f      	cmp	r7, r3
 801d562:	d102      	bne.n	801d56a <_strtod_l+0x8d2>
 801d564:	3101      	adds	r1, #1
 801d566:	f43f addf 	beq.w	801d128 <_strtod_l+0x490>
 801d56a:	4b23      	ldr	r3, [pc, #140]	; (801d5f8 <_strtod_l+0x960>)
 801d56c:	403b      	ands	r3, r7
 801d56e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801d572:	f04f 0a00 	mov.w	sl, #0
 801d576:	9b04      	ldr	r3, [sp, #16]
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d1a4      	bne.n	801d4c6 <_strtod_l+0x82e>
 801d57c:	e5de      	b.n	801d13c <_strtod_l+0x4a4>
 801d57e:	f04f 33ff 	mov.w	r3, #4294967295
 801d582:	e7ea      	b.n	801d55a <_strtod_l+0x8c2>
 801d584:	4613      	mov	r3, r2
 801d586:	e7e8      	b.n	801d55a <_strtod_l+0x8c2>
 801d588:	ea53 030a 	orrs.w	r3, r3, sl
 801d58c:	d08c      	beq.n	801d4a8 <_strtod_l+0x810>
 801d58e:	9b08      	ldr	r3, [sp, #32]
 801d590:	b1db      	cbz	r3, 801d5ca <_strtod_l+0x932>
 801d592:	423b      	tst	r3, r7
 801d594:	d0ef      	beq.n	801d576 <_strtod_l+0x8de>
 801d596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d598:	9a04      	ldr	r2, [sp, #16]
 801d59a:	4650      	mov	r0, sl
 801d59c:	4659      	mov	r1, fp
 801d59e:	b1c3      	cbz	r3, 801d5d2 <_strtod_l+0x93a>
 801d5a0:	f7ff fb5d 	bl	801cc5e <sulp>
 801d5a4:	4602      	mov	r2, r0
 801d5a6:	460b      	mov	r3, r1
 801d5a8:	ec51 0b18 	vmov	r0, r1, d8
 801d5ac:	f7e2 fe86 	bl	80002bc <__adddf3>
 801d5b0:	4682      	mov	sl, r0
 801d5b2:	468b      	mov	fp, r1
 801d5b4:	e7df      	b.n	801d576 <_strtod_l+0x8de>
 801d5b6:	4013      	ands	r3, r2
 801d5b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d5bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d5c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d5c4:	f04f 3aff 	mov.w	sl, #4294967295
 801d5c8:	e7d5      	b.n	801d576 <_strtod_l+0x8de>
 801d5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5cc:	ea13 0f0a 	tst.w	r3, sl
 801d5d0:	e7e0      	b.n	801d594 <_strtod_l+0x8fc>
 801d5d2:	f7ff fb44 	bl	801cc5e <sulp>
 801d5d6:	4602      	mov	r2, r0
 801d5d8:	460b      	mov	r3, r1
 801d5da:	ec51 0b18 	vmov	r0, r1, d8
 801d5de:	f7e2 fe6b 	bl	80002b8 <__aeabi_dsub>
 801d5e2:	2200      	movs	r2, #0
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	4682      	mov	sl, r0
 801d5e8:	468b      	mov	fp, r1
 801d5ea:	f7e3 fa85 	bl	8000af8 <__aeabi_dcmpeq>
 801d5ee:	2800      	cmp	r0, #0
 801d5f0:	d0c1      	beq.n	801d576 <_strtod_l+0x8de>
 801d5f2:	e611      	b.n	801d218 <_strtod_l+0x580>
 801d5f4:	fffffc02 	.word	0xfffffc02
 801d5f8:	7ff00000 	.word	0x7ff00000
 801d5fc:	39500000 	.word	0x39500000
 801d600:	000fffff 	.word	0x000fffff
 801d604:	7fefffff 	.word	0x7fefffff
 801d608:	08022c00 	.word	0x08022c00
 801d60c:	4631      	mov	r1, r6
 801d60e:	4628      	mov	r0, r5
 801d610:	f002 fbd6 	bl	801fdc0 <__ratio>
 801d614:	ec59 8b10 	vmov	r8, r9, d0
 801d618:	ee10 0a10 	vmov	r0, s0
 801d61c:	2200      	movs	r2, #0
 801d61e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d622:	4649      	mov	r1, r9
 801d624:	f7e3 fa7c 	bl	8000b20 <__aeabi_dcmple>
 801d628:	2800      	cmp	r0, #0
 801d62a:	d07a      	beq.n	801d722 <_strtod_l+0xa8a>
 801d62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d04a      	beq.n	801d6c8 <_strtod_l+0xa30>
 801d632:	4b95      	ldr	r3, [pc, #596]	; (801d888 <_strtod_l+0xbf0>)
 801d634:	2200      	movs	r2, #0
 801d636:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d63a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801d888 <_strtod_l+0xbf0>
 801d63e:	f04f 0800 	mov.w	r8, #0
 801d642:	4b92      	ldr	r3, [pc, #584]	; (801d88c <_strtod_l+0xbf4>)
 801d644:	403b      	ands	r3, r7
 801d646:	930d      	str	r3, [sp, #52]	; 0x34
 801d648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d64a:	4b91      	ldr	r3, [pc, #580]	; (801d890 <_strtod_l+0xbf8>)
 801d64c:	429a      	cmp	r2, r3
 801d64e:	f040 80b0 	bne.w	801d7b2 <_strtod_l+0xb1a>
 801d652:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d656:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801d65a:	ec4b ab10 	vmov	d0, sl, fp
 801d65e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d662:	f002 fad5 	bl	801fc10 <__ulp>
 801d666:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d66a:	ec53 2b10 	vmov	r2, r3, d0
 801d66e:	f7e2 ffdb 	bl	8000628 <__aeabi_dmul>
 801d672:	4652      	mov	r2, sl
 801d674:	465b      	mov	r3, fp
 801d676:	f7e2 fe21 	bl	80002bc <__adddf3>
 801d67a:	460b      	mov	r3, r1
 801d67c:	4983      	ldr	r1, [pc, #524]	; (801d88c <_strtod_l+0xbf4>)
 801d67e:	4a85      	ldr	r2, [pc, #532]	; (801d894 <_strtod_l+0xbfc>)
 801d680:	4019      	ands	r1, r3
 801d682:	4291      	cmp	r1, r2
 801d684:	4682      	mov	sl, r0
 801d686:	d960      	bls.n	801d74a <_strtod_l+0xab2>
 801d688:	ee18 3a90 	vmov	r3, s17
 801d68c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d690:	4293      	cmp	r3, r2
 801d692:	d104      	bne.n	801d69e <_strtod_l+0xa06>
 801d694:	ee18 3a10 	vmov	r3, s16
 801d698:	3301      	adds	r3, #1
 801d69a:	f43f ad45 	beq.w	801d128 <_strtod_l+0x490>
 801d69e:	f8df b200 	ldr.w	fp, [pc, #512]	; 801d8a0 <_strtod_l+0xc08>
 801d6a2:	f04f 3aff 	mov.w	sl, #4294967295
 801d6a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d6a8:	4620      	mov	r0, r4
 801d6aa:	f001 ff7f 	bl	801f5ac <_Bfree>
 801d6ae:	9905      	ldr	r1, [sp, #20]
 801d6b0:	4620      	mov	r0, r4
 801d6b2:	f001 ff7b 	bl	801f5ac <_Bfree>
 801d6b6:	4631      	mov	r1, r6
 801d6b8:	4620      	mov	r0, r4
 801d6ba:	f001 ff77 	bl	801f5ac <_Bfree>
 801d6be:	4629      	mov	r1, r5
 801d6c0:	4620      	mov	r0, r4
 801d6c2:	f001 ff73 	bl	801f5ac <_Bfree>
 801d6c6:	e61a      	b.n	801d2fe <_strtod_l+0x666>
 801d6c8:	f1ba 0f00 	cmp.w	sl, #0
 801d6cc:	d11b      	bne.n	801d706 <_strtod_l+0xa6e>
 801d6ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d6d2:	b9f3      	cbnz	r3, 801d712 <_strtod_l+0xa7a>
 801d6d4:	4b6c      	ldr	r3, [pc, #432]	; (801d888 <_strtod_l+0xbf0>)
 801d6d6:	2200      	movs	r2, #0
 801d6d8:	4640      	mov	r0, r8
 801d6da:	4649      	mov	r1, r9
 801d6dc:	f7e3 fa16 	bl	8000b0c <__aeabi_dcmplt>
 801d6e0:	b9d0      	cbnz	r0, 801d718 <_strtod_l+0xa80>
 801d6e2:	4640      	mov	r0, r8
 801d6e4:	4649      	mov	r1, r9
 801d6e6:	4b6c      	ldr	r3, [pc, #432]	; (801d898 <_strtod_l+0xc00>)
 801d6e8:	2200      	movs	r2, #0
 801d6ea:	f7e2 ff9d 	bl	8000628 <__aeabi_dmul>
 801d6ee:	4680      	mov	r8, r0
 801d6f0:	4689      	mov	r9, r1
 801d6f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d6f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801d6fa:	9315      	str	r3, [sp, #84]	; 0x54
 801d6fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801d700:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d704:	e79d      	b.n	801d642 <_strtod_l+0x9aa>
 801d706:	f1ba 0f01 	cmp.w	sl, #1
 801d70a:	d102      	bne.n	801d712 <_strtod_l+0xa7a>
 801d70c:	2f00      	cmp	r7, #0
 801d70e:	f43f ad83 	beq.w	801d218 <_strtod_l+0x580>
 801d712:	4b62      	ldr	r3, [pc, #392]	; (801d89c <_strtod_l+0xc04>)
 801d714:	2200      	movs	r2, #0
 801d716:	e78e      	b.n	801d636 <_strtod_l+0x99e>
 801d718:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801d898 <_strtod_l+0xc00>
 801d71c:	f04f 0800 	mov.w	r8, #0
 801d720:	e7e7      	b.n	801d6f2 <_strtod_l+0xa5a>
 801d722:	4b5d      	ldr	r3, [pc, #372]	; (801d898 <_strtod_l+0xc00>)
 801d724:	4640      	mov	r0, r8
 801d726:	4649      	mov	r1, r9
 801d728:	2200      	movs	r2, #0
 801d72a:	f7e2 ff7d 	bl	8000628 <__aeabi_dmul>
 801d72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d730:	4680      	mov	r8, r0
 801d732:	4689      	mov	r9, r1
 801d734:	b933      	cbnz	r3, 801d744 <_strtod_l+0xaac>
 801d736:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d73a:	900e      	str	r0, [sp, #56]	; 0x38
 801d73c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d73e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d742:	e7dd      	b.n	801d700 <_strtod_l+0xa68>
 801d744:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801d748:	e7f9      	b.n	801d73e <_strtod_l+0xaa6>
 801d74a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801d74e:	9b04      	ldr	r3, [sp, #16]
 801d750:	2b00      	cmp	r3, #0
 801d752:	d1a8      	bne.n	801d6a6 <_strtod_l+0xa0e>
 801d754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d75a:	0d1b      	lsrs	r3, r3, #20
 801d75c:	051b      	lsls	r3, r3, #20
 801d75e:	429a      	cmp	r2, r3
 801d760:	d1a1      	bne.n	801d6a6 <_strtod_l+0xa0e>
 801d762:	4640      	mov	r0, r8
 801d764:	4649      	mov	r1, r9
 801d766:	f7e3 fabf 	bl	8000ce8 <__aeabi_d2lz>
 801d76a:	f7e2 ff2f 	bl	80005cc <__aeabi_l2d>
 801d76e:	4602      	mov	r2, r0
 801d770:	460b      	mov	r3, r1
 801d772:	4640      	mov	r0, r8
 801d774:	4649      	mov	r1, r9
 801d776:	f7e2 fd9f 	bl	80002b8 <__aeabi_dsub>
 801d77a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d780:	ea43 030a 	orr.w	r3, r3, sl
 801d784:	4313      	orrs	r3, r2
 801d786:	4680      	mov	r8, r0
 801d788:	4689      	mov	r9, r1
 801d78a:	d055      	beq.n	801d838 <_strtod_l+0xba0>
 801d78c:	a336      	add	r3, pc, #216	; (adr r3, 801d868 <_strtod_l+0xbd0>)
 801d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d792:	f7e3 f9bb 	bl	8000b0c <__aeabi_dcmplt>
 801d796:	2800      	cmp	r0, #0
 801d798:	f47f acd0 	bne.w	801d13c <_strtod_l+0x4a4>
 801d79c:	a334      	add	r3, pc, #208	; (adr r3, 801d870 <_strtod_l+0xbd8>)
 801d79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7a2:	4640      	mov	r0, r8
 801d7a4:	4649      	mov	r1, r9
 801d7a6:	f7e3 f9cf 	bl	8000b48 <__aeabi_dcmpgt>
 801d7aa:	2800      	cmp	r0, #0
 801d7ac:	f43f af7b 	beq.w	801d6a6 <_strtod_l+0xa0e>
 801d7b0:	e4c4      	b.n	801d13c <_strtod_l+0x4a4>
 801d7b2:	9b04      	ldr	r3, [sp, #16]
 801d7b4:	b333      	cbz	r3, 801d804 <_strtod_l+0xb6c>
 801d7b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d7bc:	d822      	bhi.n	801d804 <_strtod_l+0xb6c>
 801d7be:	a32e      	add	r3, pc, #184	; (adr r3, 801d878 <_strtod_l+0xbe0>)
 801d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7c4:	4640      	mov	r0, r8
 801d7c6:	4649      	mov	r1, r9
 801d7c8:	f7e3 f9aa 	bl	8000b20 <__aeabi_dcmple>
 801d7cc:	b1a0      	cbz	r0, 801d7f8 <_strtod_l+0xb60>
 801d7ce:	4649      	mov	r1, r9
 801d7d0:	4640      	mov	r0, r8
 801d7d2:	f7e3 fa01 	bl	8000bd8 <__aeabi_d2uiz>
 801d7d6:	2801      	cmp	r0, #1
 801d7d8:	bf38      	it	cc
 801d7da:	2001      	movcc	r0, #1
 801d7dc:	f7e2 feaa 	bl	8000534 <__aeabi_ui2d>
 801d7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7e2:	4680      	mov	r8, r0
 801d7e4:	4689      	mov	r9, r1
 801d7e6:	bb23      	cbnz	r3, 801d832 <_strtod_l+0xb9a>
 801d7e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d7ec:	9010      	str	r0, [sp, #64]	; 0x40
 801d7ee:	9311      	str	r3, [sp, #68]	; 0x44
 801d7f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801d7f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d7fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801d800:	1a9b      	subs	r3, r3, r2
 801d802:	9309      	str	r3, [sp, #36]	; 0x24
 801d804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d808:	eeb0 0a48 	vmov.f32	s0, s16
 801d80c:	eef0 0a68 	vmov.f32	s1, s17
 801d810:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d814:	f002 f9fc 	bl	801fc10 <__ulp>
 801d818:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d81c:	ec53 2b10 	vmov	r2, r3, d0
 801d820:	f7e2 ff02 	bl	8000628 <__aeabi_dmul>
 801d824:	ec53 2b18 	vmov	r2, r3, d8
 801d828:	f7e2 fd48 	bl	80002bc <__adddf3>
 801d82c:	4682      	mov	sl, r0
 801d82e:	468b      	mov	fp, r1
 801d830:	e78d      	b.n	801d74e <_strtod_l+0xab6>
 801d832:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801d836:	e7db      	b.n	801d7f0 <_strtod_l+0xb58>
 801d838:	a311      	add	r3, pc, #68	; (adr r3, 801d880 <_strtod_l+0xbe8>)
 801d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d83e:	f7e3 f965 	bl	8000b0c <__aeabi_dcmplt>
 801d842:	e7b2      	b.n	801d7aa <_strtod_l+0xb12>
 801d844:	2300      	movs	r3, #0
 801d846:	930a      	str	r3, [sp, #40]	; 0x28
 801d848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d84a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d84c:	6013      	str	r3, [r2, #0]
 801d84e:	f7ff ba6b 	b.w	801cd28 <_strtod_l+0x90>
 801d852:	2a65      	cmp	r2, #101	; 0x65
 801d854:	f43f ab5f 	beq.w	801cf16 <_strtod_l+0x27e>
 801d858:	2a45      	cmp	r2, #69	; 0x45
 801d85a:	f43f ab5c 	beq.w	801cf16 <_strtod_l+0x27e>
 801d85e:	2301      	movs	r3, #1
 801d860:	f7ff bb94 	b.w	801cf8c <_strtod_l+0x2f4>
 801d864:	f3af 8000 	nop.w
 801d868:	94a03595 	.word	0x94a03595
 801d86c:	3fdfffff 	.word	0x3fdfffff
 801d870:	35afe535 	.word	0x35afe535
 801d874:	3fe00000 	.word	0x3fe00000
 801d878:	ffc00000 	.word	0xffc00000
 801d87c:	41dfffff 	.word	0x41dfffff
 801d880:	94a03595 	.word	0x94a03595
 801d884:	3fcfffff 	.word	0x3fcfffff
 801d888:	3ff00000 	.word	0x3ff00000
 801d88c:	7ff00000 	.word	0x7ff00000
 801d890:	7fe00000 	.word	0x7fe00000
 801d894:	7c9fffff 	.word	0x7c9fffff
 801d898:	3fe00000 	.word	0x3fe00000
 801d89c:	bff00000 	.word	0xbff00000
 801d8a0:	7fefffff 	.word	0x7fefffff

0801d8a4 <_strtod_r>:
 801d8a4:	4b01      	ldr	r3, [pc, #4]	; (801d8ac <_strtod_r+0x8>)
 801d8a6:	f7ff b9f7 	b.w	801cc98 <_strtod_l>
 801d8aa:	bf00      	nop
 801d8ac:	200001cc 	.word	0x200001cc

0801d8b0 <strtok>:
 801d8b0:	4b16      	ldr	r3, [pc, #88]	; (801d90c <strtok+0x5c>)
 801d8b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d8b4:	681e      	ldr	r6, [r3, #0]
 801d8b6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801d8b8:	4605      	mov	r5, r0
 801d8ba:	b9fc      	cbnz	r4, 801d8fc <strtok+0x4c>
 801d8bc:	2050      	movs	r0, #80	; 0x50
 801d8be:	9101      	str	r1, [sp, #4]
 801d8c0:	f7fe f94c 	bl	801bb5c <malloc>
 801d8c4:	9901      	ldr	r1, [sp, #4]
 801d8c6:	65b0      	str	r0, [r6, #88]	; 0x58
 801d8c8:	4602      	mov	r2, r0
 801d8ca:	b920      	cbnz	r0, 801d8d6 <strtok+0x26>
 801d8cc:	4b10      	ldr	r3, [pc, #64]	; (801d910 <strtok+0x60>)
 801d8ce:	4811      	ldr	r0, [pc, #68]	; (801d914 <strtok+0x64>)
 801d8d0:	2157      	movs	r1, #87	; 0x57
 801d8d2:	f000 f9d1 	bl	801dc78 <__assert_func>
 801d8d6:	e9c0 4400 	strd	r4, r4, [r0]
 801d8da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801d8de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801d8e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801d8e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801d8ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801d8ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801d8f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801d8f6:	6184      	str	r4, [r0, #24]
 801d8f8:	7704      	strb	r4, [r0, #28]
 801d8fa:	6244      	str	r4, [r0, #36]	; 0x24
 801d8fc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801d8fe:	2301      	movs	r3, #1
 801d900:	4628      	mov	r0, r5
 801d902:	b002      	add	sp, #8
 801d904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d908:	f000 b806 	b.w	801d918 <__strtok_r>
 801d90c:	20000164 	.word	0x20000164
 801d910:	08022c28 	.word	0x08022c28
 801d914:	08022c3f 	.word	0x08022c3f

0801d918 <__strtok_r>:
 801d918:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d91a:	b908      	cbnz	r0, 801d920 <__strtok_r+0x8>
 801d91c:	6810      	ldr	r0, [r2, #0]
 801d91e:	b188      	cbz	r0, 801d944 <__strtok_r+0x2c>
 801d920:	4604      	mov	r4, r0
 801d922:	4620      	mov	r0, r4
 801d924:	f814 5b01 	ldrb.w	r5, [r4], #1
 801d928:	460f      	mov	r7, r1
 801d92a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d92e:	b91e      	cbnz	r6, 801d938 <__strtok_r+0x20>
 801d930:	b965      	cbnz	r5, 801d94c <__strtok_r+0x34>
 801d932:	6015      	str	r5, [r2, #0]
 801d934:	4628      	mov	r0, r5
 801d936:	e005      	b.n	801d944 <__strtok_r+0x2c>
 801d938:	42b5      	cmp	r5, r6
 801d93a:	d1f6      	bne.n	801d92a <__strtok_r+0x12>
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d1f0      	bne.n	801d922 <__strtok_r+0xa>
 801d940:	6014      	str	r4, [r2, #0]
 801d942:	7003      	strb	r3, [r0, #0]
 801d944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d946:	461c      	mov	r4, r3
 801d948:	e00c      	b.n	801d964 <__strtok_r+0x4c>
 801d94a:	b915      	cbnz	r5, 801d952 <__strtok_r+0x3a>
 801d94c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d950:	460e      	mov	r6, r1
 801d952:	f816 5b01 	ldrb.w	r5, [r6], #1
 801d956:	42ab      	cmp	r3, r5
 801d958:	d1f7      	bne.n	801d94a <__strtok_r+0x32>
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d0f3      	beq.n	801d946 <__strtok_r+0x2e>
 801d95e:	2300      	movs	r3, #0
 801d960:	f804 3c01 	strb.w	r3, [r4, #-1]
 801d964:	6014      	str	r4, [r2, #0]
 801d966:	e7ed      	b.n	801d944 <__strtok_r+0x2c>

0801d968 <_strtol_l.constprop.0>:
 801d968:	2b01      	cmp	r3, #1
 801d96a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d96e:	d001      	beq.n	801d974 <_strtol_l.constprop.0+0xc>
 801d970:	2b24      	cmp	r3, #36	; 0x24
 801d972:	d906      	bls.n	801d982 <_strtol_l.constprop.0+0x1a>
 801d974:	f7fe f856 	bl	801ba24 <__errno>
 801d978:	2316      	movs	r3, #22
 801d97a:	6003      	str	r3, [r0, #0]
 801d97c:	2000      	movs	r0, #0
 801d97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d982:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801da68 <_strtol_l.constprop.0+0x100>
 801d986:	460d      	mov	r5, r1
 801d988:	462e      	mov	r6, r5
 801d98a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d98e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801d992:	f017 0708 	ands.w	r7, r7, #8
 801d996:	d1f7      	bne.n	801d988 <_strtol_l.constprop.0+0x20>
 801d998:	2c2d      	cmp	r4, #45	; 0x2d
 801d99a:	d132      	bne.n	801da02 <_strtol_l.constprop.0+0x9a>
 801d99c:	782c      	ldrb	r4, [r5, #0]
 801d99e:	2701      	movs	r7, #1
 801d9a0:	1cb5      	adds	r5, r6, #2
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d05b      	beq.n	801da5e <_strtol_l.constprop.0+0xf6>
 801d9a6:	2b10      	cmp	r3, #16
 801d9a8:	d109      	bne.n	801d9be <_strtol_l.constprop.0+0x56>
 801d9aa:	2c30      	cmp	r4, #48	; 0x30
 801d9ac:	d107      	bne.n	801d9be <_strtol_l.constprop.0+0x56>
 801d9ae:	782c      	ldrb	r4, [r5, #0]
 801d9b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d9b4:	2c58      	cmp	r4, #88	; 0x58
 801d9b6:	d14d      	bne.n	801da54 <_strtol_l.constprop.0+0xec>
 801d9b8:	786c      	ldrb	r4, [r5, #1]
 801d9ba:	2310      	movs	r3, #16
 801d9bc:	3502      	adds	r5, #2
 801d9be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801d9c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801d9c6:	f04f 0c00 	mov.w	ip, #0
 801d9ca:	fbb8 f9f3 	udiv	r9, r8, r3
 801d9ce:	4666      	mov	r6, ip
 801d9d0:	fb03 8a19 	mls	sl, r3, r9, r8
 801d9d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801d9d8:	f1be 0f09 	cmp.w	lr, #9
 801d9dc:	d816      	bhi.n	801da0c <_strtol_l.constprop.0+0xa4>
 801d9de:	4674      	mov	r4, lr
 801d9e0:	42a3      	cmp	r3, r4
 801d9e2:	dd24      	ble.n	801da2e <_strtol_l.constprop.0+0xc6>
 801d9e4:	f1bc 0f00 	cmp.w	ip, #0
 801d9e8:	db1e      	blt.n	801da28 <_strtol_l.constprop.0+0xc0>
 801d9ea:	45b1      	cmp	r9, r6
 801d9ec:	d31c      	bcc.n	801da28 <_strtol_l.constprop.0+0xc0>
 801d9ee:	d101      	bne.n	801d9f4 <_strtol_l.constprop.0+0x8c>
 801d9f0:	45a2      	cmp	sl, r4
 801d9f2:	db19      	blt.n	801da28 <_strtol_l.constprop.0+0xc0>
 801d9f4:	fb06 4603 	mla	r6, r6, r3, r4
 801d9f8:	f04f 0c01 	mov.w	ip, #1
 801d9fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801da00:	e7e8      	b.n	801d9d4 <_strtol_l.constprop.0+0x6c>
 801da02:	2c2b      	cmp	r4, #43	; 0x2b
 801da04:	bf04      	itt	eq
 801da06:	782c      	ldrbeq	r4, [r5, #0]
 801da08:	1cb5      	addeq	r5, r6, #2
 801da0a:	e7ca      	b.n	801d9a2 <_strtol_l.constprop.0+0x3a>
 801da0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801da10:	f1be 0f19 	cmp.w	lr, #25
 801da14:	d801      	bhi.n	801da1a <_strtol_l.constprop.0+0xb2>
 801da16:	3c37      	subs	r4, #55	; 0x37
 801da18:	e7e2      	b.n	801d9e0 <_strtol_l.constprop.0+0x78>
 801da1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801da1e:	f1be 0f19 	cmp.w	lr, #25
 801da22:	d804      	bhi.n	801da2e <_strtol_l.constprop.0+0xc6>
 801da24:	3c57      	subs	r4, #87	; 0x57
 801da26:	e7db      	b.n	801d9e0 <_strtol_l.constprop.0+0x78>
 801da28:	f04f 3cff 	mov.w	ip, #4294967295
 801da2c:	e7e6      	b.n	801d9fc <_strtol_l.constprop.0+0x94>
 801da2e:	f1bc 0f00 	cmp.w	ip, #0
 801da32:	da05      	bge.n	801da40 <_strtol_l.constprop.0+0xd8>
 801da34:	2322      	movs	r3, #34	; 0x22
 801da36:	6003      	str	r3, [r0, #0]
 801da38:	4646      	mov	r6, r8
 801da3a:	b942      	cbnz	r2, 801da4e <_strtol_l.constprop.0+0xe6>
 801da3c:	4630      	mov	r0, r6
 801da3e:	e79e      	b.n	801d97e <_strtol_l.constprop.0+0x16>
 801da40:	b107      	cbz	r7, 801da44 <_strtol_l.constprop.0+0xdc>
 801da42:	4276      	negs	r6, r6
 801da44:	2a00      	cmp	r2, #0
 801da46:	d0f9      	beq.n	801da3c <_strtol_l.constprop.0+0xd4>
 801da48:	f1bc 0f00 	cmp.w	ip, #0
 801da4c:	d000      	beq.n	801da50 <_strtol_l.constprop.0+0xe8>
 801da4e:	1e69      	subs	r1, r5, #1
 801da50:	6011      	str	r1, [r2, #0]
 801da52:	e7f3      	b.n	801da3c <_strtol_l.constprop.0+0xd4>
 801da54:	2430      	movs	r4, #48	; 0x30
 801da56:	2b00      	cmp	r3, #0
 801da58:	d1b1      	bne.n	801d9be <_strtol_l.constprop.0+0x56>
 801da5a:	2308      	movs	r3, #8
 801da5c:	e7af      	b.n	801d9be <_strtol_l.constprop.0+0x56>
 801da5e:	2c30      	cmp	r4, #48	; 0x30
 801da60:	d0a5      	beq.n	801d9ae <_strtol_l.constprop.0+0x46>
 801da62:	230a      	movs	r3, #10
 801da64:	e7ab      	b.n	801d9be <_strtol_l.constprop.0+0x56>
 801da66:	bf00      	nop
 801da68:	08022cd9 	.word	0x08022cd9

0801da6c <_strtol_r>:
 801da6c:	f7ff bf7c 	b.w	801d968 <_strtol_l.constprop.0>

0801da70 <strtol>:
 801da70:	4613      	mov	r3, r2
 801da72:	460a      	mov	r2, r1
 801da74:	4601      	mov	r1, r0
 801da76:	4802      	ldr	r0, [pc, #8]	; (801da80 <strtol+0x10>)
 801da78:	6800      	ldr	r0, [r0, #0]
 801da7a:	f7ff bf75 	b.w	801d968 <_strtol_l.constprop.0>
 801da7e:	bf00      	nop
 801da80:	20000164 	.word	0x20000164

0801da84 <_vsniprintf_r>:
 801da84:	b530      	push	{r4, r5, lr}
 801da86:	4614      	mov	r4, r2
 801da88:	2c00      	cmp	r4, #0
 801da8a:	b09b      	sub	sp, #108	; 0x6c
 801da8c:	4605      	mov	r5, r0
 801da8e:	461a      	mov	r2, r3
 801da90:	da05      	bge.n	801da9e <_vsniprintf_r+0x1a>
 801da92:	238b      	movs	r3, #139	; 0x8b
 801da94:	6003      	str	r3, [r0, #0]
 801da96:	f04f 30ff 	mov.w	r0, #4294967295
 801da9a:	b01b      	add	sp, #108	; 0x6c
 801da9c:	bd30      	pop	{r4, r5, pc}
 801da9e:	f44f 7302 	mov.w	r3, #520	; 0x208
 801daa2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801daa6:	bf14      	ite	ne
 801daa8:	f104 33ff 	addne.w	r3, r4, #4294967295
 801daac:	4623      	moveq	r3, r4
 801daae:	9302      	str	r3, [sp, #8]
 801dab0:	9305      	str	r3, [sp, #20]
 801dab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dab6:	9100      	str	r1, [sp, #0]
 801dab8:	9104      	str	r1, [sp, #16]
 801daba:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dabe:	4669      	mov	r1, sp
 801dac0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dac2:	f002 fa65 	bl	801ff90 <_svfiprintf_r>
 801dac6:	1c43      	adds	r3, r0, #1
 801dac8:	bfbc      	itt	lt
 801daca:	238b      	movlt	r3, #139	; 0x8b
 801dacc:	602b      	strlt	r3, [r5, #0]
 801dace:	2c00      	cmp	r4, #0
 801dad0:	d0e3      	beq.n	801da9a <_vsniprintf_r+0x16>
 801dad2:	9b00      	ldr	r3, [sp, #0]
 801dad4:	2200      	movs	r2, #0
 801dad6:	701a      	strb	r2, [r3, #0]
 801dad8:	e7df      	b.n	801da9a <_vsniprintf_r+0x16>
	...

0801dadc <vsniprintf>:
 801dadc:	b507      	push	{r0, r1, r2, lr}
 801dade:	9300      	str	r3, [sp, #0]
 801dae0:	4613      	mov	r3, r2
 801dae2:	460a      	mov	r2, r1
 801dae4:	4601      	mov	r1, r0
 801dae6:	4803      	ldr	r0, [pc, #12]	; (801daf4 <vsniprintf+0x18>)
 801dae8:	6800      	ldr	r0, [r0, #0]
 801daea:	f7ff ffcb 	bl	801da84 <_vsniprintf_r>
 801daee:	b003      	add	sp, #12
 801daf0:	f85d fb04 	ldr.w	pc, [sp], #4
 801daf4:	20000164 	.word	0x20000164

0801daf8 <__swbuf_r>:
 801daf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dafa:	460e      	mov	r6, r1
 801dafc:	4614      	mov	r4, r2
 801dafe:	4605      	mov	r5, r0
 801db00:	b118      	cbz	r0, 801db0a <__swbuf_r+0x12>
 801db02:	6983      	ldr	r3, [r0, #24]
 801db04:	b90b      	cbnz	r3, 801db0a <__swbuf_r+0x12>
 801db06:	f001 f86b 	bl	801ebe0 <__sinit>
 801db0a:	4b21      	ldr	r3, [pc, #132]	; (801db90 <__swbuf_r+0x98>)
 801db0c:	429c      	cmp	r4, r3
 801db0e:	d12b      	bne.n	801db68 <__swbuf_r+0x70>
 801db10:	686c      	ldr	r4, [r5, #4]
 801db12:	69a3      	ldr	r3, [r4, #24]
 801db14:	60a3      	str	r3, [r4, #8]
 801db16:	89a3      	ldrh	r3, [r4, #12]
 801db18:	071a      	lsls	r2, r3, #28
 801db1a:	d52f      	bpl.n	801db7c <__swbuf_r+0x84>
 801db1c:	6923      	ldr	r3, [r4, #16]
 801db1e:	b36b      	cbz	r3, 801db7c <__swbuf_r+0x84>
 801db20:	6923      	ldr	r3, [r4, #16]
 801db22:	6820      	ldr	r0, [r4, #0]
 801db24:	1ac0      	subs	r0, r0, r3
 801db26:	6963      	ldr	r3, [r4, #20]
 801db28:	b2f6      	uxtb	r6, r6
 801db2a:	4283      	cmp	r3, r0
 801db2c:	4637      	mov	r7, r6
 801db2e:	dc04      	bgt.n	801db3a <__swbuf_r+0x42>
 801db30:	4621      	mov	r1, r4
 801db32:	4628      	mov	r0, r5
 801db34:	f000 ffc0 	bl	801eab8 <_fflush_r>
 801db38:	bb30      	cbnz	r0, 801db88 <__swbuf_r+0x90>
 801db3a:	68a3      	ldr	r3, [r4, #8]
 801db3c:	3b01      	subs	r3, #1
 801db3e:	60a3      	str	r3, [r4, #8]
 801db40:	6823      	ldr	r3, [r4, #0]
 801db42:	1c5a      	adds	r2, r3, #1
 801db44:	6022      	str	r2, [r4, #0]
 801db46:	701e      	strb	r6, [r3, #0]
 801db48:	6963      	ldr	r3, [r4, #20]
 801db4a:	3001      	adds	r0, #1
 801db4c:	4283      	cmp	r3, r0
 801db4e:	d004      	beq.n	801db5a <__swbuf_r+0x62>
 801db50:	89a3      	ldrh	r3, [r4, #12]
 801db52:	07db      	lsls	r3, r3, #31
 801db54:	d506      	bpl.n	801db64 <__swbuf_r+0x6c>
 801db56:	2e0a      	cmp	r6, #10
 801db58:	d104      	bne.n	801db64 <__swbuf_r+0x6c>
 801db5a:	4621      	mov	r1, r4
 801db5c:	4628      	mov	r0, r5
 801db5e:	f000 ffab 	bl	801eab8 <_fflush_r>
 801db62:	b988      	cbnz	r0, 801db88 <__swbuf_r+0x90>
 801db64:	4638      	mov	r0, r7
 801db66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db68:	4b0a      	ldr	r3, [pc, #40]	; (801db94 <__swbuf_r+0x9c>)
 801db6a:	429c      	cmp	r4, r3
 801db6c:	d101      	bne.n	801db72 <__swbuf_r+0x7a>
 801db6e:	68ac      	ldr	r4, [r5, #8]
 801db70:	e7cf      	b.n	801db12 <__swbuf_r+0x1a>
 801db72:	4b09      	ldr	r3, [pc, #36]	; (801db98 <__swbuf_r+0xa0>)
 801db74:	429c      	cmp	r4, r3
 801db76:	bf08      	it	eq
 801db78:	68ec      	ldreq	r4, [r5, #12]
 801db7a:	e7ca      	b.n	801db12 <__swbuf_r+0x1a>
 801db7c:	4621      	mov	r1, r4
 801db7e:	4628      	mov	r0, r5
 801db80:	f000 f80c 	bl	801db9c <__swsetup_r>
 801db84:	2800      	cmp	r0, #0
 801db86:	d0cb      	beq.n	801db20 <__swbuf_r+0x28>
 801db88:	f04f 37ff 	mov.w	r7, #4294967295
 801db8c:	e7ea      	b.n	801db64 <__swbuf_r+0x6c>
 801db8e:	bf00      	nop
 801db90:	08022e74 	.word	0x08022e74
 801db94:	08022e94 	.word	0x08022e94
 801db98:	08022e54 	.word	0x08022e54

0801db9c <__swsetup_r>:
 801db9c:	4b32      	ldr	r3, [pc, #200]	; (801dc68 <__swsetup_r+0xcc>)
 801db9e:	b570      	push	{r4, r5, r6, lr}
 801dba0:	681d      	ldr	r5, [r3, #0]
 801dba2:	4606      	mov	r6, r0
 801dba4:	460c      	mov	r4, r1
 801dba6:	b125      	cbz	r5, 801dbb2 <__swsetup_r+0x16>
 801dba8:	69ab      	ldr	r3, [r5, #24]
 801dbaa:	b913      	cbnz	r3, 801dbb2 <__swsetup_r+0x16>
 801dbac:	4628      	mov	r0, r5
 801dbae:	f001 f817 	bl	801ebe0 <__sinit>
 801dbb2:	4b2e      	ldr	r3, [pc, #184]	; (801dc6c <__swsetup_r+0xd0>)
 801dbb4:	429c      	cmp	r4, r3
 801dbb6:	d10f      	bne.n	801dbd8 <__swsetup_r+0x3c>
 801dbb8:	686c      	ldr	r4, [r5, #4]
 801dbba:	89a3      	ldrh	r3, [r4, #12]
 801dbbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dbc0:	0719      	lsls	r1, r3, #28
 801dbc2:	d42c      	bmi.n	801dc1e <__swsetup_r+0x82>
 801dbc4:	06dd      	lsls	r5, r3, #27
 801dbc6:	d411      	bmi.n	801dbec <__swsetup_r+0x50>
 801dbc8:	2309      	movs	r3, #9
 801dbca:	6033      	str	r3, [r6, #0]
 801dbcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dbd0:	81a3      	strh	r3, [r4, #12]
 801dbd2:	f04f 30ff 	mov.w	r0, #4294967295
 801dbd6:	e03e      	b.n	801dc56 <__swsetup_r+0xba>
 801dbd8:	4b25      	ldr	r3, [pc, #148]	; (801dc70 <__swsetup_r+0xd4>)
 801dbda:	429c      	cmp	r4, r3
 801dbdc:	d101      	bne.n	801dbe2 <__swsetup_r+0x46>
 801dbde:	68ac      	ldr	r4, [r5, #8]
 801dbe0:	e7eb      	b.n	801dbba <__swsetup_r+0x1e>
 801dbe2:	4b24      	ldr	r3, [pc, #144]	; (801dc74 <__swsetup_r+0xd8>)
 801dbe4:	429c      	cmp	r4, r3
 801dbe6:	bf08      	it	eq
 801dbe8:	68ec      	ldreq	r4, [r5, #12]
 801dbea:	e7e6      	b.n	801dbba <__swsetup_r+0x1e>
 801dbec:	0758      	lsls	r0, r3, #29
 801dbee:	d512      	bpl.n	801dc16 <__swsetup_r+0x7a>
 801dbf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dbf2:	b141      	cbz	r1, 801dc06 <__swsetup_r+0x6a>
 801dbf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dbf8:	4299      	cmp	r1, r3
 801dbfa:	d002      	beq.n	801dc02 <__swsetup_r+0x66>
 801dbfc:	4630      	mov	r0, r6
 801dbfe:	f7fd ffe5 	bl	801bbcc <_free_r>
 801dc02:	2300      	movs	r3, #0
 801dc04:	6363      	str	r3, [r4, #52]	; 0x34
 801dc06:	89a3      	ldrh	r3, [r4, #12]
 801dc08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dc0c:	81a3      	strh	r3, [r4, #12]
 801dc0e:	2300      	movs	r3, #0
 801dc10:	6063      	str	r3, [r4, #4]
 801dc12:	6923      	ldr	r3, [r4, #16]
 801dc14:	6023      	str	r3, [r4, #0]
 801dc16:	89a3      	ldrh	r3, [r4, #12]
 801dc18:	f043 0308 	orr.w	r3, r3, #8
 801dc1c:	81a3      	strh	r3, [r4, #12]
 801dc1e:	6923      	ldr	r3, [r4, #16]
 801dc20:	b94b      	cbnz	r3, 801dc36 <__swsetup_r+0x9a>
 801dc22:	89a3      	ldrh	r3, [r4, #12]
 801dc24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dc28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dc2c:	d003      	beq.n	801dc36 <__swsetup_r+0x9a>
 801dc2e:	4621      	mov	r1, r4
 801dc30:	4630      	mov	r0, r6
 801dc32:	f001 fc1d 	bl	801f470 <__smakebuf_r>
 801dc36:	89a0      	ldrh	r0, [r4, #12]
 801dc38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dc3c:	f010 0301 	ands.w	r3, r0, #1
 801dc40:	d00a      	beq.n	801dc58 <__swsetup_r+0xbc>
 801dc42:	2300      	movs	r3, #0
 801dc44:	60a3      	str	r3, [r4, #8]
 801dc46:	6963      	ldr	r3, [r4, #20]
 801dc48:	425b      	negs	r3, r3
 801dc4a:	61a3      	str	r3, [r4, #24]
 801dc4c:	6923      	ldr	r3, [r4, #16]
 801dc4e:	b943      	cbnz	r3, 801dc62 <__swsetup_r+0xc6>
 801dc50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dc54:	d1ba      	bne.n	801dbcc <__swsetup_r+0x30>
 801dc56:	bd70      	pop	{r4, r5, r6, pc}
 801dc58:	0781      	lsls	r1, r0, #30
 801dc5a:	bf58      	it	pl
 801dc5c:	6963      	ldrpl	r3, [r4, #20]
 801dc5e:	60a3      	str	r3, [r4, #8]
 801dc60:	e7f4      	b.n	801dc4c <__swsetup_r+0xb0>
 801dc62:	2000      	movs	r0, #0
 801dc64:	e7f7      	b.n	801dc56 <__swsetup_r+0xba>
 801dc66:	bf00      	nop
 801dc68:	20000164 	.word	0x20000164
 801dc6c:	08022e74 	.word	0x08022e74
 801dc70:	08022e94 	.word	0x08022e94
 801dc74:	08022e54 	.word	0x08022e54

0801dc78 <__assert_func>:
 801dc78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dc7a:	4614      	mov	r4, r2
 801dc7c:	461a      	mov	r2, r3
 801dc7e:	4b09      	ldr	r3, [pc, #36]	; (801dca4 <__assert_func+0x2c>)
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	4605      	mov	r5, r0
 801dc84:	68d8      	ldr	r0, [r3, #12]
 801dc86:	b14c      	cbz	r4, 801dc9c <__assert_func+0x24>
 801dc88:	4b07      	ldr	r3, [pc, #28]	; (801dca8 <__assert_func+0x30>)
 801dc8a:	9100      	str	r1, [sp, #0]
 801dc8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dc90:	4906      	ldr	r1, [pc, #24]	; (801dcac <__assert_func+0x34>)
 801dc92:	462b      	mov	r3, r5
 801dc94:	f001 f822 	bl	801ecdc <fiprintf>
 801dc98:	f002 fc54 	bl	8020544 <abort>
 801dc9c:	4b04      	ldr	r3, [pc, #16]	; (801dcb0 <__assert_func+0x38>)
 801dc9e:	461c      	mov	r4, r3
 801dca0:	e7f3      	b.n	801dc8a <__assert_func+0x12>
 801dca2:	bf00      	nop
 801dca4:	20000164 	.word	0x20000164
 801dca8:	08022c9c 	.word	0x08022c9c
 801dcac:	08022ca9 	.word	0x08022ca9
 801dcb0:	08022cd7 	.word	0x08022cd7

0801dcb4 <quorem>:
 801dcb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcb8:	6903      	ldr	r3, [r0, #16]
 801dcba:	690c      	ldr	r4, [r1, #16]
 801dcbc:	42a3      	cmp	r3, r4
 801dcbe:	4607      	mov	r7, r0
 801dcc0:	f2c0 8081 	blt.w	801ddc6 <quorem+0x112>
 801dcc4:	3c01      	subs	r4, #1
 801dcc6:	f101 0814 	add.w	r8, r1, #20
 801dcca:	f100 0514 	add.w	r5, r0, #20
 801dcce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dcd2:	9301      	str	r3, [sp, #4]
 801dcd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801dcd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dcdc:	3301      	adds	r3, #1
 801dcde:	429a      	cmp	r2, r3
 801dce0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801dce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801dce8:	fbb2 f6f3 	udiv	r6, r2, r3
 801dcec:	d331      	bcc.n	801dd52 <quorem+0x9e>
 801dcee:	f04f 0e00 	mov.w	lr, #0
 801dcf2:	4640      	mov	r0, r8
 801dcf4:	46ac      	mov	ip, r5
 801dcf6:	46f2      	mov	sl, lr
 801dcf8:	f850 2b04 	ldr.w	r2, [r0], #4
 801dcfc:	b293      	uxth	r3, r2
 801dcfe:	fb06 e303 	mla	r3, r6, r3, lr
 801dd02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801dd06:	b29b      	uxth	r3, r3
 801dd08:	ebaa 0303 	sub.w	r3, sl, r3
 801dd0c:	f8dc a000 	ldr.w	sl, [ip]
 801dd10:	0c12      	lsrs	r2, r2, #16
 801dd12:	fa13 f38a 	uxtah	r3, r3, sl
 801dd16:	fb06 e202 	mla	r2, r6, r2, lr
 801dd1a:	9300      	str	r3, [sp, #0]
 801dd1c:	9b00      	ldr	r3, [sp, #0]
 801dd1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801dd22:	b292      	uxth	r2, r2
 801dd24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801dd28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801dd2c:	f8bd 3000 	ldrh.w	r3, [sp]
 801dd30:	4581      	cmp	r9, r0
 801dd32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801dd36:	f84c 3b04 	str.w	r3, [ip], #4
 801dd3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801dd3e:	d2db      	bcs.n	801dcf8 <quorem+0x44>
 801dd40:	f855 300b 	ldr.w	r3, [r5, fp]
 801dd44:	b92b      	cbnz	r3, 801dd52 <quorem+0x9e>
 801dd46:	9b01      	ldr	r3, [sp, #4]
 801dd48:	3b04      	subs	r3, #4
 801dd4a:	429d      	cmp	r5, r3
 801dd4c:	461a      	mov	r2, r3
 801dd4e:	d32e      	bcc.n	801ddae <quorem+0xfa>
 801dd50:	613c      	str	r4, [r7, #16]
 801dd52:	4638      	mov	r0, r7
 801dd54:	f001 feb6 	bl	801fac4 <__mcmp>
 801dd58:	2800      	cmp	r0, #0
 801dd5a:	db24      	blt.n	801dda6 <quorem+0xf2>
 801dd5c:	3601      	adds	r6, #1
 801dd5e:	4628      	mov	r0, r5
 801dd60:	f04f 0c00 	mov.w	ip, #0
 801dd64:	f858 2b04 	ldr.w	r2, [r8], #4
 801dd68:	f8d0 e000 	ldr.w	lr, [r0]
 801dd6c:	b293      	uxth	r3, r2
 801dd6e:	ebac 0303 	sub.w	r3, ip, r3
 801dd72:	0c12      	lsrs	r2, r2, #16
 801dd74:	fa13 f38e 	uxtah	r3, r3, lr
 801dd78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801dd7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801dd80:	b29b      	uxth	r3, r3
 801dd82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801dd86:	45c1      	cmp	r9, r8
 801dd88:	f840 3b04 	str.w	r3, [r0], #4
 801dd8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801dd90:	d2e8      	bcs.n	801dd64 <quorem+0xb0>
 801dd92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dd96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dd9a:	b922      	cbnz	r2, 801dda6 <quorem+0xf2>
 801dd9c:	3b04      	subs	r3, #4
 801dd9e:	429d      	cmp	r5, r3
 801dda0:	461a      	mov	r2, r3
 801dda2:	d30a      	bcc.n	801ddba <quorem+0x106>
 801dda4:	613c      	str	r4, [r7, #16]
 801dda6:	4630      	mov	r0, r6
 801dda8:	b003      	add	sp, #12
 801ddaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddae:	6812      	ldr	r2, [r2, #0]
 801ddb0:	3b04      	subs	r3, #4
 801ddb2:	2a00      	cmp	r2, #0
 801ddb4:	d1cc      	bne.n	801dd50 <quorem+0x9c>
 801ddb6:	3c01      	subs	r4, #1
 801ddb8:	e7c7      	b.n	801dd4a <quorem+0x96>
 801ddba:	6812      	ldr	r2, [r2, #0]
 801ddbc:	3b04      	subs	r3, #4
 801ddbe:	2a00      	cmp	r2, #0
 801ddc0:	d1f0      	bne.n	801dda4 <quorem+0xf0>
 801ddc2:	3c01      	subs	r4, #1
 801ddc4:	e7eb      	b.n	801dd9e <quorem+0xea>
 801ddc6:	2000      	movs	r0, #0
 801ddc8:	e7ee      	b.n	801dda8 <quorem+0xf4>
 801ddca:	0000      	movs	r0, r0
 801ddcc:	0000      	movs	r0, r0
	...

0801ddd0 <_dtoa_r>:
 801ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd4:	ed2d 8b04 	vpush	{d8-d9}
 801ddd8:	ec57 6b10 	vmov	r6, r7, d0
 801dddc:	b093      	sub	sp, #76	; 0x4c
 801ddde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801dde0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801dde4:	9106      	str	r1, [sp, #24]
 801dde6:	ee10 aa10 	vmov	sl, s0
 801ddea:	4604      	mov	r4, r0
 801ddec:	9209      	str	r2, [sp, #36]	; 0x24
 801ddee:	930c      	str	r3, [sp, #48]	; 0x30
 801ddf0:	46bb      	mov	fp, r7
 801ddf2:	b975      	cbnz	r5, 801de12 <_dtoa_r+0x42>
 801ddf4:	2010      	movs	r0, #16
 801ddf6:	f7fd feb1 	bl	801bb5c <malloc>
 801ddfa:	4602      	mov	r2, r0
 801ddfc:	6260      	str	r0, [r4, #36]	; 0x24
 801ddfe:	b920      	cbnz	r0, 801de0a <_dtoa_r+0x3a>
 801de00:	4ba7      	ldr	r3, [pc, #668]	; (801e0a0 <_dtoa_r+0x2d0>)
 801de02:	21ea      	movs	r1, #234	; 0xea
 801de04:	48a7      	ldr	r0, [pc, #668]	; (801e0a4 <_dtoa_r+0x2d4>)
 801de06:	f7ff ff37 	bl	801dc78 <__assert_func>
 801de0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801de0e:	6005      	str	r5, [r0, #0]
 801de10:	60c5      	str	r5, [r0, #12]
 801de12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801de14:	6819      	ldr	r1, [r3, #0]
 801de16:	b151      	cbz	r1, 801de2e <_dtoa_r+0x5e>
 801de18:	685a      	ldr	r2, [r3, #4]
 801de1a:	604a      	str	r2, [r1, #4]
 801de1c:	2301      	movs	r3, #1
 801de1e:	4093      	lsls	r3, r2
 801de20:	608b      	str	r3, [r1, #8]
 801de22:	4620      	mov	r0, r4
 801de24:	f001 fbc2 	bl	801f5ac <_Bfree>
 801de28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801de2a:	2200      	movs	r2, #0
 801de2c:	601a      	str	r2, [r3, #0]
 801de2e:	1e3b      	subs	r3, r7, #0
 801de30:	bfaa      	itet	ge
 801de32:	2300      	movge	r3, #0
 801de34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801de38:	f8c8 3000 	strge.w	r3, [r8]
 801de3c:	4b9a      	ldr	r3, [pc, #616]	; (801e0a8 <_dtoa_r+0x2d8>)
 801de3e:	bfbc      	itt	lt
 801de40:	2201      	movlt	r2, #1
 801de42:	f8c8 2000 	strlt.w	r2, [r8]
 801de46:	ea33 030b 	bics.w	r3, r3, fp
 801de4a:	d11b      	bne.n	801de84 <_dtoa_r+0xb4>
 801de4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de4e:	f242 730f 	movw	r3, #9999	; 0x270f
 801de52:	6013      	str	r3, [r2, #0]
 801de54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801de58:	4333      	orrs	r3, r6
 801de5a:	f000 8592 	beq.w	801e982 <_dtoa_r+0xbb2>
 801de5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801de60:	b963      	cbnz	r3, 801de7c <_dtoa_r+0xac>
 801de62:	4b92      	ldr	r3, [pc, #584]	; (801e0ac <_dtoa_r+0x2dc>)
 801de64:	e022      	b.n	801deac <_dtoa_r+0xdc>
 801de66:	4b92      	ldr	r3, [pc, #584]	; (801e0b0 <_dtoa_r+0x2e0>)
 801de68:	9301      	str	r3, [sp, #4]
 801de6a:	3308      	adds	r3, #8
 801de6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801de6e:	6013      	str	r3, [r2, #0]
 801de70:	9801      	ldr	r0, [sp, #4]
 801de72:	b013      	add	sp, #76	; 0x4c
 801de74:	ecbd 8b04 	vpop	{d8-d9}
 801de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de7c:	4b8b      	ldr	r3, [pc, #556]	; (801e0ac <_dtoa_r+0x2dc>)
 801de7e:	9301      	str	r3, [sp, #4]
 801de80:	3303      	adds	r3, #3
 801de82:	e7f3      	b.n	801de6c <_dtoa_r+0x9c>
 801de84:	2200      	movs	r2, #0
 801de86:	2300      	movs	r3, #0
 801de88:	4650      	mov	r0, sl
 801de8a:	4659      	mov	r1, fp
 801de8c:	f7e2 fe34 	bl	8000af8 <__aeabi_dcmpeq>
 801de90:	ec4b ab19 	vmov	d9, sl, fp
 801de94:	4680      	mov	r8, r0
 801de96:	b158      	cbz	r0, 801deb0 <_dtoa_r+0xe0>
 801de98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de9a:	2301      	movs	r3, #1
 801de9c:	6013      	str	r3, [r2, #0]
 801de9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	f000 856b 	beq.w	801e97c <_dtoa_r+0xbac>
 801dea6:	4883      	ldr	r0, [pc, #524]	; (801e0b4 <_dtoa_r+0x2e4>)
 801dea8:	6018      	str	r0, [r3, #0]
 801deaa:	1e43      	subs	r3, r0, #1
 801deac:	9301      	str	r3, [sp, #4]
 801deae:	e7df      	b.n	801de70 <_dtoa_r+0xa0>
 801deb0:	ec4b ab10 	vmov	d0, sl, fp
 801deb4:	aa10      	add	r2, sp, #64	; 0x40
 801deb6:	a911      	add	r1, sp, #68	; 0x44
 801deb8:	4620      	mov	r0, r4
 801deba:	f001 ff25 	bl	801fd08 <__d2b>
 801debe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801dec2:	ee08 0a10 	vmov	s16, r0
 801dec6:	2d00      	cmp	r5, #0
 801dec8:	f000 8084 	beq.w	801dfd4 <_dtoa_r+0x204>
 801decc:	ee19 3a90 	vmov	r3, s19
 801ded0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ded4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ded8:	4656      	mov	r6, sl
 801deda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801dede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801dee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801dee6:	4b74      	ldr	r3, [pc, #464]	; (801e0b8 <_dtoa_r+0x2e8>)
 801dee8:	2200      	movs	r2, #0
 801deea:	4630      	mov	r0, r6
 801deec:	4639      	mov	r1, r7
 801deee:	f7e2 f9e3 	bl	80002b8 <__aeabi_dsub>
 801def2:	a365      	add	r3, pc, #404	; (adr r3, 801e088 <_dtoa_r+0x2b8>)
 801def4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801def8:	f7e2 fb96 	bl	8000628 <__aeabi_dmul>
 801defc:	a364      	add	r3, pc, #400	; (adr r3, 801e090 <_dtoa_r+0x2c0>)
 801defe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df02:	f7e2 f9db 	bl	80002bc <__adddf3>
 801df06:	4606      	mov	r6, r0
 801df08:	4628      	mov	r0, r5
 801df0a:	460f      	mov	r7, r1
 801df0c:	f7e2 fb22 	bl	8000554 <__aeabi_i2d>
 801df10:	a361      	add	r3, pc, #388	; (adr r3, 801e098 <_dtoa_r+0x2c8>)
 801df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df16:	f7e2 fb87 	bl	8000628 <__aeabi_dmul>
 801df1a:	4602      	mov	r2, r0
 801df1c:	460b      	mov	r3, r1
 801df1e:	4630      	mov	r0, r6
 801df20:	4639      	mov	r1, r7
 801df22:	f7e2 f9cb 	bl	80002bc <__adddf3>
 801df26:	4606      	mov	r6, r0
 801df28:	460f      	mov	r7, r1
 801df2a:	f7e2 fe2d 	bl	8000b88 <__aeabi_d2iz>
 801df2e:	2200      	movs	r2, #0
 801df30:	9000      	str	r0, [sp, #0]
 801df32:	2300      	movs	r3, #0
 801df34:	4630      	mov	r0, r6
 801df36:	4639      	mov	r1, r7
 801df38:	f7e2 fde8 	bl	8000b0c <__aeabi_dcmplt>
 801df3c:	b150      	cbz	r0, 801df54 <_dtoa_r+0x184>
 801df3e:	9800      	ldr	r0, [sp, #0]
 801df40:	f7e2 fb08 	bl	8000554 <__aeabi_i2d>
 801df44:	4632      	mov	r2, r6
 801df46:	463b      	mov	r3, r7
 801df48:	f7e2 fdd6 	bl	8000af8 <__aeabi_dcmpeq>
 801df4c:	b910      	cbnz	r0, 801df54 <_dtoa_r+0x184>
 801df4e:	9b00      	ldr	r3, [sp, #0]
 801df50:	3b01      	subs	r3, #1
 801df52:	9300      	str	r3, [sp, #0]
 801df54:	9b00      	ldr	r3, [sp, #0]
 801df56:	2b16      	cmp	r3, #22
 801df58:	d85a      	bhi.n	801e010 <_dtoa_r+0x240>
 801df5a:	9a00      	ldr	r2, [sp, #0]
 801df5c:	4b57      	ldr	r3, [pc, #348]	; (801e0bc <_dtoa_r+0x2ec>)
 801df5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df66:	ec51 0b19 	vmov	r0, r1, d9
 801df6a:	f7e2 fdcf 	bl	8000b0c <__aeabi_dcmplt>
 801df6e:	2800      	cmp	r0, #0
 801df70:	d050      	beq.n	801e014 <_dtoa_r+0x244>
 801df72:	9b00      	ldr	r3, [sp, #0]
 801df74:	3b01      	subs	r3, #1
 801df76:	9300      	str	r3, [sp, #0]
 801df78:	2300      	movs	r3, #0
 801df7a:	930b      	str	r3, [sp, #44]	; 0x2c
 801df7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801df7e:	1b5d      	subs	r5, r3, r5
 801df80:	1e6b      	subs	r3, r5, #1
 801df82:	9305      	str	r3, [sp, #20]
 801df84:	bf45      	ittet	mi
 801df86:	f1c5 0301 	rsbmi	r3, r5, #1
 801df8a:	9304      	strmi	r3, [sp, #16]
 801df8c:	2300      	movpl	r3, #0
 801df8e:	2300      	movmi	r3, #0
 801df90:	bf4c      	ite	mi
 801df92:	9305      	strmi	r3, [sp, #20]
 801df94:	9304      	strpl	r3, [sp, #16]
 801df96:	9b00      	ldr	r3, [sp, #0]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	db3d      	blt.n	801e018 <_dtoa_r+0x248>
 801df9c:	9b05      	ldr	r3, [sp, #20]
 801df9e:	9a00      	ldr	r2, [sp, #0]
 801dfa0:	920a      	str	r2, [sp, #40]	; 0x28
 801dfa2:	4413      	add	r3, r2
 801dfa4:	9305      	str	r3, [sp, #20]
 801dfa6:	2300      	movs	r3, #0
 801dfa8:	9307      	str	r3, [sp, #28]
 801dfaa:	9b06      	ldr	r3, [sp, #24]
 801dfac:	2b09      	cmp	r3, #9
 801dfae:	f200 8089 	bhi.w	801e0c4 <_dtoa_r+0x2f4>
 801dfb2:	2b05      	cmp	r3, #5
 801dfb4:	bfc4      	itt	gt
 801dfb6:	3b04      	subgt	r3, #4
 801dfb8:	9306      	strgt	r3, [sp, #24]
 801dfba:	9b06      	ldr	r3, [sp, #24]
 801dfbc:	f1a3 0302 	sub.w	r3, r3, #2
 801dfc0:	bfcc      	ite	gt
 801dfc2:	2500      	movgt	r5, #0
 801dfc4:	2501      	movle	r5, #1
 801dfc6:	2b03      	cmp	r3, #3
 801dfc8:	f200 8087 	bhi.w	801e0da <_dtoa_r+0x30a>
 801dfcc:	e8df f003 	tbb	[pc, r3]
 801dfd0:	59383a2d 	.word	0x59383a2d
 801dfd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801dfd8:	441d      	add	r5, r3
 801dfda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801dfde:	2b20      	cmp	r3, #32
 801dfe0:	bfc1      	itttt	gt
 801dfe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801dfe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801dfea:	fa0b f303 	lslgt.w	r3, fp, r3
 801dfee:	fa26 f000 	lsrgt.w	r0, r6, r0
 801dff2:	bfda      	itte	le
 801dff4:	f1c3 0320 	rsble	r3, r3, #32
 801dff8:	fa06 f003 	lslle.w	r0, r6, r3
 801dffc:	4318      	orrgt	r0, r3
 801dffe:	f7e2 fa99 	bl	8000534 <__aeabi_ui2d>
 801e002:	2301      	movs	r3, #1
 801e004:	4606      	mov	r6, r0
 801e006:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801e00a:	3d01      	subs	r5, #1
 801e00c:	930e      	str	r3, [sp, #56]	; 0x38
 801e00e:	e76a      	b.n	801dee6 <_dtoa_r+0x116>
 801e010:	2301      	movs	r3, #1
 801e012:	e7b2      	b.n	801df7a <_dtoa_r+0x1aa>
 801e014:	900b      	str	r0, [sp, #44]	; 0x2c
 801e016:	e7b1      	b.n	801df7c <_dtoa_r+0x1ac>
 801e018:	9b04      	ldr	r3, [sp, #16]
 801e01a:	9a00      	ldr	r2, [sp, #0]
 801e01c:	1a9b      	subs	r3, r3, r2
 801e01e:	9304      	str	r3, [sp, #16]
 801e020:	4253      	negs	r3, r2
 801e022:	9307      	str	r3, [sp, #28]
 801e024:	2300      	movs	r3, #0
 801e026:	930a      	str	r3, [sp, #40]	; 0x28
 801e028:	e7bf      	b.n	801dfaa <_dtoa_r+0x1da>
 801e02a:	2300      	movs	r3, #0
 801e02c:	9308      	str	r3, [sp, #32]
 801e02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e030:	2b00      	cmp	r3, #0
 801e032:	dc55      	bgt.n	801e0e0 <_dtoa_r+0x310>
 801e034:	2301      	movs	r3, #1
 801e036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e03a:	461a      	mov	r2, r3
 801e03c:	9209      	str	r2, [sp, #36]	; 0x24
 801e03e:	e00c      	b.n	801e05a <_dtoa_r+0x28a>
 801e040:	2301      	movs	r3, #1
 801e042:	e7f3      	b.n	801e02c <_dtoa_r+0x25c>
 801e044:	2300      	movs	r3, #0
 801e046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e048:	9308      	str	r3, [sp, #32]
 801e04a:	9b00      	ldr	r3, [sp, #0]
 801e04c:	4413      	add	r3, r2
 801e04e:	9302      	str	r3, [sp, #8]
 801e050:	3301      	adds	r3, #1
 801e052:	2b01      	cmp	r3, #1
 801e054:	9303      	str	r3, [sp, #12]
 801e056:	bfb8      	it	lt
 801e058:	2301      	movlt	r3, #1
 801e05a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e05c:	2200      	movs	r2, #0
 801e05e:	6042      	str	r2, [r0, #4]
 801e060:	2204      	movs	r2, #4
 801e062:	f102 0614 	add.w	r6, r2, #20
 801e066:	429e      	cmp	r6, r3
 801e068:	6841      	ldr	r1, [r0, #4]
 801e06a:	d93d      	bls.n	801e0e8 <_dtoa_r+0x318>
 801e06c:	4620      	mov	r0, r4
 801e06e:	f001 fa5d 	bl	801f52c <_Balloc>
 801e072:	9001      	str	r0, [sp, #4]
 801e074:	2800      	cmp	r0, #0
 801e076:	d13b      	bne.n	801e0f0 <_dtoa_r+0x320>
 801e078:	4b11      	ldr	r3, [pc, #68]	; (801e0c0 <_dtoa_r+0x2f0>)
 801e07a:	4602      	mov	r2, r0
 801e07c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801e080:	e6c0      	b.n	801de04 <_dtoa_r+0x34>
 801e082:	2301      	movs	r3, #1
 801e084:	e7df      	b.n	801e046 <_dtoa_r+0x276>
 801e086:	bf00      	nop
 801e088:	636f4361 	.word	0x636f4361
 801e08c:	3fd287a7 	.word	0x3fd287a7
 801e090:	8b60c8b3 	.word	0x8b60c8b3
 801e094:	3fc68a28 	.word	0x3fc68a28
 801e098:	509f79fb 	.word	0x509f79fb
 801e09c:	3fd34413 	.word	0x3fd34413
 801e0a0:	08022c28 	.word	0x08022c28
 801e0a4:	08022de6 	.word	0x08022de6
 801e0a8:	7ff00000 	.word	0x7ff00000
 801e0ac:	08022de2 	.word	0x08022de2
 801e0b0:	08022dd9 	.word	0x08022dd9
 801e0b4:	08022ba9 	.word	0x08022ba9
 801e0b8:	3ff80000 	.word	0x3ff80000
 801e0bc:	08022fb8 	.word	0x08022fb8
 801e0c0:	08022e41 	.word	0x08022e41
 801e0c4:	2501      	movs	r5, #1
 801e0c6:	2300      	movs	r3, #0
 801e0c8:	9306      	str	r3, [sp, #24]
 801e0ca:	9508      	str	r5, [sp, #32]
 801e0cc:	f04f 33ff 	mov.w	r3, #4294967295
 801e0d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e0d4:	2200      	movs	r2, #0
 801e0d6:	2312      	movs	r3, #18
 801e0d8:	e7b0      	b.n	801e03c <_dtoa_r+0x26c>
 801e0da:	2301      	movs	r3, #1
 801e0dc:	9308      	str	r3, [sp, #32]
 801e0de:	e7f5      	b.n	801e0cc <_dtoa_r+0x2fc>
 801e0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801e0e6:	e7b8      	b.n	801e05a <_dtoa_r+0x28a>
 801e0e8:	3101      	adds	r1, #1
 801e0ea:	6041      	str	r1, [r0, #4]
 801e0ec:	0052      	lsls	r2, r2, #1
 801e0ee:	e7b8      	b.n	801e062 <_dtoa_r+0x292>
 801e0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e0f2:	9a01      	ldr	r2, [sp, #4]
 801e0f4:	601a      	str	r2, [r3, #0]
 801e0f6:	9b03      	ldr	r3, [sp, #12]
 801e0f8:	2b0e      	cmp	r3, #14
 801e0fa:	f200 809d 	bhi.w	801e238 <_dtoa_r+0x468>
 801e0fe:	2d00      	cmp	r5, #0
 801e100:	f000 809a 	beq.w	801e238 <_dtoa_r+0x468>
 801e104:	9b00      	ldr	r3, [sp, #0]
 801e106:	2b00      	cmp	r3, #0
 801e108:	dd32      	ble.n	801e170 <_dtoa_r+0x3a0>
 801e10a:	4ab7      	ldr	r2, [pc, #732]	; (801e3e8 <_dtoa_r+0x618>)
 801e10c:	f003 030f 	and.w	r3, r3, #15
 801e110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e114:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e118:	9b00      	ldr	r3, [sp, #0]
 801e11a:	05d8      	lsls	r0, r3, #23
 801e11c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801e120:	d516      	bpl.n	801e150 <_dtoa_r+0x380>
 801e122:	4bb2      	ldr	r3, [pc, #712]	; (801e3ec <_dtoa_r+0x61c>)
 801e124:	ec51 0b19 	vmov	r0, r1, d9
 801e128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e12c:	f7e2 fba6 	bl	800087c <__aeabi_ddiv>
 801e130:	f007 070f 	and.w	r7, r7, #15
 801e134:	4682      	mov	sl, r0
 801e136:	468b      	mov	fp, r1
 801e138:	2503      	movs	r5, #3
 801e13a:	4eac      	ldr	r6, [pc, #688]	; (801e3ec <_dtoa_r+0x61c>)
 801e13c:	b957      	cbnz	r7, 801e154 <_dtoa_r+0x384>
 801e13e:	4642      	mov	r2, r8
 801e140:	464b      	mov	r3, r9
 801e142:	4650      	mov	r0, sl
 801e144:	4659      	mov	r1, fp
 801e146:	f7e2 fb99 	bl	800087c <__aeabi_ddiv>
 801e14a:	4682      	mov	sl, r0
 801e14c:	468b      	mov	fp, r1
 801e14e:	e028      	b.n	801e1a2 <_dtoa_r+0x3d2>
 801e150:	2502      	movs	r5, #2
 801e152:	e7f2      	b.n	801e13a <_dtoa_r+0x36a>
 801e154:	07f9      	lsls	r1, r7, #31
 801e156:	d508      	bpl.n	801e16a <_dtoa_r+0x39a>
 801e158:	4640      	mov	r0, r8
 801e15a:	4649      	mov	r1, r9
 801e15c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801e160:	f7e2 fa62 	bl	8000628 <__aeabi_dmul>
 801e164:	3501      	adds	r5, #1
 801e166:	4680      	mov	r8, r0
 801e168:	4689      	mov	r9, r1
 801e16a:	107f      	asrs	r7, r7, #1
 801e16c:	3608      	adds	r6, #8
 801e16e:	e7e5      	b.n	801e13c <_dtoa_r+0x36c>
 801e170:	f000 809b 	beq.w	801e2aa <_dtoa_r+0x4da>
 801e174:	9b00      	ldr	r3, [sp, #0]
 801e176:	4f9d      	ldr	r7, [pc, #628]	; (801e3ec <_dtoa_r+0x61c>)
 801e178:	425e      	negs	r6, r3
 801e17a:	4b9b      	ldr	r3, [pc, #620]	; (801e3e8 <_dtoa_r+0x618>)
 801e17c:	f006 020f 	and.w	r2, r6, #15
 801e180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e188:	ec51 0b19 	vmov	r0, r1, d9
 801e18c:	f7e2 fa4c 	bl	8000628 <__aeabi_dmul>
 801e190:	1136      	asrs	r6, r6, #4
 801e192:	4682      	mov	sl, r0
 801e194:	468b      	mov	fp, r1
 801e196:	2300      	movs	r3, #0
 801e198:	2502      	movs	r5, #2
 801e19a:	2e00      	cmp	r6, #0
 801e19c:	d17a      	bne.n	801e294 <_dtoa_r+0x4c4>
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	d1d3      	bne.n	801e14a <_dtoa_r+0x37a>
 801e1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	f000 8082 	beq.w	801e2ae <_dtoa_r+0x4de>
 801e1aa:	4b91      	ldr	r3, [pc, #580]	; (801e3f0 <_dtoa_r+0x620>)
 801e1ac:	2200      	movs	r2, #0
 801e1ae:	4650      	mov	r0, sl
 801e1b0:	4659      	mov	r1, fp
 801e1b2:	f7e2 fcab 	bl	8000b0c <__aeabi_dcmplt>
 801e1b6:	2800      	cmp	r0, #0
 801e1b8:	d079      	beq.n	801e2ae <_dtoa_r+0x4de>
 801e1ba:	9b03      	ldr	r3, [sp, #12]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d076      	beq.n	801e2ae <_dtoa_r+0x4de>
 801e1c0:	9b02      	ldr	r3, [sp, #8]
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	dd36      	ble.n	801e234 <_dtoa_r+0x464>
 801e1c6:	9b00      	ldr	r3, [sp, #0]
 801e1c8:	4650      	mov	r0, sl
 801e1ca:	4659      	mov	r1, fp
 801e1cc:	1e5f      	subs	r7, r3, #1
 801e1ce:	2200      	movs	r2, #0
 801e1d0:	4b88      	ldr	r3, [pc, #544]	; (801e3f4 <_dtoa_r+0x624>)
 801e1d2:	f7e2 fa29 	bl	8000628 <__aeabi_dmul>
 801e1d6:	9e02      	ldr	r6, [sp, #8]
 801e1d8:	4682      	mov	sl, r0
 801e1da:	468b      	mov	fp, r1
 801e1dc:	3501      	adds	r5, #1
 801e1de:	4628      	mov	r0, r5
 801e1e0:	f7e2 f9b8 	bl	8000554 <__aeabi_i2d>
 801e1e4:	4652      	mov	r2, sl
 801e1e6:	465b      	mov	r3, fp
 801e1e8:	f7e2 fa1e 	bl	8000628 <__aeabi_dmul>
 801e1ec:	4b82      	ldr	r3, [pc, #520]	; (801e3f8 <_dtoa_r+0x628>)
 801e1ee:	2200      	movs	r2, #0
 801e1f0:	f7e2 f864 	bl	80002bc <__adddf3>
 801e1f4:	46d0      	mov	r8, sl
 801e1f6:	46d9      	mov	r9, fp
 801e1f8:	4682      	mov	sl, r0
 801e1fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801e1fe:	2e00      	cmp	r6, #0
 801e200:	d158      	bne.n	801e2b4 <_dtoa_r+0x4e4>
 801e202:	4b7e      	ldr	r3, [pc, #504]	; (801e3fc <_dtoa_r+0x62c>)
 801e204:	2200      	movs	r2, #0
 801e206:	4640      	mov	r0, r8
 801e208:	4649      	mov	r1, r9
 801e20a:	f7e2 f855 	bl	80002b8 <__aeabi_dsub>
 801e20e:	4652      	mov	r2, sl
 801e210:	465b      	mov	r3, fp
 801e212:	4680      	mov	r8, r0
 801e214:	4689      	mov	r9, r1
 801e216:	f7e2 fc97 	bl	8000b48 <__aeabi_dcmpgt>
 801e21a:	2800      	cmp	r0, #0
 801e21c:	f040 8295 	bne.w	801e74a <_dtoa_r+0x97a>
 801e220:	4652      	mov	r2, sl
 801e222:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801e226:	4640      	mov	r0, r8
 801e228:	4649      	mov	r1, r9
 801e22a:	f7e2 fc6f 	bl	8000b0c <__aeabi_dcmplt>
 801e22e:	2800      	cmp	r0, #0
 801e230:	f040 8289 	bne.w	801e746 <_dtoa_r+0x976>
 801e234:	ec5b ab19 	vmov	sl, fp, d9
 801e238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e23a:	2b00      	cmp	r3, #0
 801e23c:	f2c0 8148 	blt.w	801e4d0 <_dtoa_r+0x700>
 801e240:	9a00      	ldr	r2, [sp, #0]
 801e242:	2a0e      	cmp	r2, #14
 801e244:	f300 8144 	bgt.w	801e4d0 <_dtoa_r+0x700>
 801e248:	4b67      	ldr	r3, [pc, #412]	; (801e3e8 <_dtoa_r+0x618>)
 801e24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e24e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e254:	2b00      	cmp	r3, #0
 801e256:	f280 80d5 	bge.w	801e404 <_dtoa_r+0x634>
 801e25a:	9b03      	ldr	r3, [sp, #12]
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	f300 80d1 	bgt.w	801e404 <_dtoa_r+0x634>
 801e262:	f040 826f 	bne.w	801e744 <_dtoa_r+0x974>
 801e266:	4b65      	ldr	r3, [pc, #404]	; (801e3fc <_dtoa_r+0x62c>)
 801e268:	2200      	movs	r2, #0
 801e26a:	4640      	mov	r0, r8
 801e26c:	4649      	mov	r1, r9
 801e26e:	f7e2 f9db 	bl	8000628 <__aeabi_dmul>
 801e272:	4652      	mov	r2, sl
 801e274:	465b      	mov	r3, fp
 801e276:	f7e2 fc5d 	bl	8000b34 <__aeabi_dcmpge>
 801e27a:	9e03      	ldr	r6, [sp, #12]
 801e27c:	4637      	mov	r7, r6
 801e27e:	2800      	cmp	r0, #0
 801e280:	f040 8245 	bne.w	801e70e <_dtoa_r+0x93e>
 801e284:	9d01      	ldr	r5, [sp, #4]
 801e286:	2331      	movs	r3, #49	; 0x31
 801e288:	f805 3b01 	strb.w	r3, [r5], #1
 801e28c:	9b00      	ldr	r3, [sp, #0]
 801e28e:	3301      	adds	r3, #1
 801e290:	9300      	str	r3, [sp, #0]
 801e292:	e240      	b.n	801e716 <_dtoa_r+0x946>
 801e294:	07f2      	lsls	r2, r6, #31
 801e296:	d505      	bpl.n	801e2a4 <_dtoa_r+0x4d4>
 801e298:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e29c:	f7e2 f9c4 	bl	8000628 <__aeabi_dmul>
 801e2a0:	3501      	adds	r5, #1
 801e2a2:	2301      	movs	r3, #1
 801e2a4:	1076      	asrs	r6, r6, #1
 801e2a6:	3708      	adds	r7, #8
 801e2a8:	e777      	b.n	801e19a <_dtoa_r+0x3ca>
 801e2aa:	2502      	movs	r5, #2
 801e2ac:	e779      	b.n	801e1a2 <_dtoa_r+0x3d2>
 801e2ae:	9f00      	ldr	r7, [sp, #0]
 801e2b0:	9e03      	ldr	r6, [sp, #12]
 801e2b2:	e794      	b.n	801e1de <_dtoa_r+0x40e>
 801e2b4:	9901      	ldr	r1, [sp, #4]
 801e2b6:	4b4c      	ldr	r3, [pc, #304]	; (801e3e8 <_dtoa_r+0x618>)
 801e2b8:	4431      	add	r1, r6
 801e2ba:	910d      	str	r1, [sp, #52]	; 0x34
 801e2bc:	9908      	ldr	r1, [sp, #32]
 801e2be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e2c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e2c6:	2900      	cmp	r1, #0
 801e2c8:	d043      	beq.n	801e352 <_dtoa_r+0x582>
 801e2ca:	494d      	ldr	r1, [pc, #308]	; (801e400 <_dtoa_r+0x630>)
 801e2cc:	2000      	movs	r0, #0
 801e2ce:	f7e2 fad5 	bl	800087c <__aeabi_ddiv>
 801e2d2:	4652      	mov	r2, sl
 801e2d4:	465b      	mov	r3, fp
 801e2d6:	f7e1 ffef 	bl	80002b8 <__aeabi_dsub>
 801e2da:	9d01      	ldr	r5, [sp, #4]
 801e2dc:	4682      	mov	sl, r0
 801e2de:	468b      	mov	fp, r1
 801e2e0:	4649      	mov	r1, r9
 801e2e2:	4640      	mov	r0, r8
 801e2e4:	f7e2 fc50 	bl	8000b88 <__aeabi_d2iz>
 801e2e8:	4606      	mov	r6, r0
 801e2ea:	f7e2 f933 	bl	8000554 <__aeabi_i2d>
 801e2ee:	4602      	mov	r2, r0
 801e2f0:	460b      	mov	r3, r1
 801e2f2:	4640      	mov	r0, r8
 801e2f4:	4649      	mov	r1, r9
 801e2f6:	f7e1 ffdf 	bl	80002b8 <__aeabi_dsub>
 801e2fa:	3630      	adds	r6, #48	; 0x30
 801e2fc:	f805 6b01 	strb.w	r6, [r5], #1
 801e300:	4652      	mov	r2, sl
 801e302:	465b      	mov	r3, fp
 801e304:	4680      	mov	r8, r0
 801e306:	4689      	mov	r9, r1
 801e308:	f7e2 fc00 	bl	8000b0c <__aeabi_dcmplt>
 801e30c:	2800      	cmp	r0, #0
 801e30e:	d163      	bne.n	801e3d8 <_dtoa_r+0x608>
 801e310:	4642      	mov	r2, r8
 801e312:	464b      	mov	r3, r9
 801e314:	4936      	ldr	r1, [pc, #216]	; (801e3f0 <_dtoa_r+0x620>)
 801e316:	2000      	movs	r0, #0
 801e318:	f7e1 ffce 	bl	80002b8 <__aeabi_dsub>
 801e31c:	4652      	mov	r2, sl
 801e31e:	465b      	mov	r3, fp
 801e320:	f7e2 fbf4 	bl	8000b0c <__aeabi_dcmplt>
 801e324:	2800      	cmp	r0, #0
 801e326:	f040 80b5 	bne.w	801e494 <_dtoa_r+0x6c4>
 801e32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e32c:	429d      	cmp	r5, r3
 801e32e:	d081      	beq.n	801e234 <_dtoa_r+0x464>
 801e330:	4b30      	ldr	r3, [pc, #192]	; (801e3f4 <_dtoa_r+0x624>)
 801e332:	2200      	movs	r2, #0
 801e334:	4650      	mov	r0, sl
 801e336:	4659      	mov	r1, fp
 801e338:	f7e2 f976 	bl	8000628 <__aeabi_dmul>
 801e33c:	4b2d      	ldr	r3, [pc, #180]	; (801e3f4 <_dtoa_r+0x624>)
 801e33e:	4682      	mov	sl, r0
 801e340:	468b      	mov	fp, r1
 801e342:	4640      	mov	r0, r8
 801e344:	4649      	mov	r1, r9
 801e346:	2200      	movs	r2, #0
 801e348:	f7e2 f96e 	bl	8000628 <__aeabi_dmul>
 801e34c:	4680      	mov	r8, r0
 801e34e:	4689      	mov	r9, r1
 801e350:	e7c6      	b.n	801e2e0 <_dtoa_r+0x510>
 801e352:	4650      	mov	r0, sl
 801e354:	4659      	mov	r1, fp
 801e356:	f7e2 f967 	bl	8000628 <__aeabi_dmul>
 801e35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e35c:	9d01      	ldr	r5, [sp, #4]
 801e35e:	930f      	str	r3, [sp, #60]	; 0x3c
 801e360:	4682      	mov	sl, r0
 801e362:	468b      	mov	fp, r1
 801e364:	4649      	mov	r1, r9
 801e366:	4640      	mov	r0, r8
 801e368:	f7e2 fc0e 	bl	8000b88 <__aeabi_d2iz>
 801e36c:	4606      	mov	r6, r0
 801e36e:	f7e2 f8f1 	bl	8000554 <__aeabi_i2d>
 801e372:	3630      	adds	r6, #48	; 0x30
 801e374:	4602      	mov	r2, r0
 801e376:	460b      	mov	r3, r1
 801e378:	4640      	mov	r0, r8
 801e37a:	4649      	mov	r1, r9
 801e37c:	f7e1 ff9c 	bl	80002b8 <__aeabi_dsub>
 801e380:	f805 6b01 	strb.w	r6, [r5], #1
 801e384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e386:	429d      	cmp	r5, r3
 801e388:	4680      	mov	r8, r0
 801e38a:	4689      	mov	r9, r1
 801e38c:	f04f 0200 	mov.w	r2, #0
 801e390:	d124      	bne.n	801e3dc <_dtoa_r+0x60c>
 801e392:	4b1b      	ldr	r3, [pc, #108]	; (801e400 <_dtoa_r+0x630>)
 801e394:	4650      	mov	r0, sl
 801e396:	4659      	mov	r1, fp
 801e398:	f7e1 ff90 	bl	80002bc <__adddf3>
 801e39c:	4602      	mov	r2, r0
 801e39e:	460b      	mov	r3, r1
 801e3a0:	4640      	mov	r0, r8
 801e3a2:	4649      	mov	r1, r9
 801e3a4:	f7e2 fbd0 	bl	8000b48 <__aeabi_dcmpgt>
 801e3a8:	2800      	cmp	r0, #0
 801e3aa:	d173      	bne.n	801e494 <_dtoa_r+0x6c4>
 801e3ac:	4652      	mov	r2, sl
 801e3ae:	465b      	mov	r3, fp
 801e3b0:	4913      	ldr	r1, [pc, #76]	; (801e400 <_dtoa_r+0x630>)
 801e3b2:	2000      	movs	r0, #0
 801e3b4:	f7e1 ff80 	bl	80002b8 <__aeabi_dsub>
 801e3b8:	4602      	mov	r2, r0
 801e3ba:	460b      	mov	r3, r1
 801e3bc:	4640      	mov	r0, r8
 801e3be:	4649      	mov	r1, r9
 801e3c0:	f7e2 fba4 	bl	8000b0c <__aeabi_dcmplt>
 801e3c4:	2800      	cmp	r0, #0
 801e3c6:	f43f af35 	beq.w	801e234 <_dtoa_r+0x464>
 801e3ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e3cc:	1e6b      	subs	r3, r5, #1
 801e3ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801e3d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801e3d4:	2b30      	cmp	r3, #48	; 0x30
 801e3d6:	d0f8      	beq.n	801e3ca <_dtoa_r+0x5fa>
 801e3d8:	9700      	str	r7, [sp, #0]
 801e3da:	e049      	b.n	801e470 <_dtoa_r+0x6a0>
 801e3dc:	4b05      	ldr	r3, [pc, #20]	; (801e3f4 <_dtoa_r+0x624>)
 801e3de:	f7e2 f923 	bl	8000628 <__aeabi_dmul>
 801e3e2:	4680      	mov	r8, r0
 801e3e4:	4689      	mov	r9, r1
 801e3e6:	e7bd      	b.n	801e364 <_dtoa_r+0x594>
 801e3e8:	08022fb8 	.word	0x08022fb8
 801e3ec:	08022f90 	.word	0x08022f90
 801e3f0:	3ff00000 	.word	0x3ff00000
 801e3f4:	40240000 	.word	0x40240000
 801e3f8:	401c0000 	.word	0x401c0000
 801e3fc:	40140000 	.word	0x40140000
 801e400:	3fe00000 	.word	0x3fe00000
 801e404:	9d01      	ldr	r5, [sp, #4]
 801e406:	4656      	mov	r6, sl
 801e408:	465f      	mov	r7, fp
 801e40a:	4642      	mov	r2, r8
 801e40c:	464b      	mov	r3, r9
 801e40e:	4630      	mov	r0, r6
 801e410:	4639      	mov	r1, r7
 801e412:	f7e2 fa33 	bl	800087c <__aeabi_ddiv>
 801e416:	f7e2 fbb7 	bl	8000b88 <__aeabi_d2iz>
 801e41a:	4682      	mov	sl, r0
 801e41c:	f7e2 f89a 	bl	8000554 <__aeabi_i2d>
 801e420:	4642      	mov	r2, r8
 801e422:	464b      	mov	r3, r9
 801e424:	f7e2 f900 	bl	8000628 <__aeabi_dmul>
 801e428:	4602      	mov	r2, r0
 801e42a:	460b      	mov	r3, r1
 801e42c:	4630      	mov	r0, r6
 801e42e:	4639      	mov	r1, r7
 801e430:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801e434:	f7e1 ff40 	bl	80002b8 <__aeabi_dsub>
 801e438:	f805 6b01 	strb.w	r6, [r5], #1
 801e43c:	9e01      	ldr	r6, [sp, #4]
 801e43e:	9f03      	ldr	r7, [sp, #12]
 801e440:	1bae      	subs	r6, r5, r6
 801e442:	42b7      	cmp	r7, r6
 801e444:	4602      	mov	r2, r0
 801e446:	460b      	mov	r3, r1
 801e448:	d135      	bne.n	801e4b6 <_dtoa_r+0x6e6>
 801e44a:	f7e1 ff37 	bl	80002bc <__adddf3>
 801e44e:	4642      	mov	r2, r8
 801e450:	464b      	mov	r3, r9
 801e452:	4606      	mov	r6, r0
 801e454:	460f      	mov	r7, r1
 801e456:	f7e2 fb77 	bl	8000b48 <__aeabi_dcmpgt>
 801e45a:	b9d0      	cbnz	r0, 801e492 <_dtoa_r+0x6c2>
 801e45c:	4642      	mov	r2, r8
 801e45e:	464b      	mov	r3, r9
 801e460:	4630      	mov	r0, r6
 801e462:	4639      	mov	r1, r7
 801e464:	f7e2 fb48 	bl	8000af8 <__aeabi_dcmpeq>
 801e468:	b110      	cbz	r0, 801e470 <_dtoa_r+0x6a0>
 801e46a:	f01a 0f01 	tst.w	sl, #1
 801e46e:	d110      	bne.n	801e492 <_dtoa_r+0x6c2>
 801e470:	4620      	mov	r0, r4
 801e472:	ee18 1a10 	vmov	r1, s16
 801e476:	f001 f899 	bl	801f5ac <_Bfree>
 801e47a:	2300      	movs	r3, #0
 801e47c:	9800      	ldr	r0, [sp, #0]
 801e47e:	702b      	strb	r3, [r5, #0]
 801e480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e482:	3001      	adds	r0, #1
 801e484:	6018      	str	r0, [r3, #0]
 801e486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e488:	2b00      	cmp	r3, #0
 801e48a:	f43f acf1 	beq.w	801de70 <_dtoa_r+0xa0>
 801e48e:	601d      	str	r5, [r3, #0]
 801e490:	e4ee      	b.n	801de70 <_dtoa_r+0xa0>
 801e492:	9f00      	ldr	r7, [sp, #0]
 801e494:	462b      	mov	r3, r5
 801e496:	461d      	mov	r5, r3
 801e498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e49c:	2a39      	cmp	r2, #57	; 0x39
 801e49e:	d106      	bne.n	801e4ae <_dtoa_r+0x6de>
 801e4a0:	9a01      	ldr	r2, [sp, #4]
 801e4a2:	429a      	cmp	r2, r3
 801e4a4:	d1f7      	bne.n	801e496 <_dtoa_r+0x6c6>
 801e4a6:	9901      	ldr	r1, [sp, #4]
 801e4a8:	2230      	movs	r2, #48	; 0x30
 801e4aa:	3701      	adds	r7, #1
 801e4ac:	700a      	strb	r2, [r1, #0]
 801e4ae:	781a      	ldrb	r2, [r3, #0]
 801e4b0:	3201      	adds	r2, #1
 801e4b2:	701a      	strb	r2, [r3, #0]
 801e4b4:	e790      	b.n	801e3d8 <_dtoa_r+0x608>
 801e4b6:	4ba6      	ldr	r3, [pc, #664]	; (801e750 <_dtoa_r+0x980>)
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	f7e2 f8b5 	bl	8000628 <__aeabi_dmul>
 801e4be:	2200      	movs	r2, #0
 801e4c0:	2300      	movs	r3, #0
 801e4c2:	4606      	mov	r6, r0
 801e4c4:	460f      	mov	r7, r1
 801e4c6:	f7e2 fb17 	bl	8000af8 <__aeabi_dcmpeq>
 801e4ca:	2800      	cmp	r0, #0
 801e4cc:	d09d      	beq.n	801e40a <_dtoa_r+0x63a>
 801e4ce:	e7cf      	b.n	801e470 <_dtoa_r+0x6a0>
 801e4d0:	9a08      	ldr	r2, [sp, #32]
 801e4d2:	2a00      	cmp	r2, #0
 801e4d4:	f000 80d7 	beq.w	801e686 <_dtoa_r+0x8b6>
 801e4d8:	9a06      	ldr	r2, [sp, #24]
 801e4da:	2a01      	cmp	r2, #1
 801e4dc:	f300 80ba 	bgt.w	801e654 <_dtoa_r+0x884>
 801e4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e4e2:	2a00      	cmp	r2, #0
 801e4e4:	f000 80b2 	beq.w	801e64c <_dtoa_r+0x87c>
 801e4e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801e4ec:	9e07      	ldr	r6, [sp, #28]
 801e4ee:	9d04      	ldr	r5, [sp, #16]
 801e4f0:	9a04      	ldr	r2, [sp, #16]
 801e4f2:	441a      	add	r2, r3
 801e4f4:	9204      	str	r2, [sp, #16]
 801e4f6:	9a05      	ldr	r2, [sp, #20]
 801e4f8:	2101      	movs	r1, #1
 801e4fa:	441a      	add	r2, r3
 801e4fc:	4620      	mov	r0, r4
 801e4fe:	9205      	str	r2, [sp, #20]
 801e500:	f001 f956 	bl	801f7b0 <__i2b>
 801e504:	4607      	mov	r7, r0
 801e506:	2d00      	cmp	r5, #0
 801e508:	dd0c      	ble.n	801e524 <_dtoa_r+0x754>
 801e50a:	9b05      	ldr	r3, [sp, #20]
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	dd09      	ble.n	801e524 <_dtoa_r+0x754>
 801e510:	42ab      	cmp	r3, r5
 801e512:	9a04      	ldr	r2, [sp, #16]
 801e514:	bfa8      	it	ge
 801e516:	462b      	movge	r3, r5
 801e518:	1ad2      	subs	r2, r2, r3
 801e51a:	9204      	str	r2, [sp, #16]
 801e51c:	9a05      	ldr	r2, [sp, #20]
 801e51e:	1aed      	subs	r5, r5, r3
 801e520:	1ad3      	subs	r3, r2, r3
 801e522:	9305      	str	r3, [sp, #20]
 801e524:	9b07      	ldr	r3, [sp, #28]
 801e526:	b31b      	cbz	r3, 801e570 <_dtoa_r+0x7a0>
 801e528:	9b08      	ldr	r3, [sp, #32]
 801e52a:	2b00      	cmp	r3, #0
 801e52c:	f000 80af 	beq.w	801e68e <_dtoa_r+0x8be>
 801e530:	2e00      	cmp	r6, #0
 801e532:	dd13      	ble.n	801e55c <_dtoa_r+0x78c>
 801e534:	4639      	mov	r1, r7
 801e536:	4632      	mov	r2, r6
 801e538:	4620      	mov	r0, r4
 801e53a:	f001 f9f9 	bl	801f930 <__pow5mult>
 801e53e:	ee18 2a10 	vmov	r2, s16
 801e542:	4601      	mov	r1, r0
 801e544:	4607      	mov	r7, r0
 801e546:	4620      	mov	r0, r4
 801e548:	f001 f948 	bl	801f7dc <__multiply>
 801e54c:	ee18 1a10 	vmov	r1, s16
 801e550:	4680      	mov	r8, r0
 801e552:	4620      	mov	r0, r4
 801e554:	f001 f82a 	bl	801f5ac <_Bfree>
 801e558:	ee08 8a10 	vmov	s16, r8
 801e55c:	9b07      	ldr	r3, [sp, #28]
 801e55e:	1b9a      	subs	r2, r3, r6
 801e560:	d006      	beq.n	801e570 <_dtoa_r+0x7a0>
 801e562:	ee18 1a10 	vmov	r1, s16
 801e566:	4620      	mov	r0, r4
 801e568:	f001 f9e2 	bl	801f930 <__pow5mult>
 801e56c:	ee08 0a10 	vmov	s16, r0
 801e570:	2101      	movs	r1, #1
 801e572:	4620      	mov	r0, r4
 801e574:	f001 f91c 	bl	801f7b0 <__i2b>
 801e578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	4606      	mov	r6, r0
 801e57e:	f340 8088 	ble.w	801e692 <_dtoa_r+0x8c2>
 801e582:	461a      	mov	r2, r3
 801e584:	4601      	mov	r1, r0
 801e586:	4620      	mov	r0, r4
 801e588:	f001 f9d2 	bl	801f930 <__pow5mult>
 801e58c:	9b06      	ldr	r3, [sp, #24]
 801e58e:	2b01      	cmp	r3, #1
 801e590:	4606      	mov	r6, r0
 801e592:	f340 8081 	ble.w	801e698 <_dtoa_r+0x8c8>
 801e596:	f04f 0800 	mov.w	r8, #0
 801e59a:	6933      	ldr	r3, [r6, #16]
 801e59c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801e5a0:	6918      	ldr	r0, [r3, #16]
 801e5a2:	f001 f8b5 	bl	801f710 <__hi0bits>
 801e5a6:	f1c0 0020 	rsb	r0, r0, #32
 801e5aa:	9b05      	ldr	r3, [sp, #20]
 801e5ac:	4418      	add	r0, r3
 801e5ae:	f010 001f 	ands.w	r0, r0, #31
 801e5b2:	f000 8092 	beq.w	801e6da <_dtoa_r+0x90a>
 801e5b6:	f1c0 0320 	rsb	r3, r0, #32
 801e5ba:	2b04      	cmp	r3, #4
 801e5bc:	f340 808a 	ble.w	801e6d4 <_dtoa_r+0x904>
 801e5c0:	f1c0 001c 	rsb	r0, r0, #28
 801e5c4:	9b04      	ldr	r3, [sp, #16]
 801e5c6:	4403      	add	r3, r0
 801e5c8:	9304      	str	r3, [sp, #16]
 801e5ca:	9b05      	ldr	r3, [sp, #20]
 801e5cc:	4403      	add	r3, r0
 801e5ce:	4405      	add	r5, r0
 801e5d0:	9305      	str	r3, [sp, #20]
 801e5d2:	9b04      	ldr	r3, [sp, #16]
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	dd07      	ble.n	801e5e8 <_dtoa_r+0x818>
 801e5d8:	ee18 1a10 	vmov	r1, s16
 801e5dc:	461a      	mov	r2, r3
 801e5de:	4620      	mov	r0, r4
 801e5e0:	f001 fa00 	bl	801f9e4 <__lshift>
 801e5e4:	ee08 0a10 	vmov	s16, r0
 801e5e8:	9b05      	ldr	r3, [sp, #20]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	dd05      	ble.n	801e5fa <_dtoa_r+0x82a>
 801e5ee:	4631      	mov	r1, r6
 801e5f0:	461a      	mov	r2, r3
 801e5f2:	4620      	mov	r0, r4
 801e5f4:	f001 f9f6 	bl	801f9e4 <__lshift>
 801e5f8:	4606      	mov	r6, r0
 801e5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d06e      	beq.n	801e6de <_dtoa_r+0x90e>
 801e600:	ee18 0a10 	vmov	r0, s16
 801e604:	4631      	mov	r1, r6
 801e606:	f001 fa5d 	bl	801fac4 <__mcmp>
 801e60a:	2800      	cmp	r0, #0
 801e60c:	da67      	bge.n	801e6de <_dtoa_r+0x90e>
 801e60e:	9b00      	ldr	r3, [sp, #0]
 801e610:	3b01      	subs	r3, #1
 801e612:	ee18 1a10 	vmov	r1, s16
 801e616:	9300      	str	r3, [sp, #0]
 801e618:	220a      	movs	r2, #10
 801e61a:	2300      	movs	r3, #0
 801e61c:	4620      	mov	r0, r4
 801e61e:	f000 ffe7 	bl	801f5f0 <__multadd>
 801e622:	9b08      	ldr	r3, [sp, #32]
 801e624:	ee08 0a10 	vmov	s16, r0
 801e628:	2b00      	cmp	r3, #0
 801e62a:	f000 81b1 	beq.w	801e990 <_dtoa_r+0xbc0>
 801e62e:	2300      	movs	r3, #0
 801e630:	4639      	mov	r1, r7
 801e632:	220a      	movs	r2, #10
 801e634:	4620      	mov	r0, r4
 801e636:	f000 ffdb 	bl	801f5f0 <__multadd>
 801e63a:	9b02      	ldr	r3, [sp, #8]
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	4607      	mov	r7, r0
 801e640:	f300 808e 	bgt.w	801e760 <_dtoa_r+0x990>
 801e644:	9b06      	ldr	r3, [sp, #24]
 801e646:	2b02      	cmp	r3, #2
 801e648:	dc51      	bgt.n	801e6ee <_dtoa_r+0x91e>
 801e64a:	e089      	b.n	801e760 <_dtoa_r+0x990>
 801e64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e64e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801e652:	e74b      	b.n	801e4ec <_dtoa_r+0x71c>
 801e654:	9b03      	ldr	r3, [sp, #12]
 801e656:	1e5e      	subs	r6, r3, #1
 801e658:	9b07      	ldr	r3, [sp, #28]
 801e65a:	42b3      	cmp	r3, r6
 801e65c:	bfbf      	itttt	lt
 801e65e:	9b07      	ldrlt	r3, [sp, #28]
 801e660:	9607      	strlt	r6, [sp, #28]
 801e662:	1af2      	sublt	r2, r6, r3
 801e664:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801e666:	bfb6      	itet	lt
 801e668:	189b      	addlt	r3, r3, r2
 801e66a:	1b9e      	subge	r6, r3, r6
 801e66c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801e66e:	9b03      	ldr	r3, [sp, #12]
 801e670:	bfb8      	it	lt
 801e672:	2600      	movlt	r6, #0
 801e674:	2b00      	cmp	r3, #0
 801e676:	bfb7      	itett	lt
 801e678:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801e67c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801e680:	1a9d      	sublt	r5, r3, r2
 801e682:	2300      	movlt	r3, #0
 801e684:	e734      	b.n	801e4f0 <_dtoa_r+0x720>
 801e686:	9e07      	ldr	r6, [sp, #28]
 801e688:	9d04      	ldr	r5, [sp, #16]
 801e68a:	9f08      	ldr	r7, [sp, #32]
 801e68c:	e73b      	b.n	801e506 <_dtoa_r+0x736>
 801e68e:	9a07      	ldr	r2, [sp, #28]
 801e690:	e767      	b.n	801e562 <_dtoa_r+0x792>
 801e692:	9b06      	ldr	r3, [sp, #24]
 801e694:	2b01      	cmp	r3, #1
 801e696:	dc18      	bgt.n	801e6ca <_dtoa_r+0x8fa>
 801e698:	f1ba 0f00 	cmp.w	sl, #0
 801e69c:	d115      	bne.n	801e6ca <_dtoa_r+0x8fa>
 801e69e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e6a2:	b993      	cbnz	r3, 801e6ca <_dtoa_r+0x8fa>
 801e6a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e6a8:	0d1b      	lsrs	r3, r3, #20
 801e6aa:	051b      	lsls	r3, r3, #20
 801e6ac:	b183      	cbz	r3, 801e6d0 <_dtoa_r+0x900>
 801e6ae:	9b04      	ldr	r3, [sp, #16]
 801e6b0:	3301      	adds	r3, #1
 801e6b2:	9304      	str	r3, [sp, #16]
 801e6b4:	9b05      	ldr	r3, [sp, #20]
 801e6b6:	3301      	adds	r3, #1
 801e6b8:	9305      	str	r3, [sp, #20]
 801e6ba:	f04f 0801 	mov.w	r8, #1
 801e6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	f47f af6a 	bne.w	801e59a <_dtoa_r+0x7ca>
 801e6c6:	2001      	movs	r0, #1
 801e6c8:	e76f      	b.n	801e5aa <_dtoa_r+0x7da>
 801e6ca:	f04f 0800 	mov.w	r8, #0
 801e6ce:	e7f6      	b.n	801e6be <_dtoa_r+0x8ee>
 801e6d0:	4698      	mov	r8, r3
 801e6d2:	e7f4      	b.n	801e6be <_dtoa_r+0x8ee>
 801e6d4:	f43f af7d 	beq.w	801e5d2 <_dtoa_r+0x802>
 801e6d8:	4618      	mov	r0, r3
 801e6da:	301c      	adds	r0, #28
 801e6dc:	e772      	b.n	801e5c4 <_dtoa_r+0x7f4>
 801e6de:	9b03      	ldr	r3, [sp, #12]
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	dc37      	bgt.n	801e754 <_dtoa_r+0x984>
 801e6e4:	9b06      	ldr	r3, [sp, #24]
 801e6e6:	2b02      	cmp	r3, #2
 801e6e8:	dd34      	ble.n	801e754 <_dtoa_r+0x984>
 801e6ea:	9b03      	ldr	r3, [sp, #12]
 801e6ec:	9302      	str	r3, [sp, #8]
 801e6ee:	9b02      	ldr	r3, [sp, #8]
 801e6f0:	b96b      	cbnz	r3, 801e70e <_dtoa_r+0x93e>
 801e6f2:	4631      	mov	r1, r6
 801e6f4:	2205      	movs	r2, #5
 801e6f6:	4620      	mov	r0, r4
 801e6f8:	f000 ff7a 	bl	801f5f0 <__multadd>
 801e6fc:	4601      	mov	r1, r0
 801e6fe:	4606      	mov	r6, r0
 801e700:	ee18 0a10 	vmov	r0, s16
 801e704:	f001 f9de 	bl	801fac4 <__mcmp>
 801e708:	2800      	cmp	r0, #0
 801e70a:	f73f adbb 	bgt.w	801e284 <_dtoa_r+0x4b4>
 801e70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e710:	9d01      	ldr	r5, [sp, #4]
 801e712:	43db      	mvns	r3, r3
 801e714:	9300      	str	r3, [sp, #0]
 801e716:	f04f 0800 	mov.w	r8, #0
 801e71a:	4631      	mov	r1, r6
 801e71c:	4620      	mov	r0, r4
 801e71e:	f000 ff45 	bl	801f5ac <_Bfree>
 801e722:	2f00      	cmp	r7, #0
 801e724:	f43f aea4 	beq.w	801e470 <_dtoa_r+0x6a0>
 801e728:	f1b8 0f00 	cmp.w	r8, #0
 801e72c:	d005      	beq.n	801e73a <_dtoa_r+0x96a>
 801e72e:	45b8      	cmp	r8, r7
 801e730:	d003      	beq.n	801e73a <_dtoa_r+0x96a>
 801e732:	4641      	mov	r1, r8
 801e734:	4620      	mov	r0, r4
 801e736:	f000 ff39 	bl	801f5ac <_Bfree>
 801e73a:	4639      	mov	r1, r7
 801e73c:	4620      	mov	r0, r4
 801e73e:	f000 ff35 	bl	801f5ac <_Bfree>
 801e742:	e695      	b.n	801e470 <_dtoa_r+0x6a0>
 801e744:	2600      	movs	r6, #0
 801e746:	4637      	mov	r7, r6
 801e748:	e7e1      	b.n	801e70e <_dtoa_r+0x93e>
 801e74a:	9700      	str	r7, [sp, #0]
 801e74c:	4637      	mov	r7, r6
 801e74e:	e599      	b.n	801e284 <_dtoa_r+0x4b4>
 801e750:	40240000 	.word	0x40240000
 801e754:	9b08      	ldr	r3, [sp, #32]
 801e756:	2b00      	cmp	r3, #0
 801e758:	f000 80ca 	beq.w	801e8f0 <_dtoa_r+0xb20>
 801e75c:	9b03      	ldr	r3, [sp, #12]
 801e75e:	9302      	str	r3, [sp, #8]
 801e760:	2d00      	cmp	r5, #0
 801e762:	dd05      	ble.n	801e770 <_dtoa_r+0x9a0>
 801e764:	4639      	mov	r1, r7
 801e766:	462a      	mov	r2, r5
 801e768:	4620      	mov	r0, r4
 801e76a:	f001 f93b 	bl	801f9e4 <__lshift>
 801e76e:	4607      	mov	r7, r0
 801e770:	f1b8 0f00 	cmp.w	r8, #0
 801e774:	d05b      	beq.n	801e82e <_dtoa_r+0xa5e>
 801e776:	6879      	ldr	r1, [r7, #4]
 801e778:	4620      	mov	r0, r4
 801e77a:	f000 fed7 	bl	801f52c <_Balloc>
 801e77e:	4605      	mov	r5, r0
 801e780:	b928      	cbnz	r0, 801e78e <_dtoa_r+0x9be>
 801e782:	4b87      	ldr	r3, [pc, #540]	; (801e9a0 <_dtoa_r+0xbd0>)
 801e784:	4602      	mov	r2, r0
 801e786:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e78a:	f7ff bb3b 	b.w	801de04 <_dtoa_r+0x34>
 801e78e:	693a      	ldr	r2, [r7, #16]
 801e790:	3202      	adds	r2, #2
 801e792:	0092      	lsls	r2, r2, #2
 801e794:	f107 010c 	add.w	r1, r7, #12
 801e798:	300c      	adds	r0, #12
 801e79a:	f7fd f9e7 	bl	801bb6c <memcpy>
 801e79e:	2201      	movs	r2, #1
 801e7a0:	4629      	mov	r1, r5
 801e7a2:	4620      	mov	r0, r4
 801e7a4:	f001 f91e 	bl	801f9e4 <__lshift>
 801e7a8:	9b01      	ldr	r3, [sp, #4]
 801e7aa:	f103 0901 	add.w	r9, r3, #1
 801e7ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e7b2:	4413      	add	r3, r2
 801e7b4:	9305      	str	r3, [sp, #20]
 801e7b6:	f00a 0301 	and.w	r3, sl, #1
 801e7ba:	46b8      	mov	r8, r7
 801e7bc:	9304      	str	r3, [sp, #16]
 801e7be:	4607      	mov	r7, r0
 801e7c0:	4631      	mov	r1, r6
 801e7c2:	ee18 0a10 	vmov	r0, s16
 801e7c6:	f7ff fa75 	bl	801dcb4 <quorem>
 801e7ca:	4641      	mov	r1, r8
 801e7cc:	9002      	str	r0, [sp, #8]
 801e7ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e7d2:	ee18 0a10 	vmov	r0, s16
 801e7d6:	f001 f975 	bl	801fac4 <__mcmp>
 801e7da:	463a      	mov	r2, r7
 801e7dc:	9003      	str	r0, [sp, #12]
 801e7de:	4631      	mov	r1, r6
 801e7e0:	4620      	mov	r0, r4
 801e7e2:	f001 f98b 	bl	801fafc <__mdiff>
 801e7e6:	68c2      	ldr	r2, [r0, #12]
 801e7e8:	f109 3bff 	add.w	fp, r9, #4294967295
 801e7ec:	4605      	mov	r5, r0
 801e7ee:	bb02      	cbnz	r2, 801e832 <_dtoa_r+0xa62>
 801e7f0:	4601      	mov	r1, r0
 801e7f2:	ee18 0a10 	vmov	r0, s16
 801e7f6:	f001 f965 	bl	801fac4 <__mcmp>
 801e7fa:	4602      	mov	r2, r0
 801e7fc:	4629      	mov	r1, r5
 801e7fe:	4620      	mov	r0, r4
 801e800:	9207      	str	r2, [sp, #28]
 801e802:	f000 fed3 	bl	801f5ac <_Bfree>
 801e806:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e80a:	ea43 0102 	orr.w	r1, r3, r2
 801e80e:	9b04      	ldr	r3, [sp, #16]
 801e810:	430b      	orrs	r3, r1
 801e812:	464d      	mov	r5, r9
 801e814:	d10f      	bne.n	801e836 <_dtoa_r+0xa66>
 801e816:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e81a:	d02a      	beq.n	801e872 <_dtoa_r+0xaa2>
 801e81c:	9b03      	ldr	r3, [sp, #12]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	dd02      	ble.n	801e828 <_dtoa_r+0xa58>
 801e822:	9b02      	ldr	r3, [sp, #8]
 801e824:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801e828:	f88b a000 	strb.w	sl, [fp]
 801e82c:	e775      	b.n	801e71a <_dtoa_r+0x94a>
 801e82e:	4638      	mov	r0, r7
 801e830:	e7ba      	b.n	801e7a8 <_dtoa_r+0x9d8>
 801e832:	2201      	movs	r2, #1
 801e834:	e7e2      	b.n	801e7fc <_dtoa_r+0xa2c>
 801e836:	9b03      	ldr	r3, [sp, #12]
 801e838:	2b00      	cmp	r3, #0
 801e83a:	db04      	blt.n	801e846 <_dtoa_r+0xa76>
 801e83c:	9906      	ldr	r1, [sp, #24]
 801e83e:	430b      	orrs	r3, r1
 801e840:	9904      	ldr	r1, [sp, #16]
 801e842:	430b      	orrs	r3, r1
 801e844:	d122      	bne.n	801e88c <_dtoa_r+0xabc>
 801e846:	2a00      	cmp	r2, #0
 801e848:	ddee      	ble.n	801e828 <_dtoa_r+0xa58>
 801e84a:	ee18 1a10 	vmov	r1, s16
 801e84e:	2201      	movs	r2, #1
 801e850:	4620      	mov	r0, r4
 801e852:	f001 f8c7 	bl	801f9e4 <__lshift>
 801e856:	4631      	mov	r1, r6
 801e858:	ee08 0a10 	vmov	s16, r0
 801e85c:	f001 f932 	bl	801fac4 <__mcmp>
 801e860:	2800      	cmp	r0, #0
 801e862:	dc03      	bgt.n	801e86c <_dtoa_r+0xa9c>
 801e864:	d1e0      	bne.n	801e828 <_dtoa_r+0xa58>
 801e866:	f01a 0f01 	tst.w	sl, #1
 801e86a:	d0dd      	beq.n	801e828 <_dtoa_r+0xa58>
 801e86c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e870:	d1d7      	bne.n	801e822 <_dtoa_r+0xa52>
 801e872:	2339      	movs	r3, #57	; 0x39
 801e874:	f88b 3000 	strb.w	r3, [fp]
 801e878:	462b      	mov	r3, r5
 801e87a:	461d      	mov	r5, r3
 801e87c:	3b01      	subs	r3, #1
 801e87e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e882:	2a39      	cmp	r2, #57	; 0x39
 801e884:	d071      	beq.n	801e96a <_dtoa_r+0xb9a>
 801e886:	3201      	adds	r2, #1
 801e888:	701a      	strb	r2, [r3, #0]
 801e88a:	e746      	b.n	801e71a <_dtoa_r+0x94a>
 801e88c:	2a00      	cmp	r2, #0
 801e88e:	dd07      	ble.n	801e8a0 <_dtoa_r+0xad0>
 801e890:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e894:	d0ed      	beq.n	801e872 <_dtoa_r+0xaa2>
 801e896:	f10a 0301 	add.w	r3, sl, #1
 801e89a:	f88b 3000 	strb.w	r3, [fp]
 801e89e:	e73c      	b.n	801e71a <_dtoa_r+0x94a>
 801e8a0:	9b05      	ldr	r3, [sp, #20]
 801e8a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801e8a6:	4599      	cmp	r9, r3
 801e8a8:	d047      	beq.n	801e93a <_dtoa_r+0xb6a>
 801e8aa:	ee18 1a10 	vmov	r1, s16
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	220a      	movs	r2, #10
 801e8b2:	4620      	mov	r0, r4
 801e8b4:	f000 fe9c 	bl	801f5f0 <__multadd>
 801e8b8:	45b8      	cmp	r8, r7
 801e8ba:	ee08 0a10 	vmov	s16, r0
 801e8be:	f04f 0300 	mov.w	r3, #0
 801e8c2:	f04f 020a 	mov.w	r2, #10
 801e8c6:	4641      	mov	r1, r8
 801e8c8:	4620      	mov	r0, r4
 801e8ca:	d106      	bne.n	801e8da <_dtoa_r+0xb0a>
 801e8cc:	f000 fe90 	bl	801f5f0 <__multadd>
 801e8d0:	4680      	mov	r8, r0
 801e8d2:	4607      	mov	r7, r0
 801e8d4:	f109 0901 	add.w	r9, r9, #1
 801e8d8:	e772      	b.n	801e7c0 <_dtoa_r+0x9f0>
 801e8da:	f000 fe89 	bl	801f5f0 <__multadd>
 801e8de:	4639      	mov	r1, r7
 801e8e0:	4680      	mov	r8, r0
 801e8e2:	2300      	movs	r3, #0
 801e8e4:	220a      	movs	r2, #10
 801e8e6:	4620      	mov	r0, r4
 801e8e8:	f000 fe82 	bl	801f5f0 <__multadd>
 801e8ec:	4607      	mov	r7, r0
 801e8ee:	e7f1      	b.n	801e8d4 <_dtoa_r+0xb04>
 801e8f0:	9b03      	ldr	r3, [sp, #12]
 801e8f2:	9302      	str	r3, [sp, #8]
 801e8f4:	9d01      	ldr	r5, [sp, #4]
 801e8f6:	ee18 0a10 	vmov	r0, s16
 801e8fa:	4631      	mov	r1, r6
 801e8fc:	f7ff f9da 	bl	801dcb4 <quorem>
 801e900:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e904:	9b01      	ldr	r3, [sp, #4]
 801e906:	f805 ab01 	strb.w	sl, [r5], #1
 801e90a:	1aea      	subs	r2, r5, r3
 801e90c:	9b02      	ldr	r3, [sp, #8]
 801e90e:	4293      	cmp	r3, r2
 801e910:	dd09      	ble.n	801e926 <_dtoa_r+0xb56>
 801e912:	ee18 1a10 	vmov	r1, s16
 801e916:	2300      	movs	r3, #0
 801e918:	220a      	movs	r2, #10
 801e91a:	4620      	mov	r0, r4
 801e91c:	f000 fe68 	bl	801f5f0 <__multadd>
 801e920:	ee08 0a10 	vmov	s16, r0
 801e924:	e7e7      	b.n	801e8f6 <_dtoa_r+0xb26>
 801e926:	9b02      	ldr	r3, [sp, #8]
 801e928:	2b00      	cmp	r3, #0
 801e92a:	bfc8      	it	gt
 801e92c:	461d      	movgt	r5, r3
 801e92e:	9b01      	ldr	r3, [sp, #4]
 801e930:	bfd8      	it	le
 801e932:	2501      	movle	r5, #1
 801e934:	441d      	add	r5, r3
 801e936:	f04f 0800 	mov.w	r8, #0
 801e93a:	ee18 1a10 	vmov	r1, s16
 801e93e:	2201      	movs	r2, #1
 801e940:	4620      	mov	r0, r4
 801e942:	f001 f84f 	bl	801f9e4 <__lshift>
 801e946:	4631      	mov	r1, r6
 801e948:	ee08 0a10 	vmov	s16, r0
 801e94c:	f001 f8ba 	bl	801fac4 <__mcmp>
 801e950:	2800      	cmp	r0, #0
 801e952:	dc91      	bgt.n	801e878 <_dtoa_r+0xaa8>
 801e954:	d102      	bne.n	801e95c <_dtoa_r+0xb8c>
 801e956:	f01a 0f01 	tst.w	sl, #1
 801e95a:	d18d      	bne.n	801e878 <_dtoa_r+0xaa8>
 801e95c:	462b      	mov	r3, r5
 801e95e:	461d      	mov	r5, r3
 801e960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e964:	2a30      	cmp	r2, #48	; 0x30
 801e966:	d0fa      	beq.n	801e95e <_dtoa_r+0xb8e>
 801e968:	e6d7      	b.n	801e71a <_dtoa_r+0x94a>
 801e96a:	9a01      	ldr	r2, [sp, #4]
 801e96c:	429a      	cmp	r2, r3
 801e96e:	d184      	bne.n	801e87a <_dtoa_r+0xaaa>
 801e970:	9b00      	ldr	r3, [sp, #0]
 801e972:	3301      	adds	r3, #1
 801e974:	9300      	str	r3, [sp, #0]
 801e976:	2331      	movs	r3, #49	; 0x31
 801e978:	7013      	strb	r3, [r2, #0]
 801e97a:	e6ce      	b.n	801e71a <_dtoa_r+0x94a>
 801e97c:	4b09      	ldr	r3, [pc, #36]	; (801e9a4 <_dtoa_r+0xbd4>)
 801e97e:	f7ff ba95 	b.w	801deac <_dtoa_r+0xdc>
 801e982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e984:	2b00      	cmp	r3, #0
 801e986:	f47f aa6e 	bne.w	801de66 <_dtoa_r+0x96>
 801e98a:	4b07      	ldr	r3, [pc, #28]	; (801e9a8 <_dtoa_r+0xbd8>)
 801e98c:	f7ff ba8e 	b.w	801deac <_dtoa_r+0xdc>
 801e990:	9b02      	ldr	r3, [sp, #8]
 801e992:	2b00      	cmp	r3, #0
 801e994:	dcae      	bgt.n	801e8f4 <_dtoa_r+0xb24>
 801e996:	9b06      	ldr	r3, [sp, #24]
 801e998:	2b02      	cmp	r3, #2
 801e99a:	f73f aea8 	bgt.w	801e6ee <_dtoa_r+0x91e>
 801e99e:	e7a9      	b.n	801e8f4 <_dtoa_r+0xb24>
 801e9a0:	08022e41 	.word	0x08022e41
 801e9a4:	08022ba8 	.word	0x08022ba8
 801e9a8:	08022dd9 	.word	0x08022dd9

0801e9ac <__sflush_r>:
 801e9ac:	898a      	ldrh	r2, [r1, #12]
 801e9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9b2:	4605      	mov	r5, r0
 801e9b4:	0710      	lsls	r0, r2, #28
 801e9b6:	460c      	mov	r4, r1
 801e9b8:	d458      	bmi.n	801ea6c <__sflush_r+0xc0>
 801e9ba:	684b      	ldr	r3, [r1, #4]
 801e9bc:	2b00      	cmp	r3, #0
 801e9be:	dc05      	bgt.n	801e9cc <__sflush_r+0x20>
 801e9c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	dc02      	bgt.n	801e9cc <__sflush_r+0x20>
 801e9c6:	2000      	movs	r0, #0
 801e9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e9ce:	2e00      	cmp	r6, #0
 801e9d0:	d0f9      	beq.n	801e9c6 <__sflush_r+0x1a>
 801e9d2:	2300      	movs	r3, #0
 801e9d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e9d8:	682f      	ldr	r7, [r5, #0]
 801e9da:	602b      	str	r3, [r5, #0]
 801e9dc:	d032      	beq.n	801ea44 <__sflush_r+0x98>
 801e9de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e9e0:	89a3      	ldrh	r3, [r4, #12]
 801e9e2:	075a      	lsls	r2, r3, #29
 801e9e4:	d505      	bpl.n	801e9f2 <__sflush_r+0x46>
 801e9e6:	6863      	ldr	r3, [r4, #4]
 801e9e8:	1ac0      	subs	r0, r0, r3
 801e9ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e9ec:	b10b      	cbz	r3, 801e9f2 <__sflush_r+0x46>
 801e9ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e9f0:	1ac0      	subs	r0, r0, r3
 801e9f2:	2300      	movs	r3, #0
 801e9f4:	4602      	mov	r2, r0
 801e9f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e9f8:	6a21      	ldr	r1, [r4, #32]
 801e9fa:	4628      	mov	r0, r5
 801e9fc:	47b0      	blx	r6
 801e9fe:	1c43      	adds	r3, r0, #1
 801ea00:	89a3      	ldrh	r3, [r4, #12]
 801ea02:	d106      	bne.n	801ea12 <__sflush_r+0x66>
 801ea04:	6829      	ldr	r1, [r5, #0]
 801ea06:	291d      	cmp	r1, #29
 801ea08:	d82c      	bhi.n	801ea64 <__sflush_r+0xb8>
 801ea0a:	4a2a      	ldr	r2, [pc, #168]	; (801eab4 <__sflush_r+0x108>)
 801ea0c:	40ca      	lsrs	r2, r1
 801ea0e:	07d6      	lsls	r6, r2, #31
 801ea10:	d528      	bpl.n	801ea64 <__sflush_r+0xb8>
 801ea12:	2200      	movs	r2, #0
 801ea14:	6062      	str	r2, [r4, #4]
 801ea16:	04d9      	lsls	r1, r3, #19
 801ea18:	6922      	ldr	r2, [r4, #16]
 801ea1a:	6022      	str	r2, [r4, #0]
 801ea1c:	d504      	bpl.n	801ea28 <__sflush_r+0x7c>
 801ea1e:	1c42      	adds	r2, r0, #1
 801ea20:	d101      	bne.n	801ea26 <__sflush_r+0x7a>
 801ea22:	682b      	ldr	r3, [r5, #0]
 801ea24:	b903      	cbnz	r3, 801ea28 <__sflush_r+0x7c>
 801ea26:	6560      	str	r0, [r4, #84]	; 0x54
 801ea28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ea2a:	602f      	str	r7, [r5, #0]
 801ea2c:	2900      	cmp	r1, #0
 801ea2e:	d0ca      	beq.n	801e9c6 <__sflush_r+0x1a>
 801ea30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ea34:	4299      	cmp	r1, r3
 801ea36:	d002      	beq.n	801ea3e <__sflush_r+0x92>
 801ea38:	4628      	mov	r0, r5
 801ea3a:	f7fd f8c7 	bl	801bbcc <_free_r>
 801ea3e:	2000      	movs	r0, #0
 801ea40:	6360      	str	r0, [r4, #52]	; 0x34
 801ea42:	e7c1      	b.n	801e9c8 <__sflush_r+0x1c>
 801ea44:	6a21      	ldr	r1, [r4, #32]
 801ea46:	2301      	movs	r3, #1
 801ea48:	4628      	mov	r0, r5
 801ea4a:	47b0      	blx	r6
 801ea4c:	1c41      	adds	r1, r0, #1
 801ea4e:	d1c7      	bne.n	801e9e0 <__sflush_r+0x34>
 801ea50:	682b      	ldr	r3, [r5, #0]
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d0c4      	beq.n	801e9e0 <__sflush_r+0x34>
 801ea56:	2b1d      	cmp	r3, #29
 801ea58:	d001      	beq.n	801ea5e <__sflush_r+0xb2>
 801ea5a:	2b16      	cmp	r3, #22
 801ea5c:	d101      	bne.n	801ea62 <__sflush_r+0xb6>
 801ea5e:	602f      	str	r7, [r5, #0]
 801ea60:	e7b1      	b.n	801e9c6 <__sflush_r+0x1a>
 801ea62:	89a3      	ldrh	r3, [r4, #12]
 801ea64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ea68:	81a3      	strh	r3, [r4, #12]
 801ea6a:	e7ad      	b.n	801e9c8 <__sflush_r+0x1c>
 801ea6c:	690f      	ldr	r7, [r1, #16]
 801ea6e:	2f00      	cmp	r7, #0
 801ea70:	d0a9      	beq.n	801e9c6 <__sflush_r+0x1a>
 801ea72:	0793      	lsls	r3, r2, #30
 801ea74:	680e      	ldr	r6, [r1, #0]
 801ea76:	bf08      	it	eq
 801ea78:	694b      	ldreq	r3, [r1, #20]
 801ea7a:	600f      	str	r7, [r1, #0]
 801ea7c:	bf18      	it	ne
 801ea7e:	2300      	movne	r3, #0
 801ea80:	eba6 0807 	sub.w	r8, r6, r7
 801ea84:	608b      	str	r3, [r1, #8]
 801ea86:	f1b8 0f00 	cmp.w	r8, #0
 801ea8a:	dd9c      	ble.n	801e9c6 <__sflush_r+0x1a>
 801ea8c:	6a21      	ldr	r1, [r4, #32]
 801ea8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ea90:	4643      	mov	r3, r8
 801ea92:	463a      	mov	r2, r7
 801ea94:	4628      	mov	r0, r5
 801ea96:	47b0      	blx	r6
 801ea98:	2800      	cmp	r0, #0
 801ea9a:	dc06      	bgt.n	801eaaa <__sflush_r+0xfe>
 801ea9c:	89a3      	ldrh	r3, [r4, #12]
 801ea9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eaa2:	81a3      	strh	r3, [r4, #12]
 801eaa4:	f04f 30ff 	mov.w	r0, #4294967295
 801eaa8:	e78e      	b.n	801e9c8 <__sflush_r+0x1c>
 801eaaa:	4407      	add	r7, r0
 801eaac:	eba8 0800 	sub.w	r8, r8, r0
 801eab0:	e7e9      	b.n	801ea86 <__sflush_r+0xda>
 801eab2:	bf00      	nop
 801eab4:	20400001 	.word	0x20400001

0801eab8 <_fflush_r>:
 801eab8:	b538      	push	{r3, r4, r5, lr}
 801eaba:	690b      	ldr	r3, [r1, #16]
 801eabc:	4605      	mov	r5, r0
 801eabe:	460c      	mov	r4, r1
 801eac0:	b913      	cbnz	r3, 801eac8 <_fflush_r+0x10>
 801eac2:	2500      	movs	r5, #0
 801eac4:	4628      	mov	r0, r5
 801eac6:	bd38      	pop	{r3, r4, r5, pc}
 801eac8:	b118      	cbz	r0, 801ead2 <_fflush_r+0x1a>
 801eaca:	6983      	ldr	r3, [r0, #24]
 801eacc:	b90b      	cbnz	r3, 801ead2 <_fflush_r+0x1a>
 801eace:	f000 f887 	bl	801ebe0 <__sinit>
 801ead2:	4b14      	ldr	r3, [pc, #80]	; (801eb24 <_fflush_r+0x6c>)
 801ead4:	429c      	cmp	r4, r3
 801ead6:	d11b      	bne.n	801eb10 <_fflush_r+0x58>
 801ead8:	686c      	ldr	r4, [r5, #4]
 801eada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eade:	2b00      	cmp	r3, #0
 801eae0:	d0ef      	beq.n	801eac2 <_fflush_r+0xa>
 801eae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801eae4:	07d0      	lsls	r0, r2, #31
 801eae6:	d404      	bmi.n	801eaf2 <_fflush_r+0x3a>
 801eae8:	0599      	lsls	r1, r3, #22
 801eaea:	d402      	bmi.n	801eaf2 <_fflush_r+0x3a>
 801eaec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eaee:	f7fd f832 	bl	801bb56 <__retarget_lock_acquire_recursive>
 801eaf2:	4628      	mov	r0, r5
 801eaf4:	4621      	mov	r1, r4
 801eaf6:	f7ff ff59 	bl	801e9ac <__sflush_r>
 801eafa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eafc:	07da      	lsls	r2, r3, #31
 801eafe:	4605      	mov	r5, r0
 801eb00:	d4e0      	bmi.n	801eac4 <_fflush_r+0xc>
 801eb02:	89a3      	ldrh	r3, [r4, #12]
 801eb04:	059b      	lsls	r3, r3, #22
 801eb06:	d4dd      	bmi.n	801eac4 <_fflush_r+0xc>
 801eb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb0a:	f7fd f825 	bl	801bb58 <__retarget_lock_release_recursive>
 801eb0e:	e7d9      	b.n	801eac4 <_fflush_r+0xc>
 801eb10:	4b05      	ldr	r3, [pc, #20]	; (801eb28 <_fflush_r+0x70>)
 801eb12:	429c      	cmp	r4, r3
 801eb14:	d101      	bne.n	801eb1a <_fflush_r+0x62>
 801eb16:	68ac      	ldr	r4, [r5, #8]
 801eb18:	e7df      	b.n	801eada <_fflush_r+0x22>
 801eb1a:	4b04      	ldr	r3, [pc, #16]	; (801eb2c <_fflush_r+0x74>)
 801eb1c:	429c      	cmp	r4, r3
 801eb1e:	bf08      	it	eq
 801eb20:	68ec      	ldreq	r4, [r5, #12]
 801eb22:	e7da      	b.n	801eada <_fflush_r+0x22>
 801eb24:	08022e74 	.word	0x08022e74
 801eb28:	08022e94 	.word	0x08022e94
 801eb2c:	08022e54 	.word	0x08022e54

0801eb30 <std>:
 801eb30:	2300      	movs	r3, #0
 801eb32:	b510      	push	{r4, lr}
 801eb34:	4604      	mov	r4, r0
 801eb36:	e9c0 3300 	strd	r3, r3, [r0]
 801eb3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801eb3e:	6083      	str	r3, [r0, #8]
 801eb40:	8181      	strh	r1, [r0, #12]
 801eb42:	6643      	str	r3, [r0, #100]	; 0x64
 801eb44:	81c2      	strh	r2, [r0, #14]
 801eb46:	6183      	str	r3, [r0, #24]
 801eb48:	4619      	mov	r1, r3
 801eb4a:	2208      	movs	r2, #8
 801eb4c:	305c      	adds	r0, #92	; 0x5c
 801eb4e:	f7fd f835 	bl	801bbbc <memset>
 801eb52:	4b05      	ldr	r3, [pc, #20]	; (801eb68 <std+0x38>)
 801eb54:	6263      	str	r3, [r4, #36]	; 0x24
 801eb56:	4b05      	ldr	r3, [pc, #20]	; (801eb6c <std+0x3c>)
 801eb58:	62a3      	str	r3, [r4, #40]	; 0x28
 801eb5a:	4b05      	ldr	r3, [pc, #20]	; (801eb70 <std+0x40>)
 801eb5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801eb5e:	4b05      	ldr	r3, [pc, #20]	; (801eb74 <std+0x44>)
 801eb60:	6224      	str	r4, [r4, #32]
 801eb62:	6323      	str	r3, [r4, #48]	; 0x30
 801eb64:	bd10      	pop	{r4, pc}
 801eb66:	bf00      	nop
 801eb68:	08020459 	.word	0x08020459
 801eb6c:	0802047b 	.word	0x0802047b
 801eb70:	080204b3 	.word	0x080204b3
 801eb74:	080204d7 	.word	0x080204d7

0801eb78 <_cleanup_r>:
 801eb78:	4901      	ldr	r1, [pc, #4]	; (801eb80 <_cleanup_r+0x8>)
 801eb7a:	f000 b8c1 	b.w	801ed00 <_fwalk_reent>
 801eb7e:	bf00      	nop
 801eb80:	0801eab9 	.word	0x0801eab9

0801eb84 <__sfmoreglue>:
 801eb84:	b570      	push	{r4, r5, r6, lr}
 801eb86:	2268      	movs	r2, #104	; 0x68
 801eb88:	1e4d      	subs	r5, r1, #1
 801eb8a:	4355      	muls	r5, r2
 801eb8c:	460e      	mov	r6, r1
 801eb8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801eb92:	f7fd f887 	bl	801bca4 <_malloc_r>
 801eb96:	4604      	mov	r4, r0
 801eb98:	b140      	cbz	r0, 801ebac <__sfmoreglue+0x28>
 801eb9a:	2100      	movs	r1, #0
 801eb9c:	e9c0 1600 	strd	r1, r6, [r0]
 801eba0:	300c      	adds	r0, #12
 801eba2:	60a0      	str	r0, [r4, #8]
 801eba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801eba8:	f7fd f808 	bl	801bbbc <memset>
 801ebac:	4620      	mov	r0, r4
 801ebae:	bd70      	pop	{r4, r5, r6, pc}

0801ebb0 <__sfp_lock_acquire>:
 801ebb0:	4801      	ldr	r0, [pc, #4]	; (801ebb8 <__sfp_lock_acquire+0x8>)
 801ebb2:	f7fc bfd0 	b.w	801bb56 <__retarget_lock_acquire_recursive>
 801ebb6:	bf00      	nop
 801ebb8:	20003699 	.word	0x20003699

0801ebbc <__sfp_lock_release>:
 801ebbc:	4801      	ldr	r0, [pc, #4]	; (801ebc4 <__sfp_lock_release+0x8>)
 801ebbe:	f7fc bfcb 	b.w	801bb58 <__retarget_lock_release_recursive>
 801ebc2:	bf00      	nop
 801ebc4:	20003699 	.word	0x20003699

0801ebc8 <__sinit_lock_acquire>:
 801ebc8:	4801      	ldr	r0, [pc, #4]	; (801ebd0 <__sinit_lock_acquire+0x8>)
 801ebca:	f7fc bfc4 	b.w	801bb56 <__retarget_lock_acquire_recursive>
 801ebce:	bf00      	nop
 801ebd0:	2000369a 	.word	0x2000369a

0801ebd4 <__sinit_lock_release>:
 801ebd4:	4801      	ldr	r0, [pc, #4]	; (801ebdc <__sinit_lock_release+0x8>)
 801ebd6:	f7fc bfbf 	b.w	801bb58 <__retarget_lock_release_recursive>
 801ebda:	bf00      	nop
 801ebdc:	2000369a 	.word	0x2000369a

0801ebe0 <__sinit>:
 801ebe0:	b510      	push	{r4, lr}
 801ebe2:	4604      	mov	r4, r0
 801ebe4:	f7ff fff0 	bl	801ebc8 <__sinit_lock_acquire>
 801ebe8:	69a3      	ldr	r3, [r4, #24]
 801ebea:	b11b      	cbz	r3, 801ebf4 <__sinit+0x14>
 801ebec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ebf0:	f7ff bff0 	b.w	801ebd4 <__sinit_lock_release>
 801ebf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ebf8:	6523      	str	r3, [r4, #80]	; 0x50
 801ebfa:	4b13      	ldr	r3, [pc, #76]	; (801ec48 <__sinit+0x68>)
 801ebfc:	4a13      	ldr	r2, [pc, #76]	; (801ec4c <__sinit+0x6c>)
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	62a2      	str	r2, [r4, #40]	; 0x28
 801ec02:	42a3      	cmp	r3, r4
 801ec04:	bf04      	itt	eq
 801ec06:	2301      	moveq	r3, #1
 801ec08:	61a3      	streq	r3, [r4, #24]
 801ec0a:	4620      	mov	r0, r4
 801ec0c:	f000 f820 	bl	801ec50 <__sfp>
 801ec10:	6060      	str	r0, [r4, #4]
 801ec12:	4620      	mov	r0, r4
 801ec14:	f000 f81c 	bl	801ec50 <__sfp>
 801ec18:	60a0      	str	r0, [r4, #8]
 801ec1a:	4620      	mov	r0, r4
 801ec1c:	f000 f818 	bl	801ec50 <__sfp>
 801ec20:	2200      	movs	r2, #0
 801ec22:	60e0      	str	r0, [r4, #12]
 801ec24:	2104      	movs	r1, #4
 801ec26:	6860      	ldr	r0, [r4, #4]
 801ec28:	f7ff ff82 	bl	801eb30 <std>
 801ec2c:	68a0      	ldr	r0, [r4, #8]
 801ec2e:	2201      	movs	r2, #1
 801ec30:	2109      	movs	r1, #9
 801ec32:	f7ff ff7d 	bl	801eb30 <std>
 801ec36:	68e0      	ldr	r0, [r4, #12]
 801ec38:	2202      	movs	r2, #2
 801ec3a:	2112      	movs	r1, #18
 801ec3c:	f7ff ff78 	bl	801eb30 <std>
 801ec40:	2301      	movs	r3, #1
 801ec42:	61a3      	str	r3, [r4, #24]
 801ec44:	e7d2      	b.n	801ebec <__sinit+0xc>
 801ec46:	bf00      	nop
 801ec48:	08022b94 	.word	0x08022b94
 801ec4c:	0801eb79 	.word	0x0801eb79

0801ec50 <__sfp>:
 801ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec52:	4607      	mov	r7, r0
 801ec54:	f7ff ffac 	bl	801ebb0 <__sfp_lock_acquire>
 801ec58:	4b1e      	ldr	r3, [pc, #120]	; (801ecd4 <__sfp+0x84>)
 801ec5a:	681e      	ldr	r6, [r3, #0]
 801ec5c:	69b3      	ldr	r3, [r6, #24]
 801ec5e:	b913      	cbnz	r3, 801ec66 <__sfp+0x16>
 801ec60:	4630      	mov	r0, r6
 801ec62:	f7ff ffbd 	bl	801ebe0 <__sinit>
 801ec66:	3648      	adds	r6, #72	; 0x48
 801ec68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ec6c:	3b01      	subs	r3, #1
 801ec6e:	d503      	bpl.n	801ec78 <__sfp+0x28>
 801ec70:	6833      	ldr	r3, [r6, #0]
 801ec72:	b30b      	cbz	r3, 801ecb8 <__sfp+0x68>
 801ec74:	6836      	ldr	r6, [r6, #0]
 801ec76:	e7f7      	b.n	801ec68 <__sfp+0x18>
 801ec78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ec7c:	b9d5      	cbnz	r5, 801ecb4 <__sfp+0x64>
 801ec7e:	4b16      	ldr	r3, [pc, #88]	; (801ecd8 <__sfp+0x88>)
 801ec80:	60e3      	str	r3, [r4, #12]
 801ec82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ec86:	6665      	str	r5, [r4, #100]	; 0x64
 801ec88:	f7fc ff64 	bl	801bb54 <__retarget_lock_init_recursive>
 801ec8c:	f7ff ff96 	bl	801ebbc <__sfp_lock_release>
 801ec90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ec94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ec98:	6025      	str	r5, [r4, #0]
 801ec9a:	61a5      	str	r5, [r4, #24]
 801ec9c:	2208      	movs	r2, #8
 801ec9e:	4629      	mov	r1, r5
 801eca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801eca4:	f7fc ff8a 	bl	801bbbc <memset>
 801eca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ecac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ecb0:	4620      	mov	r0, r4
 801ecb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ecb4:	3468      	adds	r4, #104	; 0x68
 801ecb6:	e7d9      	b.n	801ec6c <__sfp+0x1c>
 801ecb8:	2104      	movs	r1, #4
 801ecba:	4638      	mov	r0, r7
 801ecbc:	f7ff ff62 	bl	801eb84 <__sfmoreglue>
 801ecc0:	4604      	mov	r4, r0
 801ecc2:	6030      	str	r0, [r6, #0]
 801ecc4:	2800      	cmp	r0, #0
 801ecc6:	d1d5      	bne.n	801ec74 <__sfp+0x24>
 801ecc8:	f7ff ff78 	bl	801ebbc <__sfp_lock_release>
 801eccc:	230c      	movs	r3, #12
 801ecce:	603b      	str	r3, [r7, #0]
 801ecd0:	e7ee      	b.n	801ecb0 <__sfp+0x60>
 801ecd2:	bf00      	nop
 801ecd4:	08022b94 	.word	0x08022b94
 801ecd8:	ffff0001 	.word	0xffff0001

0801ecdc <fiprintf>:
 801ecdc:	b40e      	push	{r1, r2, r3}
 801ecde:	b503      	push	{r0, r1, lr}
 801ece0:	4601      	mov	r1, r0
 801ece2:	ab03      	add	r3, sp, #12
 801ece4:	4805      	ldr	r0, [pc, #20]	; (801ecfc <fiprintf+0x20>)
 801ece6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ecea:	6800      	ldr	r0, [r0, #0]
 801ecec:	9301      	str	r3, [sp, #4]
 801ecee:	f001 fa79 	bl	80201e4 <_vfiprintf_r>
 801ecf2:	b002      	add	sp, #8
 801ecf4:	f85d eb04 	ldr.w	lr, [sp], #4
 801ecf8:	b003      	add	sp, #12
 801ecfa:	4770      	bx	lr
 801ecfc:	20000164 	.word	0x20000164

0801ed00 <_fwalk_reent>:
 801ed00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ed04:	4606      	mov	r6, r0
 801ed06:	4688      	mov	r8, r1
 801ed08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ed0c:	2700      	movs	r7, #0
 801ed0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ed12:	f1b9 0901 	subs.w	r9, r9, #1
 801ed16:	d505      	bpl.n	801ed24 <_fwalk_reent+0x24>
 801ed18:	6824      	ldr	r4, [r4, #0]
 801ed1a:	2c00      	cmp	r4, #0
 801ed1c:	d1f7      	bne.n	801ed0e <_fwalk_reent+0xe>
 801ed1e:	4638      	mov	r0, r7
 801ed20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ed24:	89ab      	ldrh	r3, [r5, #12]
 801ed26:	2b01      	cmp	r3, #1
 801ed28:	d907      	bls.n	801ed3a <_fwalk_reent+0x3a>
 801ed2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ed2e:	3301      	adds	r3, #1
 801ed30:	d003      	beq.n	801ed3a <_fwalk_reent+0x3a>
 801ed32:	4629      	mov	r1, r5
 801ed34:	4630      	mov	r0, r6
 801ed36:	47c0      	blx	r8
 801ed38:	4307      	orrs	r7, r0
 801ed3a:	3568      	adds	r5, #104	; 0x68
 801ed3c:	e7e9      	b.n	801ed12 <_fwalk_reent+0x12>

0801ed3e <rshift>:
 801ed3e:	6903      	ldr	r3, [r0, #16]
 801ed40:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ed44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed48:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ed4c:	f100 0414 	add.w	r4, r0, #20
 801ed50:	dd45      	ble.n	801edde <rshift+0xa0>
 801ed52:	f011 011f 	ands.w	r1, r1, #31
 801ed56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ed5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ed5e:	d10c      	bne.n	801ed7a <rshift+0x3c>
 801ed60:	f100 0710 	add.w	r7, r0, #16
 801ed64:	4629      	mov	r1, r5
 801ed66:	42b1      	cmp	r1, r6
 801ed68:	d334      	bcc.n	801edd4 <rshift+0x96>
 801ed6a:	1a9b      	subs	r3, r3, r2
 801ed6c:	009b      	lsls	r3, r3, #2
 801ed6e:	1eea      	subs	r2, r5, #3
 801ed70:	4296      	cmp	r6, r2
 801ed72:	bf38      	it	cc
 801ed74:	2300      	movcc	r3, #0
 801ed76:	4423      	add	r3, r4
 801ed78:	e015      	b.n	801eda6 <rshift+0x68>
 801ed7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ed7e:	f1c1 0820 	rsb	r8, r1, #32
 801ed82:	40cf      	lsrs	r7, r1
 801ed84:	f105 0e04 	add.w	lr, r5, #4
 801ed88:	46a1      	mov	r9, r4
 801ed8a:	4576      	cmp	r6, lr
 801ed8c:	46f4      	mov	ip, lr
 801ed8e:	d815      	bhi.n	801edbc <rshift+0x7e>
 801ed90:	1a9a      	subs	r2, r3, r2
 801ed92:	0092      	lsls	r2, r2, #2
 801ed94:	3a04      	subs	r2, #4
 801ed96:	3501      	adds	r5, #1
 801ed98:	42ae      	cmp	r6, r5
 801ed9a:	bf38      	it	cc
 801ed9c:	2200      	movcc	r2, #0
 801ed9e:	18a3      	adds	r3, r4, r2
 801eda0:	50a7      	str	r7, [r4, r2]
 801eda2:	b107      	cbz	r7, 801eda6 <rshift+0x68>
 801eda4:	3304      	adds	r3, #4
 801eda6:	1b1a      	subs	r2, r3, r4
 801eda8:	42a3      	cmp	r3, r4
 801edaa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801edae:	bf08      	it	eq
 801edb0:	2300      	moveq	r3, #0
 801edb2:	6102      	str	r2, [r0, #16]
 801edb4:	bf08      	it	eq
 801edb6:	6143      	streq	r3, [r0, #20]
 801edb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edbc:	f8dc c000 	ldr.w	ip, [ip]
 801edc0:	fa0c fc08 	lsl.w	ip, ip, r8
 801edc4:	ea4c 0707 	orr.w	r7, ip, r7
 801edc8:	f849 7b04 	str.w	r7, [r9], #4
 801edcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 801edd0:	40cf      	lsrs	r7, r1
 801edd2:	e7da      	b.n	801ed8a <rshift+0x4c>
 801edd4:	f851 cb04 	ldr.w	ip, [r1], #4
 801edd8:	f847 cf04 	str.w	ip, [r7, #4]!
 801eddc:	e7c3      	b.n	801ed66 <rshift+0x28>
 801edde:	4623      	mov	r3, r4
 801ede0:	e7e1      	b.n	801eda6 <rshift+0x68>

0801ede2 <__hexdig_fun>:
 801ede2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ede6:	2b09      	cmp	r3, #9
 801ede8:	d802      	bhi.n	801edf0 <__hexdig_fun+0xe>
 801edea:	3820      	subs	r0, #32
 801edec:	b2c0      	uxtb	r0, r0
 801edee:	4770      	bx	lr
 801edf0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801edf4:	2b05      	cmp	r3, #5
 801edf6:	d801      	bhi.n	801edfc <__hexdig_fun+0x1a>
 801edf8:	3847      	subs	r0, #71	; 0x47
 801edfa:	e7f7      	b.n	801edec <__hexdig_fun+0xa>
 801edfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ee00:	2b05      	cmp	r3, #5
 801ee02:	d801      	bhi.n	801ee08 <__hexdig_fun+0x26>
 801ee04:	3827      	subs	r0, #39	; 0x27
 801ee06:	e7f1      	b.n	801edec <__hexdig_fun+0xa>
 801ee08:	2000      	movs	r0, #0
 801ee0a:	4770      	bx	lr

0801ee0c <__gethex>:
 801ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee10:	ed2d 8b02 	vpush	{d8}
 801ee14:	b089      	sub	sp, #36	; 0x24
 801ee16:	ee08 0a10 	vmov	s16, r0
 801ee1a:	9304      	str	r3, [sp, #16]
 801ee1c:	4bb4      	ldr	r3, [pc, #720]	; (801f0f0 <__gethex+0x2e4>)
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	9301      	str	r3, [sp, #4]
 801ee22:	4618      	mov	r0, r3
 801ee24:	468b      	mov	fp, r1
 801ee26:	4690      	mov	r8, r2
 801ee28:	f7e1 f9e4 	bl	80001f4 <strlen>
 801ee2c:	9b01      	ldr	r3, [sp, #4]
 801ee2e:	f8db 2000 	ldr.w	r2, [fp]
 801ee32:	4403      	add	r3, r0
 801ee34:	4682      	mov	sl, r0
 801ee36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ee3a:	9305      	str	r3, [sp, #20]
 801ee3c:	1c93      	adds	r3, r2, #2
 801ee3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801ee42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801ee46:	32fe      	adds	r2, #254	; 0xfe
 801ee48:	18d1      	adds	r1, r2, r3
 801ee4a:	461f      	mov	r7, r3
 801ee4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ee50:	9100      	str	r1, [sp, #0]
 801ee52:	2830      	cmp	r0, #48	; 0x30
 801ee54:	d0f8      	beq.n	801ee48 <__gethex+0x3c>
 801ee56:	f7ff ffc4 	bl	801ede2 <__hexdig_fun>
 801ee5a:	4604      	mov	r4, r0
 801ee5c:	2800      	cmp	r0, #0
 801ee5e:	d13a      	bne.n	801eed6 <__gethex+0xca>
 801ee60:	9901      	ldr	r1, [sp, #4]
 801ee62:	4652      	mov	r2, sl
 801ee64:	4638      	mov	r0, r7
 801ee66:	f001 fb3a 	bl	80204de <strncmp>
 801ee6a:	4605      	mov	r5, r0
 801ee6c:	2800      	cmp	r0, #0
 801ee6e:	d168      	bne.n	801ef42 <__gethex+0x136>
 801ee70:	f817 000a 	ldrb.w	r0, [r7, sl]
 801ee74:	eb07 060a 	add.w	r6, r7, sl
 801ee78:	f7ff ffb3 	bl	801ede2 <__hexdig_fun>
 801ee7c:	2800      	cmp	r0, #0
 801ee7e:	d062      	beq.n	801ef46 <__gethex+0x13a>
 801ee80:	4633      	mov	r3, r6
 801ee82:	7818      	ldrb	r0, [r3, #0]
 801ee84:	2830      	cmp	r0, #48	; 0x30
 801ee86:	461f      	mov	r7, r3
 801ee88:	f103 0301 	add.w	r3, r3, #1
 801ee8c:	d0f9      	beq.n	801ee82 <__gethex+0x76>
 801ee8e:	f7ff ffa8 	bl	801ede2 <__hexdig_fun>
 801ee92:	2301      	movs	r3, #1
 801ee94:	fab0 f480 	clz	r4, r0
 801ee98:	0964      	lsrs	r4, r4, #5
 801ee9a:	4635      	mov	r5, r6
 801ee9c:	9300      	str	r3, [sp, #0]
 801ee9e:	463a      	mov	r2, r7
 801eea0:	4616      	mov	r6, r2
 801eea2:	3201      	adds	r2, #1
 801eea4:	7830      	ldrb	r0, [r6, #0]
 801eea6:	f7ff ff9c 	bl	801ede2 <__hexdig_fun>
 801eeaa:	2800      	cmp	r0, #0
 801eeac:	d1f8      	bne.n	801eea0 <__gethex+0x94>
 801eeae:	9901      	ldr	r1, [sp, #4]
 801eeb0:	4652      	mov	r2, sl
 801eeb2:	4630      	mov	r0, r6
 801eeb4:	f001 fb13 	bl	80204de <strncmp>
 801eeb8:	b980      	cbnz	r0, 801eedc <__gethex+0xd0>
 801eeba:	b94d      	cbnz	r5, 801eed0 <__gethex+0xc4>
 801eebc:	eb06 050a 	add.w	r5, r6, sl
 801eec0:	462a      	mov	r2, r5
 801eec2:	4616      	mov	r6, r2
 801eec4:	3201      	adds	r2, #1
 801eec6:	7830      	ldrb	r0, [r6, #0]
 801eec8:	f7ff ff8b 	bl	801ede2 <__hexdig_fun>
 801eecc:	2800      	cmp	r0, #0
 801eece:	d1f8      	bne.n	801eec2 <__gethex+0xb6>
 801eed0:	1bad      	subs	r5, r5, r6
 801eed2:	00ad      	lsls	r5, r5, #2
 801eed4:	e004      	b.n	801eee0 <__gethex+0xd4>
 801eed6:	2400      	movs	r4, #0
 801eed8:	4625      	mov	r5, r4
 801eeda:	e7e0      	b.n	801ee9e <__gethex+0x92>
 801eedc:	2d00      	cmp	r5, #0
 801eede:	d1f7      	bne.n	801eed0 <__gethex+0xc4>
 801eee0:	7833      	ldrb	r3, [r6, #0]
 801eee2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801eee6:	2b50      	cmp	r3, #80	; 0x50
 801eee8:	d13b      	bne.n	801ef62 <__gethex+0x156>
 801eeea:	7873      	ldrb	r3, [r6, #1]
 801eeec:	2b2b      	cmp	r3, #43	; 0x2b
 801eeee:	d02c      	beq.n	801ef4a <__gethex+0x13e>
 801eef0:	2b2d      	cmp	r3, #45	; 0x2d
 801eef2:	d02e      	beq.n	801ef52 <__gethex+0x146>
 801eef4:	1c71      	adds	r1, r6, #1
 801eef6:	f04f 0900 	mov.w	r9, #0
 801eefa:	7808      	ldrb	r0, [r1, #0]
 801eefc:	f7ff ff71 	bl	801ede2 <__hexdig_fun>
 801ef00:	1e43      	subs	r3, r0, #1
 801ef02:	b2db      	uxtb	r3, r3
 801ef04:	2b18      	cmp	r3, #24
 801ef06:	d82c      	bhi.n	801ef62 <__gethex+0x156>
 801ef08:	f1a0 0210 	sub.w	r2, r0, #16
 801ef0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801ef10:	f7ff ff67 	bl	801ede2 <__hexdig_fun>
 801ef14:	1e43      	subs	r3, r0, #1
 801ef16:	b2db      	uxtb	r3, r3
 801ef18:	2b18      	cmp	r3, #24
 801ef1a:	d91d      	bls.n	801ef58 <__gethex+0x14c>
 801ef1c:	f1b9 0f00 	cmp.w	r9, #0
 801ef20:	d000      	beq.n	801ef24 <__gethex+0x118>
 801ef22:	4252      	negs	r2, r2
 801ef24:	4415      	add	r5, r2
 801ef26:	f8cb 1000 	str.w	r1, [fp]
 801ef2a:	b1e4      	cbz	r4, 801ef66 <__gethex+0x15a>
 801ef2c:	9b00      	ldr	r3, [sp, #0]
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	bf14      	ite	ne
 801ef32:	2700      	movne	r7, #0
 801ef34:	2706      	moveq	r7, #6
 801ef36:	4638      	mov	r0, r7
 801ef38:	b009      	add	sp, #36	; 0x24
 801ef3a:	ecbd 8b02 	vpop	{d8}
 801ef3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef42:	463e      	mov	r6, r7
 801ef44:	4625      	mov	r5, r4
 801ef46:	2401      	movs	r4, #1
 801ef48:	e7ca      	b.n	801eee0 <__gethex+0xd4>
 801ef4a:	f04f 0900 	mov.w	r9, #0
 801ef4e:	1cb1      	adds	r1, r6, #2
 801ef50:	e7d3      	b.n	801eefa <__gethex+0xee>
 801ef52:	f04f 0901 	mov.w	r9, #1
 801ef56:	e7fa      	b.n	801ef4e <__gethex+0x142>
 801ef58:	230a      	movs	r3, #10
 801ef5a:	fb03 0202 	mla	r2, r3, r2, r0
 801ef5e:	3a10      	subs	r2, #16
 801ef60:	e7d4      	b.n	801ef0c <__gethex+0x100>
 801ef62:	4631      	mov	r1, r6
 801ef64:	e7df      	b.n	801ef26 <__gethex+0x11a>
 801ef66:	1bf3      	subs	r3, r6, r7
 801ef68:	3b01      	subs	r3, #1
 801ef6a:	4621      	mov	r1, r4
 801ef6c:	2b07      	cmp	r3, #7
 801ef6e:	dc0b      	bgt.n	801ef88 <__gethex+0x17c>
 801ef70:	ee18 0a10 	vmov	r0, s16
 801ef74:	f000 fada 	bl	801f52c <_Balloc>
 801ef78:	4604      	mov	r4, r0
 801ef7a:	b940      	cbnz	r0, 801ef8e <__gethex+0x182>
 801ef7c:	4b5d      	ldr	r3, [pc, #372]	; (801f0f4 <__gethex+0x2e8>)
 801ef7e:	4602      	mov	r2, r0
 801ef80:	21de      	movs	r1, #222	; 0xde
 801ef82:	485d      	ldr	r0, [pc, #372]	; (801f0f8 <__gethex+0x2ec>)
 801ef84:	f7fe fe78 	bl	801dc78 <__assert_func>
 801ef88:	3101      	adds	r1, #1
 801ef8a:	105b      	asrs	r3, r3, #1
 801ef8c:	e7ee      	b.n	801ef6c <__gethex+0x160>
 801ef8e:	f100 0914 	add.w	r9, r0, #20
 801ef92:	f04f 0b00 	mov.w	fp, #0
 801ef96:	f1ca 0301 	rsb	r3, sl, #1
 801ef9a:	f8cd 9008 	str.w	r9, [sp, #8]
 801ef9e:	f8cd b000 	str.w	fp, [sp]
 801efa2:	9306      	str	r3, [sp, #24]
 801efa4:	42b7      	cmp	r7, r6
 801efa6:	d340      	bcc.n	801f02a <__gethex+0x21e>
 801efa8:	9802      	ldr	r0, [sp, #8]
 801efaa:	9b00      	ldr	r3, [sp, #0]
 801efac:	f840 3b04 	str.w	r3, [r0], #4
 801efb0:	eba0 0009 	sub.w	r0, r0, r9
 801efb4:	1080      	asrs	r0, r0, #2
 801efb6:	0146      	lsls	r6, r0, #5
 801efb8:	6120      	str	r0, [r4, #16]
 801efba:	4618      	mov	r0, r3
 801efbc:	f000 fba8 	bl	801f710 <__hi0bits>
 801efc0:	1a30      	subs	r0, r6, r0
 801efc2:	f8d8 6000 	ldr.w	r6, [r8]
 801efc6:	42b0      	cmp	r0, r6
 801efc8:	dd63      	ble.n	801f092 <__gethex+0x286>
 801efca:	1b87      	subs	r7, r0, r6
 801efcc:	4639      	mov	r1, r7
 801efce:	4620      	mov	r0, r4
 801efd0:	f000 ff4c 	bl	801fe6c <__any_on>
 801efd4:	4682      	mov	sl, r0
 801efd6:	b1a8      	cbz	r0, 801f004 <__gethex+0x1f8>
 801efd8:	1e7b      	subs	r3, r7, #1
 801efda:	1159      	asrs	r1, r3, #5
 801efdc:	f003 021f 	and.w	r2, r3, #31
 801efe0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801efe4:	f04f 0a01 	mov.w	sl, #1
 801efe8:	fa0a f202 	lsl.w	r2, sl, r2
 801efec:	420a      	tst	r2, r1
 801efee:	d009      	beq.n	801f004 <__gethex+0x1f8>
 801eff0:	4553      	cmp	r3, sl
 801eff2:	dd05      	ble.n	801f000 <__gethex+0x1f4>
 801eff4:	1eb9      	subs	r1, r7, #2
 801eff6:	4620      	mov	r0, r4
 801eff8:	f000 ff38 	bl	801fe6c <__any_on>
 801effc:	2800      	cmp	r0, #0
 801effe:	d145      	bne.n	801f08c <__gethex+0x280>
 801f000:	f04f 0a02 	mov.w	sl, #2
 801f004:	4639      	mov	r1, r7
 801f006:	4620      	mov	r0, r4
 801f008:	f7ff fe99 	bl	801ed3e <rshift>
 801f00c:	443d      	add	r5, r7
 801f00e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f012:	42ab      	cmp	r3, r5
 801f014:	da4c      	bge.n	801f0b0 <__gethex+0x2a4>
 801f016:	ee18 0a10 	vmov	r0, s16
 801f01a:	4621      	mov	r1, r4
 801f01c:	f000 fac6 	bl	801f5ac <_Bfree>
 801f020:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f022:	2300      	movs	r3, #0
 801f024:	6013      	str	r3, [r2, #0]
 801f026:	27a3      	movs	r7, #163	; 0xa3
 801f028:	e785      	b.n	801ef36 <__gethex+0x12a>
 801f02a:	1e73      	subs	r3, r6, #1
 801f02c:	9a05      	ldr	r2, [sp, #20]
 801f02e:	9303      	str	r3, [sp, #12]
 801f030:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f034:	4293      	cmp	r3, r2
 801f036:	d019      	beq.n	801f06c <__gethex+0x260>
 801f038:	f1bb 0f20 	cmp.w	fp, #32
 801f03c:	d107      	bne.n	801f04e <__gethex+0x242>
 801f03e:	9b02      	ldr	r3, [sp, #8]
 801f040:	9a00      	ldr	r2, [sp, #0]
 801f042:	f843 2b04 	str.w	r2, [r3], #4
 801f046:	9302      	str	r3, [sp, #8]
 801f048:	2300      	movs	r3, #0
 801f04a:	9300      	str	r3, [sp, #0]
 801f04c:	469b      	mov	fp, r3
 801f04e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801f052:	f7ff fec6 	bl	801ede2 <__hexdig_fun>
 801f056:	9b00      	ldr	r3, [sp, #0]
 801f058:	f000 000f 	and.w	r0, r0, #15
 801f05c:	fa00 f00b 	lsl.w	r0, r0, fp
 801f060:	4303      	orrs	r3, r0
 801f062:	9300      	str	r3, [sp, #0]
 801f064:	f10b 0b04 	add.w	fp, fp, #4
 801f068:	9b03      	ldr	r3, [sp, #12]
 801f06a:	e00d      	b.n	801f088 <__gethex+0x27c>
 801f06c:	9b03      	ldr	r3, [sp, #12]
 801f06e:	9a06      	ldr	r2, [sp, #24]
 801f070:	4413      	add	r3, r2
 801f072:	42bb      	cmp	r3, r7
 801f074:	d3e0      	bcc.n	801f038 <__gethex+0x22c>
 801f076:	4618      	mov	r0, r3
 801f078:	9901      	ldr	r1, [sp, #4]
 801f07a:	9307      	str	r3, [sp, #28]
 801f07c:	4652      	mov	r2, sl
 801f07e:	f001 fa2e 	bl	80204de <strncmp>
 801f082:	9b07      	ldr	r3, [sp, #28]
 801f084:	2800      	cmp	r0, #0
 801f086:	d1d7      	bne.n	801f038 <__gethex+0x22c>
 801f088:	461e      	mov	r6, r3
 801f08a:	e78b      	b.n	801efa4 <__gethex+0x198>
 801f08c:	f04f 0a03 	mov.w	sl, #3
 801f090:	e7b8      	b.n	801f004 <__gethex+0x1f8>
 801f092:	da0a      	bge.n	801f0aa <__gethex+0x29e>
 801f094:	1a37      	subs	r7, r6, r0
 801f096:	4621      	mov	r1, r4
 801f098:	ee18 0a10 	vmov	r0, s16
 801f09c:	463a      	mov	r2, r7
 801f09e:	f000 fca1 	bl	801f9e4 <__lshift>
 801f0a2:	1bed      	subs	r5, r5, r7
 801f0a4:	4604      	mov	r4, r0
 801f0a6:	f100 0914 	add.w	r9, r0, #20
 801f0aa:	f04f 0a00 	mov.w	sl, #0
 801f0ae:	e7ae      	b.n	801f00e <__gethex+0x202>
 801f0b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f0b4:	42a8      	cmp	r0, r5
 801f0b6:	dd72      	ble.n	801f19e <__gethex+0x392>
 801f0b8:	1b45      	subs	r5, r0, r5
 801f0ba:	42ae      	cmp	r6, r5
 801f0bc:	dc36      	bgt.n	801f12c <__gethex+0x320>
 801f0be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f0c2:	2b02      	cmp	r3, #2
 801f0c4:	d02a      	beq.n	801f11c <__gethex+0x310>
 801f0c6:	2b03      	cmp	r3, #3
 801f0c8:	d02c      	beq.n	801f124 <__gethex+0x318>
 801f0ca:	2b01      	cmp	r3, #1
 801f0cc:	d11c      	bne.n	801f108 <__gethex+0x2fc>
 801f0ce:	42ae      	cmp	r6, r5
 801f0d0:	d11a      	bne.n	801f108 <__gethex+0x2fc>
 801f0d2:	2e01      	cmp	r6, #1
 801f0d4:	d112      	bne.n	801f0fc <__gethex+0x2f0>
 801f0d6:	9a04      	ldr	r2, [sp, #16]
 801f0d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f0dc:	6013      	str	r3, [r2, #0]
 801f0de:	2301      	movs	r3, #1
 801f0e0:	6123      	str	r3, [r4, #16]
 801f0e2:	f8c9 3000 	str.w	r3, [r9]
 801f0e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f0e8:	2762      	movs	r7, #98	; 0x62
 801f0ea:	601c      	str	r4, [r3, #0]
 801f0ec:	e723      	b.n	801ef36 <__gethex+0x12a>
 801f0ee:	bf00      	nop
 801f0f0:	08022f1c 	.word	0x08022f1c
 801f0f4:	08022e41 	.word	0x08022e41
 801f0f8:	08022eb4 	.word	0x08022eb4
 801f0fc:	1e71      	subs	r1, r6, #1
 801f0fe:	4620      	mov	r0, r4
 801f100:	f000 feb4 	bl	801fe6c <__any_on>
 801f104:	2800      	cmp	r0, #0
 801f106:	d1e6      	bne.n	801f0d6 <__gethex+0x2ca>
 801f108:	ee18 0a10 	vmov	r0, s16
 801f10c:	4621      	mov	r1, r4
 801f10e:	f000 fa4d 	bl	801f5ac <_Bfree>
 801f112:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f114:	2300      	movs	r3, #0
 801f116:	6013      	str	r3, [r2, #0]
 801f118:	2750      	movs	r7, #80	; 0x50
 801f11a:	e70c      	b.n	801ef36 <__gethex+0x12a>
 801f11c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d1f2      	bne.n	801f108 <__gethex+0x2fc>
 801f122:	e7d8      	b.n	801f0d6 <__gethex+0x2ca>
 801f124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f126:	2b00      	cmp	r3, #0
 801f128:	d1d5      	bne.n	801f0d6 <__gethex+0x2ca>
 801f12a:	e7ed      	b.n	801f108 <__gethex+0x2fc>
 801f12c:	1e6f      	subs	r7, r5, #1
 801f12e:	f1ba 0f00 	cmp.w	sl, #0
 801f132:	d131      	bne.n	801f198 <__gethex+0x38c>
 801f134:	b127      	cbz	r7, 801f140 <__gethex+0x334>
 801f136:	4639      	mov	r1, r7
 801f138:	4620      	mov	r0, r4
 801f13a:	f000 fe97 	bl	801fe6c <__any_on>
 801f13e:	4682      	mov	sl, r0
 801f140:	117b      	asrs	r3, r7, #5
 801f142:	2101      	movs	r1, #1
 801f144:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f148:	f007 071f 	and.w	r7, r7, #31
 801f14c:	fa01 f707 	lsl.w	r7, r1, r7
 801f150:	421f      	tst	r7, r3
 801f152:	4629      	mov	r1, r5
 801f154:	4620      	mov	r0, r4
 801f156:	bf18      	it	ne
 801f158:	f04a 0a02 	orrne.w	sl, sl, #2
 801f15c:	1b76      	subs	r6, r6, r5
 801f15e:	f7ff fdee 	bl	801ed3e <rshift>
 801f162:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f166:	2702      	movs	r7, #2
 801f168:	f1ba 0f00 	cmp.w	sl, #0
 801f16c:	d048      	beq.n	801f200 <__gethex+0x3f4>
 801f16e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f172:	2b02      	cmp	r3, #2
 801f174:	d015      	beq.n	801f1a2 <__gethex+0x396>
 801f176:	2b03      	cmp	r3, #3
 801f178:	d017      	beq.n	801f1aa <__gethex+0x39e>
 801f17a:	2b01      	cmp	r3, #1
 801f17c:	d109      	bne.n	801f192 <__gethex+0x386>
 801f17e:	f01a 0f02 	tst.w	sl, #2
 801f182:	d006      	beq.n	801f192 <__gethex+0x386>
 801f184:	f8d9 0000 	ldr.w	r0, [r9]
 801f188:	ea4a 0a00 	orr.w	sl, sl, r0
 801f18c:	f01a 0f01 	tst.w	sl, #1
 801f190:	d10e      	bne.n	801f1b0 <__gethex+0x3a4>
 801f192:	f047 0710 	orr.w	r7, r7, #16
 801f196:	e033      	b.n	801f200 <__gethex+0x3f4>
 801f198:	f04f 0a01 	mov.w	sl, #1
 801f19c:	e7d0      	b.n	801f140 <__gethex+0x334>
 801f19e:	2701      	movs	r7, #1
 801f1a0:	e7e2      	b.n	801f168 <__gethex+0x35c>
 801f1a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f1a4:	f1c3 0301 	rsb	r3, r3, #1
 801f1a8:	9315      	str	r3, [sp, #84]	; 0x54
 801f1aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d0f0      	beq.n	801f192 <__gethex+0x386>
 801f1b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f1b4:	f104 0314 	add.w	r3, r4, #20
 801f1b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801f1bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801f1c0:	f04f 0c00 	mov.w	ip, #0
 801f1c4:	4618      	mov	r0, r3
 801f1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801f1ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 801f1ce:	d01c      	beq.n	801f20a <__gethex+0x3fe>
 801f1d0:	3201      	adds	r2, #1
 801f1d2:	6002      	str	r2, [r0, #0]
 801f1d4:	2f02      	cmp	r7, #2
 801f1d6:	f104 0314 	add.w	r3, r4, #20
 801f1da:	d13f      	bne.n	801f25c <__gethex+0x450>
 801f1dc:	f8d8 2000 	ldr.w	r2, [r8]
 801f1e0:	3a01      	subs	r2, #1
 801f1e2:	42b2      	cmp	r2, r6
 801f1e4:	d10a      	bne.n	801f1fc <__gethex+0x3f0>
 801f1e6:	1171      	asrs	r1, r6, #5
 801f1e8:	2201      	movs	r2, #1
 801f1ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f1ee:	f006 061f 	and.w	r6, r6, #31
 801f1f2:	fa02 f606 	lsl.w	r6, r2, r6
 801f1f6:	421e      	tst	r6, r3
 801f1f8:	bf18      	it	ne
 801f1fa:	4617      	movne	r7, r2
 801f1fc:	f047 0720 	orr.w	r7, r7, #32
 801f200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f202:	601c      	str	r4, [r3, #0]
 801f204:	9b04      	ldr	r3, [sp, #16]
 801f206:	601d      	str	r5, [r3, #0]
 801f208:	e695      	b.n	801ef36 <__gethex+0x12a>
 801f20a:	4299      	cmp	r1, r3
 801f20c:	f843 cc04 	str.w	ip, [r3, #-4]
 801f210:	d8d8      	bhi.n	801f1c4 <__gethex+0x3b8>
 801f212:	68a3      	ldr	r3, [r4, #8]
 801f214:	459b      	cmp	fp, r3
 801f216:	db19      	blt.n	801f24c <__gethex+0x440>
 801f218:	6861      	ldr	r1, [r4, #4]
 801f21a:	ee18 0a10 	vmov	r0, s16
 801f21e:	3101      	adds	r1, #1
 801f220:	f000 f984 	bl	801f52c <_Balloc>
 801f224:	4681      	mov	r9, r0
 801f226:	b918      	cbnz	r0, 801f230 <__gethex+0x424>
 801f228:	4b1a      	ldr	r3, [pc, #104]	; (801f294 <__gethex+0x488>)
 801f22a:	4602      	mov	r2, r0
 801f22c:	2184      	movs	r1, #132	; 0x84
 801f22e:	e6a8      	b.n	801ef82 <__gethex+0x176>
 801f230:	6922      	ldr	r2, [r4, #16]
 801f232:	3202      	adds	r2, #2
 801f234:	f104 010c 	add.w	r1, r4, #12
 801f238:	0092      	lsls	r2, r2, #2
 801f23a:	300c      	adds	r0, #12
 801f23c:	f7fc fc96 	bl	801bb6c <memcpy>
 801f240:	4621      	mov	r1, r4
 801f242:	ee18 0a10 	vmov	r0, s16
 801f246:	f000 f9b1 	bl	801f5ac <_Bfree>
 801f24a:	464c      	mov	r4, r9
 801f24c:	6923      	ldr	r3, [r4, #16]
 801f24e:	1c5a      	adds	r2, r3, #1
 801f250:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f254:	6122      	str	r2, [r4, #16]
 801f256:	2201      	movs	r2, #1
 801f258:	615a      	str	r2, [r3, #20]
 801f25a:	e7bb      	b.n	801f1d4 <__gethex+0x3c8>
 801f25c:	6922      	ldr	r2, [r4, #16]
 801f25e:	455a      	cmp	r2, fp
 801f260:	dd0b      	ble.n	801f27a <__gethex+0x46e>
 801f262:	2101      	movs	r1, #1
 801f264:	4620      	mov	r0, r4
 801f266:	f7ff fd6a 	bl	801ed3e <rshift>
 801f26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f26e:	3501      	adds	r5, #1
 801f270:	42ab      	cmp	r3, r5
 801f272:	f6ff aed0 	blt.w	801f016 <__gethex+0x20a>
 801f276:	2701      	movs	r7, #1
 801f278:	e7c0      	b.n	801f1fc <__gethex+0x3f0>
 801f27a:	f016 061f 	ands.w	r6, r6, #31
 801f27e:	d0fa      	beq.n	801f276 <__gethex+0x46a>
 801f280:	4453      	add	r3, sl
 801f282:	f1c6 0620 	rsb	r6, r6, #32
 801f286:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801f28a:	f000 fa41 	bl	801f710 <__hi0bits>
 801f28e:	42b0      	cmp	r0, r6
 801f290:	dbe7      	blt.n	801f262 <__gethex+0x456>
 801f292:	e7f0      	b.n	801f276 <__gethex+0x46a>
 801f294:	08022e41 	.word	0x08022e41

0801f298 <L_shift>:
 801f298:	f1c2 0208 	rsb	r2, r2, #8
 801f29c:	0092      	lsls	r2, r2, #2
 801f29e:	b570      	push	{r4, r5, r6, lr}
 801f2a0:	f1c2 0620 	rsb	r6, r2, #32
 801f2a4:	6843      	ldr	r3, [r0, #4]
 801f2a6:	6804      	ldr	r4, [r0, #0]
 801f2a8:	fa03 f506 	lsl.w	r5, r3, r6
 801f2ac:	432c      	orrs	r4, r5
 801f2ae:	40d3      	lsrs	r3, r2
 801f2b0:	6004      	str	r4, [r0, #0]
 801f2b2:	f840 3f04 	str.w	r3, [r0, #4]!
 801f2b6:	4288      	cmp	r0, r1
 801f2b8:	d3f4      	bcc.n	801f2a4 <L_shift+0xc>
 801f2ba:	bd70      	pop	{r4, r5, r6, pc}

0801f2bc <__match>:
 801f2bc:	b530      	push	{r4, r5, lr}
 801f2be:	6803      	ldr	r3, [r0, #0]
 801f2c0:	3301      	adds	r3, #1
 801f2c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f2c6:	b914      	cbnz	r4, 801f2ce <__match+0x12>
 801f2c8:	6003      	str	r3, [r0, #0]
 801f2ca:	2001      	movs	r0, #1
 801f2cc:	bd30      	pop	{r4, r5, pc}
 801f2ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f2d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801f2d6:	2d19      	cmp	r5, #25
 801f2d8:	bf98      	it	ls
 801f2da:	3220      	addls	r2, #32
 801f2dc:	42a2      	cmp	r2, r4
 801f2de:	d0f0      	beq.n	801f2c2 <__match+0x6>
 801f2e0:	2000      	movs	r0, #0
 801f2e2:	e7f3      	b.n	801f2cc <__match+0x10>

0801f2e4 <__hexnan>:
 801f2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e8:	680b      	ldr	r3, [r1, #0]
 801f2ea:	115e      	asrs	r6, r3, #5
 801f2ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801f2f0:	f013 031f 	ands.w	r3, r3, #31
 801f2f4:	b087      	sub	sp, #28
 801f2f6:	bf18      	it	ne
 801f2f8:	3604      	addne	r6, #4
 801f2fa:	2500      	movs	r5, #0
 801f2fc:	1f37      	subs	r7, r6, #4
 801f2fe:	4690      	mov	r8, r2
 801f300:	6802      	ldr	r2, [r0, #0]
 801f302:	9301      	str	r3, [sp, #4]
 801f304:	4682      	mov	sl, r0
 801f306:	f846 5c04 	str.w	r5, [r6, #-4]
 801f30a:	46b9      	mov	r9, r7
 801f30c:	463c      	mov	r4, r7
 801f30e:	9502      	str	r5, [sp, #8]
 801f310:	46ab      	mov	fp, r5
 801f312:	7851      	ldrb	r1, [r2, #1]
 801f314:	1c53      	adds	r3, r2, #1
 801f316:	9303      	str	r3, [sp, #12]
 801f318:	b341      	cbz	r1, 801f36c <__hexnan+0x88>
 801f31a:	4608      	mov	r0, r1
 801f31c:	9205      	str	r2, [sp, #20]
 801f31e:	9104      	str	r1, [sp, #16]
 801f320:	f7ff fd5f 	bl	801ede2 <__hexdig_fun>
 801f324:	2800      	cmp	r0, #0
 801f326:	d14f      	bne.n	801f3c8 <__hexnan+0xe4>
 801f328:	9904      	ldr	r1, [sp, #16]
 801f32a:	9a05      	ldr	r2, [sp, #20]
 801f32c:	2920      	cmp	r1, #32
 801f32e:	d818      	bhi.n	801f362 <__hexnan+0x7e>
 801f330:	9b02      	ldr	r3, [sp, #8]
 801f332:	459b      	cmp	fp, r3
 801f334:	dd13      	ble.n	801f35e <__hexnan+0x7a>
 801f336:	454c      	cmp	r4, r9
 801f338:	d206      	bcs.n	801f348 <__hexnan+0x64>
 801f33a:	2d07      	cmp	r5, #7
 801f33c:	dc04      	bgt.n	801f348 <__hexnan+0x64>
 801f33e:	462a      	mov	r2, r5
 801f340:	4649      	mov	r1, r9
 801f342:	4620      	mov	r0, r4
 801f344:	f7ff ffa8 	bl	801f298 <L_shift>
 801f348:	4544      	cmp	r4, r8
 801f34a:	d950      	bls.n	801f3ee <__hexnan+0x10a>
 801f34c:	2300      	movs	r3, #0
 801f34e:	f1a4 0904 	sub.w	r9, r4, #4
 801f352:	f844 3c04 	str.w	r3, [r4, #-4]
 801f356:	f8cd b008 	str.w	fp, [sp, #8]
 801f35a:	464c      	mov	r4, r9
 801f35c:	461d      	mov	r5, r3
 801f35e:	9a03      	ldr	r2, [sp, #12]
 801f360:	e7d7      	b.n	801f312 <__hexnan+0x2e>
 801f362:	2929      	cmp	r1, #41	; 0x29
 801f364:	d156      	bne.n	801f414 <__hexnan+0x130>
 801f366:	3202      	adds	r2, #2
 801f368:	f8ca 2000 	str.w	r2, [sl]
 801f36c:	f1bb 0f00 	cmp.w	fp, #0
 801f370:	d050      	beq.n	801f414 <__hexnan+0x130>
 801f372:	454c      	cmp	r4, r9
 801f374:	d206      	bcs.n	801f384 <__hexnan+0xa0>
 801f376:	2d07      	cmp	r5, #7
 801f378:	dc04      	bgt.n	801f384 <__hexnan+0xa0>
 801f37a:	462a      	mov	r2, r5
 801f37c:	4649      	mov	r1, r9
 801f37e:	4620      	mov	r0, r4
 801f380:	f7ff ff8a 	bl	801f298 <L_shift>
 801f384:	4544      	cmp	r4, r8
 801f386:	d934      	bls.n	801f3f2 <__hexnan+0x10e>
 801f388:	f1a8 0204 	sub.w	r2, r8, #4
 801f38c:	4623      	mov	r3, r4
 801f38e:	f853 1b04 	ldr.w	r1, [r3], #4
 801f392:	f842 1f04 	str.w	r1, [r2, #4]!
 801f396:	429f      	cmp	r7, r3
 801f398:	d2f9      	bcs.n	801f38e <__hexnan+0xaa>
 801f39a:	1b3b      	subs	r3, r7, r4
 801f39c:	f023 0303 	bic.w	r3, r3, #3
 801f3a0:	3304      	adds	r3, #4
 801f3a2:	3401      	adds	r4, #1
 801f3a4:	3e03      	subs	r6, #3
 801f3a6:	42b4      	cmp	r4, r6
 801f3a8:	bf88      	it	hi
 801f3aa:	2304      	movhi	r3, #4
 801f3ac:	4443      	add	r3, r8
 801f3ae:	2200      	movs	r2, #0
 801f3b0:	f843 2b04 	str.w	r2, [r3], #4
 801f3b4:	429f      	cmp	r7, r3
 801f3b6:	d2fb      	bcs.n	801f3b0 <__hexnan+0xcc>
 801f3b8:	683b      	ldr	r3, [r7, #0]
 801f3ba:	b91b      	cbnz	r3, 801f3c4 <__hexnan+0xe0>
 801f3bc:	4547      	cmp	r7, r8
 801f3be:	d127      	bne.n	801f410 <__hexnan+0x12c>
 801f3c0:	2301      	movs	r3, #1
 801f3c2:	603b      	str	r3, [r7, #0]
 801f3c4:	2005      	movs	r0, #5
 801f3c6:	e026      	b.n	801f416 <__hexnan+0x132>
 801f3c8:	3501      	adds	r5, #1
 801f3ca:	2d08      	cmp	r5, #8
 801f3cc:	f10b 0b01 	add.w	fp, fp, #1
 801f3d0:	dd06      	ble.n	801f3e0 <__hexnan+0xfc>
 801f3d2:	4544      	cmp	r4, r8
 801f3d4:	d9c3      	bls.n	801f35e <__hexnan+0x7a>
 801f3d6:	2300      	movs	r3, #0
 801f3d8:	f844 3c04 	str.w	r3, [r4, #-4]
 801f3dc:	2501      	movs	r5, #1
 801f3de:	3c04      	subs	r4, #4
 801f3e0:	6822      	ldr	r2, [r4, #0]
 801f3e2:	f000 000f 	and.w	r0, r0, #15
 801f3e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801f3ea:	6022      	str	r2, [r4, #0]
 801f3ec:	e7b7      	b.n	801f35e <__hexnan+0x7a>
 801f3ee:	2508      	movs	r5, #8
 801f3f0:	e7b5      	b.n	801f35e <__hexnan+0x7a>
 801f3f2:	9b01      	ldr	r3, [sp, #4]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d0df      	beq.n	801f3b8 <__hexnan+0xd4>
 801f3f8:	f04f 32ff 	mov.w	r2, #4294967295
 801f3fc:	f1c3 0320 	rsb	r3, r3, #32
 801f400:	fa22 f303 	lsr.w	r3, r2, r3
 801f404:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f408:	401a      	ands	r2, r3
 801f40a:	f846 2c04 	str.w	r2, [r6, #-4]
 801f40e:	e7d3      	b.n	801f3b8 <__hexnan+0xd4>
 801f410:	3f04      	subs	r7, #4
 801f412:	e7d1      	b.n	801f3b8 <__hexnan+0xd4>
 801f414:	2004      	movs	r0, #4
 801f416:	b007      	add	sp, #28
 801f418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f41c <_localeconv_r>:
 801f41c:	4800      	ldr	r0, [pc, #0]	; (801f420 <_localeconv_r+0x4>)
 801f41e:	4770      	bx	lr
 801f420:	200002bc 	.word	0x200002bc

0801f424 <__swhatbuf_r>:
 801f424:	b570      	push	{r4, r5, r6, lr}
 801f426:	460e      	mov	r6, r1
 801f428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f42c:	2900      	cmp	r1, #0
 801f42e:	b096      	sub	sp, #88	; 0x58
 801f430:	4614      	mov	r4, r2
 801f432:	461d      	mov	r5, r3
 801f434:	da08      	bge.n	801f448 <__swhatbuf_r+0x24>
 801f436:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f43a:	2200      	movs	r2, #0
 801f43c:	602a      	str	r2, [r5, #0]
 801f43e:	061a      	lsls	r2, r3, #24
 801f440:	d410      	bmi.n	801f464 <__swhatbuf_r+0x40>
 801f442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f446:	e00e      	b.n	801f466 <__swhatbuf_r+0x42>
 801f448:	466a      	mov	r2, sp
 801f44a:	f001 f893 	bl	8020574 <_fstat_r>
 801f44e:	2800      	cmp	r0, #0
 801f450:	dbf1      	blt.n	801f436 <__swhatbuf_r+0x12>
 801f452:	9a01      	ldr	r2, [sp, #4]
 801f454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f45c:	425a      	negs	r2, r3
 801f45e:	415a      	adcs	r2, r3
 801f460:	602a      	str	r2, [r5, #0]
 801f462:	e7ee      	b.n	801f442 <__swhatbuf_r+0x1e>
 801f464:	2340      	movs	r3, #64	; 0x40
 801f466:	2000      	movs	r0, #0
 801f468:	6023      	str	r3, [r4, #0]
 801f46a:	b016      	add	sp, #88	; 0x58
 801f46c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f470 <__smakebuf_r>:
 801f470:	898b      	ldrh	r3, [r1, #12]
 801f472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f474:	079d      	lsls	r5, r3, #30
 801f476:	4606      	mov	r6, r0
 801f478:	460c      	mov	r4, r1
 801f47a:	d507      	bpl.n	801f48c <__smakebuf_r+0x1c>
 801f47c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f480:	6023      	str	r3, [r4, #0]
 801f482:	6123      	str	r3, [r4, #16]
 801f484:	2301      	movs	r3, #1
 801f486:	6163      	str	r3, [r4, #20]
 801f488:	b002      	add	sp, #8
 801f48a:	bd70      	pop	{r4, r5, r6, pc}
 801f48c:	ab01      	add	r3, sp, #4
 801f48e:	466a      	mov	r2, sp
 801f490:	f7ff ffc8 	bl	801f424 <__swhatbuf_r>
 801f494:	9900      	ldr	r1, [sp, #0]
 801f496:	4605      	mov	r5, r0
 801f498:	4630      	mov	r0, r6
 801f49a:	f7fc fc03 	bl	801bca4 <_malloc_r>
 801f49e:	b948      	cbnz	r0, 801f4b4 <__smakebuf_r+0x44>
 801f4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4a4:	059a      	lsls	r2, r3, #22
 801f4a6:	d4ef      	bmi.n	801f488 <__smakebuf_r+0x18>
 801f4a8:	f023 0303 	bic.w	r3, r3, #3
 801f4ac:	f043 0302 	orr.w	r3, r3, #2
 801f4b0:	81a3      	strh	r3, [r4, #12]
 801f4b2:	e7e3      	b.n	801f47c <__smakebuf_r+0xc>
 801f4b4:	4b0d      	ldr	r3, [pc, #52]	; (801f4ec <__smakebuf_r+0x7c>)
 801f4b6:	62b3      	str	r3, [r6, #40]	; 0x28
 801f4b8:	89a3      	ldrh	r3, [r4, #12]
 801f4ba:	6020      	str	r0, [r4, #0]
 801f4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f4c0:	81a3      	strh	r3, [r4, #12]
 801f4c2:	9b00      	ldr	r3, [sp, #0]
 801f4c4:	6163      	str	r3, [r4, #20]
 801f4c6:	9b01      	ldr	r3, [sp, #4]
 801f4c8:	6120      	str	r0, [r4, #16]
 801f4ca:	b15b      	cbz	r3, 801f4e4 <__smakebuf_r+0x74>
 801f4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f4d0:	4630      	mov	r0, r6
 801f4d2:	f001 f861 	bl	8020598 <_isatty_r>
 801f4d6:	b128      	cbz	r0, 801f4e4 <__smakebuf_r+0x74>
 801f4d8:	89a3      	ldrh	r3, [r4, #12]
 801f4da:	f023 0303 	bic.w	r3, r3, #3
 801f4de:	f043 0301 	orr.w	r3, r3, #1
 801f4e2:	81a3      	strh	r3, [r4, #12]
 801f4e4:	89a0      	ldrh	r0, [r4, #12]
 801f4e6:	4305      	orrs	r5, r0
 801f4e8:	81a5      	strh	r5, [r4, #12]
 801f4ea:	e7cd      	b.n	801f488 <__smakebuf_r+0x18>
 801f4ec:	0801eb79 	.word	0x0801eb79

0801f4f0 <__ascii_mbtowc>:
 801f4f0:	b082      	sub	sp, #8
 801f4f2:	b901      	cbnz	r1, 801f4f6 <__ascii_mbtowc+0x6>
 801f4f4:	a901      	add	r1, sp, #4
 801f4f6:	b142      	cbz	r2, 801f50a <__ascii_mbtowc+0x1a>
 801f4f8:	b14b      	cbz	r3, 801f50e <__ascii_mbtowc+0x1e>
 801f4fa:	7813      	ldrb	r3, [r2, #0]
 801f4fc:	600b      	str	r3, [r1, #0]
 801f4fe:	7812      	ldrb	r2, [r2, #0]
 801f500:	1e10      	subs	r0, r2, #0
 801f502:	bf18      	it	ne
 801f504:	2001      	movne	r0, #1
 801f506:	b002      	add	sp, #8
 801f508:	4770      	bx	lr
 801f50a:	4610      	mov	r0, r2
 801f50c:	e7fb      	b.n	801f506 <__ascii_mbtowc+0x16>
 801f50e:	f06f 0001 	mvn.w	r0, #1
 801f512:	e7f8      	b.n	801f506 <__ascii_mbtowc+0x16>

0801f514 <__malloc_lock>:
 801f514:	4801      	ldr	r0, [pc, #4]	; (801f51c <__malloc_lock+0x8>)
 801f516:	f7fc bb1e 	b.w	801bb56 <__retarget_lock_acquire_recursive>
 801f51a:	bf00      	nop
 801f51c:	20003698 	.word	0x20003698

0801f520 <__malloc_unlock>:
 801f520:	4801      	ldr	r0, [pc, #4]	; (801f528 <__malloc_unlock+0x8>)
 801f522:	f7fc bb19 	b.w	801bb58 <__retarget_lock_release_recursive>
 801f526:	bf00      	nop
 801f528:	20003698 	.word	0x20003698

0801f52c <_Balloc>:
 801f52c:	b570      	push	{r4, r5, r6, lr}
 801f52e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f530:	4604      	mov	r4, r0
 801f532:	460d      	mov	r5, r1
 801f534:	b976      	cbnz	r6, 801f554 <_Balloc+0x28>
 801f536:	2010      	movs	r0, #16
 801f538:	f7fc fb10 	bl	801bb5c <malloc>
 801f53c:	4602      	mov	r2, r0
 801f53e:	6260      	str	r0, [r4, #36]	; 0x24
 801f540:	b920      	cbnz	r0, 801f54c <_Balloc+0x20>
 801f542:	4b18      	ldr	r3, [pc, #96]	; (801f5a4 <_Balloc+0x78>)
 801f544:	4818      	ldr	r0, [pc, #96]	; (801f5a8 <_Balloc+0x7c>)
 801f546:	2166      	movs	r1, #102	; 0x66
 801f548:	f7fe fb96 	bl	801dc78 <__assert_func>
 801f54c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f550:	6006      	str	r6, [r0, #0]
 801f552:	60c6      	str	r6, [r0, #12]
 801f554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f556:	68f3      	ldr	r3, [r6, #12]
 801f558:	b183      	cbz	r3, 801f57c <_Balloc+0x50>
 801f55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f55c:	68db      	ldr	r3, [r3, #12]
 801f55e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f562:	b9b8      	cbnz	r0, 801f594 <_Balloc+0x68>
 801f564:	2101      	movs	r1, #1
 801f566:	fa01 f605 	lsl.w	r6, r1, r5
 801f56a:	1d72      	adds	r2, r6, #5
 801f56c:	0092      	lsls	r2, r2, #2
 801f56e:	4620      	mov	r0, r4
 801f570:	f000 fc9d 	bl	801feae <_calloc_r>
 801f574:	b160      	cbz	r0, 801f590 <_Balloc+0x64>
 801f576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f57a:	e00e      	b.n	801f59a <_Balloc+0x6e>
 801f57c:	2221      	movs	r2, #33	; 0x21
 801f57e:	2104      	movs	r1, #4
 801f580:	4620      	mov	r0, r4
 801f582:	f000 fc94 	bl	801feae <_calloc_r>
 801f586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f588:	60f0      	str	r0, [r6, #12]
 801f58a:	68db      	ldr	r3, [r3, #12]
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	d1e4      	bne.n	801f55a <_Balloc+0x2e>
 801f590:	2000      	movs	r0, #0
 801f592:	bd70      	pop	{r4, r5, r6, pc}
 801f594:	6802      	ldr	r2, [r0, #0]
 801f596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f59a:	2300      	movs	r3, #0
 801f59c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f5a0:	e7f7      	b.n	801f592 <_Balloc+0x66>
 801f5a2:	bf00      	nop
 801f5a4:	08022c28 	.word	0x08022c28
 801f5a8:	08022f30 	.word	0x08022f30

0801f5ac <_Bfree>:
 801f5ac:	b570      	push	{r4, r5, r6, lr}
 801f5ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801f5b0:	4605      	mov	r5, r0
 801f5b2:	460c      	mov	r4, r1
 801f5b4:	b976      	cbnz	r6, 801f5d4 <_Bfree+0x28>
 801f5b6:	2010      	movs	r0, #16
 801f5b8:	f7fc fad0 	bl	801bb5c <malloc>
 801f5bc:	4602      	mov	r2, r0
 801f5be:	6268      	str	r0, [r5, #36]	; 0x24
 801f5c0:	b920      	cbnz	r0, 801f5cc <_Bfree+0x20>
 801f5c2:	4b09      	ldr	r3, [pc, #36]	; (801f5e8 <_Bfree+0x3c>)
 801f5c4:	4809      	ldr	r0, [pc, #36]	; (801f5ec <_Bfree+0x40>)
 801f5c6:	218a      	movs	r1, #138	; 0x8a
 801f5c8:	f7fe fb56 	bl	801dc78 <__assert_func>
 801f5cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f5d0:	6006      	str	r6, [r0, #0]
 801f5d2:	60c6      	str	r6, [r0, #12]
 801f5d4:	b13c      	cbz	r4, 801f5e6 <_Bfree+0x3a>
 801f5d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801f5d8:	6862      	ldr	r2, [r4, #4]
 801f5da:	68db      	ldr	r3, [r3, #12]
 801f5dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f5e0:	6021      	str	r1, [r4, #0]
 801f5e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f5e6:	bd70      	pop	{r4, r5, r6, pc}
 801f5e8:	08022c28 	.word	0x08022c28
 801f5ec:	08022f30 	.word	0x08022f30

0801f5f0 <__multadd>:
 801f5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5f4:	690d      	ldr	r5, [r1, #16]
 801f5f6:	4607      	mov	r7, r0
 801f5f8:	460c      	mov	r4, r1
 801f5fa:	461e      	mov	r6, r3
 801f5fc:	f101 0c14 	add.w	ip, r1, #20
 801f600:	2000      	movs	r0, #0
 801f602:	f8dc 3000 	ldr.w	r3, [ip]
 801f606:	b299      	uxth	r1, r3
 801f608:	fb02 6101 	mla	r1, r2, r1, r6
 801f60c:	0c1e      	lsrs	r6, r3, #16
 801f60e:	0c0b      	lsrs	r3, r1, #16
 801f610:	fb02 3306 	mla	r3, r2, r6, r3
 801f614:	b289      	uxth	r1, r1
 801f616:	3001      	adds	r0, #1
 801f618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f61c:	4285      	cmp	r5, r0
 801f61e:	f84c 1b04 	str.w	r1, [ip], #4
 801f622:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f626:	dcec      	bgt.n	801f602 <__multadd+0x12>
 801f628:	b30e      	cbz	r6, 801f66e <__multadd+0x7e>
 801f62a:	68a3      	ldr	r3, [r4, #8]
 801f62c:	42ab      	cmp	r3, r5
 801f62e:	dc19      	bgt.n	801f664 <__multadd+0x74>
 801f630:	6861      	ldr	r1, [r4, #4]
 801f632:	4638      	mov	r0, r7
 801f634:	3101      	adds	r1, #1
 801f636:	f7ff ff79 	bl	801f52c <_Balloc>
 801f63a:	4680      	mov	r8, r0
 801f63c:	b928      	cbnz	r0, 801f64a <__multadd+0x5a>
 801f63e:	4602      	mov	r2, r0
 801f640:	4b0c      	ldr	r3, [pc, #48]	; (801f674 <__multadd+0x84>)
 801f642:	480d      	ldr	r0, [pc, #52]	; (801f678 <__multadd+0x88>)
 801f644:	21b5      	movs	r1, #181	; 0xb5
 801f646:	f7fe fb17 	bl	801dc78 <__assert_func>
 801f64a:	6922      	ldr	r2, [r4, #16]
 801f64c:	3202      	adds	r2, #2
 801f64e:	f104 010c 	add.w	r1, r4, #12
 801f652:	0092      	lsls	r2, r2, #2
 801f654:	300c      	adds	r0, #12
 801f656:	f7fc fa89 	bl	801bb6c <memcpy>
 801f65a:	4621      	mov	r1, r4
 801f65c:	4638      	mov	r0, r7
 801f65e:	f7ff ffa5 	bl	801f5ac <_Bfree>
 801f662:	4644      	mov	r4, r8
 801f664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f668:	3501      	adds	r5, #1
 801f66a:	615e      	str	r6, [r3, #20]
 801f66c:	6125      	str	r5, [r4, #16]
 801f66e:	4620      	mov	r0, r4
 801f670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f674:	08022e41 	.word	0x08022e41
 801f678:	08022f30 	.word	0x08022f30

0801f67c <__s2b>:
 801f67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f680:	460c      	mov	r4, r1
 801f682:	4615      	mov	r5, r2
 801f684:	461f      	mov	r7, r3
 801f686:	2209      	movs	r2, #9
 801f688:	3308      	adds	r3, #8
 801f68a:	4606      	mov	r6, r0
 801f68c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f690:	2100      	movs	r1, #0
 801f692:	2201      	movs	r2, #1
 801f694:	429a      	cmp	r2, r3
 801f696:	db09      	blt.n	801f6ac <__s2b+0x30>
 801f698:	4630      	mov	r0, r6
 801f69a:	f7ff ff47 	bl	801f52c <_Balloc>
 801f69e:	b940      	cbnz	r0, 801f6b2 <__s2b+0x36>
 801f6a0:	4602      	mov	r2, r0
 801f6a2:	4b19      	ldr	r3, [pc, #100]	; (801f708 <__s2b+0x8c>)
 801f6a4:	4819      	ldr	r0, [pc, #100]	; (801f70c <__s2b+0x90>)
 801f6a6:	21ce      	movs	r1, #206	; 0xce
 801f6a8:	f7fe fae6 	bl	801dc78 <__assert_func>
 801f6ac:	0052      	lsls	r2, r2, #1
 801f6ae:	3101      	adds	r1, #1
 801f6b0:	e7f0      	b.n	801f694 <__s2b+0x18>
 801f6b2:	9b08      	ldr	r3, [sp, #32]
 801f6b4:	6143      	str	r3, [r0, #20]
 801f6b6:	2d09      	cmp	r5, #9
 801f6b8:	f04f 0301 	mov.w	r3, #1
 801f6bc:	6103      	str	r3, [r0, #16]
 801f6be:	dd16      	ble.n	801f6ee <__s2b+0x72>
 801f6c0:	f104 0909 	add.w	r9, r4, #9
 801f6c4:	46c8      	mov	r8, r9
 801f6c6:	442c      	add	r4, r5
 801f6c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f6cc:	4601      	mov	r1, r0
 801f6ce:	3b30      	subs	r3, #48	; 0x30
 801f6d0:	220a      	movs	r2, #10
 801f6d2:	4630      	mov	r0, r6
 801f6d4:	f7ff ff8c 	bl	801f5f0 <__multadd>
 801f6d8:	45a0      	cmp	r8, r4
 801f6da:	d1f5      	bne.n	801f6c8 <__s2b+0x4c>
 801f6dc:	f1a5 0408 	sub.w	r4, r5, #8
 801f6e0:	444c      	add	r4, r9
 801f6e2:	1b2d      	subs	r5, r5, r4
 801f6e4:	1963      	adds	r3, r4, r5
 801f6e6:	42bb      	cmp	r3, r7
 801f6e8:	db04      	blt.n	801f6f4 <__s2b+0x78>
 801f6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f6ee:	340a      	adds	r4, #10
 801f6f0:	2509      	movs	r5, #9
 801f6f2:	e7f6      	b.n	801f6e2 <__s2b+0x66>
 801f6f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f6f8:	4601      	mov	r1, r0
 801f6fa:	3b30      	subs	r3, #48	; 0x30
 801f6fc:	220a      	movs	r2, #10
 801f6fe:	4630      	mov	r0, r6
 801f700:	f7ff ff76 	bl	801f5f0 <__multadd>
 801f704:	e7ee      	b.n	801f6e4 <__s2b+0x68>
 801f706:	bf00      	nop
 801f708:	08022e41 	.word	0x08022e41
 801f70c:	08022f30 	.word	0x08022f30

0801f710 <__hi0bits>:
 801f710:	0c03      	lsrs	r3, r0, #16
 801f712:	041b      	lsls	r3, r3, #16
 801f714:	b9d3      	cbnz	r3, 801f74c <__hi0bits+0x3c>
 801f716:	0400      	lsls	r0, r0, #16
 801f718:	2310      	movs	r3, #16
 801f71a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f71e:	bf04      	itt	eq
 801f720:	0200      	lsleq	r0, r0, #8
 801f722:	3308      	addeq	r3, #8
 801f724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f728:	bf04      	itt	eq
 801f72a:	0100      	lsleq	r0, r0, #4
 801f72c:	3304      	addeq	r3, #4
 801f72e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f732:	bf04      	itt	eq
 801f734:	0080      	lsleq	r0, r0, #2
 801f736:	3302      	addeq	r3, #2
 801f738:	2800      	cmp	r0, #0
 801f73a:	db05      	blt.n	801f748 <__hi0bits+0x38>
 801f73c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801f740:	f103 0301 	add.w	r3, r3, #1
 801f744:	bf08      	it	eq
 801f746:	2320      	moveq	r3, #32
 801f748:	4618      	mov	r0, r3
 801f74a:	4770      	bx	lr
 801f74c:	2300      	movs	r3, #0
 801f74e:	e7e4      	b.n	801f71a <__hi0bits+0xa>

0801f750 <__lo0bits>:
 801f750:	6803      	ldr	r3, [r0, #0]
 801f752:	f013 0207 	ands.w	r2, r3, #7
 801f756:	4601      	mov	r1, r0
 801f758:	d00b      	beq.n	801f772 <__lo0bits+0x22>
 801f75a:	07da      	lsls	r2, r3, #31
 801f75c:	d423      	bmi.n	801f7a6 <__lo0bits+0x56>
 801f75e:	0798      	lsls	r0, r3, #30
 801f760:	bf49      	itett	mi
 801f762:	085b      	lsrmi	r3, r3, #1
 801f764:	089b      	lsrpl	r3, r3, #2
 801f766:	2001      	movmi	r0, #1
 801f768:	600b      	strmi	r3, [r1, #0]
 801f76a:	bf5c      	itt	pl
 801f76c:	600b      	strpl	r3, [r1, #0]
 801f76e:	2002      	movpl	r0, #2
 801f770:	4770      	bx	lr
 801f772:	b298      	uxth	r0, r3
 801f774:	b9a8      	cbnz	r0, 801f7a2 <__lo0bits+0x52>
 801f776:	0c1b      	lsrs	r3, r3, #16
 801f778:	2010      	movs	r0, #16
 801f77a:	b2da      	uxtb	r2, r3
 801f77c:	b90a      	cbnz	r2, 801f782 <__lo0bits+0x32>
 801f77e:	3008      	adds	r0, #8
 801f780:	0a1b      	lsrs	r3, r3, #8
 801f782:	071a      	lsls	r2, r3, #28
 801f784:	bf04      	itt	eq
 801f786:	091b      	lsreq	r3, r3, #4
 801f788:	3004      	addeq	r0, #4
 801f78a:	079a      	lsls	r2, r3, #30
 801f78c:	bf04      	itt	eq
 801f78e:	089b      	lsreq	r3, r3, #2
 801f790:	3002      	addeq	r0, #2
 801f792:	07da      	lsls	r2, r3, #31
 801f794:	d403      	bmi.n	801f79e <__lo0bits+0x4e>
 801f796:	085b      	lsrs	r3, r3, #1
 801f798:	f100 0001 	add.w	r0, r0, #1
 801f79c:	d005      	beq.n	801f7aa <__lo0bits+0x5a>
 801f79e:	600b      	str	r3, [r1, #0]
 801f7a0:	4770      	bx	lr
 801f7a2:	4610      	mov	r0, r2
 801f7a4:	e7e9      	b.n	801f77a <__lo0bits+0x2a>
 801f7a6:	2000      	movs	r0, #0
 801f7a8:	4770      	bx	lr
 801f7aa:	2020      	movs	r0, #32
 801f7ac:	4770      	bx	lr
	...

0801f7b0 <__i2b>:
 801f7b0:	b510      	push	{r4, lr}
 801f7b2:	460c      	mov	r4, r1
 801f7b4:	2101      	movs	r1, #1
 801f7b6:	f7ff feb9 	bl	801f52c <_Balloc>
 801f7ba:	4602      	mov	r2, r0
 801f7bc:	b928      	cbnz	r0, 801f7ca <__i2b+0x1a>
 801f7be:	4b05      	ldr	r3, [pc, #20]	; (801f7d4 <__i2b+0x24>)
 801f7c0:	4805      	ldr	r0, [pc, #20]	; (801f7d8 <__i2b+0x28>)
 801f7c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801f7c6:	f7fe fa57 	bl	801dc78 <__assert_func>
 801f7ca:	2301      	movs	r3, #1
 801f7cc:	6144      	str	r4, [r0, #20]
 801f7ce:	6103      	str	r3, [r0, #16]
 801f7d0:	bd10      	pop	{r4, pc}
 801f7d2:	bf00      	nop
 801f7d4:	08022e41 	.word	0x08022e41
 801f7d8:	08022f30 	.word	0x08022f30

0801f7dc <__multiply>:
 801f7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7e0:	4691      	mov	r9, r2
 801f7e2:	690a      	ldr	r2, [r1, #16]
 801f7e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f7e8:	429a      	cmp	r2, r3
 801f7ea:	bfb8      	it	lt
 801f7ec:	460b      	movlt	r3, r1
 801f7ee:	460c      	mov	r4, r1
 801f7f0:	bfbc      	itt	lt
 801f7f2:	464c      	movlt	r4, r9
 801f7f4:	4699      	movlt	r9, r3
 801f7f6:	6927      	ldr	r7, [r4, #16]
 801f7f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801f7fc:	68a3      	ldr	r3, [r4, #8]
 801f7fe:	6861      	ldr	r1, [r4, #4]
 801f800:	eb07 060a 	add.w	r6, r7, sl
 801f804:	42b3      	cmp	r3, r6
 801f806:	b085      	sub	sp, #20
 801f808:	bfb8      	it	lt
 801f80a:	3101      	addlt	r1, #1
 801f80c:	f7ff fe8e 	bl	801f52c <_Balloc>
 801f810:	b930      	cbnz	r0, 801f820 <__multiply+0x44>
 801f812:	4602      	mov	r2, r0
 801f814:	4b44      	ldr	r3, [pc, #272]	; (801f928 <__multiply+0x14c>)
 801f816:	4845      	ldr	r0, [pc, #276]	; (801f92c <__multiply+0x150>)
 801f818:	f240 115d 	movw	r1, #349	; 0x15d
 801f81c:	f7fe fa2c 	bl	801dc78 <__assert_func>
 801f820:	f100 0514 	add.w	r5, r0, #20
 801f824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f828:	462b      	mov	r3, r5
 801f82a:	2200      	movs	r2, #0
 801f82c:	4543      	cmp	r3, r8
 801f82e:	d321      	bcc.n	801f874 <__multiply+0x98>
 801f830:	f104 0314 	add.w	r3, r4, #20
 801f834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801f838:	f109 0314 	add.w	r3, r9, #20
 801f83c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801f840:	9202      	str	r2, [sp, #8]
 801f842:	1b3a      	subs	r2, r7, r4
 801f844:	3a15      	subs	r2, #21
 801f846:	f022 0203 	bic.w	r2, r2, #3
 801f84a:	3204      	adds	r2, #4
 801f84c:	f104 0115 	add.w	r1, r4, #21
 801f850:	428f      	cmp	r7, r1
 801f852:	bf38      	it	cc
 801f854:	2204      	movcc	r2, #4
 801f856:	9201      	str	r2, [sp, #4]
 801f858:	9a02      	ldr	r2, [sp, #8]
 801f85a:	9303      	str	r3, [sp, #12]
 801f85c:	429a      	cmp	r2, r3
 801f85e:	d80c      	bhi.n	801f87a <__multiply+0x9e>
 801f860:	2e00      	cmp	r6, #0
 801f862:	dd03      	ble.n	801f86c <__multiply+0x90>
 801f864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d05a      	beq.n	801f922 <__multiply+0x146>
 801f86c:	6106      	str	r6, [r0, #16]
 801f86e:	b005      	add	sp, #20
 801f870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f874:	f843 2b04 	str.w	r2, [r3], #4
 801f878:	e7d8      	b.n	801f82c <__multiply+0x50>
 801f87a:	f8b3 a000 	ldrh.w	sl, [r3]
 801f87e:	f1ba 0f00 	cmp.w	sl, #0
 801f882:	d024      	beq.n	801f8ce <__multiply+0xf2>
 801f884:	f104 0e14 	add.w	lr, r4, #20
 801f888:	46a9      	mov	r9, r5
 801f88a:	f04f 0c00 	mov.w	ip, #0
 801f88e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801f892:	f8d9 1000 	ldr.w	r1, [r9]
 801f896:	fa1f fb82 	uxth.w	fp, r2
 801f89a:	b289      	uxth	r1, r1
 801f89c:	fb0a 110b 	mla	r1, sl, fp, r1
 801f8a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f8a4:	f8d9 2000 	ldr.w	r2, [r9]
 801f8a8:	4461      	add	r1, ip
 801f8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f8ae:	fb0a c20b 	mla	r2, sl, fp, ip
 801f8b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f8b6:	b289      	uxth	r1, r1
 801f8b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801f8bc:	4577      	cmp	r7, lr
 801f8be:	f849 1b04 	str.w	r1, [r9], #4
 801f8c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801f8c6:	d8e2      	bhi.n	801f88e <__multiply+0xb2>
 801f8c8:	9a01      	ldr	r2, [sp, #4]
 801f8ca:	f845 c002 	str.w	ip, [r5, r2]
 801f8ce:	9a03      	ldr	r2, [sp, #12]
 801f8d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801f8d4:	3304      	adds	r3, #4
 801f8d6:	f1b9 0f00 	cmp.w	r9, #0
 801f8da:	d020      	beq.n	801f91e <__multiply+0x142>
 801f8dc:	6829      	ldr	r1, [r5, #0]
 801f8de:	f104 0c14 	add.w	ip, r4, #20
 801f8e2:	46ae      	mov	lr, r5
 801f8e4:	f04f 0a00 	mov.w	sl, #0
 801f8e8:	f8bc b000 	ldrh.w	fp, [ip]
 801f8ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801f8f0:	fb09 220b 	mla	r2, r9, fp, r2
 801f8f4:	4492      	add	sl, r2
 801f8f6:	b289      	uxth	r1, r1
 801f8f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801f8fc:	f84e 1b04 	str.w	r1, [lr], #4
 801f900:	f85c 2b04 	ldr.w	r2, [ip], #4
 801f904:	f8be 1000 	ldrh.w	r1, [lr]
 801f908:	0c12      	lsrs	r2, r2, #16
 801f90a:	fb09 1102 	mla	r1, r9, r2, r1
 801f90e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801f912:	4567      	cmp	r7, ip
 801f914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801f918:	d8e6      	bhi.n	801f8e8 <__multiply+0x10c>
 801f91a:	9a01      	ldr	r2, [sp, #4]
 801f91c:	50a9      	str	r1, [r5, r2]
 801f91e:	3504      	adds	r5, #4
 801f920:	e79a      	b.n	801f858 <__multiply+0x7c>
 801f922:	3e01      	subs	r6, #1
 801f924:	e79c      	b.n	801f860 <__multiply+0x84>
 801f926:	bf00      	nop
 801f928:	08022e41 	.word	0x08022e41
 801f92c:	08022f30 	.word	0x08022f30

0801f930 <__pow5mult>:
 801f930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f934:	4615      	mov	r5, r2
 801f936:	f012 0203 	ands.w	r2, r2, #3
 801f93a:	4606      	mov	r6, r0
 801f93c:	460f      	mov	r7, r1
 801f93e:	d007      	beq.n	801f950 <__pow5mult+0x20>
 801f940:	4c25      	ldr	r4, [pc, #148]	; (801f9d8 <__pow5mult+0xa8>)
 801f942:	3a01      	subs	r2, #1
 801f944:	2300      	movs	r3, #0
 801f946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f94a:	f7ff fe51 	bl	801f5f0 <__multadd>
 801f94e:	4607      	mov	r7, r0
 801f950:	10ad      	asrs	r5, r5, #2
 801f952:	d03d      	beq.n	801f9d0 <__pow5mult+0xa0>
 801f954:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f956:	b97c      	cbnz	r4, 801f978 <__pow5mult+0x48>
 801f958:	2010      	movs	r0, #16
 801f95a:	f7fc f8ff 	bl	801bb5c <malloc>
 801f95e:	4602      	mov	r2, r0
 801f960:	6270      	str	r0, [r6, #36]	; 0x24
 801f962:	b928      	cbnz	r0, 801f970 <__pow5mult+0x40>
 801f964:	4b1d      	ldr	r3, [pc, #116]	; (801f9dc <__pow5mult+0xac>)
 801f966:	481e      	ldr	r0, [pc, #120]	; (801f9e0 <__pow5mult+0xb0>)
 801f968:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801f96c:	f7fe f984 	bl	801dc78 <__assert_func>
 801f970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f974:	6004      	str	r4, [r0, #0]
 801f976:	60c4      	str	r4, [r0, #12]
 801f978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f97c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f980:	b94c      	cbnz	r4, 801f996 <__pow5mult+0x66>
 801f982:	f240 2171 	movw	r1, #625	; 0x271
 801f986:	4630      	mov	r0, r6
 801f988:	f7ff ff12 	bl	801f7b0 <__i2b>
 801f98c:	2300      	movs	r3, #0
 801f98e:	f8c8 0008 	str.w	r0, [r8, #8]
 801f992:	4604      	mov	r4, r0
 801f994:	6003      	str	r3, [r0, #0]
 801f996:	f04f 0900 	mov.w	r9, #0
 801f99a:	07eb      	lsls	r3, r5, #31
 801f99c:	d50a      	bpl.n	801f9b4 <__pow5mult+0x84>
 801f99e:	4639      	mov	r1, r7
 801f9a0:	4622      	mov	r2, r4
 801f9a2:	4630      	mov	r0, r6
 801f9a4:	f7ff ff1a 	bl	801f7dc <__multiply>
 801f9a8:	4639      	mov	r1, r7
 801f9aa:	4680      	mov	r8, r0
 801f9ac:	4630      	mov	r0, r6
 801f9ae:	f7ff fdfd 	bl	801f5ac <_Bfree>
 801f9b2:	4647      	mov	r7, r8
 801f9b4:	106d      	asrs	r5, r5, #1
 801f9b6:	d00b      	beq.n	801f9d0 <__pow5mult+0xa0>
 801f9b8:	6820      	ldr	r0, [r4, #0]
 801f9ba:	b938      	cbnz	r0, 801f9cc <__pow5mult+0x9c>
 801f9bc:	4622      	mov	r2, r4
 801f9be:	4621      	mov	r1, r4
 801f9c0:	4630      	mov	r0, r6
 801f9c2:	f7ff ff0b 	bl	801f7dc <__multiply>
 801f9c6:	6020      	str	r0, [r4, #0]
 801f9c8:	f8c0 9000 	str.w	r9, [r0]
 801f9cc:	4604      	mov	r4, r0
 801f9ce:	e7e4      	b.n	801f99a <__pow5mult+0x6a>
 801f9d0:	4638      	mov	r0, r7
 801f9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9d6:	bf00      	nop
 801f9d8:	08023080 	.word	0x08023080
 801f9dc:	08022c28 	.word	0x08022c28
 801f9e0:	08022f30 	.word	0x08022f30

0801f9e4 <__lshift>:
 801f9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9e8:	460c      	mov	r4, r1
 801f9ea:	6849      	ldr	r1, [r1, #4]
 801f9ec:	6923      	ldr	r3, [r4, #16]
 801f9ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f9f2:	68a3      	ldr	r3, [r4, #8]
 801f9f4:	4607      	mov	r7, r0
 801f9f6:	4691      	mov	r9, r2
 801f9f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f9fc:	f108 0601 	add.w	r6, r8, #1
 801fa00:	42b3      	cmp	r3, r6
 801fa02:	db0b      	blt.n	801fa1c <__lshift+0x38>
 801fa04:	4638      	mov	r0, r7
 801fa06:	f7ff fd91 	bl	801f52c <_Balloc>
 801fa0a:	4605      	mov	r5, r0
 801fa0c:	b948      	cbnz	r0, 801fa22 <__lshift+0x3e>
 801fa0e:	4602      	mov	r2, r0
 801fa10:	4b2a      	ldr	r3, [pc, #168]	; (801fabc <__lshift+0xd8>)
 801fa12:	482b      	ldr	r0, [pc, #172]	; (801fac0 <__lshift+0xdc>)
 801fa14:	f240 11d9 	movw	r1, #473	; 0x1d9
 801fa18:	f7fe f92e 	bl	801dc78 <__assert_func>
 801fa1c:	3101      	adds	r1, #1
 801fa1e:	005b      	lsls	r3, r3, #1
 801fa20:	e7ee      	b.n	801fa00 <__lshift+0x1c>
 801fa22:	2300      	movs	r3, #0
 801fa24:	f100 0114 	add.w	r1, r0, #20
 801fa28:	f100 0210 	add.w	r2, r0, #16
 801fa2c:	4618      	mov	r0, r3
 801fa2e:	4553      	cmp	r3, sl
 801fa30:	db37      	blt.n	801faa2 <__lshift+0xbe>
 801fa32:	6920      	ldr	r0, [r4, #16]
 801fa34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fa38:	f104 0314 	add.w	r3, r4, #20
 801fa3c:	f019 091f 	ands.w	r9, r9, #31
 801fa40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fa44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801fa48:	d02f      	beq.n	801faaa <__lshift+0xc6>
 801fa4a:	f1c9 0e20 	rsb	lr, r9, #32
 801fa4e:	468a      	mov	sl, r1
 801fa50:	f04f 0c00 	mov.w	ip, #0
 801fa54:	681a      	ldr	r2, [r3, #0]
 801fa56:	fa02 f209 	lsl.w	r2, r2, r9
 801fa5a:	ea42 020c 	orr.w	r2, r2, ip
 801fa5e:	f84a 2b04 	str.w	r2, [sl], #4
 801fa62:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa66:	4298      	cmp	r0, r3
 801fa68:	fa22 fc0e 	lsr.w	ip, r2, lr
 801fa6c:	d8f2      	bhi.n	801fa54 <__lshift+0x70>
 801fa6e:	1b03      	subs	r3, r0, r4
 801fa70:	3b15      	subs	r3, #21
 801fa72:	f023 0303 	bic.w	r3, r3, #3
 801fa76:	3304      	adds	r3, #4
 801fa78:	f104 0215 	add.w	r2, r4, #21
 801fa7c:	4290      	cmp	r0, r2
 801fa7e:	bf38      	it	cc
 801fa80:	2304      	movcc	r3, #4
 801fa82:	f841 c003 	str.w	ip, [r1, r3]
 801fa86:	f1bc 0f00 	cmp.w	ip, #0
 801fa8a:	d001      	beq.n	801fa90 <__lshift+0xac>
 801fa8c:	f108 0602 	add.w	r6, r8, #2
 801fa90:	3e01      	subs	r6, #1
 801fa92:	4638      	mov	r0, r7
 801fa94:	612e      	str	r6, [r5, #16]
 801fa96:	4621      	mov	r1, r4
 801fa98:	f7ff fd88 	bl	801f5ac <_Bfree>
 801fa9c:	4628      	mov	r0, r5
 801fa9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801faa2:	f842 0f04 	str.w	r0, [r2, #4]!
 801faa6:	3301      	adds	r3, #1
 801faa8:	e7c1      	b.n	801fa2e <__lshift+0x4a>
 801faaa:	3904      	subs	r1, #4
 801faac:	f853 2b04 	ldr.w	r2, [r3], #4
 801fab0:	f841 2f04 	str.w	r2, [r1, #4]!
 801fab4:	4298      	cmp	r0, r3
 801fab6:	d8f9      	bhi.n	801faac <__lshift+0xc8>
 801fab8:	e7ea      	b.n	801fa90 <__lshift+0xac>
 801faba:	bf00      	nop
 801fabc:	08022e41 	.word	0x08022e41
 801fac0:	08022f30 	.word	0x08022f30

0801fac4 <__mcmp>:
 801fac4:	b530      	push	{r4, r5, lr}
 801fac6:	6902      	ldr	r2, [r0, #16]
 801fac8:	690c      	ldr	r4, [r1, #16]
 801faca:	1b12      	subs	r2, r2, r4
 801facc:	d10e      	bne.n	801faec <__mcmp+0x28>
 801face:	f100 0314 	add.w	r3, r0, #20
 801fad2:	3114      	adds	r1, #20
 801fad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801fad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801fadc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801fae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801fae4:	42a5      	cmp	r5, r4
 801fae6:	d003      	beq.n	801faf0 <__mcmp+0x2c>
 801fae8:	d305      	bcc.n	801faf6 <__mcmp+0x32>
 801faea:	2201      	movs	r2, #1
 801faec:	4610      	mov	r0, r2
 801faee:	bd30      	pop	{r4, r5, pc}
 801faf0:	4283      	cmp	r3, r0
 801faf2:	d3f3      	bcc.n	801fadc <__mcmp+0x18>
 801faf4:	e7fa      	b.n	801faec <__mcmp+0x28>
 801faf6:	f04f 32ff 	mov.w	r2, #4294967295
 801fafa:	e7f7      	b.n	801faec <__mcmp+0x28>

0801fafc <__mdiff>:
 801fafc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb00:	460c      	mov	r4, r1
 801fb02:	4606      	mov	r6, r0
 801fb04:	4611      	mov	r1, r2
 801fb06:	4620      	mov	r0, r4
 801fb08:	4690      	mov	r8, r2
 801fb0a:	f7ff ffdb 	bl	801fac4 <__mcmp>
 801fb0e:	1e05      	subs	r5, r0, #0
 801fb10:	d110      	bne.n	801fb34 <__mdiff+0x38>
 801fb12:	4629      	mov	r1, r5
 801fb14:	4630      	mov	r0, r6
 801fb16:	f7ff fd09 	bl	801f52c <_Balloc>
 801fb1a:	b930      	cbnz	r0, 801fb2a <__mdiff+0x2e>
 801fb1c:	4b3a      	ldr	r3, [pc, #232]	; (801fc08 <__mdiff+0x10c>)
 801fb1e:	4602      	mov	r2, r0
 801fb20:	f240 2132 	movw	r1, #562	; 0x232
 801fb24:	4839      	ldr	r0, [pc, #228]	; (801fc0c <__mdiff+0x110>)
 801fb26:	f7fe f8a7 	bl	801dc78 <__assert_func>
 801fb2a:	2301      	movs	r3, #1
 801fb2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fb30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb34:	bfa4      	itt	ge
 801fb36:	4643      	movge	r3, r8
 801fb38:	46a0      	movge	r8, r4
 801fb3a:	4630      	mov	r0, r6
 801fb3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801fb40:	bfa6      	itte	ge
 801fb42:	461c      	movge	r4, r3
 801fb44:	2500      	movge	r5, #0
 801fb46:	2501      	movlt	r5, #1
 801fb48:	f7ff fcf0 	bl	801f52c <_Balloc>
 801fb4c:	b920      	cbnz	r0, 801fb58 <__mdiff+0x5c>
 801fb4e:	4b2e      	ldr	r3, [pc, #184]	; (801fc08 <__mdiff+0x10c>)
 801fb50:	4602      	mov	r2, r0
 801fb52:	f44f 7110 	mov.w	r1, #576	; 0x240
 801fb56:	e7e5      	b.n	801fb24 <__mdiff+0x28>
 801fb58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801fb5c:	6926      	ldr	r6, [r4, #16]
 801fb5e:	60c5      	str	r5, [r0, #12]
 801fb60:	f104 0914 	add.w	r9, r4, #20
 801fb64:	f108 0514 	add.w	r5, r8, #20
 801fb68:	f100 0e14 	add.w	lr, r0, #20
 801fb6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801fb70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801fb74:	f108 0210 	add.w	r2, r8, #16
 801fb78:	46f2      	mov	sl, lr
 801fb7a:	2100      	movs	r1, #0
 801fb7c:	f859 3b04 	ldr.w	r3, [r9], #4
 801fb80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801fb84:	fa1f f883 	uxth.w	r8, r3
 801fb88:	fa11 f18b 	uxtah	r1, r1, fp
 801fb8c:	0c1b      	lsrs	r3, r3, #16
 801fb8e:	eba1 0808 	sub.w	r8, r1, r8
 801fb92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801fb96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801fb9a:	fa1f f888 	uxth.w	r8, r8
 801fb9e:	1419      	asrs	r1, r3, #16
 801fba0:	454e      	cmp	r6, r9
 801fba2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801fba6:	f84a 3b04 	str.w	r3, [sl], #4
 801fbaa:	d8e7      	bhi.n	801fb7c <__mdiff+0x80>
 801fbac:	1b33      	subs	r3, r6, r4
 801fbae:	3b15      	subs	r3, #21
 801fbb0:	f023 0303 	bic.w	r3, r3, #3
 801fbb4:	3304      	adds	r3, #4
 801fbb6:	3415      	adds	r4, #21
 801fbb8:	42a6      	cmp	r6, r4
 801fbba:	bf38      	it	cc
 801fbbc:	2304      	movcc	r3, #4
 801fbbe:	441d      	add	r5, r3
 801fbc0:	4473      	add	r3, lr
 801fbc2:	469e      	mov	lr, r3
 801fbc4:	462e      	mov	r6, r5
 801fbc6:	4566      	cmp	r6, ip
 801fbc8:	d30e      	bcc.n	801fbe8 <__mdiff+0xec>
 801fbca:	f10c 0203 	add.w	r2, ip, #3
 801fbce:	1b52      	subs	r2, r2, r5
 801fbd0:	f022 0203 	bic.w	r2, r2, #3
 801fbd4:	3d03      	subs	r5, #3
 801fbd6:	45ac      	cmp	ip, r5
 801fbd8:	bf38      	it	cc
 801fbda:	2200      	movcc	r2, #0
 801fbdc:	441a      	add	r2, r3
 801fbde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801fbe2:	b17b      	cbz	r3, 801fc04 <__mdiff+0x108>
 801fbe4:	6107      	str	r7, [r0, #16]
 801fbe6:	e7a3      	b.n	801fb30 <__mdiff+0x34>
 801fbe8:	f856 8b04 	ldr.w	r8, [r6], #4
 801fbec:	fa11 f288 	uxtah	r2, r1, r8
 801fbf0:	1414      	asrs	r4, r2, #16
 801fbf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801fbf6:	b292      	uxth	r2, r2
 801fbf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801fbfc:	f84e 2b04 	str.w	r2, [lr], #4
 801fc00:	1421      	asrs	r1, r4, #16
 801fc02:	e7e0      	b.n	801fbc6 <__mdiff+0xca>
 801fc04:	3f01      	subs	r7, #1
 801fc06:	e7ea      	b.n	801fbde <__mdiff+0xe2>
 801fc08:	08022e41 	.word	0x08022e41
 801fc0c:	08022f30 	.word	0x08022f30

0801fc10 <__ulp>:
 801fc10:	b082      	sub	sp, #8
 801fc12:	ed8d 0b00 	vstr	d0, [sp]
 801fc16:	9b01      	ldr	r3, [sp, #4]
 801fc18:	4912      	ldr	r1, [pc, #72]	; (801fc64 <__ulp+0x54>)
 801fc1a:	4019      	ands	r1, r3
 801fc1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801fc20:	2900      	cmp	r1, #0
 801fc22:	dd05      	ble.n	801fc30 <__ulp+0x20>
 801fc24:	2200      	movs	r2, #0
 801fc26:	460b      	mov	r3, r1
 801fc28:	ec43 2b10 	vmov	d0, r2, r3
 801fc2c:	b002      	add	sp, #8
 801fc2e:	4770      	bx	lr
 801fc30:	4249      	negs	r1, r1
 801fc32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801fc36:	ea4f 5021 	mov.w	r0, r1, asr #20
 801fc3a:	f04f 0200 	mov.w	r2, #0
 801fc3e:	f04f 0300 	mov.w	r3, #0
 801fc42:	da04      	bge.n	801fc4e <__ulp+0x3e>
 801fc44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801fc48:	fa41 f300 	asr.w	r3, r1, r0
 801fc4c:	e7ec      	b.n	801fc28 <__ulp+0x18>
 801fc4e:	f1a0 0114 	sub.w	r1, r0, #20
 801fc52:	291e      	cmp	r1, #30
 801fc54:	bfda      	itte	le
 801fc56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801fc5a:	fa20 f101 	lsrle.w	r1, r0, r1
 801fc5e:	2101      	movgt	r1, #1
 801fc60:	460a      	mov	r2, r1
 801fc62:	e7e1      	b.n	801fc28 <__ulp+0x18>
 801fc64:	7ff00000 	.word	0x7ff00000

0801fc68 <__b2d>:
 801fc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc6a:	6905      	ldr	r5, [r0, #16]
 801fc6c:	f100 0714 	add.w	r7, r0, #20
 801fc70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801fc74:	1f2e      	subs	r6, r5, #4
 801fc76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801fc7a:	4620      	mov	r0, r4
 801fc7c:	f7ff fd48 	bl	801f710 <__hi0bits>
 801fc80:	f1c0 0320 	rsb	r3, r0, #32
 801fc84:	280a      	cmp	r0, #10
 801fc86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801fd04 <__b2d+0x9c>
 801fc8a:	600b      	str	r3, [r1, #0]
 801fc8c:	dc14      	bgt.n	801fcb8 <__b2d+0x50>
 801fc8e:	f1c0 0e0b 	rsb	lr, r0, #11
 801fc92:	fa24 f10e 	lsr.w	r1, r4, lr
 801fc96:	42b7      	cmp	r7, r6
 801fc98:	ea41 030c 	orr.w	r3, r1, ip
 801fc9c:	bf34      	ite	cc
 801fc9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801fca2:	2100      	movcs	r1, #0
 801fca4:	3015      	adds	r0, #21
 801fca6:	fa04 f000 	lsl.w	r0, r4, r0
 801fcaa:	fa21 f10e 	lsr.w	r1, r1, lr
 801fcae:	ea40 0201 	orr.w	r2, r0, r1
 801fcb2:	ec43 2b10 	vmov	d0, r2, r3
 801fcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fcb8:	42b7      	cmp	r7, r6
 801fcba:	bf3a      	itte	cc
 801fcbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801fcc0:	f1a5 0608 	subcc.w	r6, r5, #8
 801fcc4:	2100      	movcs	r1, #0
 801fcc6:	380b      	subs	r0, #11
 801fcc8:	d017      	beq.n	801fcfa <__b2d+0x92>
 801fcca:	f1c0 0c20 	rsb	ip, r0, #32
 801fcce:	fa04 f500 	lsl.w	r5, r4, r0
 801fcd2:	42be      	cmp	r6, r7
 801fcd4:	fa21 f40c 	lsr.w	r4, r1, ip
 801fcd8:	ea45 0504 	orr.w	r5, r5, r4
 801fcdc:	bf8c      	ite	hi
 801fcde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801fce2:	2400      	movls	r4, #0
 801fce4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801fce8:	fa01 f000 	lsl.w	r0, r1, r0
 801fcec:	fa24 f40c 	lsr.w	r4, r4, ip
 801fcf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801fcf4:	ea40 0204 	orr.w	r2, r0, r4
 801fcf8:	e7db      	b.n	801fcb2 <__b2d+0x4a>
 801fcfa:	ea44 030c 	orr.w	r3, r4, ip
 801fcfe:	460a      	mov	r2, r1
 801fd00:	e7d7      	b.n	801fcb2 <__b2d+0x4a>
 801fd02:	bf00      	nop
 801fd04:	3ff00000 	.word	0x3ff00000

0801fd08 <__d2b>:
 801fd08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fd0c:	4689      	mov	r9, r1
 801fd0e:	2101      	movs	r1, #1
 801fd10:	ec57 6b10 	vmov	r6, r7, d0
 801fd14:	4690      	mov	r8, r2
 801fd16:	f7ff fc09 	bl	801f52c <_Balloc>
 801fd1a:	4604      	mov	r4, r0
 801fd1c:	b930      	cbnz	r0, 801fd2c <__d2b+0x24>
 801fd1e:	4602      	mov	r2, r0
 801fd20:	4b25      	ldr	r3, [pc, #148]	; (801fdb8 <__d2b+0xb0>)
 801fd22:	4826      	ldr	r0, [pc, #152]	; (801fdbc <__d2b+0xb4>)
 801fd24:	f240 310a 	movw	r1, #778	; 0x30a
 801fd28:	f7fd ffa6 	bl	801dc78 <__assert_func>
 801fd2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801fd30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801fd34:	bb35      	cbnz	r5, 801fd84 <__d2b+0x7c>
 801fd36:	2e00      	cmp	r6, #0
 801fd38:	9301      	str	r3, [sp, #4]
 801fd3a:	d028      	beq.n	801fd8e <__d2b+0x86>
 801fd3c:	4668      	mov	r0, sp
 801fd3e:	9600      	str	r6, [sp, #0]
 801fd40:	f7ff fd06 	bl	801f750 <__lo0bits>
 801fd44:	9900      	ldr	r1, [sp, #0]
 801fd46:	b300      	cbz	r0, 801fd8a <__d2b+0x82>
 801fd48:	9a01      	ldr	r2, [sp, #4]
 801fd4a:	f1c0 0320 	rsb	r3, r0, #32
 801fd4e:	fa02 f303 	lsl.w	r3, r2, r3
 801fd52:	430b      	orrs	r3, r1
 801fd54:	40c2      	lsrs	r2, r0
 801fd56:	6163      	str	r3, [r4, #20]
 801fd58:	9201      	str	r2, [sp, #4]
 801fd5a:	9b01      	ldr	r3, [sp, #4]
 801fd5c:	61a3      	str	r3, [r4, #24]
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	bf14      	ite	ne
 801fd62:	2202      	movne	r2, #2
 801fd64:	2201      	moveq	r2, #1
 801fd66:	6122      	str	r2, [r4, #16]
 801fd68:	b1d5      	cbz	r5, 801fda0 <__d2b+0x98>
 801fd6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801fd6e:	4405      	add	r5, r0
 801fd70:	f8c9 5000 	str.w	r5, [r9]
 801fd74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801fd78:	f8c8 0000 	str.w	r0, [r8]
 801fd7c:	4620      	mov	r0, r4
 801fd7e:	b003      	add	sp, #12
 801fd80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fd84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801fd88:	e7d5      	b.n	801fd36 <__d2b+0x2e>
 801fd8a:	6161      	str	r1, [r4, #20]
 801fd8c:	e7e5      	b.n	801fd5a <__d2b+0x52>
 801fd8e:	a801      	add	r0, sp, #4
 801fd90:	f7ff fcde 	bl	801f750 <__lo0bits>
 801fd94:	9b01      	ldr	r3, [sp, #4]
 801fd96:	6163      	str	r3, [r4, #20]
 801fd98:	2201      	movs	r2, #1
 801fd9a:	6122      	str	r2, [r4, #16]
 801fd9c:	3020      	adds	r0, #32
 801fd9e:	e7e3      	b.n	801fd68 <__d2b+0x60>
 801fda0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fda4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801fda8:	f8c9 0000 	str.w	r0, [r9]
 801fdac:	6918      	ldr	r0, [r3, #16]
 801fdae:	f7ff fcaf 	bl	801f710 <__hi0bits>
 801fdb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fdb6:	e7df      	b.n	801fd78 <__d2b+0x70>
 801fdb8:	08022e41 	.word	0x08022e41
 801fdbc:	08022f30 	.word	0x08022f30

0801fdc0 <__ratio>:
 801fdc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdc4:	4688      	mov	r8, r1
 801fdc6:	4669      	mov	r1, sp
 801fdc8:	4681      	mov	r9, r0
 801fdca:	f7ff ff4d 	bl	801fc68 <__b2d>
 801fdce:	a901      	add	r1, sp, #4
 801fdd0:	4640      	mov	r0, r8
 801fdd2:	ec55 4b10 	vmov	r4, r5, d0
 801fdd6:	f7ff ff47 	bl	801fc68 <__b2d>
 801fdda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801fdde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801fde2:	eba3 0c02 	sub.w	ip, r3, r2
 801fde6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801fdea:	1a9b      	subs	r3, r3, r2
 801fdec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801fdf0:	ec51 0b10 	vmov	r0, r1, d0
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	bfd6      	itet	le
 801fdf8:	460a      	movle	r2, r1
 801fdfa:	462a      	movgt	r2, r5
 801fdfc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801fe00:	468b      	mov	fp, r1
 801fe02:	462f      	mov	r7, r5
 801fe04:	bfd4      	ite	le
 801fe06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801fe0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801fe0e:	4620      	mov	r0, r4
 801fe10:	ee10 2a10 	vmov	r2, s0
 801fe14:	465b      	mov	r3, fp
 801fe16:	4639      	mov	r1, r7
 801fe18:	f7e0 fd30 	bl	800087c <__aeabi_ddiv>
 801fe1c:	ec41 0b10 	vmov	d0, r0, r1
 801fe20:	b003      	add	sp, #12
 801fe22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe26 <__copybits>:
 801fe26:	3901      	subs	r1, #1
 801fe28:	b570      	push	{r4, r5, r6, lr}
 801fe2a:	1149      	asrs	r1, r1, #5
 801fe2c:	6914      	ldr	r4, [r2, #16]
 801fe2e:	3101      	adds	r1, #1
 801fe30:	f102 0314 	add.w	r3, r2, #20
 801fe34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801fe38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801fe3c:	1f05      	subs	r5, r0, #4
 801fe3e:	42a3      	cmp	r3, r4
 801fe40:	d30c      	bcc.n	801fe5c <__copybits+0x36>
 801fe42:	1aa3      	subs	r3, r4, r2
 801fe44:	3b11      	subs	r3, #17
 801fe46:	f023 0303 	bic.w	r3, r3, #3
 801fe4a:	3211      	adds	r2, #17
 801fe4c:	42a2      	cmp	r2, r4
 801fe4e:	bf88      	it	hi
 801fe50:	2300      	movhi	r3, #0
 801fe52:	4418      	add	r0, r3
 801fe54:	2300      	movs	r3, #0
 801fe56:	4288      	cmp	r0, r1
 801fe58:	d305      	bcc.n	801fe66 <__copybits+0x40>
 801fe5a:	bd70      	pop	{r4, r5, r6, pc}
 801fe5c:	f853 6b04 	ldr.w	r6, [r3], #4
 801fe60:	f845 6f04 	str.w	r6, [r5, #4]!
 801fe64:	e7eb      	b.n	801fe3e <__copybits+0x18>
 801fe66:	f840 3b04 	str.w	r3, [r0], #4
 801fe6a:	e7f4      	b.n	801fe56 <__copybits+0x30>

0801fe6c <__any_on>:
 801fe6c:	f100 0214 	add.w	r2, r0, #20
 801fe70:	6900      	ldr	r0, [r0, #16]
 801fe72:	114b      	asrs	r3, r1, #5
 801fe74:	4298      	cmp	r0, r3
 801fe76:	b510      	push	{r4, lr}
 801fe78:	db11      	blt.n	801fe9e <__any_on+0x32>
 801fe7a:	dd0a      	ble.n	801fe92 <__any_on+0x26>
 801fe7c:	f011 011f 	ands.w	r1, r1, #31
 801fe80:	d007      	beq.n	801fe92 <__any_on+0x26>
 801fe82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fe86:	fa24 f001 	lsr.w	r0, r4, r1
 801fe8a:	fa00 f101 	lsl.w	r1, r0, r1
 801fe8e:	428c      	cmp	r4, r1
 801fe90:	d10b      	bne.n	801feaa <__any_on+0x3e>
 801fe92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fe96:	4293      	cmp	r3, r2
 801fe98:	d803      	bhi.n	801fea2 <__any_on+0x36>
 801fe9a:	2000      	movs	r0, #0
 801fe9c:	bd10      	pop	{r4, pc}
 801fe9e:	4603      	mov	r3, r0
 801fea0:	e7f7      	b.n	801fe92 <__any_on+0x26>
 801fea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fea6:	2900      	cmp	r1, #0
 801fea8:	d0f5      	beq.n	801fe96 <__any_on+0x2a>
 801feaa:	2001      	movs	r0, #1
 801feac:	e7f6      	b.n	801fe9c <__any_on+0x30>

0801feae <_calloc_r>:
 801feae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801feb0:	fba1 2402 	umull	r2, r4, r1, r2
 801feb4:	b94c      	cbnz	r4, 801feca <_calloc_r+0x1c>
 801feb6:	4611      	mov	r1, r2
 801feb8:	9201      	str	r2, [sp, #4]
 801feba:	f7fb fef3 	bl	801bca4 <_malloc_r>
 801febe:	9a01      	ldr	r2, [sp, #4]
 801fec0:	4605      	mov	r5, r0
 801fec2:	b930      	cbnz	r0, 801fed2 <_calloc_r+0x24>
 801fec4:	4628      	mov	r0, r5
 801fec6:	b003      	add	sp, #12
 801fec8:	bd30      	pop	{r4, r5, pc}
 801feca:	220c      	movs	r2, #12
 801fecc:	6002      	str	r2, [r0, #0]
 801fece:	2500      	movs	r5, #0
 801fed0:	e7f8      	b.n	801fec4 <_calloc_r+0x16>
 801fed2:	4621      	mov	r1, r4
 801fed4:	f7fb fe72 	bl	801bbbc <memset>
 801fed8:	e7f4      	b.n	801fec4 <_calloc_r+0x16>

0801feda <__ssputs_r>:
 801feda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fede:	688e      	ldr	r6, [r1, #8]
 801fee0:	429e      	cmp	r6, r3
 801fee2:	4682      	mov	sl, r0
 801fee4:	460c      	mov	r4, r1
 801fee6:	4690      	mov	r8, r2
 801fee8:	461f      	mov	r7, r3
 801feea:	d838      	bhi.n	801ff5e <__ssputs_r+0x84>
 801feec:	898a      	ldrh	r2, [r1, #12]
 801feee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801fef2:	d032      	beq.n	801ff5a <__ssputs_r+0x80>
 801fef4:	6825      	ldr	r5, [r4, #0]
 801fef6:	6909      	ldr	r1, [r1, #16]
 801fef8:	eba5 0901 	sub.w	r9, r5, r1
 801fefc:	6965      	ldr	r5, [r4, #20]
 801fefe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ff02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ff06:	3301      	adds	r3, #1
 801ff08:	444b      	add	r3, r9
 801ff0a:	106d      	asrs	r5, r5, #1
 801ff0c:	429d      	cmp	r5, r3
 801ff0e:	bf38      	it	cc
 801ff10:	461d      	movcc	r5, r3
 801ff12:	0553      	lsls	r3, r2, #21
 801ff14:	d531      	bpl.n	801ff7a <__ssputs_r+0xa0>
 801ff16:	4629      	mov	r1, r5
 801ff18:	f7fb fec4 	bl	801bca4 <_malloc_r>
 801ff1c:	4606      	mov	r6, r0
 801ff1e:	b950      	cbnz	r0, 801ff36 <__ssputs_r+0x5c>
 801ff20:	230c      	movs	r3, #12
 801ff22:	f8ca 3000 	str.w	r3, [sl]
 801ff26:	89a3      	ldrh	r3, [r4, #12]
 801ff28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ff2c:	81a3      	strh	r3, [r4, #12]
 801ff2e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff36:	6921      	ldr	r1, [r4, #16]
 801ff38:	464a      	mov	r2, r9
 801ff3a:	f7fb fe17 	bl	801bb6c <memcpy>
 801ff3e:	89a3      	ldrh	r3, [r4, #12]
 801ff40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ff44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ff48:	81a3      	strh	r3, [r4, #12]
 801ff4a:	6126      	str	r6, [r4, #16]
 801ff4c:	6165      	str	r5, [r4, #20]
 801ff4e:	444e      	add	r6, r9
 801ff50:	eba5 0509 	sub.w	r5, r5, r9
 801ff54:	6026      	str	r6, [r4, #0]
 801ff56:	60a5      	str	r5, [r4, #8]
 801ff58:	463e      	mov	r6, r7
 801ff5a:	42be      	cmp	r6, r7
 801ff5c:	d900      	bls.n	801ff60 <__ssputs_r+0x86>
 801ff5e:	463e      	mov	r6, r7
 801ff60:	6820      	ldr	r0, [r4, #0]
 801ff62:	4632      	mov	r2, r6
 801ff64:	4641      	mov	r1, r8
 801ff66:	f7fb fe0f 	bl	801bb88 <memmove>
 801ff6a:	68a3      	ldr	r3, [r4, #8]
 801ff6c:	1b9b      	subs	r3, r3, r6
 801ff6e:	60a3      	str	r3, [r4, #8]
 801ff70:	6823      	ldr	r3, [r4, #0]
 801ff72:	4433      	add	r3, r6
 801ff74:	6023      	str	r3, [r4, #0]
 801ff76:	2000      	movs	r0, #0
 801ff78:	e7db      	b.n	801ff32 <__ssputs_r+0x58>
 801ff7a:	462a      	mov	r2, r5
 801ff7c:	f000 fb2e 	bl	80205dc <_realloc_r>
 801ff80:	4606      	mov	r6, r0
 801ff82:	2800      	cmp	r0, #0
 801ff84:	d1e1      	bne.n	801ff4a <__ssputs_r+0x70>
 801ff86:	6921      	ldr	r1, [r4, #16]
 801ff88:	4650      	mov	r0, sl
 801ff8a:	f7fb fe1f 	bl	801bbcc <_free_r>
 801ff8e:	e7c7      	b.n	801ff20 <__ssputs_r+0x46>

0801ff90 <_svfiprintf_r>:
 801ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff94:	4698      	mov	r8, r3
 801ff96:	898b      	ldrh	r3, [r1, #12]
 801ff98:	061b      	lsls	r3, r3, #24
 801ff9a:	b09d      	sub	sp, #116	; 0x74
 801ff9c:	4607      	mov	r7, r0
 801ff9e:	460d      	mov	r5, r1
 801ffa0:	4614      	mov	r4, r2
 801ffa2:	d50e      	bpl.n	801ffc2 <_svfiprintf_r+0x32>
 801ffa4:	690b      	ldr	r3, [r1, #16]
 801ffa6:	b963      	cbnz	r3, 801ffc2 <_svfiprintf_r+0x32>
 801ffa8:	2140      	movs	r1, #64	; 0x40
 801ffaa:	f7fb fe7b 	bl	801bca4 <_malloc_r>
 801ffae:	6028      	str	r0, [r5, #0]
 801ffb0:	6128      	str	r0, [r5, #16]
 801ffb2:	b920      	cbnz	r0, 801ffbe <_svfiprintf_r+0x2e>
 801ffb4:	230c      	movs	r3, #12
 801ffb6:	603b      	str	r3, [r7, #0]
 801ffb8:	f04f 30ff 	mov.w	r0, #4294967295
 801ffbc:	e0d1      	b.n	8020162 <_svfiprintf_r+0x1d2>
 801ffbe:	2340      	movs	r3, #64	; 0x40
 801ffc0:	616b      	str	r3, [r5, #20]
 801ffc2:	2300      	movs	r3, #0
 801ffc4:	9309      	str	r3, [sp, #36]	; 0x24
 801ffc6:	2320      	movs	r3, #32
 801ffc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ffcc:	f8cd 800c 	str.w	r8, [sp, #12]
 801ffd0:	2330      	movs	r3, #48	; 0x30
 801ffd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802017c <_svfiprintf_r+0x1ec>
 801ffd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ffda:	f04f 0901 	mov.w	r9, #1
 801ffde:	4623      	mov	r3, r4
 801ffe0:	469a      	mov	sl, r3
 801ffe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ffe6:	b10a      	cbz	r2, 801ffec <_svfiprintf_r+0x5c>
 801ffe8:	2a25      	cmp	r2, #37	; 0x25
 801ffea:	d1f9      	bne.n	801ffe0 <_svfiprintf_r+0x50>
 801ffec:	ebba 0b04 	subs.w	fp, sl, r4
 801fff0:	d00b      	beq.n	802000a <_svfiprintf_r+0x7a>
 801fff2:	465b      	mov	r3, fp
 801fff4:	4622      	mov	r2, r4
 801fff6:	4629      	mov	r1, r5
 801fff8:	4638      	mov	r0, r7
 801fffa:	f7ff ff6e 	bl	801feda <__ssputs_r>
 801fffe:	3001      	adds	r0, #1
 8020000:	f000 80aa 	beq.w	8020158 <_svfiprintf_r+0x1c8>
 8020004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020006:	445a      	add	r2, fp
 8020008:	9209      	str	r2, [sp, #36]	; 0x24
 802000a:	f89a 3000 	ldrb.w	r3, [sl]
 802000e:	2b00      	cmp	r3, #0
 8020010:	f000 80a2 	beq.w	8020158 <_svfiprintf_r+0x1c8>
 8020014:	2300      	movs	r3, #0
 8020016:	f04f 32ff 	mov.w	r2, #4294967295
 802001a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802001e:	f10a 0a01 	add.w	sl, sl, #1
 8020022:	9304      	str	r3, [sp, #16]
 8020024:	9307      	str	r3, [sp, #28]
 8020026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802002a:	931a      	str	r3, [sp, #104]	; 0x68
 802002c:	4654      	mov	r4, sl
 802002e:	2205      	movs	r2, #5
 8020030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020034:	4851      	ldr	r0, [pc, #324]	; (802017c <_svfiprintf_r+0x1ec>)
 8020036:	f7e0 f8eb 	bl	8000210 <memchr>
 802003a:	9a04      	ldr	r2, [sp, #16]
 802003c:	b9d8      	cbnz	r0, 8020076 <_svfiprintf_r+0xe6>
 802003e:	06d0      	lsls	r0, r2, #27
 8020040:	bf44      	itt	mi
 8020042:	2320      	movmi	r3, #32
 8020044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020048:	0711      	lsls	r1, r2, #28
 802004a:	bf44      	itt	mi
 802004c:	232b      	movmi	r3, #43	; 0x2b
 802004e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020052:	f89a 3000 	ldrb.w	r3, [sl]
 8020056:	2b2a      	cmp	r3, #42	; 0x2a
 8020058:	d015      	beq.n	8020086 <_svfiprintf_r+0xf6>
 802005a:	9a07      	ldr	r2, [sp, #28]
 802005c:	4654      	mov	r4, sl
 802005e:	2000      	movs	r0, #0
 8020060:	f04f 0c0a 	mov.w	ip, #10
 8020064:	4621      	mov	r1, r4
 8020066:	f811 3b01 	ldrb.w	r3, [r1], #1
 802006a:	3b30      	subs	r3, #48	; 0x30
 802006c:	2b09      	cmp	r3, #9
 802006e:	d94e      	bls.n	802010e <_svfiprintf_r+0x17e>
 8020070:	b1b0      	cbz	r0, 80200a0 <_svfiprintf_r+0x110>
 8020072:	9207      	str	r2, [sp, #28]
 8020074:	e014      	b.n	80200a0 <_svfiprintf_r+0x110>
 8020076:	eba0 0308 	sub.w	r3, r0, r8
 802007a:	fa09 f303 	lsl.w	r3, r9, r3
 802007e:	4313      	orrs	r3, r2
 8020080:	9304      	str	r3, [sp, #16]
 8020082:	46a2      	mov	sl, r4
 8020084:	e7d2      	b.n	802002c <_svfiprintf_r+0x9c>
 8020086:	9b03      	ldr	r3, [sp, #12]
 8020088:	1d19      	adds	r1, r3, #4
 802008a:	681b      	ldr	r3, [r3, #0]
 802008c:	9103      	str	r1, [sp, #12]
 802008e:	2b00      	cmp	r3, #0
 8020090:	bfbb      	ittet	lt
 8020092:	425b      	neglt	r3, r3
 8020094:	f042 0202 	orrlt.w	r2, r2, #2
 8020098:	9307      	strge	r3, [sp, #28]
 802009a:	9307      	strlt	r3, [sp, #28]
 802009c:	bfb8      	it	lt
 802009e:	9204      	strlt	r2, [sp, #16]
 80200a0:	7823      	ldrb	r3, [r4, #0]
 80200a2:	2b2e      	cmp	r3, #46	; 0x2e
 80200a4:	d10c      	bne.n	80200c0 <_svfiprintf_r+0x130>
 80200a6:	7863      	ldrb	r3, [r4, #1]
 80200a8:	2b2a      	cmp	r3, #42	; 0x2a
 80200aa:	d135      	bne.n	8020118 <_svfiprintf_r+0x188>
 80200ac:	9b03      	ldr	r3, [sp, #12]
 80200ae:	1d1a      	adds	r2, r3, #4
 80200b0:	681b      	ldr	r3, [r3, #0]
 80200b2:	9203      	str	r2, [sp, #12]
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	bfb8      	it	lt
 80200b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80200bc:	3402      	adds	r4, #2
 80200be:	9305      	str	r3, [sp, #20]
 80200c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802018c <_svfiprintf_r+0x1fc>
 80200c4:	7821      	ldrb	r1, [r4, #0]
 80200c6:	2203      	movs	r2, #3
 80200c8:	4650      	mov	r0, sl
 80200ca:	f7e0 f8a1 	bl	8000210 <memchr>
 80200ce:	b140      	cbz	r0, 80200e2 <_svfiprintf_r+0x152>
 80200d0:	2340      	movs	r3, #64	; 0x40
 80200d2:	eba0 000a 	sub.w	r0, r0, sl
 80200d6:	fa03 f000 	lsl.w	r0, r3, r0
 80200da:	9b04      	ldr	r3, [sp, #16]
 80200dc:	4303      	orrs	r3, r0
 80200de:	3401      	adds	r4, #1
 80200e0:	9304      	str	r3, [sp, #16]
 80200e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80200e6:	4826      	ldr	r0, [pc, #152]	; (8020180 <_svfiprintf_r+0x1f0>)
 80200e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80200ec:	2206      	movs	r2, #6
 80200ee:	f7e0 f88f 	bl	8000210 <memchr>
 80200f2:	2800      	cmp	r0, #0
 80200f4:	d038      	beq.n	8020168 <_svfiprintf_r+0x1d8>
 80200f6:	4b23      	ldr	r3, [pc, #140]	; (8020184 <_svfiprintf_r+0x1f4>)
 80200f8:	bb1b      	cbnz	r3, 8020142 <_svfiprintf_r+0x1b2>
 80200fa:	9b03      	ldr	r3, [sp, #12]
 80200fc:	3307      	adds	r3, #7
 80200fe:	f023 0307 	bic.w	r3, r3, #7
 8020102:	3308      	adds	r3, #8
 8020104:	9303      	str	r3, [sp, #12]
 8020106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020108:	4433      	add	r3, r6
 802010a:	9309      	str	r3, [sp, #36]	; 0x24
 802010c:	e767      	b.n	801ffde <_svfiprintf_r+0x4e>
 802010e:	fb0c 3202 	mla	r2, ip, r2, r3
 8020112:	460c      	mov	r4, r1
 8020114:	2001      	movs	r0, #1
 8020116:	e7a5      	b.n	8020064 <_svfiprintf_r+0xd4>
 8020118:	2300      	movs	r3, #0
 802011a:	3401      	adds	r4, #1
 802011c:	9305      	str	r3, [sp, #20]
 802011e:	4619      	mov	r1, r3
 8020120:	f04f 0c0a 	mov.w	ip, #10
 8020124:	4620      	mov	r0, r4
 8020126:	f810 2b01 	ldrb.w	r2, [r0], #1
 802012a:	3a30      	subs	r2, #48	; 0x30
 802012c:	2a09      	cmp	r2, #9
 802012e:	d903      	bls.n	8020138 <_svfiprintf_r+0x1a8>
 8020130:	2b00      	cmp	r3, #0
 8020132:	d0c5      	beq.n	80200c0 <_svfiprintf_r+0x130>
 8020134:	9105      	str	r1, [sp, #20]
 8020136:	e7c3      	b.n	80200c0 <_svfiprintf_r+0x130>
 8020138:	fb0c 2101 	mla	r1, ip, r1, r2
 802013c:	4604      	mov	r4, r0
 802013e:	2301      	movs	r3, #1
 8020140:	e7f0      	b.n	8020124 <_svfiprintf_r+0x194>
 8020142:	ab03      	add	r3, sp, #12
 8020144:	9300      	str	r3, [sp, #0]
 8020146:	462a      	mov	r2, r5
 8020148:	4b0f      	ldr	r3, [pc, #60]	; (8020188 <_svfiprintf_r+0x1f8>)
 802014a:	a904      	add	r1, sp, #16
 802014c:	4638      	mov	r0, r7
 802014e:	f7fb febd 	bl	801becc <_printf_float>
 8020152:	1c42      	adds	r2, r0, #1
 8020154:	4606      	mov	r6, r0
 8020156:	d1d6      	bne.n	8020106 <_svfiprintf_r+0x176>
 8020158:	89ab      	ldrh	r3, [r5, #12]
 802015a:	065b      	lsls	r3, r3, #25
 802015c:	f53f af2c 	bmi.w	801ffb8 <_svfiprintf_r+0x28>
 8020160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020162:	b01d      	add	sp, #116	; 0x74
 8020164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020168:	ab03      	add	r3, sp, #12
 802016a:	9300      	str	r3, [sp, #0]
 802016c:	462a      	mov	r2, r5
 802016e:	4b06      	ldr	r3, [pc, #24]	; (8020188 <_svfiprintf_r+0x1f8>)
 8020170:	a904      	add	r1, sp, #16
 8020172:	4638      	mov	r0, r7
 8020174:	f7fc f94e 	bl	801c414 <_printf_i>
 8020178:	e7eb      	b.n	8020152 <_svfiprintf_r+0x1c2>
 802017a:	bf00      	nop
 802017c:	0802308c 	.word	0x0802308c
 8020180:	08023096 	.word	0x08023096
 8020184:	0801becd 	.word	0x0801becd
 8020188:	0801fedb 	.word	0x0801fedb
 802018c:	08023092 	.word	0x08023092

08020190 <__sfputc_r>:
 8020190:	6893      	ldr	r3, [r2, #8]
 8020192:	3b01      	subs	r3, #1
 8020194:	2b00      	cmp	r3, #0
 8020196:	b410      	push	{r4}
 8020198:	6093      	str	r3, [r2, #8]
 802019a:	da08      	bge.n	80201ae <__sfputc_r+0x1e>
 802019c:	6994      	ldr	r4, [r2, #24]
 802019e:	42a3      	cmp	r3, r4
 80201a0:	db01      	blt.n	80201a6 <__sfputc_r+0x16>
 80201a2:	290a      	cmp	r1, #10
 80201a4:	d103      	bne.n	80201ae <__sfputc_r+0x1e>
 80201a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80201aa:	f7fd bca5 	b.w	801daf8 <__swbuf_r>
 80201ae:	6813      	ldr	r3, [r2, #0]
 80201b0:	1c58      	adds	r0, r3, #1
 80201b2:	6010      	str	r0, [r2, #0]
 80201b4:	7019      	strb	r1, [r3, #0]
 80201b6:	4608      	mov	r0, r1
 80201b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80201bc:	4770      	bx	lr

080201be <__sfputs_r>:
 80201be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201c0:	4606      	mov	r6, r0
 80201c2:	460f      	mov	r7, r1
 80201c4:	4614      	mov	r4, r2
 80201c6:	18d5      	adds	r5, r2, r3
 80201c8:	42ac      	cmp	r4, r5
 80201ca:	d101      	bne.n	80201d0 <__sfputs_r+0x12>
 80201cc:	2000      	movs	r0, #0
 80201ce:	e007      	b.n	80201e0 <__sfputs_r+0x22>
 80201d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80201d4:	463a      	mov	r2, r7
 80201d6:	4630      	mov	r0, r6
 80201d8:	f7ff ffda 	bl	8020190 <__sfputc_r>
 80201dc:	1c43      	adds	r3, r0, #1
 80201de:	d1f3      	bne.n	80201c8 <__sfputs_r+0xa>
 80201e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080201e4 <_vfiprintf_r>:
 80201e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201e8:	460d      	mov	r5, r1
 80201ea:	b09d      	sub	sp, #116	; 0x74
 80201ec:	4614      	mov	r4, r2
 80201ee:	4698      	mov	r8, r3
 80201f0:	4606      	mov	r6, r0
 80201f2:	b118      	cbz	r0, 80201fc <_vfiprintf_r+0x18>
 80201f4:	6983      	ldr	r3, [r0, #24]
 80201f6:	b90b      	cbnz	r3, 80201fc <_vfiprintf_r+0x18>
 80201f8:	f7fe fcf2 	bl	801ebe0 <__sinit>
 80201fc:	4b89      	ldr	r3, [pc, #548]	; (8020424 <_vfiprintf_r+0x240>)
 80201fe:	429d      	cmp	r5, r3
 8020200:	d11b      	bne.n	802023a <_vfiprintf_r+0x56>
 8020202:	6875      	ldr	r5, [r6, #4]
 8020204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020206:	07d9      	lsls	r1, r3, #31
 8020208:	d405      	bmi.n	8020216 <_vfiprintf_r+0x32>
 802020a:	89ab      	ldrh	r3, [r5, #12]
 802020c:	059a      	lsls	r2, r3, #22
 802020e:	d402      	bmi.n	8020216 <_vfiprintf_r+0x32>
 8020210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020212:	f7fb fca0 	bl	801bb56 <__retarget_lock_acquire_recursive>
 8020216:	89ab      	ldrh	r3, [r5, #12]
 8020218:	071b      	lsls	r3, r3, #28
 802021a:	d501      	bpl.n	8020220 <_vfiprintf_r+0x3c>
 802021c:	692b      	ldr	r3, [r5, #16]
 802021e:	b9eb      	cbnz	r3, 802025c <_vfiprintf_r+0x78>
 8020220:	4629      	mov	r1, r5
 8020222:	4630      	mov	r0, r6
 8020224:	f7fd fcba 	bl	801db9c <__swsetup_r>
 8020228:	b1c0      	cbz	r0, 802025c <_vfiprintf_r+0x78>
 802022a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802022c:	07dc      	lsls	r4, r3, #31
 802022e:	d50e      	bpl.n	802024e <_vfiprintf_r+0x6a>
 8020230:	f04f 30ff 	mov.w	r0, #4294967295
 8020234:	b01d      	add	sp, #116	; 0x74
 8020236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802023a:	4b7b      	ldr	r3, [pc, #492]	; (8020428 <_vfiprintf_r+0x244>)
 802023c:	429d      	cmp	r5, r3
 802023e:	d101      	bne.n	8020244 <_vfiprintf_r+0x60>
 8020240:	68b5      	ldr	r5, [r6, #8]
 8020242:	e7df      	b.n	8020204 <_vfiprintf_r+0x20>
 8020244:	4b79      	ldr	r3, [pc, #484]	; (802042c <_vfiprintf_r+0x248>)
 8020246:	429d      	cmp	r5, r3
 8020248:	bf08      	it	eq
 802024a:	68f5      	ldreq	r5, [r6, #12]
 802024c:	e7da      	b.n	8020204 <_vfiprintf_r+0x20>
 802024e:	89ab      	ldrh	r3, [r5, #12]
 8020250:	0598      	lsls	r0, r3, #22
 8020252:	d4ed      	bmi.n	8020230 <_vfiprintf_r+0x4c>
 8020254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020256:	f7fb fc7f 	bl	801bb58 <__retarget_lock_release_recursive>
 802025a:	e7e9      	b.n	8020230 <_vfiprintf_r+0x4c>
 802025c:	2300      	movs	r3, #0
 802025e:	9309      	str	r3, [sp, #36]	; 0x24
 8020260:	2320      	movs	r3, #32
 8020262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020266:	f8cd 800c 	str.w	r8, [sp, #12]
 802026a:	2330      	movs	r3, #48	; 0x30
 802026c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020430 <_vfiprintf_r+0x24c>
 8020270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020274:	f04f 0901 	mov.w	r9, #1
 8020278:	4623      	mov	r3, r4
 802027a:	469a      	mov	sl, r3
 802027c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020280:	b10a      	cbz	r2, 8020286 <_vfiprintf_r+0xa2>
 8020282:	2a25      	cmp	r2, #37	; 0x25
 8020284:	d1f9      	bne.n	802027a <_vfiprintf_r+0x96>
 8020286:	ebba 0b04 	subs.w	fp, sl, r4
 802028a:	d00b      	beq.n	80202a4 <_vfiprintf_r+0xc0>
 802028c:	465b      	mov	r3, fp
 802028e:	4622      	mov	r2, r4
 8020290:	4629      	mov	r1, r5
 8020292:	4630      	mov	r0, r6
 8020294:	f7ff ff93 	bl	80201be <__sfputs_r>
 8020298:	3001      	adds	r0, #1
 802029a:	f000 80aa 	beq.w	80203f2 <_vfiprintf_r+0x20e>
 802029e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80202a0:	445a      	add	r2, fp
 80202a2:	9209      	str	r2, [sp, #36]	; 0x24
 80202a4:	f89a 3000 	ldrb.w	r3, [sl]
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	f000 80a2 	beq.w	80203f2 <_vfiprintf_r+0x20e>
 80202ae:	2300      	movs	r3, #0
 80202b0:	f04f 32ff 	mov.w	r2, #4294967295
 80202b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80202b8:	f10a 0a01 	add.w	sl, sl, #1
 80202bc:	9304      	str	r3, [sp, #16]
 80202be:	9307      	str	r3, [sp, #28]
 80202c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80202c4:	931a      	str	r3, [sp, #104]	; 0x68
 80202c6:	4654      	mov	r4, sl
 80202c8:	2205      	movs	r2, #5
 80202ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80202ce:	4858      	ldr	r0, [pc, #352]	; (8020430 <_vfiprintf_r+0x24c>)
 80202d0:	f7df ff9e 	bl	8000210 <memchr>
 80202d4:	9a04      	ldr	r2, [sp, #16]
 80202d6:	b9d8      	cbnz	r0, 8020310 <_vfiprintf_r+0x12c>
 80202d8:	06d1      	lsls	r1, r2, #27
 80202da:	bf44      	itt	mi
 80202dc:	2320      	movmi	r3, #32
 80202de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80202e2:	0713      	lsls	r3, r2, #28
 80202e4:	bf44      	itt	mi
 80202e6:	232b      	movmi	r3, #43	; 0x2b
 80202e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80202ec:	f89a 3000 	ldrb.w	r3, [sl]
 80202f0:	2b2a      	cmp	r3, #42	; 0x2a
 80202f2:	d015      	beq.n	8020320 <_vfiprintf_r+0x13c>
 80202f4:	9a07      	ldr	r2, [sp, #28]
 80202f6:	4654      	mov	r4, sl
 80202f8:	2000      	movs	r0, #0
 80202fa:	f04f 0c0a 	mov.w	ip, #10
 80202fe:	4621      	mov	r1, r4
 8020300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020304:	3b30      	subs	r3, #48	; 0x30
 8020306:	2b09      	cmp	r3, #9
 8020308:	d94e      	bls.n	80203a8 <_vfiprintf_r+0x1c4>
 802030a:	b1b0      	cbz	r0, 802033a <_vfiprintf_r+0x156>
 802030c:	9207      	str	r2, [sp, #28]
 802030e:	e014      	b.n	802033a <_vfiprintf_r+0x156>
 8020310:	eba0 0308 	sub.w	r3, r0, r8
 8020314:	fa09 f303 	lsl.w	r3, r9, r3
 8020318:	4313      	orrs	r3, r2
 802031a:	9304      	str	r3, [sp, #16]
 802031c:	46a2      	mov	sl, r4
 802031e:	e7d2      	b.n	80202c6 <_vfiprintf_r+0xe2>
 8020320:	9b03      	ldr	r3, [sp, #12]
 8020322:	1d19      	adds	r1, r3, #4
 8020324:	681b      	ldr	r3, [r3, #0]
 8020326:	9103      	str	r1, [sp, #12]
 8020328:	2b00      	cmp	r3, #0
 802032a:	bfbb      	ittet	lt
 802032c:	425b      	neglt	r3, r3
 802032e:	f042 0202 	orrlt.w	r2, r2, #2
 8020332:	9307      	strge	r3, [sp, #28]
 8020334:	9307      	strlt	r3, [sp, #28]
 8020336:	bfb8      	it	lt
 8020338:	9204      	strlt	r2, [sp, #16]
 802033a:	7823      	ldrb	r3, [r4, #0]
 802033c:	2b2e      	cmp	r3, #46	; 0x2e
 802033e:	d10c      	bne.n	802035a <_vfiprintf_r+0x176>
 8020340:	7863      	ldrb	r3, [r4, #1]
 8020342:	2b2a      	cmp	r3, #42	; 0x2a
 8020344:	d135      	bne.n	80203b2 <_vfiprintf_r+0x1ce>
 8020346:	9b03      	ldr	r3, [sp, #12]
 8020348:	1d1a      	adds	r2, r3, #4
 802034a:	681b      	ldr	r3, [r3, #0]
 802034c:	9203      	str	r2, [sp, #12]
 802034e:	2b00      	cmp	r3, #0
 8020350:	bfb8      	it	lt
 8020352:	f04f 33ff 	movlt.w	r3, #4294967295
 8020356:	3402      	adds	r4, #2
 8020358:	9305      	str	r3, [sp, #20]
 802035a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020440 <_vfiprintf_r+0x25c>
 802035e:	7821      	ldrb	r1, [r4, #0]
 8020360:	2203      	movs	r2, #3
 8020362:	4650      	mov	r0, sl
 8020364:	f7df ff54 	bl	8000210 <memchr>
 8020368:	b140      	cbz	r0, 802037c <_vfiprintf_r+0x198>
 802036a:	2340      	movs	r3, #64	; 0x40
 802036c:	eba0 000a 	sub.w	r0, r0, sl
 8020370:	fa03 f000 	lsl.w	r0, r3, r0
 8020374:	9b04      	ldr	r3, [sp, #16]
 8020376:	4303      	orrs	r3, r0
 8020378:	3401      	adds	r4, #1
 802037a:	9304      	str	r3, [sp, #16]
 802037c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020380:	482c      	ldr	r0, [pc, #176]	; (8020434 <_vfiprintf_r+0x250>)
 8020382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020386:	2206      	movs	r2, #6
 8020388:	f7df ff42 	bl	8000210 <memchr>
 802038c:	2800      	cmp	r0, #0
 802038e:	d03f      	beq.n	8020410 <_vfiprintf_r+0x22c>
 8020390:	4b29      	ldr	r3, [pc, #164]	; (8020438 <_vfiprintf_r+0x254>)
 8020392:	bb1b      	cbnz	r3, 80203dc <_vfiprintf_r+0x1f8>
 8020394:	9b03      	ldr	r3, [sp, #12]
 8020396:	3307      	adds	r3, #7
 8020398:	f023 0307 	bic.w	r3, r3, #7
 802039c:	3308      	adds	r3, #8
 802039e:	9303      	str	r3, [sp, #12]
 80203a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203a2:	443b      	add	r3, r7
 80203a4:	9309      	str	r3, [sp, #36]	; 0x24
 80203a6:	e767      	b.n	8020278 <_vfiprintf_r+0x94>
 80203a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80203ac:	460c      	mov	r4, r1
 80203ae:	2001      	movs	r0, #1
 80203b0:	e7a5      	b.n	80202fe <_vfiprintf_r+0x11a>
 80203b2:	2300      	movs	r3, #0
 80203b4:	3401      	adds	r4, #1
 80203b6:	9305      	str	r3, [sp, #20]
 80203b8:	4619      	mov	r1, r3
 80203ba:	f04f 0c0a 	mov.w	ip, #10
 80203be:	4620      	mov	r0, r4
 80203c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80203c4:	3a30      	subs	r2, #48	; 0x30
 80203c6:	2a09      	cmp	r2, #9
 80203c8:	d903      	bls.n	80203d2 <_vfiprintf_r+0x1ee>
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d0c5      	beq.n	802035a <_vfiprintf_r+0x176>
 80203ce:	9105      	str	r1, [sp, #20]
 80203d0:	e7c3      	b.n	802035a <_vfiprintf_r+0x176>
 80203d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80203d6:	4604      	mov	r4, r0
 80203d8:	2301      	movs	r3, #1
 80203da:	e7f0      	b.n	80203be <_vfiprintf_r+0x1da>
 80203dc:	ab03      	add	r3, sp, #12
 80203de:	9300      	str	r3, [sp, #0]
 80203e0:	462a      	mov	r2, r5
 80203e2:	4b16      	ldr	r3, [pc, #88]	; (802043c <_vfiprintf_r+0x258>)
 80203e4:	a904      	add	r1, sp, #16
 80203e6:	4630      	mov	r0, r6
 80203e8:	f7fb fd70 	bl	801becc <_printf_float>
 80203ec:	4607      	mov	r7, r0
 80203ee:	1c78      	adds	r0, r7, #1
 80203f0:	d1d6      	bne.n	80203a0 <_vfiprintf_r+0x1bc>
 80203f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80203f4:	07d9      	lsls	r1, r3, #31
 80203f6:	d405      	bmi.n	8020404 <_vfiprintf_r+0x220>
 80203f8:	89ab      	ldrh	r3, [r5, #12]
 80203fa:	059a      	lsls	r2, r3, #22
 80203fc:	d402      	bmi.n	8020404 <_vfiprintf_r+0x220>
 80203fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020400:	f7fb fbaa 	bl	801bb58 <__retarget_lock_release_recursive>
 8020404:	89ab      	ldrh	r3, [r5, #12]
 8020406:	065b      	lsls	r3, r3, #25
 8020408:	f53f af12 	bmi.w	8020230 <_vfiprintf_r+0x4c>
 802040c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802040e:	e711      	b.n	8020234 <_vfiprintf_r+0x50>
 8020410:	ab03      	add	r3, sp, #12
 8020412:	9300      	str	r3, [sp, #0]
 8020414:	462a      	mov	r2, r5
 8020416:	4b09      	ldr	r3, [pc, #36]	; (802043c <_vfiprintf_r+0x258>)
 8020418:	a904      	add	r1, sp, #16
 802041a:	4630      	mov	r0, r6
 802041c:	f7fb fffa 	bl	801c414 <_printf_i>
 8020420:	e7e4      	b.n	80203ec <_vfiprintf_r+0x208>
 8020422:	bf00      	nop
 8020424:	08022e74 	.word	0x08022e74
 8020428:	08022e94 	.word	0x08022e94
 802042c:	08022e54 	.word	0x08022e54
 8020430:	0802308c 	.word	0x0802308c
 8020434:	08023096 	.word	0x08023096
 8020438:	0801becd 	.word	0x0801becd
 802043c:	080201bf 	.word	0x080201bf
 8020440:	08023092 	.word	0x08023092
 8020444:	00000000 	.word	0x00000000

08020448 <nan>:
 8020448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020450 <nan+0x8>
 802044c:	4770      	bx	lr
 802044e:	bf00      	nop
 8020450:	00000000 	.word	0x00000000
 8020454:	7ff80000 	.word	0x7ff80000

08020458 <__sread>:
 8020458:	b510      	push	{r4, lr}
 802045a:	460c      	mov	r4, r1
 802045c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020460:	f000 f8ec 	bl	802063c <_read_r>
 8020464:	2800      	cmp	r0, #0
 8020466:	bfab      	itete	ge
 8020468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802046a:	89a3      	ldrhlt	r3, [r4, #12]
 802046c:	181b      	addge	r3, r3, r0
 802046e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020472:	bfac      	ite	ge
 8020474:	6563      	strge	r3, [r4, #84]	; 0x54
 8020476:	81a3      	strhlt	r3, [r4, #12]
 8020478:	bd10      	pop	{r4, pc}

0802047a <__swrite>:
 802047a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802047e:	461f      	mov	r7, r3
 8020480:	898b      	ldrh	r3, [r1, #12]
 8020482:	05db      	lsls	r3, r3, #23
 8020484:	4605      	mov	r5, r0
 8020486:	460c      	mov	r4, r1
 8020488:	4616      	mov	r6, r2
 802048a:	d505      	bpl.n	8020498 <__swrite+0x1e>
 802048c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020490:	2302      	movs	r3, #2
 8020492:	2200      	movs	r2, #0
 8020494:	f000 f890 	bl	80205b8 <_lseek_r>
 8020498:	89a3      	ldrh	r3, [r4, #12]
 802049a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802049e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80204a2:	81a3      	strh	r3, [r4, #12]
 80204a4:	4632      	mov	r2, r6
 80204a6:	463b      	mov	r3, r7
 80204a8:	4628      	mov	r0, r5
 80204aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80204ae:	f000 b837 	b.w	8020520 <_write_r>

080204b2 <__sseek>:
 80204b2:	b510      	push	{r4, lr}
 80204b4:	460c      	mov	r4, r1
 80204b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204ba:	f000 f87d 	bl	80205b8 <_lseek_r>
 80204be:	1c43      	adds	r3, r0, #1
 80204c0:	89a3      	ldrh	r3, [r4, #12]
 80204c2:	bf15      	itete	ne
 80204c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80204c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80204ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80204ce:	81a3      	strheq	r3, [r4, #12]
 80204d0:	bf18      	it	ne
 80204d2:	81a3      	strhne	r3, [r4, #12]
 80204d4:	bd10      	pop	{r4, pc}

080204d6 <__sclose>:
 80204d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204da:	f000 b83b 	b.w	8020554 <_close_r>

080204de <strncmp>:
 80204de:	b510      	push	{r4, lr}
 80204e0:	b17a      	cbz	r2, 8020502 <strncmp+0x24>
 80204e2:	4603      	mov	r3, r0
 80204e4:	3901      	subs	r1, #1
 80204e6:	1884      	adds	r4, r0, r2
 80204e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80204ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80204f0:	4290      	cmp	r0, r2
 80204f2:	d101      	bne.n	80204f8 <strncmp+0x1a>
 80204f4:	42a3      	cmp	r3, r4
 80204f6:	d101      	bne.n	80204fc <strncmp+0x1e>
 80204f8:	1a80      	subs	r0, r0, r2
 80204fa:	bd10      	pop	{r4, pc}
 80204fc:	2800      	cmp	r0, #0
 80204fe:	d1f3      	bne.n	80204e8 <strncmp+0xa>
 8020500:	e7fa      	b.n	80204f8 <strncmp+0x1a>
 8020502:	4610      	mov	r0, r2
 8020504:	e7f9      	b.n	80204fa <strncmp+0x1c>

08020506 <__ascii_wctomb>:
 8020506:	b149      	cbz	r1, 802051c <__ascii_wctomb+0x16>
 8020508:	2aff      	cmp	r2, #255	; 0xff
 802050a:	bf85      	ittet	hi
 802050c:	238a      	movhi	r3, #138	; 0x8a
 802050e:	6003      	strhi	r3, [r0, #0]
 8020510:	700a      	strbls	r2, [r1, #0]
 8020512:	f04f 30ff 	movhi.w	r0, #4294967295
 8020516:	bf98      	it	ls
 8020518:	2001      	movls	r0, #1
 802051a:	4770      	bx	lr
 802051c:	4608      	mov	r0, r1
 802051e:	4770      	bx	lr

08020520 <_write_r>:
 8020520:	b538      	push	{r3, r4, r5, lr}
 8020522:	4d07      	ldr	r5, [pc, #28]	; (8020540 <_write_r+0x20>)
 8020524:	4604      	mov	r4, r0
 8020526:	4608      	mov	r0, r1
 8020528:	4611      	mov	r1, r2
 802052a:	2200      	movs	r2, #0
 802052c:	602a      	str	r2, [r5, #0]
 802052e:	461a      	mov	r2, r3
 8020530:	f7e3 fa57 	bl	80039e2 <_write>
 8020534:	1c43      	adds	r3, r0, #1
 8020536:	d102      	bne.n	802053e <_write_r+0x1e>
 8020538:	682b      	ldr	r3, [r5, #0]
 802053a:	b103      	cbz	r3, 802053e <_write_r+0x1e>
 802053c:	6023      	str	r3, [r4, #0]
 802053e:	bd38      	pop	{r3, r4, r5, pc}
 8020540:	200036a4 	.word	0x200036a4

08020544 <abort>:
 8020544:	b508      	push	{r3, lr}
 8020546:	2006      	movs	r0, #6
 8020548:	f000 f8b2 	bl	80206b0 <raise>
 802054c:	2001      	movs	r0, #1
 802054e:	f7e3 fa21 	bl	8003994 <_exit>
	...

08020554 <_close_r>:
 8020554:	b538      	push	{r3, r4, r5, lr}
 8020556:	4d06      	ldr	r5, [pc, #24]	; (8020570 <_close_r+0x1c>)
 8020558:	2300      	movs	r3, #0
 802055a:	4604      	mov	r4, r0
 802055c:	4608      	mov	r0, r1
 802055e:	602b      	str	r3, [r5, #0]
 8020560:	f7e3 fa5b 	bl	8003a1a <_close>
 8020564:	1c43      	adds	r3, r0, #1
 8020566:	d102      	bne.n	802056e <_close_r+0x1a>
 8020568:	682b      	ldr	r3, [r5, #0]
 802056a:	b103      	cbz	r3, 802056e <_close_r+0x1a>
 802056c:	6023      	str	r3, [r4, #0]
 802056e:	bd38      	pop	{r3, r4, r5, pc}
 8020570:	200036a4 	.word	0x200036a4

08020574 <_fstat_r>:
 8020574:	b538      	push	{r3, r4, r5, lr}
 8020576:	4d07      	ldr	r5, [pc, #28]	; (8020594 <_fstat_r+0x20>)
 8020578:	2300      	movs	r3, #0
 802057a:	4604      	mov	r4, r0
 802057c:	4608      	mov	r0, r1
 802057e:	4611      	mov	r1, r2
 8020580:	602b      	str	r3, [r5, #0]
 8020582:	f7e3 fa56 	bl	8003a32 <_fstat>
 8020586:	1c43      	adds	r3, r0, #1
 8020588:	d102      	bne.n	8020590 <_fstat_r+0x1c>
 802058a:	682b      	ldr	r3, [r5, #0]
 802058c:	b103      	cbz	r3, 8020590 <_fstat_r+0x1c>
 802058e:	6023      	str	r3, [r4, #0]
 8020590:	bd38      	pop	{r3, r4, r5, pc}
 8020592:	bf00      	nop
 8020594:	200036a4 	.word	0x200036a4

08020598 <_isatty_r>:
 8020598:	b538      	push	{r3, r4, r5, lr}
 802059a:	4d06      	ldr	r5, [pc, #24]	; (80205b4 <_isatty_r+0x1c>)
 802059c:	2300      	movs	r3, #0
 802059e:	4604      	mov	r4, r0
 80205a0:	4608      	mov	r0, r1
 80205a2:	602b      	str	r3, [r5, #0]
 80205a4:	f7e3 fa55 	bl	8003a52 <_isatty>
 80205a8:	1c43      	adds	r3, r0, #1
 80205aa:	d102      	bne.n	80205b2 <_isatty_r+0x1a>
 80205ac:	682b      	ldr	r3, [r5, #0]
 80205ae:	b103      	cbz	r3, 80205b2 <_isatty_r+0x1a>
 80205b0:	6023      	str	r3, [r4, #0]
 80205b2:	bd38      	pop	{r3, r4, r5, pc}
 80205b4:	200036a4 	.word	0x200036a4

080205b8 <_lseek_r>:
 80205b8:	b538      	push	{r3, r4, r5, lr}
 80205ba:	4d07      	ldr	r5, [pc, #28]	; (80205d8 <_lseek_r+0x20>)
 80205bc:	4604      	mov	r4, r0
 80205be:	4608      	mov	r0, r1
 80205c0:	4611      	mov	r1, r2
 80205c2:	2200      	movs	r2, #0
 80205c4:	602a      	str	r2, [r5, #0]
 80205c6:	461a      	mov	r2, r3
 80205c8:	f7e3 fa4e 	bl	8003a68 <_lseek>
 80205cc:	1c43      	adds	r3, r0, #1
 80205ce:	d102      	bne.n	80205d6 <_lseek_r+0x1e>
 80205d0:	682b      	ldr	r3, [r5, #0]
 80205d2:	b103      	cbz	r3, 80205d6 <_lseek_r+0x1e>
 80205d4:	6023      	str	r3, [r4, #0]
 80205d6:	bd38      	pop	{r3, r4, r5, pc}
 80205d8:	200036a4 	.word	0x200036a4

080205dc <_realloc_r>:
 80205dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80205e0:	4680      	mov	r8, r0
 80205e2:	4614      	mov	r4, r2
 80205e4:	460e      	mov	r6, r1
 80205e6:	b921      	cbnz	r1, 80205f2 <_realloc_r+0x16>
 80205e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80205ec:	4611      	mov	r1, r2
 80205ee:	f7fb bb59 	b.w	801bca4 <_malloc_r>
 80205f2:	b92a      	cbnz	r2, 8020600 <_realloc_r+0x24>
 80205f4:	f7fb faea 	bl	801bbcc <_free_r>
 80205f8:	4625      	mov	r5, r4
 80205fa:	4628      	mov	r0, r5
 80205fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020600:	f000 f872 	bl	80206e8 <_malloc_usable_size_r>
 8020604:	4284      	cmp	r4, r0
 8020606:	4607      	mov	r7, r0
 8020608:	d802      	bhi.n	8020610 <_realloc_r+0x34>
 802060a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802060e:	d812      	bhi.n	8020636 <_realloc_r+0x5a>
 8020610:	4621      	mov	r1, r4
 8020612:	4640      	mov	r0, r8
 8020614:	f7fb fb46 	bl	801bca4 <_malloc_r>
 8020618:	4605      	mov	r5, r0
 802061a:	2800      	cmp	r0, #0
 802061c:	d0ed      	beq.n	80205fa <_realloc_r+0x1e>
 802061e:	42bc      	cmp	r4, r7
 8020620:	4622      	mov	r2, r4
 8020622:	4631      	mov	r1, r6
 8020624:	bf28      	it	cs
 8020626:	463a      	movcs	r2, r7
 8020628:	f7fb faa0 	bl	801bb6c <memcpy>
 802062c:	4631      	mov	r1, r6
 802062e:	4640      	mov	r0, r8
 8020630:	f7fb facc 	bl	801bbcc <_free_r>
 8020634:	e7e1      	b.n	80205fa <_realloc_r+0x1e>
 8020636:	4635      	mov	r5, r6
 8020638:	e7df      	b.n	80205fa <_realloc_r+0x1e>
	...

0802063c <_read_r>:
 802063c:	b538      	push	{r3, r4, r5, lr}
 802063e:	4d07      	ldr	r5, [pc, #28]	; (802065c <_read_r+0x20>)
 8020640:	4604      	mov	r4, r0
 8020642:	4608      	mov	r0, r1
 8020644:	4611      	mov	r1, r2
 8020646:	2200      	movs	r2, #0
 8020648:	602a      	str	r2, [r5, #0]
 802064a:	461a      	mov	r2, r3
 802064c:	f7e3 f9ac 	bl	80039a8 <_read>
 8020650:	1c43      	adds	r3, r0, #1
 8020652:	d102      	bne.n	802065a <_read_r+0x1e>
 8020654:	682b      	ldr	r3, [r5, #0]
 8020656:	b103      	cbz	r3, 802065a <_read_r+0x1e>
 8020658:	6023      	str	r3, [r4, #0]
 802065a:	bd38      	pop	{r3, r4, r5, pc}
 802065c:	200036a4 	.word	0x200036a4

08020660 <_raise_r>:
 8020660:	291f      	cmp	r1, #31
 8020662:	b538      	push	{r3, r4, r5, lr}
 8020664:	4604      	mov	r4, r0
 8020666:	460d      	mov	r5, r1
 8020668:	d904      	bls.n	8020674 <_raise_r+0x14>
 802066a:	2316      	movs	r3, #22
 802066c:	6003      	str	r3, [r0, #0]
 802066e:	f04f 30ff 	mov.w	r0, #4294967295
 8020672:	bd38      	pop	{r3, r4, r5, pc}
 8020674:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020676:	b112      	cbz	r2, 802067e <_raise_r+0x1e>
 8020678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802067c:	b94b      	cbnz	r3, 8020692 <_raise_r+0x32>
 802067e:	4620      	mov	r0, r4
 8020680:	f000 f830 	bl	80206e4 <_getpid_r>
 8020684:	462a      	mov	r2, r5
 8020686:	4601      	mov	r1, r0
 8020688:	4620      	mov	r0, r4
 802068a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802068e:	f000 b817 	b.w	80206c0 <_kill_r>
 8020692:	2b01      	cmp	r3, #1
 8020694:	d00a      	beq.n	80206ac <_raise_r+0x4c>
 8020696:	1c59      	adds	r1, r3, #1
 8020698:	d103      	bne.n	80206a2 <_raise_r+0x42>
 802069a:	2316      	movs	r3, #22
 802069c:	6003      	str	r3, [r0, #0]
 802069e:	2001      	movs	r0, #1
 80206a0:	e7e7      	b.n	8020672 <_raise_r+0x12>
 80206a2:	2400      	movs	r4, #0
 80206a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80206a8:	4628      	mov	r0, r5
 80206aa:	4798      	blx	r3
 80206ac:	2000      	movs	r0, #0
 80206ae:	e7e0      	b.n	8020672 <_raise_r+0x12>

080206b0 <raise>:
 80206b0:	4b02      	ldr	r3, [pc, #8]	; (80206bc <raise+0xc>)
 80206b2:	4601      	mov	r1, r0
 80206b4:	6818      	ldr	r0, [r3, #0]
 80206b6:	f7ff bfd3 	b.w	8020660 <_raise_r>
 80206ba:	bf00      	nop
 80206bc:	20000164 	.word	0x20000164

080206c0 <_kill_r>:
 80206c0:	b538      	push	{r3, r4, r5, lr}
 80206c2:	4d07      	ldr	r5, [pc, #28]	; (80206e0 <_kill_r+0x20>)
 80206c4:	2300      	movs	r3, #0
 80206c6:	4604      	mov	r4, r0
 80206c8:	4608      	mov	r0, r1
 80206ca:	4611      	mov	r1, r2
 80206cc:	602b      	str	r3, [r5, #0]
 80206ce:	f7e3 f951 	bl	8003974 <_kill>
 80206d2:	1c43      	adds	r3, r0, #1
 80206d4:	d102      	bne.n	80206dc <_kill_r+0x1c>
 80206d6:	682b      	ldr	r3, [r5, #0]
 80206d8:	b103      	cbz	r3, 80206dc <_kill_r+0x1c>
 80206da:	6023      	str	r3, [r4, #0]
 80206dc:	bd38      	pop	{r3, r4, r5, pc}
 80206de:	bf00      	nop
 80206e0:	200036a4 	.word	0x200036a4

080206e4 <_getpid_r>:
 80206e4:	f7e3 b93e 	b.w	8003964 <_getpid>

080206e8 <_malloc_usable_size_r>:
 80206e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80206ec:	1f18      	subs	r0, r3, #4
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	bfbc      	itt	lt
 80206f2:	580b      	ldrlt	r3, [r1, r0]
 80206f4:	18c0      	addlt	r0, r0, r3
 80206f6:	4770      	bx	lr

080206f8 <_init>:
 80206f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206fa:	bf00      	nop
 80206fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80206fe:	bc08      	pop	{r3}
 8020700:	469e      	mov	lr, r3
 8020702:	4770      	bx	lr

08020704 <_fini>:
 8020704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020706:	bf00      	nop
 8020708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802070a:	bc08      	pop	{r3}
 802070c:	469e      	mov	lr, r3
 802070e:	4770      	bx	lr
